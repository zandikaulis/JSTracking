webpackJsonp([59], {
    "+8VM": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("V5M+"),
            o = n("YmWy"),
            s = Object(i.a)(null, function(e) {
                return Object(a.bindActionCreators)({
                    onClose: r.c
                }, e)
            })(o.a);
        n.d(t, "a", function() {
            return s
        })
    },
    "+R+X": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedFriends"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "friends"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "query RecommendedFriends {\ncurrentUser {\nid\nrecommendations {\nfriends {\nuser {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+YN9": function(e, t) {},
    "+Znq": function(e, t, n) {
        "use strict";
        var i = n("jetF");
        n.d(t, "a", function() {
            return i.a
        })
    },
    "+e5i": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendRequestsNotification_Clear"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clearUnreadFriendRequests"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 87
            }
        };
        n.loc.source = {
            body: "mutation FriendRequestsNotification_Clear {\nclearUnreadFriendRequests {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+gWs": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 264
            }
        };
        n.loc.source = {
            body: "query WhisperThread($id: ID!) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nunreadMessagesCount\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+p4h": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeBalloon_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "promotion"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "newPrice"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "oldPrice"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountType"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "discountValue"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "endsAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "paidUpgrade"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "price"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "startsAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "gift"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isGift"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "gifter"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 536
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeBalloon_User($login: String!) {\nuser(login: $login) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\ndisplayName\nname\nemotes {\nid\n}\nself {\npromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\nendsAt\npaidUpgrade {\nprice\nstartsAt\n}\ngift {\nisGift\ngifter {\nid\ndisplayName\n}\n}\n}\n}\n}\ncurrentUser {\nid\nlogin\nhasPrime\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+xm8": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.c = function(e, t) {
            var n = {
                action: t.action,
                auth_ux: "modal",
                type: t.type,
                nonce: t.nonce
            };
            a.n.tracking.track(e, n)
        }, t.b = function() {
            for (var e = "", t = 0; t < r; t++) {
                var n = Math.floor(Math.random() * o.length);
                e += o.charAt(n)
            }
            return e
        };
        var i, a = n("6sO2"),
            r = 30,
            o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        ! function(e) {
            e.BitsLandingPage = "bits_landing_page", e.ChatLoginButton = "chat_login_button", e.ChatSignupButton = "chat_signup_button", e.Chat = "chat", e.ChannelUpsellLogin = "channel_upsell_login", e.ChannelUpsellSignup = "channel_upsell_signup", e.ClipsManager = "clips_manager", e.DashboardPage = "dashboard_page", e.DirectoryFollowButton = "directory-follow-button", e.EventFollowButton = "event_follow_button", e.FeedReactionToggle = "feed_reaction_toggle", e.FollowButton = "follow-button", e.FollowGameButton = "follow-game-button", e.FollowingPage = "following_page", e.FriendAdd = "friend_add", e.RaidJoin = "raid_join", e.ReportHoster = "report_hoster", e.ReportChannel = "report_channel", e.SettingsPage = "settings_page", e.SubsLandingPage = "subs_landing_Page", e.TopNavLoginButton = "topnav_login_button", e.TopNavSignupButton = "topnav_signup_button", e.TrendingEmotesLogin = "trending-emotes-login", e.TrendingEmotesSignup = "trending-emotes-signup", e.VODComment = "vod_comment", e.VODOptions = "vod_options"
        }(i || (i = {}))
    },
    "+xsx": function(e, t) {},
    "/9PY": function(e, t) {},
    "/OR/": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "activity"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Playing"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Streaming"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Watching"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 290
            }
        };
        n.loc.source = {
            body: "query UserCard($id: ID!) {\nuser(id: $id) {\nid\nlogin\nbannerImageURL\ndisplayName\ndescription\nprofileImageURL(width: 70)\navailability\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "/UH7": function(e, t, n) {
        "use strict";

        function i(e) {
            if (0 === e.openedIDs.length) return 0;
            for (var t = 0, n = 0, i = e.openedIDs; n < i.length; n++) {
                var a = i[n],
                    r = e.byID[a];
                r.hidden || (t += r.collapsed ? m : h)
            }
            return t
        }

        function a(e) {
            var t = e.openedIDs.slice(),
                n = t.pop();
            return n && e.focusedID === n && t.length > 0 && (t.pop(), t.push(n)), d(e, function(e) {
                return e.openedIDs
            }, function() {
                return t
            })
        }

        function r(e, t) {
            var n = e.orderedIDs.filter(function(t) {
                return !e.openedIDs.includes(t)
            });
            return n.length > 0 ? o(e, n[0], t) : e
        }

        function o(e, t, n) {
            var r = n - i(e),
                o = u.__assign({}, e);
            return o.openedIDs.includes(t) || (r < h && (o = a(o)), o = d(o, function(e) {
                return e.openedIDs
            }, function(e) {
                return e.push(t), e
            })), o
        }

        function s(e, t, n) {
            if (!e.byID[t]) return e;
            var r = d(e, function(e) {
                return e.byID
            }, function(e) {
                return e[t].collapsed = !1, e
            });
            r.focusedID = t;
            return i(e) > n && (r = a(r)), r
        }
        var l = n("2KeS"),
            c = n("6sO2"),
            u = n("TToO"),
            d = n("LIeg"),
            p = n("uXDg"),
            m = 234,
            h = 310,
            g = n("5k1t");
        t.b = function(e, t) {
            return e.whispers ? e.whispers.display.byID[t] : null
        }, t.a = function(e, t) {
            return e.whispers.notifications.byThreadID[t] || []
        };
        var f = Object(l.combineReducers)({
            display: function(e, t) {
                switch (void 0 === e && (e = {
                    byID: {},
                    orderedIDs: [],
                    openedIDs: [],
                    focusedID: ""
                }), t.type) {
                    case p.f:
                        var n = (c = u.__assign({}, e)).byID[t.data.threadID],
                            l = c.openedIDs.includes(t.data.threadID);
                        return n || (c = d(c, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.push(t.data.threadID), e
                        }), c = d(c, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.data.threadID] = t.data, e
                        })), c.openedIDs.includes(t.data.threadID) && !c.byID[t.data.threadID].hidden || (c.byID[t.data.threadID].hidden = t.data.hidden), t.data.ignoreCollapseIfOpen || t.data.collapsed || (c.focusedID = t.data.threadID), c = o(c, t.data.threadID, t.contentWidth), (!l || l && !t.data.ignoreCollapseIfOpen) && (t.data.collapsed || (c = s(c, t.data.threadID, t.contentWidth))), c;
                    case p.b:
                        if (!e.byID[t.threadID]) return e;
                        var c = d(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return delete e[t.threadID], e
                        });
                        return c = d(c, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), c = d(c, function(e) {
                            return e.openedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), e.focusedID === t.threadID && (c.focusedID = c.openedIDs[0]), r(c, t.contentWidth);
                    case p.c:
                        return e.byID[t.threadID] ? (e.focusedID === t.threadID && (e.focusedID = ""), d(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.threadID].collapsed = !0, e
                        })) : e;
                    case p.d:
                        return s(e, t.threadID, t.contentWidth);
                    case p.e:
                        return d(e, function(e) {
                            return e.focusedID
                        }, function() {
                            return t.threadID
                        });
                    case p.g:
                        return d(e, function(e) {
                            return e.focusedID
                        }, function(e) {
                            return e === t.threadID ? "" : e
                        });
                    case p.a:
                        var m = i(e);
                        if (m > t.contentWidth) {
                            if (e.openedIDs.length <= 1) return e;
                            for (var g = u.__assign({}, e); m > t.contentWidth && g.openedIDs.length > 1;) m = i(g = a(g));
                            return g
                        }
                        if (t.contentWidth - m >= h) {
                            var f = Math.floor((t.contentWidth - m) / h),
                                v = Math.min(f, e.orderedIDs.length - e.openedIDs.length);
                            if (0 === v) return e;
                            g = u.__assign({}, e);
                            for (var b = 0; b < v; b++)
                                if ((g = r(g, t.contentWidth)).openedIDs.length > 1)
                                    for (var y = g.openedIDs, k = y.length, S = 0, _ = g.orderedIDs; S < _.length; S++) {
                                        var w = _[S];
                                        if (y[k - 1] === w) {
                                            var E = y.splice(k - 2, 1);
                                            y.push(E[0]);
                                            break
                                        }
                                        if (y[k - 2] === w) break
                                    }
                                return g
                        }
                        return e;
                    default:
                        return e
                }
            },
            notifications: function(e, t) {
                switch (void 0 === e && (e = {
                    byThreadID: {}
                }), t.type) {
                    case g.a:
                        return e.byThreadID[t.threadID] ? d(e, function(e) {
                            return e.byThreadID[t.threadID]
                        }, function(e) {
                            return [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }].concat(e)
                        }) : d(e, function(e) {
                            return e.byThreadID
                        }, function(e) {
                            return u.__assign((n = {}, n[t.threadID] = [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }], n), e);
                            var n
                        });
                    default:
                        return e
                }
            }
        });
        c.n.store.registerReducer("whispers", f)
    },
    "/Urv": function(e, t) {},
    "/Vp/": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return !e.isLoggedIn && e.location.pathname === i
        };
        var i = "/"
    },
    "/wlI": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = encodeURIComponent(JSON.stringify(e)).replace(/%([0-9A-F]{2})/g, function(e, t) {
                    return String.fromCharCode(Number("0x" + t))
                }),
                n = btoa(t);
            return "data=" + encodeURIComponent(n)
        }
    },
    0: function(e, t) {},
    "0+3B": function(e, t) {},
    "08LF": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("Odds"),
            l = n("7Qq+"),
            c = (n("RSqL"), "euCookieDismiss"),
            u = "eu-cookie-notification__link",
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.content = Object(r.d)("This site uses cookies. By continuing to browse the site, you are agreeing to our use of cookies. Review our {CookiePolicyLink} for more details.", {
                        CookiePolicyLink: a.createElement("a", {
                            "data-a-target": u,
                            className: "eu-cookie-alert__link",
                            href: "https://www.twitch.tv/p/cookie-policy",
                            target: "_blank"
                        }, "Cookie Policy")
                    }, "EUCookieAlert"), t.dismiss = function() {
                        r.k.set(c, !0), t.props.remove()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.checkForDismissedKey() && this.dismiss()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !e.data.loading && e.data.requestInfo && !1 === e.data.requestInfo.fromEU && this.dismiss()
                }, t.prototype.render = function() {
                    return this.props.data.requestInfo && this.props.data.requestInfo.fromEU || this.props.data.error ? a.createElement(s._29, {
                        onClose: this.dismiss
                    }, a.createElement(s.V, {
                        className: "eu-cookie-alert__body",
                        display: s.H.Flex,
                        alignItems: s.c.Center
                    }, a.createElement(s._19, {
                        textAlign: s._24.Center,
                        background: s.m.Base,
                        margin: {
                            x: "auto"
                        }
                    }, a.createElement(s._23, {
                        type: s._28.Span,
                        color: s.F.Base,
                        fontSize: s.L.Size5
                    }, this.content)))) : null
                }, t.prototype.checkForDismissedKey = function() {
                    return r.k.get(c, !1)
                }, t = i.__decorate([Object(o.a)(l)], t)
            }(a.Component),
            p = (n("h9f9"), [d]),
            m = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        toastsToShow: p.map(function(e, t) {
                            return {
                                Component: e,
                                props: {
                                    remove: function() {
                                        return n.removeToastAtIndex(t)
                                    }
                                }
                            }
                        })
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.toastsToShow.map(function(e, t) {
                        var n = e.Component,
                            r = e.props;
                        return a.createElement(s.V, {
                            key: "" + n.name + t,
                            margin: {
                                bottom: 2
                            }
                        }, a.createElement(n, i.__assign({}, r)))
                    });
                    return 0 === e.length ? null : a.createElement(s.V, {
                        className: "toast-manager__container",
                        position: s._4.Fixed,
                        flexDirection: s.J.Column,
                        alignItems: s.c.Center,
                        justifyContent: s.U.Center
                    }, e)
                }, t.prototype.removeToastAtIndex = function(e) {
                    var t = this.state.toastsToShow.slice();
                    t.splice(e, 1), this.setState({
                        toastsToShow: t
                    })
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return m
        })
    },
    "0Mfl": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = "https://www.amazon.com/twitchmerch?channel=tpn&ref_=tw_or_web_tpn_ms"
    },
    "0Ng3": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ImpactExperimentManager_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isAffiliate"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPartner"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 116
            }
        };
        n.loc.source = {
            body: "query ImpactExperimentManager_CurrentUser {\ncurrentUser {\nid\nroles {\nisAffiliate\nisPartner\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0Yyt": function(e, t) {},
    "0nzt": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.ui.theatreModeEnabled ? r.a.Dark : e.ui.theme
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("NXs7"),
            o = n("VAT8"),
            s = n("7enT");
        a.n.store.registerReducer("ui", function(e, t) {
            switch (void 0 === e && (e = function() {
                var e = a.k.get(a.n.config.layoutCacheKey, {
                        resource: {
                            isSocialColumnClosedByUserAction: !1,
                            isRightColumnClosedByUserAction: !1
                        },
                        time: Date.now()
                    }),
                    t = Object(o.b)();
                return {
                    persistentPlayerEnabled: a.k.get(a.n.config.persistentPlayerEnabledKey, !0),
                    persistentPlayerIsPersisting: !1,
                    rightColumnExpanded: !e.resource.isRightColumnClosedByUserAction,
                    sideNavExpanded: !e.resource.isSocialColumnClosedByUserAction,
                    theatreModeEnabled: !1,
                    theme: t
                }
            }()), t.type) {
                case s.e:
                    return i.__assign({}, e, {
                        rightColumnExpanded: !0
                    });
                case s.d:
                    return i.__assign({}, e, {
                        rightColumnExpanded: !1
                    });
                case s.g:
                    return i.__assign({}, e, {
                        sideNavExpanded: !0
                    });
                case s.f:
                    return i.__assign({}, e, {
                        sideNavExpanded: !1
                    });
                case s.i:
                    return i.__assign({}, e, {
                        theatreModeEnabled: !0
                    });
                case s.h:
                    return i.__assign({}, e, {
                        theatreModeEnabled: !1
                    });
                case s.j:
                    return i.__assign({}, e, {
                        theme: t.theme
                    });
                case s.c:
                    return i.__assign({}, e, {
                        persistentPlayerEnabled: !e.persistentPlayerEnabled
                    });
                case s.b:
                    return i.__assign({}, e, {
                        persistentPlayerIsPersisting: !1
                    });
                case s.a:
                    return i.__assign({}, e, {
                        persistentPlayerIsPersisting: !0
                    });
                default:
                    return e
            }
        })
    },
    1: function(e, t) {},
    "1EXI": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_UserCommunities"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "directories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "directoryType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_UserCommunities($userId: ID!) {\nuser(id: $userId) {\nid\ndirectories {\nnodes {\nid\nname\ndisplayName\ndirectoryType\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1Krm": function(e, t) {},
    "1Mw/": function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("U7vG"),
            o = n("DtWM"),
            s = n("RH2O"),
            l = n("2KeS"),
            c = n("Aj/L"),
            u = n("5k1t"),
            d = n("HW6M"),
            p = n("BhyV"),
            m = n("6sO2"),
            h = n("rCmJ"),
            g = n("yWCw"),
            f = n("7vx8"),
            v = n("RweG"),
            b = n("6BvN"),
            y = n("Ldv2"),
            k = n("oIkB"),
            S = n("HZww"),
            _ = n("HM6l"),
            w = n("c3pS"),
            E = n("ieBa"),
            C = n("F8kA"),
            N = n("+Znq"),
            T = n("u8SD"),
            O = n("4Dne"),
            I = n("djIP"),
            D = n("vH/s"),
            L = n("2Hj/"),
            x = n("emkL"),
            R = n("Kxgf"),
            F = n("7miU"),
            P = n("Odds"),
            U = n("82Ta"),
            M = n("yTC+"),
            A = "whispers-report-harassment-button",
            V = "whispers-report-spam-button",
            j = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderReportSpamButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(m.d)("Report Spam", "ThreadSettings");
                        return r.createElement(P.T, {
                            "data-test-selector": V,
                            ariaLabel: e,
                            onClick: t.reportUserSpam
                        }, r.createElement(P.V, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.renderReportHarassmentButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(m.d)("Report Harrasment", "ThreadSettings");
                        return r.createElement(P.T, {
                            "data-test-selector": A,
                            ariaLabel: e,
                            onClick: t.reportUserHarassment
                        }, r.createElement(P.V, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.onChannelRedirect = function() {
                        t.props.collapseThread && t.props.collapseThread()
                    }, t.toggleMutethread = function() {
                        var e = !t.props.isMuted,
                            n = a.__assign({}, Object(k.a)({
                                threadID: t.props.threadID,
                                isMuted: !t.props.isMuted
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            id: t.props.threadID,
                                            isMuted: e,
                                            __typename: "WhisperThread"
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                        t.props.setMuteThread && (e ? Object(F.j)(t.props.threadID) : Object(F.k)(t.props.threadID), t.props.setMuteThread(n))
                    }, t.reportUserHarassment = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return a.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(k.a)({
                                            targetUserID: this.props.userID,
                                            reason: I.c.Harassment,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), m.i.error(t, "Failed to report whisper thread for harassment.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.reportUserSpam = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return a.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(k.a)({
                                            targetUserID: this.props.userID,
                                            reason: I.c.Spam,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), m.i.error(t, "Failed to report whisper thread for spam.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.blockUser = function() {
                        t.props.blockUserMutation(t.props.userID, I.b.Other, I.a.Whisper, t.props.currentUser), t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.unblockUser = function() {
                        t.props.unblockUserMutation(t.props.userID, t.props.currentUser), t.props.onUnblock && t.props.onUnblock(t.props.threadID)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.displayName || this.props.login,
                        t = this.props.isMuted ? Object(m.d)("Turn Notifications On", "ThreadSettings") : Object(m.d)("Turn Notifications Off", "ThreadSettings"),
                        n = Object(m.d)("Go to {displayName}'s Channel", {
                            displayName: e
                        }, "ThreadSettings");
                    return r.createElement(P.V, {
                        display: P.H.Flex,
                        flexDirection: P.J.Column,
                        margin: 1
                    }, r.createElement(P.T, {
                        ariaLabel: t,
                        onClick: this.toggleMutethread
                    }, r.createElement(P.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)), r.createElement(P._19, {
                        borderBottom: !0,
                        margin: {
                            y: 1,
                            left: .5
                        }
                    }), this.renderBlockButton(), this.renderReportHarassmentButton(), this.renderReportSpamButton(), r.createElement(P.T, {
                        linkTo: "/" + this.props.login,
                        onClick: this.onChannelRedirect,
                        ariaLabel: n
                    }, r.createElement(P.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, n)))
                }, t.prototype.renderBlockButton = function() {
                    var e, t, n = this.props.displayName || this.props.login;
                    return this.isBlocked ? (e = Object(m.d)("Unblock {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.unblockUser) : (e = Object(m.d)("Block {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.blockUser), r.createElement(P.T, {
                        "data-test-selector": "whispers-block-user-button",
                        ariaLabel: e,
                        onClick: t
                    }, r.createElement(P.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, Object.defineProperty(t.prototype, "isBlocked", {
                    get: function() {
                        var e = this;
                        return !(!this.props.currentUser.blockedUsers || !this.props.currentUser.blockedUsers.find(function(t) {
                            return t.id === e.props.userID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "currentUserDataID", {
                    get: function() {
                        return m.n.apollo.client.dataIdFromObject ? m.n.apollo.client.dataIdFromObject(this.props.currentUser) || "" : ""
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            H = Object(p.compose)(Object(f.a)(M, {
                name: "setMuteThread"
            }), Object(f.a)(U, {
                name: "reportWhisperThread"
            }), Object(T.a)(), Object(R.a)())(j),
            B = n("GxF8"),
            z = n("N5sm"),
            W = n("l4QG"),
            q = n("P0T5"),
            G = (n("+xsx"), "report-as-spam-button"),
            Q = "mark-not-spam-button",
            K = "dismiss-prompt-button",
            $ = "spam-prompt-pending-target",
            Z = "spam-prompt-reported-target",
            Y = {
                displayName: "???",
                login: "???",
                displayBadges: [],
                id: ""
            },
            J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        potentialSpamResolution: "pending"
                    }, t.renderPotentialSpamPrompt = function() {
                        if (t.props.spamInfo && "low" !== t.props.spamInfo.likelihood && null === t.props.spamInfo.lastMarkedNotSpamAt) {
                            if ("pending" === t.state.potentialSpamResolution) return r.createElement(P.V, {
                                "data-a-target": $,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, r.createElement(P._19, {
                                background: P.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, r.createElement(P.V, {
                                display: P.H.InlineBlock,
                                margin: .5
                            }, r.createElement(P._23, {
                                type: P._28.Span,
                                fontSize: P.L.Size6,
                                color: P.F.Alt2
                            }, Object(m.d)("It looks like this conversation triggered our spam detector. If it is spam, please report it!", "ThreadHeader"))), r.createElement(P.V, {
                                display: P.H.InlineBlock,
                                margin: .5
                            }, r.createElement(P.u, {
                                "data-a-target": G,
                                type: P.z.Alert,
                                onClick: t.reportSpam,
                                size: P.x.Small
                            }, Object(m.d)("Report spam", "ThreadHeader"))), r.createElement(P.V, {
                                display: P.H.InlineBlock,
                                margin: .5
                            }, r.createElement(P.u, {
                                "data-a-target": Q,
                                onClick: t.markNotSpam,
                                size: P.x.Small
                            }, Object(m.d)("This is not spam", "ThreadHeader")))));
                            if ("reported" === t.state.potentialSpamResolution && t.interlocutor.displayName) return r.createElement(P.V, {
                                "data-a-target": Z,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, r.createElement(P._19, {
                                background: P.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, r.createElement(P.V, {
                                display: P.H.InlineBlock,
                                margin: .5
                            }, r.createElement(P._23, {
                                type: P._28.Span,
                                fontSize: P.L.Size6,
                                color: P.F.Alt2
                            }, Object(m.d)("Thank you for helping us fight spam. We've blocked {user} from sending you further whispers. You can undo this from the Whisper Settings Menu.", {
                                user: t.interlocutor.displayName
                            }, "ThreadHeader"))), r.createElement(P.V, {
                                display: P.H.InlineBlock,
                                margin: .5
                            }, r.createElement(P.u, {
                                "data-a-target": K,
                                type: P.z.Text,
                                onClick: t.dismissSpamPrompt,
                                size: P.x.Small
                            }, Object(m.d)("Dismiss", "ThreadHeader")))))
                        }
                        return null
                    }, t.reportSpam = function() {
                        t.props.reportUserMutation(t.interlocutor.id, I.c.Spam, t.props.threadID), t.props.blockUserMutation(t.interlocutor.id, I.b.Other, I.a.Whisper, t.props.participants.currentUser), t.props.setThreadSpamStatusMutation(t.props.threadID, !0), Object(q.l)(t.interlocutor.login, q.a.SpamPropmt), t.setState({
                            potentialSpamResolution: "reported"
                        })
                    }, t.markNotSpam = function() {
                        t.props.setThreadSpamStatusMutation(t.props.threadID, !1), Object(q.o)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.dismissSpamPrompt = function() {
                        t.props.onBlock && t.props.onBlock(t.props.threadID), Object(q.n)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.onSettingsClick = function(e) {
                        e.stopPropagation()
                    }, t.onPresenceClick = function(e, n) {
                        n.stopPropagation();
                        var i = t.props.participants.currentUser && t.props.participants.currentUser.friends.edges.find(function(e) {
                            return e.node.id === t.interlocutor.id
                        });
                        t.props.participants.user && i && i.activity ? Object(O.b)({
                            context: e,
                            friendActivity: i.activity,
                            friendLogin: t.props.participants.user.login
                        }) : m.i.warn("[ThreadHeader] Attempted to track presence click without required data.")
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = d({
                            "thread-header__title-bar-container": !0,
                            "thread-header__title-bar-container--highlighted": this.props.isHighlighted,
                            "thread-header__title-bar-container--focused": this.props.isFocused
                        }),
                        n = d({
                            "thread-header": !0,
                            "thread-header--collapsed": this.props.isCollapsed
                        }),
                        i = Object(m.d)("Close", "WhisperThreadHeader"),
                        a = Object(m.d)("Settings", "WhisperThreadHeader");
                    if (this.props.isLoading || !this.props.participants.currentUser || !this.props.participants.user) return r.createElement(P.V, {
                        className: t,
                        display: P.H.Flex,
                        justifyContent: P.U.Between,
                        fullWidth: !0,
                        alignItems: P.c.Center,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        flexShrink: 0,
                        flexGrow: 0,
                        flexWrap: P.K.NoWrap
                    }, r.createElement(P._3, {
                        height: 20,
                        width: 80
                    }), r.createElement(P.V, {
                        display: P.H.Flex
                    }, r.createElement(P.v, {
                        ariaLabel: i,
                        icon: P._11.RemoveTag,
                        "data-a-target": "whispers-thread__close-button-" + this.props.threadID,
                        onClick: this.props.onClose
                    })));
                    var o = null,
                        s = null,
                        l = null,
                        c = null,
                        u = this.props.participants.currentUser && this.props.participants.currentUser.friends.edges.find(function(t) {
                            return t.node.id === e.interlocutor.id
                        });
                    if (u && (s = r.createElement(P.V, {
                            margin: {
                                left: 1
                            },
                            display: P.H.Flex,
                            alignItems: P.c.Center
                        }, r.createElement(P._5, {
                            status: function(e) {
                                switch (e) {
                                    case W.a.Online:
                                        return P._6.Online;
                                    case W.a.Away:
                                    case W.a.Idle:
                                        return P._6.Away;
                                    case W.a.Busy:
                                        return P._6.Busy;
                                    case W.a.Offline:
                                    case W.a.Invisible:
                                    default:
                                        return P._6.Offline
                                }
                            }(u.availability)
                        })), u.activity)) {
                        var p = Object(L.c)(u.activity, !0),
                            h = null,
                            g = Object(L.d)(this.props.participants.user.login, u.activity);
                        if (g && (h = {
                                pathname: g,
                                state: {
                                    content: D.PageviewContent.Presence,
                                    medium: D.PageviewMedium.Whispers
                                }
                            }), h) {
                            var f = d({
                                "thread-header__activity-link--highlighted": this.props.isHighlighted
                            });
                            l = r.createElement(C.a, {
                                className: f,
                                title: Object(L.c)(u.activity) || "",
                                onClick: this.onPresenceClick.bind(this, O.a.WhisperHeaderLink),
                                to: h,
                                "data-test-selector": "whispers-thread__presence-link"
                            }, p)
                        } else l = p;
                        this.props.isCollapsed || (c = r.createElement(P.V, {
                            padding: {
                                right: .5
                            }
                        }, r.createElement(x.a, {
                            link: h,
                            onClick: this.onPresenceClick.bind(this, O.a.WhisperHeaderButton),
                            shouldHollowOverlay: this.props.isHighlighted
                        })))
                    }!this.props.isCollapsed && this.props.participants.currentUser && (o = r.createElement(N.a, null, r.createElement(P.v, {
                        ariaLabel: a,
                        icon: P._11.Gear,
                        overlay: this.props.isHighlighted
                    }), r.createElement(P.p, {
                        direction: P.q.BottomRight,
                        offsetX: "0.5rem"
                    }, r.createElement(H, {
                        login: this.interlocutor.login,
                        displayName: this.interlocutor.displayName,
                        currentUser: this.props.participants.currentUser,
                        userID: this.interlocutor.id,
                        isMuted: this.props.isMuted,
                        threadID: this.props.threadID,
                        collapseThread: this.props.collapse,
                        onBlock: this.props.onBlock,
                        onUnblock: this.props.onUnblock
                    }))));
                    var v = this.interlocutor.displayBadges.map(function(e) {
                        return r.createElement(P.Q, {
                            key: e.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, r.createElement("img", {
                            alt: e.title,
                            title: e.title,
                            className: "thread-header__badge",
                            src: e.imageURL
                        }))
                    });
                    return r.createElement(P.V, {
                        className: n,
                        position: P._4.Relative,
                        fullWidth: !0
                    }, r.createElement("div", {
                        className: "thread-header__click-area",
                        onClick: this.props.onHeaderClick,
                        "data-a-target": "thread-header__click-area"
                    }, r.createElement(P.V, {
                        className: t,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        alignItems: P.c.Center,
                        flexGrow: 1,
                        display: P.H.Flex,
                        "data-a-target": "whisper-thread__title-bar-" + this.props.threadID,
                        "data-click-out-id": "thread-expand-close",
                        flexWrap: P.K.NoWrap
                    }, r.createElement(P.V, {
                        fullHeight: !0,
                        flexGrow: 1,
                        display: P.H.Flex,
                        flexDirection: P.J.Column
                    }, r.createElement(P.V, {
                        display: P.H.Flex,
                        flexGrow: 1,
                        alignItems: P.c.Center,
                        flexWrap: P.K.NoWrap,
                        padding: {
                            right: 1
                        }
                    }, v, r.createElement(P._23, {
                        color: this.props.isHighlighted ? P.F.Overlay : P.F.Base,
                        type: P._28.Span,
                        bold: !0,
                        ellipsis: !0
                    }, this.interlocutor.displayName), s), r.createElement(P._19, {
                        className: "thread-header__activity",
                        color: this.props.isHighlighted ? P.F.Overlay : P.F.Base,
                        padding: {
                            right: 1
                        },
                        overflow: P._0.Hidden
                    }, l)), r.createElement(P.V, {
                        display: P.H.Flex,
                        flexShrink: 0,
                        flexDirection: P.J.Row,
                        alignItems: P.c.Center
                    }, c, r.createElement("div", {
                        onClick: this.onSettingsClick
                    }, o), r.createElement(P.v, {
                        ariaLabel: i,
                        icon: P._11.RemoveTag,
                        "data-a-target": "thread-header__close-button-" + this.props.threadID,
                        onClick: this.props.onClose,
                        overlay: this.props.isHighlighted
                    })))), this.renderPotentialSpamPrompt())
                }, Object.defineProperty(t.prototype, "interlocutor", {
                    get: function() {
                        return this.props.participants.user || Y
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            X = Object(l.compose)(Object(T.a)(), function() {
                var e = this;
                return Object(f.a)(B, {
                    props: function(t) {
                        return {
                            reportUserMutation: function(n, i, r) {
                                return a.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return a.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            reason: i,
                                                            threadID: r
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return a.sent(), [3, 4];
                                            case 3:
                                                return e = a.sent(), m.i.error(e, "Unable to report user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), function() {
                var e = this;
                return Object(f.a)(z, {
                    props: function(t) {
                        return {
                            setThreadSpamStatusMutation: function(n, i) {
                                return a.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return a.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            threadID: n,
                                                            isSpam: i
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return a.sent(), [3, 4];
                                            case 3:
                                                return e = a.sent(), m.i.error(e, "Unable to modify threads spam status user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(J),
            ee = n("/UH7"),
            te = n("zCIC"),
            ne = n("Th9g");
        ! function(e) {
            e[e.Timestamp = 0] = "Timestamp", e[e.Whisper = 1] = "Whisper", e[e.Warning = 2] = "Warning", e[e.NewMessages = 3] = "NewMessages", e[e.Notification = 4] = "Notification"
        }(i || (i = {}));
        n("vRhQ");
        var ie = n("hvzu"),
            ae = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case i.Timestamp:
                            return r.createElement(P._19, {
                                className: "thread-message__timestamp",
                                color: P.F.Alt2,
                                fontSize: P.L.Size7
                            }, Object(ie.d)(e));
                        case i.Warning:
                            return r.createElement(P._19, {
                                className: "thread-message__warning",
                                color: P.F.Alt2
                            }, Object(ie.e)());
                        case i.Whisper:
                            return r.createElement(P.V, {
                                className: "thread-message__message"
                            }, Object(ie.f)(e));
                        case i.NewMessages:
                            return r.createElement(P._19, {
                                className: "thread-message__new-messages",
                                color: P.F.OverlayAlt,
                                fontSize: P.L.Size7
                            }, Object(ie.b)());
                        case i.Notification:
                            return r.createElement(P.V, {
                                className: "thread-message__notification"
                            }, Object(ie.c)(e));
                        default:
                            return null
                    }
                }, t
            }(r.Component),
            re = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0
                    }, t.loadMore = function() {
                        var e = t.scroll.scrollContent.scrollHeight;
                        return t.setState({
                            prevScrollHeight: e
                        }), t.props.loadMore()
                    }, t.renderMessages = function(e) {
                        return e.map(function(e, n) {
                            return r.createElement(ae, {
                                message: e,
                                key: t.generateMessageKey(e, n.toString())
                            })
                        })
                    }, t.getMessages = function() {
                        var e = t.props.unreadMessagesCount;
                        return t.props.thread.messages.edges.map(function(e) {
                            return {
                                type: i.Whisper,
                                content: e.node.content.content,
                                from: t.props.participantsByID[+e.node.from.id],
                                emotes: e.node.content.emotes,
                                id: e.node.id,
                                sentAt: new Date(e.node.sentAt),
                                editedAt: e.node.editedAt,
                                deletedAt: e.node.deletedAt
                            }
                        }).reduce(function(n, i, a, r) {
                            if (t.notificationsFor(i).forEach(function(e) {
                                    n.push(e)
                                }), n.push(i), 0 == --e && n.push(t.createNewMessagesIndicator()), 0 === a);
                            else if (a < r.length - 1) {
                                var o = r[a + 1];
                                !i.deletedAt && t.shouldAddTimestamp(i, o) && n.push(t.createTimestampMessage(i))
                            }
                            return a === r.length - 1 && (i.deletedAt || n.push(t.createTimestampMessage(i)), n.push(t.createWarningMessage())), n
                        }, []).reverse()
                    }, t.shouldAddTimestamp = function(e, t) {
                        return e.sentAt.valueOf() - t.sentAt.valueOf() > 6e5
                    }, t.createTimestampMessage = function(e) {
                        return {
                            type: i.Timestamp,
                            timestamp: new Date(e.sentAt)
                        }
                    }, t.notificationsFor = function(e) {
                        return t.props.notifications.filter(function(t) {
                            return t.afterMessageID === e.id
                        }).map(t.createNotificationLine)
                    }, t.createNotificationLine = function(e) {
                        return {
                            type: i.Notification,
                            content: e.content
                        }
                    }, t.createNewMessagesIndicator = function() {
                        return {
                            type: i.NewMessages
                        }
                    }, t.createWarningMessage = function() {
                        return {
                            type: i.Warning
                        }
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.scrollToBottom = function() {
                        t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.scrollToBottom(), this.setState({
                        disableInfiniteTrigger: !1
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (this.props.thread.messages.edges.length > 0 || e.thread.messages.edges.length > 0) && (0 === this.props.thread.messages.edges.length && e.thread.messages.edges.length > 0 || this.props.thread.messages.edges[0].cursor !== e.thread.messages.edges[0].cursor) && this.setState({
                        prevScrollHeight: this.scroll.scrollContent.scrollHeight
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    if (this.props.thread.messages.edges.length > e.thread.messages.edges.length)
                        if (this.props.thread.messages.edges[0] && e.thread.messages.edges[0] && this.props.thread.messages.edges[0].cursor === e.thread.messages.edges[0].cursor && this.props.thread.messages.edges[0].node.id === e.thread.messages.edges[0].node.id) {
                            if (this.state.prevScrollHeight && this.state.prevScrollHeight !== this.scroll.scrollContent.scrollHeight) {
                                var t = this.scroll.scrollContent.scrollHeight - this.state.prevScrollHeight;
                                this.scroll.scrollContent.scrollTop = t
                            }
                        } else this.scrollToBottom();
                    this.props.notifications.length > e.notifications.length && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this.getMessages();
                    return r.createElement(P.V, {
                        fullHeight: !0
                    }, r.createElement(te.b, {
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0
                    }, r.createElement(P.V, null, r.createElement(te.a, {
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadMore,
                        pixelThreshold: 200,
                        orientation: ne.b.Down,
                        contentLength: e.length
                    }), this.renderMessages(e))))
                }, t.prototype.generateMessageKey = function(e, t) {
                    switch (e.type) {
                        case i.NewMessages:
                        case i.Warning:
                            return "" + e.type;
                        case i.Timestamp:
                            return e.type + "-" + e.timestamp.getTime();
                        case i.Whisper:
                            return e.type + "-" + e.id;
                        default:
                            return m.i.warn("[ThreadMessages] Encountered an unknown message type."), t
                    }
                }, t
            }(r.Component),
            oe = Object(s.a)(function(e, t) {
                return {
                    notifications: Object(ee.a)(e, t.thread.id)
                }
            })(re),
            se = n("DCOT"),
            le = n("qzJ+"),
            ce = n("m4HT"),
            ue = n("Iv9R"),
            de = (n("p8c9"), n("h4Qz")),
            pe = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.refetchTimeout = 0, n.onEmoticonClick = function(e) {
                        var t = n.autocompleteInput.getValue();
                        t && t.length > 0 && !t.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInput.setValue(t)
                    }, n.onBlock = function(e) {
                        n.addNotification(Object(m.d)("User successfully blocked", "whispers")), n.props.onBlock && n.props.onBlock(e)
                    }, n.onUnblock = function() {
                        n.addNotification(Object(m.d)("User successfully unblocked", "whispers"))
                    }, n.loadMore = function() {
                        return a.__awaiter(n, void 0, void 0, function() {
                            return a.__generator(this, function(e) {
                                return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.addNewThreadSendWhisper = function(e) {
                        var t = n.state.newThreadMessages;
                        t.unshift({
                            content: e,
                            id: Object(_.b)()
                        }), n.setState({
                            newThreadMessages: t
                        })
                    }, n.addNotification = function(e) {
                        n.props.notifyWhisperThread(n.props.threadID, e, n.getLastMessageID())
                    }, n.getLastMessageID = function() {
                        if (n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0]) return n.props.data.whisperThread.messages.edges[0].node.id
                    }, n.getPlaceholderThreadFromLocalState = function() {
                        return function(e, t) {
                            return {
                                messages: {
                                    edges: e.map(function(e, n) {
                                        return {
                                            cursor: "" + n,
                                            node: {
                                                content: {
                                                    content: e.content,
                                                    emotes: []
                                                },
                                                deletedAt: null,
                                                editedAt: null,
                                                from: {
                                                    id: t
                                                },
                                                id: e.id,
                                                sentAt: (new Date).toISOString()
                                            }
                                        }
                                    })
                                },
                                isMuted: !1,
                                unreadMessagesCount: 0,
                                participants: [],
                                id: Object(_.b)(),
                                spamInfo: {
                                    lastMarkedNotSpamAt: null,
                                    likelihood: "low"
                                },
                                userLastMessageRead: {
                                    sentAt: (new Date).toISOString()
                                }
                            }
                        }(n.state.newThreadMessages, n.props.currentUserID)
                    }, n.handleHeaderClick = function() {
                        n.props.collapsed ? n.expand() : n.collapse()
                    }, n.expand = function() {
                        n.props.participants.currentUser && Object(F.h)(n.props.threadID), n.props.onExpand(n.props.threadID)
                    }, n.onClickOut = function() {
                        n.props.focused && n.props.onUnfocus(n.props.threadID)
                    }, n.handleClose = function() {
                        n.props.participants.currentUser && Object(F.c)(n.props.threadID), n.props.onClose(n.props.threadID)
                    }, n.collapse = function() {
                        n.props.participants.currentUser && Object(F.d)(n.props.threadID), n.props.onCollapse(n.props.threadID)
                    }, n.handleKeydown = function(e) {
                        if ((e.charCode || e.keyCode) === b.a.Enter) {
                            var t = n.autocompleteInput.getValue();
                            n.autocompleteInput.setValue(""), n.sendWhisper(t)
                        }
                    }, n.handleClick = function() {
                        n.props.onFocus(n.props.threadID), n.markThreadMessagesAsRead()
                    }, n.markThreadMessagesAsRead = function() {
                        n.props.data.loading || n.props.data.error || n.props.data.whisperThread && 0 === n.props.data.whisperThread.unreadMessagesCount || Object(se.a)({
                            threadID: n.props.threadID,
                            lastReadMessageID: n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id || ""
                        })
                    }, n.sendWhisper = function(e) {
                        if ("" !== e) {
                            n.props.data.error && n.addNewThreadSendWhisper(e);
                            var t = Object(ce.b)(n.props.threadID, n.props.currentUserID);
                            t ? (n.props.participants.currentUser && n.props.participants.user && Object(F.m)({
                                threadID: n.props.threadID,
                                targetUserLogin: n.props.participants.user.login
                            }), Object(le.a)({
                                currentUserID: n.props.currentUserID,
                                emotes: n.props.emoteSetsData && n.props.emoteSetsData.emoteMap || {},
                                message: e,
                                recipientUserID: t
                            }).catch(function() {
                                var e = Object(m.d)("Your whisper was not delivered.", "Thread"),
                                    t = n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id;
                                n.props.notifyWhisperThread(n.props.threadID, e, t)
                            })) : m.i.warn("Unable to parse whisper recipient ID.")
                        }
                    }, n.setAutocompleteInnerComponentRef = function(e) {
                        n.textInput = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInput = e
                    }, n.handleContentClick = function() {
                        document.getSelection().toString() || n.textInput.focus()
                    }, n.state = {
                        newThreadMessages: []
                    }, n
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (e.data.error || e.data.loading || !e.data.whisperThread || this.props.reportThreadData(e.threadID, e.data.whisperThread), this.props.data.error) {
                        var n = !1;
                        this.props.pubsub.messages.whisperReceived !== e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived.data_object.thread_id === this.props.threadID && (n = !0), this.props.pubsub.messages.whisperSent !== e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent.data_object.thread_id === this.props.threadID && (n = !0), n && (clearTimeout(this.refetchTimeout), this.refetchTimeout = setTimeout(function() {
                            t.props.data.refetch()
                        }, 200))
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    e.data.whisperThread && this.props.data.whisperThread && (this.props.data.whisperThread.messages.edges.length, e.data.whisperThread.messages.edges.length)
                }, t.prototype.render = function() {
                    var e = d({
                        "whispers-thread": !0,
                        "whispers-thread--collapsed": this.props.collapsed,
                        "whispers-thread--focused": this.props.focused
                    });
                    if (this.props.hidden) return null;
                    var t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [];
                    return r.createElement(h.a, {
                        onClickOut: this.onClickOut
                    }, r.createElement(P._19, {
                        className: e,
                        display: P.H.Flex,
                        flexShrink: 0,
                        flexGrow: 0,
                        position: P._4.Relative,
                        background: P.m.Base,
                        margin: {
                            left: 1
                        },
                        alignItems: P.c.Center,
                        justifyContent: P.U.Center,
                        "data-a-target": "whisper-thread-" + this.props.threadID + (this.props.collapsed ? "-collapsed" : ""),
                        elevation: 3
                    }, r.createElement(P.V, {
                        className: "whisper-thread__input",
                        position: P._4.Absolute,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        attachBottom: !0
                    }, r.createElement(w.b, {
                        componentType: w.a.Input,
                        suggestionSource: w.c.Whisper,
                        iconRight: !0,
                        onFocus: this.handleClick,
                        onClick: this.handleClick,
                        onKeyDown: this.handleKeydown,
                        componentRefDelegate: this.setAutocompleteInnerComponentRef,
                        refDelegate: this.setAutocompleteInputRef
                    }, r.createElement(w.d, {
                        emotes: t
                    })), r.createElement(E.a, {
                        attachBottom: !0,
                        attachRight: !0,
                        inputRef: this.textInput,
                        onClickEmote: this.onEmoticonClick,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        position: P._4.Absolute,
                        shouldCloseOnClickOut: !0
                    })), r.createElement(P.Q, {
                        fullWidth: !0
                    }, r.createElement("div", {
                        className: "whispers-thread__content",
                        onClick: this.handleContentClick
                    }, this.renderContent())), r.createElement(P.V, {
                        position: P._4.Absolute,
                        fullWidth: !0,
                        flexShrink: 0,
                        display: P.H.Flex,
                        alignItems: P.c.Center,
                        attachTop: !0
                    }, r.createElement(X, {
                        isHighlighted: !!(this.props.data.whisperThread && this.props.data.whisperThread.unreadMessagesCount > 0),
                        isFocused: !!this.props.focused,
                        isMuted: !!this.props.data.whisperThread && this.props.data.whisperThread.isMuted,
                        isCollapsed: this.props.collapsed,
                        isLoading: this.props.data.loading || this.props.participants.loading || !this.props.participants.user || !this.props.participants.currentUser,
                        participants: this.props.participants,
                        spamInfo: this.props.data.whisperThread && this.props.data.whisperThread.spamInfo,
                        threadID: this.props.threadID,
                        collapse: this.collapse,
                        onHeaderClick: this.handleHeaderClick,
                        onBlock: this.onBlock,
                        onUnblock: this.onUnblock,
                        onClose: this.handleClose
                    }))))
                }, t.prototype.renderContent = function() {
                    var e;
                    return this.props.data.error ? (e = r.createElement(g.a, {
                        message: Object(m.d)("Sorry, something went wrong loading this conversation.", "WhisperThread")
                    }), e = r.createElement(P.V, null), this.props.participants.currentUser && this.props.participants.user && (e = r.createElement(oe, {
                        thread: this.getPlaceholderThreadFromLocalState(),
                        unreadMessagesCount: 0,
                        participantsByID: this.getUsersByID([this.props.participants.currentUser, this.props.participants.user]),
                        loadMore: this.loadMore
                    }))) : e = this.props.data.loading || this.props.participants.loading || !this.props.data.whisperThread ? r.createElement(P.V, {
                        display: P.H.Flex,
                        justifyContent: P.U.Center,
                        alignItems: P.c.Center,
                        margin: 2,
                        fullHeight: !0,
                        flexGrow: 1
                    }, r.createElement(P.Z, null)) : r.createElement(oe, {
                        thread: this.props.data.whisperThread,
                        participantsByID: this.getUsersByID(this.props.data.whisperThread.participants),
                        unreadMessagesCount: this.props.data.whisperThread.unreadMessagesCount,
                        loadMore: this.loadMore
                    }), e
                }, t.prototype.getUsersByID = function(e) {
                    for (var t = {}, n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        t[a.id] = a
                    }
                    return t
                }, t
            }(r.Component),
            me = Object(p.compose)(Object(f.a)(ue, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: Object(ce.b)(e.threadID, e.currentUserID) || ""
                        },
                        skip: !e.currentUserID || !e.threadID
                    }
                },
                name: "participants"
            }), Object(f.a)(de, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.threadID
                        }
                    }
                },
                props: function(e) {
                    return a.__assign({}, e, {
                        loadMore: function() {
                            return e.data.fetchMore({
                                query: de,
                                variables: a.__assign({}, e.data.variables, {
                                    cursor: e.data.whisperThread && e.data.whisperThread.messages.edges[e.data.whisperThread.messages.edges.length - 1].cursor
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult;
                                    if (!n.whisperThread) return {
                                        whisperThread: null
                                    };
                                    if (!e.whisperThread) return {
                                        whisperThread: n.whisperThread
                                    };
                                    var i = a.__assign({}, n.whisperThread.messages, {
                                        edges: Object(k.b)(e.whisperThread.messages.edges, n.whisperThread.messages.edges)
                                    });
                                    return {
                                        whisperThread: a.__assign({}, n.whisperThread, {
                                            messages: i
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            }), Object(v.a)([{
                topic: function(e) {
                    return Object(S.p)(e.currentUserID)
                },
                mapMessageTypesToProps: {
                    whisper_received: "whisperReceived",
                    whisper_sent: "whisperSent"
                }
            }]), Object(y.a)())(pe),
            he = Object(s.a)(function(e) {
                return {
                    isLoggedIn: Object(c.d)(e)
                }
            }, function(e) {
                return Object(l.bindActionCreators)({
                    notifyWhisperThread: u.b
                }, e)
            })(me);
        n("0Yyt");
        n.d(t, "b", function() {
            return ge
        }), n.d(t, "a", function() {
            return fe
        });
        var ge, fe = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.resizeAnimationHandle = null, t.renderThread = function(e) {
                    return e ? r.createElement(he, {
                        key: e.threadID,
                        currentUserID: t.props.currentUserID,
                        collapsed: e.collapsed,
                        hidden: e.hidden,
                        threadID: e.threadID,
                        onBlock: t.onBlock,
                        onCollapse: t.props.onCollapseThread,
                        onClose: t.props.onCloseThread,
                        onExpand: t.props.onExpandThread,
                        onFocus: t.props.onFocusThread,
                        onUnfocus: t.props.onUnfocusThread,
                        focused: t.props.focusedThreadID === e.threadID,
                        reportThreadData: t.props.reportThreadData
                    }) : null
                }, t.onBlock = function(e) {
                    t.props.archiveThread(e), t.props.onBlockThread(e)
                }, t.setOpenThreadsRef = function(e) {
                    return ge = e
                }, t.handleContentResize = function() {
                    t.resizeAnimationHandle || (t.resizeAnimationHandle = requestAnimationFrame(function() {
                        t.props.onResizeContent(), t.resizeAnimationHandle = null
                    }))
                }, t
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = this.props.openedThreads.map(function(t) {
                        return e.renderThread(t)
                    });
                return r.createElement(P.V, {
                    className: "whispers-open-threads",
                    display: P.H.Flex,
                    flexDirection: P.J.RowReverse,
                    alignItems: P.c.End,
                    position: P._4.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    refDelegate: this.setOpenThreadsRef
                }, t, r.createElement(o.a, {
                    onResize: this.handleContentResize
                }))
            }, t
        }(r.Component)
    },
    2: function(e, t) {},
    "2BvQ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 81
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_Video($id: ID!) {\nvideo(id: $id) {\nid\nbroadcastType\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2Hj/": function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (!e) return null;
            switch (e.type) {
                case c.a.Playing:
                    return e.game && e.game.name ? Object(l.d)("playing {game}", {
                        game: e.game.name
                    }, "PresenceActivity") : Object(l.d)("playing", "PresenceActivity");
                case c.a.Watching:
                    if (!t && e.user.hosting && e.user.hosting.displayName) return Object(l.d)("watching {user} with the {community} community", {
                        user: e.user.hosting.displayName,
                        community: e.user.displayName
                    }, "PresenceActivity");
                    if (!t && e.user.stream && e.user.stream.game && e.user.stream.game.name) return Object(l.d)("watching {user} stream {game}", {
                        user: e.user.displayName,
                        game: e.user.stream.game.name
                    }, "PresenceActivity");
                    var n = e.user.hosting && e.user.hosting.displayName ? e.user.hosting.displayName : e.user.displayName;
                    return Object(l.d)("watching {user}", {
                        user: n
                    }, "PresenceActivity");
                case c.a.Streaming:
                    return e.stream && e.stream.game && e.stream.game.name ? Object(l.d)("streaming {game}", {
                        game: e.stream.game.name
                    }, "PresenceActivity") : Object(l.d)("streaming", "PresenceActivity");
                default:
                    return null
            }
        }

        function a(e, t) {
            if (!t) return null;
            switch (t.type) {
                case c.a.Streaming:
                    return "/" + e;
                case c.a.Watching:
                    return "/" + t.user.login;
                default:
                    return null
            }
        }

        function r(e) {
            var t = Object(l.d)("Online", "PresenceAvailability");
            switch (e) {
                case u.a.Idle:
                case u.a.Away:
                    return Object(l.d)("Away", "PresenceAvailability");
                case u.a.Busy:
                    return Object(l.d)("Busy", "PresenceAvailability");
                case u.a.Offline:
                    return Object(l.d)("Offline", "PresenceAvailability");
                case u.a.Invisible:
                    return Object(l.d)("Invisible", "PresenceAvailability");
                case u.a.Online:
                default:
                    return t
            }
        }

        function o(e) {
            return function(t) {
                return function(e) {
                    return function(t) {
                        return function(n) {
                            function i(t) {
                                var i = n.call(this, t) || this;
                                return i.options = e(t), i
                            }
                            return h.__extends(i, n), i.prototype.componentDidMount = function() {
                                this.options.skip || this.subscribe(this.options)
                            }, i.prototype.componentWillReceiveProps = function(t) {
                                var n = e(t);
                                n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                            }, i.prototype.componentWillUnmount = function() {
                                this.unsubscribe()
                            }, i.prototype.render = function() {
                                return s.createElement(t, h.__assign({}, this.props))
                            }, i.prototype.subscribe = function(e) {
                                this.unsubscriber = Object(g.i)({
                                    fragment: e.fragment,
                                    id: e.id,
                                    topic: e.topic,
                                    type: e.type,
                                    mutator: e.mutator
                                })
                            }, i.prototype.unsubscribe = function() {
                                this.unsubscriber && this.unsubscriber()
                            }, i
                        }(s.Component)
                    }
                }(function(t) {
                    var n = e(t);
                    return {
                        id: "User:" + n.id,
                        skip: n.skip,
                        fragment: b,
                        topic: Object(g.f)(n.currentUserID),
                        type: f.c.Presence,
                        mutator: function(e, t) {
                            if (!t) return null;
                            var i = n.id;
                            if (e.data.user_id !== +i) return t;
                            var a = "$User:" + i + ".activity";
                            return t.availability = e.data.availability.toUpperCase(), t.activity = Object(v.a)(e.data.activity, a), t
                        }
                    }
                })(t)
            }
        }
        var s = n("U7vG"),
            l = n("6sO2"),
            c = n("Ex+h"),
            u = n("l4QG"),
            d = function(e) {
                return s.createElement("span", {
                    "data-a-target": "presence-text"
                }, i(e.activity, e.condensed) || r(e.availability))
            },
            p = n("Odds"),
            m = function(e) {
                var t = p._6.Online;
                switch (e.availability) {
                    case u.a.Idle:
                    case u.a.Away:
                        t = p._6.Away;
                        break;
                    case u.a.Busy:
                        t = p._6.Busy;
                        break;
                    case u.a.Invisible:
                        t = p._6.Invisible;
                        break;
                    case u.a.Offline:
                        t = p._6.Offline;
                        break;
                    case u.a.Online:
                        t = p._6.Online;
                        break;
                    default:
                        t = p._6.Online
                }
                return s.createElement(p._5, {
                    status: t
                })
            },
            h = n("TToO"),
            g = n("HZww"),
            f = n("C8Io"),
            v = n("mqvl"),
            b = n("TVUY");
        n.d(t, "b", function() {
            return d
        }), n.d(t, "a", function() {
            return m
        }), n.d(t, !1, function() {
            return o
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "d", function() {
            return a
        }), n.d(t, !1, function() {
            return r
        })
    },
    "2Nqs": function(e, t) {},
    "2aoH": function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("U7vG"),
            o = n("6sO2"),
            s = n("Odds"),
            l = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.state = {
                        content: null
                    }, t.logger = o.i.withCategory("StickyHeaderRoot"), t.displayContent = function(e) {
                        t.setState({
                            content: e
                        })
                    }, t.hideContent = function() {
                        t.setState({
                            content: null
                        })
                    }, i && t.logger.error(new Error("StickyHeaderRoot is already mounted."), "StickyHeaderRoot is already mounted. There should only be one of these mounted at a time."), i = t, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return this.state.content ? r.createElement(s.V, null, this.state.content) : null
                }, t
            }(r.Component),
            c = null,
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    if (c) {
                        var i = "There may only be one StickyHeader mounted at a time.";
                        o.i.error(new Error(i), i)
                    }
                    return c = n, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    i.displayContent(this.props.children)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.children ? i.displayContent(e.children) : i.hideContent()
                }, t.prototype.componentWillUnmount = function() {
                    i.hideContent(), c = null
                }, t.prototype.render = function() {
                    return null
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return u
        }), n.d(t, "b", function() {
            return l
        })
    },
    "2emZ": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
        }(i || (i = {}))
    },
    "2o2f": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Live = "live", e.WatchParty = "watch_party", e.Premiere = "premiere", e.Rerun = "rerun"
        }(i || (i = {}))
    },
    "2rJy": function(e, t) {},
    3: function(e, t) {},
    "3+CI": function(e, t) {},
    "37Pp": function(e, t, n) {
        "use strict";
        var i = n("U7vG"),
            a = n("6sO2"),
            r = n("FDYX"),
            o = n("Odds"),
            s = (n("M5Tl"), "sub-discount-price-label__discounted"),
            l = "sub-discount-price-label__non-discounted",
            c = function(e) {
                var t = e.subscriptionProduct;
                if (void 0 === t) return i.createElement("div", null);
                var n = Object(a.d)("{price} / Month", {
                    price: t.price
                }, "SubDiscountPriceLabel");
                if (e.isGift ? Object(r.c)([e.subscriptionProduct]) : Object(r.d)([e.subscriptionProduct])) {
                    var c = void 0;
                    return c = e.isGift ? Object(a.d)("{price} (Save {percent})", {
                        price: Object(r.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(a.e)(Object(r.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel") : Object(a.d)("{price} for the first month (Save {percent})", {
                        price: Object(r.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(a.e)(Object(r.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel"), i.createElement(o.V, {
                        "data-test-selector": s
                    }, i.createElement(o._23, {
                        color: o.F.Alt2,
                        decoration: o._26.Strikethrough
                    }, n), i.createElement(o._23, {
                        className: "sub-discount-price-label__discount-price",
                        type: o._28.H5,
                        bold: !0
                    }, c))
                }
                return i.createElement(o.V, {
                    "data-test-selector": l
                }, i.createElement(o._23, null, n))
            };
        n.d(t, !1, function() {
            return s
        }), n.d(t, !1, function() {
            return l
        }), n.d(t, "a", function() {
            return c
        })
    },
    "3KEv": function(e, t) {},
    "3QSP": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_SubEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withVideo"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withVideo"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 266
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3iBR": function(e, t, n) {
        "use strict";
        n.d(t, "l", function() {
            return r
        }), n.d(t, "b", function() {
            return o
        }), n.d(t, "a", function() {
            return s
        }), n.d(t, "h", function() {
            return l
        }), n.d(t, "j", function() {
            return c
        }), n.d(t, "i", function() {
            return u
        }), n.d(t, "k", function() {
            return d
        }), n.d(t, "f", function() {
            return p
        }), n.d(t, "g", function() {
            return m
        }), n.d(t, "c", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        }), n.d(t, "e", function() {
            return f
        });
        var i, a = n("I89S"),
            r = {
                ERROR_DISPLAY_TIMEOUT: 5e3,
                GET_BALANCE_RATE_LIMIT: 5e3,
                UNDO_PROMPT_DURATION: 5e3
            },
            o = "https://d3aqoihi2n8ty8.cloudfront.net/cheer",
            s = "https://d3aqoihi2n8ty8.cloudfront.net/actions",
            l = 8e5,
            c = 1e4,
            u = 500,
            d = 1e3,
            p = "cheer",
            m = a.a.Purple,
            h = "FIRST_PARTY",
            g = "THIRD_PARTY",
            f = (i = {}, i[a.a.Gray] = "#979797", i[a.a.Purple] = "#9c3ee8", i[a.a.Green] = "#1db2a5", i[a.a.Blue] = "#0099fe", i[a.a.Red] = "#f43021", i[a.a.Yellow] = "#f3a71a", i)
    },
    "3ydF": function(e, t) {},
    4: function(e, t, n) {
        n("rhaD"), n("pP2G"), e.exports = n("s3R1")
    },
    "4Dne": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            return a.__awaiter(this, void 0, void 0, function() {
                var t, n, i, d, p, m, h, g;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            return (t = e.friendActivity) ? (n = Object(l.d)(e.friendLogin, t)) ? (i = "/" === n[0] ? n.slice(1) : n, t.type !== o.a.Streaming ? [3, 1] : (d = {
                                target_action: u.Streaming,
                                target_channel: e.friendLogin,
                                target_game: t.stream.game && t.stream.game.name || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7])) : (r.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2]) : (r.i.warn("[trackPresenceClick] Attempted to track a click with no activity."), [2]);
                        case 1:
                            if (t.type !== o.a.Watching) return [3, 6];
                            p = void 0, m = null, a.label = 2;
                        case 2:
                            return a.trys.push([2, 4, , 5]), [4, r.n.apollo.client.query({
                                query: c,
                                variables: {
                                    login: t.user.login
                                }
                            })];
                        case 3:
                            return m = a.sent(), [3, 5];
                        case 4:
                            return h = a.sent(), r.i.error(h, "[trackPresenceClick] Failed to query watched user data.", {
                                watchedUser: t.user.login
                            }), [3, 5];
                        case 5:
                            return (g = m && m.data && m.data.user) ? p = g.hosting.stream ? g.hosting.stream.game && g.hosting.stream.game.name || void 0 : g.stream && g.stream.game && g.stream.game.name || void 0 : r.i.error(new Error("GraphQL empty response"), "[trackPresenceClick] Query for watched user info returned no data.", {
                                watchedUser: t.user.login
                            }), d = {
                                target_action: u.Watching,
                                target_channel: t.user.login,
                                target_game: p,
                                target_hosted_channel: t.user.hosting && t.user.hosting.login || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7];
                        case 6:
                            return r.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2];
                        case 7:
                            return r.m.track(s.SpadeEventType.PresenceClick, d), [2]
                    }
                })
            })
        };
        var i, a = n("TToO"),
            r = n("6sO2"),
            o = n("Ex+h"),
            s = n("vH/s"),
            l = n("2Hj/"),
            c = n("K1Jg");
        n.n(c);
        ! function(e) {
            e.FriendsListButton = "friends", e.WhisperHeaderButton = "convo_join", e.WhisperHeaderLink = "convo_link"
        }(i || (i = {}));
        var u;
        ! function(e) {
            e.Streaming = "streaming", e.Watching = "watching"
        }(u || (u = {}))
    },
    "4MRZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 262
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_User($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nsubscriptionProducts {\nid\nemoteSetID\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\n}\n}\n}\ncurrentUser {\nid\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "4NZK": function(e, t) {},
    "4gX4": function(e, t) {},
    "4ik2": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_CancelFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CancelFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "cancelFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_CancelFriendRequest($input: CancelFriendRequestInput!) {\ncancelFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5EfE": function(e, t) {},
    "5LoI": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Games = "game", e.Videos = "vod", e.VideosNewest = "vod_by_created_at", e.Users = "user", e.Channels = "live_channel", e.Communities = "community"
        }(i || (i = {}))
    },
    "5fkB": function(e, t) {},
    "5k1t": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            return {
                type: i,
                threadID: e,
                afterMessageID: n,
                content: t
            }
        };
        var i = "whisperNotifications.WHISPER_THREAD_NOTIFIED"
    },
    "5kgt": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            for (var t = {}, n = 0, i = Object.keys(e).filter(function(e) {
                    return e.startsWith("data-")
                }); n < i.length; n++) {
                var a = i[n];
                t[a] = e[a]
            }
            return t
        }
    },
    "5s0/": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("uXDg"),
            o = n("QPF3"),
            s = n("TToO"),
            l = n("U7vG"),
            c = n("6sO2"),
            u = n("Odds"),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        t.props.onClick && t.props.onClick(), t.props.openThread(t.props.threadID)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = Object(c.d)("Whisper", "WhisperButton");
                    return l.createElement(u.u, {
                        onClick: this.handleClick
                    }, e)
                }, t
            }(l.Component),
            p = Object(i.a)(null, function(e) {
                return Object(a.bindActionCreators)({
                    openThread: function(e) {
                        return Object(r.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(o.a)())
                    }
                }, e)
            })(d);
        n.d(t, "a", function() {
            return p
        })
    },
    "65au": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Current_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 50
            }
        };
        n.loc.source = {
            body: "query Current_User {\ncurrentUser {\nid\nhasPrime\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "67ft": function(e, t) {},
    "6BvN": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Backspace = 8] = "Backspace", e[e.Tab = 9] = "Tab", e[e.Enter = 13] = "Enter", e[e.Esc = 27] = "Esc", e[e.Space = 32] = "Space", e[e.Left = 37] = "Left", e[e.Up = 38] = "Up", e[e.Right = 39] = "Right", e[e.Down = 40] = "Down", e[e.Colon = 58] = "Colon", e[e.At = 64] = "At", e[e.F = 70] = "F", e[e.P = 80] = "P"
        }(i || (i = {}))
    },
    "6O9f": function(e, t) {},
    "6Vcl": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Whispers_UserWhisperThreads"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "whisperThreads"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "10"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "participants"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "chatColor"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "profileImageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "70"
                                                                    }
                                                                }],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "spamInfo"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "lastMarkedNotSpamAt"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "likelihood"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "messages"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "first"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "20"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "edges"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "cursor"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "node"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "sentAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "editedAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "deletedAt"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "from"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        alias: null,
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "id"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: null
                                                                                    }]
                                                                                }
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "content"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: {
                                                                                    kind: "SelectionSet",
                                                                                    selections: [{
                                                                                        kind: "Field",
                                                                                        alias: null,
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "content"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: null
                                                                                    }, {
                                                                                        kind: "Field",
                                                                                        alias: null,
                                                                                        name: {
                                                                                            kind: "Name",
                                                                                            value: "emotes"
                                                                                        },
                                                                                        arguments: [],
                                                                                        directives: [],
                                                                                        selectionSet: {
                                                                                            kind: "SelectionSet",
                                                                                            selections: [{
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "id"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "emoteID"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "setID"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "from"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }, {
                                                                                                kind: "Field",
                                                                                                alias: null,
                                                                                                name: {
                                                                                                    kind: "Name",
                                                                                                    value: "to"
                                                                                                },
                                                                                                arguments: [],
                                                                                                directives: [],
                                                                                                selectionSet: null
                                                                                            }]
                                                                                        }
                                                                                    }]
                                                                                }
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "userLastMessageRead"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sentAt"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isMuted"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isArchived"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "unreadMessagesCount"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 538
            }
        };
        n.loc.source = {
            body: "query Whispers_Whispers_UserWhisperThreads($cursor: Cursor) {\ncurrentUser {\nid\nlogin\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\nwhisperThreads(first: 10 after: $cursor) {\nedges {\ncursor\nnode {\nid\nparticipants {\nid\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nsentAt\neditedAt\ndeletedAt\nfrom {\nid\n}\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\n}\n}\n}\nuserLastMessageRead {\nid\nsentAt\n}\nisMuted\nisArchived\nunreadMessagesCount\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "6WAQ": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Archive = "ARCHIVE", e.Highlight = "HIGHLIGHT", e.Upload = "UPLOAD", e.WatchParty = "WATCH_PARTY", e.PastPremiere = "PAST_PREMIERE", e.PremiereUpload = "PREMIERE_UPLOAD"
        }(i || (i = {}))
    },
    "6sO2": function(e, t, n) {
        "use strict";
        var i = n("J4ib");
        n.d(t, "a", function() {
            return i.a
        }), n.d(t, "b", function() {
            return i.b
        }), n.d(t, "c", function() {
            return i.c
        }), n.d(t, "d", function() {
            return i.d
        }), n.d(t, "e", function() {
            return i.e
        }), n.d(t, "f", function() {
            return i.f
        }), n.d(t, "g", function() {
            return i.g
        }), n.d(t, "h", function() {
            return i.h
        }), n.d(t, "i", function() {
            return i.j
        }), n.d(t, "k", function() {
            return i.l
        }), n.d(t, "j", function() {
            return i.k
        }), n.d(t, "m", function() {
            return i.n
        }), n.d(t, "l", function() {
            return i.m
        }), n.d(t, "n", function() {
            return i.o
        })
    },
    "6yAw": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 56
            }
        };
        n.loc.source = {
            body: "query TopNav_CurrentUser {\ncurrentUser {\nid\nhasPrime\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "70dR": function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("U7vG"),
            o = n("RH2O"),
            s = n("Aj/L"),
            l = n("CSlQ"),
            c = n("6sO2"),
            u = n("+Znq"),
            d = n("7vx8"),
            p = n("RweG"),
            m = n("vBst"),
            h = n("S1vB"),
            g = n("oIkB"),
            f = n("HZww"),
            v = n("HM6l"),
            b = n("6BvN"),
            y = n("5LoI"),
            k = n("MAZT"),
            S = n("uTyw"),
            _ = n("zCIC"),
            w = n("SZoP"),
            E = n("2KeS"),
            C = n("lK86"),
            N = n("Odds"),
            T = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return !this.props.data || this.props.data.loading || !this.props.recipientLogin || this.props.data.user.self.canGift ? null : r.createElement(N.V, {
                        margin: {
                            top: 1
                        }
                    }, r.createElement(N._23, {
                        italic: !0,
                        color: N.F.Alt2,
                        "data-test-selector": "gift-eligibility-message-selector"
                    }, Object(c.d)("Sorry, a gift subscription to this channel is not available for this user.", "GiftRecipientIneligibleMessage")))
                }, t
            }(r.Component),
            O = Object(E.compose)(Object(l.c)("GiftRecipientIneligibleMessage"), Object(d.a)(C, {
                options: function(e) {
                    return {
                        variables: {
                            recipientLogin: e.recipientLogin,
                            subProductId: e.subProductId
                        }
                    }
                },
                skip: function(e) {
                    return !e.recipientLogin || !e.subProductId
                }
            }))(T),
            I = n("daN3"),
            D = n("CwIZ"),
            L = (n("+YN9"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        selectedUser: null
                    }, t.reportGiftCheckoutAction = function() {
                        t.props.reportSubMenuAction({
                            action: D.a.BuyGiftSub,
                            checkoutButtonTier: t.props.selectedProductPrice,
                            giftRecipient: t.state.selectedUser ? t.state.selectedUser.login : null
                        })
                    }, t.onUserClick = function(e) {
                        for (var n = e.target; n.parentElement && !n.dataset.user_id;) n = n.parentElement;
                        n.dataset.user_id && n.dataset.user_login && n.dataset.user_name ? t.setState({
                            selectedUser: {
                                id: n.dataset.userId || "",
                                login: n.dataset.user_login || "",
                                name: n.dataset.user_name || ""
                            }
                        }) : t.setState({
                            selectedUser: null
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (e.isWaiting || e.isErrored || !e.hasInput) && this.setState({
                        selectedUser: null
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = this.props.isWaiting ? r.createElement(N.V, {
                        fullHeight: !0
                    }, r.createElement(N.Z, {
                        fillContent: !0
                    })) : this.props.hasInput ? this.props.isErrored ? this.getErrorMessage() : this.props.userResults && this.props.userResults.totalHits > 0 ? this.getUserResultContent() : this.getNoResultsMessage() : r.createElement(N.V, {
                        margin: 1
                    }, r.createElement(N._23, {
                        color: N.F.Alt2
                    }, Object(c.d)("Start typing to see a list of suggestions here.", "GiftRecipientSearchResult"))), r.createElement("div", {
                        onKeyDown: this.props.onKeyDown
                    }, r.createElement(N._19, {
                        className: "gift-recipient-search-result-view",
                        background: N.m.Alt,
                        position: N._4.Relative,
                        overflow: N._0.Hidden,
                        display: N.H.Block,
                        margin: {
                            bottom: 2
                        },
                        borderLeft: !0,
                        borderBottom: !0,
                        borderRight: !0
                    }, r.createElement(N.Q, {
                        overflow: N._0.Hidden,
                        position: N._4.Relative
                    }, r.createElement(_.b, {
                        suppressScrollX: !0
                    }, r.createElement(N.V, null, e, r.createElement(_.a, {
                        enabled: !this.props.isWaiting && this.props.hasInput,
                        loadMore: this.props.loadMore
                    }))))), r.createElement(N.V, null, r.createElement(N.V, {
                        display: N.H.Flex,
                        alignItems: N.c.Center,
                        fullWidth: !0
                    }, this.getBuyGiftButton(), r.createElement(N.Q, {
                        margin: {
                            x: 1
                        }
                    }, r.createElement(N._23, {
                        "data-test-selector": "gift-recipient-display-name-selector"
                    }, Object(c.d)("for {displayName}", {
                        displayName: r.createElement(N._23, {
                            bold: !0,
                            type: N._28.Span
                        }, this.getFormattedDisplayName())
                    }, "GiftRecipientCheckoutButton")))), r.createElement(O, {
                        subProductId: this.props.selectedProductId,
                        recipientLogin: this.state.selectedUser ? this.state.selectedUser.login : null
                    })))
                }, t.prototype.getBuyGiftButton = function() {
                    return r.createElement(I.a, {
                        subProductId: this.props.selectedProductId,
                        giftRecipient: this.state.selectedUser ? this.state.selectedUser.login : null,
                        checkoutURL: this.props.selectedProductURL,
                        onClick: this.reportGiftCheckoutAction
                    })
                }, t.prototype.getFormattedDisplayName = function() {
                    return this.state.selectedUser ? Object(w.a)(this.state.selectedUser.login, this.state.selectedUser.name) : ""
                }, t.prototype.getErrorMessage = function() {
                    return r.createElement(N.V, {
                        fullWidth: !0,
                        textAlign: N._24.Center,
                        justifyContent: N.U.Center
                    }, r.createElement(N._23, null, Object(c.d)("Something went wrong", "GiftRecipientSearchResult")))
                }, t.prototype.getUserResultContent = function() {
                    var e = this;
                    if (!this.props.userResults) return r.createElement(N._3, null);
                    return this.props.userResults.results.map(function(t) {
                        var n = Object(w.a)(t.login || "", t.name || "");
                        return r.createElement(N.T, {
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0,
                            key: "git-recipient-result__" + t.id,
                            "data-user_id": t.id,
                            "data-user_login": t.login,
                            "data-user_name": t.name,
                            onClick: e.onUserClick,
                            "data-test-selector": "subscribe-button__gift_search_result"
                        }, r.createElement(N.V, {
                            padding: .5
                        }, r.createElement(N.A, {
                            row: !0
                        }, r.createElement(N.C, {
                            imageAlt: t.thumbnailAltText,
                            imageSrc: t.thumbnail ? t.thumbnail : "",
                            size: N.D.Size4,
                            aspect: N.k.Aspect1x1
                        }), r.createElement(N.B, null, r.createElement(N.Q, {
                            padding: {
                                x: 1
                            }
                        }, r.createElement(N._23, {
                            type: N._28.H5,
                            ellipsis: !0
                        }, n))))))
                    })
                }, t.prototype.getNoResultsMessage = function() {
                    return r.createElement(N.V, {
                        margin: 1
                    }, r.createElement(N._23, {
                        color: N.F.Alt2
                    }, Object(c.d)("No Results", "GiftRecipientSearchResult")))
                }, t = a.__decorate([Object(l.c)("GiftRecipientSearchResultPanel")], t)
            }(r.Component)),
            x = (n("m0Vj"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    if (this.props.selectedSubProduct) {
                        var e = null;
                        if (this.props.selectedSubProduct && this.props.selectedSubProduct.giftPromotion) {
                            var t = this.props.selectedSubProduct && this.props.selectedSubProduct.giftPromotion ? this.props.selectedSubProduct.giftPromotion : null;
                            e = r.createElement(N._23, {
                                bold: !0,
                                className: "subscription-gift-recipient-search__discount-message"
                            }, Object(c.d)("{price} (Save {percent})", {
                                price: t ? t.newPrice : "",
                                percent: Object(c.e)(t ? t.discountValue / 100 : 0, "percent")
                            }, "GiftRecipientSearch"))
                        }
                        return r.createElement(N.V, {
                            padding: 2,
                            className: "subscription-gift-recipient-search"
                        }, r.createElement(N.V, null, r.createElement(N.V, {
                            display: N.H.Flex,
                            justifyContent: N.U.Between,
                            alignItems: N.c.Center,
                            margin: {
                                bottom: 1
                            }
                        }, r.createElement(N._23, {
                            type: N._28.H4,
                            bold: !0
                        }, Object(c.d)("Choose a Gift Recipient", "GiftRecipientSearch")), r.createElement(N.u, {
                            type: N.z.Text,
                            "data-a-target": "subscribe-back-button",
                            icon: N._11.AngleLeft,
                            onClick: this.props.onBack,
                            "data-test-selector": "gift-recipient-search-back-button"
                        }, r.createElement(N.V, {
                            alignItems: N.c.Center,
                            display: N.H.InlineFlex
                        }, r.createElement(N._23, null, Object(c.d)("Back", "GiftRecipientSearch"))))), r.createElement(N.V, null, r.createElement(N._23, null, Object(c.d)("{subDisplayName}: {giftPrice} Gift Subscription (Single Month)", {
                            subDisplayName: this.props.selectedSubProduct ? this.props.selectedSubProduct.displayName : "",
                            giftPrice: this.props.selectedSubProduct ? this.props.selectedSubProduct.price : ""
                        }, "GiftRecipientSearch")), e, r.createElement(N.V, {
                            display: N.H.Flex,
                            justifyContent: N.U.Center,
                            padding: {
                                top: 1
                            },
                            fullWidth: !0
                        }, r.createElement(N.Q, {
                            fullWidth: !0
                        }, r.createElement("div", null, r.createElement(N._13, {
                            onChange: this.handleChange,
                            onKeyDown: this.props.onKeyDown,
                            id: "gift-recipient-search",
                            placeholder: Object(c.d)("Search for a Twitch ID", "GiftRecipientSearch"),
                            "data-test-selector": "gift-recipient-search-input-selector"
                        }), r.createElement(L, {
                            hasInput: this.props.hasInput,
                            userResults: this.props.userResults,
                            isErrored: this.props.isErrored,
                            isWaiting: this.props.isWaiting,
                            loadMore: this.props.loadMore,
                            onKeyDown: this.props.onKeyDown,
                            selectedProductId: this.props.selectedSubProduct.id,
                            selectedProductURL: this.props.selectedSubProduct.url,
                            selectedProductPrice: this.props.selectedSubProduct.price,
                            reportSubMenuAction: this.props.reportSubMenuAction
                        })))))))
                    }
                    return r.createElement(N._3, null)
                }, t
            }(r.Component)),
            R = 50,
            F = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.onChange = function(e) {
                        t.inputTimer && (clearTimeout(t.inputTimer), t.inputTimer = 0), e ? (t.setState({
                            isWaiting: !0
                        }), t.inputTimer = setTimeout(function() {
                            return t.doSearch(e)
                        }, R)) : t.setState(t.getEmptyState())
                    }, t.loadMore = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return a.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.queryID || !0 === this.state.exhaustedHits) return [2];
                                        e = this.state.currentPage + 1, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(y.a.Users, this.state.term, "", {
                                            page: e
                                        })];
                                    case 2:
                                        return t = i.sent(), [3, 4];
                                    case 3:
                                        return i.sent(), this.setState(a.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2];
                                    case 4:
                                        return t ? (n = Object(S.b)({
                                            searchResults: t,
                                            append: e > 0,
                                            currentUserResults: this.state.currentUserResults
                                        }), this.setState({
                                            currentUserResults: n.currentUserResults,
                                            term: this.state.term,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: e,
                                            exhaustedHits: n.exhaustedHits
                                        }), [2]) : (this.setState(a.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2])
                                }
                            })
                        })
                    }, t.onKeyDown = function(e) {
                        t.state.term && (e.keyCode === b.a.Esc ? t.setState({
                            hasInput: !1
                        }) : e.keyCode === b.a.Up ? t.focusNext(-1) : e.keyCode === b.a.Down && t.focusNext(1))
                    }, t.state = t.getEmptyState(), t.searchClient = new k.a(c.a.algoliaApplicationID, c.a.algoliaAPIKey), t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(x, {
                        onChange: this.onChange,
                        loadMore: this.loadMore,
                        onKeyDown: this.onKeyDown,
                        userResults: this.state.currentUserResults,
                        hasInput: this.state.hasInput,
                        isErrored: this.state.isErrored,
                        isWaiting: this.state.isWaiting,
                        onBack: this.props.onBack,
                        selectedSubProduct: this.props.selectedSubProduct,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getEmptyState = function() {
                    return {
                        currentUserResults: {
                            totalHits: 0,
                            results: []
                        },
                        term: "",
                        hasInput: !1,
                        isErrored: !1,
                        queryID: "",
                        isWaiting: !1,
                        currentPage: -1,
                        focusSelectable: !1,
                        exhaustedHits: !1
                    }
                }, t.prototype.doSearch = function(e) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, r, o;
                        return a.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    this.inputTimer = 0, t = -1, n = v.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                        queryID: n,
                                        focusSelectable: !i && !!this.state.currentFocus
                                    }), s.label = 1;
                                case 1:
                                    return s.trys.push([1, 3, , 4]), t = 0, [4, this.searchClient.queryForType(y.a.Users, e, n)];
                                case 2:
                                    return r = s.sent(), [3, 4];
                                case 3:
                                    return s.sent(), this.setState(a.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2];
                                case 4:
                                    return r ? this.state.queryID !== r.id ? [2] : (o = Object(S.b)({
                                        searchResults: r,
                                        append: !1
                                    }), this.setState(function(n) {
                                        return a.__assign({}, n, o, {
                                            queryID: "",
                                            term: e,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: t
                                        })
                                    }), [2]) : (this.setState(a.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2])
                            }
                        })
                    })
                }, t.prototype.focusNext = function(e) {
                    var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                        i = document.activeElement,
                        a = Array.prototype.indexOf.call(n, i);
                    if ((t = a < 0 ? e > 0 ? 0 : n.length - 1 : a + e) < 0 && (t = 0), !(t >= n.length)) {
                        var r = n.item(t);
                        r.focus(), r.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                            currentFocus: r
                        })
                    }
                }, t = a.__decorate([Object(l.c)("GiftRecipientSearch")], t)
            }(r.Component),
            P = n("37Pp"),
            U = n("YEG/"),
            M = n("jYA1"),
            A = n("FDYX"),
            V = function(e) {
                var t = null,
                    n = null,
                    i = null,
                    a = e.subscriptionProducts[0].price;
                if (Object(A.d)(e.subscriptionProducts) && (a = Object(A.a)(e.subscriptionProducts[0])), e.channelLogin && (e.inPrimeRegion || e.userHasPrime)) {
                    var o = e.userHasPrime ? Object(c.d)("Use your free channel subscription to directly support your favorite streamer. {upsellTextLink}", {
                        upsellTextLink: r.createElement("a", {
                            href: "https://help.twitch.tv/customer/en/portal/articles/2572060-twitch-prime-guide",
                            target: "_blank"
                        }, Object(c.d)("Learn more about your free sub", "NonSubbedTopPage"))
                    }, "NonSubbedTopPage") : Object(c.d)("{upsellTextBold}, plus get free game loot every month, ad-free viewing, and loads more with Twitch Prime.", {
                        upsellTextBold: r.createElement("strong", null, Object(c.d)("Support your favorite streamer", "NonSubbedTopPage"))
                    }, "NonSubbedTopPage");
                    i = r.createElement(N.V, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(N.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(N._23, {
                        type: N._28.H4,
                        bold: !0
                    }, Object(c.d)("Free Channel Sub with Twitch Prime", "NonSubbedTopPage"))), r.createElement(N.V, null, r.createElement(N.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(N._23, null, o)), r.createElement(M.a, {
                        authToken: e.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: !1,
                        isSubscribedWithPrime: !1,
                        onSubscribedWithPrime: e.onSubscribedWithPrime,
                        reportSubMenuAction: e.reportSubMenuAction,
                        subLogin: e.channelLogin,
                        userHasPrime: e.userHasPrime,
                        canPrimeSubscribe: e.canPrimeSubscribe
                    })))
                }
                if (!e.isNonStandardSub) {
                    var s = Object(c.d)("More Paid Subscription Options", "NonSubbedTopPage");
                    t = r.createElement(N.V, {
                        margin: {
                            right: 1
                        },
                        display: N.H.Inline
                    }, r.createElement(N.u, {
                        ariaLabel: s,
                        onClick: e.showSubOptions,
                        type: N.z.Hollow,
                        "data-test-selector": "subscribe-button__more-sub-options-button",
                        "data-a-target": "see-more-sub-options-button"
                    }, s));
                    var l = Object(c.d)("Gift a Subscription", "NonSubbedTopPage");
                    n = r.createElement(N.V, {
                        display: N.H.Inline
                    }, r.createElement(N.u, {
                        ariaLabel: l,
                        onClick: e.showGiftOptions,
                        type: N.z.Hollow,
                        "data-test-selector": "subscribe-button__gift"
                    }, l))
                }
                return r.createElement(N.V, {
                    padding: 2
                }, i, r.createElement(N.V, null, r.createElement(N._23, {
                    type: N._28.H4,
                    bold: !0
                }, Object(c.d)("Paid Subscription", "NonSubbedTopPage")), r.createElement(P.a, {
                    subscriptionProduct: e.subscriptionProducts[0]
                }), r.createElement(N.V, {
                    display: N.H.Flex
                }, r.createElement(N.V, {
                    margin: {
                        right: 1,
                        top: 1
                    }
                }, r.createElement(U.a, {
                    isSubbedToTier: !1,
                    tierPrice: a,
                    "data-a-target": "tier1-subscribe-button",
                    reportSubAction: e.handleTopPageSubButtonClick,
                    url: e.subscriptionProducts[0].url
                })))), r.createElement(N.V, {
                    margin: {
                        right: 1,
                        top: 2
                    }
                }, t, n))
            },
            j = n("YH6m"),
            H = function(e) {
                return r.createElement(N.V, {
                    padding: 2
                }, r.createElement(N.V, null, r.createElement(N.V, {
                    display: N.H.Flex,
                    justifyContent: N.U.Between,
                    alignItems: N.c.Center,
                    fullWidth: !0
                }, r.createElement(N._23, {
                    type: N._28.H4,
                    bold: !0
                }, e.header), r.createElement(N.u, {
                    type: N.z.Text,
                    "data-a-target": "subscribe-back-button",
                    "data-test-selector": "subscribe-button__back-button",
                    icon: N._11.AngleLeft,
                    onClick: e.onBack
                }, r.createElement(N.V, {
                    alignItems: N.c.Center,
                    display: N.H.InlineFlex
                }, r.createElement(N._23, null, Object(c.d)("Back", "PaidSubOptions"))))), r.createElement(j.a, {
                    canPrimeSubscribe: !1,
                    channelDisplayName: e.channelDisplayName,
                    isSubscribed: e.isSubscribed,
                    onSelectTierTab: e.onSelectTierTab,
                    isGift: e.isGift,
                    onGiftSelect: e.onGiftSelect,
                    giftRecipient: e.giftRecipient,
                    reportSubMenuAction: e.reportSubMenuAction,
                    subscriptionProducts: e.subscriptionProducts,
                    userHasPrime: !1
                })))
            },
            B = n("pQNb"),
            z = (n("DquS"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.subbedTier !== m.a.Tier3 ? Object(c.d)("Change Your Subscription", "SubbedTopPage") : this.getSubbedHeader(),
                        t = r.createElement(N.V, null, r.createElement(N._23, {
                            type: N._28.H4,
                            bold: !0
                        }, e), r.createElement(j.a, {
                            authToken: this.props.authToken,
                            onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                            subLogin: this.props.channelLogin,
                            userHasPrime: this.props.userHasPrime,
                            canPrimeSubscribe: this.props.canPrimeSubscribe,
                            channelDisplayName: this.props.channelDisplayName,
                            onSelectTierTab: this.props.onSelectTierTab,
                            subbedTier: this.props.subbedTier,
                            subscriptionProducts: this.props.subscriptionProducts,
                            reportSubMenuAction: this.props.reportSubMenuAction,
                            onGiftSelect: this.props.showRecipientSelect,
                            isSubscribed: !0
                        })),
                        n = this.getGiftSection();
                    return r.createElement(N.V, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, n, !this.props.isGift && t)
                }, t.prototype.getGiftSection = function() {
                    return this.props.giftSender ? this.props.giftSender && !this.props.giftPaidUpgrade ? r.createElement(N.V, null, r.createElement(N.V, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getGiftExtendSection()) : r.createElement(N.V, null, r.createElement(N.V, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getTopPageGiftSection()) : r.createElement(N.V, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getTopPageGiftSection())
                }, t.prototype.getGiftInfoSection = function() {
                    var e, t, n = null;
                    return this.props.giftPaidUpgrade ? (e = this.getSubbedHeader(), t = Object(c.d)("{giftPrice} Gift Subscription from {giftSender}", {
                        giftPrice: this.getCurrentSubPrice(),
                        giftSender: r.createElement(N._23, {
                            bold: !0,
                            type: N._28.Span
                        }, this.props.giftSender || "")
                    }, "SubbedTopPage"), n = Object(c.d)("Your new {upgradePrice} Paid Subscription will begin on {subStartDate}", {
                        upgradePrice: this.props.giftPaidUpgrade ? this.props.giftPaidUpgrade.price : "",
                        subStartDate: this.getFormattedGiftUpgradeStartDate()
                    }, "SubbedTopPage")) : (e = Object(c.d)("Your Gift Subscription", "SubbedTopPage"), t = Object(c.d)("{giftPrice} Subscription from {giftSender} - Benefits expire on {giftEndDate}", {
                        giftPrice: this.getCurrentSubPrice(),
                        giftSender: r.createElement(N._23, {
                            bold: !0,
                            type: N._28.Span
                        }, this.props.giftSender || ""),
                        giftEndDate: this.getFormattedGiftEndDate()
                    }, "SubbedTopPage")), r.createElement(N.V, null, r.createElement(N._23, {
                        bold: !0,
                        type: N._28.H4
                    }, e), r.createElement(N.Q, {
                        margin: {
                            y: 1
                        }
                    }, r.createElement(N._23, null, t)), r.createElement(N._23, {
                        className: "balloon-subscribed-user__gift-upgrade-info",
                        bold: !0
                    }, n))
                }, t.prototype.getGiftExtendSection = function() {
                    var e = null,
                        t = null;
                    if (!this.props.isNonStandardSub) {
                        var n = Object(c.d)("More Paid Subscription Options", "SubbedTopPage");
                        e = r.createElement(N.V, {
                            margin: {
                                right: 1
                            },
                            display: N.H.Inline
                        }, r.createElement(N.u, {
                            ariaLabel: n,
                            onClick: this.props.showSubOptions,
                            type: N.z.Hollow,
                            "data-a-target": "see-more-sub-options-button"
                        }, n))
                    }
                    var i = this.getGiftMessage();
                    return t = r.createElement(N.V, {
                        display: N.H.Inline
                    }, r.createElement(N.u, {
                        "data-test-selector": "subscribe-button__gift",
                        ariaLabel: i,
                        onClick: this.props.showGiftOptions,
                        type: N.z.Hollow
                    }, i)), r.createElement(N.V, null, r.createElement(N.V, {
                        margin: {
                            top: 1
                        }
                    }, r.createElement(N._23, {
                        type: N._28.H4,
                        bold: !0
                    }, Object(c.d)("Extend Your Subscription", "SubbedTopPage")), r.createElement(N.Q, {
                        margin: {
                            top: 1
                        }
                    }, r.createElement(N._23, null, Object(c.d)("{price} / Month", {
                        price: this.props.subscriptionProducts[0].price
                    }, "SubbedTopPage"))), r.createElement(N.V, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, r.createElement(N.u, {
                        ariaLabel: this.props.subscriptionProducts[0].price,
                        "data-a-target": "tier1-subscribe-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.props.handleTopPageSubButtonClick,
                        purchase: this.props.subscriptionProducts[0].price,
                        targetBlank: !0
                    }, Object(c.d)("Subscribe Now", "SubbedTopPage")))), r.createElement(N.V, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, e, t))
                }, t.prototype.getTopPageGiftSection = function() {
                    var e = this.props.subscriptionProducts[0].price;
                    Object(A.c)(this.props.subscriptionProducts) && (e = Object(A.a)(this.props.subscriptionProducts[0], !0));
                    var t = this.getGiftMessage(),
                        n = Object(c.d)("More Gift Options", "SubbedTopPage");
                    return r.createElement(N.V, null, r.createElement(N._23, {
                        type: N._28.H4,
                        bold: !0
                    }, Object(c.d)("Help Grow {streamer}'s Community", {
                        streamer: this.props.channelDisplayName
                    }, "SubbedTopPage")), r.createElement(N.V, {
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: N.H.Flex
                    }, r.createElement(N.u, {
                        ariaLabel: t + " " + e,
                        onClick: this.props.onGiftSelect,
                        purchase: e
                    }, t), r.createElement(N.V, {
                        margin: {
                            left: 1
                        }
                    }, r.createElement(N.u, {
                        ariaLabel: n,
                        onClick: this.props.showGiftOptions,
                        type: N.z.Hollow
                    }, n))))
                }, t.prototype.getFormattedGiftUpgradeStartDate = function() {
                    var e = "";
                    if (this.props.giftPaidUpgrade && this.props.giftPaidUpgrade.startsAt) try {
                        e = Object(c.c)(new Date(this.props.giftPaidUpgrade.startsAt), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        c.i.debug(t, "There was an error formatting gift upgrade start date."), e = ""
                    }
                    return e
                }, t.prototype.getFormattedGiftEndDate = function() {
                    var e = "";
                    if (this.props.giftSubEndDate) try {
                        e = Object(c.c)(new Date(this.props.giftSubEndDate), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        c.i.debug(t, "There was an error formatting gift end date."), e = ""
                    }
                    return e
                }, t.prototype.getCurrentSubPrice = function() {
                    switch (this.props.subbedTier) {
                        case m.a.Tier1:
                            return this.props.subscriptionProducts[0].price;
                        case m.a.Tier2:
                            return this.props.subscriptionProducts[1].price;
                        case m.a.Tier3:
                            return this.props.subscriptionProducts[2].price;
                        default:
                            return this.props.subscriptionProducts[0].price
                    }
                }, t.prototype.getSubbedHeader = function() {
                    return Object(c.d)("Your Subscription", "SubbedTopPage")
                }, t.prototype.getGiftMessage = function() {
                    return Object(c.d)("Gift A Subscription", "SubbedTopPage")
                }, t
            }(r.Component));
        ! function(e) {
            e[e.Top = 0] = "Top", e[e.SubOptions = 1] = "SubOptions", e[e.GiftOptions = 2] = "GiftOptions", e[e.RecipientSelect = 3] = "RecipientSelect"
        }(i || (i = {}));
        n("UKw0");
        var W = n("+p4h"),
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: i.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1
                    }, t.showTop = function() {
                        t.setState(function() {
                            return {
                                currentPage: i.Top
                            }
                        })
                    }, t.showRecipientSelect = function() {
                        t.setState(function() {
                            return {
                                currentPage: i.RecipientSelect
                            }
                        })
                    }, t.showGiftOptions = function() {
                        t.props.reportSubMenuAction({
                            action: D.a.ClickGiftSubOptions,
                            modalLevel: "second_page"
                        }), t.setState(function() {
                            return {
                                currentPage: i.GiftOptions
                            }
                        })
                    }, t.showSubOptions = function() {
                        t.props.reportSubMenuAction({
                            action: D.a.ClickMoreSubOptions,
                            modalLevel: "second_page"
                        }), t.setState(function() {
                            return {
                                currentPage: i.SubOptions
                            }
                        })
                    }, t.goToPreviousPage = function() {
                        if (t.props.reportSubMenuAction({
                                action: D.a.ClickBack,
                                modalLevel: t.state.currentPage === i.SubOptions || t.state.currentPage === i.GiftOptions ? "top_page" : "second_page"
                            }), t.state.currentPage === i.GiftOptions || t.state.currentPage === i.SubOptions || t.state.giftShortcut) return t.showTop(), void t.setState({
                            giftShortcut: !1
                        });
                        t.state.currentPage !== i.RecipientSelect || t.showGiftOptions()
                    }, t.onGiftSelect = function() {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        t.state.currentPage === i.Top ? t.setState({
                            giftShortcut: !0,
                            selectedSubProductIndex: 0
                        }) : t.setState({
                            giftShortcut: !1
                        }), t.props.reportSubMenuAction({
                            action: D.a.GiftASub,
                            checkoutButtonTier: t.props.data.user.subscriptionProducts[t.state.selectedSubProductIndex].price
                        }), t.showRecipientSelect()
                    }, t.onSelectTierTab = function(e) {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        t.tabToSubProduct || (t.tabToSubProduct = function(e) {
                            var t = new Map;
                            return t.set(j.b.Prime, null), e.forEach(function(e, n) {
                                t.set(n + 1, e)
                            }), t
                        }(t.props.data.user.subscriptionProducts));
                        var n = t.tabToSubProduct.get(e);
                        if (n) {
                            var i = t.props.data.user.subscriptionProducts.findIndex(function(e) {
                                return e.price === n.price
                            });
                            i !== t.state.selectedSubProductIndex && t.setState({
                                selectedSubProductIndex: i
                            }), t.props.onSelectTierTab(n.price)
                        } else t.props.onSelectTierTab(m.a.Prime)
                    }, t.handleTopPageSubButtonClick = function() {
                        if (!t.props.data.user || !t.props.data.user.subscriptionProducts) return null;
                        t.props.reportSubMenuAction({
                            action: D.a.ClickCheckout,
                            checkoutButtonTier: t.props.data.user.subscriptionProducts[0].price
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin !== this.props.channelLogin && this.setState({
                        currentPage: i.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1
                    })
                }, t.prototype.render = function() {
                    if (this.props.data.loading) return c.i.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), r.createElement(N.V, {
                        display: N.H.Flex,
                        alignItems: N.c.Center,
                        justifyContent: N.U.Center,
                        className: "channel-header__subscription-modal"
                    }, r.createElement(N.Z, {
                        fillContent: !0
                    }));
                    if (!this.props.data.user || !this.props.data.user.subscriptionProducts) return c.i.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), null;
                    c.i.debug("rendering balloon", {
                        state: this.state
                    });
                    var e, t = r.createElement(N._3, null),
                        n = !1,
                        a = this.props.data.user.subscriptionProducts,
                        o = !0;
                    switch (this.state.currentPage) {
                        case i.Top:
                            if (!this.props.isSubscribed) {
                                e = this.getUnsubbedTopPage();
                                break
                            }
                            e = this.getSubbedTopPage(), n = !0;
                            break;
                        case i.SubOptions:
                            if (this.props.isSubscribed) {
                                e = this.getPaidOptionsPage(!0), o = !1;
                                break
                            }
                            e = this.getPaidOptionsPage(!1);
                            break;
                        case i.GiftOptions:
                            e = this.getGiftOptionsPage(), n = !0;
                            break;
                        case i.RecipientSelect:
                            e = this.getGiftRecipientSearchPage(), a = [a[this.state.selectedSubProductIndex]], n = !0;
                            break;
                        default:
                            if (!this.props.isSubscribed) {
                                e = this.getUnsubbedTopPage();
                                break
                            }
                            e = this.getSubbedTopPage(), n = !0
                    }
                    return o && (t = r.createElement(B.a, {
                        subscriptionProducts: a,
                        isGift: n
                    })), r.createElement(N.V, {
                        key: "subscribe-balloon"
                    }, t, e)
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? r.createElement(F, {
                        key: "gift-recipient-search-page",
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.data.user.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction
                    }) : null
                }, t.prototype.getGiftOptionsPage = function() {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? r.createElement(H, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.data.user.displayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.data.user.subscriptionProducts,
                        isGift: !0,
                        onGiftSelect: this.onGiftSelect,
                        isSubscribed: !1,
                        header: Object(c.d)("Choose A Gift Subscription", "SubscribeBalloon")
                    }) : null
                }, t.prototype.getPaidOptionsPage = function(e) {
                    return this.props.data.user && this.props.data.user.subscriptionProducts ? r.createElement(H, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.data.user.displayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.data.user.subscriptionProducts,
                        isSubscribed: e,
                        header: Object(c.d)("All Paid Subscriptions", "SubscribeBalloon")
                    }) : null
                }, t.prototype.getSubbedTopPage = function() {
                    if (!this.props.data.user || !this.props.data.user.self || !this.props.data.user.self.subscriptionBenefit) return null;
                    var e = this.props.data.user.self.subscriptionBenefit.gift.isGift ? this.props.data.user.self.subscriptionBenefit.gift.gifter.displayName : null,
                        t = !!(this.props.data.user && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.gift.isGift);
                    return r.createElement(z, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        channelDisplayName: this.props.data.user.displayName,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        isGift: t,
                        handleTopPageSubButtonClick: this.handleTopPageSubButtonClick,
                        isNonStandardSub: this.props.isNonStandardSub,
                        giftSubEndDate: this.props.data.user.self.subscriptionBenefit.endsAt,
                        giftPaidUpgrade: this.props.data.user.self.subscriptionBenefit.paidUpgrade,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        showGiftOptions: this.showGiftOptions,
                        showSubOptions: this.showSubOptions,
                        showRecipientSelect: this.showRecipientSelect,
                        subbedTier: this.props.subbedTier,
                        giftSender: e,
                        subscriptionProducts: this.props.data.user ? this.props.data.user.subscriptionProducts : [],
                        userHasPrime: !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                    })
                }, t.prototype.getUnsubbedTopPage = function() {
                    return this.props.data.user ? r.createElement(V, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        handleTopPageSubButtonClick: this.handleTopPageSubButtonClick,
                        inPrimeRegion: this.props.inPrimeRegion,
                        isNonStandardSub: this.props.isNonStandardSub,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        showGiftOptions: this.showGiftOptions,
                        showSubOptions: this.showSubOptions,
                        subscriptionProducts: this.props.data.user ? this.props.data.user.subscriptionProducts : [],
                        userHasPrime: !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                    }) : null
                }, t = a.__decorate([Object(d.a)(W, {
                    options: function(e) {
                        return {
                            fetchPolicy: "network-only",
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(l.c)("SubscribeBalloon")], t)
            }(r.Component),
            G = n("4MRZ"),
            Q = "subscribe-button__dropdown",
            K = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        activeTierPrice: null,
                        inPrimeRegion: !1
                    }, t.modalLevel = "top_page", t.reportSubMenuAction = function(e) {
                        var n = !!(t.props.data.user && t.props.data.user.self && t.props.data.user.self.subscriptionBenefit),
                            i = t.props.data.requestInfo && Object(h.a)(t.props.data.requestInfo.countryCode);
                        Object(D.b)({
                            action: e.action || "",
                            channelLogin: t.props.channelLogin || "",
                            channelID: t.props.data && t.props.data.user.id,
                            checkoutButtonTier: e.checkoutButtonTier || (t.state.activeTierPrice || m.a.Prime).slice(),
                            hasSubCredit: !!t.props.data.user.self && t.props.data.user.self.canPrimeSubscribe,
                            hostChannelID: t.props.hostChannelID,
                            hostChannelLogin: t.props.hostChannelLogin,
                            isMenuOpen: !(e.action === D.a.OpenSubMenu),
                            sub_location: "channel_page",
                            modal: !n,
                            modalLevel: n ? "" : t.modalLevel.slice(),
                            showPrimeContent: i,
                            giftRecipient: e.giftRecipient || null
                        }), !e.modalLevel || e.action !== D.a.ClickMoreSubOptions && e.action !== D.a.ClickBack || (t.modalLevel = e.modalLevel, t.setState({
                            activeTierPrice: m.a.Prime
                        }))
                    }, t.handleMenuToggle = function(e) {
                        t.reportSubMenuAction({
                            action: e ? D.a.CloseSubMenu : D.a.OpenSubMenu
                        })
                    }, t.onSelectTierTab = function(e) {
                        t.state.activeTierPrice !== e && t.setState({
                            activeTierPrice: e
                        })
                    }, t.onSubscribedWithPrime = function() {
                        t.reportSubMenuAction({
                            action: D.a.SubWithPrime
                        }), t.modalLevel = "", Object(g.d)(G, {
                            login: t.props.channelLogin
                        }, function(e) {
                            return e.user && e.user.self && (e.user.self.canPrimeSubscribe = !1, e.user.self.subscriptionBenefit = {
                                id: Object(v.a)(),
                                purchasedWithPrime: !0,
                                tier: m.a.Prime,
                                endsAt: null,
                                paidUpgrade: null,
                                gift: {
                                    isGift: !1,
                                    gifter: null,
                                    __typename: "SubscriptionGift"
                                },
                                __typename: "SubscriptionBenefit"
                            }), e
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.reportInteractive()
                }, t.prototype.componentDidMount = function() {
                    this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch()
                }, t.prototype.render = function() {
                    if (!this.isUserDataReady(this.props) || !this.hasSubscriptionProducts(this.props)) return null;
                    var e = this.props.data.requestInfo && Object(h.a)(this.props.data.requestInfo.countryCode),
                        t = !!(this.props.data.user && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit),
                        n = 1 === this.props.data.user.subscriptionProducts.length,
                        i = null;
                    this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && (i = this.props.data.user.self.subscriptionBenefit.purchasedWithPrime ? m.a.Prime : this.props.data.user.self.subscriptionBenefit.tier, this.modalLevel = ""), this.props.data.user.subscriptionProducts.some(this.isSubscriptionProductInvalid) && (n = !0);
                    var a;
                    if (t) {
                        var o = n ? Object(c.d)("Subscribed", "SubscribeButton") : Object(c.d)("Gift A Sub", "SubscribeButton");
                        if (a = this.props.hostChannelID ? Object(c.d)("Subscribed to {username}", {
                                username: this.props.data.user.displayName
                            }, "SubscribeButton") : o, n) return r.createElement(N.u, {
                            disabled: !0,
                            ariaLabel: a,
                            icon: N._11.Star
                        }, a)
                    } else a = this.props.hostChannelID ? Object(c.d)("Subscribe to {username}", {
                        username: this.props.data.user.displayName
                    }, "SubscribeButton") : Object(c.d)("Subscribe", "SubscribeButton");
                    var s = i === m.a.Prime ? N._11.Crown : N._11.Star,
                        l = t ? "subscribed-button" : "subscribe-button",
                        d = r.createElement(N.u, {
                            "data-a-target": l,
                            "data-test-selector": Q,
                            ariaLabel: a,
                            type: t ? N.z.Success : N.z.Default,
                            dropdown: !0,
                            icon: t ? s : void 0
                        }, a),
                        p = this.props.hostChannelID ? N.q.TopLeft : N.q.BottomRight;
                    return r.createElement(u.a, {
                        onToggle: this.handleMenuToggle
                    }, d, r.createElement(N.p, {
                        size: N.r.Large,
                        direction: p,
                        "data-a-target": "sub-balloon"
                    }, r.createElement(q, {
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin || "",
                        inPrimeRegion: e,
                        isNonStandardSub: n,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subbedTier: i || m.a.Prime,
                        userHasPrime: !1,
                        isSubscribed: t
                    })))
                }, t.prototype.hasSubscriptionProducts = function(e) {
                    return e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0
                }, t.prototype.isUserDataReady = function(e) {
                    return e.data && e.data.user && !e.data.loading && !e.data.error
                }, t.prototype.isSubscriptionProductInvalid = function(e) {
                    return !e.emoteSetID
                }, t = a.__decorate([Object(d.a)(G, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(p.a)([{
                    topic: function(e) {
                        return Object(f.n)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }])], t)
            }(r.Component),
            $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.reportInteractive = function() {
                        t.props.latencyTracking.reportInteractive()
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(K, {
                        authToken: this.props.authToken,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        channelLogin: this.props.channelLogin,
                        updateContainerWidth: this.props.updateContainerWidth,
                        reportInteractive: this.reportInteractive
                    })
                }, t = a.__decorate([Object(l.c)("SubscribeButton")], t)
            }(r.Component),
            Z = Object(o.a)(function(e) {
                return {
                    authToken: Object(s.a)(e)
                }
            })($);
        n.d(t, !1, function() {
            return $
        }), n.d(t, "a", function() {
            return Z
        }), n.d(t, !1, function() {
            return Q
        }), n.d(t, !1, function() {
            return K
        })
    },
    "73jS": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SetSessionStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SetSessionStatusInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setSessionStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "setAgainInSeconds"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 127
            }
        };
        n.loc.source = {
            body: "mutation ChannelPage_SetSessionStatus($input: SetSessionStatusInput!) {\nsetSessionStatus(input: $input) {\nsetAgainInSeconds\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7B9K": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserEmotes"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 76
            }
        };
        n.loc.source = {
            body: "query UserEmotes {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7L7x": function(e, t) {},
    "7LBo": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "TopNav_User_UpdateVisibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateVisibilityInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateVisibility"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "availability"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation TopNav_User_UpdateVisibility($input: UpdateVisibilityInput!) {\nupdateVisibility(input: $input) {\nuser {\nid\navailability\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7LIQ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("U7vG"),
            o = n("6sO2"),
            s = n("Odds"),
            l = (n("VkpB"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = a("emote-picker__emote-link", {
                            "emote-picker__emote-link--locked": this.props.locked
                        }),
                        n = r.createElement(s._19, {
                            alignItems: s.c.Center,
                            background: s.m.Overlay,
                            borderRadius: s.s.Small,
                            className: "emote-picker__emote-lock",
                            color: s.F.Overlay,
                            display: s.H.InlineFlex,
                            justifyContent: s.U.Center,
                            position: s._4.Absolute,
                            zIndex: s._39.Above
                        }, r.createElement(s._10, {
                            asset: s._11.Lock,
                            height: 10,
                            width: 10
                        })),
                        i = this.props.emoteSet.emotes.map(function(i) {
                            return r.createElement("div", {
                                key: i.id,
                                className: "emote-picker__emote"
                            }, r.createElement(s._31, {
                                label: i.displayName || Object(o.d)("Emote", "EmoteGrid"),
                                direction: s._33.Bottom
                            }, r.createElement(s.Q, {
                                display: s.H.Flex,
                                alignItems: s.c.Center,
                                justifyContent: s.U.Center
                            }, r.createElement("button", {
                                className: t,
                                name: i.displayName,
                                onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, i.id),
                                "data-a-target": i.displayName
                            }, r.createElement("figure", {
                                className: "emote-picker__emote-figure"
                            }, e.props.locked ? n : null, r.createElement("img", {
                                srcSet: i.srcSet,
                                alt: i.displayName
                            }))))))
                        });
                    return r.createElement(s.V, {
                        display: s.H.Flex,
                        justifyContent: s.U.Center
                    }, i)
                }, t.prototype.handleClickEmote = function(e, t) {
                    this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e)
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    "7Nlu": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("5kgt"),
            l = n("Odds"),
            c = n("rZAm"),
            u = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(l.T, i.__assign({
                        onClick: this.props.onClick,
                        linkTo: this.props.linkTo,
                        hover: this.props.hover,
                        tabIndex: -1,
                        key: this.props.id
                    }, Object(s.a)(this.props)), a.createElement(l.V, {
                        className: "search-game-result-card",
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, a.createElement(l.A, {
                        row: !0
                    }, a.createElement(l.C, {
                        imageAlt: this.props.imageAlt,
                        imageSrc: this.props.data && !this.props.data.loading && this.props.data.game ? this.props.data.game.boxArtURL : r.a.defaultBoxArtURL,
                        size: l.D.Size4,
                        aspect: l.k.BoxArt
                    }), a.createElement(l.B, null, a.createElement(l.Q, {
                        padding: {
                            x: 1
                        }
                    }, a.createElement(l._23, {
                        type: l._28.H5,
                        ellipsis: !0
                    }, this.props.title))))))
                }, t = i.__decorate([Object(o.a)(c, {
                    options: function(e) {
                        return {
                            variables: {
                                name: e.title
                            }
                        }
                    }
                })], t)
            }(a.Component);
        n.d(t, "a", function() {
            return u
        })
    },
    "7Qq+": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FooterNotificationPopup_EUCookieAlert"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "fromEU"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 70
            }
        };
        n.loc.source = {
            body: "query FooterNotificationPopup_EUCookieAlert {\nrequestInfo {\nfromEU\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7dPO": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_UnfriendUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfriendUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unfriendUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 110
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_UnfriendUser($input: UnfriendUserInput!) {\nunfriendUser(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7enT": function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "d", function() {
            return o
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "i", function() {
            return l
        }), n.d(t, "h", function() {
            return c
        }), n.d(t, "f", function() {
            return u
        }), n.d(t, "g", function() {
            return d
        }), n.d(t, "j", function() {
            return p
        }), t.l = function() {
            return {
                type: o
            }
        }, t.p = function() {
            return {
                type: s
            }
        }, t.m = function() {
            return {
                type: u
            }
        }, t.q = function() {
            return {
                type: d
            }
        }, t.o = function() {
            return {
                type: l
            }
        }, t.n = function() {
            return {
                type: c
            }
        }, t.s = function(e) {
            return {
                type: p,
                theme: e
            }
        }, t.t = function() {
            return {
                type: i
            }
        }, t.k = function() {
            return {
                type: a
            }
        }, t.r = function() {
            return {
                type: r
            }
        };
        var i = "core.ui.PERSISTENT_PLAYER_TOGGLED",
            a = "core.ui.PERSISTENT_PLAYER_BEGAN_PERSISTING",
            r = "core.ui.PERSISTENT_PLAYER_STOPPED_PERSISTING",
            o = "core.ui.RIGHT_COLUMN_COLLAPSED",
            s = "core.ui.RIGHT_COLUMN_EXPANDED",
            l = "core.ui.THEATRE_ENABLED",
            c = "core.ui.THEATRE_DISABLED",
            u = "core.ui.SIDE_NAV_COLLAPSED",
            d = "core.ui.SIDE_NAV_EXPANDED",
            p = "core.ui.THEME_CHANGED"
    },
    "7iNp": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendButton"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 75
            }
        };
        n.loc.source = {
            body: "query FriendButton {\ncurrentUser {\nid\nfriends {\nedges {\nnode {\nid\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7miU": function(e, t, n) {
        "use strict";
        var i = n("P0T5");
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return i.c
        }), n.d(t, "c", function() {
            return i.d
        }), n.d(t, "d", function() {
            return i.e
        }), n.d(t, "e", function() {
            return i.f
        }), n.d(t, "f", function() {
            return i.g
        }), n.d(t, "g", function() {
            return i.h
        }), n.d(t, "h", function() {
            return i.i
        }), n.d(t, "i", function() {
            return i.j
        }), n.d(t, "j", function() {
            return i.k
        }), n.d(t, "k", function() {
            return i.m
        }), n.d(t, "l", function() {
            return i.p
        }), n.d(t, "m", function() {
            return i.q
        })
    },
    "7vx8": function(e, t, n) {
        "use strict";

        function i(e) {
            return e.definitions.reduce(function(t, n) {
                if (n.kind !== g.Operation) return {};
                var i = n;
                if ("query" !== i.operation) return {};
                for (var r = 0, o = i.selectionSet.selections; r < o.length; r++) {
                    var s = function(e, t) {
                        var n = a(e, t);
                        if (!n || 0 === n.length) return {};
                        var i = {};
                        if (e.directives)
                            for (var r = 0, o = e.directives; r < o.length; r++) {
                                var s = o[r],
                                    l = s.name.value;
                                if ((l === c.Include || l === c.Skip) && s.arguments) {
                                    var u = s.arguments[0];
                                    if ("if" === u.name.value) {
                                        var d = u.value.name.value;
                                        i[l] = d
                                    }
                                }
                            }
                        for (var p = {}, m = 0, h = n; m < h.length; m++) {
                            var g = h[m];
                            p[g] = i
                        }
                        return p
                    }(o[r], e);
                    s && (t = u.__assign({}, t, s))
                }
                return t
            }, {})
        }

        function a(e, t) {
            if (e.kind === h.Field) return [e.alias ? e.alias.value : e.name.value];
            if (e.kind === h.FragmentSpread) {
                var n = e.name.value,
                    i = t.definitions.find(function(e) {
                        return e.kind === g.Fragment && e.name.value === n
                    });
                if (!i) return;
                return i.selectionSet.selections.reduce(function(e, n) {
                    var i = a(n, t);
                    if (i) return e.concat(i)
                }, [])
            }
        }

        function r(e, t) {
            return t && t.options ? "object" == typeof t.options ? t.options.variables || {} : "function" == typeof t.options ? t.options(e).variables || {} : {} : {}
        }

        function o(e, t) {
            if (t && t.skip) {
                if ("boolean" == typeof t.skip) return t.skip;
                if ("function" == typeof t.skip) return t.skip(e)
            }
            return !1
        }

        function s(e, t, n) {
            if (!e[t]) return {};
            for (var i = {}, a = 0, r = Object.keys(e[t]); a < r.length; a++) {
                var o = r[a];
                n[o] && (i[o] = e[t][o])
            }
            return i
        }

        function l(e, t) {
            return function(n) {
                var a = function(a) {
                    function l() {
                        var n = null !== a && a.apply(this, arguments) || this;
                        return n.queryFields = i(e), n.operationName = t && t.name || "data", n.cachedData = {}, n.queryName = function(e) {
                            var t = e.definitions.find(function(e) {
                                return e.kind === g.Operation && "query" === e.operation
                            });
                            return t && t.name && t.name.value || f
                        }(e), n.logger = m.i.withCategory("with-graphql"), n
                    }
                    return u.__extends(l, a), l.prototype.componentWillReceiveProps = function(e) {
                        if (!o(e, t)) {
                            if (function(e) {
                                    for (var t = e.dataProps, n = e.nextDataProps, i = e.nextProps, a = e.cachedData, o = e.operationName, s = e.operationOptions, l = e.queryFields, u = e.queryName, d = e.logger, p = !1, m = !1, h = 0, g = Object.keys(t); h < g.length; h++) {
                                        var f = g[h];
                                        if (void 0 === t[f] || void 0 !== n[f] || !i[o] || i[o].loading || i[o].error) void 0 !== n[f] && void 0 !== a[f] && (delete a[f], m = !0);
                                        else {
                                            var v = l[f][c.Skip],
                                                b = l[f][c.Include],
                                                y = r(i, s);
                                            if (v && void 0 !== y[v] && y[v]) continue;
                                            if (b && void 0 !== y[b] && !y[b]) continue;
                                            p = !0, a[f] = t[f]
                                        }
                                    }
                                    return m && d.debug("GraphQL corruption resolved for component.", {
                                        fieldName: o,
                                        queryName: u
                                    }), p
                                }({
                                    dataProps: s(this.props, this.operationName, this.queryFields),
                                    nextDataProps: s(e, this.operationName, this.queryFields),
                                    cachedData: this.cachedData,
                                    operationName: this.operationName,
                                    queryFields: this.queryFields,
                                    queryName: this.queryName,
                                    logger: this.logger,
                                    operationOptions: t,
                                    nextProps: e
                                })) {
                                this.logCorruptDataFound();
                                var n = e[this.operationName];
                                n && n.refetch && n.refetch()
                            }
                        }
                    }, l.prototype.render = function() {
                        return d.createElement(n, u.__assign({}, this.getRenderProps()))
                    }, l.prototype.getRenderProps = function() {
                        return o(this.props, t) ? this.props : "object" != typeof this.props[this.operationName] ? this.props : u.__assign({}, this.props, (e = {}, e[this.operationName] = u.__assign({}, this.cachedData, this.props[this.operationName]), e));
                        var e
                    }, l.prototype.logCorruptDataFound = function() {
                        var e = m.b.get("withgraphql_error_on_corruption", !1),
                            t = {
                                fieldName: this.operationName,
                                queryName: this.queryName
                            },
                            n = "GraphQL data corrupted for component.";
                        e ? this.logger.error(new Error("GraphQL data corrupted for component using query " + this.queryName), n, t) : this.logger.warn(n, t)
                    }, l.displayName = "WithGraphQL(" + (n.displayName || n.name || "Component") + ")", l
                }(d.Component);
                return Object(p.graphql)(e, t)(a)
            }
        }
        var c, u = n("TToO"),
            d = n("U7vG"),
            p = n("BhyV"),
            m = n("6sO2");
        ! function(e) {
            e.Skip = "skip", e.Include = "include"
        }(c || (c = {}));
        var h;
        ! function(e) {
            e.Field = "Field", e.FragmentSpread = "FragmentSpread"
        }(h || (h = {}));
        var g;
        ! function(e) {
            e.Operation = "OperationDefinition", e.Fragment = "FragmentDefinition"
        }(g || (g = {}));
        var f = "UnnamedQuery";
        n.d(t, "a", function() {
            return l
        })
    },
    "82Ta": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 118
            }
        };
        n.loc.source = {
            body: "mutation Thread_ReportUser($input: ReportWhisperThreadInput!) {\nreportWhisperThread(input: $input) {\nthread {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "8PKe": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("TToO"),
            r = n("OAwv"),
            o = n("U7vG"),
            s = n("6sO2"),
            l = n("+Znq"),
            c = n("7vx8"),
            u = n("S1vB"),
            d = n("CSlQ"),
            p = n("Odds"),
            m = (n("f8UT"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p.V, null, o.createElement(p._19, {
                        className: "prime-offer-header",
                        borderBottom: !0,
                        background: p.m.Alt2,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, o.createElement(p._23, {
                        bold: !0,
                        type: p._28.H6
                    }, Object(s.d)("Free with Prime", "PrimeOfferHeader"))), this.getNumOfUnseenOffersDisplay())
                }, t.prototype.getNumOfUnseenOffersDisplay = function() {
                    var e = this.props.numOfUnseenOffers;
                    if (e) return o.createElement(p._19, {
                        className: "prime-offer__new-offer-header",
                        borderBottom: !0,
                        background: p.m.Alt2,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, o.createElement(p.V, {
                        fullWidth: !0,
                        display: p.H.Flex,
                        alignItems: p.c.Center
                    }, o.createElement(p.V, {
                        flexGrow: 1
                    }, o.createElement(p._23, {
                        bold: !0,
                        type: p._28.H6
                    }, Object(s.d)("New Prime Loot", "PrimeOfferHeader"))), o.createElement(p.V, {
                        className: "prime-offer__new-offer-header-count",
                        textAlign: p._24.Center
                    }, o.createElement(p._19, {
                        className: "prime-offer__new-offer-header-count__text",
                        background: p.m.Base,
                        color: p.F.Base,
                        display: p.H.Flex,
                        alignItems: p.c.Center,
                        justifyContent: p.U.Center
                    }, o.createElement(p._23, null, e.toString())))))
                }, t = a.__decorate([Object(d.c)("PrimeOfferHeader")], t)
            }(o.Component)),
            h = n("zCIC"),
            g = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(s.d)("You'll get characters, vehicles, skins, and boosts for games like {hearthstone} and {smite}, plus surprises like a rotating selection of indie games.", {
                        hearthstone: o.createElement(p._23, {
                            italic: !0,
                            type: p._28.Span
                        }, Object(s.d)("Hearthstone", "PrimeEmpty")),
                        smite: o.createElement(p._23, {
                            italic: !0,
                            type: p._28.Span
                        }, Object(s.d)("Smite", "PrimeEmpty"))
                    }, "PrimeEmpty");
                    return o.createElement(p.V, {
                        className: "prime-empty",
                        margin: 2
                    }, o.createElement(p.V, {
                        textAlign: p._24.Center,
                        margin: 2
                    }, o.createElement("img", {
                        className: "prime-empty__image",
                        src: "https://m.media-amazon.com/images/G/01/sm/landing/Trunk_w_Star_transparent._V530838660_.png",
                        alt: Object(s.d)("Prime Treasure Chest", "PrimeEmpty")
                    })), o.createElement(p._23, {
                        type: p._28.P,
                        bold: !0
                    }, Object(s.d)("Free in-game loot every month, plus surprises", "PrimeEmpty")), o.createElement("div", null, e))
                }, t = a.__decorate([Object(d.c)("PrimeEmpty")], t)
            }(o.Component),
            f = n("lfvs"),
            v = n("oIkB"),
            b = n("R0Kh"),
            y = (n("w/8h"), n("sq7i")),
            k = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p.V, {
                        className: "prime-claim-button"
                    }, this.getClaimButton())
                }, t.prototype.getClaimButton = function() {
                    var e = this.props,
                        t = this.getButtonText(),
                        n = o.createElement(p.u, {
                            fullWidth: !0,
                            state: this.props.claiming ? p.y.Loading : p.y.Default,
                            disabled: this.props.claiming,
                            onClick: this.props.claimCallback,
                            "data-a-target": "prime-claim-button"
                        }, t);
                    return e.offerType === b.a.EXTERNAL_OFFER ? o.createElement(p.u, {
                        fullWidth: !0,
                        linkTo: e.offerLinkUri,
                        targetBlank: !0
                    }, t) : o.createElement(p.V, {
                        position: p._4.Relative
                    }, n)
                }, t.prototype.getButtonText = function() {
                    return this.props.offerType === b.a.CLAIM_CODE ? Object(s.d)("Get Code", "PrimeClaimButton") : this.props.offerType === b.a.EXTERNAL_OFFER ? Object(s.d)("Learn More", "PrimeClaimButton") : Object(s.d)("Claim Offer", "PrimeClaimButton")
                }, t = a.__decorate([Object(c.a)(y), Object(d.c)("PrimeClaimButton")], t)
            }(o.Component),
            S = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.toggleShowDescription = function() {
                        t.setState({
                            showDescription: !t.state.showDescription
                        })
                    }, t.state = {
                        showDescription: !1
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p.V, {
                        className: "prime-claim-description",
                        margin: {
                            top: 1
                        }
                    }, o.createElement(p.u, {
                        fullWidth: !0,
                        type: p.z.Hollow,
                        onClick: this.toggleShowDescription
                    }, this.getDescriptionButtonText()), this.getDescriptionBlock())
                }, t.prototype.getDescriptionButtonText = function() {
                    return this.state.showDescription ? Object(s.d)("Close Info", "PrimeClaimDescription") : Object(s.d)("More Info", "PrimeClaimDescription")
                }, t.prototype.getDescriptionBlock = function() {
                    var e = null;
                    return this.state.showDescription && (e = o.createElement(p._19, {
                        className: "prime-claim-description__body",
                        background: p.m.Alt2,
                        border: !0
                    }, o.createElement(p.V, {
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, o.createElement(f, {
                        source: this.props.description || ""
                    })))), e
                }, t = a.__decorate([Object(d.c)("PrimeClaimDescription")], t)
            }(o.Component),
            _ = n("Hs3O"),
            w = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.getLink = function() {
                    return this.props.externalUri ? this.props.externalUri : Object(_.d)(_.c, window.location.pathname.substring(1))
                }, t.prototype.render = function() {
                    return o.createElement(p.V, {
                        className: "prime-upsell-button",
                        margin: {
                            top: 2,
                            bottom: 1
                        }
                    }, o.createElement(p.u, {
                        fullWidth: !0,
                        linkTo: this.getLink(),
                        targetBlank: !0
                    }, Object(s.d)("Start Your Free Trial", "PrimeUpsellButton")))
                }, t = a.__decorate([Object(d.c)("PrimeUpsellButton")], t)
            }(o.Component),
            E = n("e2wA"),
            C = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p.V, {
                        className: "prime-claim",
                        margin: {
                            top: 2,
                            bottom: 1
                        }
                    }, this.getCallToAction(), this.getClaimDescriptionSection())
                }, t.prototype.getCallToAction = function() {
                    var e = this.props.data;
                    return !e.loading && !e.error && e.currentUser && e.currentUser.hasPrime ? o.createElement(k, {
                        offerType: this.props.offerType,
                        offerId: this.props.offerId,
                        claimCallback: this.props.claimCallback,
                        claiming: this.props.claiming,
                        offerLinkUri: this.props.externalUri
                    }) : o.createElement(w, {
                        externalUri: this.props.externalUri
                    })
                }, t.prototype.getClaimDescriptionSection = function() {
                    return this.props.offerType === b.a.EXTERNAL_OFFER ? null : o.createElement(S, {
                        description: this.props.offerDescription
                    })
                }, t = a.__decorate([Object(c.a)(E), Object(d.c)("PrimeInstructions")], t)
            }(o.Component),
            N = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p._19, {
                        background: p.m.Alt2,
                        display: p.H.Flex,
                        justifyContent: p.U.Center,
                        padding: {
                            y: 1
                        },
                        margin: {
                            bottom: 1
                        },
                        textAlign: p._24.Center
                    }, o.createElement(p._23, {
                        type: p._28.H4,
                        align: p._38.Middle
                    }, o.createElement(p._19, {
                        padding: 1,
                        display: p.H.InlineFlex,
                        flexGrow: 1,
                        flexWrap: p.K.NoWrap,
                        alignItems: p.c.Center,
                        fontSize: this.props.fontSize ? this.props.fontSize : p.L.Size5,
                        "data-a-target": "prime-error-glitch"
                    }, o.createElement(p.V, {
                        margin: {
                            right: 1
                        },
                        display: p.H.InlineFlex,
                        flexGrow: 1,
                        flexWrap: p.K.NoWrap,
                        alignItems: p.c.Center
                    }, o.createElement(p._10, {
                        asset: p._11.DeadGlitch,
                        type: p._12.Alert,
                        width: 20,
                        height: 20
                    })), Object(s.d)("Something has gone wrong. Please try again later.", "PrimeError"))))
                }, t = a.__decorate([Object(d.c)("PrimeError")], t)
            }(o.Component),
            T = (n("nFc2"), function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.setRef = function(e) {
                        t.setState({
                            clipboardInput: e
                        })
                    }, t.copy = function() {
                        var e;
                        try {
                            t.state.clipboardInput && t.state.clipboardInput.select(), e = document.execCommand("copy")
                        } catch (t) {
                            e = !1
                        }
                        return t.setState({
                            copied: e
                        }), e
                    }, t.state = {
                        copied: !1,
                        clipboardInput: void 0
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.state.copied ? Object(s.d)("copied", "CopyButton") : Object(s.d)("copy", "CopyButton");
                    return o.createElement(p.V, {
                        className: "copy-button copy-btn",
                        display: p.H.Flex
                    }, o.createElement(p.Q, {
                        className: "copy-button__btn"
                    }, o.createElement(p.u, {
                        onClick: this.copy,
                        type: this.state.copied ? p.z.Success : p.z.Default
                    }, e)), o.createElement("input", {
                        className: "copy-button__copy-input",
                        ref: this.setRef,
                        value: this.props.clipboardText,
                        readOnly: !0
                    }))
                }, t = a.__decorate([Object(d.c)("CopyButton")], t)
            }(o.Component)),
            O = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onChange = function(e) {
                        t.setState({
                            value: e.currentTarget.value,
                            copied: !1
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillMount = function() {
                    this.props.initialText && this.setState({
                        value: this.props.initialText,
                        copied: !1
                    })
                }, t.prototype.render = function() {
                    return this.state && this.state.value ? o.createElement(p.V, {
                        className: "copyable-item",
                        display: p.H.Flex,
                        flexGrow: 1
                    }, o.createElement(p.V, {
                        flexGrow: 1
                    }, o.createElement(p.R, {
                        type: p.S.Text,
                        onChange: this.onChange,
                        value: this.state.value,
                        disabled: this.props.disabled,
                        readOnly: this.props.readOnly
                    })), o.createElement(p.V, null, o.createElement(T, {
                        clipboardText: this.state.value
                    }))) : null
                }, t = a.__decorate([Object(d.c)("CopyableItem")], t)
            }(o.Component),
            I = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p._19, {
                        className: "prime-claim-instructions",
                        background: p.m.Alt2,
                        border: !0,
                        padding: 1,
                        fontSize: p.L.Size6
                    }, o.createElement(p._37, null, o.createElement(f, {
                        source: this.props.claimInstructions || "",
                        escapeHtml: !0,
                        renderers: {
                            Link: function(e) {
                                return o.createElement("a", {
                                    href: e.href,
                                    target: "_blank",
                                    rel: "nofollow noopener noreferrer"
                                }, e.children)
                            }
                        }
                    })))
                }, t = a.__decorate([Object(d.c)("PrimeClaimInstructions")], t)
            }(o.Component),
            D = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p.V, {
                        className: "prime-redeem",
                        margin: {
                            top: 1
                        }
                    }, this.getCodeOrConfirmation(), this.getPrimeClaimInstructions())
                }, t.prototype.getCodeOrConfirmation = function() {
                    return this.props.code && this.props.deliveryMethod === b.a.CLAIM_CODE ? o.createElement(p.V, null, o.createElement(O, {
                        initialText: this.props.code,
                        readOnly: !0,
                        textCenter: !0
                    })) : o.createElement(p._19, {
                        background: p.m.Alt2,
                        display: p.H.Flex,
                        justifyContent: p.U.Center,
                        padding: {
                            y: 1
                        },
                        margin: {
                            bottom: 1
                        }
                    }, o.createElement(p._23, {
                        type: p._28.H4,
                        align: p._38.Middle
                    }, o.createElement(p.V, {
                        padding: 1,
                        display: p.H.InlineFlex,
                        flexGrow: 1,
                        flexWrap: p.K.NoWrap,
                        alignItems: p.c.Center,
                        "data-a-target": "prime-redeem-check"
                    }, o.createElement(p.V, {
                        margin: {
                            right: 1
                        },
                        display: p.H.InlineFlex,
                        flexGrow: 1,
                        flexWrap: p.K.NoWrap,
                        alignItems: p.c.Center
                    }, o.createElement(p._10, {
                        asset: p._11.Check,
                        type: p._12.Success,
                        width: 20,
                        height: 20
                    })), Object(s.d)("Added To Your Twitch Account", "PrimeRedeem"))))
                }, t.prototype.getPrimeClaimInstructions = function() {
                    if (this.props.claimInstructions) return o.createElement(I, {
                        claimInstructions: this.props.claimInstructions || ""
                    })
                }, t = a.__decorate([Object(d.c)("PrimeRedeem")], t)
            }(o.Component),
            L = n("el3o"),
            x = (n("v+rJ"), n("rM0q")),
            R = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        claimed: !1,
                        claiming: !1,
                        error: !1,
                        claimData: ""
                    }, t.renderRedeemUpsellOrClaimSection = function(e) {
                        var n = e.content || {},
                            i = e.self || {
                                claimData: ""
                            },
                            a = (t.props.data || {}).currentUser || {};
                        if (t.state.error) return o.createElement(N, {
                            fontSize: p.L.Size6
                        });
                        if ((t.isCurrentOfferClaimed(e) || t.state.claimed) && a && a.hasPrime) {
                            var r = t.state.claimData || i.claimData;
                            return o.createElement(D, {
                                claimInstructions: e.claimInstructions,
                                code: r,
                                deliveryMethod: e.deliveryMethod
                            })
                        }
                        return o.createElement(C, {
                            offerId: e.id,
                            offerDescription: e.description || "",
                            offerType: e.deliveryMethod || "",
                            externalUri: n.externalURL || "",
                            claimCallback: t.claimOffer,
                            claiming: t.state.claiming
                        })
                    }, t.claimOffer = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.setState({
                            claiming: !0
                        });
                        var n = t.props.data;
                        if (!n.loading && !n.error && n.currentUser.id) {
                            var i = n.currentUser.id,
                                a = t.props.offer,
                                r = Object(v.a)({
                                    offerID: a.id
                                });
                            t.props.claimPrimeOffer(r).then(function(e) {
                                var n = ((e.data || {}).claimPrimeOffer || {}).self || {};
                                n && a && t.setState({
                                    claimData: n.claimData
                                }), t.markAsClaimedInLocalStorage(i)
                            }).catch(function() {
                                t.setState({
                                    claiming: !1,
                                    claimed: !1,
                                    error: !0
                                })
                            })
                        }
                    }, t.markAsClaimedInLocalStorage = function(e) {
                        var n = t.props.offer,
                            i = b.b(n.id, e),
                            a = b.c();
                        a.push(i), b.f(a), t.setState({
                            claiming: !1,
                            claimed: !0,
                            error: !1
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.offer,
                        t = this.props.isLast || !1;
                    if (e) {
                        var n = e.content || {},
                            i = n.game || {},
                            a = n.categories || [];
                        return o.createElement(p._19, {
                            className: "prime-offer",
                            alignItems: p.c.Center,
                            borderBottom: !t,
                            padding: {
                                x: 2,
                                y: 1
                            }
                        }, o.createElement(p.V, {
                            className: "prime-offer__title",
                            padding: {
                                y: .5
                            }
                        }, o.createElement(f, {
                            className: "prime-offer__title__markdown",
                            containerTagName: "h4",
                            source: e.title || ""
                        })), o.createElement("img", {
                            src: e.imageURL
                        }), o.createElement(p.V, {
                            className: "prime-offer__description",
                            padding: {
                                top: .5
                            }
                        }, o.createElement(p._23, {
                            type: p._28.P
                        }, i.name, " ", a[0])), o.createElement(p.V, {
                            className: "prime-offer__publisher"
                        }, o.createElement(p._23, {
                            type: p._28.P,
                            color: p.F.Alt2,
                            fontSize: p.L.Size7
                        }, n.publisher)), this.renderRedeemUpsellOrClaimSection(e))
                    }
                    return null
                }, t.prototype.isCurrentOfferClaimed = function(e) {
                    return (e.self || {
                        hasEntitlement: !1
                    }).hasEntitlement || this.isCurrentOfferClaimedInLocalStorage()
                }, t.prototype.isCurrentOfferClaimedInLocalStorage = function() {
                    var e = this.props.data,
                        t = this.props.offer;
                    if (!e.loading && !e.error && e.currentUser) {
                        var n = e.currentUser.id,
                            i = b.b(t.id, n);
                        return b.c().includes(i)
                    }
                }, t = a.__decorate([Object(c.a)(x, {
                    name: "data"
                }), Object(c.a)(L, {
                    name: "claimPrimeOffer"
                }), Object(d.c)("PrimeOffer")], t)
            }(o.Component),
            F = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p._19, {
                        className: "prime-offer-placeholder",
                        alignItems: p.c.Center,
                        borderBottom: !0,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, o.createElement(p.V, {
                        className: "prime-offer-placeholder__title",
                        padding: {
                            y: .5
                        }
                    }, o.createElement(p._3, {
                        height: 20
                    })), o.createElement(p._3, {
                        height: 160
                    }), o.createElement(p.V, {
                        className: "prime-offer-placeholder__description",
                        padding: {
                            y: .5
                        }
                    }, o.createElement(p._3, {
                        height: 20,
                        width: 160
                    })), o.createElement(p.V, {
                        className: "prime-offer-placeholder__publisher"
                    }, o.createElement(p._3, {
                        height: 20,
                        width: 80
                    })), o.createElement(p.V, {
                        className: "prime-offer-placeholder__claim",
                        margin: {
                            top: 2,
                            bottom: 1
                        }
                    }, o.createElement(p._3, {
                        height: 40
                    })))
                }, t = a.__decorate([Object(d.c)("PrimeOfferPlaceholder")], t)
            }(o.Component),
            P = (n("7L7x"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return o.createElement(p._19, {
                        "data-a-target": "prime-offers-upsell",
                        className: "prime-offers-upsell",
                        alignItems: p.c.Center,
                        padding: {
                            x: 2,
                            y: 1
                        },
                        borderBottom: !0
                    }, o.createElement(p._23, {
                        type: p._28.H4
                    }, Object(s.d)("Claim With Twitch Prime", "PrimeUpsell")), o.createElement(p.V, {
                        className: "prime-upsell__logo-container",
                        fullWidth: !0,
                        margin: {
                            y: 2
                        },
                        textAlign: p._24.Center
                    }, o.createElement(p._10, {
                        asset: p._11.LogoTwitchPrime,
                        width: 330,
                        height: 150,
                        type: p._12.Brand
                    })), o.createElement(p._23, {
                        type: p._28.P
                    }, Object(s.d)("Get free game loot like this every month plus surprises, ad-free viewing, and loads more with Twitch Prime.", "PrimeUpsell")), o.createElement(w, null))
                }, t = a.__decorate([Object(d.c)("PrimeUpsell")], t)
            }(o.Component)),
            U = n("eY4D"),
            M = (n("DgR+"), n("65au")),
            A = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.shouldShowPlaceholders = function() {
                        var e = t.props.offersData,
                            n = e.primeOffers,
                            i = void 0 === n || null === n;
                        return e.loading || !e.error && i && t.props.showByDefault
                    }, t.renderOfferPlaceholders = function() {
                        for (var e = [], t = 0; t < 3; ++t) e.push(o.createElement(F, {
                            key: t
                        }));
                        return e
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    var e = this.props.offersData;
                    e && e.primeOffers && this.props.latencyTracking.reportInteractive(e.primeOffers.length)
                }, t.prototype.render = function() {
                    return o.createElement(h.b, {
                        className: "prime-offer-listing"
                    }, o.createElement(p.V, {
                        className: "prime-offer-listing__content",
                        alignItems: p.c.Center,
                        padding: {
                            top: 1,
                            bottom: 2,
                            left: 1,
                            right: 1
                        }
                    }, this.renderUpsell(), this.renderOfferExperience()))
                }, t.prototype.renderUpsell = function() {
                    var e = this.props.userData;
                    if (!e.loading && !e.error && !this.currentUserHasPrime(e)) return o.createElement(P, null)
                }, t.prototype.renderOfferExperience = function() {
                    var e = this.props.offersData;
                    if (this.shouldShowPlaceholders()) return this.renderOfferPlaceholders();
                    if (!e.error && e.primeOffers && e.primeOffers.length) {
                        var t = this.getSortedOffers(),
                            n = t[t.length - 1];
                        return t.map(function(e) {
                            return o.createElement(R, {
                                key: e.id,
                                offer: e,
                                isLast: n.id === e.id
                            })
                        })
                    }
                    return o.createElement(g, null)
                }, t.prototype.getSortedOffers = function() {
                    var e = this.props.offersData.primeOffers,
                        t = this.getUserId();
                    if (t) {
                        var n = Object(b.c)(),
                            i = e.filter(function(e) {
                                return !n.includes(Object(b.b)(e.id, t))
                            }).sort(b.i),
                            a = e.filter(function(e) {
                                return !i.includes(e)
                            }).sort(b.i);
                        return i.concat(a)
                    }
                    return e.slice().sort(b.i)
                }, t.prototype.getUserId = function() {
                    var e = this.props.userData;
                    return !e.loading && !e.error && e.currentUser && e.currentUser.id ? e.currentUser.id : ""
                }, t.prototype.currentUserHasPrime = function(e) {
                    var t = e.currentUser;
                    return t && t.hasPrime
                }, t = a.__decorate([Object(c.a)(U, {
                    name: "offersData",
                    options: function() {
                        return {
                            variables: {
                                dateOverride: Object(b.d)()
                            }
                        }
                    }
                }), Object(c.a)(M, {
                    name: "userData"
                }), Object(d.c)("PrimeOfferList")], t)
            }(o.Component),
            V = n("tTbW"),
            j = (n("9856"), n("wjhu")),
            H = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        numOfUnseenOffers: 0
                    }, t.showOffersByDefault = function() {
                        var e = location.search,
                            n = r.parse(e);
                        return n && !!n.expandoffers || t.props.openByDefault
                    }, t.onToggleMenu = function(e) {
                        t.seeOffers(), e && t.setState({
                            numOfUnseenOffers: 0
                        })
                    }, t.getUnseenOffers = function(e) {
                        var n = e.offersData;
                        if (n && !n.loading && !n.error) {
                            var i = n.primeOffers || [],
                                a = b.e();
                            t.setState({
                                numOfUnseenOffers: i.filter(function(e) {
                                    return !(a.includes(e.id) || t.offerIsClaimed(e))
                                }).length
                            })
                        }
                    }, t.offerIsClaimed = function(e) {
                        return e.self && e.self.hasEntitlement
                    }, t.seeOffers = function() {
                        var e = t.props.offersData;
                        if (e && !e.loading && !e.error) {
                            var n = (e.primeOffers || []).map(function(e) {
                                return "" + e.id
                            });
                            b.g(n)
                        }
                    }, t.renderOfferList = function() {
                        var e = t.props.offersData,
                            n = t.showOffersByDefault() || !1;
                        return e && !e.loading && !e.error || n ? o.createElement(p.V, {
                            "data-a-target": "offers-list",
                            className: "prime-offers__list"
                        }, o.createElement(m, {
                            numOfUnseenOffers: t.state.numOfUnseenOffers
                        }), o.createElement(A, {
                            showByDefault: n
                        })) : null
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.getUnseenOffers(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.getUnseenOffers(e)
                }, t.prototype.render = function() {
                    var e = this.props.userData && this.props.userData.requestInfo && Object(u.a)(this.props.userData.requestInfo.countryCode),
                        t = this.props.userData && this.props.userData.currentUser && this.props.userData.currentUser.hasPrime;
                    if (!e && !t) return null;
                    var n = {
                        align: p._32.Center,
                        direction: p._33.Bottom,
                        label: ""
                    };
                    return this.state.numOfUnseenOffers > 0 ? n.label = Object(s.d)("New Prime Loot", "PrimeOffers") : n.label = Object(s.d)("Prime Loot", "PrimeOffers"), o.createElement(p.V, {
                        className: "prime-offers",
                        position: p._4.Relative
                    }, o.createElement(l.a, {
                        onToggle: this.onToggleMenu,
                        openByDefault: this.showOffersByDefault(),
                        tooltipProps: n
                    }, o.createElement(p.v, {
                        ariaLabel: Object(s.d)("Prime offers", "PrimeOffers"),
                        overlay: !0,
                        size: p.x.Large,
                        icon: p._11.Crown,
                        "data-a-target": "prime-offers-icon",
                        "data-target": "prime-offers-icon"
                    }), o.createElement(p.p, {
                        direction: p.q.BottomRight,
                        size: p.r.Large,
                        offsetX: "9px"
                    }, this.renderOfferList())), this.renderUnseenOffersDisplay())
                }, t.prototype.renderUnseenOffersDisplay = function() {
                    var e = this.state.numOfUnseenOffers;
                    if (e) return o.createElement(p.V, {
                        className: "prime-offers__pill",
                        position: p._4.Absolute
                    }, o.createElement(p.e, {
                        type: p.i.BounceIn,
                        duration: p.g.Medium,
                        timing: p.h.EaseIn,
                        enabled: e > 0
                    }, o.createElement(p._1, {
                        label: e.toString(),
                        type: p._2.Notification
                    })))
                }, t = a.__decorate([Object(c.a)(V, {
                    name: "offersData",
                    skip: function(e) {
                        return !e.firstPageLoaded
                    },
                    options: function() {
                        return {
                            variables: {
                                dateOverride: Object(b.d)()
                            }
                        }
                    }
                }), Object(c.a)(j, {
                    name: "userData"
                }), Object(d.c)("PrimeOffers", {
                    autoReportInteractive: !0
                })], t)
            }(o.Component),
            B = Object(i.a)(function(e) {
                return {
                    firstPageLoaded: !!e.session.firstPageLoaded
                }
            })(H),
            z = (n("ukY1"), n("F1v6")),
            W = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.data.currentUser && this.props.data.currentUser.hasPrime,
                        t = this.props.data.requestInfo && this.props.data.requestInfo.countryCode;
                    if (!Object(b.h)(e, t)) return null;
                    if (this.props.data.loading) return null;
                    var n = Object(_.d)(_.a, ""),
                        i = Object(s.d)("Twitch Prime", "BlueBar"),
                        a = o.createElement("span", null, Object(s.d)("Free loot every month, plus exclusives and surprises, ad-free viewing, and loads more.", "BlueBar")),
                        r = Object(_.d)(_.a, ""),
                        l = Object(s.d)("Start Your Free Trial", "BlueBar");
                    if (!this.props.data.loading && !this.props.data.error) {
                        var c = this.props.data;
                        c && c.primePromotions && c.primePromotions.forEach(function(e) {
                            switch (e.id) {
                                case "twitch.prime.bluebar.left1":
                                    n = e.externalURL, i = e.text;
                                    break;
                                case "twitch.prime.bluebar.center1":
                                    a = o.createElement(f, {
                                        source: e.text,
                                        renderers: {
                                            Link: function(e) {
                                                return o.createElement("a", {
                                                    href: e.href,
                                                    target: "_blank",
                                                    rel: "noopener noreferrer"
                                                }, e.children)
                                            }
                                        }
                                    });
                                    break;
                                case "twitch.prime.bluebar.right1":
                                    r = e.externalURL, l = e.text
                            }
                        })
                    }
                    return o.createElement(p._19, {
                        color: p.F.Base,
                        className: "blue-bar",
                        position: p._4.Relative,
                        fullWidth: !0
                    }, o.createElement(p.V, {
                        className: "blue-bar__bar",
                        display: p.H.Flex,
                        alignItems: p.c.Center,
                        justifyContent: p.U.Between,
                        flexWrap: p.K.NoWrap,
                        margin: "auto",
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, o.createElement(p.V, {
                        display: p.H.InlineFlex,
                        alignItems: p.c.Center,
                        padding: {
                            right: .5
                        }
                    }, o.createElement(p.V, {
                        className: "blue-bar__logo",
                        display: p.H.InlineFlex,
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, o.createElement(p._10, {
                        asset: p._11.Crown,
                        width: 20,
                        height: 13
                    })), o.createElement(p._23, {
                        bold: !0,
                        type: p._28.Span,
                        noWrap: !0,
                        fontSize: p.L.Size6
                    }, o.createElement(p.Q, {
                        padding: {
                            x: 1
                        }
                    }, o.createElement("a", {
                        className: "blue-bar__link",
                        href: n,
                        target: "_blank",
                        rel: "noopener noreferrer"
                    }, i))), o.createElement(p._23, {
                        className: "blue-bar__headline",
                        type: p._28.Span,
                        fontSize: p.L.Size6
                    }, a)), o.createElement(p.V, {
                        display: p.H.InlineFlex,
                        flexShrink: 0
                    }, o.createElement(p._23, {
                        bold: !0,
                        type: p._28.Span,
                        noWrap: !0,
                        fontSize: p.L.Size6,
                        color: p.F.Base
                    }, o.createElement("a", {
                        className: "blue-bar__link",
                        href: r,
                        target: "_blank",
                        rel: "noopener noreferrer"
                    }, l)))))
                }, t = a.__decorate([Object(c.a)(z, {
                    options: function() {
                        return {
                            variables: {
                                stringIds: ["twitch.prime.bluebar.left1", "twitch.prime.bluebar.center1", "twitch.prime.bluebar.right1"],
                                dateOverride: Object(b.d)()
                            }
                        }
                    }
                }), Object(d.c)("BlueBarComponent")], t)
            }(o.Component);
        n.d(t, "b", function() {
            return B
        }), n.d(t, "a", function() {
            return W
        }), n.d(t, "c", function() {
            return b.d
        })
    },
    "8RKZ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("U7vG"),
            o = n("qe65"),
            s = n("Odds"),
            l = (n("2rJy"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onImageLoad = function() {
                        n.setState({
                            imageLoaded: !0
                        })
                    }, n.renderImage = function() {
                        var e = null,
                            t = a("chat-image", n.props.className);
                        if (n.props.srcSet.themed) e = r.createElement(s.Q, {
                            display: n.state.imageLoaded ? s.H.InlineBlock : s.H.Hide
                        }, r.createElement(o.a, {
                            alt: n.props.alt,
                            className: t,
                            defaultRes: n.props.srcKey,
                            onLoad: n.onImageLoad,
                            sources: n.props.srcSet
                        }));
                        else {
                            for (var i = [], l = 0, c = Object.keys(n.props.srcSet.sources); l < c.length; l++) {
                                var u = c[l];
                                i.push(n.props.srcSet.sources[u] + " " + u)
                            }
                            e = r.createElement(s.Q, {
                                display: n.state.imageLoaded ? s.H.InlineBlock : s.H.Hide
                            }, r.createElement("img", {
                                className: t,
                                onLoad: n.onImageLoad,
                                src: n.props.srcSet.sources[n.props.srcKey],
                                srcSet: i.join(","),
                                alt: n.props.alt
                            }))
                        }
                        return e
                    }, n.renderPlaceholder = function() {
                        return n.state.imageLoaded ? null : r.createElement(s.Q, {
                            display: s.H.InlineBlock
                        }, r.createElement(s._23, {
                            type: s._28.Span,
                            className: "chat-image__placeholder",
                            align: s._38.Top
                        }, r.createElement(s._3, {
                            height: 28,
                            width: 28
                        })))
                    }, n.state = {
                        imageLoaded: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = r.createElement(s._31, {
                        direction: this.props.tooltipDirection || s._33.Top,
                        label: this.props.alt,
                        display: s.H.Inline,
                        offsetY: "0.9rem",
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText);
                    return this.props.cheerText ? r.createElement(s._23, {
                        type: s._28.Span,
                        noWrap: !0
                    }, e) : e
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    "8pDc": function(e, t) {},
    "94wQ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "TopNav_User_UpdateIsSharingActivity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateIsSharingActivityInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateIsSharingActivity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isSharingActivity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 173
            }
        };
        n.loc.source = {
            body: "mutation TopNav_User_UpdateIsSharingActivity($input: UpdateIsSharingActivityInput!) {\nupdateIsSharingActivity(input: $input) {\nuser {\nid\nsettings {\nisSharingActivity\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    9856: function(e, t) {},
    "9NS1": function(e, t) {},
    "9Q3d": function(e, t) {},
    "9RMu": function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                id: "" + e.id,
                start: e.start,
                end: e.end
            }
        }

        function a(e) {
            return {
                from: e.start,
                to: e.end,
                emoteID: e.id,
                id: e.id + ";" + e.start + ";" + e.end,
                setID: "0",
                __typename: "EmbeddedEmote"
            }
        }
        t.c = function(e) {
            return {
                __typename: "WhisperMessageEdge",
                cursor: "" + e.data_object.id,
                node: {
                    __typename: "WhisperMessage",
                    id: e.data_object.message_id,
                    sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                    editedAt: null,
                    deletedAt: null,
                    content: {
                        __typename: "MessageBody",
                        content: e.data_object.body,
                        emotes: e.data_object.tags.emotes.map(function(e) {
                            return a(i(e))
                        })
                    },
                    from: {
                        __typename: "User",
                        id: "" + e.data_object.from_id
                    }
                }
            }
        }, t.b = function(e) {
            return e.map(function(e) {
                return a(i(e))
            })
        }, t.a = a
    },
    "9uSE": function(e, t) {},
    A5Hr: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return y
        });
        var i = n("TToO"),
            a = n("U7vG"),
            r = (n.n(a), n("RH2O")),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("7vx8"),
            c = n("oIkB"),
            u = n("vH/s"),
            d = n("CSlQ"),
            p = n("LjAQ"),
            m = n("mw/a"),
            h = n("xwpJ"),
            g = n("LjAQ"),
            f = n("mmQh"),
            v = (n.n(f), n("mRH2")),
            b = (n.n(v), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        submitStatus: g.b.Unsubmitted
                    }, t.handleSubmit = function(e, n, a, r) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, o, l;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (e !== p.a) return [3, 5];
                                        o = {
                                            userID: this.props.reportContext.targetUserID,
                                            communityID: a || "",
                                            reason: n
                                        }, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(c.a)(o))];
                                    case 2:
                                        return i.sent(), s.n.tracking.track(u.SpadeEventType.CommunityModeration, {
                                            community_id: a,
                                            name: r,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            target_id: this.props.reportContext.targetUserID,
                                            action: "report",
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 4];
                                    case 3:
                                        return t = i.sent(), s.i.error(t, "ReportUserInCommunity Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [3, 9];
                                    case 5:
                                        o = {
                                            description: n,
                                            reason: e,
                                            content: this.props.reportContext.contentType,
                                            contentID: this.props.reportContext.contentID,
                                            extra: this.props.reportContext.extra,
                                            targetID: this.props.reportContext.targetUserID
                                        }, this.props.reportContext.contentType === m.a.Community && this.props.reportContext.extra && (o.description = Object(h.a)(this.props.reportContext.extra, n)), i.label = 6;
                                    case 6:
                                        return i.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(c.a)(o))];
                                    case 7:
                                        return i.sent(), this.props.reportContext.contentType === m.a.Community && s.n.tracking.track(u.SpadeEventType.CommunityReport, {
                                            community_id: this.props.reportContext.contentID,
                                            name: this.props.reportContext.extra,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 9];
                                    case 8:
                                        return l = i.sent(), s.i.error(l, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 9];
                                    case 9:
                                        return [2]
                                }
                            })
                        })
                    }, t.handleChildError = function(e) {
                        return t.setState({
                            submitStatus: e
                        })
                    }, t.handleClose = function() {
                        t.props.onClose && t.props.onClose(t.state.submitStatus)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose()
                }, t.prototype.render = function() {
                    return a.createElement(g.c, {
                        onClose: this.handleClose,
                        onError: this.handleChildError,
                        onSubmit: this.handleSubmit,
                        reportContentType: this.props.reportContext.contentType,
                        submitStatus: this.state.submitStatus,
                        targetUserID: this.props.reportContext.targetUserID,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    })
                }, t
            }(a.Component)),
            y = Object(o.compose)(Object(l.a)(f, {
                name: "reportUserInCommunity"
            }), Object(l.a)(v, {
                name: "reportUser"
            }), Object(d.c)("ReportUser"), Object(r.a)(function(e) {
                return {
                    sessionUser: e.session.user
                }
            }, null))(b)
    },
    ALci: function(e, t) {},
    AckU: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("7enT"),
            r = n("cuT/"),
            o = Object(i.a)(function(e) {
                return {
                    isExpanded: e.ui.rightColumnExpanded,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    sideNavExpanded: e.ui.sideNavExpanded
                }
            }, function(e) {
                return {
                    collapse: function() {
                        return e(a.l())
                    },
                    expand: function() {
                        return e(a.p())
                    }
                }
            })(r.b);
        n.d(t, "b", function() {
            return o
        }), n.d(t, "a", function() {
            return r.a
        })
    },
    "Aj/L": function(e, t, n) {
        "use strict";
        t.e = function(e) {
            return e.session.authInitialized && e.session.languageInitialized
        }, t.d = function(e) {
            return !!e.session.user
        }, t.c = function(e) {
            return e.session.user
        }, t.a = function(e) {
            return e.session.user && e.session.user.authToken
        }, t.b = function(e) {
            return e.session.user && e.session.user.legacyCSRFToken
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("ZaD5"),
            o = function() {
                return {
                    authInitialized: !1,
                    initialUserAvailabilityIsSet: !1,
                    languageCode: "en",
                    locale: "en-US",
                    languageInitialized: !1,
                    firstPageLoaded: !!a.a.embedded
                }
            };
        a.n.store.registerReducer("session", function(e, t) {
            switch (void 0 === e && (e = o()), t.type) {
                case r.a:
                    return i.__assign({}, e, {
                        authInitialized: !0,
                        user: t.user
                    });
                case r.d:
                    return i.__assign({}, e, {
                        languageInitialized: !0,
                        languageCode: t.languageCode,
                        locale: t.locale
                    });
                case r.b:
                    return i.__assign({}, e, {
                        firstPageLoaded: !0
                    });
                case r.c:
                    return i.__assign({}, e, {
                        initialUserAvailabilityIsSet: !0
                    });
                default:
                    return e
            }
        })
    },
    BC6Q: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return !(!e && !t) && (!t || !e || (t.channelLogin !== e.channelLogin || t.vodID !== e.vodID || t.collectionID !== e.collectionID))
        }
        var a, r = n("RH2O"),
            o = n("2KeS"),
            s = n("7enT"),
            l = n("Aj/L"),
            c = n("TToO"),
            u = n("U7vG"),
            d = n("F8kA"),
            p = n("6sO2"),
            m = n("HW6M"),
            h = n("AckU"),
            g = n("LiYP"),
            f = n("fc0G"),
            v = n("Odds"),
            b = (n("KfGW"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        sideNavCollapsedByCSSBreakpoint: window.innerWidth < g.d
                    }, t.resizeAnimationFrame = 0, t.renderMiniTitle = function() {
                        return u.createElement(v.V, {
                            padding: {
                                y: .5,
                                right: .5
                            },
                            flexDirection: v.J.Row,
                            display: v.H.Flex,
                            alignItems: v.c.Center,
                            justifyContent: v.U.Between,
                            flexWrap: v.K.NoWrap,
                            className: "persistent-player__title",
                            zIndex: v._39.Above,
                            "data-test-selector": "persistent-player-mini-title"
                        }, u.createElement(v.V, {
                            ellipsis: !0,
                            margin: {
                                x: 1
                            }
                        }, u.createElement(v._23, {
                            fontSize: v.L.Size5,
                            type: v._28.Span
                        }, t.props.options.miniPlayerTitle)), u.createElement(v.V, {
                            flexShrink: 0
                        }, u.createElement(v.v, {
                            ariaLabel: Object(p.d)("Dismiss Mini Player", "PersistentPlayerMini"),
                            icon: v._11.Close,
                            overlay: !0,
                            onClick: t.props.onClickDismiss,
                            "data-test-selector": "persistent-player-mini-dismiss"
                        })))
                    }, t.renderMiniHoverControls = function() {
                        var e = t.state.isPaused ? Object(p.d)("Play", "PersistentPlayerMini") : Object(p.d)("Pause", "PersistentPlayerMini");
                        return u.createElement(v.V, {
                            className: "persistent-player__hover-controls",
                            justifyContent: v.U.Center,
                            alignItems: v.c.Center,
                            display: v.H.Flex,
                            flexDirection: v.J.Row,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            margin: {
                                top: 4
                            },
                            position: v._4.Absolute,
                            zIndex: v._39.Above,
                            "data-test-selector": "persistent-player-mini-hover"
                        }, t.renderMiniControl(v._11.MiniPlayerExpand, Object(p.d)("Expand Player", "PersistentPlayerMini"), "persistent-player-mini-expand", t.props.onClickExpand), u.createElement(v.V, {
                            margin: {
                                left: 2
                            }
                        }, t.renderMiniControl(t.state.isPaused ? v._11.MiniPlayerPlay : v._11.MiniPlayerPause, e, "persistent-player-mini-pause-play", t.togglePause)))
                    }, t.renderMiniControl = function(e, t, n, i) {
                        return u.createElement("button", {
                            className: "persistent-player__control",
                            onClick: i,
                            "aria-label": t,
                            "data-test-selector": n
                        }, u.createElement(v._10, {
                            asset: e,
                            width: 30,
                            height: 30
                        }))
                    }, t.renderMiniInterceptPointerView = function() {
                        return u.createElement(v.V, {
                            className: "persistent-player__intercept-view",
                            position: v._4.Absolute,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            zIndex: v._39.Above,
                            "data-test-selector": "persistent-player-mini-cover"
                        })
                    }, t.togglePause = function() {
                        t.setState(function(e) {
                            return {
                                shouldPause: !e.isPaused
                            }
                        })
                    }, t.onPauseToggled = function(e) {
                        t.setState({
                            isPaused: e,
                            shouldPause: e
                        })
                    }, t.collapseOnBreakpoint = function() {
                        var e = window.innerWidth;
                        e < g.d && !t.state.sideNavCollapsedByCSSBreakpoint ? t.setState({
                            sideNavCollapsedByCSSBreakpoint: !0
                        }) : e >= g.d && t.state.sideNavCollapsedByCSSBreakpoint && t.setState({
                            sideNavCollapsedByCSSBreakpoint: !1
                        }), t.resizeAnimationFrame = 0
                    }, t.handleWindowResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.collapseOnBreakpoint))
                    }, t.handleLocationChange = function() {
                        t.props.theatreModeEnabled && t.props.disableTheatreMode()
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.location.pathname !== e.location.pathname && this.handleLocationChange(), i(this.props.options.playerProps, e.options.playerProps) && this.setState({
                        shouldPause: !1
                    })
                }, t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.handleWindowResize)
                }, t.prototype.componentWillUnmount = function() {
                    this.handleLocationChange(), window.removeEventListener("resize", this.handleWindowResize), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.render = function() {
                    var e, t = this.props.theatreModeEnabled && !this.props.mini,
                        n = m({
                            "persistent-player--theatre": t
                        }),
                        i = this.props.mainRef.getBoundingClientRect();
                    if (t) e = {
                        position: "fixed",
                        left: 0,
                        top: 0,
                        maxHeight: "100vh",
                        height: "100%",
                        width: window.innerWidth < 820 || this.props.rightNavCollapsed ? "100%" : "calc(100% - " + h.a + ")",
                        zIndex: 3e3
                    };
                    else if (this.props.mini) e = {
                        position: "fixed",
                        width: "26rem",
                        height: "18.6rem",
                        left: i.left,
                        bottom: 0,
                        margin: "1rem",
                        zIndex: 1e3
                    };
                    else {
                        var a = this.props.contentRef.getBoundingClientRect(),
                            r = a.left - i.left,
                            o = i.right - a.right;
                        e = {
                            top: a.top - i.top,
                            left: r,
                            position: "absolute",
                            width: "100%",
                            maxWidth: "calc(100% - " + (r + o) + "px)",
                            maxHeight: "calc(100vh - 16rem)",
                            overflow: "hidden",
                            height: "auto"
                        }
                    }
                    return u.createElement("div", {
                        className: m("persistent-player", n),
                        style: e
                    }, this.props.mini && this.renderMiniTitle(), u.createElement(v.j, null, u.createElement(f.c, c.__assign({}, this.props.options.playerProps, {
                        instanceRef: this.props.onVideoPlayerInstance,
                        miniModeEnabled: this.props.mini,
                        paused: this.state.shouldPause,
                        onPauseToggled: this.onPauseToggled
                    }))), this.props.mini && this.renderMiniInterceptPointerView(), this.props.mini && this.renderMiniHoverControls())
                }, t
            }(u.Component)),
            y = Object(d.f)(b),
            k = Object(r.a)(function(e) {
                return {
                    sideNavCollapsed: !e.ui.sideNavExpanded,
                    rightNavCollapsed: !e.ui.rightColumnExpanded,
                    theatreModeEnabled: e.ui.theatreModeEnabled
                }
            }, function(e) {
                return Object(o.bindActionCreators)({
                    disableTheatreMode: s.n
                }, e)
            })(y);
        ! function(e) {
            e.CloseMini = "close", e.OpenMini = "open", e.ExpandPlayer = "expand", e.ContentChange = "content_change"
        }(a || (a = {}));
        var S;
        ! function(e) {
            e.Minimize = "minimize", e.Maximize = "maximize", e.UserMinimize = "user_minimize", e.UserMaximize = "user_maximize"
        }(S || (S = {}));
        var _, w = n("/Vp/"),
            E = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = p.i.withCategory("PersistentPlayerRoot"), n.trackMiniPlayerAction = function(e, t) {
                        n.videoPlayerComponent && n.videoPlayerComponent.trackMiniPlayerAction(e, t)
                    }, n.setVideoPlayerRef = function(e) {
                        return n.videoPlayerComponent = e
                    }, n.onClickExpand = function() {
                        n.state.options && (n.state.overrides && n.state.overrides.onMiniPlayerExpand ? n.state.overrides.onMiniPlayerExpand() : (n.props.history.push(n.state.options.miniPlayerContentRoute), n.trackMiniPlayerAction(a.ExpandPlayer, S.UserMaximize)))
                    }, n.onClickDismiss = function() {
                        n.state.options && (n.state.overrides && n.state.overrides.onMiniPlayerDismiss ? n.state.overrides.onMiniPlayerDismiss() : (n.destroyPlayer(), n.trackMiniPlayerAction(a.CloseMini, S.UserMinimize)))
                    }, n.onHistoryChange = function(e) {
                        var t = n.props.isLoggedIn,
                            i = Object(w.a)({
                                isLoggedIn: t,
                                location: e
                            });
                        i !== n.state.hideSideNav && n.setState({
                            hideSideNav: i
                        })
                    };
                    var i = t.isLoggedIn,
                        r = t.location;
                    return n.state = {
                        mini: !1,
                        hideSideNav: Object(w.a)({
                            isLoggedIn: i,
                            location: r
                        })
                    }, _ && n.logger.warn("attempting to create a second instance of the Persistent Player Root. There should only be one in <Root>, use <PersistentPlayerContent> instead."), _ = n, n
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = p.n.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten && this.historyUnlisten()
                }, t.prototype.render = function() {
                    return this.state.options && this.state.contentRef && this.props.mainRef ? u.createElement(k, {
                        options: this.state.options,
                        contentRef: this.state.contentRef,
                        mainRef: this.props.mainRef,
                        mini: this.state.mini,
                        hideSideNav: this.state.hideSideNav,
                        forceRender: this.state.forcePresentationRender,
                        onClickExpand: this.onClickExpand,
                        onClickDismiss: this.onClickDismiss,
                        onVideoPlayerInstance: this.setVideoPlayerRef
                    }) : null
                }, t.prototype.destroyPlayer = function(e) {
                    var t = this;
                    this.setState({
                        mini: !1,
                        options: void 0,
                        overrides: void 0,
                        contentRef: void 0
                    }, function() {
                        t.props.stopPersistingPlayer(), e && e()
                    })
                }, t.prototype.requestVideoContent = function(e) {
                    var t = this,
                        n = function() {
                            t.setState({
                                contentRef: e.ref,
                                options: e.options,
                                overrides: e.overrides
                            }, e.onCompletion)
                        };
                    i(this.state.options && this.state.options.playerProps, e.options.playerProps) ? (this.trackMiniPlayerAction(a.ContentChange, ""), this.destroyPlayer(n)) : n()
                }, t.prototype.transitionToMiniPlayer = function(e) {
                    this.setState({
                        mini: !0
                    }), this.props.beginPersistingPlayer(), e && this.trackMiniPlayerAction(a.OpenMini, e)
                }, t.prototype.transitionToAnchoredPlayer = function(e) {
                    this.setState({
                        mini: !1
                    }), this.props.stopPersistingPlayer(), e && this.trackMiniPlayerAction(a.CloseMini, e)
                }, t.prototype.reposition = function() {
                    var e = this.state.forcePresentationRender;
                    this.setState({
                        forcePresentationRender: e ? e + 1 : 1
                    })
                }, t
            }(u.Component),
            C = Object(d.f)(E),
            N = Object(r.a)(function(e) {
                return {
                    isLoggedIn: Object(l.d)(e)
                }
            }, function(e) {
                return Object(o.bindActionCreators)({
                    beginPersistingPlayer: s.k,
                    stopPersistingPlayer: s.r
                }, e)
            })(C),
            T = n("KSGD"),
            O = n("VAT8"),
            I = null,
            D = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        userHasDismissedContent: !1
                    }, n.logger = p.i.withCategory("PersistentPlayer"), n.setDomRef = function(e) {
                        return n.domRef = e
                    }, n.onMiniPlayerDismiss = function() {
                        n.transitionToAnchoredPlayer(S.UserMinimize), n.setState({
                            userHasDismissedContent: !0
                        })
                    }, n.onMiniPlayerExpand = function() {
                        n.context.scrollToTop()
                    }, n.getPersistentPlayerOverrides = function() {
                        return {
                            onMiniPlayerDismiss: n.onMiniPlayerDismiss,
                            onMiniPlayerExpand: n.onMiniPlayerExpand
                        }
                    }, I && n.logger.error(new Error, "there should only ever be one <PersistentPlayer> rendered at a time. Verify that no other component above or below this in the tree has rendered one as well."), I = n, n
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    _ || this.logger.error(new Error, "No <PersistentPlayerRoot> found. Make sure it is mounted in the Root component"), this.unregister = this.context.registerReceiver(this), _.requestVideoContent({
                        ref: this.domRef,
                        options: this.props,
                        overrides: this.getPersistentPlayerOverrides(),
                        onCompletion: function() {
                            return e.transitionToAnchoredPlayer()
                        }
                    }), this.props.repositionPlayerRef && this.props.repositionPlayerRef(this.reposition)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    _.requestVideoContent({
                        ref: this.domRef,
                        options: e,
                        overrides: this.getPersistentPlayerOverrides()
                    }), e.repositionPlayerRef && e.repositionPlayerRef !== this.props.repositionPlayerRef && e.repositionPlayerRef(this.reposition)
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    if (this.unregister(), this.props.repositionPlayerRef && this.props.repositionPlayerRef(null), this.props.disablePersistenceOnUnmount || this.state.userHasDismissedContent || !this.props.persistentPlayerEnabled) return _.destroyPlayer(), void(I = null);
                    var t = this.props,
                        n = t.playerProps,
                        i = t.miniPlayerTitle,
                        a = t.miniPlayerContentRoute,
                        r = {
                            playerProps: {
                                channelLogin: n.channelLogin,
                                hostChannel: n.hostChannel,
                                collectionID: n.collectionID,
                                disableTheatreButton: n.disableTheatreButton,
                                nextVideoOffset: n.nextVideoOffset,
                                playerTypeOverride: n.playerTypeOverride,
                                vodID: n.vodID,
                                attachToWindow: n.attachToWindow
                            },
                            miniPlayerTitle: i,
                            miniPlayerContentRoute: a
                        };
                    _.requestVideoContent({
                        ref: this.domRef,
                        options: r,
                        onCompletion: function() {
                            return e.transitionToMiniPlayer(S.Minimize)
                        }
                    }), I = null
                }, t.prototype.render = function() {
                    return u.createElement(v._19, {
                        background: v.m.Alt2,
                        position: v._4.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        refDelegate: this.setDomRef,
                        "data-target": "persistent-player-content",
                        className: Object(O.a)(this.props.theme)
                    })
                }, t.prototype.transitionToMiniPlayer = function(e) {
                    _.transitionToMiniPlayer(e)
                }, t.prototype.transitionToAnchoredPlayer = function(e) {
                    _.transitionToAnchoredPlayer(e)
                }, t.prototype.isMini = function() {
                    return _.state.mini
                }, t.prototype.checkVisible = function(e, t) {
                    var n = this.context.getScrollContent();
                    if (t && n) {
                        var i = this.domRef.getBoundingClientRect(),
                            a = n.getBoundingClientRect(),
                            r = i.top + i.height - a.top;
                        r <= 100 && this.props.persistentPlayerEnabled && !this.isMini() && !this.props.disablePersistenceOnScroll && !this.state.userHasDismissedContent && this.transitionToMiniPlayer(S.Minimize), r > 100 && (this.isMini() && this.transitionToAnchoredPlayer(S.Maximize), this.state.userHasDismissedContent && this.setState({
                            userHasDismissedContent: !1
                        }))
                    }
                }, t.prototype.reposition = function() {
                    _.reposition()
                }, t.contextTypes = {
                    registerReceiver: T.func,
                    getScrollContent: T.func,
                    scrollToTop: T.func
                }, t
            }(u.Component),
            L = Object(r.a)(function(e) {
                return {
                    theme: e.ui.theme,
                    persistentPlayerEnabled: e.ui.persistentPlayerEnabled
                }
            })(D);
        n.d(t, "b", function() {
            return N
        }), n.d(t, "a", function() {
            return L
        }), n.d(t, !1, function() {
            return S
        })
    },
    BVQ1: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SendWhisper"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendWhisperInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sendWhisper"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "content"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emotes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "to"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "from"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "editedAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 191
            }
        };
        n.loc.source = {
            body: "mutation SendWhisper($input: SendWhisperInput!) {\nsendWhisper(input: $input) {\nmessage {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Bir6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
        }
    },
    C2vp: function(e, t) {},
    C8Io: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "a", function() {
            return o
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "e", function() {
            return s
        });
        var i, a = {
                ChannelBitsEvents: "channel-bits-events-v1",
                ChannelBitsPinEvents: "channel-bit-events-public",
                ChannelSubscribeEvents: "channel-subscribe-events-v1",
                Friendship: "friendship",
                ImageUpload: "user-image-update",
                ModerationActionsByUserAndChannel: "chat_moderator_actions",
                OnsiteNotifications: "onsite-notifications",
                Presence: "presence",
                Raid: "raid",
                StreamChange: "stream-change-v1",
                StreamChatRoom: "stream-chat-room-v1",
                UploadService: "upload",
                UserCommerceEvents: "user-commerce-events",
                UserCrateEvents: "user-crate-events-v1",
                UserSubscribeEvents: "user-subscribe-events-v1",
                VideoPlayback: "video-playback",
                VideoPlaybackById: "video-playback-by-id",
                Whispers: "whispers"
            },
            r = {
                BitsPinEvent: "bits-pin-event",
                ChannelStreamDown: "stream-down",
                ChannelStreamUp: "stream-up",
                ChatNotification: "chat-notification",
                ImageUploadSuccess: "imageuploadsuccess",
                ModerationAction: "moderation_action",
                OnsiteNotificationCreate: "create-notification",
                OnsiteNotificationDelete: "delete-notification",
                OnsiteNotificationsRead: "read-notifications",
                OnsiteNotificationSummaryUpdate: "update-summary",
                OnsiteNotificationUpdate: "update-notification",
                Presence: "presence",
                PresenceSettings: "settings",
                RaidCancel: "raid_cancel",
                RaidUpdate: "raid_update",
                StreamChatRoomChatRichEmbed: "chat_rich_embed",
                StreamDown: "stream_down",
                StreamUp: "stream_up",
                UpdatedChannelChatProperty: "updated_channel_chat_property",
                UploadService: "upload",
                UserCrateEvent: "crate-event",
                UserGiftEvent: "gift-event",
                ViewCount: "viewcount",
                Vodcast: "watchparty-vod",
                WhisperAllThreadsUpdate: "threads",
                WhisperDeleted: "whisper_deleted",
                WhisperEdited: "whisper_edited",
                WhisperReceived: "whisper_received",
                WhisperSent: "whisper_sent",
                WhisperThreadUpdate: "thread"
            },
            o = {
                Accepted: "accepted",
                Requested: "requested",
                Removed: "removed",
                SelfAccepted: "self_accepted",
                SelfRemoved: "self_removed",
                SelfRequested: "self_requested"
            };
        ! function(e) {
            e.Affiliate = "affiliate", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.Ban = "ban", e.Clear = "clear", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Untimeout = "untimeout"
        }(i || (i = {}));
        var s;
        ! function(e) {
            e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied"
        }(s || (s = {}));
        var l;
        ! function(e) {
            e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
        }(l || (l = {}));
        var c;
        ! function(e) {
            e.Private = "private", e.Public = "public"
        }(c || (c = {}))
    },
    CCVP: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Tracking_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 86
            }
        };
        n.loc.source = {
            body: "query Whispers_Tracking_CurrentUser {\ncurrentUser {\nid\nhasTurbo\navailability\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CF9R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sort"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "StreamSort"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "follows"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "stream"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "title"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "viewersCount"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "lastBroadcast"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "followedLiveUsers"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "sort"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "sort"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "profileImageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "70"
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewersCount"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "lastBroadcast"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 521
            }
        };
        n.loc.source = {
            body: "query FollowedChannels($limit: Int $cursor: Cursor $sort: StreamSort) {\ncurrentUser {\nid\nfollows(first: $limit after: $cursor) {\nedges {\ncursor\nnode {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nstream {\nid\ntitle\nviewersCount\ngame {\nid\nname\n}\n}\nlastBroadcast {\nid\ngame {\nid\nname\n}\n}\n}\n}\npageInfo {\nhasNextPage\n}\n}\nfollowedLiveUsers(first: $limit sort: $sort) {\nnodes {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nstream {\nid\ntitle\nviewersCount\ngame {\nid\nname\n}\ntype\n}\nlastBroadcast {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CFVp: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = [r.a.Red, r.a.Blue, r.a.Green, r.a.Purple, r.a.Gray],
                i = new Map,
                s = n.map(function(t) {
                    var n = function(e, t) {
                        for (var n = [], i = {}, r = 0, s = l; r < s.length; r++)
                            for (var u = s[r], d = 0, p = c; d < p.length; d++) {
                                var m = p[d];
                                i[u] || (i[u] = {
                                    animated: new Map,
                                    static: new Map
                                });
                                var h = a(e, u, !0, t, m);
                                n.push(h), i[u].animated.set(m, h.url);
                                var g = a(e, u, !1, t, m);
                                n.push(g), i[u].static.set(m, g.url)
                            }
                        return {
                            id: e + ";" + t,
                            bits: t,
                            color: o.e[t],
                            images: n,
                            indexedImages: i
                        }
                    }(e, t);
                    return i.set(t, n), n
                });
            return {
                prefix: e,
                type: t,
                tiers: s,
                orderedTiers: s,
                indexedTiers: i
            }
        }

        function a(e, t, n, i, a) {
            var r = n ? "gif" : "png";
            return {
                theme: t,
                isAnimated: n,
                dpiScale: a,
                url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + a + "." + r
            }
        }
        t.a = function() {
            if (!u) {
                var e = [],
                    t = {};
                Object.keys(s).forEach(function(n) {
                    var a = i(n, s[n]);
                    e.push(a), t[n.toLowerCase()] = a
                }), u = {
                    orderedActions: e,
                    indexedActions: t
                }
            }
            return u
        }, t.b = function() {
            return d || (d = function(e) {
                return u ? u.indexedActions[e] : i(e, s[e])
            }("Cheer")), d
        };
        var r = n("I89S"),
            o = n("3iBR"),
            s = {
                Cheer: o.c,
                Kreygasm: o.c,
                Kappa: o.c,
                Muxy: o.d,
                Streamlabs: o.d,
                SwiftRage: o.c,
                VoHiYo: o.c
            },
            l = ["LIGHT", "DARK"],
            c = [1, 1.5, 2, 3, 4],
            u = null,
            d = null
    },
    CSlQ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("Odds"),
            o = n("NoSW"),
            s = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleLoad = function() {
                        t.props.latencyTracking.reportInteractive()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(r.l, i.__assign({
                        size: this.props.size,
                        imageSrc: this.props.imageSrc,
                        imageAlt: this.props.imageAlt,
                        onImageLoad: this.handleLoad
                    }, Object(r._40)(this.props)))
                }, t = i.__decorate([Object(o.a)("CriticalAvatar")], t)
            }(a.Component),
            l = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleLoad = function() {
                        t.props.latencyTracking.reportInteractive()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("img", i.__assign({
                        alt: this.props.alt,
                        className: this.props.className,
                        src: this.props.src,
                        onLoad: this.handleLoad
                    }, Object(r._40)(this.props)))
                }, t = i.__decorate([Object(o.a)("CriticalImage")], t)
            }(a.Component),
            c = n("6sO2"),
            u = n("zCIC"),
            d = n("6BvN"),
            p = n("NXs7"),
            m = n("VAT8"),
            h = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("span", null, this.bytesToSize(this.props.totalSize))
                }, t.prototype.bytesToSize = function(e) {
                    if (0 === e) return "0 Bytes";
                    var t = Math.floor(Math.log(e) / Math.log(1024));
                    return Math.round(e / Math.pow(1024, t)) + " " + ["Bytes", "KB", "MB", "GB", "TB"][t]
                }, t
            }(a.Component),
            g = n("HW6M"),
            f = n("Hvhe"),
            v = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.metric.latencyStatus === f.a.Unknown || void 0 === this.props.metric.value) return a.createElement("span", {
                        className: "latency-metrics__dot-animation"
                    }, " ");
                    var e = this.props.metric.latencyStatus === f.a.Fail ? "red" : "green";
                    return a.createElement("span", {
                        className: "latency-metrics__item-number latency-metrics__item-" + e
                    }, Math.round(this.props.metric.value), " ms")
                }, t
            }(a.Component),
            b = (n("C2vp"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickExpand = function() {
                        n.setState({
                            isExpanded: !n.state.isExpanded
                        })
                    };
                    var i = t.tracker.depth < 2;
                    return n.state = {
                        isExpanded: i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.tracker.isRoot ? a.createElement("div", {
                        className: "latency-metrics-component"
                    }, a.createElement("div", {
                        className: "request-latency-metrics__header"
                    }, a.createElement("div", {
                        className: "request-latency-metrics__header-url"
                    }, "Component"), a.createElement("div", {
                        className: "request-latency-metrics__header-time"
                    }, "Started"), a.createElement("div", {
                        className: "request-latency-metrics__header-size"
                    }, "Duration")), a.createElement("ul", null, this.renderItem())) : this.renderItem()
                }, t.prototype.renderItem = function() {
                    var e = this.props.tracker,
                        t = e.children.length > 0,
                        n = {
                            "latency-metrics-component__metrics": !0,
                            "latency-metrics-component__metrics-with-children": t
                        };
                    return a.createElement("li", null, a.createElement("div", {
                        className: g(n),
                        onClick: this.onClickExpand
                    }, a.createElement("div", {
                        className: "latency-metrics-component__left"
                    }, a.createElement("span", {
                        className: "latency-metrics-component__name"
                    }, e.componentName), " ", t && a.createElement("span", null, "(", e.children.length, ")")), a.createElement("div", {
                        className: "latency-metrics-component__time"
                    }, Math.round(e.relativeStartTime), " ms"), a.createElement("div", {
                        className: "latency-metrics-component__duration"
                    }, a.createElement(v, {
                        metric: e.componentDuration
                    }))), a.createElement("ul", null, this.state.isExpanded && e.children.map(function(e) {
                        return a.createElement(b, {
                            tracker: e,
                            key: e.id
                        })
                    })))
                }, t
            }(a.Component)),
            y = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.metric.latencyStatus === f.a.Unknown || void 0 === this.props.metric.value) return a.createElement("span", {
                        className: "latency-metrics__dot-animation"
                    }, " ");
                    var e = this.props.metric.latencyStatus === f.a.Fail ? "red" : "green";
                    return a.createElement("span", {
                        className: "latency-metrics__item-number latency-metrics__item-" + e
                    }, this.props.metric.value)
                }, t
            }(a.Component),
            k = (n("zF1n"), function(e) {
                function t(t) {
                    return e.call(this, t) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    return a.createElement("div", {
                        className: "query-metrics"
                    }, a.createElement("div", {
                        className: "query-metrics__header"
                    }, a.createElement("div", {
                        className: "query-metrics__header-batch"
                    }, "Batch"), a.createElement("div", {
                        className: "query-metrics__header-name"
                    }, "Name"), a.createElement("div", {
                        className: "query-metrics__header-time"
                    }, "Started"), a.createElement("div", {
                        className: "query-metrics__header-time"
                    }, "Request"), a.createElement("div", {
                        className: "query-metrics__header-time"
                    }, "Query")), this.props.queryMetrics.map(function(t) {
                        return e.renderItem(t)
                    }))
                }, t.prototype.renderItem = function(e) {
                    var t = e.queryID;
                    return a.createElement("div", {
                        className: "query-metrics__item",
                        key: t
                    }, a.createElement("div", {
                        className: "query-metrics__item-batch"
                    }, e.batchID), a.createElement("div", {
                        className: "query-metrics__item-name"
                    }, this.renderQueryTitle(e)), a.createElement("div", {
                        className: "query-metrics__item-time"
                    }, Math.round(e.relativeStartTime), " ms"), a.createElement("div", {
                        className: "query-metrics__item-time"
                    }, e.requestDuration && e.requestDuration.latencyStatus && a.createElement(v, {
                        metric: e.requestDuration
                    })), a.createElement("div", {
                        className: "query-metrics__item-time"
                    }, a.createElement(v, {
                        metric: e.queryDuration
                    })))
                }, t.prototype.renderQueryTitle = function(e) {
                    var t = e.variables && e.variables;
                    return t && t.id ? a.createElement("span", null, e.operationName, " (id: ", t.id, ")") : a.createElement("span", null, e.operationName)
                }, t
            }(a.Component)),
            S = (n("kLsX"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    return a.createElement("div", {
                        className: "request-latency-metrics"
                    }, a.createElement("div", {
                        className: "request-latency-metrics__header"
                    }, a.createElement("div", {
                        className: "request-latency-metrics__header-url"
                    }, "Url"), a.createElement("div", {
                        className: "request-latency-metrics__header-time"
                    }, "Started"), a.createElement("div", {
                        className: "request-latency-metrics__header-size"
                    }, "Size"), a.createElement("div", {
                        className: "request-latency-metrics__header-time"
                    }, "Time")), this.props.metricsGroup.metrics.map(function(t) {
                        return e.renderItem(t)
                    }))
                }, t.prototype.getDisplayLink = function(e) {
                    var t = new URL(e),
                        n = t.hostname + t.pathname;
                    if (n.length < 24) return n;
                    var i = t.pathname.substring(t.pathname.lastIndexOf("/"));
                    i || c.i.warn("Failed to parse url", {
                        url: t,
                        fileName: i
                    });
                    var a = i.split(".");
                    return 3 === a.length && (i = a[0] + "." + a[2]), i.length > 24 && (i = i.substring(0, 16) + "..." + i.substring(i.lastIndexOf(".") - 4)), t.hostname + i
                }, t.prototype.renderItem = function(e) {
                    var t = e.networkEvent,
                        n = t.request_url + ":" + t.duration + ":" + t.start_time;
                    return a.createElement("div", {
                        className: "request-latency-metrics__item",
                        key: n
                    }, a.createElement("div", {
                        className: "request-latency-metrics__item-url",
                        title: t.request_url
                    }, a.createElement("div", null, this.getDisplayLink(t.request_url))), a.createElement("div", {
                        className: "request-latency-metrics__item-time"
                    }, Math.round(e.relativeStartTime), " ms"), a.createElement("div", {
                        className: "request-latency-metrics__item-size"
                    }, t.transfer_size && t.transfer_size > 0 ? a.createElement(h, {
                        totalSize: t.transfer_size
                    }) : a.createElement("span", null)), a.createElement("div", {
                        className: "request-latency-metrics__item-time"
                    }, a.createElement(v, {
                        metric: e.duration
                    })))
                }, t
            }(a.Component)),
            _ = function() {
                function e() {}
                return e.getComponentStats = function(t) {
                    var n = 0,
                        i = 0,
                        a = 0,
                        r = 0;
                    e.updateLatencyStatus(t.rootInitDuration, 800), e.updateLatencyStatus(t.pageLoadDuration, 2e3), e.updateLatencyStatus(t.componentDuration, 2e3);
                    var o = e.flattenTrackers(t);
                    o.forEach(function(t) {
                        e.updateLatencyStatus(t.componentDuration, 400)
                    });
                    var s = o.map(function(e) {
                        return e.componentDuration.value || 0
                    });
                    s.length > 0 && (n = s.reduce(function(e, t) {
                        return e + t
                    }), i = Math.max.apply(Math, s), r = Math.min.apply(Math, s), a = n / s.length);
                    var l = {};
                    return o.forEach(function(e) {
                        l[e.componentDuration.latencyStatus] || (l[e.componentDuration.latencyStatus] = 0), l[e.componentDuration.latencyStatus]++
                    }), {
                        rootTracker: t,
                        average: e.getLatencyStatus(a, 400),
                        count: e.getLatencyStatus(o.length, 200),
                        max: e.getLatencyStatus(i, 400),
                        min: e.getLatencyStatus(r, 400),
                        countByStatus: l
                    }
                }, e.getNetworkStats = function(t) {
                    var n = t.networkEvents.filter(function(e) {
                        return e.isPrePageload
                    });
                    n.forEach(function(t) {
                        e.updateLatencyStatus(t.duration, 150)
                    });
                    var i = n.map(function(e) {
                            return e.networkEvent.duration
                        }),
                        a = n.map(function(e) {
                            return e.networkEvent.transfer_size || 0
                        }),
                        r = 0,
                        o = 0,
                        s = 0,
                        l = 0,
                        c = 0;
                    i.length && (r = i.reduce(function(e, t) {
                        return e + t
                    }), o = a.reduce(function(e, t) {
                        return e + t
                    }), s = Math.max.apply(Math, i), l = Math.min.apply(Math, i), c = r / i.length), n.sort(function(e, t) {
                        return (t.duration.value || 0) - (e.duration.value || 0)
                    });
                    var u = {};
                    return n.forEach(function(e) {
                        u[e.duration.latencyStatus] || (u[e.duration.latencyStatus] = 0), u[e.duration.latencyStatus]++
                    }), {
                        metrics: n,
                        average: e.getLatencyStatus(c, 150),
                        count: e.getLatencyStatus(n.length, 200),
                        max: e.getLatencyStatus(s, 150),
                        min: e.getLatencyStatus(l, 150),
                        totalSize: o,
                        countByStatus: u
                    }
                }, e.getQueryBatchStats = function(t) {
                    var n = t.queryBatchMetrics,
                        i = n.map(function(e) {
                            return e.slowestQueryInBatch || 0
                        }),
                        a = Math.max.apply(Math, i),
                        r = {
                            batchCount: {
                                value: n.length,
                                latencyStatus: f.a.Unknown
                            },
                            slowestQuery: {
                                value: a,
                                latencyStatus: f.a.Unknown
                            }
                        };
                    return e.updateLatencyStatus(r.batchCount, 3), e.updateLatencyStatus(r.slowestQuery, 150), r
                }, e.getQueryStats = function(t) {
                    var n = 0,
                        i = 0,
                        a = 0,
                        r = t.queryEvents;
                    r.forEach(function(t) {
                        e.updateLatencyStatus(t.requestDuration, 150), e.updateLatencyStatus(t.queryDuration, 150)
                    });
                    var o = r.map(function(e) {
                        return e.queryDuration.value || 0
                    });
                    o.length > 0 && (n = o.reduce(function(e, t) {
                        return e + t
                    }), i = Math.max.apply(Math, o), a = n / o.length), r.sort(function(e, t) {
                        return (t.queryDuration.value || 0) - (e.queryDuration.value || 0)
                    });
                    var s = {};
                    return r.forEach(function(e) {
                        s[e.queryDuration.latencyStatus] || (s[e.queryDuration.latencyStatus] = 0), s[e.queryDuration.latencyStatus]++
                    }), {
                        metrics: r,
                        count: e.getLatencyStatus(r.length, 200),
                        max: e.getLatencyStatus(i, 150),
                        average: e.getLatencyStatus(a, 150),
                        min: e.getLatencyStatus(0, 150),
                        countByStatus: s
                    }
                }, e.getLatencyStatus = function(e, t) {
                    if (void 0 === e) return {
                        value: e,
                        latencyStatus: f.a.Unknown
                    };
                    return {
                        value: e,
                        latencyStatus: e > t ? f.a.Fail : f.a.Pass
                    }
                }, e.updateLatencyStatus = function(e, t) {
                    e && void 0 !== e.value && (e.latencyStatus = e.value > t ? f.a.Fail : f.a.Pass)
                }, e.flattenTrackers = function(t, n) {
                    return n || (n = []), t.isRoot || n.push(t), t.children.forEach(function(t) {
                        e.flattenTrackers(t, n)
                    }), n
                }, e
            }(),
            w = (n("5EfE"), "twilight.perf-hide"),
            E = "twilight.perf-size",
            C = "twilight.perf-tab",
            N = 3,
            T = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderTab = function(e, t, i) {
                        var o = n.state.selectedTab === e;
                        return a.createElement(r.Q, {
                            display: r.H.Flex,
                            alignItems: r.c.Center,
                            padding: .5,
                            margin: {
                                right: 1
                            }
                        }, a.createElement("button", {
                            onClick: function() {
                                return n.onClickTab(e)
                            },
                            className: "latency-metrics__button" + (o ? " latency-metrics__button--selected" : "")
                        }, t, i && n.renderTabBubble(i)))
                    }, n.renderTabBubble = function(e) {
                        return a.createElement(r.V, {
                            margin: {
                                left: .5
                            }
                        }, a.createElement(r._1, {
                            label: e.toString(),
                            type: r._2.Notification
                        }))
                    }, n.onClickTab = function(e) {
                        c.k.set(C, e), n.setState({
                            selectedTab: e
                        })
                    }, n.onLatencyUpdate = function() {
                        var e = _.getComponentStats(n.tracker),
                            t = _.getNetworkStats(n.tracker),
                            i = _.getQueryStats(n.tracker),
                            a = _.getQueryBatchStats(n.tracker),
                            r = n.tracker.getCustomEvents();
                        n.setState({
                            componentStats: e,
                            networkStats: t,
                            queryStats: i,
                            queryBatchStats: a,
                            customEvents: r
                        })
                    }, n.onClickWindowSize = function() {
                        var e = n.state.size + 1;
                        e > N && (e = 0), c.k.set(E, e.toString()), n.setState({
                            size: e
                        })
                    }, n.onClickClose = function() {
                        n.setState({
                            hidden: !0
                        })
                    }, n.tracker = t.benchmarking.getRootLatencyTracker(), n.state = {
                        hidden: c.k.get(w, !1),
                        selectedTab: c.k.get(C, "overview"),
                        size: c.k.get(E, 0),
                        componentStats: _.getComponentStats(n.tracker),
                        networkStats: _.getNetworkStats(n.tracker),
                        queryStats: _.getQueryStats(n.tracker),
                        queryBatchStats: _.getQueryBatchStats(n.tracker),
                        customEvents: n.tracker.getCustomEvents()
                    }, n.tracker.subscribeToUpdates(n.onLatencyUpdate), n
                }
                return i.__extends(t, e), t.prototype.componentWillMount = function() {
                    var e = this;
                    window.addEventListener("keydown", function(t) {
                        t.keyCode === d.a.P && t.shiftKey && e.state.hidden ? (c.k.remove(w), e.setState({
                            hidden: !1
                        })) : t.keyCode === d.a.P && t.shiftKey && !e.state.hidden && (c.k.set(w, !0), e.setState({
                            hidden: !0
                        }))
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("keydown")
                }, t.prototype.render = function() {
                    return this.state.hidden ? null : a.createElement(r.V, {
                        className: "latency-metrics latency-metrics__size-" + this.state.size + " " + Object(m.c)(p.a.Dark),
                        position: r._4.Fixed,
                        padding: {
                            y: 1
                        }
                    }, a.createElement(r.V, {
                        className: "latency-metrics__header-container",
                        display: r.H.Flex,
                        flexWrap: r.K.NoWrap,
                        alignItems: r.c.Center,
                        padding: {
                            bottom: 1
                        },
                        margin: {
                            x: 1
                        }
                    }, this.renderTab("overview", "Overview"), this.renderTab("components", "Components", this.state.componentStats.countByStatus[f.a.Fail]), this.renderTab("queries", "Queries", this.state.queryStats.countByStatus[f.a.Fail]), this.renderTab("requests", "Requests", this.state.networkStats.countByStatus[f.a.Fail]), a.createElement("div", {
                        className: "latency-metrics__controls"
                    }, a.createElement(r.v, {
                        onClick: this.onClickWindowSize,
                        icon: r._11.Maximize,
                        size: r.x.Small,
                        overlay: !0,
                        ariaLabel: "Change Size"
                    }), a.createElement(r.v, {
                        onClick: this.onClickClose,
                        icon: r._11.Close,
                        size: r.x.Small,
                        overlay: !0,
                        ariaLabel: "Close"
                    }))), a.createElement(r.V, {
                        className: "latency-metrics__body",
                        display: r.H.Flex,
                        flexDirection: r.J.Column,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: r._0.Hidden
                    }, "overview" === this.state.selectedTab && this.renderOverviewTab(), "components" === this.state.selectedTab && this.renderComponentsTab(), "queries" === this.state.selectedTab && this.renderQueriesTab(), "requests" === this.state.selectedTab && this.renderRequestsTab()), a.createElement("div", {
                        className: "latency-metrics__footer"
                    }, a.createElement("span", {
                        className: "latency-metrics__hint-text"
                    }, 'Press "Shift + P" to toggle latency metrics')))
                }, t.prototype.renderOverviewTab = function() {
                    var e = this,
                        t = this.state.networkStats,
                        n = this.state.queryStats,
                        i = this.state.queryBatchStats,
                        o = this.state.componentStats;
                    return a.createElement(u.b, {
                        className: "latency-metrics__scroller"
                    }, a.createElement(r.V, null, a.createElement(r.V, {
                        className: "latency-metrics__item",
                        display: r.H.Flex,
                        justifyContent: r.U.Between,
                        flexWrap: r.K.NoWrap
                    }, a.createElement(r.V, {
                        className: "latency-metrics__item-left latency-metrics__item-name",
                        ellipsis: !0
                    }, a.createElement("span", null, "Initialize")), a.createElement(r.V, {
                        className: "latency-metrics__item-right",
                        display: r.H.Flex,
                        flexWrap: r.K.NoWrap,
                        flexShrink: 0
                    }, a.createElement("div", {
                        className: "latency-metrics__item-number"
                    }, this.tracker.isFirstLoad ? a.createElement(v, {
                        metric: this.tracker.rootInitDuration
                    }) : a.createElement("span", null, "n/a")))), a.createElement(r.V, {
                        className: "latency-metrics__item",
                        display: r.H.Flex,
                        justifyContent: r.U.Between,
                        flexWrap: r.K.NoWrap
                    }, a.createElement(r.V, {
                        className: "latency-metrics__item-left latency-metrics__item-name",
                        ellipsis: !0
                    }, a.createElement("span", null, this.tracker.isFirstLoad ? "Page Load" : "App Transition")), a.createElement("div", {
                        className: "latency-metrics__item-number"
                    }, a.createElement(v, {
                        metric: this.tracker.pageLoadDuration
                    }))), a.createElement(r.V, {
                        className: "latency-metrics__item",
                        display: r.H.Flex,
                        justifyContent: r.U.Between,
                        flexWrap: r.K.NoWrap
                    }, a.createElement(r.V, {
                        className: "latency-metrics__item-left latency-metrics__item-name",
                        ellipsis: !0
                    }, a.createElement("span", null, "Components (", o.count.value, ")")), a.createElement("div", {
                        className: "latency-metrics__item-number"
                    }, a.createElement("span", {
                        className: "latency-metrics__item-stats"
                    }, a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, "Slowest:"), a.createElement(v, {
                        metric: o.max
                    }), a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, "Average:"), a.createElement(v, {
                        metric: o.average
                    })))), a.createElement(r.V, {
                        className: "latency-metrics__item",
                        display: r.H.Flex,
                        justifyContent: r.U.Between,
                        flexWrap: r.K.NoWrap
                    }, a.createElement(r.V, {
                        className: "latency-metrics__item-left latency-metrics__item-name",
                        ellipsis: !0
                    }, a.createElement("span", null, "Queries (", n.count.value, ")")), a.createElement("div", {
                        className: "latency-metrics__item-number"
                    }, a.createElement("span", {
                        className: "latency-metrics__item-stats"
                    }, a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, "Batches:"), a.createElement(y, {
                        metric: i.batchCount
                    }), a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, "Slowest:"), a.createElement(v, {
                        metric: n.max
                    }), a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, "Average:"), a.createElement(v, {
                        metric: n.average
                    })))), a.createElement(r.V, {
                        className: "latency-metrics__item",
                        display: r.H.Flex,
                        justifyContent: r.U.Between,
                        flexWrap: r.K.NoWrap
                    }, a.createElement(r.V, {
                        className: "latency-metrics__item-left latency-metrics__item-name",
                        ellipsis: !0
                    }, a.createElement("span", null, "Requests (", t.count.value, ")")), a.createElement("div", {
                        className: "latency-metrics__item-number"
                    }, a.createElement("span", {
                        className: "latency-metrics__item-stats"
                    }, a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, "Slowest:"), a.createElement(v, {
                        metric: t.max
                    }), a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, "Average:"), a.createElement(v, {
                        metric: t.average
                    }), a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, "Size:"), " ", a.createElement(h, {
                        totalSize: t.totalSize
                    })))), Object.keys(this.state.customEvents).map(function(t) {
                        return e.renderCustomEventGroup(t, e.state.customEvents[t])
                    })))
                }, t.prototype.renderCustomEventGroup = function(e, t) {
                    var n = this;
                    return a.createElement(r.V, {
                        key: e,
                        className: "latency-metrics__item",
                        display: r.H.Flex,
                        justifyContent: r.U.Between,
                        flexWrap: r.K.NoWrap
                    }, a.createElement(r.V, {
                        className: "latency-metrics__item-left latency-metrics__item-name",
                        ellipsis: !0
                    }, a.createElement("span", null, e)), a.createElement("div", {
                        className: "latency-metrics__item-number"
                    }, t.map(function(e) {
                        return n.renderCustomEvent(e)
                    })))
                }, t.prototype.renderCustomEvent = function(e) {
                    return a.createElement("span", {
                        key: e.key
                    }, a.createElement("span", {
                        className: "latency-metrics__item-stats-label"
                    }, e.label, ":"), " ", a.createElement(v, {
                        metric: e.duration
                    }))
                }, t.prototype.renderComponentsTab = function() {
                    return a.createElement(u.b, {
                        className: "latency-metrics__scroller"
                    }, a.createElement(b, {
                        tracker: this.tracker
                    }))
                }, t.prototype.renderRequestsTab = function() {
                    return a.createElement(u.b, {
                        className: "latency-metrics__scroller"
                    }, a.createElement(S, {
                        metricsGroup: this.state.networkStats
                    }))
                }, t.prototype.renderQueriesTab = function() {
                    return a.createElement(u.b, {
                        className: "latency-metrics__scroller"
                    }, a.createElement(k, {
                        queryMetrics: this.tracker.queryEvents
                    }))
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return s
        }), n.d(t, !1, function() {
            return l
        }), n.d(t, "b", function() {
            return T
        }), n.d(t, "c", function() {
            return o.a
        })
    },
    CYoy: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return r
        }), n.d(t, "e", function() {
            return o
        }), n.d(t, "c", function() {
            return s
        });
        var i;
        ! function(e) {
            e.BitsLandingPage = "bits_landing", e.BrowseCommunities = "browse_communities", e.BrowseCreative = "browse_creative", e.BrowseForYou = "browse_for_you", e.Channel = "channel", e.ChannelClips = "channel_clips", e.ChannelClipsManager = "my_clips_channel", e.ChannelEvents = "channel_events", e.ChannelVideos = "channel_vods", e.ChannelCollections = "channel_collections", e.Chat = "chat", e.ClipsGame = "clips_game", e.Dashboard = "dashboard", e.DashboardAchievements = "dashboard/achievements", e.DashboardExtensions = "dashboard/extensions", e.DashboardStreamSummary = "dashboard/stream-summary", e.Directory = "directory", e.DirectoryPopular = "directory.popular", e.EmailVerification = "email_verification", e.EventDetails = "event_details", e.FrontPage = "home", e.GameDetail = "game_detail", e.MyClipsManager = "my_clips", e.None = "", e.OnboardingCommunitySelection = "onboarding/community-selection", e.StoreMerch = "store-merch", e.VideoWatchPage = "vod", e.SubsLandingPage = "subs-landing", e.SettingsPage = "settings", e.SubsBroadcasterPage = "subs-broadcaster"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Channels = "channels", e.Communities = "communities", e.Games = "games", e.Hosts = "hosts", e.Mixed = "mixed", e.Videos = "vods"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e.ChatCard = "chat_card", e.Community = "community", e.EventLive = "event_suggestion_live", e.EventPast = "event_suggestion_past", e.EventUpcoming = "event_suggestion_upcoming", e.Following = "directory_following", e.FollowedChannels = "followed_channels", e.Game = "game", e.Games = "directory_games", e.Host = "host_channel", e.Live = "live_channel", e.LiveHost = "live_host", e.Logo = "twitch_logo", e.Popular = "popular_games", e.PopularOverallVideos = "popular_overall_videos", e.PopularVideos = "popular_videos", e.Presence = "friend_presence", e.RecentVideos = "recent_videos", e.LatestCollection = "latest_collection", e.RecommendedChannels = "recommended_channels", e.RecommendedVideos = "recommended_videos", e.ResumeWatchingVideos = "resume_watching_videos", e.SelfChannel = "self_channel", e.SuggestedVideos = "suggested_videos", e.TextLink = "text_link", e.User = "user", e.Video = "video"
        }(r || (r = {}));
        var o;
        ! function(e) {
            e.Browse = "twitch_browse_directory", e.BrowseForYou = "twitch_browse_for_you", e.Channel = "twitch_channel", e.ChannelVideos = "channel_videos", e.Chat = "twitch_chat", e.ChatNotification = "chat_bar_notification", e.Community = "twitch_community_directory", e.Game = "twitch_game_directory", e.GameVideos = "twitch_video_game_directory", e.EventDetails = "event_details", e.Following = "following_directory", e.NavSearch = "header_search", e.NotificationCenter = "notification_center", e.NotificationToast = "notification_toast", e.SideNav = "twitch_socialcolumn", e.TopNav = "twitch_topnav", e.VideoEmbed = "vod_embed", e.VideoNotFoundPage = "vod_not_found", e.VideoWatchPage = "vod", e.Whispers = "conversations"
        }(o || (o = {}));
        var s;
        ! function(e) {
            e.Channels = "channels", e.Communities = "communities", e.Games = "games", e.Hosts = "hosts", e.Overview = "overview", e.Videos = "videos"
        }(s || (s = {}))
    },
    CwIZ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        }), t.b = function(e) {
            return i.__awaiter(this, void 0, void 0, function() {
                var t, n, l, c, u, d, p, m, h, g, f, v, b;
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = a.m.getVideoPlayerTrackingData().vodID, n = !!t, l = {
                                channelID: e.channelID,
                                withVideo: !1
                            }, n && (l.withVideo = !0, l.videoID = t), c = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, a.n.apollo.client.query({
                                query: s,
                                variables: l
                            })];
                        case 2:
                            return c = i.sent(), [3, 4];
                        case 3:
                            return u = i.sent(), a.i.error(u, "Failed to make query for channel info in FollowEvent reporting.", {
                                channelID: e.channelID
                            }), [3, 4];
                        case 4:
                            return d = c && c.data && c.data.user || null, c && !d && a.i.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                channelID: e.channelID
                            }), p = null, c && n && ((m = c && c.data && c.data.video) ? p = Object(o.a)(m.broadcastType) : a.i.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                currentVideoID: t
                            })), h = d && d.self, g = h ? !!h.subscriptionBenefit : null, f = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                                action: e.action,
                                can_subscribe: v,
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                checkout_button_tier: e.checkoutButtonTier,
                                has_sub_credit: e.hasSubCredit,
                                host_channel: e.hostChannelLogin,
                                host_channel_id: e.hostChannelID,
                                is_menu_open: e.isMenuOpen,
                                is_subscribed: g,
                                is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                sub_location: e.sub_location,
                                sub_recipient: e.giftRecipient,
                                modal: e.modal,
                                modal_level: e.modalLevel || "",
                                show_prime_content: e.showPrimeContent,
                                show_resub: d ? v && f : null,
                                vod_id: t,
                                vod_type: p,
                                viewport_height: window.innerHeight,
                                viewport_width: window.innerWidth
                            }, a.m.track(r.SpadeEventType.Subscription, b), [2]
                    }
                })
            })
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("xrVp"),
            s = n("3QSP"),
            l = (n.n(s), {
                BuyGiftSub: "buy_gift_sub",
                ClickCheckout: "click_checkout_button",
                ClickMoreSubOptions: "more_options_click",
                ClickGiftSubOptions: "gift_options_click",
                ClickPrimeFAQ: "click_prime_faq",
                ClickSignupForPrime: "click_signup_for_prime",
                ClickBack: "back_top_level",
                CloseSubMenu: "close_subscribe_menu",
                GiftASub: "gift_a_sub",
                OpenSubMenu: "open_subscribe_menu",
                SubWithPrime: "samus_spend_credit"
            })
    },
    DBTH: function(e, t, n) {
        "use strict";
        n.d(t, "f", function() {
            return a
        }), n.d(t, "g", function() {
            return r
        }), n.d(t, "i", function() {
            return o
        }), n.d(t, "h", function() {
            return s
        }), n.d(t, "k", function() {
            return l
        }), n.d(t, "j", function() {
            return c
        }), n.d(t, "a", function() {
            return u
        }), n.d(t, "d", function() {
            return d
        }), n.d(t, "b", function() {
            return g
        }), n.d(t, "c", function() {
            return f
        }), n.d(t, "e", function() {
            return v
        }), n.d(t, "m", function() {
            return b
        }), n.d(t, "n", function() {
            return y
        }), n.d(t, "l", function() {
            return k
        }), n.d(t, "o", function() {
            return S
        });
        var i, a = "TWILIGHT_WEB_ONBOARDING_CATEGORIES",
            r = "TWILIGHT_WEB_ONBOARDING_CHANNEL_RANKING",
            o = "TWILIGHT_WEB_ONBOARDING_FOLLOWING_FOR_YOU",
            s = "TWILIGHT_WEB_ONBOARDING",
            l = "TWILIGHT_WEB_ONBOARDING_RANDOMIZED_GAMES",
            c = "TWILIGHT_WEB_ONBOARDING_FOLLOW_CATEGORIES",
            u = "control";
        ! function(e) {
            e.Skip = "skip", e.NoSkip = "no_skip"
        }(i || (i = {}));
        var d, p = new Set([i.Skip.toString(), i.NoSkip.toString()]);
        ! function(e) {
            e.First = "first", e.Last = "last"
        }(d || (d = {}));
        var m, h = new Set([d.First.toString(), d.Last.toString()]);
        (m || (m = {})).Yes = "yes";
        var g;
        (g || (g = {})).Yes = "yes";
        var f;
        (f || (f = {})).ENABLED = "enabled";
        var v;
        (v || (v = {})).ENABLED = "enabled";
        var b = function(e) {
                return !!e && h.has(e)
            },
            y = function(e, t) {
                return !!e && p.has(e) && b(t)
            },
            k = function(e, t, n) {
                return !!e && p.has(e) && b(t) && n === m.Yes
            },
            S = function(e) {
                return e.getTime() >= _().getTime()
            },
            _ = function() {
                return new Date((new Date).getTime() - 12096e5)
            }
    },
    DCOT: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = i.__assign({
                mutation: o
            }, Object(r.a)({
                threadID: e.threadID,
                lastReadMessageID: e.lastReadMessageID
            }), {
                optimisticResponse: {
                    updateWhisperThread: {
                        thread: {
                            __typename: "WhisperThread",
                            id: e.threadID,
                            unreadMessagesCount: 0
                        },
                        __typename: "UpdateWhisperThreadPayload"
                    }
                }
            });
            a.n.apollo.client.mutate(t)
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("oIkB"),
            o = n("EBeM");
        n.n(o)
    },
    DEPb: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_Store_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 62
            }
        };
        n.loc.source = {
            body: "query TopNav_Store_CurrentUser {\ncurrentUser {\nid\nhasPrime\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "DMR/": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecommendedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "first"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "recommendations"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "liveRecommendations"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "first"
                                                }
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "recRequestID"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "recID"
                                                }
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "language"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "language"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "generationID"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "responseID"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "nodes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "broadcaster"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "login"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "profileImageURL"
                                                                },
                                                                arguments: [{
                                                                    kind: "Argument",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "width"
                                                                    },
                                                                    value: {
                                                                        kind: "IntValue",
                                                                        value: "70"
                                                                    }
                                                                }],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 315
            }
        };
        n.loc.source = {
            body: "query RecommendedChannels($first: Int $recID: String! $language: String!) {\ncurrentUser {\nid\nrecommendations {\nliveRecommendations (first: $first recRequestID: $recID language: $language) {\ngenerationID\nresponseID\nnodes {\nid\nbroadcaster {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\ngame {\nid\nname\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "DgR+": function(e, t) {},
    DquS: function(e, t) {},
    DtWM: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = (n("SX5d"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = r.n.logger.withCategory("resize-detector"), t.onScroll = function() {
                        var e = t.container,
                            n = e.offsetWidth,
                            i = e.offsetHeight,
                            a = e.offsetLeft,
                            r = e.offsetTop;
                        t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && r === t.top && a === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, r, a)), t.reset()
                    }, t.setGrowDivRef = function(e) {
                        return t.growDiv = e
                    }, t.setGrowChildDivRef = function(e) {
                        return t.growChildDiv = e
                    }, t.setShrinkDivRef = function(e) {
                        return t.shrinkDiv = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("div", {
                        className: "resize-detector"
                    }, a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setGrowDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__grow",
                        ref: this.setGrowChildDivRef
                    })), a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setShrinkDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__shrink"
                    })))
                }, t.prototype.componentDidMount = function() {
                    if (this.growDiv) {
                        this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                        var e = this.container.style.position;
                        "relative" !== e && "absolute" !== e && "fixed" !== e && "static" === window.getComputedStyle(this.container).getPropertyValue("position") && (this.container.style.position = "relative"), this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                    } else this.logger.warn("growDiv is undefined!")
                }, t.prototype.componentWillUnmount = function() {
                    this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                }, t.prototype.reset = function() {
                    var e = this.growDiv,
                        t = this.shrinkDiv,
                        n = this.growChildDiv.style;
                    n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return o
        })
    },
    Dxih: function(e, t) {},
    E9Qg: function(e, t, n) {
        e.exports = n.p + "assets/bg_glitch_pattern-34ca2e369aad1ed33b57f3d2d59c70eb.png"
    },
    EBeM: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Whispers_MarkThreadMessageRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "unreadMessagesCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "mutation Whispers_MarkThreadMessageRead($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nunreadMessagesCount\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ejve: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Dev = 1] = "Dev", e[e.Production = 2] = "Production"
        }(i || (i = {}))
    },
    "Ex+h": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        });
        var i;
        ! function(e) {
            e.Playing = "PLAYING", e.Streaming = "BROADCASTING", e.Watching = "WATCHING"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Playing = "playing", e.Streaming = "broadcasting", e.Watching = "watching"
        }(a || (a = {}))
    },
    F1v6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_BlueBar_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "stringIds"
                        }
                    },
                    type: {
                        kind: "ListType",
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "dateOverride"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Time"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "primePromotions"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "ids"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "stringIds"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "dateOverride"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "dateOverride"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "externalURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isExternalLink"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 231
            }
        };
        n.loc.source = {
            body: "query Prime_BlueBar_CurrentUser($stringIds: [ID!] $dateOverride: Time) {\ncurrentUser {\nid\nhasPrime\n}\nprimePromotions (ids: $stringIds dateOverride: $dateOverride) {\nid\ntext\nexternalURL\nisExternalLink\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    FDYX: function(e, t, n) {
        "use strict";
        t.d = function(e) {
            return e.some(function(e) {
                return !!e.self && !!e.self.promotion
            })
        }, t.c = function(e) {
            return e.some(function(e) {
                return !!e.giftPromotion
            })
        }, t.a = function(e, t) {
            var n;
            return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.newPrice : e.price
        }, t.b = function(e, t) {
            var n;
            return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.discountValue : 0
        }
    },
    FLwB: function(e, t, n) {
        "use strict";

        function i(e) {
            m.debug("Saving current availability", e), g = r.__assign({}, g, {
                availability: e
            })
        }

        function a() {
            return r.__awaiter(this, void 0, void 0, function() {
                return r.__generator(this, function(e) {
                    return Object(l.d)(o.n.store.getState()) ? (m.debug("Setting status on server", {
                        state: g
                    }), p && clearTimeout(p), [2, o.n.apollo.client.mutate({
                        mutation: c,
                        variables: {
                            input: g
                        }
                    }).then(function(e) {
                        m.debug("Status scheduled to be set again", {
                            seconds: e.data.setSessionStatus.setAgainInSeconds
                        }), p = setTimeout(a, 1e3 * e.data.setSessionStatus.setAgainInSeconds)
                    }, function(e) {
                        m.warn("Failed to update status. Trying again in 60 seconds.", e), p = setTimeout(a, 6e4)
                    })]) : [2]
                })
            })
        }
        t.f = function(e) {
            return m.debug("Updating activity", e), g = r.__assign({}, g, {
                activity: e
            }), a()
        }, t.e = function(e) {
            m.debug("Updating visibility", e),
                function(e) {
                    Object(l.d)(o.n.store.getState()) && (m.debug("Setting visibility on server", {
                        visibility: e
                    }), o.n.apollo.client.mutate({
                        mutation: u,
                        variables: {
                            input: {
                                visibility: e
                            }
                        }
                    }).then(function(e) {
                        m.debug("Visibility set", {
                            visibility: e.data.updateVisibility.user.availability
                        })
                    }, function(e) {
                        m.warn("Failed to update visibility.", e)
                    }))
                }(e)
        }, t.c = i, t.b = function() {
            i(s.a.Online)
        }, t.d = function() {
            i(s.a.Idle)
        }, t.a = function() {
            m.debug("Clearing activity"), g = r.__assign({}, g, {
                activity: null
            }), a()
        }, t.g = function() {
            return r.__awaiter(this, void 0, void 0, function() {
                var e;
                return r.__generator(this, function(t) {
                    switch (t.label) {
                        case 0:
                            m.debug("Clearing previous session"), g = {
                                sessionID: o.k.get(d, ""),
                                availability: s.a.Online,
                                activity: null
                            }, t.label = 1;
                        case 1:
                            return t.trys.push([1, 4, , 5]), [4, a()];
                        case 2:
                            return t.sent(), m.debug("Setting new session"), g = r.__assign({}, g, {
                                    sessionID: o.n.session.tabID
                                }),
                                function(e) {
                                    o.k.set(d, e)
                                }(o.n.session.tabID), [4, a()];
                        case 3:
                            return [2, t.sent()];
                        case 4:
                            return e = t.sent(), [2, e];
                        case 5:
                            return [2]
                    }
                })
            })
        };
        var r = n("TToO"),
            o = n("6sO2"),
            s = n("l4QG"),
            l = n("Aj/L"),
            c = n("73jS"),
            u = (n.n(c), n("7LBo")),
            d = (n.n(u), "twilight.sessionID"),
            p = 0,
            m = o.i.withCategory("Session Status"),
            h = {
                sessionID: o.n.session.tabID,
                availability: "",
                activity: null
            },
            g = h
    },
    FTZM: function(e, t) {},
    FTbL: function(e, t) {},
    FlHF: function(e, t) {},
    FroJ: function(e, t) {},
    FuaS: function(e, t, n) {
        "use strict";

        function i() {
            return void 0 === a && (a = r.get(s) || null), a
        }
        t.a = i, t.b = function(e) {
            var t = [];
            if (!e || e.includeChosenLanguage) {
                var n = i();
                n && t.push(n)
            }
            return navigator.languages ? t = t.concat(navigator.languages.slice()) : navigator.language ? t.push(navigator.language) : navigator.userLanguage && t.push(navigator.userLanguage), t
        }, t.c = function(e) {
            a = e, r.set(s, e, {
                expires: 365,
                domain: Object(o.a)(),
                secure: "https:" === window.location.protocol
            })
        };
        var a, r = n("lbHh"),
            o = (n.n(r), n("o/qv")),
            s = "language"
    },
    GfPd: function(e, t, n) {
        "use strict";

        function i() {
            return function(e) {
                return function(t) {
                    function n() {
                        var e = null !== t && t.apply(this, arguments) || this;
                        return e.logger = p.i.withCategory("TooltipLayer"), e.show = function(t) {
                            a ? a.showTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e.showRich = function(t) {
                            a ? a.showRichTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e.hide = function() {
                            a ? a.hideTooltip() : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                        }, e
                    }
                    return r.__extends(n, t), n.prototype.render = function() {
                        var t = {
                            tooltipLayer: {
                                show: this.show,
                                showRich: this.showRich,
                                hide: this.hide
                            }
                        };
                        return s.createElement(e, r.__assign({}, this.props, t))
                    }, n
                }(s.Component)
            }
        }
        var a, r = n("TToO"),
            o = n("HW6M"),
            s = n("U7vG"),
            l = n("NXs7"),
            c = n("VAT8"),
            u = n("Odds"),
            d = (n("Z+Fq"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = (t = {}, t[Object(c.c)(l.a.Dark)] = this.props.forceDarkTheme, t);
                    return s.createElement(u.V, {
                        className: o("rich-content-tooltip", e)
                    }, this.props.children, s.createElement(u.p, {
                        show: this.props.show,
                        direction: this.props.balloonDirection || u.q.Right,
                        tailOffset: this.props.balloonDirection !== u.q.RightCenter ? 16 : 0
                    }, s.createElement("div", {
                        ref: this.props.refCallback,
                        className: "rich-content-tooltip__pointer-target"
                    }, s.createElement(u.V, {
                        padding: .5
                    }, this.props.content))));
                    var t
                }, t
            }(s.Component)),
            p = n("6sO2"),
            m = (n("1Krm"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        options: null,
                        richOptions: null,
                        hovering: !1
                    }, n.clearTimeoutAndRun = function(e, t) {
                        void 0 === t && (t = 0), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                            e(), n.displayTimeout = 0
                        }, t)
                    }, n.setRef = function(e) {
                        n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                    }, n.addEventListeners = function(e) {
                        e && (e.addEventListener("mouseenter", n.handleMouseEnter), e.addEventListener("mouseleave", n.handleMouseLeave), e.addEventListener("click", n.handleMouseClick))
                    }, n.removeEventListeners = function() {
                        n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave), n.ref.removeEventListener("click", n.handleMouseClick))
                    }, n.handleMouseEnter = function() {
                        n.setState({
                            hovering: !0
                        })
                    }, n.handleMouseLeave = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.displayTimeout || n.hideTooltip()
                        })
                    }, n.handleMouseClick = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.hideTooltip(!0)
                        })
                    }, a = n, n
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.options && this.state.options.from || this.state.richOptions && this.state.richOptions.from;
                    if (!e) return null;
                    var t = this.state.richOptions ? 2 : 0,
                        n = e.getBoundingClientRect(),
                        i = {
                            left: n.left,
                            top: n.top,
                            width: n.width + t,
                            height: n.height
                        },
                        a = s.createElement("div", {
                            style: {
                                width: i.width,
                                height: i.height
                            }
                        }),
                        r = null;
                    return this.state.options ? r = s.createElement(u._31, {
                        direction: this.state.options.direction,
                        align: this.state.options.align,
                        label: this.state.options.label,
                        show: !0
                    }, a) : this.state.richOptions && (r = s.createElement(d, {
                        content: this.state.richOptions.richContent,
                        refCallback: this.state.richOptions.allowHover && this.setRef || void 0,
                        forceDarkTheme: this.state.richOptions.forceDarkTheme,
                        balloonDirection: this.state.richOptions.balloonDirection,
                        show: !0
                    }, a)), s.createElement("div", {
                        className: "tooltip-layer",
                        style: i
                    }, r)
                }, t.prototype.showTooltip = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            options: e,
                            richOptions: null
                        })
                    }), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
                }, t.prototype.showRichTooltip = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            richOptions: e,
                            options: null
                        })
                    }, e && e.delayOpenMS && !this.hoverTimeout ? e.delayOpenMS : 0), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
                }, t.prototype.hideTooltip = function(e) {
                    var t = this;
                    e || this.state.hovering || this.displayTimeout || (this.hoverTimeout = setTimeout(function() {
                        clearTimeout(t.hoverTimeout), t.hoverTimeout = 0
                    }, 1e3)), this.clearTimeoutAndRun(function() {
                        t.state.hovering || t.setState({
                            options: null,
                            richOptions: null
                        })
                    }, !e && this.state.richOptions && this.state.richOptions.allowHover ? 400 : 0)
                }, t
            }(s.Component));
        n.d(t, "a", function() {
            return d
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return m
        }), n.d(t, !1, function() {})
    },
    GtMZ: function(e, t) {},
    GxF8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_ReportUser($input: ReportWhisperThreadInput!) {\nreportWhisperThread(input: $input) {\nthread {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    H4lr: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("U7vG"),
            o = n("6sO2"),
            s = n("Odds"),
            l = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.state = {
                        content: null
                    }, t.logger = o.i.withCategory("StickyFooterRoot"), t.displayContent = function(e) {
                        t.setState({
                            content: e
                        })
                    }, t.hideContent = function() {
                        t.setState({
                            content: null
                        })
                    }, i && t.logger.error(new Error("StickyFooterRoot is already mounted."), "StickyFooterRoot is already mounted. There should only be one of these mounted at a time."), i = t, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return this.state.content ? r.createElement(s.V, null, this.state.content) : null
                }, t
            }(r.Component),
            c = null,
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    if (c) {
                        var i = "There may only be one StickyFooter mounted at a time.";
                        o.i.error(new Error(i), i)
                    }
                    return c = n, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    i.displayContent(this.props.children)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.children ? i.displayContent(e.children) : i.hideContent()
                }, t.prototype.componentWillUnmount = function() {
                    i.hideContent(), c = null
                }, t.prototype.render = function() {
                    return null
                }, t
            }(r.Component);
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return u
        })
    },
    H9qc: function(e, t) {},
    HM6l: function(e, t, n) {
        "use strict";
        t.a = function() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
                var t = 16 * Math.random() | 0;
                return ("x" === e ? t : 3 & t | 8).toString(16)
            })
        }, t.b = function() {
            return "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".replace(/[xy]/g, function(e) {
                var t = 16 * Math.random() | 0;
                return ("x" === e ? t : 3 & t | 8).toString(16)
            })
        }
    },
    "HTB+": function(e, t) {},
    HZww: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            return a.d.ImageUpload + "." + e
        }, t.k = function(e) {
            return a.d.UploadService + "." + e
        }, t.o = function(e) {
            return a.d.VideoPlaybackById + "." + e
        }, t.f = function(e) {
            return a.d.Presence + "." + e
        }, t.d = function(e, t) {
            return a.d.ModerationActionsByUserAndChannel + "." + e + "." + t
        }, t.g = function(e) {
            return a.d.Raid + "." + e
        }, t.b = function(e) {
            return a.d.Friendship + "." + e
        }, t.a = function(e) {
            return a.d.ChannelBitsPinEvents + "." + e
        }, t.n = function(e) {
            return a.d.UserSubscribeEvents + "." + e
        }, t.m = function(e) {
            return a.d.UserCrateEvents + "." + e
        }, t.l = function(e) {
            return a.d.UserCommerceEvents + "." + e
        }, t.p = function(e) {
            return a.d.Whispers + "." + e
        }, t.e = function(e) {
            return a.d.OnsiteNotifications + "." + e
        }, t.h = function(e) {
            return a.d.StreamChatRoom + "." + e
        }, t.j = function(e) {
            return i.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(r.d)(e.query, e.variables, function(n) {
                        return e.mutator(t, n)
                    }, function(n) {
                        return !!e.skipMessage && e.skipMessage(t, n)
                    })
                }
            })
        }, t.i = function(e) {
            return i.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && t.type !== e.type || Object(r.c)({
                        fragment: e.fragment,
                        id: e.id,
                        mutator: function(n) {
                            return e.mutator(t, n)
                        }
                    })
                }
            })
        };
        var i = n("6sO2"),
            a = n("C8Io"),
            r = n("oIkB")
    },
    Hcc4: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowedChannels_CurrentUser_FollowedVideos"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoTypes"
                        }
                    },
                    type: {
                        kind: "ListType",
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BroadcastType"
                                }
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "followedVideos"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "types"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "videoTypes"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "viewCount"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "publishedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "previewThumbnailURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "126"
                                                            }
                                                        }, {
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "height"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "71"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "owner"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "self"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "viewingHistory"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "position"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 308
            }
        };
        n.loc.source = {
            body: "query FollowedChannels_CurrentUser_FollowedVideos($videoTypes: [BroadcastType!]) {\ncurrentUser {\nid\nfollowedVideos(first: 100 types: $videoTypes) {\nedges {\nnode {\nid\ntitle\nviewCount\npublishedAt\npreviewThumbnailURL(width: 126 height: 71)\nowner {\nid\ndisplayName\n}\nself {\nviewingHistory {\nposition\n}\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Hs3O: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return r
        }), n.d(t, "c", function() {
            return o
        }), t.d = function(e, t) {
            var n = i.b.get(s, "https://twitch.amazon.com/prime"),
                a = "";
            try {
                a = btoa(t)
            } catch (e) {
                l.error(e, "Could not decode location pathname substring for redirect")
            }
            return a ? n + "?ref_=" + e + "&redirectRoute=" + a : n + "?ref_=" + e
        };
        var i = n("6sO2"),
            a = "sm_tw_tup_ntp_t_all",
            r = "sm_tw_thp_blue_t_all",
            o = "sm_w_tup_ntp_t_c",
            s = "prime_landing_page_base_url",
            l = i.i.withCategory("PrimeUtilsLogger")
    },
    Hvhe: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Unknown = 0] = "Unknown", e[e.Pass = 1] = "Pass", e[e.Fail = 2] = "Fail"
        }(i || (i = {}))
    },
    HyyJ: function(e, t) {},
    I4TS: function(e, t) {},
    I6b2: function(e, t) {},
    I89S: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red", e[e.Yellow = 1e5] = "Yellow"
        }(i || (i = {}))
    },
    IWpL: function(e, t, n) {
        "use strict";
        var i = n("RSE+");
        n.d(t, "SpadeFollowingCategory", function() {
            return i.a
        }), n.d(t, "SpadePlatform", function() {
            return i.b
        }), n.d(t, "SpadeVideoBroadcastType", function() {
            return i.c
        }), n.d(t, "TwitchDataType", function() {
            return i.d
        });
        var a = n("kDWL");
        n.d(t, "SpadeEventType", function() {
            return a.a
        });
        var r = n("CYoy");
        n.d(t, "PageviewContent", function() {
            return r.a
        }), n.d(t, "PageviewDirectoryContentType", function() {
            return r.b
        }), n.d(t, "PageviewFollowingTab", function() {
            return r.c
        }), n.d(t, "PageviewLocation", function() {
            return r.d
        }), n.d(t, "PageviewMedium", function() {
            return r.e
        });
        var o = n("NU58");
        n.n(o);
        n.o(o, "ShareItemContext") && n.d(t, "ShareItemContext", function() {
            return o.ShareItemContext
        }), n.o(o, "ShareItemSourceItemType") && n.d(t, "ShareItemSourceItemType", function() {
            return o.ShareItemSourceItemType
        }), n.o(o, "ShareItemType") && n.d(t, "ShareItemType", function() {
            return o.ShareItemType
        });
        var s = n("y+pq");
        n.d(t, "ShareItemContext", function() {
            return s.a
        }), n.d(t, "ShareItemSourceItemType", function() {
            return s.b
        }), n.d(t, "ShareItemType", function() {
            return s.c
        })
    },
    IfJQ: function(e, t) {},
    Itsn: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = function() {
            function e() {}
            return e.prototype.get = function(e, t) {
                if ("experiments" === e) return t;
                var n = window.__twilightSettings && window.__twilightSettings[e];
                return void 0 !== n ? n : t
            }, e
        }()
    },
    Iv9R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_Participants"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "imageURL"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 503
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_Participants($targetUserID: ID) {\ncurrentUser {\nid\nblockedUsers {\nid\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\nfriends {\nedges {\nnode {\nid\n}\navailability\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\nhosting {\nid\ndisplayName\n}\n}\n}\n}\n}\n}\n}\nuser(id: $targetUserID) {\nid\ndisplayBadges {\nid\ntitle\nimageURL\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Iw4B: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = l.get(e);
            return t || (t = e.name + ":" + Object(r.a)(), l.set(e, t), s[t] = e), t
        }
        t.a = function(e) {
            return e.modal.modalID ? s[e.modal.modalID] : null
        }, t.b = function(e, t) {
            return e.modal.show && e.modal.modalID === i(t)
        };
        var a = n("6sO2"),
            r = n("HM6l"),
            o = n("V5M+"),
            s = {},
            l = new Map;
        a.n.store.registerReducer("modal", function(e, t) {
            switch (void 0 === e && (e = {
                show: !1,
                modalID: null,
                modalProps: null
            }), t.type) {
                case o.b:
                    return {
                        show: !0,
                        modalID: i(t.modalComponent),
                        modalProps: t.modalProps
                    };
                case o.a:
                    return {
                        show: !1,
                        modalID: null,
                        modalProps: null
                    };
                default:
                    return e
            }
        })
    },
    J4ib: function(e, t, n) {
        "use strict";

        function i(e) {
            for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = "", i = 0; i < e; i++) n += t.charAt(Math.floor(Math.random() * t.length));
            return n
        }

        function a(e) {
            return !!(e && e.timing && e.getEntriesByType && e.setResourceTimingBufferSize && e.clearResourceTimings)
        }
        var r = n("U7vG"),
            o = n("BhyV"),
            s = n("O27J"),
            l = n("Ejve"),
            c = "https://ad.doubleclick.net/ddm/ad/",
            u = n("/wlI"),
            d = function() {
                function e(e) {
                    this.detect = !1, this.logger = e.logger.withCategory("ad-block-detector"), this.logger.debug("Created.")
                }
                return e.prototype.detectAdBlock = function() {
                    this.logger.debug("Start ad block tests."), this.detectEasyList(), this.detectEasyListPrivacy()
                }, e.prototype.detectEasyList = function() {
                    var e = this;
                    fetch("" + c + i(5) + "/" + i(10) + "/" + i(6) + "'/;ord='" + Date.now(), {
                        method: "GET",
                        mode: "no-cors"
                    }).then(function() {
                        e.logger.debug("DoubleClick is reachable.")
                    }).catch(function(t) {
                        e.logger.debug("DoubleClick is unreachable.", {
                            err: t
                        }), e.detect = !0
                    })
                }, e.prototype.detectEasyListPrivacy = function() {
                    var e = this,
                        t = {
                            event: "dummy-event",
                            properties: {
                                time: Date.now(),
                                random1: i(256),
                                random2: i(256),
                                random3: i(256),
                                random4: i(256)
                            }
                        },
                        n = {
                            method: "POST",
                            body: new Blob([Object(u.a)([t])], {
                                type: "application/x-www-form-urlencoded; charset=UTF-8"
                            })
                        };
                    fetch("https://spade.twitch.tv", n).then(function(t) {
                        e.logger.debug("Spade is reachable.", {
                            status: t.status
                        })
                    }).catch(function(t) {
                        e.logger.debug("Spade unreachable: ", {
                            err: t
                        }), e.detect = !0
                    })
                }, e.prototype.addTwitchGlobal = function() {
                    window.Twitch || (window.Twitch = {}), window.Twitch.sentinel ? this.logger.debug("Sentinel global already exists.", {
                        sentinel: window.Twitch.sentinel
                    }) : (window.Twitch.sentinel = this, this.logger.debug("Setting global sentinel."))
                }, e
            }();
        window._sp_ = window._sp_ || {}, window._sp_.config = window._sp_.config || {};
        var p, m = function() {
                function e(e) {
                    var t = this;
                    this.detect = !1, this.logger = e.logger.withCategory("AdBlockSentinel"), window.sp_cid = e.cid, window._sp_.config.account_id = e.accountID, document.addEventListener("sp.blocking", function() {
                        t.logger.debug("Ad blocker detected"), t.detect = !0
                    }), document.addEventListener("sp.not_blocking", function() {
                        t.logger.debug("Ad blocker not detected"), t.detect = !1
                    }), this.logger.debug("Created")
                }
                return e.prototype.addTwitchGlobal = function() {
                    window.Twitch || (window.Twitch = {}), window.Twitch.sentinel ? this.logger.debug("Sentinel global already exists") : (window.Twitch.sentinel = this, this.logger.debug("Setting global sentinel"))
                }, e.prototype.pageTransition = function() {
                    window._sp_ && window._sp_.pageChange ? (window._sp_.pageChange(), this.logger.debug("Called pageChange method")) : this.logger.debug("window._sp_ or window._sp_.pageChange does not exist.")
                }, e
            }(),
            h = n("TToO"),
            g = n("lbHh"),
            f = n("JMIN"),
            v = n("OAwv"),
            b = n("6sO2"),
            y = {
                "4d3d19a7-38c5-4328-9730-7d99565d5edd": "no",
                "ef25ca44-13bd-4e89-99d2-f9939c013fec": "off",
                "a9667563-723a-4cf7-b253-674d9eef0a53": "control",
                "54b18ea6-2b6a-4ed7-9128-2497572d31e2": "control",
                "74156eb2-ed95-482c-b006-60c1428e8846": "control",
                "e9fe3136-84bc-4a61-9079-0c7df78abeb3": "control",
                "9619b63b-2e9a-4e20-af4b-cce72346691d": "control",
                "29a37cfd-6a34-4624-970f-6b155b40636b": "control",
                "72c14aa9-d78d-4095-8f27-d97b9aac4233": "no",
                "afc307f3-4011-40ba-9406-56c474b5922b": "control",
                "1318509a-bf97-475d-acdc-df6a24ef6e3e": "none",
                "3763f4e7-c786-4000-a6c3-b91b9c774302": "control",
                "d6bb4aa4-efae-4031-96be-f08950d6c8f4": "shown",
                "db2180db-bc89-4f97-8bef-208b1782e18f": "off",
                "4723fff0-7f41-43c7-88b3-246b014dfaf1": "control",
                "f866f89d-85de-4a5b-9b00-d97c791bc16d": "no",
                "47597570-dd4e-4996-85eb-86db164cae9c": "control",
                "50ac9a2b-63c2-46ed-9e7d-123363195dfd": "control",
                "7aa589f3-34d8-425f-8227-29007d50757e": "control",
                "0dc9a9c9-fee5-4b5f-a462-f07675713e5e": "control"
            },
            k = {
                TWILIGHT_PREMIERE_UPLOAD_FLOW: "4d3d19a7-38c5-4328-9730-7d99565d5edd",
                STREAMER_TRAILERS: "ef25ca44-13bd-4e89-99d2-f9939c013fec",
                TWILIGHT_WEB_ONBOARDING: "a9667563-723a-4cf7-b253-674d9eef0a53",
                TWILIGHT_WEB_ONBOARDING_FOLLOWING_FOR_YOU: "54b18ea6-2b6a-4ed7-9128-2497572d31e2",
                TWILIGHT_WEB_ONBOARDING_CHANNEL_RANKING: "74156eb2-ed95-482c-b006-60c1428e8846",
                TWILIGHT_WEB_ONBOARDING_CATEGORIES: "e9fe3136-84bc-4a61-9079-0c7df78abeb3",
                TWILIGHT_WEB_ONBOARDING_FOLLOW_CATEGORIES: "9619b63b-2e9a-4e20-af4b-cce72346691d",
                TWILIGHT_WEB_ONBOARDING_RANDOMIZED_GAMES: "29a37cfd-6a34-4624-970f-6b155b40636b",
                TWILIGHT_SUB_CHECKOUT_POPUP: "72c14aa9-d78d-4095-8f27-d97b9aac4233",
                TWILIGHT_VIDEO_FEATURO_EN: "afc307f3-4011-40ba-9406-56c474b5922b",
                TWILIGHT_VIDEOS_IN_SIDENAV: "1318509a-bf97-475d-acdc-df6a24ef6e3e",
                TWILIGHT_FENIX_DOWN: "3763f4e7-c786-4000-a6c3-b91b9c774302",
                TWILIGHT_EVENT_GAME_DIRECTORY: "d6bb4aa4-efae-4031-96be-f08950d6c8f4",
                TWILIGHT_LEADERBOARDS: "db2180db-bc89-4f97-8bef-208b1782e18f",
                TWILIGHT_CHANNEL_LOGIN_UPSELL_V1: "4723fff0-7f41-43c7-88b3-246b014dfaf1",
                TWILIGHT_RAID_AUTO_JOIN: "f866f89d-85de-4a5b-9b00-d97c791bc16d",
                TWILIGHT_AML_RANKING_FOLLOWS: "47597570-dd4e-4996-85eb-86db164cae9c",
                TWILIGHT_NEW_BROWSE: "50ac9a2b-63c2-46ed-9e7d-123363195dfd",
                TWILIGHT_GROWTH_EMAIL_VERIFY_BAR: "7aa589f3-34d8-425f-8227-29007d50757e",
                TWILIGHT_FOLLOWING_INDEX_LATEST_VIDEOS_V2: "0dc9a9c9-fee5-4b5f-a462-f07675713e5e"
            },
            S = {
                TWILIGHT_PREMIERE_UPLOAD_FLOW: "yes",
                TWILIGHT_SUB_CHECKOUT_POPUP: "yes",
                TWILIGHT_VIDEOS_IN_SIDENAV: "all_content"
            };
        ! function(e) {
            e.Channel = "channel_id", e.Device = "device_id", e.User = "user_id"
        }(p || (p = {}));
        var _, w = "twilight.ignore_experiments",
            E = function() {
                function e(e) {
                    this.ignoreExperiments = !1, this.logger = e.logger.withCategory("Experiment"), this.session = e.session, this.store = e.store, this.tracking = e.tracking, this.ignoreExperiments = e.storage.get(w, !1)
                }
                return e.prototype.getAssignment = function(e, t) {
                    return void 0 === t && (t = {}), h.__awaiter(this, void 0, void 0, function() {
                        var n, i, a, r, o;
                        return h.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    return this.ignoreExperiments ? (this.logger.debug("Ingoring experiments because local storage key is present"), [2, null]) : [4, this.initialize()];
                                case 1:
                                    if (s.sent(), !k[e]) return this.logger.warn("Experiment name not in mapping", e), [2, null];
                                    if (n = k[e], !this.experiments[n]) return this.logger.warn("Unable to find experiment configuration", {
                                        name: e,
                                        id: n
                                    }), y[n] && this.overrides[n] ? (this.logger.warn("Using experiment override despite missing experiment configuration", {
                                        name: e,
                                        id: n,
                                        assignment: this.overrides[n]
                                    }), [2, this.overrides[n]]) : [2, null];
                                    if (i = this.experiments[n], !this.assignments[n]) return this.logger.warn("Unable to determine default assignment", {
                                        name: e,
                                        id: n,
                                        experiment: i
                                    }), [2, null];
                                    switch (a = this.assignments[n], this.overrides[n] ? r = this.overrides[n] : 3 === i.t ? t.channel ? r = Object(f.selectTreatment)(n, i, t.channel) : (this.logger.warn("Called getAssignment() for channel experiment with no channel", i), r = a) : r = a, i.t) {
                                        case 1:
                                            o = p.Device;
                                            break;
                                        case 2:
                                            o = p.User;
                                            break;
                                        case 3:
                                            o = p.Channel;
                                            break;
                                        default:
                                            o = void 0
                                    }
                                    return this.trackExperiment({
                                        assignment: r,
                                        channel: t.channel,
                                        id: n,
                                        name: i.name,
                                        version: i.v,
                                        type: o
                                    }), [2, r]
                            }
                        })
                    })
                }, e.prototype.trackExperiment = function(e) {
                    this.tracking.trackExperiment({
                        channel: e.channel || void 0,
                        device_id: this.session.deviceID,
                        login: this.login,
                        experiment_id: e.id,
                        experiment_group: e.assignment,
                        experiment_name: e.name,
                        experiment_version: e.version,
                        experiment_type: e.type
                    })
                }, e.prototype.initialize = function() {
                    return h.__awaiter(this, void 0, void 0, function() {
                        var e, t, n = this;
                        return h.__generator(this, function(i) {
                            return this.initializing ? [2, this.initializing] : (this.initializing = new Promise(function(e) {
                                return n.initializeComplete = e
                            }), window.__twilightSettings && window.__twilightSettings.experiments ? (this.experiments = window.__twilightSettings && window.__twilightSettings.experiments, (e = Object(f.validate)(this.experiments)) && (this.logger.error(e, "Invalid experiment configuration. Experiments will be default"), this.experiments = {})) : (this.logger.warn("Unable to get experiment data from dynamic settings. Experiments will be default."), this.experiments = {}), t = this.store.getState().session.user, this.overrides = this.determineOverrides(!(!t || !t.roles) && t.roles.isStaff), this.login = t ? t.login : void 0, this.assignments = this.determineAssignments(this.experiments, this.session.deviceID, this.login), this.logger.debug("Experiment settings determined", {
                                overrides: this.overrides,
                                assignments: this.assignments,
                                experiments: this.experiments
                            }), this.initializeComplete(), [2, this.initializing])
                        })
                    })
                }, e.prototype.determineOverrides = function(e) {
                    var t = this,
                        n = {};
                    e && Object.keys(S).forEach(function(e) {
                        k[e] ? S[e] && (n[k[e]] = S[e]) : t.logger.warn("Staff experiment name is not in mapping", e)
                    });
                    var i = {};
                    try {
                        var a = g.get(b.a.experimentsOverrideCookie);
                        if (a) {
                            var r = JSON.parse(a);
                            Object.keys(r).forEach(function(e) {
                                y[e] ? i[e] = r[e] : t.logger.warn("Cookie experiment ID is not in DEFAULT_ASSIGNMENTS mapping", e)
                            })
                        }
                    } catch (e) {
                        this.logger.warn("Unable to parse cookie overrides", e)
                    }
                    var o = {},
                        s = v.parse(window.location.search);
                    if (s.experiments) try {
                        var l = JSON.parse(s.experiments);
                        Object.keys(l).forEach(function(e) {
                            k[e] ? o[k[e]] = l[e] : t.logger.warn("URL override experiment name is not in mapping", e)
                        })
                    } catch (e) {
                        this.logger.warn("Unable to parse URL overrides", e)
                    }
                    return h.__assign({}, n, i, o)
                }, e.prototype.determineAssignments = function(e, t, n) {
                    var i = this,
                        a = {};
                    return Object.keys(y).forEach(function(r) {
                        if (e[r]) {
                            var o = e[r];
                            1 === o.t ? a[r] = Object(f.selectTreatment)(r, o, t) : 2 === o.t && n ? a[r] = Object(f.selectTreatment)(r, o, n) : a[r] = y[r]
                        } else i.logger.warn("Experiment is deprecated", r)
                    }), a
                }, e
            }(),
            C = n("IgU9"),
            N = n.n(C),
            T = function() {
                function e(e, t) {
                    this.store = e, this.logger = t.withCategory("pubsub")
                }
                return e.prototype.subscribe = function(e) {
                    var t = this;
                    this.driver || (this.driver = N.a.getInstance("production"));
                    var n = this.wrapMessageCallback(e.onMessage),
                        i = this.store.getState();
                    return this.driver.Listen({
                            topic: e.topic,
                            auth: i.session && i.session.user && i.session.user.authToken,
                            success: function() {
                                t.logger.debug("Subscribed to topic.", {
                                    opts: e
                                }), e.success && e.success()
                            },
                            failure: function(n) {
                                b.a.buildType === l.a.Production ? t.logger.warn("Failed to subscribe to topic.", {
                                    opts: e,
                                    err: n
                                }) : t.logger.error(new Error("Failed to subscribe to topic."), "Failed to subscribe to topic.", {
                                    opts: e,
                                    err: n
                                }), e.failure && e.failure(n)
                            },
                            message: n
                        }),
                        function() {
                            return t.unsubscribe(e, n)
                        }
                }, e.prototype.unsubscribe = function(e, t) {
                    var n = this;
                    this.driver.Unlisten({
                        topic: e.topic,
                        success: function() {
                            n.logger.debug("Unsubscribed from topic.", {
                                opts: e
                            })
                        },
                        failure: function(t) {
                            n.logger.error(new Error("Failed to unsubscribe from topic."), "Failed to unsubscribe from topic.", {
                                opts: e,
                                err: t
                            })
                        },
                        message: t
                    })
                }, e.prototype.wrapMessageCallback = function(e) {
                    var t = this;
                    return function(n) {
                        var i;
                        try {
                            i = JSON.parse(n)
                        } catch (e) {
                            return void t.logger.error(e, "Failed to parse message.", {
                                msg: n
                            })
                        }
                        e(i)
                    }
                }, e
            }(),
            O = function() {
                function e(e) {
                    this.currentPageComponentName = "", this.buildID = e.buildID, this.endpoint = e.endpoint, this.logger = e.logger.withCategory("sentinel"), this.session = e.session, this.store = e.store, this.logger.debug("Creating instance.", {
                        buildID: e.buildID,
                        endpoint: e.endpoint
                    })
                }
                return e.prototype.report = function(e) {
                    return h.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, a;
                        return h.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    t = {
                                        buildId: this.buildID,
                                        clientTime: Date.now(),
                                        deviceId: this.session.deviceID,
                                        pageComponentName: this.currentPageComponentName,
                                        pageSessionId: this.session.pageviewID,
                                        logEntries: e,
                                        platform: "web",
                                        product: "twilight",
                                        userAgent: navigator.userAgent,
                                        userId: 0,
                                        username: ""
                                    };
                                    try {
                                        n = this.store && this.store.getState().session.user, t.userId = n ? Number(n.id) : 0, t.username = n ? n.login : ""
                                    } catch (e) {
                                        this.logger.warn("Failed to get user data from the global store.", e)
                                    }
                                    this.logger.debug("Reporting error.", t), i = 1, r.label = 1;
                                case 1:
                                    if (!(i <= 3)) return [3, 6];
                                    r.label = 2;
                                case 2:
                                    return r.trys.push([2, 4, , 5]), [4, fetch(this.endpoint, {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json; charset=UTF-8",
                                            Accept: "application/json; charset=UTF-8"
                                        },
                                        body: JSON.stringify(t)
                                    })];
                                case 3:
                                    return r.sent(), this.logger.debug("Report sent."), [2];
                                case 4:
                                    return a = r.sent(), this.logger.warn("Failed to submit error report.", {
                                        attempt: i,
                                        maxAttempts: 3
                                    }, a), [3, 5];
                                case 5:
                                    return ++i, [3, 1];
                                case 6:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.setPageComponentName = function(e) {
                    this.currentPageComponentName = e
                }, e
            }(),
            I = n("vH/s"),
            D = n("I9Rr"),
            L = function() {
                function e(e, t) {
                    this.logger = e.withCategory("tmi");
                    var n = this.getConnectionOptions(t);
                    this.disabled = n.disabled, this.logger.debug("Creating TMI client", n), this.client = new D.a({
                        connection: n,
                        logger: this.logger
                    })
                }
                return e.prototype.setIdentity = function(e, t) {
                    this.logger.debug("Setting identity", {
                        username: e,
                        authToken: t
                    }), this.client.updateIdentity({
                        username: e,
                        authToken: t
                    })
                }, e.prototype.connect = function() {
                    return h.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return h.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    if (this.disabled) return [2];
                                    n.label = 1;
                                case 1:
                                    return n.trys.push([1, 3, 4, 5]), this.pendingConnection ? this.logger.debug("Waiting on the pending connection...") : (this.logger.debug("Establishing a new connection to TMI..."), this.pendingConnection = this.client.connect()), [4, this.pendingConnection];
                                case 2:
                                    return e = n.sent(), this.logger.debug("Connection completed", e), [3, 5];
                                case 3:
                                    return t = n.sent(), this.logger.warn("Failed to connect, due to error", t), [3, 5];
                                case 4:
                                    return this.pendingConnection = null, [7];
                                case 5:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.join = function(e) {
                    return h.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return h.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    if (this.disabled) return [2];
                                    i.label = 1;
                                case 1:
                                    return i.trys.push([1, 4, , 5]), [4, this.ensureConnected()];
                                case 2:
                                    return i.sent(), this.logger.debug("Joining channel..."), [4, this.client.joinChannel(e)];
                                case 3:
                                    return (t = i.sent()).response.succeeded ? this.logger.debug("Joined channel", {
                                        duration: t.response.duration,
                                        channel: t.response.channel
                                    }) : this.logger.warn("Failed to join channel", {
                                        channel: t.response.channel
                                    }), [3, 5];
                                case 4:
                                    return n = i.sent(), this.logger.warn("Failed to join channel.", n), [3, 5];
                                case 5:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.part = function(e) {
                    return h.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return h.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    if (!this.client.isConnected()) return this.logger.warn("Attempt to part channel, but not connected."), [2];
                                    this.logger.debug("Parting channel..."), i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, 4, 5]), this.pendingPart = this.client.partChannel(e), [4, this.pendingPart];
                                case 2:
                                    return (t = i.sent()).response.succeeded ? this.logger.debug("Parted channel", {
                                        channel: t.response.channel
                                    }) : this.logger.warn("Failed to part channel, due to response.", {
                                        channel: t.response.channel
                                    }), [3, 5];
                                case 3:
                                    return n = i.sent(), this.logger.warn("Failed to part channel, due to error.", n), [3, 5];
                                case 4:
                                    return this.logger.debug("Setting pending part to null"), this.pendingPart = null, [7];
                                case 5:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.awaitParted = function() {
                    return h.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return h.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return t.trys.push([0, 3, , 4]), this.pendingPart ? (this.logger.debug("Waiting for pending part operation..."), [4, this.pendingPart]) : [3, 2];
                                case 1:
                                    t.sent(), this.logger.debug("Pending part operation completed"), t.label = 2;
                                case 2:
                                    return [3, 4];
                                case 3:
                                    return e = t.sent(), this.logger.warn("Failed to ensure channel had parted before joining.", e), [3, 4];
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.disconnect = function() {
                    try {
                        this.client.disconnect()
                    } catch (e) {
                        this.logger.warn("Failed to disconnect client!", e)
                    }
                }, e.prototype.ensureConnected = function() {
                    return h.__awaiter(this, void 0, void 0, function() {
                        return h.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.client.isConnected() ? [3, 2] : (this.logger.debug("Connection not yet established. Waiting on connect to complete..."), [4, this.connect()]);
                                case 1:
                                    e.sent(), e.label = 2;
                                case 2:
                                    if (!this.client.isConnected()) throw new Error("Failed to connect");
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.getConnectionOptions = function(e) {
                    var t = {
                            disabled: !1,
                            secure: !0,
                            port: 443,
                            server: e.tmiHost
                        },
                        n = this.getQueryStringOptions();
                    return null === n ? (this.logger.debug("Using options from configuration"), t) : "false" === n.server ? h.__assign({}, t, {
                        disabled: !0
                    }) : e.buildType !== l.a.Dev ? t : {
                        disabled: !1,
                        secure: null !== n.secure ? n.secure : t.secure,
                        port: null !== n.port ? n.port : t.port,
                        server: null !== n.server ? n.server : t.server
                    }
                }, e.prototype.getQueryStringOptions = function() {
                    try {
                        var e = v.parse(window.location.search),
                            t = {
                                server: void 0 !== e.tmi_host ? e.tmi_host : null,
                                port: void 0 !== e.tmi_port ? +e.tmi_port : null,
                                secure: void 0 !== e.tmi_secure ? "false" !== e.tmi_secure : null
                            };
                        if (null !== t.server || null !== t.port || null !== t.secure) return this.logger.debug("Using options from query string", t), t
                    } catch (e) {
                        this.logger.warn("Failed to parse connection options from query string. Default options will be used.", e)
                    }
                    return null
                }, e
            }(),
            x = n("BzvE"),
            R = n("2KeS"),
            F = new o.IntrospectionFragmentMatcher({
                introspectionQueryResultData: {
                    __schema: {
                        types: [{
                            kind: "UNION",
                            name: "BitsOffer",
                            possibleTypes: [{
                                name: "BitsAdOffer"
                            }, {
                                name: "BitsBundleOffer"
                            }]
                        }, {
                            kind: "UNION",
                            name: "Activity",
                            possibleTypes: [{
                                name: "PlayingActivity"
                            }, {
                                name: "StreamingActivity"
                            }, {
                                name: "WatchingActivity"
                            }]
                        }, {
                            kind: "UNION",
                            name: "FeedItem",
                            possibleTypes: [{
                                name: "Post"
                            }, {
                                name: "Video"
                            }, {
                                name: "Stream"
                            }, {
                                name: "Clip"
                            }]
                        }, {
                            kind: "UNION",
                            name: "PostEmbed",
                            possibleTypes: [{
                                name: "Video"
                            }, {
                                name: "Clip"
                            }, {
                                name: "Stream"
                            }, {
                                name: "PhotoOEmbed"
                            }, {
                                name: "VideoOEmbed"
                            }]
                        }, {
                            kind: "INTERFACE",
                            name: "Panel",
                            possibleTypes: [{
                                name: "DefaultPanel"
                            }, {
                                name: "ExtensionPanel"
                            }]
                        }]
                    }
                }
            }),
            P = n("bejq"),
            U = "apollo_excluded_errors",
            M = "apollo_log_errors",
            A = function() {
                function e(e) {
                    this.authToken = null, this.batchID = 0, this.excludedErrors = [], this.eventEmitter = new x.EventEmitter, this.logErrors = !1, this.queryID = 0, this.config = e.config, this.logger = e.logger.withCategory("apollo"), this.store = e.store, this.session = e.session, this.excludedErrors = e.dynamicSettings.get(U, []), this.logErrors = e.dynamicSettings.get(M, !1), this.client = this.createApolloClient(), this.reduxStore = Object(R.createStore)(Object(R.combineReducers)({
                        apollo: this.client.reducer()
                    }), (e.config.buildType !== l.a.Production && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || R.compose)(Object(R.applyMiddleware)(this.client.middleware())))
                }
                return e.prototype.addQueryMetricsListener = function(e) {
                    this.eventEmitter.addListener("query-metrics", e)
                }, e.prototype.removeQueryMetricsListener = function(e) {
                    this.eventEmitter.removeListener("query-metrics", e)
                }, e.prototype.createApolloClient = function() {
                    return new o.ApolloClient({
                        networkInterface: this.createNetworkInterface(),
                        queryDeduplication: !0,
                        fragmentMatcher: F
                    })
                }, e.prototype.createNetworkInterface = function() {
                    var e = this,
                        t = Object(o.createBatchingNetworkInterface)({
                            uri: this.config.graphqlEndpoint,
                            batchInterval: 10
                        });
                    return t.use([{
                        applyBatchMiddleware: function(t, n) {
                            var i = t.options;
                            i.twilight = {
                                batchID: ++e.batchID,
                                batchTimestamp: performance.timing.navigationStart + performance.now(),
                                requests: t.requests
                            }, i.headers || (i.headers = {}), i.headers["Client-Id"] = e.config.authClientID, i.headers["X-Device-Id"] = e.session.deviceID;
                            var a = e.store.getState();
                            a.session && (i.headers["Accept-Language"] = a.session.locale), e.authToken && (i.headers.Authorization = "OAuth " + e.authToken), n()
                        }
                    }]), t.useAfter([{
                        applyBatchAfterware: function(t, n) {
                            return h.__awaiter(e, void 0, void 0, function() {
                                var e, i, a, r, o, s, l, c, u, d = this;
                                return h.__generator(this, function(p) {
                                    switch (p.label) {
                                        case 0:
                                            e = 0, i = t.responses, p.label = 1;
                                        case 1:
                                            return e < i.length ? (a = i[e]).status ? 401 !== a.status ? [3, 2] : this.config.embedded ? (this.logger.warn("Received 401 response from GraphQL."), [3, 4]) : (this.logger.warn("Received 401 response from GraphQL, logging user out."), Object(P.e)(), window.location.reload(!0), [2]) : [3, 5] : [3, 6];
                                        case 2:
                                            return o = (r = this.logger).error, s = [new Error("Received non-200 response from GraphQL."), "Received non-200 response from GraphQL."], l = {
                                                status: a.status
                                            }, [4, a.text()];
                                        case 3:
                                            o.apply(r, s.concat([(l.body = p.sent(), l)])), p.label = 4;
                                        case 4:
                                            return n(), [2];
                                        case 5:
                                            return e++, [3, 1];
                                        case 6:
                                            return c = t.options, u = t.responses.map(function(e, t) {
                                                var n, i = e,
                                                    a = c.twilight.requests[t];
                                                if (n = i.extensions && !i.status ? {
                                                        queryID: ++d.queryID,
                                                        durationMs: i.extensions.durationMilliseconds,
                                                        operationName: i.extensions.operationName,
                                                        variables: a.variables
                                                    } : {
                                                        queryID: ++d.queryID,
                                                        operationName: "<extensions field missing>",
                                                        durationMs: 0
                                                    }, d.logErrors && i.errors && Array.isArray(i.errors)) {
                                                    var r = i.errors.filter(function(e) {
                                                        return !(!e || !e.message) && d.excludedErrors.every(function(t) {
                                                            return !e.message.startsWith(t)
                                                        })
                                                    });
                                                    i.errors.length !== r.length && d.logger.debug("Some errors were filtered and not submitted to sentinel", {
                                                        originalCount: i.errors.length,
                                                        filteredCount: r.length
                                                    }), r.length && d.logger.error(new Error("A GraphQL error occurred with " + n.operationName), "The GraphQL response returned with a non-empty errors array. The entire query will be discarded by Apollo.", {
                                                        info: n,
                                                        errors: r
                                                    })
                                                }
                                                return n
                                            }), this.eventEmitter.listeners("query-metrics", !0) && this.eventEmitter.emit("query-metrics", {
                                                batchID: c.twilight.batchID,
                                                batchTimestamp: c.twilight.batchTimestamp,
                                                queries: u
                                            }), n(), [2]
                                    }
                                })
                            })
                        }
                    }]), t
                }, e
            }(),
            V = n("4ufr"),
            j = n.n(V),
            H = function() {
                function e(e) {
                    var t = this;
                    this.reducers = {}, this.rootReducer = function(e, n) {
                        e || (e = {});
                        var i = {},
                            a = !1;
                        switch (n.type) {
                            case "twilight.registerReducer":
                                if (void 0 === (o = t.reducers[n.name](e[n.name], {
                                        type: "@@INIT"
                                    }))) throw new Error("Reducer for key " + n.name + " returned undefined!");
                                i = h.__assign({}, e, (s = {}, s[n.name] = o, s)), a = !0;
                                break;
                            default:
                                for (var r in t.reducers)
                                    if (t.reducers[r]) {
                                        var o;
                                        if (void 0 === (o = t.reducers[r](e[r], n))) throw new Error("Reducer for key " + r + " returned undefined!");
                                        i[r] = o, a = a || o !== e[r]
                                    }
                        }
                        return a ? i : e;
                        var s
                    }, this.reduxStore = Object(R.createStore)(this.rootReducer, (e.buildType !== l.a.Production && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || R.compose)(Object(R.applyMiddleware)(j.a)))
                }
                return e.prototype.getReduxStore = function() {
                    return this.reduxStore
                }, e.prototype.getState = function() {
                    return this.reduxStore.getState()
                }, e.prototype.dispatch = function(e) {
                    return this.reduxStore.dispatch(e)
                }, e.prototype.registerReducer = function(e, t) {
                    if (this.reducers[e]) throw Error("Reducer already registered: " + e);
                    this.reducers[e] = t, this.dispatch({
                        type: "twilight.registerReducer",
                        name: e
                    })
                }, e
            }(),
            B = function() {
                function e(e, t, n) {
                    this.sniffers = e, this.trackFunc = t, this.filterFunc = n, this.startCalled = !1
                }
                return e.prototype.start = function() {
                    return !this.startCalled && (this.startCalled = !0, this.sniffers.forEach(this.processSniffer.bind(this)), !0)
                }, e.prototype.flush = function() {
                    this.sniffers.forEach(function(e) {
                        return e.getAvailableResourceTimings()
                    })
                }, e.prototype.processSniffer = function(e) {
                    var t = e.frameURL,
                        n = e.getFrameTiming(),
                        i = n.navigationStart;
                    this.processFrameTiming(t, n), e.addResourceListener(this.processResourceTiming.bind(this, i)), e.getAvailableResourceTimings().forEach(this.processResourceTiming.bind(this, i))
                }, e.prototype.processFrameTiming = function(e, t) {
                    if (this.shouldSend(e)) {
                        var n = this.createFrameNetworkEventData(e, t);
                        this.trackFunc(n)
                    }
                }, e.prototype.processResourceTiming = function(e, t) {
                    if (this.shouldSend(t.name)) {
                        var n = this.createResourceNetworkEventData(e, t);
                        this.trackFunc(n)
                    }
                }, e.prototype.shouldSend = function(e) {
                    return !this.filterFunc || this.filterFunc(e)
                }, e.prototype.createFrameNetworkEventData = function(e, t) {
                    return {
                        type: "frame",
                        request_url: e,
                        start_time: t.navigationStart,
                        duration: Math.round(t.responseEnd - t.fetchStart),
                        dns_duration: this.computeDuration(t.domainLookupStart, t.domainLookupEnd),
                        connect_duration: this.computeDuration(t.connectStart, t.connectEnd),
                        request_duration: this.computeDuration(t.requestStart, t.responseStart),
                        response_duration: this.computeDuration(t.responseStart, t.responseEnd),
                        redirect_duration: this.computeDuration(t.redirectStart, t.redirectEnd)
                    }
                }, e.prototype.createResourceNetworkEventData = function(e, t) {
                    return {
                        type: "resource",
                        request_url: t.name,
                        start_time: e + t.startTime,
                        duration: Math.round(t.duration),
                        dns_duration: this.computeDuration(t.domainLookupStart, t.domainLookupEnd),
                        connect_duration: this.computeDuration(t.connectStart, t.connectEnd),
                        request_duration: this.computeDuration(t.requestStart, t.responseStart),
                        response_duration: this.computeDuration(t.responseStart, t.responseEnd),
                        redirect_duration: this.computeDuration(t.redirectStart, t.redirectEnd),
                        transfer_size: t.transferSize
                    }
                }, e.prototype.computeDuration = function(e, t) {
                    return e > 0 && t > 0 ? t - e : void 0
                }, e
            }(),
            z = "resource",
            W = function() {
                function e(e, t, n) {
                    var i = this;
                    this.performance = t, this.frameURL = n, this.startCalled = !1, this.eventEmitter = new x.EventEmitter, this.emitterName = "network-sniffer", this.processNewResourceTimings = function() {
                        var e = i.performance.getEntriesByType(z);
                        if (0 !== e.length) {
                            for (var t = 0, n = e; t < n.length; t++) {
                                var a = n[t];
                                i.fireResourceListeners(a)
                            }
                            i.clearResourceBuffer()
                        }
                    }, this.logger = e.withCategory("network-sniffer"), a(t) ? this.logger.debug("Created") : this.logger.warn("No sniffing allowed!")
                }
                return e.prototype.start = function() {
                    return !this.startCalled && (this.startCalled = !0, this.setResourceBufferSize(), setInterval(this.processNewResourceTimings, 500), !0)
                }, e.prototype.getFrameTiming = function() {
                    return this.performance.timing
                }, e.prototype.getAvailableResourceTimings = function() {
                    return this.processNewResourceTimings(), this.performance.getEntriesByType(z)
                }, e.prototype.addResourceListener = function(e) {
                    this.eventEmitter.addListener(this.emitterName, e)
                }, e.prototype.removeResourceListener = function(e) {
                    this.eventEmitter.removeListener(this.emitterName, e)
                }, e.prototype.setResourceBufferSize = function() {
                    this.performance.setResourceTimingBufferSize(1e3)
                }, e.prototype.clearResourceBuffer = function() {
                    this.performance.clearResourceTimings(), this.setResourceBufferSize()
                }, e.prototype.fireResourceListeners = function(e) {
                    this.eventEmitter.emit(this.emitterName, e)
                }, e
            }(),
            q = function() {
                function e(e) {
                    var t = this;
                    this.buffer = [], this.eventEmitter = new x.EventEmitter, this.emitterName = "network-metrics", this.loggedHostWarnings = {}, this.shouldLogHosts = function(e) {
                        return function(n) {
                            var i = new URL(n),
                                a = i.hostname,
                                r = a.split(".");
                            r.length > 2 && (a = r[r.length - 2] + "." + r[r.length - 1]);
                            var o = e.some(function(e) {
                                return 0 === a.indexOf(e)
                            });
                            return o || t.loggedHostWarnings[a] || (t.loggedHostWarnings[a] = !0, t.logger.debug("Request not in whitelist", {
                                urlHost: a,
                                url: i
                            })), o
                        }
                    }, this.onRequestCompleted = function(e) {
                        if (t.eventEmitter.listeners(t.emitterName, !0)) {
                            if (t.buffer.length > 0) {
                                for (var n = 0, i = t.buffer; n < i.length; n++) {
                                    var a = i[n];
                                    t.eventEmitter.emit(t.emitterName, a)
                                }
                                t.buffer = []
                            }
                            t.eventEmitter.emit(t.emitterName, e)
                        } else t.buffer.push(e)
                    }, this.config = e.config, this.logger = e.logger.withCategory("network monitoring"), this.window = e.window, this.session = e.session;
                    var n = this.createSniffers();
                    n.map(function(e) {
                        t.logger.debug("Starting network sniffer"), e.start()
                    }), this.networkLogger = new B(n, this.onRequestCompleted, this.shouldLogHosts(e.config.networkLoggingHostNames)), this.logger.debug("Starting network logger"), this.networkLogger.start()
                }
                return e.prototype.flush = function() {
                    this.networkLogger.flush()
                }, e.prototype.subscribeToUpdates = function(e) {
                    this.eventEmitter.addListener(this.emitterName, e)
                }, e.prototype.removeQueryMetricsListener = function(e) {
                    this.eventEmitter.removeListener(this.emitterName, e)
                }, e.prototype.createSniffers = function() {
                    var e = [];
                    if (this.canAccessPerformance(this.window)) {
                        (n = this.createSniffer(this.window)) && (this.logger.debug("Creating network sniffer for main window"), e.push(n))
                    }
                    for (var t = 0; t < this.window.frames.length; t++)
                        if (this.canAccessFrame(t) && this.canAccessPerformance(this.window.frames[t].window)) {
                            var n;
                            (n = this.createSniffer(this.window.frames[t].window)) && (this.logger.debug("Creating network sniffer for frame", t), e.push(n))
                        }
                    return e
                }, e.prototype.canAccessFrame = function(e) {
                    try {
                        return !!this.window.frames[e].window
                    } catch (t) {
                        return this.logger.warn("Can't access frame", {
                            index: e,
                            err: t
                        }), !1
                    }
                }, e.prototype.canAccessPerformance = function(e) {
                    try {
                        return a(e.performance)
                    } catch (e) {
                        return this.logger.warn("Unable to determine if network sniffing is allowed", e), !1
                    }
                }, e.prototype.createSniffer = function(e) {
                    try {
                        return new W(this.logger, e.performance, e.location.href)
                    } catch (e) {
                        this.logger.warn("Unable to create network sniffer", e)
                    }
                }, e
            }(),
            G = n("ZaD5"),
            Q = n("Hvhe"),
            K = n("ZVME"),
            $ = function() {
                function e(t, n) {
                    var i = this;
                    if (this.componentDuration = {
                            latencyStatus: Q.a.Unknown
                        }, this.isRoot = !1, this.hasReportedInteractive = !1, this.customEvents = {}, this.hasSentInitializing = !1, this.hasSentInteractive = !1, this.setLocation = function(e) {
                            i.root.setLocation(e)
                        }, this.sendInitializingEvent = function(e, t, n) {
                            i.hasSentInitializing || (i.tracker.trackInitialize(e, t, n, i.componentName, i.relativeStartTime, i.id.toString(), i.startTimestamp, i.isPrePageLoad, i.root && i.root.hasLostVisibility, i.parent && i.parent.id.toString()), i.hasSentInitializing = !0)
                        }, this.sendInteractiveEvent = function(e, t, n) {
                            !i.hasSentInteractive && i.componentDuration.value && (i.tracker.trackInteractive(e, t, n, i.componentName, i.relativeStartTime, i.id.toString(), i.completedTimestamp, i.componentDuration.value, i.isPrePageLoad, i.root && i.root.hasLostVisibility, i.parent && i.parent.id.toString(), i.parent && i.parent.componentName), i.hasSentInteractive = !0)
                        }, this.shouldWarnChild = function() {
                            return i.getCurrentTimestamp() - i.completedTimestamp < 500
                        }, this.id = e.counter++, this.componentName = t, this.parent = n && n.parent, this.children = [], this.parent ? (this.tracker = this.parent.tracker, this.root = this.parent.root || this.parent, this.depth = this.parent.depth + 1, this.parent.registerChild(this)) : this.depth = 0, this.logger = n.logger, this.isPageComponent = this.componentName.endsWith("Page"), this.isPrePageLoad = this.isRoot || this.root && !this.root.completedTimestamp, this.isPageComponent) {
                        var a = n && n.destination;
                        a || (this.logger.error(new Error("The " + this.componentName + " component must supply a canonical destination, ex: directory.index"), "Invalid withLatencyTracking options"), a = this.componentName), this.logger.debug("Set root page to: " + a), this.root && this.root.setPage(this, a)
                    }
                    this.resetStartTime(), this.raiseUpdate(), this.logger.debug("Latency tracker created")
                }
                return e.prototype.reset = function(e) {
                    void 0 === e && (e = !0), this.completedTimestamp && (e && (this.children = [], this.hasReportedInteractive = !1), this.resetStartTime(), this.parent && this.parent.childReset(this), this.logger.debug(this.componentName + " reset", {
                        children: this.children
                    }), this.raiseUpdate())
                }, e.prototype.resetChildren = function() {
                    if (this.children && this.children.length)
                        for (var e = 0, t = this.children; e < t.length; e++) {
                            t[e].resetChildren()
                        }
                    this.children = []
                }, e.prototype.reportInteractive = function(e) {
                    this.hasReportedInteractive ? this.logger.debug("Already reported interactive") : (this.hasReportedInteractive = !0, this.logger.debug(this.componentName + " reported interactive", {
                        expectedChildCount: e,
                        children: this.getChildNames()
                    }), e && (this.expectedChildCount = e), this.checkChildCompleted())
                }, e.prototype.resetCustomEvents = function(e) {
                    this.root.customEvents[e] = []
                }, e.prototype.registerCustomEvent = function(e) {
                    var t;
                    switch (e.start) {
                        case K.d.Registration:
                            t = this.getCurrentTimestamp();
                            break;
                        default:
                            t = this.getRootInitTimestamp()
                    }
                    var n = h.__assign({}, e, {
                        duration: {
                            latencyStatus: Q.a.Unknown
                        },
                        startTime: t
                    });
                    return this.logger.debug("[" + e.group + "][" + e.label + "] Event registered", {
                        customEvent: n
                    }), this.root.customEvents[e.group] || (this.root.customEvents[e.group] = []), this.root.customEvents[e.group].push(n), this.raiseUpdate(), n
                }, e.prototype.reportCustomEvent = function(e) {
                    if (!e.duration || !e.duration.value) {
                        var t = this.getCurrentTimestamp() - e.startTime,
                            n = t <= e.benchmark ? Q.a.Pass : Q.a.Fail;
                        e.duration.value = t, e.duration.latencyStatus = n, this.logger.debug("[" + e.group + "][" + e.label + "] Event reported", {
                            customEvent: e
                        }), this.raiseUpdate(), this.root.sendCustomEventToSpade(e)
                    }
                }, e.prototype.createChild = function(t, n) {
                    return new e(t, {
                        destination: n,
                        parent: this,
                        logger: this.logger.withCategory(t)
                    })
                }, e.prototype.sendBenchmarkEventsToSpade = function() {
                    if (this.root) {
                        var e = this.root.getLocation(),
                            t = this.root.getDestination(),
                            n = this.root.getPageComponentName();
                        if (t && e && n) {
                            this.sendInitializingEvent(t, e, n), this.sendInteractiveEvent(t, e, n);
                            for (var i = 0, a = this.children; i < a.length; i++) {
                                a[i].sendBenchmarkEventsToSpade()
                            }
                        }
                    }
                }, e.prototype.raiseUpdate = function() {
                    this.root && this.root.raiseUpdate()
                }, e.prototype.markCompleted = function() {
                    if (!this.completedTimestamp) {
                        this.completedTimestamp = this.getCurrentTimestamp();
                        var e = Math.round(this.completedTimestamp - this.startTimestamp);
                        this.componentDuration = {
                            value: e,
                            latencyStatus: Q.a.Unknown
                        }, this.logger.debug("Done", {
                            componantName: this.componentName,
                            durationMs: this.componentDuration.value
                        }), this.parent && this.parent.childCompleted(this), this.raiseUpdate()
                    }
                }, e.prototype.checkChildCompleted = function() {
                    var e = this.expectedChildCount ? this.expectedChildCount : this.children.length;
                    this.children.filter(function(e) {
                        return e.completedTimestamp
                    }).length >= e && (this.logger.debug("All children completed", {
                        componentName: this.componentName,
                        expectedChildCount: e,
                        children: this.getChildNames()
                    }), this.markCompleted())
                }, e.prototype.registerChild = function(e) {
                    if (this.completedTimestamp) {
                        if (this.root && this.root.completedTimestamp) return void(this.shouldWarnChild() && this.logger.warn("Child attempted to register itself, but parent is already completed", {
                            child: e.componentName,
                            parent: this.componentName
                        }));
                        this.reset(!1)
                    }
                    this.children.push(e)
                }, e.prototype.getChildNames = function() {
                    return this.children.map(function(e) {
                        return e.componentName
                    })
                }, e.prototype.getRootInitTimestamp = function() {
                    return this.root.startTimestamp
                }, e.prototype.getNavigationStartTimestamp = function() {
                    return this.root ? this.root.navigationStart : Date.now()
                }, e.prototype.getCurrentTimestamp = function() {
                    return performance.timing.navigationStart + performance.now()
                }, e.prototype.getRelativeStartTimestamp = function() {
                    return Math.round(this.startTimestamp - this.getNavigationStartTimestamp())
                }, e.prototype.resetStartTime = function() {
                    var e = this.getCurrentTimestamp();
                    this.startTimestamp = e, this.relativeStartTime = this.getRelativeStartTimestamp(), this.completedTimestamp = 0, this.componentDuration = {
                        value: void 0,
                        latencyStatus: Q.a.Unknown
                    }
                }, e.prototype.childReset = function(e) {
                    this.children.includes(e) || this.children.push(e), this.completedTimestamp ? this.logger.warn("Child component reset after this one completed", {
                        child: e.componentName
                    }) : this.logger.debug("Child component reset", {
                        child: e.componentName
                    })
                }, e.prototype.childCompleted = function(e) {
                    this.completedTimestamp ? this.shouldWarnChild() && this.logger.warn("Child attempted to report completed, but parent is already completed", {
                        child: e.componentName,
                        parent: this.componentName
                    }) : (this.logger.debug(this.componentName + " child " + e.componentName + " completed", {
                        children: this.getChildNames()
                    }), this.hasReportedInteractive && this.checkChildCompleted())
                }, e.counter = 1, e
            }(),
            Z = function() {
                function e(e, t) {
                    this.tracking = e, this.logger = t.withCategory("tracker"), this.logger.debug("Created")
                }
                return e.prototype.trackNetworkRequestEvent = function(e, t, n, i, a, r) {
                    r.request_url !== this.tracking.getEndpoint() ? this.tracking.trackBenchmark(I.SpadeEventType.NetworkRequest, h.__assign({
                        is_pre_pageload: i,
                        destination: e,
                        location: t,
                        page_component_name: n,
                        client_time: r.start_time / 1e3,
                        relative_start_time: a
                    }, r)) : this.logger.debug("Skipping Spade network request.")
                }, e.prototype.trackCompleteTransition = function(e, t, n, i, a, r, o) {
                    this.tracking.trackBenchmark(I.SpadeEventType.CompleteTransition, {
                        client_time: i / 1e3,
                        lost_visibility: o,
                        destination: e,
                        location: t,
                        page_component_name: n,
                        is_app_launch: r,
                        time_from_fetch: a
                    })
                }, e.prototype.trackCustomEvent = function(e) {
                    this.tracking.trackCustomEventBenchmark({
                        benchmark: e.benchmark,
                        duration: e.duration && e.duration.value || 0,
                        group: e.group,
                        key: e.key,
                        label: e.label
                    })
                }, e.prototype.trackAppBooted = function(e, t, n, i, a, r) {
                    this.tracking.trackBenchmark(I.SpadeEventType.AppBooted, {
                        client_time: i / 1e3,
                        lost_visibility: r,
                        destination: e,
                        location: t,
                        page_component_name: n,
                        time_from_fetch: a
                    })
                }, e.prototype.trackInitialize = function(e, t, n, i, a, r, o, s, l, c) {
                    this.tracking.trackBenchmark(I.SpadeEventType.ComponentInitializing, {
                        destination: e,
                        location: t,
                        page_component_name: n,
                        component: i,
                        component_id: r,
                        parent_component_id: c,
                        client_time: o / 1e3,
                        lost_visibility: l,
                        is_pre_pageload: s,
                        relative_start_time: a
                    })
                }, e.prototype.trackInteractive = function(e, t, n, i, a, r, o, s, l, c, u, d) {
                    this.tracking.trackBenchmark(I.SpadeEventType.ComponentInteractive, {
                        destination: e,
                        location: t,
                        page_component_name: n,
                        component: i,
                        component_id: r,
                        parent_component_id: u,
                        parent_component: d,
                        client_time: o / 1e3,
                        time_from_initializing: s / 1e3,
                        duration: s,
                        lost_visibility: c,
                        relative_start_time: a,
                        is_pre_pageload: l
                    })
                }, e.prototype.trackFetchStart = function(e, t, n, i, a) {
                    this.tracking.trackBenchmark(I.SpadeEventType.FetchStart, {
                        destination: e,
                        location: t,
                        page_component_name: n,
                        client_time: i / 1e3,
                        lost_visibility: a
                    })
                }, e.prototype.trackApiQuery = function(e, t, n, i, a, r, o, s, l) {
                    this.tracking.trackApiQueryBenchmark({
                        destination: e,
                        location: t,
                        client_time: i / 1e3,
                        page_component_name: a,
                        query_name: r,
                        is_pre_pageload: l,
                        execution_time: o,
                        request_time: s,
                        relative_start_time: n
                    })
                }, e
            }(),
            Y = function(e) {
                function t(t) {
                    var n = e.call(this, "Root", {
                        logger: t.logger.withCategory("latency-tracker")
                    }) || this;
                    if (n.rootInitDuration = {
                            latencyStatus: Q.a.Unknown
                        }, n.pageLoadDuration = {
                            latencyStatus: Q.a.Unknown
                        }, n.networkEvents = [], n.queryBatchMetrics = [], n.queryEvents = [], n.isFirstLoad = !0, n.isRoot = !0, n.hasLostVisibility = !1, n.emitter = new x.EventEmitter, n.getLocation = function() {
                            return n.location
                        }, n.setLocation = function(e) {
                            n.logger.debug("Updating location", {
                                location: e
                            }), n.location = e, n.sendBenchmarkEventsToSpade()
                        }, n.getDestination = function() {
                            return n.destination
                        }, n.getPageComponentName = function() {
                            return n.page && n.page.componentName
                        }, n.setPage = function(e, t) {
                            n.page = e, n.destination = t, n.sentinel.setPageComponentName(e.componentName)
                        }, n.sendCustomEventToSpade = function(e) {
                            n.componentEventsEnabled && n.tracker.trackCustomEvent(e)
                        }, n.sendAllEvents = function() {
                            n.networkMonitor && (n.networkMonitor.flush(), n.doReconcileQueries(!0)), n.sendBenchmarkEventsToSpade(), n.sendNetworkRequestsToSpade()
                        }, n.sendFetchStartEvent = function(e, t, i) {
                            n.isFirstLoad && !n.hasSentFetchStart && (n.tracker.trackFetchStart(e, t, i, performance.timing.fetchStart, n.hasLostVisibility), n.hasSentFetchStart = !0)
                        }, n.sendCompleteTransitionEvent = function(e, t, i) {
                            !n.hasSentCompleteTransition && n.pageLoadDuration.value && (n.tracker.trackCompleteTransition(e, t, i, n.completedTimestamp, n.pageLoadDuration.value, n.isFirstLoad, n.hasLostVisibility), n.hasSentCompleteTransition = !0)
                        }, n.sendAppBootedEvent = function(e, t, i) {
                            n.isFirstLoad && !n.hasSentAppBooted && n.rootInitDuration.value && (n.tracker.trackAppBooted(e, t, i, n.startTimestamp, n.rootInitDuration.value, n.hasLostVisibility), n.hasSentAppBooted = !0)
                        }, n.onNetworkRequest = function(e) {
                            var t = e.request_url.startsWith(n.graphqlEndpoint),
                                i = !n.completedTimestamp || e.start_time <= n.completedTimestamp,
                                a = Math.round(e.start_time - n.getNavigationStartTimestamp());
                            n.networkEvents.push({
                                networkEvent: e,
                                latencyStatus: Q.a.Unknown,
                                relativeStartTime: a,
                                isPendingSpade: !0,
                                isApiRequest: t,
                                isPrePageload: i,
                                duration: {
                                    value: e.duration,
                                    latencyStatus: Q.a.Unknown
                                }
                            }), n.reconcileQueries()
                        }, n.reconcileQueries = function() {
                            n.queryReconciliationTimer || (n.queryReconciliationTimer = setTimeout(function() {
                                n.queryReconciliationTimer = null, n.doReconcileQueries(!1), n.sendNetworkRequestsToSpade()
                            }, 250))
                        }, n.doReconcileQueries = function(e) {
                            for (var t = n.networkEvents.filter(function(e) {
                                    return e.isApiRequest
                                }), i = function(i) {
                                    var a = t.find(function(e) {
                                        return e.networkEvent.duration >= i.slowestQueryInBatch && e.networkEvent.start_time >= i.batchTimestamp && e.networkEvent.start_time - i.batchTimestamp < 10
                                    });
                                    !a && e && (a = t.find(function(e) {
                                        return e.networkEvent.duration >= i.slowestQueryInBatch && e.networkEvent.start_time >= i.batchTimestamp
                                    })), a ? (i.relatedNetworkEvent = a.networkEvent, i.isPrePageload = a.isPrePageload, i.requestDuration = {
                                        value: Math.round(a.networkEvent.duration),
                                        latencyStatus: Q.a.Unknown
                                    }) : e && n.logger.warn("Unable to find a related network event for query", {
                                        queryEvent: i,
                                        filteredApiRequests: t,
                                        allNetworkRequests: n.networkEvents.slice()
                                    })
                                }, a = 0, r = n.queryEvents.filter(function(e) {
                                    return !e.relatedNetworkEvent
                                }); a < r.length; a++) {
                                i(r[a])
                            }
                            n.raiseUpdate()
                        }, n.onQuery = function(e) {
                            if (n.completedTimestamp && e.batchTimestamp > n.completedTimestamp) n.logger.debug("Query event data skipped, it is post page load.", e);
                            else {
                                var t = Math.max.apply(Math, e.queries.map(function(e) {
                                    return e.durationMs
                                }));
                                n.queryBatchMetrics.push({
                                    batchID: e.batchID,
                                    batchTimestamp: e.batchTimestamp,
                                    latencyStatus: Q.a.Unknown,
                                    slowestQueryInBatch: t
                                });
                                for (var i = 0, a = e.queries; i < a.length; i++) {
                                    var r = a[i];
                                    n.queryEvents.push({
                                        batchID: e.batchID,
                                        batchTimestamp: e.batchTimestamp,
                                        relativeStartTime: Math.round(e.batchTimestamp - n.getNavigationStartTimestamp()),
                                        queryDuration: {
                                            value: r.durationMs,
                                            latencyStatus: Q.a.Unknown
                                        },
                                        requestDuration: {
                                            latencyStatus: Q.a.Unknown
                                        },
                                        operationName: r.operationName,
                                        queryID: r.queryID,
                                        slowestQueryInBatch: t,
                                        variables: r.variables,
                                        latencyStatus: Q.a.Unknown,
                                        isPendingSpade: !0,
                                        isPrePageload: !1
                                    })
                                }
                                n.logger.debug("GraphQL query completed: ", {
                                    latestQueryData: e,
                                    allBatches: n.queryBatchMetrics
                                }), n.reconcileQueries()
                            }
                        }, n.sendNetworkRequestsToSpade = function() {
                            if (n.networkEventsEnabled && n.destination && n.location && n.page) {
                                n.logger.debug("Sending ready network and query events to Spade");
                                var e = n.networkEvents.filter(function(e) {
                                    return e.isPendingSpade
                                });
                                if (e.length) {
                                    for (var t = 0, i = e; t < i.length; t++) {
                                        var a = i[t];
                                        a.isPendingSpade = !1, n.tracker.trackNetworkRequestEvent(n.destination, n.location, n.page.componentName, a.isPrePageload, a.relativeStartTime, a.networkEvent)
                                    }
                                    n.logger.debug("Sent network events to spade:", {
                                        count: e.length
                                    })
                                }
                                var r = n.queryEvents.filter(function(e) {
                                    return e.isPendingSpade && e.isPrePageload
                                });
                                if (r.length > 0) {
                                    for (var o = 0, s = 0, l = r; s < l.length; s++) {
                                        var c = l[s];
                                        void 0 !== c.requestDuration.value && void 0 !== c.queryDuration.value && (c.isPendingSpade = !1, n.tracker.trackApiQuery(n.destination, n.location, c.relativeStartTime, c.batchTimestamp, n.page.componentName, c.operationName, c.queryDuration.value, c.requestDuration.value, c.isPrePageload), o += 1)
                                    }
                                    n.logger.debug("Sent " + o + " query events to Spade, " + (r.length - o) + " events skipped because they are not yet ready.")
                                }
                            }
                        }, n.checkLostVisibility = function() {
                            n.hasLostVisibility || (n.hasLostVisibility = document.hidden)
                        }, n.root = n, n.store = t.store, n.networkEventsEnabled = t.networkEventsEnabled, n.componentEventsEnabled = t.componentEventsEnabled, n.toolsEnabled = t.toolsEnabled, n.graphqlEndpoint = t.config.graphqlEndpoint, n.tracker = new Z(t.tracking, n.logger), n.navigationStart = performance.timing.navigationStart, n.rootInitDuration = {
                            value: Math.round(n.startTimestamp - n.navigationStart),
                            latencyStatus: Q.a.Unknown
                        }, n.networkMonitor = t.networkMonitor, n.sentinel = t.sentinel, n.networkEventsEnabled && n.networkMonitor && n.networkMonitor.subscribeToUpdates(n.onNetworkRequest), n.networkEventsEnabled && t.apollo && t.apollo.addQueryMetricsListener(n.onQuery), t.trackVisibility) try {
                        n.checkLostVisibility(), document.addEventListener("visibilitychange", n.checkLostVisibility)
                    } catch (e) {
                        n.logger.warn("Failed to attach event listener for document visibility change, assuming visibility has been lost.", e), n.hasLostVisibility = !0
                    }
                    return n.raiseUpdate(), n
                }
                return h.__extends(t, e), t.prototype.subscribeToUpdates = function(e) {
                    this.emitter.addListener("root-latency-tracker", e)
                }, t.prototype.getCustomEvents = function() {
                    return this.customEvents
                }, t.prototype.reset = function() {
                    this.isFirstLoad && this.store.dispatch(Object(G.f)());
                    var e = this.getCurrentTimestamp();
                    this.customEvents = {}, this.resetChildren(), this.children = [], this.startTimestamp = e, this.navigationStart = e, this.relativeStartTime = 0, this.rootInitDuration = {
                        latencyStatus: Q.a.Unknown
                    }, this.completedTimestamp = 0, this.componentDuration = {
                        latencyStatus: Q.a.Unknown
                    }, this.hasReportedInteractive = !1, this.page = void 0, this.isFirstLoad = !1, this.pageLoadDuration = {
                        latencyStatus: Q.a.Unknown
                    }, this.networkEvents = [], this.queryEvents = [], this.queryBatchMetrics = [], this.hasSentInitializing = !1, this.hasSentInteractive = !1, this.hasSentAppBooted = !1, this.hasSentCompleteTransition = !1, this.hasReportedInteractive = !1, this.hasLostVisibility = !1, this.raiseUpdate(), this.logger.debug("Reset Root")
                }, t.prototype.raiseUpdate = function() {
                    var e = this;
                    this.toolsEnabled && !this.dispatchTimer && (this.dispatchTimer = setTimeout(function() {
                        e.dispatchTimer = null, e.emitter.emit("root-latency-tracker")
                    }, 100))
                }, t.prototype.sendBenchmarkEventsToSpade = function() {
                    if (this.destination && this.location && this.page) {
                        if (this.sendFetchStartEvent(this.destination, this.location, this.page.componentName), this.sendAppBootedEvent(this.destination, this.location, this.page.componentName), this.componentEventsEnabled && (this.sendInitializingEvent(this.destination, this.location, this.page.componentName), this.sendInteractiveEvent(this.destination, this.location, this.page.componentName)), this.sendCompleteTransitionEvent(this.destination, this.location, this.page.componentName), this.componentEventsEnabled)
                            for (var e = 0, t = this.children; e < t.length; e++) {
                                t[e].sendBenchmarkEventsToSpade()
                            }
                    } else this.logger.debug("Unable to send events to spade. destination or location is not set")
                }, t.prototype.registerChild = function(t) {
                    e.prototype.registerChild.call(this, t), this.logger.debug("Root page got a new child", {
                        newChild: t.componentName,
                        allChildren: this.getChildNames()
                    })
                }, t.prototype.checkChildCompleted = function() {
                    this.page ? e.prototype.checkChildCompleted.call(this) : this.logger.debug("Root page incomplete, pending a page to register.")
                }, t.prototype.markCompleted = function() {
                    if (!this.completedTimestamp)
                        if (this.page) {
                            if (this.completedTimestamp = this.getCurrentTimestamp(), this.componentDuration = {
                                    value: Math.round(this.completedTimestamp - this.startTimestamp),
                                    latencyStatus: Q.a.Unknown
                                }, this.logger.debug("Root tracker done", {
                                    durationMs: this.componentDuration
                                }), this.pageLoadDuration = {
                                    value: (this.componentDuration.value || 0) + (this.rootInitDuration.value || 0),
                                    latencyStatus: Q.a.Unknown
                                }, this.logger.debug("Root page completed", {
                                    pageLoadDuration: this.pageLoadDuration,
                                    rootInitDuration: this.rootInitDuration,
                                    componentDuration: this.componentDuration,
                                    children: this.getChildNames()
                                }), this.raiseUpdate(), this.sendAllEvents(), this.isFirstLoad) {
                                this.store.dispatch(Object(G.f)());
                                var e = document.getElementById("root");
                                e && e.setAttribute("data-a-page-loaded", Date.now().toString())
                            }
                        } else this.logger.warn("Root page attemped to complete without a registered page component.")
                }, t.prototype.getNavigationStartTimestamp = function() {
                    return this.navigationStart > 0 ? this.navigationStart : performance.timing.navigationStart
                }, t
            }($),
            J = "twilight.force-component-benchmarking",
            X = "twilight.force-network-monitoring",
            ee = "twilight.force-benchmarking-tools",
            te = {
                networkingThreshold: "benchmark_networking_threshold",
                componentThreshold: "benchmark_component_threshold"
            },
            ne = function() {
                function e(e) {
                    var t = this;
                    this.getRootLatencyTracker = function() {
                        return t.latencyTracker
                    }, this.logger = e.logger.withCategory("Benchmarking"), this.seed = Math.round(100 * Math.random()) / 100, this.storage = e.storage;
                    var n = e.dynamicSettings.get(te.networkingThreshold, e.config.defaultNetworkLoggingThreshold),
                        i = e.dynamicSettings.get(te.componentThreshold, e.config.defaultComponentBenchmarkingThreshold);
                    this.toolsEnabled = this.shouldEnableTools(e.config), this.componentsEnabled = this.shouldEnableComponentBenchmarking(e.config, i, this.toolsEnabled), this.networkingEnabled = this.shouldEnableNetworkBenchmarking(e.config, n, this.componentsEnabled, this.toolsEnabled), this.networkingEnabled && (this.networkMonitoring = new q(e)), this.latencyTracker = new Y({
                        componentEventsEnabled: this.componentsEnabled,
                        networkEventsEnabled: this.networkingEnabled,
                        toolsEnabled: this.toolsEnabled,
                        config: e.config,
                        logger: e.logger,
                        apollo: e.apollo,
                        networkMonitor: this.networkMonitoring,
                        sentinel: e.sentinel,
                        tracking: e.tracking,
                        store: e.store,
                        trackVisibility: !0
                    }), this.logger.debug("Initialized", {
                        seed: this.seed,
                        toolsEnabled: this.toolsEnabled,
                        componentsEnabled: this.componentsEnabled,
                        componentThreshold: i,
                        networkingEnabled: this.networkingEnabled,
                        networkingThreshold: n
                    })
                }
                return e.prototype.shouldEnableTools = function(e) {
                    return e.forceComponentBenchmarking ? (this.logger.debug("Tools enabled, due to config."), !0) : !!this.storage.get(ee, !1) && (this.logger.debug("Tools enabled, due to local storage."), !0)
                }, e.prototype.shouldEnableComponentBenchmarking = function(e, t, n) {
                    return n ? (this.logger.debug("Components enabled, due to Tools being enabled"), !0) : e.forceComponentBenchmarking ? (this.logger.debug("Components enabled, due to config."), !0) : this.storage.get(X, !1) ? (this.logger.debug("Components enabled, due to local storage."), !0) : this.seed <= t && (this.logger.debug("Components enabled, due to random selection"), !0)
                }, e.prototype.shouldEnableNetworkBenchmarking = function(e, t, n, i) {
                    return n || i ? (this.logger.debug("Networking enabled, due to Components or Tools being enabled"), !0) : e.forceNetworkLogging ? (this.logger.debug("Networking enabled, due to config."), !0) : this.storage.get(J, !1) ? (this.logger.debug("Networking enabled, due to local storage."), !0) : this.seed <= t && (this.logger.debug("Networking enabled, due to random selection"), !0)
                }, e
            }(),
            ie = n("Itsn"),
            ae = n("ciQf"),
            re = n.n(ae),
            oe = n("HSnN"),
            se = n.n(oe);
        ! function(e) {
            e[e.Debug = 1] = "Debug", e[e.Info = 2] = "Info", e[e.Warn = 3] = "Warn", e[e.Error = 4] = "Error", e[e.Fatal = 5] = "Fatal"
        }(_ || (_ = {}));
        var le = function() {
                function e(e, t) {
                    var n = this;
                    if (this.eventEmitter = new x.EventEmitter, this.addMessageListener = function(e) {
                            n.eventEmitter.addListener("message", e)
                        }, this.removeMessageListener = function(e) {
                            n.eventEmitter.removeListener("message", e)
                        }, this.onWindowError = function(e) {
                            e.error ? (e.preventDefault(), n.write(_.Error, "Uncaught error.", void 0, e.error, "uncaught")) : n.write(_.Warn, "Uncaught error, but the error object is null. This is usually caused by a browser permission issue. Please check the browser console.", [{
                                event: e
                            }], new Error("Uncaught error, but the error object is null."), "uncaught")
                        }, e && t) throw new Error("Cannot pass both `options` and `childOptions` arguments.");
                    e ? (this.buildType = e.buildType, this.buffer = [], this.minConsoleLogLevel = e.minConsoleLogLevel, this.maxBufferSize = e.maxBufferSize || 1e3) : t && (this.category = t.category, this.rootLogger = t.rootLogger)
                }
                return e.prototype.addWindowErrorListener = function() {
                    if (this.rootLogger) throw new Error("Attempted to add child logger to window error listeners.");
                    this.windowErrorListenerAdded ? this.warn("Attempted to add window error listener multiple times.") : (this.windowErrorListenerAdded = !0, window.addEventListener("error", this.onWindowError), this.debug("Window error listener added."))
                }, e.prototype.withCategory = function(t) {
                    return new e(null, {
                        rootLogger: this.rootLogger || this,
                        category: (this.category ? this.category + "." : "") + t
                    })
                }, e.prototype.debug = function(e) {
                    for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
                    this.write(_.Debug, e, t)
                }, e.prototype.info = function(e) {
                    for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
                    this.write(_.Info, e, t)
                }, e.prototype.warn = function(e) {
                    for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
                    this.write(_.Warn, e, t)
                }, e.prototype.error = function(e, t) {
                    for (var n = [], i = 2; i < arguments.length; i++) n[i - 2] = arguments[i];
                    this.write(_.Error, t, n, e, "caught")
                }, e.prototype.fatal = function(e, t) {
                    for (var n = [], i = 2; i < arguments.length; i++) n[i - 2] = arguments[i];
                    this.write(_.Fatal, t, n, e, "fatal")
                }, e.prototype.flush = function() {
                    if (this.rootLogger) throw new Error("Cannot flush a child logger.");
                    var e = this.buffer;
                    return this.buffer = [], this.messagesTruncated && e.unshift({
                        time: e[0].time - 1,
                        level: _[_.Info].toLowerCase(),
                        message: "Log truncated.",
                        args: [{
                            firstMessageTime: this.firstMessageTime,
                            messagesTruncated: this.messagesTruncated,
                            truncationEvents: this.truncationEvents
                        }]
                    }), e
                }, e.prototype.write = function(e, t, n, i, a, r, o) {
                    void 0 === n && (n = []), void 0 === o && (o = !1), this.rootLogger ? this.rootLogger.write(e, t, n, i, a, this.category, o) : (this.buffer.length === this.maxBufferSize && (this.firstMessageTime || (this.firstMessageTime = this.buffer[0].time), this.truncationEvents = (this.truncationEvents || 0) + 1, this.messagesTruncated = (this.messagesTruncated || 0) + this.buffer.splice(0, Math.ceil(this.maxBufferSize / 10)).length), r = r || this.category, e >= this.minConsoleLogLevel && this.writeToConsole(e, r, t, n, i), e !== _.Debug && this.writeToBuffer(e, r, t, n, i, a, o), !this.onError || e !== _.Error && e !== _.Fatal || this.onError(this))
                }, e.prototype.writeToBuffer = function(e, t, n, i, a, r, o) {
                    void 0 === o && (o = !1);
                    var s = [],
                        c = {
                            time: Date.now(),
                            level: _[e].toLowerCase(),
                            message: n
                        };
                    if (i && i.length > 0 && (c.args = i.map(function(e, t) {
                            if (e instanceof Error) return {
                                name: e.name,
                                message: e.message,
                                stack: e.stack || null
                            };
                            if ("object" == typeof e) try {
                                return JSON.parse(JSON.stringify(e))
                            } catch (e) {
                                return s.push({
                                    message: n,
                                    argIndex: t,
                                    err: e
                                }), "<unserializable>"
                            } else if ("function" == typeof e) return e.name ? "<function " + e.name + ">" : "<anonymous function>";
                            return e
                        })), t && (c.category = t), a && (c.errors = [{
                            name: a.name,
                            message: a.message,
                            stack: a.stack || null,
                            type: r || "caught"
                        }]), this.buffer.push(c), !o)
                        for (var u = 0, d = s; u < d.length; u++) {
                            var p = d[u];
                            this.buildType === l.a.Production ? this.write(_.Warn, "Failed to serialize argument for log message.", [{
                                message: p.message,
                                argIndex: p.argIndex,
                                err: p.err
                            }], void 0, void 0, void 0, !0) : this.write(_.Error, "Failed to serialize argument for log message.", [{
                                message: p.message,
                                argIndex: p.argIndex
                            }], p.err, "caught", t, !0)
                        }
                    this.eventEmitter.emit("message", c)
                }, e.prototype.writeToConsole = function(e, t, n, i, a) {
                    var r = (new Date).toLocaleTimeString();
                    t = t ? "[" + t + "] " : "", n = r + " [" + _[e].toUpperCase() + "] " + t + n, e === _.Fatal && (e = _.Error);
                    var o = (console[_[e].toLowerCase()] || console.log).bind(console);
                    a ? o.apply(void 0, [n, a].concat(i)) : o.apply(void 0, [n].concat(i))
                }, e
            }(),
            ce = n("HM6l"),
            ue = n("o/qv"),
            de = "session_storage_unique_id",
            pe = "local_storage_device_id",
            me = function() {
                function e(e) {
                    var t = this;
                    this.onHistoryChange = function() {
                        t.pageviewID = t.getUniqueID()
                    }, this.storage = e.storage, this.tempStorage = e.tempStorage, this.benchmarkID = this.getOrCreateBenchmarkSessionID(), this.deviceID = this.getOrCreateDeviceID(), this.localStorageDeviceID = this.getOrCreateLocalStorageDeviceID(), this.pageviewID = this.getUniqueID(), this.tabID = this.getOrCreateSessionStorageUniqueID(), e.history.listen(this.onHistoryChange)
                }
                return e.prototype.getUniqueID = function() {
                    return Object(ce.b)().substring(0, 16)
                }, e.prototype.getOrCreateDeviceID = function() {
                    var e = g.get("unique_id");
                    return e || (e = Object(ce.b)().substring(0, 16), g.set("unique_id", e, {
                        expires: 3650,
                        domain: Object(ue.a)(),
                        secure: "https:" === window.location.protocol
                    }), e)
                }, e.prototype.getOrCreateBenchmarkSessionID = function() {
                    return g.get("twilight.automation_session_id") || Object(ce.b)().substring(0, 16)
                }, e.prototype.getOrCreateSessionStorageUniqueID = function() {
                    var e = this.tempStorage.get(de, "");
                    return e || (e = Object(ce.b)().substring(0, 16), this.tempStorage.set(de, e), e)
                }, e.prototype.getOrCreateLocalStorageDeviceID = function() {
                    var e = this.storage.get(pe, "");
                    return e || (e = Object(ce.b)().substring(0, 16), this.storage.set(pe, e), e)
                }, e
            }(),
            he = function() {
                function e(e, t) {
                    this.cache = {}, this.storage = e, this.logger = t
                }
                return e.prototype.get = function(e, t) {
                    var n = null;
                    try {
                        n = this.storage.getItem(e)
                    } catch (t) {
                        this.logger.warn("Failed to load stored value.", t, {
                            key: e
                        }), n = this.cache[e] || null
                    }
                    if (null === n || "undefined" === n) return t;
                    try {
                        return JSON.parse(n)
                    } catch (i) {
                        return this.logger.warn("Failed to deserialize stored value, removing from storage.", i, {
                            key: e,
                            value: n
                        }), this.remove(e), t
                    }
                }, e.prototype.getOptional = function(e) {
                    return this.get(e, null)
                }, e.prototype.set = function(e, t) {
                    var n;
                    try {
                        n = JSON.stringify(t)
                    } catch (n) {
                        throw this.logger.warn("Failed to serialize value.", n, {
                            key: e,
                            value: t
                        }), n
                    }
                    this.cache[e] = n;
                    try {
                        this.storage.setItem(e, n)
                    } catch (i) {
                        this.logger.warn("Failed to save value.", i, {
                            key: e,
                            value: t,
                            serializedValue: n
                        })
                    }
                }, e.prototype.remove = function(e) {
                    delete this.cache[e];
                    try {
                        this.storage.removeItem(e)
                    } catch (t) {
                        this.logger.warn("Failed to remove key from storage.", t, {
                            key: e
                        })
                    }
                }, e.prototype.clear = function() {
                    this.cache = {};
                    try {
                        this.storage.clear()
                    } catch (e) {
                        this.logger.warn("Failed to clear storage.", e)
                    }
                }, e
            }(),
            ge = n("MkXM");
        n.d(t, "o", function() {
            return fe
        }), n.d(t, "a", function() {
            return ve
        }), n.d(t, "b", function() {
            return be
        }), n.d(t, "c", function() {
            return ye
        }), n.d(t, "d", function() {
            return ke
        }), n.d(t, "e", function() {
            return Se
        }), n.d(t, "f", function() {
            return _e
        }), n.d(t, "g", function() {
            return we
        }), n.d(t, "h", function() {
            return Ee
        }), n.d(t, "j", function() {
            return Ce
        }), n.d(t, "k", function() {
            return Ne
        }), n.d(t, "l", function() {
            return Te
        }), n.d(t, "m", function() {
            return Oe
        }), n.d(t, "n", function() {
            return Ie
        }), t.i = function(e) {
            fe = new De(e), ve = fe.config, be = fe.dynamicSettings, ye = fe.intl.formatDate, ke = fe.intl.formatMessage, Se = fe.intl.formatNumber, _e = fe.intl.formatNumberShort, we = fe.intl.formatRelativeDate, Ee = fe.intl.formatTime, Ce = fe.logger, Ne = fe.pubsub, Te = fe.storage, Oe = fe.tempStorage, Ie = fe.tracking
        };
        var fe, ve, be, ye, ke, Se, _e, we, Ee, Ce, Ne, Te, Oe, Ie, De = function() {
            function e(e) {
                var t = this;
                this.dynamicSettings = new ie.a, this.history = function(e) {
                    var t = e ? se()() : re()(),
                        n = t.push.bind(t),
                        i = /^([^#?]+)?(\?[^#]+)?(\#.+)?$/i;
                    return t.push = function(e, a) {
                        var r = t.location.pathname,
                            o = "",
                            s = "";
                        if ("string" == typeof e) {
                            var l = i.exec(e);
                            if (!l) return void n(e, a);
                            l[1] && (r = l[1]), l[2] && (o = l[2]), l[3] && (s = l[3])
                        } else e.pathname && (r = e.pathname), e.search && ((o = e.search).startsWith("?") || (o = "?" + o)), e.hash && ((s = e.hash).startsWith("#") || (s = "#" + s));
                        (r === t.location.pathname || !r.startsWith("/") && t.location.pathname.endsWith("/" + r)) && o === t.location.search && s === t.location.hash ? t.replace(e, a) : n(e, a)
                    }, t
                }(), this.pageTitle = "Twitch", this.config = e, this.store = new H(this.config);
                var n = this.config.buildType === l.a.Production ? _.Error : _.Debug;
                try {
                    var i = localStorage.getItem(this.config.forceMinConsoleLogLevelKey);
                    null !== i && (n = Number(i))
                } catch (e) {
                    console.error("Failed to get log level override from local storage.", {
                        err: e,
                        key: this.config.forceMinConsoleLogLevelKey
                    })
                }
                this.logger = new le({
                    minConsoleLogLevel: n,
                    maxBufferSize: 1e3,
                    buildType: this.config.buildType
                }), this.logger.addWindowErrorListener(), this.storage = new he(localStorage, this.logger.withCategory("storage")), this.tempStorage = new he(sessionStorage, this.logger.withCategory("tempStorage")), this.session = new me({
                    history: this.history,
                    storage: this.storage,
                    tempStorage: this.tempStorage
                }), this.config.embedded || (this.sentinel = new O({
                    buildID: e.buildID,
                    endpoint: e.sentinelEndpoint,
                    logger: this.logger,
                    session: this.session,
                    store: this.store
                }), this.logger.onError = function(e) {
                    t.sentinel.report(e.flush())
                }), this.adBlockSentinel = new m({
                    accountID: e.adblockAccount,
                    cid: e.adblockID,
                    logger: this.logger
                }), this.adBlockDetector = new d({
                    logger: this.logger
                }), this.adBlockDetector.addTwitchGlobal(), this.adBlockDetector.detectAdBlock(), this.apollo = new A({
                    config: this.config,
                    dynamicSettings: this.dynamicSettings,
                    logger: this.logger,
                    session: this.session,
                    store: this.store
                }), this.tracking = new I.Spade({
                    apollo: this.apollo,
                    config: this.config,
                    endpoint: this.dynamicSettings.get("spade_url", e.defaultSpadeEndpoint),
                    logger: this.logger,
                    session: this.session,
                    store: this.store,
                    adBlockSentinel: this.adBlockSentinel,
                    adBlockDetector: this.adBlockDetector
                }), this.pubsub = new T(this.store, this.logger), this.intl = new ge.TwilightIntl(e.locales), this.config.embedded || (this.benchmarking = new ne({
                    apollo: this.apollo,
                    config: this.config,
                    dynamicSettings: this.dynamicSettings,
                    logger: this.logger,
                    sentinel: this.sentinel,
                    session: this.session,
                    storage: this.storage,
                    store: this.store,
                    tracking: this.tracking,
                    window: window
                })), this.experiments = new E({
                    logger: this.logger,
                    session: this.session,
                    store: this.store,
                    storage: this.storage,
                    tracking: this.tracking
                }), this.tmi = new L(this.logger, this.config)
            }
            return e.prototype.mount = function(e, t) {
                s.render(this.wrap(e), t)
            }, e.prototype.wrap = function(e) {
                return r.createElement(o.ApolloProvider, {
                    store: this.store.getReduxStore(),
                    client: this.apollo.client
                }, e)
            }, e.prototype.setPageTitle = function(e) {
                this.pageTitle = e ? e + " - Twitch" : "Twitch", this.updateDocumentTitle()
            }, e.prototype.setBadgeCount = function(e) {
                this.badgeCount = e, this.updateDocumentTitle()
            }, e.prototype.updateDocumentTitle = function() {
                if (this.badgeCount > 0) {
                    var e = this.badgeCount > 99 ? "99+" : "" + this.badgeCount;
                    document.title = "(" + e + ") " + this.pageTitle
                } else document.title = this.pageTitle
            }, e
        }()
    },
    JBcW: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.c = function(e) {
            a.m.track(r.SpadeEventType.BrowserPushNotificationPrompt, e)
        }, t.b = function(e) {
            a.m.track(r.SpadeEventType.BrowserPushNotificationDisable, e)
        };
        var i, a = n("6sO2"),
            r = n("vH/s");
        (i || (i = {})).Settings = "settings"
    },
    JVK9: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function() {
            return {
                type: i
            }
        };
        var i = "features.ads.TRACKING_SET"
    },
    K1Jg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Presence_WatchingClick_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 158
            }
        };
        n.loc.source = {
            body: "query Presence_WatchingClick_User($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\nhosting {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KJtg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UnblockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnblockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unblockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KfGW: function(e, t) {},
    Kxgf: function(e, t, n) {
        "use strict";

        function i(e) {
            return e && r.n.apollo.client.dataIdFromObject ? r.n.apollo.client.dataIdFromObject(e) || "" : ""
        }
        t.a = function() {
            var e = this;
            return Object(o.a)(l, {
                props: function(t) {
                    return {
                        unblockUserMutation: function(n, r) {
                            return a.__awaiter(e, void 0, void 0, function() {
                                return a.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n
                                                    }
                                                },
                                                optimisticResponse: {
                                                    unblockUser: {
                                                        __typename: "UnblockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: i(r),
                                                        fragment: s
                                                    });
                                                    t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                        return e.id !== n
                                                    }), e.writeFragment({
                                                        id: i(r),
                                                        fragment: s,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("unblockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var a = n("TToO"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("a0uF"),
            l = (n.n(s), n("KJtg"));
        n.n(l)
    },
    L6HU: function(e, t) {},
    LBNC: function(e, t, n) {
        "use strict";
        t.a = function() {
            return "serviceWorker" in window.navigator && "PushManager" in window
        }
    },
    LYwx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelOwnerID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelOwnerID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 194
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nurl\nemotes {\nid\ntoken\n}\nemoteSetID\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ldv2: function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(a.a)(o, {
                props: function(e) {
                    if (e.data) {
                        var t = e.data.currentUser && e.data.currentUser.emoteSets,
                            n = t && Object(r.a)(t);
                        return {
                            emoteSetsData: i.__assign({}, e.data, {
                                emoteMap: n,
                                emoteSets: t
                            })
                        }
                    }
                    return {}
                },
                skip: function(e) {
                    return !e.isLoggedIn
                }
            })
        };
        var i = n("TToO"),
            a = n("7vx8"),
            r = n("YhVV"),
            o = n("7B9K");
        n.n(o)
    },
    LiYP: function(e, t, n) {
        "use strict";

        function i(e) {
            if (!e) return [];
            return e.slice().filter(function(e) {
                return (null !== e.activity || null !== e.availability) && (e.availability === W.a.Online || e.availability === W.a.Idle || e.availability === W.a.Busy || e.availability === W.a.Away)
            }).sort(function(e, t) {
                if (!e.activity && !t.activity) return a(e, t);
                if (e.activity && !t.activity) return -1;
                if (!e.activity && t.activity) return 1;
                if (e.activity && t.activity) {
                    if (e.activity.type === z.a.Watching && t.activity.type !== z.a.Watching) return -1;
                    if (e.activity.type !== z.a.Watching && t.activity.type === z.a.Watching) return 1;
                    if (e.activity.type === z.a.Watching && t.activity.type === z.a.Watching) return a(e, t);
                    if (e.activity.type === z.a.Streaming && t.activity.type !== z.a.Streaming) return -1;
                    if (e.activity.type !== z.a.Streaming && t.activity.type === z.a.Streaming) return 1;
                    if (e.activity.type === z.a.Streaming && t.activity.type === z.a.Streaming) return a(e, t);
                    if (e.activity.type === z.a.Playing && t.activity.type !== z.a.Playing) return -1;
                    if (e.activity.type !== z.a.Playing && t.activity.type === z.a.Playing) return 1;
                    if (e.activity.type === z.a.Playing && t.activity.type === z.a.Playing) return a(e, t)
                }
                return o(e, t)
            })
        }

        function a(e, t) {
            return e.availability || t.availability ? e.availability && !t.availability ? -1 : !e.availability && t.availability ? 1 : e.availability === W.a.Online && t.availability !== W.a.Online ? -1 : e.availability !== W.a.Online && t.availability === W.a.Online ? 1 : e.availability === W.a.Online && t.availability === W.a.Online ? o(e, t) : e.availability === W.a.Idle && t.availability !== W.a.Idle ? -1 : e.availability !== W.a.Idle && t.availability === W.a.Idle ? 1 : e.availability === W.a.Idle && t.availability === W.a.Idle ? o(e, t) : e.availability === W.a.Busy && t.availability !== W.a.Busy ? -1 : e.availability !== W.a.Busy && t.availability === W.a.Busy ? 1 : (e.availability === W.a.Busy && (t.availability, W.a.Busy), o(e, t)) : -1
        }

        function r(e, t, n, i) {
            var a = e.slice(),
                r = new Set,
                o = a.filter(function(e) {
                    return e.stream && e.stream.id
                });
            o.forEach(function(e) {
                r.add(e.id)
            });
            var s = function(e) {
                    var t = [],
                        n = [],
                        i = [];
                    return e.forEach(function(e) {
                        switch (e.stream && e.stream.type || M.a.Live) {
                            case M.a.Premiere:
                                n.push(e);
                                break;
                            case M.a.WatchParty:
                            case M.a.Rerun:
                                i.push(e);
                                break;
                            default:
                                t.push(e)
                        }
                    }), t.concat(n, i)
                }(i ? o : function(e) {
                    return e.sort(function(e, t) {
                        return e.stream && t.stream ? null !== e.stream.viewersCount && null === t.stream.viewersCount ? -1 : null !== t.stream.viewersCount && null === e.stream.viewersCount ? 1 : null === e.stream.viewersCount || null === t.stream.viewersCount ? 0 : e.stream.viewersCount > t.stream.viewersCount ? -1 : e.stream.viewersCount < t.stream.viewersCount ? 1 : function(e, t) {
                            var n = e.displayName || e.login || "",
                                i = t.displayName || t.login || "";
                            return n.localeCompare(i)
                        }(e, t) : 0
                    })
                }(o)),
                l = t.filter(function(e) {
                    return !r.has(e.id)
                });
            l.reverse();
            var c = function(e, t) {
                if (!t) return e;
                var n = e.filter(function(e) {
                        return null !== e.id && !!t[e.id]
                    }),
                    i = e.filter(function(e) {
                        return null !== e.id && !t[e.id]
                    });
                return n.sort(function(e, n) {
                    var i = null !== e.id && t[e.id],
                        a = null !== n.id && t[n.id];
                    return (a && a.length || 0) - (i && i.length || 0)
                }), n.concat(i)
            }(l, n);
            return s.concat(c)
        }

        function o(e, t) {
            if (!e.node && !t.node) return 0;
            if (e.node && !t.node) return -1;
            if (t.node && !e.node) return 1;
            var n = e.node.displayName || e.node.login || "",
                i = t.node.displayName || t.node.login || "";
            return n.localeCompare(i)
        }

        function s(e) {
            return e.stream && e.stream.id ? "watch_party" === e.stream.type ? G : q : Q
        }
        var l, c = n("TToO"),
            u = n("HW6M"),
            d = n("U7vG"),
            p = n("F8kA"),
            m = n("6sO2"),
            h = n("zCIC"),
            g = n("7vx8"),
            f = n("NXs7"),
            v = n("VAT8"),
            b = n("rK5D"),
            y = n("zNzU"),
            k = n("CSlQ"),
            S = n("RH2O"),
            _ = n("hdYS"),
            w = n("5kgt"),
            E = n("SZoP"),
            C = n("GfPd"),
            N = n("Odds"),
            T = (n("WnwY"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        return t.containerRef = e
                    }, t.onMouseEnter = function() {
                        t.props.tooltipLabel ? t.props.tooltipLayer.show({
                            label: t.props.tooltipLabel,
                            from: t.containerRef,
                            align: N._32.Center,
                            direction: N._33.Right
                        }) : t.props.tooltipContent && t.props.tooltipLayer.showRich({
                            from: t.containerRef,
                            richContent: t.props.tooltipContent,
                            allowHover: t.props.offline,
                            delayOpenMS: 1e3,
                            forceDarkTheme: !0,
                            balloonDirection: t.props.offline ? N.q.Right : N.q.RightCenter
                        })
                    }, t.onMouseLeave = function() {
                        t.props.tooltipLayer.hide()
                    }, t.addEventListeners = function() {
                        t.containerRef && (t.containerRef.addEventListener("mouseenter", t.onMouseEnter), t.containerRef.addEventListener("mouseleave", t.onMouseLeave))
                    }, t.removeEventListeners = function() {
                        t.containerRef && (t.containerRef.removeEventListener("mouseenter", t.onMouseEnter), t.containerRef.removeEventListener("mouseleave", t.onMouseLeave))
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.addEventListeners()
                }, t.prototype.componentWillUnmount = function() {
                    this.removeEventListeners()
                }, t.prototype.render = function() {
                    return this.props.collapsed ? d.createElement("div", {
                        ref: this.setContainerRef,
                        "data-test-selector": "side-nav-card-collapsed"
                    }, d.createElement(N.Q, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: N.H.Flex,
                        alignItems: N.c.Center,
                        flexWrap: N.K.NoWrap
                    }, d.createElement(p.a, {
                        to: this.props.linkTo,
                        className: "side-nav-card",
                        onClick: this.props.onClick
                    }, d.createElement(N.V, {
                        className: u("side-nav-card__avatar", {
                            "side-nav-card__avatar--offline": this.props.offline
                        }),
                        flexShrink: 0
                    }, d.createElement(N.l, {
                        imageSrc: this.props.avatarSrc,
                        imageAlt: this.props.avatarAlt,
                        size: 30,
                        presenceIndicator: this.props.avatarPresence,
                        presenceStatus: this.props.presenceStatus
                    }))))) : d.createElement("div", {
                        ref: this.setContainerRef
                    }, d.createElement(N.V, {
                        className: "side-nav-card",
                        position: N._4.Relative,
                        display: N.H.Flex,
                        alignItems: N.c.Center
                    }, d.createElement(N.Q, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        display: N.H.Flex,
                        alignItems: N.c.Center,
                        flexWrap: N.K.NoWrap,
                        fullWidth: !0
                    }, d.createElement(p.a, c.__assign({
                        to: this.props.linkTo,
                        className: "side-nav-card__link",
                        onClick: this.props.onClick
                    }, Object(N._40)(this.props)), d.createElement(N.V, {
                        className: u("side-nav-card__avatar", {
                            "side-nav-card__avatar--offline": this.props.offline
                        }),
                        flexShrink: 0,
                        alignItems: N.c.Center
                    }, d.createElement(N.l, {
                        imageSrc: this.props.avatarSrc,
                        imageAlt: this.props.avatarAlt,
                        size: 30,
                        presenceIndicator: this.props.avatarPresence,
                        presenceStatus: this.props.presenceStatus
                    })), d.createElement(N.V, {
                        fullWidth: !0,
                        flexDirection: N.J.Column,
                        flexGrow: 1,
                        margin: {
                            left: 1
                        },
                        display: N.H.Flex,
                        "data-a-target": "side-nav-card-metadata"
                    }, d.createElement("div", {
                        className: "side-nav-card__title",
                        title: this.props.title,
                        "data-a-target": "side-nav-title"
                    }, d.createElement(N._23, {
                        ellipsis: !0,
                        fontSize: N.L.Size5
                    }, this.props.titleElement || this.props.title)), d.createElement(N._19, {
                        className: "side-nav-card__metadata",
                        fontSize: N.L.Size6,
                        display: N.H.Flex,
                        justifyContent: N.U.Between,
                        flexWrap: N.K.NoWrap,
                        ellipsis: !0
                    }, d.createElement(N.Q, {
                        flexGrow: 1,
                        "data-a-target": "side-nav-game-title"
                    }, d.createElement(N._23, {
                        type: N._28.Span,
                        ellipsis: !0
                    }, this.props.metadataLeft)), d.createElement(N.V, {
                        flexShrink: 0,
                        margin: {
                            left: .5
                        },
                        "data-a-target": "side-nav-live-status"
                    }, this.props.metadataRight))))), this.getCardSlideInContent()))
                }, t.prototype.getCardSlideInContent = function() {
                    return this.props.slideInContent ? d.createElement(N.V, {
                        className: "side-nav-card__hover-content",
                        position: N._4.Absolute,
                        display: N.H.Flex,
                        alignItems: N.c.Center,
                        attachRight: !0,
                        padding: {
                            right: 1
                        },
                        "data-a-target": "side-nav-card-hover"
                    }, this.props.slideInContent) : null
                }, t = c.__decorate([Object(k.c)("SideNavCard"), Object(C.c)()], t)
            }(d.Component)),
            O = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.renderGame = function() {
                        return t.props.gameName ? d.createElement(N.Q, {
                            flexGrow: 1,
                            display: N.H.Flex,
                            flexDirection: N.J.Row
                        }, d.createElement("div", {
                            className: "recommended-channel__game",
                            title: t.props.gameName,
                            "data-a-target": "featured-channel-game-title"
                        }, d.createElement(N.V, {
                            ellipsis: !0,
                            flexGrow: 1
                        }, t.props.gameName))) : null
                    }, t.getSlideInContent = function() {
                        if (t.props.firstPageLoaded) return d.createElement(_.a, {
                            tabIndex: -1,
                            blurAfterClick: !0,
                            hideIcon: !0,
                            hideWhenFollowing: !0,
                            size: N.x.Small,
                            channelLogin: t.props.channelLogin,
                            "data-a-target": "featured-channel-follow-button"
                        })
                    }, t.state = {
                        hovered: !1
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return d.createElement(T, c.__assign({
                        collapsed: this.props.collapsed,
                        title: this.props.displayName,
                        titleElement: Object(E.a)(this.props.channelLogin, this.props.displayName),
                        avatarAlt: this.props.displayName,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: {
                            pathname: "/" + this.props.channelLogin,
                            state: {
                                content: "featured_channels",
                                medium: "twitch_socialcolumn"
                            }
                        },
                        metadataLeft: this.renderGame(),
                        slideInContent: this.getSlideInContent()
                    }, Object(w.a)(this.props)))
                }, t = c.__decorate([Object(k.c)("Featured Channel")], t)
            }(d.Component),
            I = Object(S.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(O),
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setRef = function(e) {
                        return t.ref = e
                    }, t.onMouseEnter = function() {
                        t.props.tooltipLayer.show({
                            from: t.ref,
                            label: t.props.title,
                            align: N._32.Center,
                            direction: N._33.Right
                        })
                    }, t.onMouseLeave = function() {
                        t.props.tooltipLayer.hide()
                    }, t.addEventListeners = function() {
                        t.ref && (t.ref.addEventListener("mouseenter", t.onMouseEnter), t.ref.addEventListener("mouseleave", t.onMouseLeave))
                    }, t.removeEventListeners = function() {
                        t.ref && (t.ref.removeEventListener("mouseenter", t.onMouseEnter), t.ref.removeEventListener("mouseleave", t.onMouseLeave))
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.addEventListeners()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.collapsed && !e.collapsed && this.removeEventListeners()
                }, t.prototype.componentDidUpdate = function(e) {
                    this.props.collapsed && !e.collapsed && this.addEventListeners()
                }, t.prototype.componentWillUnmount = function() {
                    this.removeEventListeners()
                }, t.prototype.render = function() {
                    var e, t = {
                            "side-nav-header": !0
                        },
                        n = this.props,
                        i = n.collapsed,
                        a = n.collapsedIcon,
                        r = n.title;
                    return e = a ? d.createElement(N._10, {
                        asset: a,
                        width: 20,
                        height: 20
                    }) : d.createElement(N._10, {
                        asset: N._11.FriendsSC,
                        width: 20,
                        height: 20
                    }), i ? d.createElement(N._19, {
                        className: u(t),
                        color: N.F.Alt2,
                        display: N.H.Flex,
                        justifyContent: N.U.Center,
                        alignItems: N.c.Center,
                        margin: {
                            top: 1
                        },
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        "data-a-target": "side-nav-header-collapsed",
                        refDelegate: this.setRef
                    }, e, d.createElement(N._19, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })) : d.createElement(N.V, {
                        className: u(t),
                        margin: {
                            top: 1,
                            x: 1
                        },
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        "data-a-target": "side-nav-header-expanded"
                    }, d.createElement(N._23, {
                        type: N._28.H5,
                        color: N.F.Alt
                    }, r), d.createElement(N._19, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    }))
                }, t
            }(d.Component),
            L = Object(k.c)("Side Nav Header", {
                autoReportInteractive: !0
            })(Object(C.c)()(D)),
            x = n("vKN/"),
            R = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getFeaturedChannels = function() {
                        if (t.props.data.loading || t.props.data.error || !t.props.data.featuredStreams || !(t.props.data.featuredStreams.length - 1)) return [];
                        return t.props.data.featuredStreams.filter(function(e) {
                            return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName
                        }).slice(0, 5).map(function(e, n) {
                            return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName && e.stream.broadcaster.id ? d.createElement(I, {
                                key: "featured-channels-" + e.stream.id,
                                id: e.stream.id,
                                displayName: e.stream.broadcaster.displayName,
                                gameName: e.stream.game ? e.stream.game.name : "",
                                profileImageURL: e.stream.broadcaster.profileImageURL,
                                collapsed: t.props.collapsed,
                                channelLogin: e.stream.broadcaster.login,
                                "data-a-id": "featured-channel-" + n,
                                "data-a-target": "featured-channel"
                            }) : null
                        })
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || !this.props.data.featuredStreams || this.props.latencyTracking.reportInteractive(Math.min(this.props.data.featuredStreams.length, 4))
                }, t.prototype.render = function() {
                    var e = Object(m.d)("Featured Channels", "FeaturedChannels");
                    return this.props.collapsed ? d.createElement(N.V, {
                        margin: {
                            bottom: 2
                        }
                    }, d.createElement(L, {
                        title: e,
                        collapsed: this.props.collapsed,
                        collapsedIcon: N._11.NavChannels
                    }), this.getFeaturedChannels()) : d.createElement(N.V, {
                        margin: {
                            bottom: 2
                        }
                    }, d.createElement(L, {
                        title: e
                    }), d.createElement(N.Q, {
                        fullWidth: !0
                    }, d.createElement("figure", null, d.createElement("svg", {
                        width: "240",
                        height: "100",
                        viewBox: "0 0 240 108"
                    }, d.createElement("g", {
                        fill: "none",
                        fillRule: "evenodd"
                    }, d.createElement("path", {
                        fill: "#D7CCEB",
                        d: "M123 56v8h-20V44h20v8l8-8h4v20h-4"
                    }), d.createElement("path", {
                        fill: "#4B367C",
                        d: "M158 30v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm-86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm0 46v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm17-23v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zM57 53v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm37 27l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8v-4zm0-57v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm34 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm0 61v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm19-31v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm-72 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8z"
                    }))))), d.createElement(N.V, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            bottom: 2
                        },
                        textAlign: N._24.Center
                    }, d.createElement(N._23, {
                        color: N.F.Alt2,
                        fontSize: N.L.Size6
                    }, Object(m.d)("Follow channels and easily access your favorites here. Here are a few you might like!", "FeaturedChannels"))), this.getFeaturedChannels())
                }, t = c.__decorate([Object(g.a)(x, {
                    options: function() {
                        return {
                            variables: {
                                language: m.n.intl.getLanguageCode()
                            }
                        }
                    }
                }), Object(k.c)("Featured Channels")], t)
            }(d.Component),
            F = Object(k.c)("No Online Friends", {
                autoReportInteractive: !0
            })(function(e) {
                var t = Object(m.d)("Online Friends", "NoOnlineFriends"),
                    n = Object(m.d)("Twitch is better together. Add some Friends to see who's online and chat!", "NoOnlineFriends"),
                    i = Object(m.d)("None of your Friends are online. Get out there and add more!", "NoOnlineFriends"),
                    a = e.hasOfflineFriends ? "online-friends-no-friends-online" : "online-friends-no-friends";
                return d.createElement(N.V, {
                    margin: {
                        bottom: 2
                    }
                }, d.createElement(L, {
                    title: t
                }), d.createElement(N.Q, {
                    margin: {
                        y: 1
                    },
                    fullWidth: !0
                }, d.createElement("figure", null, d.createElement("svg", {
                    width: "240",
                    height: "100",
                    viewBox: "0 0 240 108"
                }, d.createElement("defs", null, d.createElement("linearGradient", {
                    x1: "100%",
                    x2: "0%",
                    y1: "50%",
                    y2: "50%"
                }, d.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "0%"
                }), d.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "3.947%"
                }), d.createElement("stop", {
                    stopColor: "#4B367C",
                    offset: "12.281%"
                }), d.createElement("stop", {
                    stopColor: "#4B367C",
                    offset: "87.719%"
                }), d.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "96.053%"
                }), d.createElement("stop", {
                    stopColor: "#4B367C",
                    stopOpacity: "0",
                    offset: "100%"
                }))), d.createElement("g", {
                    fill: "none",
                    fillRule: "evenodd"
                }, d.createElement("path", {
                    fill: "#4B367C",
                    d: "M174.606 56h-13.21l-11.154 26.932c-.212.51-.806 1.1-1.31 1.31L127 93.326V87l-4-4h-6l-4 4v6.326L99.9 87.9 97 85v-7l-4-4h-6l-.666.666L78.604 56h-13.21L57.75 74.452c-.21.507-.787 1.087-1.298 1.3L44 80.908V78l-4-4h-6l-4 4v3.737L15.548 75.75c-.507-.21-1.087-.787-1.3-1.298L6.16 54.918c-.21-.507-.21-1.326 0-1.836l8.09-19.534c.21-.507.79-1.087 1.3-1.3l19.534-8.09c.507-.21 1.326-.21 1.836 0L48 28.748V41h12.838l4.556 11h13.21l7.454-18H100v-6l-3-3v-3.7l22.074-9.142c.51-.212 1.348-.21 1.852 0L143 21.3V25l-3 3v6h13.942l7.455 18h13.21l7.642-18.452c.21-.507.784-1.087 1.295-1.3l10.59-4.385L194 34h20v-6l10.452 4.25c.507.21 1.087.787 1.3 1.298l8.09 19.534c.21.507.21 1.326 0 1.836l-8.09 19.534c-.21.507-.79 1.087-1.3 1.3l-19.534 8.09c-.507.21-1.326.21-1.836 0L193 79.666V67h-13.838l-4.556-11zM119.08 28.16l-16.702 6.917c-.498.206-1.09.793-1.3 1.3l-6.92 16.704c-.205.5-.21 1.335 0 1.84l6.92 16.705c.205.498.792 1.09 1.3 1.3l16.703 6.92c.5.205 1.335.21 1.84 0l16.705-6.92c.498-.205 1.09-.792 1.3-1.3l6.92-16.703c.205-.497.21-1.33 0-1.84l-6.92-16.7c-.205-.5-.792-1.09-1.3-1.3l-16.703-6.92c-.497-.206-1.33-.21-1.84 0zm-83.12 10l-9.53 3.948c-.528.22-1.106.804-1.32 1.32l-3.948 9.53c-.218.528-.213 1.352 0 1.867l3.948 9.532c.22.526.804 1.105 1.32 1.318l9.53 3.948c.528.22 1.352.214 1.867 0l9.532-3.948c.523-.218 1.102-.804 1.315-1.32l3.948-9.53c.22-.528.214-1.35 0-1.867l-3.948-9.53c-.218-.528-.804-1.106-1.32-1.32l-9.53-3.948c-.528-.218-1.35-.213-1.867 0zm167.107.106l-9.532 3.948c-.527.218-1.106.804-1.32 1.32l-3.947 9.53c-.22.528-.214 1.352 0 1.867l3.948 9.535c.218.527.804 1.106 1.32 1.32l9.53 3.947c.528.22 1.352.215 1.867 0l9.532-3.947c.527-.218 1.106-.804 1.32-1.32l3.947-9.53c.22-.528.214-1.352 0-1.867l-3.948-9.532c-.218-.527-.804-1.106-1.32-1.32l-9.53-3.947c-.528-.22-1.352-.215-1.867 0z"
                }), d.createElement("path", {
                    fill: "#D7CCEB",
                    d: "M92 17l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm0 60l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm30 9l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm30-69l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm54 0l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zM39 77l2 2v5l-3 2v1h4l2 2v2H30v-2l2-2h4v-1l-3-2v-5l2-2h4zm137-7h14v10h-14V70zm5 2v6l5-3-5-3zM51 28h14v10H51V28zm5 2v6l5-3-5-3zm154 29l-4-4v4h-10V49h10v4l4-4h2v10h-2zM29 55l3-6h2l3 1 3-1h2l3 6v2l-2 2h-2l-2-2h-4l-2 2h-2l-2-2v-2zm10-2v1h1v-1h-1zm1 1v1h1v-1h-1zm1-1v1h1v-1h-1zm-1-1v1h1v-1h-1zm-7 1h-1v1h1v1h1v-1h1v-1h-1v-1h-1v1zm91-14l4 4v10l-6 4v2h8l4 4v4h-28v-4l4-4h8v-2l-6-4V43l4-4h8z"
                }))))), d.createElement(N.V, {
                    padding: {
                        x: 1
                    },
                    textAlign: N._24.Center
                }, d.createElement(N._23, {
                    color: N.F.Alt2,
                    fontSize: N.L.Size6,
                    "data-a-target": a
                }, e.hasOfflineFriends ? i : n)))
            }),
            P = Object(k.c)("Anon Side Nav", {
                autoReportInteractive: !0
            })(function(e) {
                return e.collapsed ? d.createElement(N.V, {
                    className: "anon-side-nav",
                    fullWidth: !0
                }, d.createElement(R, {
                    collapsed: e.collapsed
                })) : d.createElement(N.V, {
                    className: "anon-side-nav",
                    fullWidth: !0
                }, d.createElement(R, {
                    collapsed: e.collapsed
                }), !e.collapsed && d.createElement(F, null))
            });
        ! function(e) {
            e.ViewerCount = "VIEWER_COUNT", e.Relevance = "RELEVANCE"
        }(l || (l = {}));
        var U = n("6WAQ"),
            M = n("2o2f"),
            A = n("vH/s"),
            V = (n("fS5P"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.videos)
                        for (var t = 0; t < 3 && t < this.props.videos.length; t++) e.push(this.getVideoSummary(this.props.videos[t]));
                    return d.createElement(N.V, null, e, this.getAllRecentVideosLabel())
                }, t.prototype.getAllRecentVideosLabel = function() {
                    return d.createElement(N.T, {
                        linkTo: "/" + this.props.creatorLogin + "/videos/all",
                        key: "recentVideoLabel",
                        alpha: !0,
                        blurAfterClick: !0
                    }, d.createElement(N.V, {
                        textAlign: N._24.Center,
                        padding: .5
                    }, d.createElement(N._23, {
                        transform: N._27.Capitalize,
                        color: N.F.Base
                    }, Object(m.d)("See all recent videos", "OfflineFollowedChannelTooltip"))))
                }, t.prototype.getVideoSummary = function(e) {
                    return d.createElement(N.T, {
                        linkTo: "/videos/" + e.id,
                        key: "videoSumm-" + e.id,
                        alpha: !0,
                        blurAfterClick: !0
                    }, d.createElement(N.V, {
                        padding: {
                            top: .5,
                            bottom: .5
                        }
                    }, d.createElement(N.A, {
                        row: !0
                    }, d.createElement(N.C, {
                        imageSrc: e.previewThumbnailURL,
                        imageAlt: e.title,
                        size: N.D.Size8,
                        aspect: N.k.Aspect16x9
                    }), d.createElement(N.B, null, d.createElement(N.V, {
                        padding: {
                            left: 1,
                            right: 1
                        },
                        className: "offline-followed-channel-tooltip__video-body"
                    }, d.createElement(N._23, {
                        color: N.F.Base,
                        title: e.title,
                        lines: 2
                    }, e.title), d.createElement(N._23, {
                        color: N.F.Alt2,
                        "data-test-selector": "offline-followed-channel-tooltip-text"
                    }, Object(m.d)("{views, plural, one {{formattedViews} view} other {{formattedViews} views}}", {
                        views: e.viewCount,
                        formattedViews: Object(m.e)(e.viewCount)
                    }, "OnlineFollowedChannelTooltip")))))))
                }, t
            }(d.Component)),
            j = (n("ozx1"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    var e = null,
                        t = null;
                    switch (this.props.streamType) {
                        case M.a.Premiere:
                            e = d.createElement(N._10, {
                                asset: N._11.VideoPremiere,
                                type: N._12.Live,
                                width: 12,
                                height: 12
                            }), t = Object(m.d)("Video Premiere", "OnlineFollowedChannelTooltip");
                            break;
                        case M.a.WatchParty:
                        case M.a.Rerun:
                            e = d.createElement(N._10, {
                                asset: N._11.VideoRerun,
                                type: N._12.Alt2,
                                width: 12,
                                height: 12
                            }), t = Object(m.d)("Rerun", "OnlineFollowedChannelTooltip");
                            break;
                        default:
                            if (!this.props.collapsed) break;
                            e = d.createElement(N.X, {
                                size: N.Y.Small
                            }), t = Object(m.d)("Live", "OnlineFollowedChannelTooltip")
                    }
                    return d.createElement(N.V, {
                        className: "online-followed-channel-tooltip__body"
                    }, this.props.collapsed && d.createElement(N._23, {
                        color: N.F.Link,
                        ellipsis: !0
                    }, this.props.gameName ? this.props.channelDisplayName + " · " + this.props.gameName : this.props.channelDisplayName), d.createElement(N._23, {
                        color: N.F.Base,
                        lines: 2
                    }, this.props.streamTitle), e && d.createElement(N.V, {
                        display: N.H.Flex,
                        alignItems: N.c.Center
                    }, e, d.createElement(N.Q, {
                        padding: {
                            left: .5
                        }
                    }, d.createElement(N._23, {
                        color: N.F.Alt2,
                        type: N._28.Span
                    }, t, this.props.collapsed && this.props.viewership ? " | " + Object(m.d)("{viewers} viewers", {
                        viewers: Object(m.e)(this.props.viewership)
                    }, "OnlineFollowedChannelTooltip") : null))))
                }, t
            }(d.Component)),
            H = (n("TWH+"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e, t = this.getMetadataLeft(),
                        n = this.getTooltipContent(),
                        i = this.isChannelOffline(),
                        a = Object(E.a)(this.props.user.login, this.props.user.displayName, !0);
                    return !n && this.props.collapsed && (e = t.length > 0 && !i ? a + " - " + t : a), d.createElement(T, c.__assign({
                        avatarAlt: a,
                        avatarSrc: this.props.user.profileImageURL,
                        collapsed: this.props.collapsed,
                        linkTo: {
                            pathname: this.getChannelLink(),
                            state: {
                                content: A.PageviewContent.FollowedChannels,
                                medium: A.PageviewMedium.SideNav
                            }
                        },
                        metadataLeft: t,
                        metadataRight: this.getMetadataRight(),
                        onClick: this.props.onChannelClick,
                        offline: this.isChannelOffline(),
                        title: a,
                        titleElement: Object(E.a)(this.props.user.login, this.props.user.displayName),
                        tooltipLabel: this.props.collapsed && !this.props.premieresEnabled ? e : void 0,
                        tooltipContent: this.getTooltipContent()
                    }, Object(N._40)(this.props)))
                }, t.prototype.getMetadataLeft = function() {
                    return this.props.user.stream && this.props.user.stream.game ? this.props.user.stream.game.name : this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 && this.props.videoExperimentAssignment !== Me ? Object(m.d)("{numVideos, plural, one {{numVideos} new video} other {{numVideos} new videos}}", {
                        numVideos: this.props.recentChannelVideos.length
                    }, "FollowedChannel") : this.props.user.lastBroadcast && this.props.user.lastBroadcast.game && this.props.user.lastBroadcast.game.name && this.props.videoExperimentAssignment === Me ? this.props.user.lastBroadcast.game.name : ""
                }, t.prototype.getMetadataRight = function() {
                    return this.props.user.stream && this.props.user.stream.id ? d.createElement(N.V, {
                        display: N.H.Flex,
                        alignItems: N.c.Center
                    }, this.getLiveIndicator(), d.createElement(N.V, {
                        margin: {
                            left: .5
                        }
                    }, Object(m.e)(this.props.user.stream.viewersCount || 0))) : d.createElement(N._23, {
                        type: N._28.Span
                    }, Object(m.d)("Offline", "FollowedChannel"))
                }, t.prototype.getLiveIndicator = function() {
                    if (!this.props.user.stream || !this.props.user.stream.id) return null;
                    switch (this.props.user.stream.type) {
                        case M.a.Premiere:
                            return this.props.premieresEnabled ? d.createElement(N._10, {
                                asset: N._11.VideoPremiere,
                                type: N._12.Live,
                                width: 12,
                                height: 12
                            }) : d.createElement(N.X, {
                                size: N.Y.Small
                            });
                        case M.a.WatchParty:
                        case M.a.Rerun:
                            return this.props.premieresEnabled ? d.createElement(N._10, {
                                asset: N._11.VideoRerun,
                                type: N._12.Alt2,
                                width: 12,
                                height: 12
                            }) : d.createElement("span", {
                                className: "followed-channel__vodcast-live-indicator"
                            }, d.createElement(N.X, {
                                size: N.Y.Small
                            }));
                        default:
                            return d.createElement(N.X, {
                                size: N.Y.Small
                            })
                    }
                }, t.prototype.getTooltipContent = function() {
                    if (this.isChannelOffline()) {
                        if (this.props.videoExperimentAssignment === Me || !this.props.user.login) return;
                        return d.createElement(V, {
                            creatorLogin: this.props.user.login,
                            videos: this.props.recentChannelVideos
                        })
                    }
                    if (this.props.premieresEnabled) return d.createElement(j, {
                        streamType: this.props.user.stream && this.props.user.stream.type || M.a.Live,
                        streamTitle: this.props.user.stream && this.props.user.stream.title || "",
                        collapsed: this.props.collapsed,
                        channelDisplayName: this.props.user.displayName || "",
                        gameName: this.props.user.stream && this.props.user.stream.game && this.props.user.stream.game.name || void 0,
                        viewership: this.props.user.stream && this.props.user.stream.viewersCount || 0
                    })
                }, t.prototype.isChannelOffline = function() {
                    return !(this.props.user.stream && this.props.user.stream.id.length > 0)
                }, t.prototype.getChannelLink = function() {
                    return this.isChannelOffline() ? this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 && this.props.videoExperimentAssignment !== Me ? "/videos/" + this.props.recentChannelVideos[0].id : "/" + this.props.user.login + "/videos/all" : "/" + this.props.user.login
                }, t = c.__decorate([Object(k.c)("FollowedChannel")], t)
            }(d.Component)),
            B = (n("bBGx"), function(e) {
                var t = N.U.Between;
                return e.lessDisabled && (t = N.U.End), d.createElement(N.V, {
                    padding: 1,
                    display: N.H.Flex,
                    fullWidth: !0,
                    overflow: N._0.Hidden,
                    textAlign: N._24.Left,
                    justifyContent: t
                }, !e.lessDisabled && d.createElement("button", {
                    className: "side-nav-show-more-toggle__button",
                    onClick: e.onClickLess,
                    "data-a-target": "side-nav-show-less-button"
                }, Object(m.d)("Show less", "SideNavShowMoreToggleButton")), !e.moreDisabled && d.createElement("button", {
                    className: "side-nav-show-more-toggle__button",
                    onClick: e.onClickMore,
                    "data-a-target": "side-nav-show-more-button"
                }, Object(m.d)("Show more", "SideNavShowMoreToggleButton")))
            }),
            z = n("Ex+h"),
            W = n("l4QG"),
            q = "live",
            G = "rerun",
            Q = "offline",
            K = n("Hcc4"),
            $ = n("CF9R"),
            Z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        sortedFollows: [],
                        displayAmount: 5
                    }, t.fetchInterval = 0, t.hasRequestedTracking = !1, t.followedVideoDict = {}, t.sortFollowedChannels = function(e) {
                        if (e.data.loading || e.data.error || !e.data.currentUser || !e.data.currentUser.followedLiveUsers) return [];
                        var n = e.data.currentUser.followedLiveUsers.nodes.slice(),
                            i = (e.data.currentUser.follows.edges || []).map(function(e) {
                                return e.node
                            }),
                            a = (e.videoData && e.videoData.currentUser && e.videoData.currentUser.followedVideos && e.videoData.currentUser.followedVideos.edges || []).map(function(e) {
                                return e.node
                            });
                        t.followedVideoDict = function(e) {
                            var t = {},
                                n = {};
                            if (!e.length) return t;
                            var i = Date.now() - 6048e5;
                            return e.forEach(function(e) {
                                var a = e.owner && e.owner.id;
                                if (a && !n[e.owner.id])
                                    if (e.self && e.self.viewingHistory && e.self.viewingHistory.position) n[e.owner.id] = !0;
                                    else {
                                        var r = new Date(e.publishedAt).getTime();
                                        if (r && !(r < i)) {
                                            var o = t[a] || [];
                                            o.push(e), t[a] = o
                                        }
                                    }
                            }), t
                        }(a);
                        var o = r(n, i, t.followedVideoDict, e.sortByRelevance);
                        t.setState({
                            sortedFollows: o
                        })
                    }, t.getFollowedChannels = function() {
                        return t.props.data.loading || t.props.data.error ? [] : t.state.sortedFollows.slice(0, t.state.displayAmount).map(function(e, n) {
                            if (!e.id) return null;
                            var i = t.onChannelClick.bind(t, n, e);
                            return d.createElement(H, {
                                key: "followed-channels-" + e.id,
                                user: e,
                                recentChannelVideos: t.followedVideoDict[e.id],
                                collapsed: t.props.collapsed,
                                "data-a-id": "followed-channel-" + n,
                                "data-a-target": "followed-channel",
                                onChannelClick: i,
                                premieresEnabled: t.props.premieresEnabled,
                                videoExperimentAssignment: t.props.videoExperimentAssignment
                            })
                        })
                    }, t.getShowMore = function() {
                        return t.props.collapsed || !t.state.sortedFollows || t.state.sortedFollows.length <= 5 ? null : d.createElement(B, {
                            onClickMore: t.onClickShowMore,
                            onClickLess: t.onClickShowLess,
                            lessDisabled: t.state.displayAmount <= 5,
                            moreDisabled: t.state.displayAmount >= t.state.sortedFollows.length
                        })
                    }, t.onClickShowMore = function() {
                        var e = Math.min(t.state.displayAmount + 10, t.state.sortedFollows.length);
                        t.setState({
                                displayAmount: e
                            }),
                            function(e) {
                                m.n.tracking.track(A.SpadeEventType.SideNavLoadMore, {
                                    displayed_channel_count: e
                                })
                            }(e)
                    }, t.onClickShowLess = function() {
                        var e = 10 * (Math.floor((t.state.displayAmount + 4) / 10) - 1) + 5;
                        t.setState({
                            displayAmount: e
                        })
                    }, t.onChannelClick = function(e, t) {
                        ! function(e, t) {
                            m.n.tracking.track(A.SpadeEventType.SideNavChannelClick, {
                                click_target_state: s(t),
                                click_target_index: e
                            })
                        }(e, t)
                    }, t.isRenderReady = function() {
                        return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser) && (!t.props.data.currentUser.follows.edges || 0 === t.props.data.currentUser.follows.edges.length || t.props.data.currentUser.follows.edges.length > 0 && t.state.sortedFollows.length > 0)
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.isRenderReady() && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.sortFollowedChannels(e)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.fetchInterval)
                }, t.prototype.render = function() {
                    var e = !this.props.data.loading && !this.props.data.error && this.props.data.currentUser && (!this.props.data.currentUser.follows.edges || 0 === this.props.data.currentUser.follows.edges.length);
                    return this.props.data.loading || this.props.data.error || !this.props.data.currentUser || this.hasRequestedTracking || (this.hasRequestedTracking = !0, function(e, t, n) {
                        var i = m.b.get("sidenav_follow_data_sample_rate", 1e4);
                        if (!Math.floor(Math.random() * i)) {
                            var a = {
                                is_collapsed: n,
                                followed_channels_total: 0
                            };
                            if (!t && (a.followed_channels_total = e.follows.edges ? e.follows.edges.length : 0, e.followedLiveUsers && e.followedLiveUsers.nodes)) {
                                var r = e.followedLiveUsers.nodes.reduce(function(e, t) {
                                    return s(t) === G ? e + 1 : e
                                }, 0);
                                a.followed_channels_live_stream = e.followedLiveUsers.nodes.length - r, a.followed_channels_rerun = r
                            }
                            m.n.tracking.track(A.SpadeEventType.SideNavDetails, a)
                        }
                    }(this.props.data.currentUser, e || !1, this.props.collapsed)), e ? d.createElement(R, {
                        collapsed: this.props.collapsed
                    }) : d.createElement(N.V, {
                        className: "followed-channels"
                    }, d.createElement(L, {
                        title: Object(m.d)("Followed Channels", "FollowedChannels"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: N._11.Heart
                    }), this.getFollowedChannels(), this.getShowMore())
                }, t = c.__decorate([Object(g.a)($, {
                    options: function(e) {
                        return {
                            pollInterval: 6e5,
                            variables: {
                                limit: 100,
                                cursor: "",
                                sort: e.sortByRelevance ? l.Relevance : l.ViewerCount
                            }
                        }
                    }
                }), Object(g.a)(K, {
                    options: function(e) {
                        return {
                            variables: {
                                videoTypes: e.videoExperimentAssignment === Ae ? [U.a.Archive, U.a.Highlight, U.a.Upload] : [U.a.Highlight, U.a.Upload]
                            }
                        }
                    },
                    name: "videoData",
                    skip: function(e) {
                        return e.videoExperimentAssignment === Me
                    }
                }), Object(k.c)("Followed Channels")], t)
            }(d.Component),
            Y = n("WIs4"),
            J = n("C8Io"),
            X = n("mqvl"),
            ee = n("HZww"),
            te = n("2KeS"),
            ne = n("uXDg"),
            ie = n("QPF3"),
            ae = n("4Dne"),
            re = n("iPhu"),
            oe = n("2Hj/"),
            se = n("emkL"),
            le = n("m4HT"),
            ce = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderJoinButton = function() {
                        var e = null,
                            n = Object(oe.d)(t.props.user.login, t.props.activity);
                        return n && (e = {
                            pathname: n,
                            state: {
                                content: A.PageviewContent.Presence,
                                medium: A.PageviewMedium.SideNav
                            }
                        }), d.createElement(se.a, {
                            link: e,
                            onClick: t.handleJoinClick,
                            "data-a-target": "friend-join-button"
                        })
                    }, t.handleClick = function(e) {
                        e.preventDefault();
                        var n = Object(le.a)(t.props.user.id, t.props.currentUserID);
                        t.props.openThread(n), Object(re.c)({
                            force: !0,
                            timeout: 0
                        })
                    }, t.handleJoinClick = function() {
                        Object(ae.b)({
                            context: ae.a.FriendsListButton,
                            friendActivity: t.props.activity,
                            friendLogin: t.props.user.login
                        })
                    }, t.getPresenceStatus = function() {
                        switch (t.props.availability) {
                            case W.a.Online:
                                return 3;
                            case W.a.Idle:
                            case W.a.Away:
                                return 5;
                            case W.a.Busy:
                                return 4;
                            default:
                                return
                        }
                    }, t.onMouseEnter = function() {
                        Object(re.d)({
                            id: t.props.user.id,
                            direction: N.q.Right,
                            ref: t.ref
                        })
                    }, t.onMouseLeave = function() {
                        return Object(re.c)()
                    }, t.setRefDelegate = function(e) {
                        t.ref = e
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return d.createElement("div", {
                        ref: this.setRefDelegate,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave
                    }, d.createElement(T, c.__assign({
                        title: this.props.user.displayName,
                        titleElement: Object(E.a)(this.props.user.login, this.props.user.displayName),
                        avatarAlt: this.props.user.displayName,
                        avatarSrc: this.props.user.profileImageURL,
                        avatarPresence: !0,
                        presenceStatus: this.getPresenceStatus(),
                        onClick: this.handleClick,
                        linkTo: "#",
                        metadataLeft: d.createElement(oe.b, {
                            availability: this.props.availability,
                            activity: this.props.activity,
                            condensed: !0
                        }),
                        slideInContent: this.renderJoinButton(),
                        collapsed: this.props.collapsed
                    }, Object(N._40)(this.props))))
                }, t = c.__decorate([Object(k.c)("OnlineFriend")], t)
            }(d.Component),
            ue = Object(S.a)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(te.bindActionCreators)({
                    openThread: function(e) {
                        return Object(ne.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ie.a)())
                    }
                }, e)
            })(ce),
            de = n("TMvI"),
            pe = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.defaultInitialRenderCount = 15, n.sortTimeout = 0, n.onMouseEnter = function() {
                        n.state.hasInteracted || n.setState({
                            hasInteracted: !0
                        })
                    }, n.renderOnlineFriends = function() {
                        if (!n.state.sortedFriends.length) return [];
                        return (n.state.hasInteracted ? n.state.sortedFriends : n.state.sortedFriends.slice(0, n.getDisplayCount())).map(function(e, t) {
                            return e.node.id ? d.createElement(ue, {
                                activity: e.activity,
                                availability: e.availability,
                                key: "online-friends-" + e.node.id,
                                collapsed: n.props.collapsed,
                                user: e.node,
                                "data-a-id": "online-friend-" + t,
                                "data-a-target": "online-friend",
                                "data-a-name": "online-friend-" + e.node.login
                            }) : null
                        })
                    }, n.getDisplayCount = function() {
                        return n.state.hasInteracted ? n.state.sortedFriends.length : Math.min(n.defaultInitialRenderCount, n.state.sortedFriends.length)
                    }, n.state = {
                        sortedFriends: [],
                        hasSorted: !1,
                        initialRenderCount: n.defaultInitialRenderCount,
                        hasInteracted: !1
                    }, n
                }
                return c.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.sortTimeout && (clearTimeout(this.sortTimeout), this.sortTimeout = 0), this.sortTimeout = setTimeout(function() {
                        var n = !!e.friends && e.friends.length > 0;
                        t.setState({
                            sortedFriends: i(e.friends),
                            hasSorted: n
                        }), t.props.latencyTracking.reportInteractive(t.getDisplayCount())
                    }, 100)
                }, t.prototype.componentDidMount = function() {
                    this.props.loading || this.props.errored || !this.props.friends || this.setState({
                        sortedFriends: i(this.props.friends),
                        hasSorted: !0
                    })
                }, t.prototype.render = function() {
                    return this.props.friends && 0 !== this.props.friends.length || this.props.errored || this.props.loading || this.props.collapsed ? !this.props.errored && !this.props.loading && this.props.friends && this.state.hasSorted && this.props.friends.length > 0 && 0 === this.state.sortedFriends.length && !this.props.collapsed ? d.createElement(F, {
                        hasOfflineFriends: !0
                    }) : d.createElement("div", {
                        className: "online-friends",
                        onMouseEnter: this.onMouseEnter,
                        "data-a-target": "online-friends-list"
                    }, d.createElement(L, {
                        title: Object(m.d)("Online Friends", "OnlineFriends"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: N._11.FriendsSC
                    }), this.renderOnlineFriends()) : d.createElement(F, null)
                }, t = c.__decorate([Object(Y.a)(function(e) {
                    return {
                        query: de,
                        skip: !e.friends || 0 === e.friends.length,
                        topic: Object(ee.f)(e.selfID || ""),
                        type: J.c.Presence,
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.friends) return n;
                            for (var i = -1, a = 0; a < n.currentUser.friends.edges.length; a++) {
                                if (+n.currentUser.friends.edges[a].node.id === t.data.user_id) {
                                    i = a;
                                    break
                                }
                            }
                            if (i >= 0) {
                                var r = n.currentUser.friends.edges[i];
                                r.availability = t.data.availability.toUpperCase();
                                var o = "$User:" + e.selfID + ".friends.edges." + i + ".activity";
                                r.activity = Object(X.a)(t.data.activity, o)
                            }
                            return n
                        }
                    }
                }), Object(Y.a)(function(e) {
                    return {
                        query: de,
                        skip: !e.friends || 0 === e.friends.length,
                        topic: Object(ee.b)(e.selfID || ""),
                        mutator: function(t, n) {
                            if (!n.currentUser || !n.currentUser.friends) return n;
                            var i = t.change === J.a.Removed || t.change === J.a.SelfRemoved;
                            if ((t.change === J.a.Accepted || t.change === J.a.SelfAccepted) && setTimeout(function() {
                                    e && e.refetch && e.refetch()
                                }), !i) return n;
                            for (var a = -1, r = t.change === J.a.SelfRemoved, o = 0; o < n.currentUser.friends.edges.length; o++) {
                                if (n.currentUser.friends.edges[o].node.id === (r ? t.target_user_id : t.user_id)) {
                                    a = o;
                                    break
                                }
                            }
                            return a >= 0 && n.currentUser.friends.edges.splice(a, 1), n
                        }
                    }
                }), Object(k.c)("OnlineFriends")], t)
            }(d.Component),
            me = n("HM6l"),
            he = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getSlideInContent = function() {
                        if (t.props.firstPageLoaded) return d.createElement(_.a, {
                            tabIndex: -1,
                            hideIcon: !0,
                            hideWhenFollowing: !0,
                            size: N.x.Small,
                            channelLogin: t.props.login,
                            "data-a-target": "recommended-channel-follow-button"
                        })
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(E.a)(this.props.login, this.props.displayName, !0),
                        t = this.props.gameName.length > 0 ? e + " - " + this.props.gameName : e;
                    return d.createElement(T, c.__assign({
                        title: e,
                        titleElement: Object(E.a)(this.props.login, this.props.displayName),
                        avatarAlt: e,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: {
                            pathname: "/" + this.props.login,
                            state: {
                                content: A.PageviewContent.RecommendedChannels,
                                medium: A.PageviewMedium.SideNav,
                                content_index: this.props.contentIndex
                            }
                        },
                        metadataLeft: this.props.gameName,
                        slideInContent: this.getSlideInContent(),
                        collapsed: this.props.collapsed,
                        tooltipLabel: t
                    }, Object(N._40)(this.props)))
                }, t = c.__decorate([Object(k.c)("RecommendedChannel")], t)
            }(d.Component),
            ge = Object(S.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(he),
            fe = n("DMR/"),
            ve = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasLoadedMore: !1
                    }, t.getRecommendedChannels = function() {
                        return t.props.data.currentUser.recommendations.liveRecommendations.nodes.slice(0, t.getNodesToDisplayCount()).map(function(e, n) {
                            return e.broadcaster && e.broadcaster.id && e.broadcaster.login ? d.createElement(ge, {
                                id: e.broadcaster.id,
                                key: "recommended-channels-" + e.id,
                                collapsed: t.props.collapsed,
                                "data-a-id": "recommended-channel-" + n,
                                "data-a-target": "recommended-channel",
                                displayName: e.broadcaster.displayName,
                                contentIndex: n,
                                gameName: e.game && e.game.name || "",
                                login: e.broadcaster.login,
                                profileImageURL: e.broadcaster.profileImageURL
                            }) : null
                        })
                    }, t.hasDataToDisplay = function() {
                        return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser || 0 === t.props.data.currentUser.recommendations.liveRecommendations.nodes.length)
                    }, t.getNodesToDisplayCount = function() {
                        return t.hasDataToDisplay ? t.state.hasLoadedMore ? t.props.data.currentUser.recommendations.liveRecommendations.nodes.length : Math.min(t.props.data.currentUser.recommendations.liveRecommendations.nodes.length, 3) : 0
                    }, t.onClickShowMore = function() {
                        t.setState({
                            hasLoadedMore: !0
                        })
                    }, t.onClickShowLess = function() {
                        t.setState({
                            hasLoadedMore: !1
                        })
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (!this.hasDataToDisplay()) return null;
                    var e = null;
                    return !this.props.collapsed && this.props.data.currentUser.recommendations.liveRecommendations.nodes.length > 3 && (e = d.createElement(B, {
                        onClickMore: this.onClickShowMore,
                        onClickLess: this.onClickShowLess,
                        lessDisabled: !this.state.hasLoadedMore,
                        moreDisabled: this.state.hasLoadedMore
                    })), d.createElement("div", {
                        className: "recommended-channels"
                    }, d.createElement(L, {
                        title: Object(m.d)("Recommended Channels", "RecommendedChannels"),
                        collapsed: this.props.collapsed,
                        collapsedIcon: N._11.NavChannels
                    }), this.getRecommendedChannels(), e)
                }, t = c.__decorate([Object(g.a)(fe, {
                    options: function() {
                        return {
                            variables: {
                                first: 10,
                                recID: Object(me.a)(),
                                language: ""
                            }
                        }
                    }
                }), Object(k.c)("RecommendedChannels")], t)
            }(d.Component),
            be = n("oIkB"),
            ye = n("Vprp"),
            ke = n("UhzT"),
            Se = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.getSlideInContent = function() {
                        if (!t.state.working) {
                            var e = Object(m.d)("Add Friend", "RecommendedFriend");
                            return d.createElement(N.v, {
                                tabIndex: -1,
                                ariaLabel: e,
                                type: N.w.Primary,
                                icon: N._11.AddFriend,
                                size: N.x.Small,
                                onClick: t.onClickAddFriend,
                                "data-a-target": "recommended-friend-add-button"
                            })
                        }
                    }, t.handleClick = function(e) {
                        e.preventDefault();
                        var n = Object(le.a)(t.props.user.id, t.props.currentUserID);
                        t.props.openThread(n), Object(re.c)({
                            force: !0,
                            timeout: 0
                        })
                    }, t.onClickAddFriend = function() {
                        t.setState({
                            working: !0
                        }, function() {
                            var e = Object(be.a)({
                                targetID: t.props.user.id
                            });
                            t.props.createFriendRequest(e).then(t.props.onRecommendationChanged).catch(function() {
                                return t.setState({
                                    working: !1
                                })
                            })
                        })
                    }, t.onMouseEnter = function() {
                        Object(re.d)({
                            id: t.props.user.id,
                            direction: N.q.Right,
                            ref: t.ref
                        })
                    }, t.onMouseLeave = function() {
                        return Object(re.c)()
                    }, t.setRefDelegate = function(e) {
                        t.ref = e
                    }, t.state = {
                        working: !1
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return d.createElement("div", {
                        ref: this.setRefDelegate,
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave
                    }, d.createElement(T, c.__assign({
                        title: this.props.user.displayName,
                        titleElement: Object(E.a)(this.props.user.login, this.props.user.displayName),
                        avatarAlt: this.props.user.displayName,
                        avatarSrc: this.props.user.profileImageURL,
                        onClick: this.handleClick,
                        linkTo: "#",
                        metadataLeft: "",
                        collapsed: this.props.collapsed,
                        slideInContent: this.getSlideInContent()
                    }, Object(N._40)(this.props))))
                }, t = c.__decorate([Object(g.a)(ye, {
                    name: "createFriendRequest"
                }), Object(g.a)(ke, {
                    name: "dismissFriendRecommendation"
                }), Object(k.c)("RecommendedFriend")], t)
            }(d.Component),
            _e = Object(S.a)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(te.bindActionCreators)({
                    openThread: function(e) {
                        return Object(ne.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ie.a)())
                    }
                }, e)
            })(Se),
            we = n("+R+X"),
            Ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRecommendedFriends = function() {
                        return t.props.data.currentUser.recommendations.friends.slice(0, t.getDisplayCount(t.props)).map(function(e, n) {
                            return e.user.id ? d.createElement(_e, {
                                key: "recommended-friends-" + e.user.id,
                                user: e.user,
                                collapsed: t.props.collapsed,
                                onRecommendationChanged: t.onRecommendationDataChanged,
                                "data-a-id": "recommended-friend-" + n,
                                "data-a-target": "recommended-friend"
                            }) : null
                        })
                    }, t.getDisplayCount = function(e) {
                        return Math.min(5, e.data.currentUser.recommendations.friends.length)
                    }, t.onRecommendationDataChanged = function() {
                        t.props.data.refetch()
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.collapsed || this.props.data.loading || this.props.data.error || 0 === this.props.data.currentUser.recommendations.friends.length ? null : d.createElement("div", {
                        className: "recommended-friends"
                    }, d.createElement(L, {
                        title: Object(m.d)("Recommended Friends", "RecommendedFriends")
                    }), this.getRecommendedFriends())
                }, t = c.__decorate([Object(g.a)(we), Object(k.c)("RecommendedFriends")], t)
            }(d.Component),
            Ce = n("5LoI"),
            Ne = n("MAZT"),
            Te = n("4ik2"),
            Oe = n("iXJ1"),
            Ie = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.handleClick = function(e) {
                        e.preventDefault();
                        var n = Object(le.a)(t.props.id, t.props.currentUserID);
                        t.props.openThread(n)
                    }, t.getSlideInContent = function() {
                        if (!t.state.working) {
                            if (t.state.requested) {
                                var e = Object(m.d)("Cancel Request", "SearchFriendResult");
                                return d.createElement(N.v, {
                                    ariaLabel: e,
                                    type: N.w.Primary,
                                    icon: N._11.Close,
                                    size: N.x.Small,
                                    onClick: t.onClickCancelRequest,
                                    "data-a-target": "search-result-cancel-button"
                                })
                            }
                            var n = Object(m.d)("Add Friend", "SearchFriendResult");
                            return d.createElement(N.v, {
                                ariaLabel: n,
                                type: N.w.Primary,
                                icon: N._11.AddFriend,
                                size: N.x.Small,
                                onClick: t.onClickAddFriend,
                                "data-a-target": "search-result-add-button"
                            })
                        }
                    }, t.onClickAddFriend = function() {
                        t.setState({
                            working: !0
                        }, function() {
                            t.props.createFriendRequest(Object(be.a)({
                                targetID: t.props.id
                            })).then(function() {
                                t.setState({
                                    working: !1,
                                    requested: !0
                                })
                            }).catch(function() {
                                t.setState({
                                    working: !1
                                })
                            })
                        })
                    }, t.onClickCancelRequest = function() {
                        t.setState({
                            working: !0
                        }, function() {
                            t.props.cancelFriendRequest(Object(be.a)({
                                targetID: t.props.id
                            })).then(function() {
                                t.setState({
                                    working: !1,
                                    requested: !1
                                })
                            }).catch(function() {
                                t.setState({
                                    working: !1
                                })
                            })
                        })
                    }, t.state = {
                        working: !1,
                        requested: !1
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    return d.createElement(T, c.__assign({
                        title: this.props.displayName,
                        titleElement: Object(E.a)(this.props.login, this.props.displayName),
                        avatarAlt: this.props.displayName,
                        avatarSrc: this.props.profileImageURL,
                        linkTo: "#",
                        onClick: this.handleClick,
                        slideInContent: this.getSlideInContent(),
                        collapsed: this.props.collapsed
                    }, Object(w.a)(this.props)))
                }, t = c.__decorate([Object(g.a)(Oe, {
                    name: "createFriendRequest"
                }), Object(g.a)(Te, {
                    name: "cancelFriendRequest"
                }), Object(k.c)("Search Friend Result")], t)
            }(d.Component),
            De = Object(S.a)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            }, function(e) {
                return Object(te.bindActionCreators)({
                    openThread: function(e) {
                        return Object(ne.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(ie.a)())
                    }
                }, e)
            })(Ie),
            Le = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.inputTimeout = 0, n.renderFilteredFriends = function() {
                        return n.state.filteredFriends && 0 !== n.state.filteredFriends.length ? n.state.filteredFriends.filter(function(e) {
                            return null !== e.node.id
                        }).map(function(e, t) {
                            return d.createElement(ue, {
                                activity: e.activity,
                                availability: e.availability,
                                key: "friend-search-results-" + e.node.id,
                                collapsed: n.props.collapsed,
                                user: e.node,
                                "data-a-id": "friend-search-result-" + t,
                                "data-a-target": "friend-search-result"
                            })
                        }) : []
                    }, n.renderSearchResults = function() {
                        var e = n.state.searchResults;
                        return e && e.users && 0 !== e.users.totalHits ? e.users.hits.map(function(e, t) {
                            return d.createElement(De, {
                                id: e.objectID,
                                displayName: e.name,
                                login: e.login,
                                profileImageURL: e.profile_image,
                                key: "search-results-" + e.objectID,
                                collapsed: n.props.collapsed,
                                "data-a-id": "search-result-" + t,
                                "data-a-target": "search-result"
                            })
                        }) : []
                    }, n.renderNoResults = function() {
                        return d.createElement(N.V, {
                            padding: {
                                x: 1,
                                y: .5
                            }
                        }, d.createElement(N._23, {
                            color: N.F.Alt2
                        }, Object(m.d)('Sorry, we couldn\'t find anyone named "{user}"', {
                            user: n.props.searchInput
                        }, "SearchFriendResult")))
                    }, n.trySearchAndFilter = function(e) {
                        if (e.searchInput && 0 === e.searchInput.length) return clearTimeout(n.inputTimeout), void(n.inputTimeout = 0);
                        clearTimeout(n.inputTimeout), n.inputTimeout = setTimeout(function() {
                            if (n.search(e.searchInput), e.friends && e.searchInput) {
                                var t = e.searchInput || "",
                                    i = {},
                                    a = e.friends.filter(function(e) {
                                        var n = (e.node.displayName || e.node.login || "").toLowerCase().includes(t.toLowerCase());
                                        return n && (i[e.node.login] = !0), n
                                    });
                                n.setState({
                                    filteredFriends: a,
                                    filterFriendsByLogin: i
                                })
                            }
                        }, 200)
                    }, n.state = {
                        searching: !0
                    }, n.searchClient = new Ne.a(m.a.algoliaApplicationID, m.a.algoliaAPIKey), n
                }
                return c.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.searchInput !== e.searchInput && this.trySearchAndFilter(e)
                }, t.prototype.componentDidMount = function() {
                    this.trySearchAndFilter(this.props)
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.inputTimeout), this.inputTimeout = 0
                }, t.prototype.render = function() {
                    var e = null,
                        t = !this.state.filteredFriends || 0 === this.state.filteredFriends.length,
                        n = !this.state.searchResults || !this.state.searchResults.users || 0 === this.state.searchResults.users.hits.length;
                    return e = !this.state.searching && t && n ? this.renderNoResults() : [this.renderFilteredFriends(), this.renderSearchResults()], d.createElement("div", {
                        className: "recommended-friends"
                    }, d.createElement(L, {
                        title: Object(m.d)("Results", "SearchFriendResults")
                    }), e)
                }, t.prototype.search = function(e) {
                    return c.__awaiter(this, void 0, void 0, function() {
                        var t, n = this;
                        return c.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return e ? (this.setState({
                                        searching: !0
                                    }), [4, this.searchClient.queryForType(Ce.a.Users, e, Object(me.a)(), {
                                        hitsPerPage: 10
                                    })]) : [2];
                                case 1:
                                    return t = i.sent(), this.inputTimeout && e === this.props.searchInput && (t && t.users && (t.users.hits = t.users.hits.filter(function(e) {
                                        return n.state.filterFriendsByLogin && !n.state.filterFriendsByLogin[e.login]
                                    })), this.setState({
                                        searchResults: t,
                                        searching: !1
                                    })), [2]
                            }
                        })
                    })
                }, t = c.__decorate([Object(k.c)("Search Friend Results")], t)
            }(d.Component),
            xe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleInputChange = function(e) {
                        t.props.onInputChange(e.target.value)
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    return this.props.collapsed ? null : d.createElement(N._19, {
                        borderTop: !0,
                        padding: 1
                    }, d.createElement(N._13, {
                        id: "side-nav.find-friends",
                        placeholder: Object(m.d)("Search to Add Friends", "SearchFriendsInput"),
                        onChange: this.handleInputChange,
                        "data-a-target": "side-nav-search-input"
                    }))
                }, t
            }(d.Component),
            Re = n("/Vp/");
        n("vQuK");
        n.d(t, "d", function() {
            return Fe
        }), n.d(t, "b", function() {
            return Me
        }), n.d(t, "a", function() {
            return Ae
        }), n.d(t, "c", function() {
            return He
        });
        var Fe = 1200,
            Pe = "treatment",
            Ue = "control",
            Me = "none",
            Ae = "all_content",
            Ve = "no_archives",
            je = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    n.handleToggleVisibility = function() {
                        var e = n.getLayoutCache();
                        n.props.collapsed ? (n.props.expandSideNav(), e.resource.isSocialColumnClosedByUserAction = !1) : (n.props.collapseSideNav(), e.resource.isSocialColumnClosedByUserAction = !0), m.k.set(m.n.config.layoutCacheKey, e), Object(b.c)({
                            element: b.a.SocialColumn,
                            action: n.props.collapsed ? b.b.Open : b.b.Close
                        })
                    }, n.collapseOnBreakpoint = function() {
                        var e = window.innerWidth;
                        e < Fe && !n.state.forceCollapsed ? n.setState({
                            forceCollapsed: !0
                        }) : e >= Fe && n.state.forceCollapsed && n.setState({
                            forceCollapsed: !1
                        }), n.resetAnimationState()
                    }, n.handleWindowResize = function() {
                        n.resizeAnimationFrame || (n.resizeAnimationFrame = requestAnimationFrame(n.collapseOnBreakpoint))
                    }, n.resetAnimationState = function() {
                        n.resizeAnimationFrame = null
                    }, n.onHistoryChange = function(e) {
                        var t = n.props.isLoggedIn,
                            i = Object(Re.a)({
                                isLoggedIn: t,
                                location: e
                            });
                        i !== n.state.hideSideNav && n.setState({
                            hideSideNav: i
                        })
                    }, n.onSearchInputChange = function(e) {
                        n.setState({
                            searchInput: e
                        })
                    }, n.reportInteractive = function() {
                        n.props.isLoggedIn && (n.props.data.loading || n.props.data.error) || n.props.latencyTracking.reportInteractive()
                    }, n.getRelevanceSortingAssignment = function(e) {
                        switch (e) {
                            case Pe:
                                return !0;
                            case Ue:
                            default:
                                return !1
                        }
                    }, n.getVideoAssignment = function(e) {
                        switch (e) {
                            case Me:
                            case Ae:
                            case Ve:
                                return e;
                            default:
                                return Me
                        }
                    };
                    var i = t.isLoggedIn,
                        a = t.location;
                    return n.state = {
                        hideSideNav: Object(Re.a)({
                            isLoggedIn: i,
                            location: a
                        }),
                        forceCollapsed: !1,
                        videoExperimentAssignment: Me,
                        premieresEnabled: !1,
                        sortByRelevance: !1
                    }, n
                }
                return c.__extends(t, e), t.prototype.componentWillMount = function() {
                    return c.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return c.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return [4, m.n.experiments.getAssignment("TWILIGHT_VIDEOS_IN_SIDENAV")];
                                case 1:
                                    return e = i.sent(), [4, m.n.experiments.getAssignment("TWILIGHT_PREMIERE_UPLOAD_FLOW")];
                                case 2:
                                    return t = i.sent(), [4, m.n.experiments.getAssignment("TWILIGHT_AML_RANKING_FOLLOWS")];
                                case 3:
                                    return n = i.sent(), this.setState({
                                        videoExperimentAssignment: this.getVideoAssignment(e),
                                        premieresEnabled: "yes" === t,
                                        sortByRelevance: this.getRelevanceSortingAssignment(n)
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.componentDidMount = function() {
                    this.reportInteractive(), this.historyUnlisten = m.n.history.listen(this.onHistoryChange), window.addEventListener("resize", this.handleWindowResize), this.collapseOnBreakpoint()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.collapsed && e.collapsed && this.state.searchInput && this.state.searchInput.length > 0 && this.setState({
                        searchInput: ""
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten(), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.handleWindowResize)
                }, t.prototype.render = function() {
                    var e = this.props.collapsed || this.state.forceCollapsed,
                        t = u("side-nav", {
                            "side-nav--collapsed": e
                        }),
                        n = {
                            "side-nav__toggle-visibility": !0,
                            "side-nav__toggle-visibility--open": e
                        },
                        i = d.createElement(N.Q, {
                            position: N._4.Absolute,
                            flexGrow: 0,
                            flexShrink: 0,
                            display: this.state.forceCollapsed ? N.H.Hide : N.H.Block,
                            className: u(n)
                        }, d.createElement("button", {
                            onClick: this.handleToggleVisibility
                        }, d.createElement(N.Q, {
                            className: "side-nav__toggle-visibility-icon",
                            position: N._4.Absolute
                        }, d.createElement(N._23, {
                            type: N._28.Span
                        }, d.createElement(N._10, {
                            asset: N._11.GlyphArrDown
                        })))));
                    if (!this.props.isLoggedIn) return this.state.hideSideNav ? null : d.createElement(N.V, {
                        className: t,
                        flexShrink: 0,
                        flexGrow: 0,
                        fullHeight: !0,
                        position: N._4.Relative
                    }, d.createElement(N.V, {
                        className: Object(v.c)(f.a.Dark),
                        flexShrink: 0,
                        fullWidth: !0,
                        fullHeight: !0
                    }, d.createElement(N._19, {
                        borderRight: !0,
                        className: "side-nav__theme-wrapper",
                        flexShrink: 0,
                        flexGrow: 1,
                        flexDirection: N.J.Column,
                        flexWrap: N.K.NoWrap,
                        fullWidth: !0,
                        fullHeight: !0,
                        display: N.H.Flex,
                        position: N._4.Relative
                    }, d.createElement(N.V, {
                        flexWrap: N.K.NoWrap,
                        fullHeight: !0,
                        display: N.H.Flex,
                        position: N._4.Relative,
                        fullWidth: !0
                    }, d.createElement(N.Q, {
                        flexGrow: 1,
                        fullWidth: !0
                    }, d.createElement(h.b, {
                        suppressScrollX: !0
                    }, d.createElement(P, {
                        collapsed: e
                    })))))), i);
                    var a = this.state.searchInput && this.state.searchInput.length > 0 && !e,
                        r = null,
                        o = this.props.data && !this.props.data.error && !this.props.data.loading && this.props.data.currentUser,
                        s = o && o.friends ? o.friends.edges : [];
                    a && (r = d.createElement(N.Q, {
                        position: N._4.Absolute,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0
                    }, d.createElement(h.b, {
                        className: "side-nav__overlay-wrapper",
                        suppressScrollX: !0
                    }, d.createElement(Le, {
                        searchInput: this.state.searchInput,
                        friends: s,
                        key: "search-friend-results",
                        collapsed: e
                    }))));
                    var l = o ? o.id : "";
                    return d.createElement(N.V, {
                        className: t,
                        flexShrink: 0,
                        fullHeight: !0,
                        position: N._4.Relative
                    }, d.createElement(N.V, {
                        className: Object(v.c)(f.a.Dark),
                        flexShrink: 0,
                        fullWidth: !0,
                        fullHeight: !0
                    }, d.createElement(N._19, {
                        className: "side-nav__theme-wrapper",
                        borderRight: !0,
                        flexShrink: 0,
                        flexGrow: 1,
                        flexDirection: N.J.Column,
                        flexWrap: N.K.NoWrap,
                        fullWidth: !0,
                        fullHeight: !0,
                        display: N.H.Flex,
                        position: N._4.Relative
                    }, d.createElement(N.V, {
                        className: "side-nav__overlay-wrapper",
                        flexWrap: N.K.NoWrap,
                        fullHeight: !0,
                        display: N.H.Flex,
                        position: N._4.Relative,
                        overflow: N._0.Hidden,
                        fullWidth: !0
                    }, d.createElement(N.Q, {
                        flexGrow: 1,
                        fullWidth: !0,
                        overflow: N._0.Hidden
                    }, d.createElement(h.b, {
                        suppressScrollX: !0
                    }, d.createElement(N.V, {
                        flexGrow: 1,
                        fullWidth: !0
                    }, d.createElement(Z, {
                        collapsed: e,
                        premieresEnabled: this.state.premieresEnabled,
                        videoExperimentAssignment: this.state.videoExperimentAssignment,
                        sortByRelevance: this.state.sortByRelevance
                    }), d.createElement(pe, {
                        collapsed: e,
                        friends: s,
                        selfID: l,
                        loading: this.props.data.loading,
                        errored: !!this.props.data.error,
                        refetch: this.props.data.refetch
                    }), this.props.firstPageLoaded && d.createElement(ve, {
                        collapsed: e
                    }), this.props.firstPageLoaded && d.createElement(Ee, {
                        collapsed: e
                    })))), r), d.createElement(xe, {
                        collapsed: e,
                        onInputChange: this.onSearchInputChange
                    }))), i)
                }, t.prototype.getLayoutCache = function() {
                    return m.k.get(m.n.config.layoutCacheKey, y.a)
                }, t = c.__decorate([Object(k.c)("SideNav"), Object(g.a)(de, {
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                })], t)
            }(d.Component),
            He = Object(p.f)(je)
    },
    LjAQ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("U7vG"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("7vx8"),
            c = n("CSlQ"),
            u = n("xwpJ"),
            d = n("Odds"),
            p = n("x6ny"),
            m = "reporting-modal__select",
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = Object(s.d)("Select One...", "ReportUserModal");
                    return e = this.props.data.loading ? [r.createElement("option", {
                        key: "Loading"
                    }, Object(s.d)("Loading...", "ReportReasonsSelect"))] : Object(u.b)(this.props.data.reportReasons).map(function(e) {
                        return r.createElement("option", {
                            key: e.canonical,
                            value: e.canonical
                        }, e.localized)
                    }), r.createElement(d.V, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(d.M, {
                        id: m,
                        label: Object(s.d)("Select Reason (required)", "ReportUserModal")
                    }, r.createElement(d._16, {
                        id: m,
                        "data-test-selector": "reporting-modal.select",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.handleChange,
                        defaultValue: t
                    }, r.createElement("option", {
                        disabled: !0,
                        key: "default"
                    }, t), e)))
                }, t = i.__decorate([Object(c.c)("ReportReasonSelect")], t)
            }(r.Component),
            g = Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            content: e.reportContentType
                        }
                    }
                }
            })(h),
            f = (n("I4TS"), n("1EXI"));
        n.d(t, "a", function() {
            return y
        }), n.d(t, "b", function() {
            return v
        }), n.d(t, "c", function() {
            return S
        });
        var v, b = "reporting__select-community",
            y = "community_rules_violation";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError"
        }(v || (v = {}));
        var k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(s.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: r.createElement("br", null),
                        tosLink: r.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(s.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.selectCommunity = function(e) {
                        t.setState({
                            selectedCommunityID: e.target.value,
                            selectedCommunityName: e.target.name
                        })
                    }, t.handleSubmit = function(e) {
                        e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName) : t.props.onError(v.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                        var n = t.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        });
                        n.length && e === y ? t.setState({
                            reason: e,
                            selectedCommunityID: n[0].id,
                            selectedCommunityName: n[0].name,
                            isCommunityReason: !0
                        }) : t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(d.V, {
                        display: d.H.Flex,
                        flexDirection: d.J.Column,
                        alignItems: d.c.Center,
                        justifyContent: d.U.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === v.Success ? r.createElement("div", null, r.createElement(d.u, {
                        onClick: this.props.onClose
                    }, r.createElement(d.V, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Close", "ReportUser")))) : r.createElement("div", null, r.createElement(d.V, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, r.createElement(d._23, {
                        type: d._28.H4
                    }, this.props.title), r.createElement(d._19, {
                        color: d.F.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), r.createElement("form", null, r.createElement(d._19, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(g, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), this.renderCommunitiesSelector(), r.createElement(d.M, {
                        id: "reporting__text-area",
                        label: Object(s.d)("Description (required)", "ReportUser")
                    }, r.createElement(d._25, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), r.createElement(d._19, {
                        display: d.H.Flex,
                        justifyContent: d.U.Center
                    }, r.createElement(d.u, {
                        onClick: this.handleSubmit
                    }, r.createElement(d.V, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Send", "ReportUser"))))))
                }, t.prototype.renderCommunitiesSelector = function() {
                    if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                    if (this.state.isCommunityReason) {
                        var e = this.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        }).map(function(e) {
                            return r.createElement("option", {
                                key: e.id,
                                value: e.id,
                                name: e.name
                            }, e.displayName)
                        });
                        return r.createElement(d.V, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(d.M, {
                            id: b,
                            label: Object(s.d)("Community", "ReportUser")
                        }, r.createElement(d._16, {
                            id: b,
                            "data-test-selector": "reporting.select-community",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.selectCommunity
                        }, e)))
                    }
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case v.FormError:
                            e = Object(s.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case v.MutationError:
                            e = Object(s.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case v.Success:
                            e = Object(s.d)("Thank you for your report.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = a({
                        "reporting__error-container": this.props.submitStatus !== v.Success,
                        "reporting__success-container": this.props.submitStatus === v.Success
                    });
                    return r.createElement(d._19, {
                        className: t,
                        fullWidth: this.props.submitStatus !== v.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(r.Component),
            S = Object(o.compose)(Object(l.a)(f, {
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            userId: e.targetUserID
                        }
                    }
                }
            }))(k)
    },
    M1vR: function(e, t) {},
    M5Tl: function(e, t) {},
    MAZT: function(e, t, n) {
        "use strict";

        function i() {
            return Math.floor(((new Date).getTime() - 6e5) / 1e3)
        }
        n.d(t, "a", function() {
            return c
        });
        var a = n("TToO"),
            r = n("6gPI"),
            o = (n.n(r), n("5LoI")),
            s = n("PHcJ"),
            l = {
                games: {
                    indexName: o.a.Games,
                    hitsPerPage: 2,
                    topNumericFilters: ["popularity>1"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                videos: {
                    indexName: o.a.Videos,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["created_at>" + function() {
                            var e = new Date;
                            return e.setMonth(e.getMonth() - 1), Math.floor(e.getTime() / 1e3)
                        }()]
                    },
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                users: {
                    indexName: o.a.Users,
                    hitsPerPage: 2,
                    topNumericFilters: ["followers>50"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                channels: {
                    indexName: o.a.Channels,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["channel_count>10", "updated_on>" + i()]
                    },
                    get singleTypeNumericFilters() {
                        return ["updated_on>" + i()]
                    },
                    optionalFacetFilters: ""
                },
                communities: {
                    indexName: o.a.Communities,
                    hitsPerPage: 2,
                    topNumericFilters: ["channels>9"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                }
            },
            c = function() {
                function e(e, t) {
                    this.client = r(e, t)
                }
                return e.prototype.queryTopResults = function(e, t) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var n, i, r, o, s;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return n = [], i = [], n.push(this.getTopResult(l.games, e)), n.push(this.getTopResult(l.videos, e)), n.push(this.getTopResult(l.users, e)), n.push(this.getTopResult(l.channels, e)), n.push(this.getTopResult(l.communities, e)), i.push(this.getTotalResult(l.games, e)), i.push(this.getTotalResult(l.videos, e)), i.push(this.getTotalResult(l.users, e)), i.push(this.getTotalResult(l.channels, e)), i.push(this.getTotalResult(l.communities, e)), [4, this.client.search(n.concat(i))];
                                case 1:
                                    return r = a.sent(), o = r.results, s = {
                                        id: t,
                                        games: {
                                            totalHits: o[5].nbHits,
                                            hits: o[0].hits
                                        },
                                        videos: {
                                            totalHits: o[6].nbHits,
                                            hits: o[1].hits
                                        },
                                        users: {
                                            totalHits: o[7].nbHits,
                                            hits: o[2].hits
                                        },
                                        channels: {
                                            totalHits: o[8].nbHits,
                                            hits: o[3].hits
                                        },
                                        communities: {
                                            totalHits: o[9].nbHits,
                                            hits: o[4].hits
                                        }
                                    }, [2, s]
                            }
                        })
                    })
                }, e.prototype.queryForType = function(e, t, n, i) {
                    var r = void 0 === i ? {} : i,
                        s = r.page,
                        c = void 0 === s ? 0 : s,
                        u = r.hitsPerPage,
                        d = void 0 === u ? 50 : u,
                        p = r.facetFilters,
                        m = void 0 === p ? "" : p,
                        h = r.numericFilters;
                    return a.__awaiter(this, void 0, void 0, function() {
                        var i, r, s, u, p, g, f, v = this;
                        return a.__generator(this, function(b) {
                            switch (b.label) {
                                case 0:
                                    switch (i = {
                                        id: n,
                                        currentPage: c
                                    }, r = function(e) {
                                        return a.__awaiter(v, void 0, void 0, function() {
                                            var n, r;
                                            return a.__generator(this, function(a) {
                                                switch (a.label) {
                                                    case 0:
                                                        return n = {
                                                            indexName: e.indexName,
                                                            query: t,
                                                            params: {
                                                                page: c,
                                                                hitsPerPage: d,
                                                                numericFilters: h || e.singleTypeNumericFilters,
                                                                facets: "*",
                                                                facetFilters: m
                                                            }
                                                        }, [4, this.client.search([n])];
                                                    case 1:
                                                        return r = a.sent(), i.exhaustedHits = !r.results[0].nbHits || r.results[0].hits.length < d, [2, {
                                                            totalHits: r.results[0].nbHits,
                                                            hits: r.results[0].hits
                                                        }]
                                                }
                                            })
                                        })
                                    }, e) {
                                        case o.a.Games:
                                            return [3, 1];
                                        case o.a.Users:
                                            return [3, 3];
                                        case o.a.Channels:
                                            return [3, 5];
                                        case o.a.Videos:
                                            return [3, 7];
                                        case o.a.Communities:
                                            return [3, 9]
                                    }
                                    return [3, 11];
                                case 1:
                                    return s = i, [4, r(l.games)];
                                case 2:
                                    return s.games = b.sent(), [3, 12];
                                case 3:
                                    return u = i, [4, r(l.users)];
                                case 4:
                                    return u.users = b.sent(), [3, 12];
                                case 5:
                                    return p = i, [4, r(l.channels)];
                                case 6:
                                    return p.channels = b.sent(), [3, 12];
                                case 7:
                                    return g = i, [4, r(l.videos)];
                                case 8:
                                    return g.videos = b.sent(), [3, 12];
                                case 9:
                                    return f = i, [4, r(l.communities)];
                                case 10:
                                    return f.communities = b.sent(), [3, 12];
                                case 11:
                                    return [2, null];
                                case 12:
                                    return [2, i]
                            }
                        })
                    })
                }, e.prototype.queryVideos = function(e, t, n) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var i, r, l, c;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    switch (n.sort) {
                                        case s.b.Newest:
                                            i = o.a.VideosNewest;
                                            break;
                                        case s.b.Popular:
                                        default:
                                            i = o.a.Videos
                                    }
                                    switch (r = [], n.length) {
                                        case s.a.Short:
                                            r.push("length<=900");
                                            break;
                                        case s.a.Long:
                                            r.push("length>900")
                                    }
                                    switch (l = {
                                        indexName: i,
                                        query: e,
                                        params: {
                                            page: 0,
                                            hitsPerPage: 50,
                                            numericFilters: r,
                                            facets: "*",
                                            facetFilters: ""
                                        }
                                    }, n.type) {
                                        case s.c.PastBroadcasts:
                                            l.params.facetFilters = "broadcast_type:archive";
                                            break;
                                        case s.c.Uploads:
                                            l.params.facetFilters = "broadcast_type:upload";
                                            break;
                                        case s.c.Highlights:
                                            l.params.facetFilters = "broadcast_type:highlight"
                                    }
                                    return [4, this.client.search([l])];
                                case 1:
                                    return c = a.sent(), [2, {
                                        id: t,
                                        totalHits: c.results[0].nbHits,
                                        hits: c.results[0].hits
                                    }]
                            }
                        })
                    })
                }, e.prototype.getTopResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            page: 0,
                            hitsPerPage: e.hitsPerPage,
                            numericFilters: e.topNumericFilters
                        }
                    }
                }, e.prototype.getTotalResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            hitsPerPage: 0,
                            numericFilters: e.singleTypeNumericFilters
                        }
                    }
                }, e
            }()
    },
    MQjL: function(e, t) {},
    MSvX: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("OAwv"),
            r = n("U7vG"),
            o = n("6sO2"),
            s = n("Ejve"),
            l = "legacy_routes_enabled",
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.isEnabled = !1, n.onHistoryChange = function(e, t) {
                        n.isEnabled ? "REPLACE" !== t ? e && e.pathname ? (n.logger.debug("Location changed", {
                            path: e.pathname
                        }), n.legacyRoutes.forEach(function(t) {
                            try {
                                if (e.pathname.match(t)) {
                                    n.logger.debug("Found legacy route. Reloading...");
                                    var i = "" !== e.search ? a.parse(e.search) : {};
                                    i["from-redirect"] = "true";
                                    var r = a.stringify(i),
                                        l = o.a.buildType === s.a.Dev ? window.location.host : window.location.hostname,
                                        c = window.location.protocol + "//" + l + e.pathname + "?" + r;
                                    return n.logger.debug("Redirecting to legacy route", {
                                        newUrl: c
                                    }), void window.location.replace(c)
                                }
                            } catch (e) {
                                o.i.withCategory("legacy").error(e, "Unable to determine legacy reload match", {
                                    regex: t
                                })
                            }
                        })) : n.logger.debug("Unable to process history change. Path is null or empty.") : n.logger.debug("Skipping legacy route processing, due to history replace.") : n.logger.debug("Legacy routing not enabled.")
                    }, n.processRedirectParam = function(e) {
                        if (e && e.pathname && e.search) {
                            var t = "" !== e.search ? a.parse(e.search) : {};
                            if (t["from-redirect"]) {
                                delete t["from-redirect"];
                                var i = a.stringify(t),
                                    r = "";
                                i.length > 0 && (r = "?" + i), n.props.history.replace({
                                    pathname: e.pathname,
                                    hash: e.hash,
                                    search: r
                                })
                            }
                        }
                    }, n.isEnabled = o.b.get(l, !1), n.logger = o.i.withCategory("legacy-routes"), n.legacyRoutes = n.buildRoutes(), n.props.history.listen(n.onHistoryChange), n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return null
                }, t.prototype.componentDidMount = function() {
                    this.processRedirectParam(this.props.history.location)
                }, t.prototype.buildRoutes = function() {
                    if (!this.isEnabled) return [];
                    this.logger.debug("Building legacy routes...");
                    var e = o.b.get("legacy_routes", []),
                        t = [];
                    if (!e || 0 === e.length) return this.logger.debug("No legacy routes found in settings."), t;
                    for (var n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        try {
                            var r = new RegExp(a, "i");
                            t.push(r)
                        } catch (e) {
                            this.logger.debug("Failed to parse route!", {
                                val: a,
                                err: e
                            })
                        }
                    }
                    return this.logger.debug("Done building legacy routes!", {
                        count: t.length
                    }), t
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return l
        }), n.d(t, !1, function() {
            return "legacy_routes"
        }), n.d(t, "b", function() {
            return c
        })
    },
    MnLQ: function(e, t) {},
    N221: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("HW6M"),
            o = n("KSGD"),
            s = n("U7vG"),
            l = n("VjV9"),
            c = n("5kgt"),
            u = (n("8pDc"), 100),
            d = "scrollable-area-wrapper";
        ! function(e) {
            e[e.Resize = 0] = "Resize", e[e.Scroll = 1] = "Scroll", e[e.Wheel = 2] = "Wheel"
        }(i || (i = {}));
        var p = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.resizeTimeout = 0, n.receivers = [], n.scrollTimeout = 0, n.wheelTimeout = 0, n.getChildContext = function() {
                    return {
                        registerReceiver: n.registerReceiver,
                        requestVisibilityCheck: n.requestVisibilityCheck,
                        getScrollContent: n.getScrollContent,
                        scrollToTop: n.scrollToTop,
                        yScrollTo: n.yScrollTo
                    }
                }, n.scrollToTop = function() {
                    n.scrollContent && (n.scrollContent.scrollTop = 0), n.onScroll()
                }, n.notifyReceivers = function(e) {
                    requestAnimationFrame(function() {
                        if (n.scrollContent) {
                            var t = n.scrollContent.getBoundingClientRect();
                            e && (e.offset = n.scrollContent.scrollTop), n.receivers.forEach(function(n) {
                                n.checkVisible(t, e)
                            })
                        }
                    })
                }, n.onResize = function() {
                    if (!n.resizeTimeout) {
                        var e = {
                            type: i.Resize,
                            offset: n.scrollContent.scrollTop
                        };
                        n.props.disableDebounce ? n.notifyReceivers(e) : n.resizeTimeout = setTimeout(function() {
                            n.resizeTimeout = 0, n.notifyReceivers(e)
                        }, u)
                    }
                }, n.onScroll = function() {
                    if (!n.scrollTimeout && n.scrollContent) {
                        var e = {
                            type: i.Scroll,
                            offset: n.scrollContent.scrollTop
                        };
                        n.props.disableDebounce ? n.notifyReceivers(e) : n.scrollTimeout = setTimeout(function() {
                            n.scrollTimeout = 0, n.notifyReceivers(e)
                        }, u)
                    }
                }, n.onWheel = function(e) {
                    if (!n.wheelTimeout && n.scrollContent) {
                        var t = {
                            type: i.Wheel,
                            offset: n.scrollContent.scrollTop,
                            wheelEvent: e
                        };
                        n.props.disableDebounce ? n.notifyReceivers(t) : n.wheelTimeout = setTimeout(function() {
                            n.wheelTimeout = 0, n.notifyReceivers(t)
                        }, u)
                    }
                }, n.registerReceiver = function(e) {
                    return n.receivers.push(e), n.requestVisibilityCheck(e),
                        function() {
                            var t = n.receivers.indexOf(e);
                            n.receivers.splice(t, 1)
                        }
                }, n.requestVisibilityCheck = function(e) {
                    requestAnimationFrame(function() {
                        var t = n.scrollContent;
                        if (t) {
                            var i = t.getBoundingClientRect();
                            e.checkVisible(i)
                        }
                    })
                }, n.setRef = function(e) {
                    return n.root = e
                }, n.yScrollTo = function(e) {
                    n.scrollContent && (n.scrollContent.scrollTop = e), n.onScroll()
                }, n.getScrollContent = function() {
                    return n.scrollContent
                }, t.scrollRef && t.scrollRef(n), n
            }
            return a.__extends(t, e), t.prototype.componentDidMount = function() {
                if (this.root) {
                    if (this.simplebarRef = new l(this.root), this.scrollContent = this.simplebarRef.getScrollElement(), this.props.contentRef && this.props.contentRef(this.scrollContent), this.props.contentClassName) {
                        var e = this.scrollContent.querySelector(".simplebar-content");
                        e && e.classList.add(this.props.contentClassName)
                    }
                    this.props.scrollContentClassName && this.scrollContent.classList.add(this.props.scrollContentClassName), window.addEventListener("resize", this.onResize), this.scrollContent.addEventListener("scroll", this.onScroll), this.scrollContent.addEventListener("wheel", this.onWheel), this.notifyReceivers()
                }
            }, t.prototype.componentWillUnmount = function() {
                this.root && (delete this.simplebarRef, this.scrollContent.removeEventListener("scroll", this.onScroll), window.removeEventListener("resize", this.onResize))
            }, t.prototype.render = function() {
                var e = this.props,
                    t = (e.disableDebounce, e.suppressScrollX, e.suppressScrollY, e.scrollRef, e.scrollContentClassName, e.contentClassName, a.__rest(e, ["disableDebounce", "suppressScrollX", "suppressScrollY", "scrollRef", "scrollContentClassName", "contentClassName"])),
                    n = {
                        "scrollable-area": !0,
                        "scrollable-area--suppress-scroll-x": this.props.suppressScrollX,
                        "scrollable-area--suppress-scroll-y": this.props.suppressScrollY
                    };
                return s.createElement("div", a.__assign({
                    className: r(t.className, n),
                    "data-test-selector": d,
                    ref: this.setRef
                }, Object(c.a)(this.props), {
                    style: this.props.style
                }), s.Children.only(this.props.children))
            }, t.childContextTypes = {
                registerReceiver: o.func,
                requestVisibilityCheck: o.func,
                getScrollContent: o.func,
                scrollToTop: o.func,
                yScrollTo: o.func
            }, t
        }(s.Component);
        n.d(t, !1, function() {
            return d
        }), n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return p
        })
    },
    N5sm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_SetThreadSpamStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "spamInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "lastMarkedNotSpamAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "likelihood"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    N72C: function(e, t) {},
    NKW1: function(e, t) {},
    NU58: function(e, t) {},
    NXs7: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Light = 0] = "Light", e[e.Dark = 1] = "Dark"
        }(i || (i = {}))
    },
    NY9D: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            return "/directory/game/" + encodeURIComponent(e)
        }, t.a = function(e) {
            return "/communities/" + encodeURIComponent(e)
        }, t.b = function(e) {
            return "/events/" + encodeURIComponent(e)
        }, t.d = function(e) {
            return i.b.get("premiere_video_manager_public", !1) ? "/" + encodeURIComponent(e) + "/manager" : "/" + encodeURIComponent(e) + "/manager_v2"
        };
        var i = n("6sO2")
    },
    NfS6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_UserMenu_Dropdown"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSharingActivity"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "visibility"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 126
            }
        };
        n.loc.source = {
            body: "query TopNav_UserMenu_Dropdown {\ncurrentUser {\nid\ndisplayName\nlogin\navailability\nsettings {\nisSharingActivity\nvisibility\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    NhfZ: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_PrimeUpsell_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 105
            }
        };
        n.loc.source = {
            body: "query TopNav_PrimeUpsell_CurrentUser {\ncurrentUser {\nid\nhasPrime\nhasTurbo\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    NikC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            return void 0 === n && (n = !0),
                function(i) {
                    i(Object(r.s)(e)), n && Object(a.d)(e), t && Object(o.b)(e, t)
                }
        };
        var i, a = n("VAT8"),
            r = n("7enT"),
            o = n("xrVp");
        ! function(e) {
            e[e.UserMenu = 1] = "UserMenu", e[e.TypedCommand = 2] = "TypedCommand"
        }(i || (i = {}))
    },
    NoSW: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return function(n) {
                return function(i) {
                    function l(n, a) {
                        var r = i.call(this, n) || this;
                        return r.logger = s.i.withCategory("latency-tracking"), r.getChildContext = function() {
                            return {
                                latencyTracking: r.tracker
                            }
                        }, t && t.isRoot ? r.tracker = s.n.benchmarking.getRootLatencyTracker() : a.latencyTracking ? r.tracker = a.latencyTracking.createChild(e, t && t.destination) : (r.tracker = new c(e, t && t.destination), r.tracker.root = new c("Root", t && t.destination)), r
                    }
                    return a.__extends(l, i), l.prototype.componentDidMount = function() {
                        t && t.autoReportInteractive && (this.logger.debug("Using default implementation of reportInteractive", {
                            componentID: e
                        }), this.tracker.reportInteractive())
                    }, l.prototype.render = function() {
                        var e = {
                            latencyTracking: this.tracker,
                            rootLatencyTracker: t && t.isRoot ? this.tracker : this.tracker.root
                        };
                        return o.createElement(n, a.__assign({}, this.props, e))
                    }, l.contextTypes = {
                        latencyTracking: r.object
                    }, l.childContextTypes = {
                        latencyTracking: r.object
                    }, l
                }(o.Component)
            }
        }
        var a = n("TToO"),
            r = n("KSGD"),
            o = n("U7vG"),
            s = n("6sO2"),
            l = n("Hvhe"),
            c = function() {
                function e(e, t) {
                    var n = this;
                    this.getLocation = function() {
                        return n.location
                    }, this.name = e, this.destination = t
                }
                return e.prototype.reportInteractive = function(e) {
                    return e
                }, e.prototype.createChild = function(t, n) {
                    return new e(t, n)
                }, e.prototype.setLocation = function(e) {
                    this.location = e
                }, e.prototype.reset = function() {}, e.prototype.registerCustomEvent = function(e) {
                    return a.__assign({}, e, {
                        duration: {
                            latencyStatus: l.a.Unknown
                        },
                        startTime: 0
                    })
                }, e.prototype.reportCustomEvent = function(e) {}, e.prototype.resetCustomEvents = function(e) {}, e
            }();
        n.d(t, "a", function() {
            return i
        })
    },
    O1nh: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("+xm8"),
            o = n("f2i/"),
            s = n("Aj/L"),
            l = n("TToO"),
            c = n("U7vG"),
            u = n("6sO2"),
            d = n("7vx8"),
            p = n("oIkB"),
            m = n("CSlQ"),
            h = n("Odds"),
            g = n("iYmP"),
            f = n("7iNp"),
            v = n("7dPO"),
            b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hovered: !1
                    }, t.onClickAddFriend = function() {
                        t.props.onCreateFriendRequest(Object(p.a)({
                            targetID: t.props.channelID
                        }))
                    }, t.onClickUnfriend = function() {
                        t.props.onUnfriendUser(Object(p.a)({
                            targetID: t.props.channelID
                        }))
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(u.d)("Add Friend", "UserCard");
                    if (!this.props.isLoggedIn) return c.createElement(h.u, {
                        ariaLabel: e,
                        onClick: this.props.onLoginClick
                    }, e);
                    if (this.props.data.loading || this.props.data.error) return c.createElement(h._3, {
                        height: 30,
                        width: 60
                    });
                    if (!this.isFriend()) return c.createElement(h.u, {
                        onClick: this.onClickAddFriend
                    }, e);
                    var t = Object(u.d)("Unfriend", "UserCard"),
                        n = Object(u.d)("Friends", "UserCard");
                    return c.createElement(h.u, {
                        ariaLabel: t,
                        onClick: this.onClickUnfriend,
                        "data-a-target": "unfriend-button",
                        statusAlertText: t
                    }, n)
                }, t.prototype.isFriend = function() {
                    var e = this;
                    return !this.props.data.loading && !this.props.data.error && !!this.props.data.currentUser.friends.edges.find(function(t) {
                        return t.node.id === e.props.channelID
                    })
                }, t = l.__decorate([Object(m.c)("FriendButton"), Object(d.a)(f), Object(d.a)(v, {
                    name: "onUnfriendUser"
                }), Object(d.a)(g, {
                    name: "onCreateFriendRequest"
                })], t)
            }(c.Component),
            y = Object(i.a)(function(e) {
                return {
                    isLoggedIn: Object(s.d)(e)
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    onLoginClick: function() {
                        return o.f(r.a.FriendAdd)
                    }
                }, e)
            })(b);
        n.d(t, "a", function() {
            return y
        })
    },
    OOv5: function(e, t, n) {
        "use strict";

        function i() {
            if (g) return g;
            var e = h.register({
                scope: "/"
            });
            return g = e || Promise.reject(new Error("service worker runtime not available"))
        }
        var a, r = n("TToO"),
            o = n("6sO2"),
            s = n("oIkB"),
            l = n("Aj/L");
        ! function(e) {
            e.NewSession = "new-session", e.ClearSession = "clear-session"
        }(a || (a = {}));
        var c = o.n.logger.withCategory("host-service-worker-messenger"),
            u = function() {
                function e() {}
                return e.syncSession = function() {
                    var e = Object(l.c)(o.n.store.getState());
                    if (e) {
                        var t = e.id;
                        this.sendMessage({
                            type: a.NewSession,
                            userId: t
                        })
                    } else this.sendMessage({
                        type: a.ClearSession
                    })
                }, e.sendMessage = function(e) {
                    var t = this;
                    if (navigator.serviceWorker.controller) this.postMessage(e);
                    else {
                        c.debug("cannot postMessage immediately. waiting for a service worker to take control");
                        var n = function() {
                            c.debug("controller changed", {
                                controllerExists: !!navigator.serviceWorker.controller
                            }), navigator.serviceWorker.removeEventListener("controllerchange", n), t.postMessage(e)
                        };
                        navigator.serviceWorker.addEventListener("controllerchange", n)
                    }
                }, e.postMessage = function(e) {
                    navigator.serviceWorker.controller ? (c.debug("postMessage", e), navigator.serviceWorker.controller.postMessage(JSON.stringify(e))) : c.error(new Error("navigator.serviceWorker.controller is null"), "postMessage called with no controlling service worker")
                }, e
            }(),
            d = "browserPushNotificationsEnabled",
            p = function() {
                function e() {}
                return e.exists = function() {
                    return null !== o.n.storage.getOptional(d)
                }, e.isEnabled = function() {
                    return o.n.storage.get(d, !1)
                }, e.setEnabled = function() {
                    o.n.storage.set(d, !0)
                }, e.setDisabled = function() {
                    o.n.storage.set(d, !1)
                }, e
            }(),
            m = n("UbVv"),
            h = n("F2sf"),
            g = null,
            f = n("JBcW"),
            v = n("TbkX");
        n.d(t, "a", function() {
            return y
        });
        var b = o.n.logger.withCategory("browser-push-notifications-manager"),
            y = function() {
                function e() {}
                return e.initialize = function() {
                    return this.initPromise ? this.initPromise : (this.initPromise = this.initializationLogic(), this.initPromise)
                }, e.initializationLogic = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e, t, n, a;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return Object(m.a)() ? (b.debug("permissions have been denied. nothing to do here."), [2]) : [4, i()];
                                case 1:
                                    return r.sent(), e = Object(l.d)(o.n.store.getState()), [4, this.hasPushSubscription()];
                                case 2:
                                    return t = r.sent(), u.syncSession(), t ? (n = p.exists() && !p.isEnabled(), a = !e, n || a ? [4, this.unsubscribe()] : [3, 4]) : [3, 5];
                                case 3:
                                    r.sent(), r.label = 4;
                                case 4:
                                    return [3, 7];
                                case 5:
                                    return l.d ? !Object(m.b)() || p.exists() && !p.isEnabled() ? [3, 7] : [4, this.subscribe()] : [3, 7];
                                case 6:
                                    r.sent(), r.label = 7;
                                case 7:
                                    return [2]
                            }
                        })
                    })
                }, e.userSubscribe = function(e) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        return r.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return p.setEnabled(), [4, this.subscribe()];
                                case 1:
                                    return t.sent(), Object(f.c)({
                                        allowed: Object(m.b)(),
                                        context: e
                                    }), [2]
                            }
                        })
                    })
                }, e.userUnsubscribe = function(e) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        return r.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return p.setDisabled(), [4, this.unsubscribe()];
                                case 1:
                                    return t.sent(), Object(f.b)({
                                        context: e
                                    }), [2]
                            }
                        })
                    })
                }, e.hasPushSubscription = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        return r.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, this.getPushSubscription()];
                                case 1:
                                    return [2, null !== e.sent()]
                            }
                        })
                    })
                }, e.subscribe = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e, t, n, a, c, u;
                        return r.__generator(this, function(d) {
                            switch (d.label) {
                                case 0:
                                    if (Object(m.a)()) throw new Error("notification permission is denied");
                                    if (!Object(l.d)(o.n.store.getState())) throw new Error("cannot be enabled logged out");
                                    if (!(e = o.b.get("notification_app_server_public_key", ""))) throw new Error("application server public key is blank");
                                    return [4, i()];
                                case 1:
                                    return t = d.sent(), [4, this.getPushSubscription()];
                                case 2:
                                    return (n = d.sent()) ? [3, 4] : (a = function(e) {
                                        for (var t = (e + "=".repeat((4 - e.length % 4) % 4)).replace(/\-/g, "+").replace(/_/g, "/"), n = atob(t), i = new Uint8Array(n.length), a = 0; a < n.length; ++a) i[a] = n.charCodeAt(a);
                                        return i
                                    }(e), [4, t.pushManager.subscribe({
                                        userVisibleOnly: !0,
                                        applicationServerKey: a
                                    })]);
                                case 3:
                                    n = d.sent(), d.label = 4;
                                case 4:
                                    if (!(c = n.toJSON()).endpoint) throw new Error("push subscription 'endpoint' missing");
                                    if (!c.keys) throw new Error("push subscription 'keys' missing");
                                    if (!c.keys.auth) throw new Error("push subscription 'keys.auth' missing");
                                    if (!c.keys.p256dh) throw new Error("push subscription 'keys.p256dh' missing");
                                    return u = Object(s.a)({
                                        endpoint: c.endpoint,
                                        auth: c.keys.auth,
                                        p256DH: c.keys.p256dh
                                    }), [4, o.n.apollo.client.mutate(r.__assign({
                                        mutation: v
                                    }, u))];
                                case 5:
                                    return d.sent(), [2]
                            }
                        })
                    })
                }, e.unsubscribe = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return r.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, this.getPushSubscription()];
                                case 1:
                                    return (e = t.sent()) ? [4, e.unsubscribe()] : [2];
                                case 2:
                                    if (!t.sent()) throw new Error("push subscription unsubscribe unexpectedly failed");
                                    return [2]
                            }
                        })
                    })
                }, e.getPushSubscription = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return r.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, i()];
                                case 1:
                                    return e = n.sent(), [4, e.pushManager.getSubscription()];
                                case 2:
                                    return (t = n.sent()) ? [2, t] : [2, null]
                            }
                        })
                    })
                }, e
            }()
    },
    OXEC: function(e, t) {},
    Odds: function(e, t, n) {
        "use strict";

        function i(e) {
            for (var t = {}, n = 0, i = Object.keys(e).filter(function(e) {
                    return e.startsWith("data-")
                }); n < i.length; n++) {
                var a = i[n];
                t[a] = e[a]
            }
            return t
        }

        function a(e) {
            for (var t = {}, n = 0, i = Object.keys(e); n < i.length; n++) {
                var a = i[n];
                vt.has(a) && (t[a] = e[a])
            }
            return t
        }

        function r(e) {
            var t;
            return "string" == typeof e ? t = e : e.pathname && (t = e.pathname), !(!t || !/^\w+:\/\//.test(t) && !t.startsWith("//"))
        }

        function o() {
            return "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".replace(/[xy]/g, function(e) {
                var t = 16 * Math.random() | 0;
                return ("x" === e ? t : 3 & t | 8).toString(16)
            })
        }
        var s, l = n("TToO"),
            c = n("HW6M"),
            u = n("U7vG");
        n("HyyJ");
        ! function(e) {
            e[e.Start = 1] = "Start", e[e.End = 2] = "End", e[e.Center = 3] = "Center", e[e.Baseline = 4] = "Baseline", e[e.Stretch = 5] = "Stretch"
        }(s || (s = {}));
        var d, p = (P = {}, P[s.Start] = "align-content-start", P[s.End] = "align-content-end", P[s.Center] = "align-content-center", P[s.Baseline] = "align-content-baseline", P[s.Stretch] = "align-content-stretch", P);
        ! function(e) {
            e[e.Start = 1] = "Start", e[e.End = 2] = "End", e[e.Center = 3] = "Center", e[e.Baseline = 4] = "Baseline", e[e.Stretch = 5] = "Stretch"
        }(d || (d = {}));
        var m, h = (U = {}, U[d.Start] = "align-items-start", U[d.End] = "align-items-end", U[d.Center] = "align-items-center", U[d.Baseline] = "align-items-baseline", U[d.Stretch] = "align-items-stretch", U);
        ! function(e) {
            e[e.Start = 1] = "Start", e[e.End = 2] = "End", e[e.Center = 3] = "Center", e[e.Baseline = 4] = "Baseline", e[e.Stretch = 5] = "Stretch"
        }(m || (m = {}));
        var g, f = (M = {}, M[m.Start] = "align-self-start", M[m.End] = "align-self-end", M[m.Center] = "align-self-center", M[m.Baseline] = "align-self-baseline", M[m.Stretch] = "align-self-stretch", M);
        ! function(e) {
            e[e.Block = 1] = "Block", e[e.Flex = 2] = "Flex", e[e.Inline = 3] = "Inline", e[e.InlineBlock = 4] = "InlineBlock", e[e.InlineFlex = 5] = "InlineFlex", e[e.Hide = 6] = "Hide", e[e.HideAccessible = 7] = "HideAccessible"
        }(g || (g = {}));
        var v, b = (A = {}, A[g.Block] = "block", A[g.Flex] = "flex", A[g.Inline] = "inline", A[g.InlineBlock] = "inline-block", A[g.InlineFlex] = "inline-flex", A[g.Hide] = "hide", A[g.HideAccessible] = "hide-accessible", A);
        ! function(e) {
            e[e.Column = 1] = "Column", e[e.ColumnReverse = 2] = "ColumnReverse", e[e.Row = 3] = "Row", e[e.RowReverse = 4] = "RowReverse"
        }(v || (v = {}));
        var y, k = (V = {}, V[v.Column] = "flex-column", V[v.ColumnReverse] = "flex-column-reverse", V[v.Row] = "flex-row", V[v.RowReverse] = "flex-row-reverse", V);
        ! function(e) {
            e[e.Wrap = 1] = "Wrap", e[e.NoWrap = 2] = "NoWrap", e[e.WrapReverse = 3] = "WrapReverse"
        }(y || (y = {}));
        var S, _ = (j = {}, j[y.Wrap] = "flex-wrap", j[y.NoWrap] = "flex-nowrap", j[y.WrapReverse] = "flex-wrap-reverse", j);
        ! function(e) {
            e[e.Start = 1] = "Start", e[e.End = 2] = "End", e[e.Center = 3] = "Center", e[e.Between = 4] = "Between", e[e.Around = 5] = "Around"
        }(S || (S = {}));
        var w, E = (H = {}, H[S.Start] = "justify-content-start", H[S.End] = "justify-content-end", H[S.Center] = "justify-content-center", H[S.Between] = "justify-content-between", H[S.Around] = "justify-content-around", H);
        ! function(e) {
            e[e.Auto = 1] = "Auto", e[e.Scroll = 2] = "Scroll", e[e.Visible = 3] = "Visible", e[e.Hidden = 4] = "Hidden"
        }(w || (w = {}));
        var C, N = (B = {}, B[w.Auto] = "tw-overflow-auto", B[w.Scroll] = "tw-overflow-scroll", B[w.Visible] = "tw-overflow-visible", B[w.Hidden] = "tw-overflow-hidden", B);
        ! function(e) {
            e[e.Relative = 1] = "Relative", e[e.Absolute = 2] = "Absolute", e[e.Fixed = 3] = "Fixed"
        }(C || (C = {}));
        var T, O = (z = {}, z[C.Relative] = "relative", z[C.Absolute] = "absolute", z[C.Fixed] = "fixed", z);
        ! function(e) {
            e[e.None = 1] = "None", e[e.X = 2] = "X", e[e.Y = 3] = "Y"
        }(T || (T = {}));
        var I, D = (W = {}, W[T.None] = "tw-resize-none", W[T.X] = "tw-resize-x", W[T.Y] = "tw-resize-y", W);
        ! function(e) {
            e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 3] = "Right"
        }(I || (I = {}));
        var L, x = (q = {}, q[I.Left] = "align-left", q[I.Center] = "align-center", q[I.Right] = "align-right", q);
        ! function(e) {
            e[e.Visible = 1] = "Visible", e[e.Hidden = 2] = "Hidden"
        }(L || (L = {}));
        var R, F = (G = {}, G[L.Visible] = "visible", G[L.Hidden] = "hidden", G);
        ! function(e) {
            e[e.Default = 1] = "Default", e[e.Above = 2] = "Above", e[e.Below = 3] = "Below"
        }(R || (R = {}));
        var P, U, M, A, V, j, H, B, z, W, q, G, Q, K, $ = (Q = {}, Q[R.Default] = "tw-z-default", Q[R.Above] = "tw-z-above", Q[R.Below] = "tw-z-below", Q),
            Z = new Set([0, .5, 1, 2, 3, 4, 5, "auto"]),
            Y = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = (m = {}, m["" + this.props.className] = !!this.props.className, m["tw-top-0"] = this.props.attachTop, m["tw-right-0"] = this.props.attachRight, m["tw-bottom-0"] = this.props.attachBottom, m["tw-left-0"] = this.props.attachLeft, m["tw-ellipsis"] = this.props.ellipsis, m["tw-full-width"] = this.props.fullWidth, m["tw-full-height"] = this.props.fullHeight, m);
                    this.props.overflow && (e[N[this.props.overflow]] = !0), this.props.resize && (e[D[T.X]] = !0), this.props.zIndex && (e[$[this.props.zIndex]] = !0);
                    var t = this.getBreakpointClasses(this.props),
                        n = this.getBreakpointClasses(this.props.breakpointExtraSmall, "xs"),
                        a = this.getBreakpointClasses(this.props.breakpointSmall, "sm"),
                        r = this.getBreakpointClasses(this.props.breakpointMedium, "md"),
                        o = this.getBreakpointClasses(this.props.breakpointLarge, "lg"),
                        s = this.getBreakpointClasses(this.props.breakpointExtraLarge, "xl"),
                        d = this.getBreakpointClasses(this.props.breakpointExtraExtraLarge, "xxl"),
                        p = u.Children.only(this.props.children);
                    return u.cloneElement(p, l.__assign({}, p.props, i(this.props), {
                        className: c(p.props.className, e, t, n, a, r, o, s, d)
                    }));
                    var m
                }, t.prototype.getBreakpointClasses = function(e, t) {
                    if (!e) return "";
                    var n = [];
                    if (t = t ? "tw-" + t + "-" : "tw-", e.alignContent && n.push(t + p[e.alignContent]), e.alignItems && n.push(t + h[e.alignItems]), e.alignSelf && n.push(t + f[e.alignSelf]), e.display && n.push(t + b[e.display]), e.flexDirection && n.push(t + k[e.flexDirection]), void 0 !== e.flexGrow && n.push(t + "flex-grow-" + e.flexGrow), void 0 !== e.flexOrder && n.push(t + "item-order-" + e.flexOrder), void 0 !== e.flexShrink && n.push(t + "flex-shrink-" + e.flexShrink), e.flexWrap && n.push(t + _[e.flexWrap]), e.justifyContent && n.push(t + E[e.justifyContent]), e.position && n.push(t + O[e.position]), e.textAlign && n.push(t + x[e.textAlign]), e.visibility && n.push(t + F[e.visibility]), void 0 !== e.margin) {
                        "string" == typeof(i = this.getSpacingClasses("mg", e.margin)) ? n.push(t + i): i.forEach(function(e) {
                            n.push(t + e)
                        })
                    }
                    if (void 0 !== e.padding) {
                        var i;
                        "string" == typeof(i = this.getSpacingClasses("pd", e.padding)) ? n.push(t + i): i.forEach(function(e) {
                            n.push(t + e)
                        })
                    }
                    return n
                }, t.prototype.getSpacingClasses = function(e, t) {
                    if (void 0 === t || null === t) return "";
                    if ("object" == typeof t) {
                        if (t.x && (t.left || t.right)) throw new Error("Cannot use `x` and `left` or `right` at the same time.");
                        if (t.y && (t.top || t.bottom)) throw new Error("Cannot use `y` and `top` or `bottom` at the same time.");
                        var n = [];
                        return void 0 !== t.top && (.5 === t.top ? n.push(e + "-t-05") : n.push(e + "-t-" + t.top)), void 0 !== t.right && (.5 === t.right ? n.push(e + "-r-05") : n.push(e + "-r-" + t.right)), void 0 !== t.bottom && (.5 === t.bottom ? n.push(e + "-b-05") : n.push(e + "-b-" + t.bottom)), void 0 !== t.left && (.5 === t.left ? n.push(e + "-l-05") : n.push(e + "-l-" + t.left)), void 0 !== t.x && (.5 === t.x ? n.push(e + "-x-05") : n.push(e + "-x-" + t.x)), void 0 !== t.y && (.5 === t.y ? n.push(e + "-y-05") : n.push(e + "-y-" + t.y)), n
                    }
                    if (!Z.has(t) || "tw-pd" === e && "auto" === t) throw new Error(t + " is not a valid property of either margin or padding");
                    return .5 === t ? e + "-05" : "auto" === t ? e + "-auto" : e + "-" + t
                }, t
            }(u.Component),
            J = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return u.createElement(Y, l.__assign({}, this.props), u.createElement("div", {
                        ref: this.props.refDelegate
                    }, this.props.children))
                }, t
            }(Y);
        n("oM0L");
        ! function(e) {
            e[e.Short = 1] = "Short", e[e.Medium = 2] = "Medium", e[e.Long = 3] = "Long", e[e.ExtraLong = 4] = "ExtraLong"
        }(K || (K = {}));
        var X, ee = (se = {}, se[K.Short] = "tw-animation--delay-short", se[K.Medium] = "tw-animation--delay-medium", se[K.Long] = "tw-animation--delay-long", se[K.ExtraLong] = "tw-animation--delay-extra-long", se);
        ! function(e) {
            e[e.Short = 1] = "Short", e[e.Medium = 2] = "Medium", e[e.Long = 3] = "Long", e[e.ExtraLong = 4] = "ExtraLong"
        }(X || (X = {}));
        var te, ne = (le = {}, le[X.Short] = "tw-animation--duration-short", le[X.Medium] = "tw-animation--duration-medium", le[X.Long] = "tw-animation--duration-long", le[X.ExtraLong] = "tw-animation--duration-extra-long", le);
        ! function(e) {
            e[e.Both = 1] = "Both", e[e.None = 2] = "None", e[e.Forwards = 3] = "Forwards", e[e.Backwards = 4] = "Backwards"
        }(te || (te = {}));
        var ie, ae = (ce = {}, ce[te.Both] = "tw-animation--fill-mode-both", ce[te.None] = "tw-animation--fill-mode-none", ce[te.Forwards] = "tw-animation--fill-mode-forwards", ce[te.Backwards] = "tw-animation--fill-mode-backwards", ce);
        ! function(e) {
            e[e.Ease = 1] = "Ease", e[e.Linear = 2] = "Linear", e[e.EaseIn = 3] = "EaseIn", e[e.EaseOut = 4] = "EaseOut", e[e.EaseInOut = 5] = "EaseInOut"
        }(ie || (ie = {}));
        var re, oe = (ue = {}, ue[ie.Ease] = "tw-animation--timing-ease", ue[ie.Linear] = "tw-animation--timing-linear", ue[ie.EaseIn] = "tw-animation--timing-ease-in", ue[ie.EaseOut] = "tw-animation--timing-ease-out", ue[ie.EaseInOut] = "tw-animation--timing-ease-in-out", ue);
        ! function(e) {
            e[e.Bounce = 1] = "Bounce", e[e.BounceIn = 2] = "BounceIn", e[e.BounceOut = 3] = "BounceOut", e[e.FadeIn = 4] = "FadeIn", e[e.FadeOut = 5] = "FadeOut", e[e.SlideInTop = 6] = "SlideInTop", e[e.SlideInRight = 7] = "SlideInRight", e[e.SlideInBottom = 8] = "SlideInBottom", e[e.SlideInLeft = 9] = "SlideInLeft", e[e.SlideOutTop = 10] = "SlideOutTop", e[e.SlideOutRight = 11] = "SlideOutRight", e[e.SlideOutBottom = 12] = "SlideOutBottom", e[e.SlideOutLeft = 13] = "SlideOutLeft"
        }(re || (re = {}));
        var se, le, ce, ue, de, pe, me = (de = {}, de[re.Bounce] = "tw-animation--bounce", de[re.BounceIn] = "tw-animation--bounce-in", de[re.BounceOut] = "tw-animation--bounce-out", de[re.FadeIn] = "tw-animation--fade-in", de[re.FadeOut] = "tw-animation--fade-out", de[re.SlideInTop] = "tw-animation--slide-in-top", de[re.SlideInRight] = "tw-animation--slide-in-right", de[re.SlideInBottom] = "tw-animation--slide-in-bottom", de[re.SlideInLeft] = "tw-animation--slide-in-left", de[re.SlideOutTop] = "tw-animation--slide-out-top", de[re.SlideOutRight] = "tw-animation--slide-out-right", de[re.SlideOutBottom] = "tw-animation--slide-out-bottom", de[re.SlideOutLeft] = "tw-animation--slide-out-left", de),
            he = function(e) {
                var t = {
                    "tw-animation": !0,
                    "tw-animation--animate": e.enabled,
                    "tw-animation--loop": e.loop
                };
                return e.delay && (t[ee[e.delay]] = !0), e.duration ? t[ne[e.duration]] = !0 : t[ne[X.Short]] = !0, e.fillMode ? t[ae[e.fillMode]] = !0 : t[ae[te.Both]] = !0, e.timing ? t[oe[e.timing]] = !0 : t[oe[ie.Ease]] = !0, e.type && (t[me[e.type]] = !0), u.createElement(Y, l.__assign({
                    className: c(t)
                }, i(e)), u.createElement("div", {
                    onAnimationStart: e.onAnimationStart,
                    onAnimationEnd: e.onAnimationEnd,
                    "data-a-target": "tw-animation-target"
                }, e.children))
            };
        n("OXEC");
        ! function(e) {
            e[e.Aspect21x9 = 1] = "Aspect21x9", e[e.Aspect16x9 = 2] = "Aspect16x9", e[e.Aspect4x3 = 3] = "Aspect4x3", e[e.Aspect1x1 = 4] = "Aspect1x1", e[e.Aspect3x4 = 5] = "Aspect3x4", e[e.BoxArt = 6] = "BoxArt"
        }(pe || (pe = {}));
        var ge;
        ! function(e) {
            e[e.Top = 1] = "Top", e[e.Center = 2] = "Center", e[e.Bottom = 3] = "Bottom"
        }(ge || (ge = {}));
        var fe, ve, be, ye = (fe = {}, fe[pe.Aspect21x9] = "tw-aspect--21x9", fe[pe.Aspect16x9] = "tw-aspect--16x9", fe[pe.Aspect4x3] = "tw-aspect--4x3", fe[pe.Aspect1x1] = "tw-aspect--1x1", fe[pe.Aspect3x4] = "tw-aspect--3x4", fe[pe.BoxArt] = "tw-aspect--3x4", fe),
            ke = (ve = {}, ve[ge.Top] = "tw-aspect--align-top", ve[ge.Center] = "tw-aspect--align-center", ve[ge.Bottom] = "tw-aspect--align-bottom", ve),
            Se = function(e) {
                var t = {
                    "tw-aspect--overflow": e.overflow
                };
                return e.ratio ? t[ye[e.ratio]] = !0 : t[ye[pe.Aspect16x9]] = !0, e.align ? t[ke[e.align]] = !0 : t[ke[ge.Top]] = !0, u.createElement("figure", l.__assign({
                    className: c("tw-aspect", t)
                }, i(e)), e.children)
            };
        n("WtTG");
        ! function(e) {
            e[e.Offline = 1] = "Offline", e[e.Invisible = 2] = "Invisible", e[e.Online = 3] = "Online", e[e.Busy = 4] = "Busy", e[e.Away = 5] = "Away"
        }(be || (be = {}));
        var _e, we, Ee = (_e = {}, _e[be.Offline] = "tw-presence__indicator--offline", _e[be.Invisible] = "tw-presence__indicator--invisible", _e[be.Online] = "tw-presence__indicator--online", _e[be.Busy] = "tw-presence__indicator--busy", _e[be.Away] = "tw-presence__indicator--away", _e),
            Ce = function(e) {
                var t = {
                        "tw-presence": !0,
                        "tw-presence--border": e.border
                    },
                    n = {};
                return e.status ? n[Ee[e.status]] = !0 : n[Ee[be.Offline]] = !0, u.createElement(J, l.__assign({
                    className: c(t),
                    display: g.InlineFlex,
                    position: C.Relative
                }, i(e)), u.createElement("div", {
                    className: "tw-presence__border"
                }), u.createElement("div", {
                    className: "tw-presence__indicator " + c(n)
                }))
            };
        n("4gX4");
        ! function(e) {
            e[e.Base = 1] = "Base", e[e.Alt = 2] = "Alt", e[e.Alt2 = 3] = "Alt2", e[e.Link = 4] = "Link", e[e.Live = 5] = "Live", e[e.Error = 6] = "Error", e[e.Overlay = 7] = "Overlay", e[e.OverlayAlt = 8] = "OverlayAlt"
        }(we || (we = {}));
        var Ne, Te = (Me = {}, Me[we.Base] = "tw-c-text", Me[we.Alt] = "tw-c-text-alt", Me[we.Alt2] = "tw-c-text-alt-2", Me[we.Link] = "tw-c-text-link", Me[we.Live] = "tw-c-text-live", Me[we.Error] = "tw-c-text-error", Me[we.Overlay] = "tw-c-text-overlay", Me[we.OverlayAlt] = "tw-c-text-overlay-alt", Me);
        ! function(e) {
            e[e.Size1 = 1] = "Size1", e[e.Size2 = 2] = "Size2", e[e.Size3 = 3] = "Size3", e[e.Size4 = 4] = "Size4", e[e.Size5 = 5] = "Size5", e[e.Size6 = 6] = "Size6", e[e.Size7 = 7] = "Size7", e[e.Size8 = 8] = "Size8"
        }(Ne || (Ne = {}));
        var Oe, Ie = (Ae = {}, Ae[Ne.Size1] = "tw-font-size-1", Ae[Ne.Size2] = "tw-font-size-2", Ae[Ne.Size3] = "tw-font-size-3", Ae[Ne.Size4] = "tw-font-size-4", Ae[Ne.Size5] = "tw-font-size-5", Ae[Ne.Size6] = "tw-font-size-6", Ae[Ne.Size7] = "tw-font-size-7", Ae[Ne.Size8] = "tw-font-size-8", Ae);
        ! function(e) {
            e[e.Body = 1] = "Body", e[e.Heading = 2] = "Heading"
        }(Oe || (Oe = {}));
        var De, Le = (Ve = {}, Ve[Oe.Body] = "tw-line-height-body", Ve[Oe.Heading] = "tw-line-height-heading", Ve);
        ! function(e) {
            e[e.Underline = 1] = "Underline", e[e.Strikethrough = 2] = "Strikethrough"
        }(De || (De = {}));
        var xe, Re = (je = {}, je[De.Underline] = "tw-underline", je[De.Strikethrough] = "tw-strikethrough", je);
        ! function(e) {
            e[e.Capitalize = 1] = "Capitalize", e[e.Uppercase = 2] = "Uppercase"
        }(xe || (xe = {}));
        var Fe, Pe = (He = {}, He[xe.Capitalize] = "tw-capcase", He[xe.Uppercase] = "tw-upcase", He);
        ! function(e) {
            e.P = "p", e.Span = "span", e.H1 = "h1", e.H2 = "h2", e.H3 = "h3", e.H4 = "h4", e.H5 = "h5", e.H6 = "h6", e.Strong = "strong", e.Em = "em"
        }(Fe || (Fe = {}));
        var Ue;
        ! function(e) {
            e[e.Top = 1] = "Top", e[e.Middle = 2] = "Middle", e[e.Baseline = 3] = "Baseline", e[e.Bottom = 4] = "Bottom", e[e.TextTop = 5] = "TextTop", e[e.TextBottom = 6] = "TextBottom"
        }(Ue || (Ue = {}));
        var Me, Ae, Ve, je, He, Be, ze, We = (Be = {}, Be[Ue.Top] = "tw-align-top", Be[Ue.Middle] = "tw-align-middle", Be[Ue.Baseline] = "tw-align-baseline", Be[Ue.Bottom] = "tw-align-bottom", Be[Ue.TextTop] = "tw-align-text-top", Be[Ue.TextBottom] = "tw-align-text-bottom", Be),
            qe = function(e) {
                var t = (a = {
                    "tw-ellipsis": e.ellipsis || e.lines && e.lines > 0,
                    "tw-italic": e.italic,
                    "tw-nowrap": e.noWrap,
                    "tw-strong": e.bold
                }, a["tw-line-clamp-2"] = 2 === e.lines, a);
                e.align && (t[We[e.align]] = !0), e.color && (t[Te[e.color]] = !0), e.fontSize && (t[Ie[e.fontSize]] = !0), e.lineHeight && (t[Le[e.lineHeight]] = !0), e.transform && (t[Pe[e.transform]] = !0), e.decoration && (t[Re[e.decoration]] = !0);
                var n;
                return e.title ? n = e.title : e.ellipsis && "string" == typeof e.children && (n = e.children), u.createElement(e.type || "p", l.__assign({
                    className: c(e.className, t)
                }, i(e), {
                    title: n
                }), e.children);
                var a
            };
        n("kIPx");
        ! function(e) {
            e[e.Base = 1] = "Base", e[e.Alt = 2] = "Alt", e[e.Alt2 = 3] = "Alt2", e[e.Overlay = 4] = "Overlay", e[e.Accent = 5] = "Accent", e[e.AccentAlt = 6] = "AccentAlt", e[e.AccentAlt2 = 7] = "AccentAlt2"
        }(ze || (ze = {}));
        var Ge, Qe = (Ke = {}, Ke[ze.Base] = "tw-c-background", Ke[ze.Alt] = "tw-c-background-alt", Ke[ze.Alt2] = "tw-c-background-alt-2", Ke[ze.Overlay] = "tw-c-background-overlay", Ke[ze.Accent] = "tw-c-background-accent", Ke[ze.AccentAlt] = "tw-c-background-accent-alt", Ke[ze.AccentAlt2] = "tw-c-background-accent-alt-2", Ke);
        ! function(e) {
            e[e.None = 1] = "None", e[e.Small = 2] = "Small", e[e.Medium = 3] = "Medium", e[e.Large = 4] = "Large", e[e.Rounded = 5] = "Rounded"
        }(Ge || (Ge = {}));
        var Ke, $e, Ze, Ye, Je, Xe = ($e = {}, $e[Ge.None] = "tw-border-radius-none", $e[Ge.Small] = "tw-border-radius-small", $e[Ge.Medium] = "tw-border-radius-medium", $e[Ge.Large] = "tw-border-radius-large", $e[Ge.Rounded] = "tw-border-radius-rounded", $e),
            et = (Ze = {}, Ze[we.Base] = "tw-c-text", Ze[we.Alt] = "tw-c-text-alt", Ze[we.Alt2] = "tw-c-text-alt-2", Ze[we.Link] = "tw-c-text-link", Ze[we.Live] = "tw-c-text-live", Ze[we.Error] = "tw-c-text-error", Ze[we.Overlay] = "tw-c-text-overlay", Ze[we.OverlayAlt] = "tw-c-text-overlay-alt", Ze),
            tt = (Ye = {}, Ye[Ne.Size1] = "font-size-1", Ye[Ne.Size2] = "font-size-2", Ye[Ne.Size3] = "font-size-3", Ye[Ne.Size4] = "font-size-4", Ye[Ne.Size5] = "font-size-5", Ye[Ne.Size6] = "font-size-6", Ye[Ne.Size7] = "font-size-7", Ye[Ne.Size8] = "font-size-8", Ye),
            nt = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = (g = {
                        "tw-border-t": this.props.border || this.props.borderMarked || this.props.borderTop,
                        "tw-border-r": this.props.border || this.props.borderMarked || this.props.borderRight,
                        "tw-border-b": this.props.border || this.props.borderMarked || this.props.borderBottom,
                        "tw-border-l": this.props.border || this.props.borderLeft && !this.props.borderMarked,
                        "tw-border--marked": this.props.borderMarked
                    }, g["tw-elevation-" + this.props.elevation] = !!this.props.elevation, g);
                    this.props.borderRadius && (e[Xe[this.props.borderRadius]] = !0);
                    var t = this.getColorClass(),
                        n = this.getBackgroundClass(),
                        a = this.getBreakpointClasses(this.props),
                        r = this.getBreakpointClasses(this.props.breakpointExtraSmall, "xs"),
                        o = this.getBreakpointClasses(this.props.breakpointSmall, "sm"),
                        s = this.getBreakpointClasses(this.props.breakpointMedium, "md"),
                        d = this.getBreakpointClasses(this.props.breakpointLarge, "lg"),
                        p = this.getBreakpointClasses(this.props.breakpointExtraLarge, "xl"),
                        m = this.getBreakpointClasses(this.props.breakpointExtraExtraLarge, "xxl"),
                        h = l.__assign({}, this.props, i(this.props), {
                            className: c(this.props.className, e, n, t, a, r, o, s, d, p, m)
                        });
                    return u.createElement(Y, l.__assign({}, h));
                    var g
                }, t.prototype.getBreakpointClasses = function(e, t) {
                    if (!e) return "";
                    var n = [];
                    return t = t ? "tw-" + t + "-" : "tw-", e.fontSize && n.push(t + tt[e.fontSize]), n
                }, t.prototype.getColorClass = function() {
                    return this.props.background !== ze.Overlay || this.props.color ? this.props.color ? et[this.props.color] : "" : et[we.Overlay]
                }, t.prototype.getBackgroundClass = function() {
                    return this.props.background ? Qe[this.props.background] : ""
                }, t
            }(u.Component),
            it = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return u.createElement(nt, l.__assign({}, this.props), u.createElement("div", {
                        ref: this.props.refDelegate
                    }, this.props.children))
                }, t
            }(nt),
            at = (n("tcHh"), function(e) {
                var t = (o = {
                        "tw-avatar": !0
                    }, o["tw-avatar--size-" + e.size] = !!e.size, o),
                    n = {};
                e.borderRadius && (n[Xe[e.borderRadius]] = !0);
                var a, r;
                return a = 300 === e.size ? "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_300x300.png" : 96 === e.size || 80 === e.size ? "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_150x150.png" : "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_70x70.png", e.presenceIndicator && (r = u.createElement(J, {
                    className: "tw-avatar__presence",
                    display: g.Flex,
                    justifyContent: S.Center,
                    alignItems: d.Center,
                    position: C.Absolute
                }, u.createElement(Ce, {
                    border: !0,
                    status: e.presenceStatus
                }))), u.createElement("figure", l.__assign({
                    className: c(t)
                }, i(e)), u.createElement("img", {
                    className: c(n),
                    src: e.imageSrc || a,
                    alt: e.imageAlt,
                    onLoad: e.onImageLoad,
                    onError: e.onImageError
                }), r);
                var o
            });
        n("oWcd");
        ! function(e) {
            e[e.Inherit = 0] = "Inherit", e[e.Alt = 1] = "Alt", e[e.Alt2 = 2] = "Alt2", e[e.Brand = 3] = "Brand", e[e.Live = 4] = "Live", e[e.Warn = 5] = "Warn", e[e.Alert = 6] = "Alert", e[e.Success = 7] = "Success", e[e.Prime = 8] = "Prime", e[e.Placeholder = 9] = "Placeholder", e[e.OverlayPlaceholder = 10] = "OverlayPlaceholder"
        }(Je || (Je = {}));
        var rt, ot = (st = {}, st[Je.Inherit] = "tw-svg__asset--inherit", st[Je.Alt] = "tw-svg__asset--alt", st[Je.Alt2] = "tw-svg__asset--alt-2", st[Je.Brand] = "tw-svg__asset--brand", st[Je.Live] = "tw-svg__asset--live", st[Je.Warn] = "tw-svg__asset--warn", st[Je.Alert] = "tw-svg__asset--alert", st[Je.Success] = "tw-svg__asset--success", st[Je.Prime] = "tw-svg__asset--prime", st[Je.Placeholder] = "tw-svg__asset--placeholder", st[Je.OverlayPlaceholder] = "tw-svg__asset--overlay-placeholder", st);
        ! function(e) {
            e[e.AddFriend = 1] = "AddFriend", e[e.AddUser = 2] = "AddUser", e[e.AddReaction = 3] = "AddReaction", e[e.AngleDown = 4] = "AngleDown", e[e.AngleLeft = 5] = "AngleLeft", e[e.AngleRight = 6] = "AngleRight", e[e.AngleUp = 7] = "AngleUp", e[e.ArrowDown = 8] = "ArrowDown", e[e.ArrowLeft = 9] = "ArrowLeft", e[e.ArrowRight = 10] = "ArrowRight", e[e.ArrowUp = 11] = "ArrowUp", e[e.Automod = 12] = "Automod", e[e.Ban = 13] = "Ban", e[e.Bits = 14] = "Bits", e[e.ChatRiskFlag = 15] = "ChatRiskFlag", e[e.ChatSettingsBack = 16] = "ChatSettingsBack", e[e.Check = 17] = "Check", e[e.Clip = 18] = "Clip", e[e.Close = 19] = "Close", e[e.Collections = 20] = "Collections", e[e.Communities = 21] = "Communities", e[e.Conversations = 22] = "Conversations", e[e.Copy = 23] = "Copy", e[e.Crate = 24] = "Crate", e[e.Crown = 25] = "Crown", e[e.DeadGlitch = 26] = "DeadGlitch", e[e.Download = 27] = "Download", e[e.Edit = 28] = "Edit", e[e.Emoticons = 29] = "Emoticons", e[e.Events = 30] = "Events", e[e.EventsReminderAdd = 31] = "EventsReminderAdd", e[e.EventsReminderAdded = 32] = "EventsReminderAdded", e[e.EventsReminderRemove = 33] = "EventsReminderRemove", e[e.Extensions = 34] = "Extensions", e[e.Facebook = 35] = "Facebook", e[e.Featured = 36] = "Featured", e[e.Filter = 37] = "Filter", e[e.FollowCheck = 38] = "FollowCheck", e[e.FollowX = 39] = "FollowX", e[e.Friends = 40] = "Friends", e[e.FriendsSC = 41] = "FriendsSC", e[e.Gear = 42] = "Gear", e[e.Global = 43] = "Global", e[e.GlyphArrDown = 44] = "GlyphArrDown", e[e.GlyphArrLeft = 45] = "GlyphArrLeft", e[e.GlyphArrRight = 46] = "GlyphArrRight", e[e.GlyphArrUp = 47] = "GlyphArrUp", e[e.GlyphFollowers = 48] = "GlyphFollowers", e[e.GlyphLength = 49] = "GlyphLength", e[e.GlyphLive = 50] = "GlyphLive", e[e.GlyphLiveSmall = 51] = "GlyphLiveSmall", e[e.GlyphViews = 52] = "GlyphViews", e[e.GridLayout = 53] = "GridLayout", e[e.Halt = 54] = "Halt", e[e.Hash = 55] = "Hash", e[e.Heart = 56] = "Heart", e[e.HGCNexus = 57] = "HGCNexus", e[e.Hide = 58] = "Hide", e[e.HourGlass = 59] = "HourGlass", e[e.Ignore = 60] = "Ignore", e[e.Link = 61] = "Link", e[e.Lock = 62] = "Lock", e[e.LogoGlitch = 63] = "LogoGlitch", e[e.LogoTwitch = 64] = "LogoTwitch", e[e.LogoTwitchPrime = 65] = "LogoTwitchPrime", e[e.LogoTwitchPrimeHorizontal = 66] = "LogoTwitchPrimeHorizontal", e[e.Maximize = 67] = "Maximize", e[e.MessagesSC = 68] = "MessagesSC", e[e.Minimize = 69] = "Minimize", e[e.MiniPlayerExpand = 70] = "MiniPlayerExpand", e[e.MiniPlayerPause = 71] = "MiniPlayerPause", e[e.MiniPlayerPlay = 72] = "MiniPlayerPlay", e[e.More = 73] = "More", e[e.Muted = 74] = "Muted", e[e.NavBackpack = 75] = "NavBackpack", e[e.NavChannels = 76] = "NavChannels", e[e.NavCreative = 77] = "NavCreative", e[e.NavDashboard = 78] = "NavDashboard", e[e.NavDiscover = 79] = "NavDiscover", e[e.NavFollowing = 80] = "NavFollowing", e[e.NavGames = 81] = "NavGames", e[e.NavLogout = 82] = "NavLogout", e[e.NavManager = 83] = "NavManager", e[e.NavMessages = 84] = "NavMessages", e[e.NavMore = 85] = "NavMore", e[e.NavMyChannel = 86] = "NavMyChannel", e[e.NavProfile = 87] = "NavProfile", e[e.NavSearch = 88] = "NavSearch", e[e.NavSettings = 89] = "NavSettings", e[e.NavVideos = 90] = "NavVideos", e[e.Neck = 91] = "Neck", e[e.NotificationBell = 92] = "NotificationBell", e[e.OP = 93] = "OP", e[e.PermissionsAdd = 94] = "PermissionsAdd", e[e.PermissionsAdded = 95] = "PermissionsAdded", e[e.PermissionsRemove = 96] = "PermissionsRemove", e[e.Pin = 97] = "Pin", e[e.Pinned = 98] = "Pinned", e[e.Play = 99] = "Play", e[e.Playlist = 100] = "Playlist", e[e.Plus = 101] = "Plus", e[e.Popout = 102] = "Popout", e[e.QuestionMark = 103] = "QuestionMark", e[e.Reddit = 104] = "Reddit", e[e.RemoveTag = 105] = "RemoveTag", e[e.RequestsSC = 106] = "RequestsSC", e[e.Roman1 = 107] = "Roman1", e[e.Roman2 = 108] = "Roman2", e[e.Roman3 = 109] = "Roman3", e[e.Roman4 = 110] = "Roman4", e[e.Roman5 = 111] = "Roman5", e[e.RoomList = 112] = "RoomList", e[e.RoomListOpen = 113] = "RoomListOpen", e[e.SearchNoResults = 114] = "SearchNoResults", e[e.Share = 115] = "Share", e[e.Shirt = 116] = "Shirt", e[e.Star = 117] = "Star", e[e.Steam = 118] = "Steam", e[e.Sword = 119] = "Sword", e[e.Team = 120] = "Team", e[e.Theater = 121] = "Theater", e[e.Timeout = 122] = "Timeout", e[e.Timer = 123] = "Timer", e[e.ToBottom = 124] = "ToBottom", e[e.ToTop = 125] = "ToTop", e[e.Trash = 126] = "Trash", e[e.Trophy = 127] = "Trophy", e[e.Twitter = 128] = "Twitter", e[e.Unheart = 129] = "Unheart", e[e.Unignore = 130] = "Unignore", e[e.Unlock = 131] = "Unlock", e[e.Upload = 132] = "Upload", e[e.VKontakte = 133] = "VKontakte", e[e.Verified = 134] = "Verified", e[e.VideoPremiere = 135] = "VideoPremiere", e[e.VideoRerun = 136] = "VideoRerun", e[e.ViewerList = 137] = "ViewerList", e[e.Warning = 138] = "Warning", e[e.WhisperMuted = 139] = "WhisperMuted"
        }(rt || (rt = {}));
        var st, lt, ct, ut = (lt = {}, lt[rt.AddFriend] = {
                path: u.createElement("path", {
                    d: "M3,6 L1,6 L1,7 L3,7 L3,9 L4,9 L4,7 L6,7 L6,6 L4,6 L4,4 L3,4 L3,6 Z M9.57142857,3 L12.4285714,3 L13.8571429,4.42857143 L13.8571429,8 L11.7142857,9.42857143 L11.7142857,10.1428571 L14.5714286,10.1428571 L16,11.5714286 L16,13 L6,13 L6,11.5714286 L7.42857143,10.1428571 L10.2857143,10.1428571 L10.2857143,9.42857143 L8.14285714,8 L8.14285714,4.42857143 L9.57142857,3 Z"
                }),
                width: 16,
                height: 16
            }, lt[rt.AddUser] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M15,9h-3v3h-2V9H7V7h3V4h2v3h3V9z M9,6H6v4h2h1v3h4l0,0l0,0v1h-3H4H1v-1l3-3h2L4,8V2h6v1H9V6z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.AddReaction] = {
                path: u.createElement("path", {
                    d: "M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10zm0 2C5.373 24 0 18.627 0 12S5.373 0 12 0s12 5.373 12 12-5.373 12-12 12zm4-12c0-.776-.223-1-1-1h-2V9c0-.776-.223-1-1-1-.776 0-1 .224-1 1v2H9c-.776 0-1 .224-1 1 0 .777.224 1 1 1h2v2c0 .777.224 1 1 1 .777 0 1-.223 1-1v-2h2c.777 0 1-.223 1-1z"
                }),
                width: 24,
                height: 24
            }, lt[rt.AngleDown] = {
                path: u.createElement("path", {
                    d: "M8 8.89L2.556 3.444 1 5l7 7 7-7-1.556-1.556"
                }),
                width: 16,
                height: 16
            }, lt[rt.AngleLeft] = {
                path: u.createElement("path", {
                    d: "M7.11 8l5.446-5.444L11 1 4 8l7 7 1.556-1.556"
                }),
                width: 16,
                height: 16
            }, lt[rt.AngleRight] = {
                path: u.createElement("path", {
                    d: "M9.444 8L4 2.556 5.556 1l7 7-7 7L4 13.444"
                }),
                width: 16,
                height: 16
            }, lt[rt.AngleUp] = {
                path: u.createElement("path", {
                    d: "M8 6.11l5.444 5.446L15 10 8 3l-7 7 1.556 1.556"
                }),
                width: 16,
                height: 16
            }, lt[rt.ArrowDown] = {
                path: u.createElement("path", {
                    d: "M14.924 11.579a.994.994 0 0 0-.92-.616h-2.027V3.999A.997.997 0 0 0 10.983 3H8.998a.997.997 0 0 0-.995.999v6.964H5.995a.995.995 0 0 0-.92.616c-.153.373-.068.803.216 1.089l4.006 4.039a.992.992 0 0 0 1.406 0l4.006-4.039c.284-.286.369-.716.215-1.089",
                    fillRule: "evenodd"
                }),
                width: 20,
                height: 20
            }, lt[rt.ArrowLeft] = {
                path: u.createElement("path", {
                    d: "M8.42 14.924a.994.994 0 0 0 .617-.919v-2.028H16a.997.997 0 0 0 .999-.994V8.998a.997.997 0 0 0-1-.995H9.038V5.995a.995.995 0 0 0-.616-.919 1.003 1.003 0 0 0-1.09.215L3.294 9.297a.992.992 0 0 0 0 1.406l4.039 4.006c.286.284.716.369 1.089.215",
                    fillRule: "evenodd"
                }),
                width: 20,
                height: 20
            }, lt[rt.ArrowRight] = {
                path: u.createElement("path", {
                    d: "M11.579 5.076a.994.994 0 0 0-.616.919v2.028H3.999a.997.997 0 0 0-1 .994v1.985c0 .55.448.995 1 .995h6.964v2.008c0 .402.243.765.616.919.373.154.803.069 1.089-.215l4.039-4.006a.992.992 0 0 0 0-1.406l-4.04-4.006a1.003 1.003 0 0 0-1.088-.215",
                    fillRule: "evenodd"
                }),
                width: 20,
                height: 20
            }, lt[rt.ArrowUp] = {
                path: u.createElement("path", {
                    d: "M5.076 8.42a.994.994 0 0 0 .92.617h2.027V16c0 .552.446.999.994.999h1.985c.55 0 .995-.447.995-1V9.038h2.008a.995.995 0 0 0 .92-.616 1.003 1.003 0 0 0-.216-1.09l-4.006-4.038a.992.992 0 0 0-1.406 0L5.291 7.332a1.003 1.003 0 0 0-.215 1.089"
                }),
                width: 20,
                height: 20
            }, lt[rt.Automod] = {
                path: u.createElement("path", {
                    d: "M10 0l9 5c0 10.8852-9 15-9 15S1 15.8852 1 5l9-5z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Ban] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M8,15c-3.866,0-7-3.134-7-7s3.134-7,7-7s7,3.134,7,7S11.866,15,8,15z M3,8c0,1.019,0.309,1.964,0.832,2.754l6.922-6.922C9.964,3.309,9.019,3,8,3C5.238,3,3,5.238,3,8z M12.169,5.246l-6.923,6.923C6.036,12.691,6.98,13,8,13c2.762,0,5-2.238,5-5C13,6.98,12.691,6.036,12.169,5.246z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Bits] = {
                path: u.createElement("path", {
                    d: "M16.6,13.2L9,17.4l-7.6-4.2L9,0.5L16.6,13.2z M9.1,9.4l-5,3l5,2.5l5-2.6L9.1,9.4z M6,8.9L9,7l3,1.9L9,4.4L6,8.9z"
                }),
                width: 18,
                height: 18
            }, lt[rt.ChatRiskFlag] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M3,14 L1,14 L1,2 L3,2 L3,14 L3,14 Z M4,2 L11,2 L11,4 L15,4 L15,11 L8,11 L8,9 L4,9 L4,2 L4,2 Z"
                }),
                width: 16,
                height: 16
            }, lt[rt.Check] = {
                path: u.createElement("path", {
                    d: "M16,2.24074074 C16,2.24074074 6.56165287,14.0131532 6.46051168,14 C6.39491888,13.9966933 0,8.44444444 0,8.44444444 L2.13570634,5.74074074 L6.10456062,9.12962963 L13.4905451,0 L16,2.24074074 Z"
                }),
                width: 16,
                height: 16
            }, lt[rt.ChatSettingsBack] = {
                path: u.createElement("path", {
                    d: "M1 5l6-4v8z",
                    fillRule: "evenodd"
                }),
                width: 10,
                height: 10
            }, lt[rt.Clip] = {
                path: u.createElement("path", {
                    d: "M14.802 7.804l-3.83 1.026 2.928 2.321 3.83-1.026-2.928-2.321zm2.895-.776l3.981-1.067.777 2.898-1.83.49-2.928-2.321zM7.969 9.635l-1.745.467L7 13l3.898-1.044-2.929-2.321zM7 13h16v9H7v-9zm1.969 3h2.785l2.228-3h-2.785l-2.228 3zm7.018 0h2.785L21 13h-2.785l-2.228 3z"
                }),
                width: 30,
                height: 30
            }, lt[rt.Close] = {
                path: u.createElement("path", {
                    d: "M8 6.586L3.757 2.343 2.343 3.757 6.586 8l-4.243 4.243 1.414 1.414L8 9.414l4.243 4.243 1.414-1.414L9.414 8l4.243-4.243-1.414-1.414",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Collections] = {
                path: u.createElement("path", {
                    d: "M1 7h18v12H1V7zm12 6l-5-3v6l5-3zM3 4h14v2H3V4zm2-3h10v2H5V1z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Communities] = {
                path: u.createElement("path", {
                    d: "M3.25 17L4 14H2l.75 3h.5zm12 0l.75-3h-2l.75 3h.5zm-6.82-1l-1.144-4H6L5 6h8l-1 6h-1.286L9.57 16H8.43zM5 5H4l.5 3H1V4h4v1zm-.333 4l.606 3.636L5 14H1L0 9h4.667zM13.5 8H17V4h-4v1h1l-.5 3zm-.167 1H18l-1 5h-4l-.273-1.364L13.333 9zM7 1h4v4H7V1z"
                }),
                width: 18,
                height: 18
            }, lt[rt.Conversations] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M2.57894737,12.1904762 L0,12.1904762 L0,0 L14,0 L14,12.1904762 L7,12.1904762 L2.57894737,16 L2.57894737,12.1904762 Z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Copy] = {
                path: u.createElement("g", {
                    fillRule: "evenodd"
                }, u.createElement("path", {
                    d: "M9 19.607l4.755-4.755 3.535 3.535-4.754 4.755L9 19.607zm1.44-.025l4.022-4.023 2.12 2.12-4.022 4.024-2.12-2.122zm4.412-5.827L19.607 9l3.535 3.536-4.755 4.754-3.535-3.535zm.707.707l4.022-4.023 2.122 2.12-4.024 4.023-2.12-2.12z"
                }), u.createElement("path", {
                    d: "M12.987 17.74l4.754-4.753 1.415 1.414-4.754 4.755z"
                })),
                width: 32,
                height: 32
            }, lt[rt.Crate] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M8 8h3v4.3l2-.7V8h3v3l-.4 1L8 15H7V7l1 1zM7 7v8H6L.4 12 0 11V8h1v3l4 2 1-1V8l1-1zM15 6h-2V3.4l-2-.6V6H8L7 7V1h1l7.6 2 .4 1v2h-1zM0 6V4l.4-1L6 1h1v6L6 6V2.1L1 3.9V6H0z"
                }), u.createElement("path", {
                    opacity: ".5",
                    d: "M13 8h3l-1-1h-2"
                }), u.createElement("path", {
                    fillOpacity: ".25",
                    d: "M13 7h2l1-1h-3"
                }), u.createElement("path", {
                    opacity: ".5",
                    d: "M8 8h3V7H7"
                }), u.createElement("path", {
                    fillOpacity: ".25",
                    d: "M7 7h4V6H8"
                }), u.createElement("path", {
                    opacity: ".25",
                    d: "M3 8H0l1-1h2M6 8H4V7h3"
                }), u.createElement("path", {
                    opacity: ".75",
                    d: "M11 5h2V3.4l-2-.6M11 12.3l2-.6V9h-2"
                }), u.createElement("path", {
                    d: "M1.5 3.3L.3 1.9l.2-.8L3.8 0l.5.1 1.5 1.6-4.3 1.6zm.1-1.5l.4.6 2.3-.8-.5-.6-2.2.8z"
                }), u.createElement("path", {
                    fillOpacity: ".5",
                    d: "M4 12.5l2 1V8H4M3 12l-2-1V8h2"
                }), u.createElement("path", {
                    opacity: ".3",
                    d: "M3 12.1l1 .4V9H3"
                }), u.createElement("path", {
                    fillOpacity: ".5",
                    d: "M4 2.7l2-.6V6H4M3 6H1V3.9l2-.7"
                }), u.createElement("path", {
                    opacity: ".3",
                    d: "M3 5h1V2.7l-1 .5"
                })),
                width: 16,
                height: 15
            }, lt[rt.Crown] = {
                path: u.createElement("polygon", {
                    points: "15.7,5.8 10,0.1 4.3,5.8 0,1.5 0,12.9 20,12.9 20,1.5"
                }),
                width: 20,
                height: 13
            }, lt[rt.DeadGlitch] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M26,17.4589613 L26,3 L4,3 L4,22.0601057 L10.0032868,22.0601057 L10.0032868,26 L14.0004537,22.0601057 L21.3322933,22.0601057 L26,17.4589613 L26,17.4589613 Z M21.0896458,26.0850335 L15.1583403,26.0850335 L11.2051771,30 L7.24798611,30 L7.24798611,26.0850335 L0,26.0850335 L0,5.21746493 L1.97773958,0 L29,0 L29,18.2620736 L21.0896458,26.0850335 L21.0896458,26.0850335 Z"
                }), u.createElement("path", {
                    d: "M20.8587626,12.1710126 L22.4052753,13.7175252 L23.7175252,12.4052753 L22.1710126,10.8587626 L23.7175252,9.31224999 L22.4052753,8 L20.8587626,9.54651264 L19.31225,8 L18,9.31224999 L19.5465126,10.8587626 L18,12.4052753 L19.31225,13.7175252 L20.8587626,12.1710126 Z M11.8587626,12.1710126 L13.4052753,13.7175252 L14.7175252,12.4052753 L13.1710126,10.8587626 L14.7175252,9.31224999 L13.4052753,8 L11.8587626,9.54651264 L10.31225,8 L9,9.31224999 L10.5465126,10.8587626 L9,12.4052753 L10.31225,13.7175252 L11.8587626,12.1710126 Z"
                })),
                width: 30,
                height: 30
            }, lt[rt.Download] = {
                path: u.createElement("path", {
                    d: "M30.7,12.6c0.4-0.7,0.6-1.5,0.6-2.4c0-3-2.4-5.4-5.4-5.4c-1,0-2,0.3-2.8,0.8C21.6,2.3,18.2,0,14.3,0   C8.9,0,4.6,4.4,4.6,9.8c0,0.3,0,0.7,0.1,1C1.9,12.2,0,15.1,0,18.4c0,4.8,3.9,8.7,8.7,8.7h19.4c4.1,0,7.5-3.4,7.5-7.5   C35.6,16.4,33.6,13.6,30.7,12.6z M16.5,22.3l-6.7-7.1h4.5V7.9h4.4v7.3h4.6L16.5,22.3z"
                }),
                width: 35.6,
                height: 27.1
            }, lt[rt.Edit] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M6.414,12.414L3.586,9.586l8-8l2.828,2.828L6.414,12.414z M4.829,14H2l0,0v-2.828l0.586-0.586l2.828,2.828L4.829,14z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Emoticons] = {
                path: u.createElement("path", {
                    d: "M6.714 5.143H5v1.714h1.714V5.143zM12 0H4L0 4v8l4 4h8l4-4V4l-4-4zM5 2L2 5v6l3 3h6l3-3V5l-3-3H5zm4.286 4.857H11V5.143H9.286v1.714zM6 12h4l2-2V9H4v1l2 2z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Events] = {
                path: u.createElement("path", {
                    d: "M17 7H3V5h2a1 1 0 1 0 2 0h6a1 1 0 1 0 2 0h2v2zm-3 5a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0 4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-4-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0 4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-4-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0 4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zM17 3h-2V2a1 1 0 1 0-2 0v1H7V2a1 1 0 1 0-2 0v1H3c-1.103 0-2 .897-2 2v12c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2z"
                }),
                width: 20,
                height: 20
            }, lt[rt.EventsReminderAdd] = {
                path: u.createElement("path", {
                    d: "M17 2c1.103 0 2 .897 2 2v14c0 1.103-.897 2-2 2H3c-1.103 0-2-.897-2-2V4c0-1.103.897-2 2-2h2V1a1 1 0 1 1 2 0v1h6V1a1 1 0 1 1 2 0v1h2zM3 18h14.001L17 8H3v10zM3 4v2h14V4h-2a1 1 0 1 1-2 0H7a1 1 0 1 1-2 0H3zm8 8h2a1 1 0 0 1 0 2h-2v2a1 1 0 1 1-2 0v-2H7a1 1 0 0 1 0-2h2v-2a1 1 0 1 1 2 0v2z"
                }),
                width: 20,
                height: 20
            }, lt[rt.EventsReminderAdded] = {
                path: u.createElement("path", {
                    d: "M17 2c1.103 0 2 .897 2 2v14c0 1.103-.897 2-2 2H3c-1.103 0-2-.897-2-2V4c0-1.103.897-2 2-2h2V1a1 1 0 1 1 2 0v1h6V1a1 1 0 1 1 2 0v1h2zM3 4v2h14V4h-2a1 1 0 1 1-2 0H7a1 1 0 1 1-2 0H3zm4.707 8.293a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.488-.082l4-5a1 1 0 1 0-1.562-1.25l-3.302 4.128-1.21-1.21z"
                }),
                width: 20,
                height: 20
            }, lt[rt.EventsReminderRemove] = {
                path: u.createElement("path", {
                    d: "M17 2c1.103 0 2 .897 2 2v14c0 1.103-.897 2-2 2H3c-1.103 0-2-.897-2-2V4c0-1.103.897-2 2-2h2V1a1 1 0 1 1 2 0v1h6V1a1 1 0 1 1 2 0v1h2zM3 4v2h14V4h-2a1 1 0 1 1-2 0H7a1 1 0 1 1-2 0H3zm7 7.586L7.707 9.293a1 1 0 1 0-1.414 1.414L8.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L10 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L11.414 13l2.293-2.293a1 1 0 1 0-1.414-1.414L10 11.586z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Extensions] = {
                path: u.createElement("path", {
                    fillRule: "evenodd",
                    d: "M16 3v4h-2l-1 1v1l1 1h2v6h-5v-2l-1-1H9l-1 1v2H3v-6H1L0 9V8l1-1h2V3h5V1l1-1h1l1 1v2"
                }),
                width: 16,
                height: 16
            }, lt[rt.Facebook] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M16.842 24v-6.842h2.653l.398-2.667h-3.05v-1.7c0-.772.246-1.298 1.525-1.298L20 11.49V9.105A25.285 25.285 0 0 0 17.623 9c-2.353 0-3.963 1.243-3.963 3.525v1.967H11v2.666h2.66V24h3.182",
                    fillRule: "evenodd"
                }),
                width: 32,
                height: 32
            }, lt[rt.Featured] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M0 0h20v20"
                }), " ", u.createElement("path", {
                    fill: "#FFF",
                    d: "M15 5V2h-2v3h-3v2h3v3h2V7h3V5"
                })),
                width: 20,
                height: 20
            }, lt[rt.Filter] = {
                path: u.createElement("path", {
                    d: "M1 4h6v3H1V4zm0 5h10v3H1V9zm0 5h16v3H1v-3zm10.5-9.914l3 3 3-3L18.914 5.5 14.5 9.914 10.086 5.5 11.5 4.086z"
                }),
                width: 20,
                height: 20
            }, lt[rt.FollowCheck] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M6.5,12.75L2,8.25l2-2l2.5,2.5l5.5-5.5l2,2L6.5,12.75z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.FollowX] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M14,11.5L11.5,14L8,10.5L4.5,14L2,11.5L5.5,8L2,4.5L4.5,2L8,5.5L11.5,2L14,4.5L10.5,8L14,11.5z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Friends] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M12.64 0h5.2l1.04 2v4L16.8 8v1h3.12L22 10v2H11l1.64-1.563V9h1.04V8l-1.04-.984v-2.25l-1.038-1.954V2"
                }), u.createElement("path", {
                    d: "M4 3h6l1 2v5l-2 2v1h3l2 1v2H0v-2l2-1h3v-1l-2-2V5"
                })),
                width: 21,
                height: 16
            }, lt[rt.FriendsSC] = {
                path: u.createElement("path", {
                    d: "M17.5 6L19 7.5V12l-2 1v1h3l1 1v1h-5.5v-2.5L13 11V7.5L14.5 6h3zM9 2l2 2v5l-3 2v1h4l2 2v2H0v-2l2-2h4v-1L3 9V4l2-2h4z",
                    fillRule: "evenodd"
                }),
                width: 21,
                height: 16
            }, lt[rt.Gear] = {
                path: u.createElement("path", {
                    d: "M6.359 0h3.282l1.436 2.8h3.282L16 5.2 14.359 8 16 10.8l-1.641 2.4h-3.282L9.64 16H6.359l-1.436-2.8H1.641L0 10.8 1.641 8 0 5.2l1.641-2.4h3.282L6.36 0zM8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"
                }),
                width: 16,
                height: 16
            }, lt[rt.Global] = {
                path: u.createElement("path", {
                    d: "M9 15A6 6 0 1 0 9 3a6 6 0 0 0 0 12zm1.619-1.8A4.5 4.5 0 0 1 6 5.646V7.5l2 2v1.081l2.619 2.619zm1.881-1.371c.625-.773 1-1.757 1-2.829a4.491 4.491 0 0 0-1.671-3.5H10.5L9.041 6.959 8.5 7.5v1H11l1.5 1.5v1.829z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphArrDown] = {
                path: u.createElement("path", {
                    d: "M3 5h10l-5 6"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphArrLeft] = {
                path: u.createElement("path", {
                    d: "M11 3v10L5 8"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphArrRight] = {
                path: u.createElement("path", {
                    d: "M5 13V3l6 5"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphArrUp] = {
                path: u.createElement("path", {
                    d: "M3 11h10L8 5"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphFollowers] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M8,13.5L1.5,7V4l2-2h3L8,3.5L9.5,2h3l2,2v3L8,13.5z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphLength] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M8,14c-3.313,0-6-2.687-6-6s2.687-6,6-6s6,2.687,6,6S11.313,14,8,14z M8,3C5.238,3,3,5.238,3,8s2.238,5,5,5s5-2.238,5-5S10.762,3,8,3z M9.646,10.354l-2-2L7.515,7.879l1-4l0.971,0.242L8.554,7.847l1.8,1.8L9.646,10.354z"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphLive] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M11,14H5H2v-1l3-3h2L5,8V2h6v6l-2,2h2l3,3v1H11z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphLiveSmall] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M11,14H5H2v-1l3-3h2L5,8V2h6v6l-2,2h2l3,3v1H11z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.GlyphViews] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M11,13H5L1,9V8V7l4-4h6l4,4v1v1L11,13z M8,5C6.344,5,5,6.343,5,8c0,1.656,1.344,3,3,3c1.657,0,3-1.344,3-3C11,6.343,9.657,5,8,5z M8,9C7.447,9,7,8.552,7,8s0.447-1,1-1s1,0.448,1,1S8.553,9,8,9z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.GridLayout] = {
                path: u.createElement("path", {
                    d: "M0.8,0h14.5v3.9H0.8V0z M0.8,5h8.9v3.4H0.8V5z M11.4,5h3.8v3.4h-3.8V5z M0.8,9.6h14.5V16H0.8V9.6z"
                }),
                width: 16,
                height: 16
            }, lt[rt.Halt] = {
                path: u.createElement("path", {
                    fillRule: "nonzero",
                    d: "M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm0 2a9 9 0 1 1 0-18 9 9 0 0 1 0 18zm-5-9c0 .556.446 1 .995 1h8.01c.54 0 .995-.448.995-1 0-.556-.446-1-.995-1h-8.01C5.455 9 5 9.448 5 10z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Hash] = {
                path: u.createElement("path", {
                    fillRule: "evenodd",
                    d: "M7.714 12l.572-4h4l-.572 4h-4zM17 12h-3.286l.572-4H17c.553 0 1-.447 1-1 0-.553-.447-1-1-1h-2.43L15 3c0-.552-.447-1-1-1-.553 0-1 .448-1 1l-.43 3h-4L9 3c0-.552-.447-1-1-1-.553 0-1 .448-1 1l-.43 3H3c-.552 0-1 .447-1 1 0 .553.448 1 1 1h3.286l-.572 4H3c-.552 0-1 .447-1 1 0 .553.448 1 1 1h2.43L5 17c0 .553.448 1 1 1 .553 0 1-.447 1-1l.43-3h4L11 17c0 .553.447 1 1 1 .553 0 1-.447 1-1l.43-3H17c.553 0 1-.447 1-1 0-.553-.447-1-1-1z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Heart] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M8,14L1,7V4l2-2h3l2,2l2-2h3l2,2v3L8,14z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.HGCNexus] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M11,0L9.7,4.4c0,0,7.7-1.4,9.7,8.9c0,0.1,0,0.1,0,0.2c0.4-1.1,0.6-2.3,0.6-3.5C20.1,4.8,16.1,0.5,11,0z"
                }), u.createElement("path", {
                    d: "M2.5,16.5c-0.1,0-0.1,0-0.2-0.1C3.1,17.4,4,18.1,5,18.7c4.5,2.6,10.2,1.3,13.2-2.9l-3.1-3.3C15.1,12.6,12.5,19.9,2.5,16.5z"
                }), u.createElement("path", {
                    d: "M8.2,0.2c0.1,0,0.1-0.1,0.2-0.1C7.2,0.3,6.1,0.7,5,1.3C0.5,3.9-1.2,9.5,0.9,14.2l4.4-1.1C5.3,13.1,0.3,7.1,8.2,0.2z"
                })),
                width: 20,
                height: 20
            }, lt[rt.Hide] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M6,7.10240605 L2.65360907,10.448797 L2.10240605,11 L1,9.89759395 L1.55120302,9.34639093 L4.89759395,6 L1.55120302,2.65360907 L1,2.10240605 L2.10240605,1 L2.65360907,1.55120302 L6,4.89759395 L9.34639093,1.55120302 L9.89759395,1 L11,2.10240605 L10.448797,2.65360907 L7.10240605,6 L10.448797,9.34639093 L11,9.89759395 L9.89759395,11 L9.34639093,10.448797 L6,7.10240605 L6,7.10240605 Z"
                }),
                width: 16,
                height: 16
            }, lt[rt.HourGlass] = {
                path: u.createElement("path", {
                    d: "M4.79 8.37c-.058-.508-.43-.426-2.76-1.79C-.64 5.018.08 3.134.08 3.134H6v.002l4.98.007s.66 1.88-2.01 3.45c-2.383 1.4-2.76 1.26-2.814 1.806v.048c0 .97.095.574 2.668 2.398 2.572 1.825 2.158 4.023 2.158 4.023H-.03s-.586-2.204 1.987-4.035c2.572-1.83 2.83-1.406 2.83-2.378 0-.03 0-.06.002-.085zM0 15.933h11V17H0zM0 1h11v1.067H0z"
                }),
                width: 11,
                height: 18
            }, lt[rt.Ignore] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M13,11.341V16l-3.722-3.102C8.863,12.959,8.438,13,8,13c-3.866,0-7-2.462-7-5.5C1,4.462,4.134,2,8,2s7,2.462,7,5.5C15,8.996,14.234,10.35,13,11.341z M11,7H5v1h6V7z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Link] = {
                path: u.createElement("path", {
                    fillRule: "evenodd",
                    d: "M9 4h4l2 2v4l-2 2H9v-2h4V6H9V4zm-2 8H3l-2-2V6l2-2h4v2H3v4h4v2zM6 7h4v2H6V7z"
                }),
                width: 16,
                height: 16
            }, lt[rt.Lock] = {
                path: u.createElement("path", {
                    d: "M7.987 6.599C7.987 5.166 8.685 4 9.997 4c1.311 0 2.009 1.166 2.009 2.599v2.412H7.987V6.599zm7.256 2.412h-1.248V6.599C13.995 4.063 12.411 2 9.997 2S5.998 4.063 5.998 6.599v2.412H4.751c-.415 0-.751.359-.751.8v7.397c0 .442.336.8.751.8h10.492c.414 0 .751-.358.751-.8V9.811c0-.441-.337-.8-.751-.8z",
                    fillRule: "evenodd"
                }),
                width: 20,
                height: 20
            }, lt[rt.LogoGlitch] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M21,9h-2v6h2V9z M5.568,3L4,7v17h5v3h3.886L16,24h5l6-6V3H5.568z M25,16l-4,4h-6l-3,3v-3H8V5h17V16z M16,9h-2v6h2V9z",
                    fillRule: "evenodd"
                }),
                width: 30,
                height: 30
            }, lt[rt.LogoTwitch] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M88,5h-6V0h-9l-6,5h-5.5L59,7.5V5h-5V0H36v5H16l-5-5H0v22l5,5.25L14,32h6v-1.5l3,1.5h12l2-3l1,3h7v-3l3,3h8l0.5-3l2.5,3h10l3-3v3h4l3-3v3h7l7-6V10L88,5z M13,13H8v6h5v6H6l-4-4V2h6v5h5V13z M36,21.5L32.5,25H15V7h6v12h2V7h6v12h2V7h5V21.5z M44,25h-6V7h6V25z M44,5h-6V2h6V5z M57,13h-5v6h5v6h-7l-4-4V2h6v5h5V13z M72,13h-7v6h7v6h-9l-4-4V11l4-4h9V13z M91,25h-6V13h-5v12h-6V2h6v5h7l4,4V25z",
                    fillRule: "evenodd"
                }),
                width: 94,
                height: 32
            }, lt[rt.LogoTwitchPrime] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M289.2 110.3c.8-.5 1.2-1.5 1.2-2.4 0-2.1-1.3-3.2-3.8-3.2-3.3 0-5.2 2-5.7 6 1.5.3 3 .4 4.5.4 1.3.1 2.6-.2 3.8-.8z"
                }), u.createElement("path", {
                    d: "M287.9 15H269V0h-33.1l-15.6 15H203l-8 9.3V15h-16V0h-59v15H48.5L32.9 0H0v69.4L15.6 85l26 15h22.5v-2.9l8.7 2.9h42l7.4-8.1 1 8.1h27.5l.6-8.1 6.7 5.4v48c-.1.9.6 1.7 1.5 1.7h15.2c.9-.1 1.7-.8 1.8-1.8l1.6-8.2h1.6c3.8 0 7.4-1.9 9.6-5 0 0-.8 2.699976-1.1 3.599976-.2.5 0 .700024.5.900024.133333.333333 5.266667.5 15.4.5 1 .2 1.9-.500024 2.1-1.400024L207.5 132s.7 2.699976.9 3.599976c.1.9.9 1.500024 1.8 1.400024H266c2.5 0 2.7-.799976 3.5-1.599976 2.7.8 5.2 1.399976 7.8 1.599976 16.9.9 23.7-6.6 24-9.9.1-.8 2.2-13.2.8-21.1-1-5.8-6.6-11.4-15.9-11.4L304 83.2v-52L287.9 15zM26 41v18h16v19H19.1L6.9 65.9v-59H26V22h16v19H26zm81.5 37H49V22h19v37h7V22h19v37h7V22h19v44l-12.5 12zm19.5 0V22h19v56h-19zm19-62h-19V6.9h19V16zm7 49.9v-59h19V22h16v19h-16v18h16v19h-23.2L153 65.9zm32.1 59.4c-1.6 1.1-3.6 1.7-5.6 1.7-1.4 0-2.7-.2-4-.7-1.2-.4-2.3-1-3.2-1.8v11.2c.1.6-.2 1.1-.8 1.3h-5.4c-.4 0-.7-.1-1-.3-.2-.3-.3-.6-.3-1v-34.1c0-.4.1-.7.3-1 .3-.2.6-.3 1-.3h3.7c.7-.1 1.3.4 1.4 1.1l.4 1.3c1.1-1 2.3-1.8 3.7-2.4 1.4-.6 2.9-.9 4.4-.9 3-.1 6 1.2 7.8 3.6 1.9 2.4 2.9 5.7 2.9 9.8 0 2.7-.4 5.2-1.4 7.6-.8 1.9-2.2 3.6-3.9 4.9zM206.3 22H236v19h-22v18h22v19h-29.7L195 65.9V34.7L206.3 22zm5.6 84.6c-.3.2-.6.4-1 .3h-2.3c-1 0-1.9.1-2.9.3-1 .2-1.9.5-2.9.8v17.1c0 .4-.1.7-.3 1-.3.2-.6.3-1 .3h-4.9c-.6.1-1.2-.3-1.3-.9v-24c0-.4.1-.7.3-1 .3-.2.6-.3 1-.3h3.7c.7-.1 1.3.4 1.4 1.1l.7 2.8c1.1-1.3 2.4-2.4 3.8-3.2 1.2-.6 2.5-.9 3.8-.9h.7c.4 0 .7.1 1 .3.2.3.4.6.3 1l.2 4.3c0 .4-.1.7-.3 1zm11 19.5c-.3.2-.6.4-1 .3H217c-.6.1-1.2-.3-1.3-.9v-24c0-.4.1-.7.3-1 .3-.2.6-.3 1-.3h4.9c.6-.1 1.1.2 1.3.8v24.1c0 .4-.1.7-.3 1zm-6.5-30.9c-1.6-1.6-1.6-4.2 0-5.8 1.8-1.4 4.4-1.4 6.2 0 1.6 1.6 1.6 4.1 0 5.8-1.8 1.4-4.4 1.4-6.2 0zm52.9 29.9c0 .4-.1.7-.3 1-.3.2-.6.3-1 .3h-4.9c-.6.1-1.2-.3-1.3-.9V108.7c0-2.3-1-3.5-3.1-3.5-1.9 0-3.8.5-5.6 1.3V125c0 .4-.1.7-.3 1-.3.2-.6.4-1 .3H247c-.6.1-1.2-.3-1.3-.9V108.6c0-2.3-1-3.5-3.1-3.5-2 0-3.9.5-5.6 1.4V125c0 .4-.1.7-.3 1-.3.2-.6.3-1 .3h-4.9c-.6.1-1.2-.3-1.3-.9v-24c0-.4.1-.7.3-1 .3-.2.6-.3 1-.3h3.7c.7-.1 1.3.4 1.4 1.1l.4 1.4c1.5-1 3.2-1.9 4.9-2.5 1.4-.5 2.9-.7 4.5-.7 3.1 0 5.2 1.1 6.5 3.3 1.5-1 3.2-1.9 4.9-2.5 1.5-.5 3.1-.8 4.8-.8 2-.1 4 .6 5.5 2 1.4 1.5 2.1 3.5 2 5.6v18l-.1.1zm17.8-25.6c3.2 0 5.6.8 7.4 2.3 1.8 1.5 2.8 3.8 2.7 6.1.1 2.3-1 4.5-2.9 5.8-1.9 1.3-4.8 2-8.5 2-1.7 0-3.4-.2-5.1-.6.2 2.3.9 3.9 2.1 4.9 1.6 1.1 3.4 1.6 5.3 1.5.9 0 1.9-.1 2.8-.2 1.3-.2 2.5-.5 3.8-.8l.3-.1h.3c.6 0 .9.4.9 1.2v2.4c0 .4 0 .8-.2 1.1-.2.3-.5.5-.9.6-2.5 1-5.2 1.4-7.9 1.4-4.2 0-7.5-1.2-9.7-3.5-2.3-2.3-3.4-5.6-3.4-10s1.2-7.9 3.5-10.4c2.2-2.4 5.4-3.7 9.5-3.7zM278 78V41h-16v37h-19V6.9h19V22h22.3L297 34.7V78h-19z"
                }), u.createElement("path", {
                    d: "M177.3 105.1c-1.8 0-3.5.5-5 1.4v13.4c1.5.9 3.2 1.4 5 1.4 1.6.1 3.2-.6 4.2-1.9.9-1.3 1.3-3.3 1.3-6.1s-.4-4.9-1.3-6.2c-.9-1.4-2.5-2.1-4.2-2z"
                })),
                width: 304,
                height: 147
            }, lt[rt.LogoTwitchPrimeHorizontal] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M537 38c-2.5-4-7.3-8.5-16.6-8.5-9.4 0-23 8.3-24 9a1 1 0 0 1-.8.3 1 1 0 0 1-.7-.6 12.4 12.4 0 0 0-2.6-3.5c-3-3-6.4-4.2-11.3-4.2-3.2 0-9.2 2.4-9.8 2.8a1.3 1.3 0 0 1-1.2 0c-2.5-1.8-9.8-2.8-13.8-2.8a25.3 25.3 0 0 0-9.8 2h-.2a1 1 0 0 1-1 0 6.5 6.5 0 0 0-4.3-1.7 17 17 0 0 0-5 .8 24.6 24.6 0 0 1-3.2.7l-4.4.4a1 1 0 0 1-1-.4 1 1 0 0 1 0-1 14.6 14.6 0 0 0 .6-2 11 11 0 0 0-2-11 12 12 0 0 0-9.3-4 17 17 0 0 0-9.5 3c-.8.4-2.3 1.4-4.2 2.8-5.4 3.8-13.5 9.4-17.5 11.3-1.3.6-1.7-.8-3.7-1s-5 1-7.4 1.4l-3.8.5a1 1 0 0 1-1.2-.8 17 17 0 0 0-2.8-6c-4.8-7-12.8-8.6-18.6-8.8l-12.8-.2c-8 0-19.2.5-19.2.5l-16 14-15.4-15.4h-18.8V0h-32.6l-15.4 15.4h-17L192 24v-8.6h-15.3V0h-58.2v15.4H48L32.6 0H0v68.5L15.4 84 41 99.2h22.4V96l8.6 3.3h41.5l7.4-8.6 1 8.6h27l.6-8.6 9.8 8.6h24l1.7-8.6 8.7 8.6H221l8.7-8.6v8.6H245l12-8.6v8.6h51.2c5-3 10.4-6.3 13.2-8.3a1 1 0 0 1 1.5.3 1 1 0 0 1 0 .8c-.5 3-2 7.3-2 7.3h25.7l5.8-4a1.2 1.2 0 0 1 1.5 0 .4.4 0 0 1 0 .4l1.5 3.6h89.2l6-4.2a2.5 2.5 0 0 1 .8-.3 2 2 0 0 1 .8.2 28.3 28.3 0 0 0 8.6 4.4h.2a27.3 27.3 0 0 0 7.5.8c4.5 0 30.4-9 39-12.4l6.7-2.6a107.5 107.5 0 0 0 16-8 4 4 0 0 0 2-4c0-1-.7-3-1.4-6.6v-.4a1 1 0 0 1 .6-1c2.2-1 5.2-3.2 7-8.3 2.3-7 1.8-13.5-1.6-19zM41.2 41H25.7v17.2H41V77H19L7 65V7h18.7v15.3H41l.2 18.8zm77 24l-12 12H48V22.4h18.8v36h7v-36h18.7v36h7v-36H118V65zM144 77h-19V22.4h18.8V77zm0-61.5h-19V7h18.8v8.5zm41 25.7h-15.4v17H185v19h-22.3l-12-12V6.8h18.8v15.3H185v19zm48 0h-22.3v17H233v19h-29l-12-12V34l12-12h29v19zm60 36h-19v-36h-15.3v36h-19V7h19v15.3H281l12 12v43zm113.5-49.5a9.7 9.7 0 0 1 4-5 10.8 10.8 0 0 1 6-1.8 5.8 5.8 0 0 1 4.6 1.6 4.3 4.3 0 0 1 .7 4.6c-1.5 4.6-4.8 6.8-10 6.8-2.2 0-3.7-.5-4.7-1.6s-1.2-2.7-.5-4.7zm-55.3 33a26.6 26.6 0 0 1-17.7 6.5c-1 0-2.8 0-5-.2s-4 0-5 0a3 3 0 0 0-3 2 53.3 53.3 0 0 0-1.6 5.7l-.7 2.6h-15.8l4-11c2-6.5 3.8-11 4.8-14 3-9 5.7-18.2 8.2-28l.2-.5a1 1 0 0 1 1-.4c2.2-.3 7-.4 14.5-.4 4 0 8 0 12.5.2 6.3.2 10.8 2.2 13.4 6s3 9 1 15.5a38.7 38.7 0 0 1-10.8 16zm36.5-8h-2.3A10.6 10.6 0 0 0 380 54q-2 1-3 4.7-.7 1.6-1.6 4.8l-.2.7-1.8 5.5a34.5 34.5 0 0 0-1 3.6l-1 3.5a1 1 0 0 1-.7.6h-13-.4V77l3.4-10 1.6-4.8L364 57c2.3-6.7 3.5-12.2 3.7-16.5a1 1 0 0 1 0-.5.8.8 0 0 1 .5-.4l7-1c4.2-.8 6.3-1 7-1.3a5.7 5.7 0 0 1-.3 1.8c-.5 1.8-.8 3.3.2 3.6a.8.8 0 0 0 .8-.2 35 35 0 0 1 4-2 19.2 19.2 0 0 1 8-2 3 3 0 0 1 1.4.2A35.4 35.4 0 0 1 395 42l-1.5 3.4-1 3.3-.4 1.4-.5 2a1.5 1.5 0 0 1-1.7 1 4 4 0 0 0-2-.2zm22.4 5.8l-2.8 9.2c-1.5 4.7-2.3 7.3-3 9a.6.6 0 0 1-.5.6h-13.4l.2-.8 3-8.8c1.4-3.6 2.6-6.8 3.2-8.8a188.2 188.2 0 0 0 5.5-19.2l.2-.8s0-.4.7-.4c1.2 0 2.4 0 3.5.2a21.7 21.7 0 0 0 3.6.2c1 0 2.2 0 4-.2l3.5-.2s0 .3-.3.6c-2.3 5.5-4.7 11.8-7 19.3zM489.8 47l-2.4 6.7c-1 3-2 5.2-2.4 6.7-.7 1.7-1.5 4.4-2.6 8l-2.5 8a1.6 1.6 0 0 1-1 1h-13a2 2 0 0 1 0-1 49.6 49.6 0 0 1 1.7-4.8l.4-1c1-2.6 1.8-4.6 2.2-6q2.5-7.4 3.3-10.4c.5-2 .5-3.5-.3-4.5a4.2 4.2 0 0 0-3.5-1.4A8.3 8.3 0 0 0 465 50a9 9 0 0 0-3.8 4l-3.6 10.5-1.8 6-1.8 6a1 1 0 0 1-1 1h-13a1.2 1.2 0 0 1 .2-1l2-5.8c1-2.2 1.8-4.5 2.3-6l1.3-4 .2-.8 1.5-4.8c1-2.6 1-4.4 0-5.6a3.4 3.4 0 0 0-3.2-1.3 10.4 10.4 0 0 0-4.8 1.5 8.3 8.3 0 0 0-3.8 3.6l-3.2 9.7-1.8 5.5c-1 3.3-2 5.8-2.5 7.7a3 3 0 0 1-.5 1 .8.8 0 0 1-.5 0H414a4 4 0 0 1 .3-.6l.3-.8 3.2-9.2.5-1.4 3-8.7a138 138 0 0 0 4.2-15.6v-.3a4.3 4.3 0 0 1 0-.5 1.2 1.2 0 0 1 .6-.5 19.7 19.7 0 0 1 3.6-.6c2.3 0 3.5-.2 4-.3l3.6-1a16 16 0 0 1 3-.5 11.8 11.8 0 0 1-.4 2c-1 2.7-.8 3-.6 3.5a.7.7 0 0 0 .6.3h.2a5.4 5.4 0 0 0 1.3-.7 63 63 0 0 1 7.2-4 18 18 0 0 1 7.2-1.5 10.3 10.3 0 0 1 6 1.6 5.2 5.2 0 0 1 2.2 4.8l-.2 1.8 1.3-1.2a25.7 25.7 0 0 1 7.7-5 20 20 0 0 1 8-2c3.5 0 6 .8 7.7 2.4 2 2 2.3 4.4 1.3 7.8zm42.7 8c-1 2.6-2 4-3.8 4.4l-9 1-15.2 1h-.6v.7a5 5 0 0 0 2.4 5 10.6 10.6 0 0 0 5.5 1.4 22 22 0 0 0 8.5-2l1-.5 2.4-1.3a14 14 0 0 1 1 3.5c.6 3 .6 4.2.5 4.5a4.6 4.6 0 0 1-.6.7C520 77 514 78.7 507 78.7c-6.4 0-11-2-13.6-5.5s-3-8.8-1-15.2a33 33 0 0 1 10.8-15.5 26.6 26.6 0 0 1 17-6.2c5.2 0 9 2 11.2 5.5s2.6 8 1 13.2z"
                }), u.createElement("path", {
                    fill: "#FFF",
                    d: "M515 45.3a8 8 0 0 0-5.4 2.4 11.8 11.8 0 0 0-3.4 5 1.6 1.6 0 0 0 .6 2 1 1 0 0 0 .8 0c3.3 0 6.7-.3 10-.7 1 0 2-.4 2.2-1a6 6 0 0 0-.3-5.3 5 5 0 0 0-4.4-2.4zM339.2 34.8c-7 0-7.6.7-8 1s-.5.6-3.6 10l-1.2 4-1.2 3.7a1 1 0 0 0 0 .8c.5.5 1.3 1 8 1 6.4 0 10.8-3.3 13-9.7 1.2-3.6 1.2-6.4 0-8.2s-3.6-2.6-7-2.6z"
                })),
                width: 539.99,
                height: 100.22
            }, lt[rt.Maximize] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M2,14 L14,14 L14,2 L2,2 L2,14 Z M0,0 L16,0 L16,16 L0,16 L0,0 L0,0 L0,0 Z"
                }), u.createElement("path", {
                    d: "M3,3 L13,3 L13,5 L3,5 L3,3 Z"
                })),
                width: 16,
                height: 16
            }, lt[rt.MessagesSC] = {
                path: u.createElement("path", {
                    d: "M4 12H1V0h14v12H8l-4 4z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Minimize] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M2,14 L14,14 L14,2 L2,2 L2,14 Z M0,0 L16,0 L16,16 L0,16 L0,0 L0,0 L0,0 Z"
                }), u.createElement("path", {
                    d: "M3,11 L13,11 L13,13 L3,13 L3,11 Z"
                })),
                width: 16,
                height: 16
            }, lt[rt.More] = {
                path: u.createElement("path", {
                    d: "M7,3 L9,3 L9,5 L7,5 L7,3 Z M7,7 L9,7 L9,9 L7,9 L7,7 Z M7,11 L9,11 L9,13 L7,13 L7,11 Z"
                }),
                width: 16,
                height: 16
            }, lt[rt.Muted] = {
                path: u.createElement("path", {
                    d: "M12.08 7.835l-2.02-2.04.904-.912 2.02 2.04 2.113-2.136L16 5.7l-2.114 2.135 2.02 2.04-.904.91-2.02-2.04-1.923 1.945-.904-.912 1.924-1.943zm-8.072 2.812L7.57 13V3L4.367 5.115V5.06H0v5.587h4.008z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.NavBackpack] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M16,15H2l-1-1V8h16v6L16,15z M1,4l1-1h14l1,1v2H1V4z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavChannels] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M15,14l-4-4v4H1V4h10v4l4-4h2v10H15z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavCreative] = {
                path: u.createElement("path", {
                    d: "M15.7 13.4l.8 1.5 1.5.8-1.5.8-.8 1.5-.8-1.5-1.5-.8 1.5-.8.8-1.5zM14.5 0l1.2 2.2 2.3 1.3-2.3 1.2-1.2 2.3-1.2-2.3-2.2-1.2 2.2-1.3 1.2-2.2zM8 2l3 5 5 3-5 3-3 5-3-5-5-3 5-3z"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavDashboard] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M1,16V2h16v14H1z M5,4H3v1h2V4z M5,7H3v1h2V7z M5,10H3v1h2V10zM5,13H3v1h2V13z M9,7H7v7h2V7z M12,10h-2v4h2V10z M15,4h-2v10h2V4z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavDiscover] = {
                path: u.createElement("path", {
                    d: "M4.7 13.29l-1.49-.32-1.74 3.55 3.54-1.74-.31-1.49M12.9 10.55l4.36-4.36L18 0l-6.19.74L7.45 5.1 3.36 4 0 7.36l4.41 1.19v3.23l1.82 1.82h3.22l1.19 4.4L14 14.64zM12.47 7L11 5.53l1.48-1.48 1.48 1.48z"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavFollowing] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M1,8V4l2-2h4l2,2l2-2h4l2,2v4l-8,8L1,8z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavGames] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M9,8.293l-3-3V1h6v4.293L9,8.293z M5.293,12H1V6h4.293l3,3L5.293,12z M9,9.707l3,3V17H6v-4.293L9,9.707z M12.707,6H17v6h-4.293l-3-3L12.707,6z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavLogout] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M16,9l-6,6v-4H6V7h4V3L16,9z M4,13h4v2H2v-2V5V3h6v2H4V13z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavManager] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M17,3v11h-2h-4H8.707l-0.5-0.5h-1L7.5,13.207v-1.809l5.583-2.401L7.027,6.399V8.5H2.5v4.707L2.793,13.5h-1l-0.5,0.5H1V3h10\n\th4H17z M7,14H6l1-1V9H6H4H3v4l1,1H3H2l-1,1v2h8v-2l-1-1H7z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavMessages] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M1,15V3h16v12H1z M15.354,5.354l-0.707-0.707L9,10.293L3.354,4.646L2.646,5.354L6.293,9l-3.646,3.646l0.707,0.707L7,9.707l1.646,1.646h0.707L11,9.707l3.646,3.646l0.707-0.707L11.707,9L15.354,5.354z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavMore] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M13,11V7h4v4H13z M7,7h4v4H7V7z M1,7h4v4H1V7z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavMyChannel] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M15,14l-4-4v4H8.707l-0.5-0.5h-1L7.5,13.207V8.5h-5v4.707L2.793,13.5h-1l-0.5,0.5H1V4h10v4l4-4h2v10H15z M3,14h1l-1-1V9h1h2h1v4l-1,1h1h1l1,1v2H1v-2l1-1H3z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavProfile] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M2,16v-1l3-3h3L5,9V2h8v7l-3,3h3l3,3v1H2z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavSearch] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M16.707,15.293l-1.414,1.414l-4.825-4.825C9.487,12.58,8.295,13,7,13c-3.313,0-6-2.687-6-6s2.687-6,6-6s6,2.687,6,6c0,1.295-0.42,2.487-1.118,3.468L16.707,15.293z M7,3C4.791,3,3,4.791,3,7s1.791,4,4,4s4-1.791,4-4S9.209,3,7,3z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavSettings] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M15.03,5.091v4.878l-2,2H8.151l-3.061,3.061L2.97,12.908l3.061-3.06V4.97l2-2h4.879L8.97,6.909l2.121,2.121L15.03,5.091z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.NavVideos] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M1,2v14h16V2H1z M6,12V6l7,3L6,12z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.Neck] = {
                path: u.createElement("path", {
                    d: "M9.305 1.877C9.689.84 10.887 0 12 0h6c1.105 0 2.31.838 2.695 1.877L30 27H0L9.305 1.877z",
                    fillRule: "evenodd"
                }),
                width: 35,
                height: 25
            }, lt[rt.NotificationBell] = {
                path: u.createElement("path", {
                    d: "M10 18c1.104 0 2-.896 2-2H8c0 1.104.896 2 2 2m7-4.8v-.8c0-.213.01-.236-.228-.566L15.445 10V7.6C15.445 4.563 12.95 2 10 2S4.556 4.564 4.556 7.6V10l-1.328 1.834c-.24.33-.228.353-.228.566v1.2c0 .22.174.4.39.4h13.22c.214 0 .388-.18.388-.4v-.4z"
                }),
                width: 20,
                height: 20
            }, lt[rt.OP] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M15,7L1,16l4.666-7H1l14-9l-4.667,7H15z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.PermissionsAdd] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M17 10h-3v1.9938965L12.9101562 13H17v3l6-4.5L17 7"
                }), " ", u.createElement("path", {
                    d: "M1 19v-1l3-3h3l-3-3V5h8v7l-3 3h3l3 3v1"
                })),
                width: 24,
                height: 24
            }, lt[rt.PermissionsAdded] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M1 19v-1l3-3h3l-3-3V5h8v7l-3 3h3l3 3v1"
                }), " ", u.createElement("path", {
                    d: "M21.3558345 8L23 9.61769336 16.5132525 16 13 12.5433131l1.6441655-1.6176933 1.869087 1.8389935"
                })),
                width: 24,
                height: 24
            }, lt[rt.PermissionsRemove] = {
                path: u.createElement("g", null, u.createElement("path", {
                    d: "M1 19v-1l3-3h3l-3-3V5h8v7l-3 3h3l3 3v1"
                }), " ", u.createElement("path", {
                    d: "M18.01339 10.3400907l-2.3700453-2.3700453-1.6238705 1.62387052 2.3700453 2.3700453-2.3700453 2.3700453 1.6238705 1.6238705 2.3700453-2.3700453 2.37004522 2.37004523 1.62387052-1.6238705-2.37004523-2.37004524 2.37004526-2.37004523-1.6238705-1.6238705"
                })),
                width: 24,
                height: 24
            }, lt[rt.Pin] = {
                path: u.createElement("path", {
                    d: "M4.154 15.926l3.68-4.313 1.56 1.556-4.314 3.68c-.12.093-.272.15-.428.142-.255 0-.486-.15-.593-.383-.11-.23-.07-.504.09-.7v.01zm9.508-.57l-1.28-1.282-6.723-6.73h4.06l2.37-3.902c.13-.214.33-.374.58-.423.16-.04.33-.03.48.03l.153.054 4.576 4.582.057.15c.15.403-.01.855-.368 1.063l-3.914 2.38v4.07zm-.288-11.14c0 .003-.002.004-.003.006l.01-.005zm3.436 3.4l-.023.015.023-.01zm-6.245 1.227H9.277l2.885 2.89v-1.286l.36-.22.36-.22 3.232-1.966-3.148-3.15-2.4 3.96z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Pinned] = {
                path: u.createElement("path", {
                    d: "M4.154 15.926l3.68-4.313 1.56 1.556-4.314 3.68c-.12.098-.272.15-.428.147-.255 0-.486-.15-.593-.383-.11-.232-.07-.504.092-.7v.008zm9.508-.57l-1.28-1.282-6.723-6.73h4.06l2.37-3.902c.13-.214.33-.374.58-.423.16-.037.33-.025.482.032l.156.057 4.576 4.582.057.152c.15.402-.01.854-.367 1.062l-3.913 2.38v4.068z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Play] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M5,0l20,15L5,30V0z",
                    fillRule: "evenodd"
                }),
                width: 30,
                height: 30
            }, lt[rt.Playlist] = {
                path: u.createElement("path", {
                    d: "M10 5L0 10V0",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.QuestionMark] = {
                path: u.createElement("path", {
                    d: "M3 4l3-3h12l3 3v8l-3 3h-4v2H9v-4l3-3h4V6H8v4H3V4zm6 15h5v4H9v-4z",
                    fillRule: "evenodd"
                }),
                width: 24,
                height: 24
            }, lt[rt.MiniPlayerExpand] = {
                path: u.createElement("path", {
                    d: "M4 10V2h14v11h-4v-2h2V4H6v4H4v2h8v8H2v-8h2zm11-1l-1.143-1.143L12.714 9 11 7.286l1.143-1.143L11 5h4v4z"
                }),
                width: 20,
                height: 20
            }, lt[rt.MiniPlayerPause] = {
                path: u.createElement("path", {
                    d: "M4 17h4V3H4v14zm8-14v14h4V3h-4z"
                }),
                width: 20,
                height: 20
            }, lt[rt.MiniPlayerPlay] = {
                path: u.createElement("path", {
                    d: "M4 2l12 8-12 8"
                }),
                width: 20,
                height: 20
            }, lt[rt.Plus] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M15,9H9v6H7V9H1V7h6V1h2v6h6V9z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Popout] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M12.707,4.707l-4,4L7.293,7.293l4-4L9,1h6v6L12.707,4.707z M4,12h7V9h2v5H2V3h5v2H4V12z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Reddit] = {
                path: u.createElement("path", {
                    d: "M21.998 8.692c.545 0 .988.447.988.994a.992.992 0 0 1-.987.995.99.99 0 0 1-.988-.994c0-.547.442-.994.987-.994h-.002zm-.5 5.16c-1.38-.896-3.162-1.42-5.07-1.495l1.047-3.335 2.85.675c.003.923.75 1.67 1.674 1.676a1.683 1.683 0 0 0 1.673-1.687A1.683 1.683 0 0 0 22 8c-.688 0-1.28.42-1.538 1.018l-3.14-.744a.342.342 0 0 0-.405.233L15.71 12.35c-2.006.037-3.888.566-5.33 1.5a2.014 2.014 0 0 0-1.346-.517A2.042 2.042 0 0 0 7 15.38c0 .72.376 1.386.992 1.757-.03.19-.045.386-.045.58 0 1.465.85 2.83 2.396 3.845a8.483 8.483 0 0 0 1.62.822c2.51.964 6.692.602 7.952 0 1.26-.6 1.128-.498 1.62-.822 1.545-1.015 2.396-2.38 2.396-3.844 0-.195-.014-.39-.044-.58a2.05 2.05 0 0 0-1.04-3.806c-.5 0-.98.185-1.348.52zm-5.56 7.326c1.333 0 2.284-.294 2.887-.9a.348.348 0 0 0 0-.49.342.342 0 0 0-.486 0c-.47.47-1.26.698-2.4.698-1.142 0-1.933-.23-2.4-.698a.342.342 0 0 0-.487 0 .347.347 0 0 0 0 .49c.603.606 1.553.9 2.886.9zm2.695-5.688a1.245 1.245 0 0 0-1.238 1.248c0 .686.555 1.246 1.238 1.246a1.245 1.245 0 0 0 1.24-1.247c0-.687-.557-1.246-1.24-1.246zm-5.39 0c-.682 0-1.237.56-1.237 1.248 0 .686.555 1.245 1.238 1.245.682 0 1.237-.56 1.237-1.245 0-.688-.554-1.247-1.236-1.247z",
                    fillRule: "evenodd"
                }),
                width: 32,
                height: 32
            }, lt[rt.RemoveTag] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M4.10271979,3.43815904 L1.66456075,1 L1,1.66456075 L3.43815904,4.10271979 L1,6.54087884 L1.66456075,7.20543958 L4.10271979,4.76728054 L6.54087884,7.20543958 L7.20543958,6.54087884 L4.76728054,4.10271979 L7.20543958,1.66456075 L6.54087884,1 L4.10271979,3.43815904 Z",
                    strokeWidth: "0.4",
                    fillRule: "evenodd"
                }),
                width: 8,
                height: 8
            }, lt[rt.RequestsSC] = {
                path: u.createElement("path", {
                    d: "M11 3L9 1H5L3 3v5l3 2v1H2l-2 2v2h14v-2l-2-2H8v-1l3-2V6H8V3h3zm1 1H9v1h3v3h1V5h3V4h-3V1h-1v3z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Roman1] = {
                path: u.createElement("path", {
                    d: "M8 17h4V3H8"
                }),
                width: 20,
                height: 20
            }, lt[rt.Roman2] = {
                path: u.createElement("path", {
                    d: "M4 17V3h4v14H4zm8 0V3h4v14h-4z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Roman3] = {
                path: u.createElement("path", {
                    d: "M2 17h4V3H2v14zm6 0h4V3H8v14zm6 0h4V3h-4v14z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Roman4] = {
                path: u.createElement("path", {
                    d: "M1 17h4V3H1v14zm10 0h4l4-14h-4l-2 10-2-10H7l4 14z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Roman5] = {
                path: u.createElement("path", {
                    d: "M8 17h4l6-14h-4l-4 10L6 3H2"
                }),
                width: 20,
                height: 20
            }, lt[rt.RoomList] = {
                path: u.createElement("path", {
                    fillRule: "evenodd",
                    d: "M9.2 2.527c-.13-.165-.2-.366-.2-.572C9 1.427 9.447 1 10 1h8c.217 0 .427.067.6.19.442.317.53.916.2 1.337l-4 5.09c-.057.074-.124.138-.2.192-.442.313-1.07.23-1.4-.194l-4-5.09zM2 17h11c.552 0 1 .448 1 1s-.448 1-1 1H2c-.552 0-1-.448-1-1s.448-1 1-1zm0-5h11c.552 0 1 .448 1 1s-.448 1-1 1H2c-.552 0-1-.448-1-1s.448-1 1-1zm0-5h7c.553 0 1 .448 1 1s-.447 1-1 1H2c-.552 0-1-.448-1-1s.448-1 1-1zm0-5h3c.552 0 1 .448 1 1s-.448 1-1 1H2c-.552 0-1-.448-1-1s.448-1 1-1z"
                }),
                width: 20,
                height: 20
            }, lt[rt.RoomListOpen] = {
                path: u.createElement("path", {
                    fillRule: "evenodd",
                    d: "M13.2 12.382c.33-.422.958-.507 1.4-.19.076.053.143.118.2.19l4 5.09c.33.423.242 1.02-.2 1.338-.173.123-.383.19-.6.19h-8c-.553 0-1-.428-1-.954 0-.207.07-.408.2-.573l4-5.09zM2 3c-.552 0-1-.448-1-1s.448-1 1-1h11c.552 0 1 .448 1 1s-.448 1-1 1H2zm0 5c-.552 0-1-.447-1-1 0-.553.448-1 1-1h11c.552 0 1 .447 1 1 0 .553-.448 1-1 1H2zm0 5c-.552 0-1-.447-1-1 0-.553.448-1 1-1h7c.553 0 1 .447 1 1 0 .553-.447 1-1 1H2zm0 5c-.552 0-1-.447-1-1 0-.553.448-1 1-1h3c.552 0 1 .447 1 1 0 .553-.448 1-1 1H2z"
                }),
                width: 20,
                height: 20
            }, lt[rt.SearchNoResults] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M44.7314176,41.7572363 L37.4713285,48 L26.8572017,35.3514358 L19.8203892,37.5166089 L8.56540656,33.764948 L2,24.3857958 L2,13.1308131 L8.56540656,3.75166089 L19.8203892,0 L32.0132871,3.75166089 L38.2660553,12.8181747 L38.2660553,24.6984342 L34.7250756,29.8328548 L44.7314176,41.7572363 Z M25.8441673,26.223711 L20.1169645,28.1374567 L20.0888962,28.1374567 L14.3616933,26.223711 L11.0126384,21.4393468 L11.0126384,15.6981098 L14.3616933,10.9137457 L20.0888962,9 L20.1176024,9 L25.8448053,10.9137457 L29.5121799,15.6981098 L29.5121799,21.4393468 L25.8441673,26.223711 L25.8441673,26.223711 Z",
                    fillRule: "evenodd"
                }),
                width: 46,
                height: 48
            }, lt[rt.Share] = {
                path: u.createElement("path", {
                    d: "M5 4v2H3v8h10V6h-2V4h4v12H1V4h4zm2-1H5l3-3 3 3H9v6H7V3z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Shirt] = {
                path: u.createElement("polygon", {
                    points: "7.9,5 5.3,0.9 0.4,3.8 2.2,7.6 4.4,7 4.4,15.1 11.6,15.1 11.6,7 13.8,7.6 15.6,3.8 10.9,0.9 "
                }),
                width: 16,
                height: 16
            }, lt[rt.Star] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M15,6l-4.041,2.694L13,14l-5-3.333L3,14l2.041-5.306L1,6h5.077L8,1l1.924,5H15z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Steam] = {
                path: u.createElement("path", {
                    d: "M10,0C4.7,0,0.4,4.1,0,9.2l5.4,2.2c0.5-0.3,1-0.5,1.6-0.5c0.1,0,0.1,0,0.2,0l2.4-3.5V7.4c0-2.1,1.7-3.8,3.8-3.8 s3.8,1.7,3.8,3.8s-1.7,3.8-3.8,3.8h-0.1l-3.4,2.4c0,0,0,0.1,0,0.1c0,1.6-1.3,2.8-2.8,2.8c-1.4,0-2.5-1-2.8-2.3l-3.8-1.6 C1.5,17,5.4,20,10,20c5.5,0,10-4.5,10-10C20,4.5,15.5,0,10,0z M15.8,7.4c0-1.4-1.1-2.5-2.5-2.5c-1.4,0-2.5,1.1-2.5,2.5 c0,1.4,1.1,2.5,2.5,2.5S15.8,8.8,15.8,7.4L15.8,7.4z M11.4,7.4c0-1,0.8-1.9,1.9-1.9c1,0,1.9,0.8,1.9,1.9c0,1-0.8,1.9-1.9,1.9 C12.2,9.3,11.4,8.5,11.4,7.4L11.4,7.4z M6.3,15.2l-1.2-0.5c0.2,0.5,0.6,0.8,1.1,1c1.1,0.5,2.3-0.1,2.8-1.1c0.2-0.5,0.2-1.1,0-1.6 c-0.2-0.5-0.6-0.9-1.2-1.2c-0.5-0.2-1.1-0.2-1.6,0l1.3,0.5c0.8,0.3,1.2,1.2,0.8,2.1C8,15.2,7.1,15.5,6.3,15.2L6.3,15.2z"
                }),
                width: 20,
                height: 21
            }, lt[rt.Sword] = {
                path: u.createElement("path", {
                    d: "M8.378 11.879L10 13.5l-2 .563L6.921 13h-.857l-.338.338.532.531L4 16l-1-1-1-1 2.131-2.258.531.531.338-.337v-.828L3.875 10 4.5 8l1.622 1.621L12.812 2H16v3.188z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.Team] = {
                path: u.createElement("path", {
                    d: "M15.5,0 L14,0 L14,5 L15.65,7.2 L14,16 L2,16 L0.35,7.2 L2,5 L2,0 L0.5,0 L15.5,0 Z M4,0 L8,3 L12,0 L4,0 Z M6,6 L6,7 L10,7 L9,6 L6,6 Z M9,7 L9,8 L10,8 L10,7 L9,7 Z M7,8 L7,9 L10,9 L10,8 L7,8 Z M9,9 L9,10 L10,10 L10,9 L9,9 Z M6,10 L6,11 L9,11 L10,10 L6,10 Z"
                }),
                width: 16,
                height: 16
            }, lt[rt.Theater] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M1,13h9V3H1V13z M11,3v10h4V3H11z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Timeout] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M8,15c-3.866,0-7-3.134-7-7s3.134-7,7-7s7,3.134,7,7S11.866,15,8,15z M8,3C5.238,3,3,5.238,3,8s2.238,5,5,5s5-2.238,5-5S10.762,3,8,3z M7.293,8.707L7,8l1-4l0.902,3.607L11,11L7.293,8.707z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Timer] = {
                path: u.createElement("path", {
                    d: "M12.988 5.057C17.488 5.55 21 9.37 21 14c0 4.963-4.038 9-9 9s-9-4.037-9-9c0-4.63 3.513-8.45 8.012-8.943C11.01 5.037 11 5.02 11 5V3h-1c-.552 0-1-.447-1-1 0-.553.448-1 1-1h4c.552 0 1 .447 1 1 0 .553-.448 1-1 1h-1v2c0 .02-.01.037-.012.057zM12 21c3.86 0 7-3.14 7-7s-3.14-7-7-7-7 3.14-7 7 3.14 7 7 7zm0-12c.552 0 1 .447 1 1v4c0 .553-.448 1-1 1s-1-.447-1-1v-4c0-.553.448-1 1-1z"
                }),
                width: 24,
                height: 24
            }, lt[rt.ToBottom] = {
                path: u.createElement("path", {
                    d: "M16 18H4a1 1 0 1 1 0-2h12a1 1 0 1 1 0 2zm-1.04-8.41a1 1 0 0 1-.216 1.09l-4.025 4.046a1.003 1.003 0 0 1-1.414 0L5.279 10.68a1 1 0 0 1 .707-1.707h2.019V3a1 1 0 0 1 1-1h1.994a1 1 0 0 1 1 1v5.973h2.038a1 1 0 0 1 .924.617z"
                }),
                width: 20,
                height: 20
            }, lt[rt.ToTop] = {
                path: u.createElement("path", {
                    d: "M16 4H4a1 1 0 1 1 0-2h12a1 1 0 1 1 0 2zm-1.04 6.429a1 1 0 0 1-.923.617h-2.038v5.973a1 1 0 0 1-1 1H9.005a1 1 0 0 1-1-1v-5.973h-2.02a1 1 0 0 1-.706-1.707l4.026-4.046a1 1 0 0 1 1.414 0l4.025 4.046a1 1 0 0 1 .217 1.09z"
                }),
                width: 20,
                height: 20
            }, lt[rt.Trash] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M10,14.999H6H3v-11h3h4h3v11H10z M6,5.999v7h1v-7H6z M10,5.999H9v7h1V5.999zM3,1.999h4v-1h2v1h4v1H3V1.999z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Trophy] = {
                path: u.createElement("path", {
                    d: "M3.71 2.464C3.7 1.614 3.69 1 3.69 1h10.58l.012 1.464h3.688s.367 2.984-1.465 5.126c-.923 1.33-2.1 1.994-2.866 2.308-.708 1.486-1.918 2.596-3.36 3.008v2.007h1.832v2.196H5.888v-2.197h1.83V12.89c-1.404-.425-2.584-1.512-3.282-2.962-.763-.3-1.988-.965-2.94-2.338C-.338 5.448.03 2.464.03 2.464h3.68zm.014 1.1c.014 1.186.027 2.507.027 3.3 0 .487.05.96.14 1.417-.524-.29-1.174-.75-1.663-1.422-1.258-1.49-1.1-3.295-1.1-3.295h2.597zm10.567 0c.01 1.182.02 2.5.02 3.3 0 .473-.046.935-.132 1.38.51-.294 1.127-.744 1.595-1.386 1.258-1.49 1.1-3.295 1.1-3.295H14.29z",
                    fillRule: "evenodd"
                }),
                width: 18,
                height: 18
            }, lt[rt.Twitter] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M23.966 11.533c-.55.26-1.142.436-1.763.515a3.252 3.252 0 0 0 1.35-1.81c-.6.38-1.26.65-1.95.794A2.983 2.983 0 0 0 19.363 10c-1.697 0-3.07 1.464-3.07 3.27 0 .256.025.505.078.745-2.55-.136-4.814-1.438-6.33-3.417a3.417 3.417 0 0 0-.414 1.644c0 1.134.543 2.135 1.366 2.722a2.918 2.918 0 0 1-1.39-.41v.042c0 1.584 1.057 2.906 2.463 3.206-.452.13-.928.15-1.388.056.392 1.3 1.526 2.245 2.87 2.27A5.917 5.917 0 0 1 9 21.483a8.31 8.31 0 0 0 4.707 1.47c5.648 0 8.736-4.982 8.736-9.304 0-.14-.003-.283-.008-.422a6.48 6.48 0 0 0 1.53-1.693",
                    fillRule: "evenodd"
                }),
                width: 32,
                height: 32
            }, lt[rt.Unheart] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M1,9V7h14v2H1z M1,4l2-2h3l2,2l2-2h3l2,2v2H1V4z M8,14l-4.667-4h9.333L8,14z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Unignore] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M13,11.341V16l-3.722-3.102C8.863,12.959,8.438,13,8,13c-3.866,0-7-2.462-7-5.5C1,4.462,4.134,2,8,2s7,2.462,7,5.5C15,8.996,14.234,10.35,13,11.341z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Unlock] = {
                path: u.createElement("path", {
                    fillRule: "evenodd",
                    d: "M15.243 9.002h-6.46l-.6-1.8c-.452-1.36-.16-2.686 1.085-3.1 1.245-.416 2.275.47 2.728 1.83l.128.383-.008.003c.175.525.74.808 1.265.634.524-.175.805-.734.636-1.256v-.01.002l-.13-.385c-.8-2.405-2.957-3.862-5.247-3.1-2.29.764-3.143 3.222-2.34 5.627L6.687 9l-1.936.003c-.414 0-.75.357-.75.8V17.2c0 .44.336.8.75.8h10.493c.414 0 .75-.36.75-.8V9.8c0-.442-.336-.8-.75-.8"
                }),
                width: 20,
                height: 20
            }, lt[rt.Upload] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M84.9630996 35.0930707c1.1070111-1.9372694 1.6605166-4.1512915 1.6605166-6.6420664 0-8.302583-6.6420664-14.9446495-14.9446494-14.9446495-2.7675277 0-5.5350554.8302583-7.7490775 2.2140222C59.7785978 6.58753565 50.3690037.222222 39.5756458.222222c-14.9446495 0-26.8450185 12.1771218-26.8450185 27.1217712 0 .8302583 0 1.9372694.2767528 2.7675277C5.25830258 33.9860596 0 42.0118899 0 51.1447312 0 64.4288641 10.7933579 75.222222 24.0774908 75.222222h53.6900369c11.3468634 0 20.7564575-9.4095941 20.7564575-20.7564576 0-8.8560885-5.5350553-16.605166-13.5608856-19.3726937zM45.9409594 22.0856906l18.5424354 19.6494465H52.0295203v20.2029521H39.8523985V41.7351371H27.1217712l18.8191882-19.6494465z",
                    fillRule: "evenodd"
                }),
                width: 99,
                height: 76
            }, lt[rt.VKontakte] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M16.98 21.362s.362-.04.546-.238c.17-.183.165-.525.165-.525s-.023-1.605.722-1.842c.734-.233 1.676 1.55 2.675 2.236.755.52 1.33.405 1.33.405l2.67-.038s1.397-.086.735-1.185c-.055-.09-.386-.812-1.986-2.297-1.675-1.555-1.45-1.303.567-3.992 1.228-1.638 1.72-2.637 1.566-3.065-.147-.408-1.05-.3-1.05-.3l-3.008.018s-.223-.03-.388.07c-.162.096-.266.322-.266.322s-.476 1.267-1.11 2.345c-1.34 2.274-1.875 2.394-2.094 2.253-.51-.33-.382-1.322-.382-2.028 0-2.203.334-3.122-.65-3.36-.328-.08-.57-.13-1.405-.14-1.073-.01-1.98.004-2.495.256-.342.167-.606.54-.445.562.2.027.65.122.887.446.31.42.298 1.36.298 1.36s.177 2.595-.414 2.917c-.405.22-.96-.23-2.155-2.293-.612-1.057-1.074-2.225-1.074-2.225s-.09-.218-.248-.335c-.193-.14-.462-.186-.462-.186l-2.858.018s-.43.012-.587.2c-.14.165-.01.508-.01.508s2.236 5.234 4.77 7.872c2.323 2.42 4.96 2.26 4.96 2.26h1.196z"
                }),
                width: 32,
                height: 32
            }, lt[rt.Verified] = {
                path: u.createElement("path", {
                    d: "M2.636 2.636L9 0l6.365 2.636L18 9l-2.635 6.365L9 18l-6.364-2.635L0 9l2.636-6.364zM7.38 13.11l6.097-6.42-1.45-1.378-4.726 4.98-1.613-1.52-1.37 1.458 3.065 2.88z"
                }),
                width: 18,
                height: 18
            }, lt[rt.VideoPremiere] = {
                path: u.createElement("path", {
                    d: "M10 1c4.9 0 9 4.1 9 9s-4 9-9 9-9-4-9-9 4-9 9-9zm0 1.8c-3.9 0-7.2 3.3-7.2 7.2 0 3.9 3.3 7.2 7.2 7.2 3.9 0 7.2-3.3 7.2-7.2 0-3.9-3.3-7.2-7.2-7.2zm3.668 7.737l-4.8 3.4C8.784 13.98 8.69 14 8.6 14c-.11 0-.22-.03-.316-.09-.177-.107-.284-.3-.284-.51V6.6c0-.208.107-.4.284-.51C8.38 6.03 8.49 6 8.6 6c.09 0 .184.02.268.063l4.8 3.4c.204.102.332.31.332.537 0 .227-.128.435-.332.537z"
                }),
                width: 20,
                height: 20
            }, lt[rt.VideoRerun] = {
                path: u.createElement("path", {
                    d: "M17.953 4.797c-.004-.404-.25-.766-.626-.917-.12-.05-.247-.073-.373-.073-.264 0-.522.104-.713.3l-1.49 1.526c-.725-.937-1.677-1.684-2.795-2.167-1.745-.754-3.68-.783-5.45-.084-1.766.702-3.154 2.048-3.91 3.795-.753 1.744-.783 3.68-.083 5.446.7 1.767 2.048 3.156 3.794 3.91 1.745.756 3.68.785 5.447.084.563-.222.838-.858.615-1.42-.22-.564-.856-.838-1.42-.615-1.224.485-2.563.464-3.77-.058-1.21-.522-2.143-1.484-2.63-2.707-.483-1.225-.462-2.562.06-3.772.523-1.21 1.484-2.14 2.707-2.626 1.225-.49 2.563-.47 3.773.05.867.375 1.585.983 2.104 1.745L11.3 9.142c-.283.288-.364.718-.206 1.09.155.37.517.608.92.608h.01l4.993-.046c.552-.006.995-.457.99-1.01L17.96 4.79z"
                }),
                width: 20,
                height: 20
            }, lt[rt.ViewerList] = {
                path: u.createElement("path", {
                    clipRule: "evenodd",
                    d: "M6,12.999v-2h8v2H6z M6,6.999h8v2H6V6.999z M6,2.999h8v2H6V2.999z M2,10.999h2v2H2V10.999z M2,6.999h2v2H2V6.999z M2,2.999h2v2H2V2.999z",
                    fillRule: "evenodd"
                }),
                width: 16,
                height: 16
            }, lt[rt.Warning] = {
                path: u.createElement("path", {
                    d: "M6.4,9.5h1.2v1H6.4V9.5z M6.4,5h1.2v4H6.4V5z M0,12h14c0,0-6.7-10-7-10C6.6,2,0,12,0,12z"
                }),
                width: 14,
                height: 14
            }, lt[rt.WhisperMuted] = {
                path: u.createElement("path", {
                    d: "M14 4.308l-.08-.082-2.02.007.002-1.563-.665-.67h-2.23l-.66.67v1.556h-1.8L4.78 6.012v7.13L3 14.077V15L14 4.308zm1.336 4.226v4.685l1.664.89V16H8l7.336-7.466zM8 16h4v1.405l-1 .562L9.022 18 8 17.405V16zm8-12l1 1L4 18l-1-1"
                }),
                width: 20,
                height: 20
            }, lt),
            dt = function(e) {
                var t = {};
                return e.type ? t[ot[e.type]] = !0 : t[ot[Je.Inherit]] = !0, u.createElement("figure", l.__assign({
                    className: "tw-svg"
                }, i(e)), u.createElement("svg", {
                    className: c("tw-svg__asset", "tw-svg__asset--" + rt[e.asset].toLowerCase(), t),
                    width: e.fill ? "100%" : (e.width || 16) + "px",
                    height: e.fill ? "100%" : (e.height || 16) + "px",
                    version: "1.1",
                    viewBox: "0 0 " + ut[e.asset].width + " " + ut[e.asset].height,
                    x: "0px",
                    y: "0px"
                }, ut[e.asset].path))
            };
        n("py4c");
        ! function(e) {
            e[e.Notification = 1] = "Notification", e[e.Alt = 2] = "Alt", e[e.Alt2 = 3] = "Alt2", e[e.Brand = 4] = "Brand", e[e.Live = 5] = "Live", e[e.Alert = 6] = "Alert", e[e.Success = 7] = "Success", e[e.Prime = 8] = "Prime", e[e.Dashboard = 9] = "Dashboard"
        }(ct || (ct = {}));
        var pt, mt, ht = (pt = {}, pt[ct.Notification] = "tw-badge--notification", pt[ct.Alt] = "tw-badge--alt", pt[ct.Alt2] = "tw-badge--alt-2", pt[ct.Brand] = "tw-badge--brand", pt[ct.Live] = "tw-badge--live", pt[ct.Alert] = "tw-badge--alert", pt[ct.Success] = "tw-badge--success", pt[ct.Prime] = "tw-badge--prime", pt[ct.Dashboard] = "tw-badge--dashboard", pt),
            gt = function(e) {
                var t = {
                    "tw-badge": !0
                };
                e.type && (t[ht[e.type]] = !0);
                var n = {
                    width: e.size,
                    height: e.size
                };
                e.size && e.size;
                var a = u.createElement(Y, l.__assign({
                    display: g.InlineFlex,
                    justifyContent: S.Center,
                    alignItems: d.Center,
                    className: c(t)
                }, i(e)), u.createElement("div", {
                    style: n
                }, u.createElement(J, {
                    className: "tw-badge__icon",
                    display: g.Flex,
                    justifyContent: S.Center,
                    alignItems: d.Center
                }, u.createElement(dt, {
                    asset: e.icon,
                    fill: !0
                }))));
                return e.border ? u.createElement(J, {
                    className: "tw-badge__container",
                    display: g.InlineFlex,
                    position: C.Relative
                }, a) : a
            },
            ft = n("F8kA"),
            vt = new Set(["imageAlt", "imageSrc", "onImageError", "onImageLoad"]),
            bt = function(e) {
                var t, n, a;
                return e.row && (t = d.Center), e.elevation && (n = e.elevation), e.background === ze.Overlay && (a = we.Overlay), u.createElement(J, l.__assign({
                    className: "tw-card",
                    position: C.Relative
                }, i(e)), u.createElement(it, {
                    display: g.Flex,
                    flexDirection: e.row ? v.Row : v.Column,
                    alignItems: t,
                    elevation: n,
                    background: e.background,
                    color: a,
                    border: e.border,
                    flexWrap: y.NoWrap
                }, e.children))
            },
            yt = function(e) {
                return u.createElement(J, l.__assign({
                    className: "tw-card-body",
                    position: C.Relative
                }, i(e)), e.children)
            };
        n("0+3B");
        ! function(e) {
            e[e.Default = 1] = "Default", e[e.Size2 = 2] = "Size2", e[e.Size3 = 3] = "Size3", e[e.Size4 = 4] = "Size4", e[e.Size6 = 5] = "Size6", e[e.Size8 = 6] = "Size8", e[e.Size16 = 7] = "Size16", e[e.Size24 = 8] = "Size24", e[e.Size32 = 9] = "Size32"
        }(mt || (mt = {}));
        var kt, St, _t = (kt = {}, kt[mt.Size2] = "tw-card-img--size-2", kt[mt.Size3] = "tw-card-img--size-3", kt[mt.Size4] = "tw-card-img--size-4", kt[mt.Size6] = "tw-card-img--size-6", kt[mt.Size8] = "tw-card-img--size-8", kt[mt.Size16] = "tw-card-img--size-16", kt[mt.Size24] = "tw-card-img--size-24", kt[mt.Size32] = "tw-card-img--size-32", kt),
            wt = function(e) {
                var t = {
                    "tw-card-img": !0
                };
                return e.size && (t[_t[e.size]] = !0), u.createElement(Y, {
                    flexShrink: 0
                }, u.createElement("div", l.__assign({
                    className: c(t)
                }, i(e)), u.createElement(Se, {
                    ratio: e.aspect ? e.aspect : pe.Aspect16x9,
                    overflow: e.overflow
                }, u.createElement("img", {
                    src: e.imageSrc,
                    alt: e.imageAlt,
                    onLoad: e.onImageLoad,
                    onError: e.onImageError
                })), e.children))
            },
            Et = (n("pna9"), function(e) {
                for (var t = {
                        "tw-placeholder": !0,
                        "tw-placeholder--overlay": e.overlay,
                        "tw-placeholder--fill": !e.lineCount,
                        "tw-placeholder--custom-height": !!e.height
                    }, n = {
                        width: e.width ? e.width / 10 + "rem" : "",
                        height: e.height ? e.height / 10 + "rem" : ""
                    }, a = [], r = 0; r < (e.lineCount || 1); r++) a.push(u.createElement("span", {
                    className: c(t),
                    key: r,
                    style: n
                }));
                return u.createElement("span", l.__assign({
                    className: "tw-placeholder-wrapper"
                }, i(e)), a)
            }),
            Ct = (n("cx1p"), function(e) {
                var t;
                return t = u.createElement(bt, {
                    key: e.title
                }, u.createElement(wt, l.__assign({
                    aspect: pe.BoxArt
                }, a(e))), u.createElement(yt, null, u.createElement(J, {
                    margin: {
                        top: .5
                    }
                }, u.createElement(qe, {
                    className: "tw-box-art-card__title",
                    type: Fe.H3,
                    fontSize: Ne.Size5,
                    lineHeight: Oe.Body,
                    ellipsis: !0
                }, e.title), u.createElement(qe, {
                    color: we.Alt2,
                    ellipsis: !0
                }, e.info)))), e.placeholder ? u.createElement(J, null, u.createElement(J, {
                    margin: {
                        bottom: .5
                    }
                }, u.createElement(Se, {
                    ratio: pe.Aspect3x4
                }, u.createElement(Et, null))), u.createElement(qe, null, u.createElement(Et, {
                    width: 150
                })), u.createElement(qe, {
                    fontSize: Ne.Size7
                }, u.createElement(Et, {
                    width: 100
                }))) : e.linkTo ? u.createElement("div", l.__assign({
                    className: "tw-box-art-card"
                }, i(e)), u.createElement(ft.a, {
                    to: e.linkTo,
                    title: e.title,
                    "data-a-target": "tw-box-art-card-link"
                }, t)) : u.createElement("div", l.__assign({
                    className: "tw-box-art-card"
                }, i(e)), t)
            });
        n("kSXB");
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.Large = 2] = "Large"
        }(St || (St = {}));
        var Nt, Tt, Ot = (Nt = {}, Nt[St.Small] = "tw-loading-spinner--small", Nt[St.Large] = "tw-loading-spinner--large", Nt),
            It = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showSpinner: 0 === t.props.delay
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = void 0 !== this.props.delay ? this.props.delay : 300;
                    t > 0 && (this.delayTimeout = window.setTimeout(function() {
                        e.setState({
                            showSpinner: !0
                        })
                    }, t))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.delayTimeout)
                }, t.prototype.render = function() {
                    if (!this.state.showSpinner) return null;
                    var e, t = {
                        "tw-loading-spinner": !0,
                        "tw-loading-spinner--inherit-color": this.props.inheritColor
                    };
                    return this.props.size && (t[Ot[this.props.size]] = !0), e = u.createElement("div", l.__assign({
                        className: c(t)
                    }, i(this.props))), this.props.fillContent && (e = u.createElement(J, {
                        display: g.Flex,
                        justifyContent: S.Center,
                        alignItems: d.Center,
                        fullWidth: !0,
                        fullHeight: !0
                    }, e)), e
                }, t
            }(u.Component);
        n("NKW1");
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Hollow = 1] = "Hollow", e[e.Text = 2] = "Text", e[e.Alert = 3] = "Alert", e[e.Success = 4] = "Success"
        }(Tt || (Tt = {}));
        var Dt, Lt = (Ft = {}, Ft[Tt.Hollow] = "tw-button--hollow", Ft[Tt.Text] = "tw-button--text", Ft[Tt.Alert] = "tw-button--alert", Ft[Tt.Success] = "tw-button--success", Ft);
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.Large = 2] = "Large"
        }(Dt || (Dt = {}));
        var xt, Rt = (Pt = {}, Pt[Dt.Small] = "tw-button--small", Pt[Dt.Large] = "tw-button--large", Pt);
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Loading = 1] = "Loading", e[e.Success = 2] = "Success"
        }(xt || (xt = {}));
        var Ft, Pt, Ut, Mt, At, Vt = (Ut = {}, Ut[xt.Loading] = "tw-button--state-loading", Ut[xt.Success] = "tw-button--state-success", Ut),
            jt = (Mt = {}, Mt[Dt.Small] = {
                width: 12,
                height: 12
            }, Mt[Dt.Large] = {
                width: 20,
                height: 20
            }, Mt),
            Ht = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.refHandler = function(e) {
                        t.buttonElement = e
                    }, t.onClick = function(e) {
                        t.props.onClick && t.props.onClick(e), t.props.blurAfterClick && t.buttonElement && t.buttonElement.blur()
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e, t, n, a, o, s, p;
                    (this.props.disabled || this.props.state === xt.Loading || this.props.state === xt.Success) && (p = !0);
                    var m = {
                        "tw-button": !0,
                        "tw-button--dropmenu": this.props.dropdown,
                        "tw-button--overlay": this.props.overlay,
                        "tw-button--purchase": !!this.props.purchase,
                        "tw-button--status": !!this.props.statusAlertText || !!this.props.statusAlertIcon,
                        "tw-button--disabled": this.props.disabled,
                        "tw-button--full-width": this.props.fullWidth
                    };
                    if (this.props.statusAlertText || this.props.statusAlertIcon || this.props.state === xt.Success ? m[Lt[Tt.Success]] = !0 : this.props.type && (m[Lt[this.props.type]] = !0), this.props.size && (m[Rt[this.props.size]] = !0), this.props.state && (m[Vt[this.props.state]] = !0), this.props.purchase && (t = u.createElement("span", {
                            className: "tw-button__num-block",
                            key: "tw-button-purchase"
                        }, this.props.purchase)), this.props.dropdown && (e = u.createElement("span", {
                            className: "tw-button__icon tw-button__icon--right",
                            key: "tw-button-dropdown"
                        }, u.createElement(dt, {
                            asset: rt.GlyphArrDown,
                            type: Je.Inherit
                        }))), this.props.state === xt.Loading && (o = u.createElement(J, {
                            className: "tw-button__loading-spinner",
                            position: C.Absolute,
                            key: "tw-button-loading-spinner"
                        }, u.createElement(It, {
                            delay: 0,
                            size: this.getSpinnerSize(this.props.size),
                            inheritColor: !0
                        }))), this.props.state === xt.Success && (s = u.createElement(J, {
                            className: "tw-button__success-icon",
                            position: C.Absolute,
                            display: g.Flex,
                            alignItems: d.Center,
                            justifyContent: S.Center,
                            key: "tw-button-success-icon"
                        }, u.createElement(dt, {
                            asset: rt.Check,
                            width: this.successIconSize(this.props.size),
                            height: this.successIconSize(this.props.size)
                        }))), this.props.icon) {
                        var h = {
                            width: 16,
                            height: 16
                        };
                        this.props.size && (h = jt[this.props.size]), n = this.props.statusAlertIcon ? u.createElement(J, {
                            className: "tw-button__icon tw-button__icon--status " + (this.props.children ? "tw-button__icon--left" : ""),
                            display: g.Flex,
                            key: "tw-button-icon"
                        }, u.createElement(J, {
                            className: "tw-button__primary-icon",
                            display: g.Flex,
                            alignItems: d.Center,
                            justifyContent: S.Center
                        }, u.createElement(dt, {
                            width: h.width,
                            height: h.height,
                            type: Je.Inherit,
                            asset: this.props.icon
                        })), u.createElement(J, {
                            className: "tw-button__alert-icon",
                            display: g.Flex,
                            alignItems: d.Center,
                            justifyContent: S.Center
                        }, u.createElement(dt, {
                            width: h.width,
                            height: h.height,
                            type: Je.Inherit,
                            asset: this.props.statusAlertIcon
                        }))) : u.createElement("span", {
                            className: "tw-button__icon " + (this.props.children ? "tw-button__icon--left" : ""),
                            key: "tw-button-icon"
                        }, u.createElement(dt, {
                            width: h.width,
                            height: h.height,
                            type: Je.Inherit,
                            asset: this.props.icon
                        }))
                    }
                    this.props.children && (a = this.props.statusAlertText ? u.createElement("span", {
                        className: "tw-button__text",
                        key: "tw-button-text"
                    }, u.createElement("span", {
                        className: "tw-button__primary-text",
                        "data-a-target": "tw-button-text"
                    }, this.props.children), u.createElement("span", {
                        className: "tw-button__alert-text"
                    }, this.props.statusAlertText)) : u.createElement("span", {
                        className: "tw-button__text",
                        "data-a-target": "tw-button-text",
                        key: "tw-button-text"
                    }, this.props.children));
                    var f;
                    this.props.tabIndex && (f = this.props.tabIndex);
                    var v;
                    this.props.targetBlank && (v = "_blank");
                    var b = [n, a, o, s, e, t],
                        y = l.__assign({
                            tabIndex: f,
                            onClick: this.onClick,
                            "aria-label": this.props.ariaLabel,
                            className: c(m)
                        }, i(this.props));
                    if (this.props.linkTo && !p) {
                        if (r(this.props.linkTo)) {
                            if ("string" == typeof this.props.linkTo) return u.createElement("a", l.__assign({
                                href: this.props.linkTo,
                                target: v,
                                ref: this.refHandler,
                                download: this.props.download
                            }, y), b);
                            throw new Error("External links with Location descriptors are not implemented in core-ui.button! Pass a string as linkTo instead.")
                        }
                        return u.createElement(ft.a, l.__assign({
                            to: this.props.linkTo,
                            target: v,
                            download: this.props.download
                        }, y), b)
                    }
                    return u.createElement("button", l.__assign({
                        disabled: p,
                        ref: this.refHandler
                    }, y), b)
                }, t.prototype.getSpinnerSize = function(e) {
                    switch (e) {
                        case Dt.Small:
                            return St.Small;
                        case Dt.Large:
                            return St.Large;
                        case Dt.Default:
                        default:
                            return St.Default
                    }
                }, t.prototype.successIconSize = function(e) {
                    switch (e) {
                        case Dt.Small:
                            return 12;
                        case Dt.Large:
                            return 20;
                        case Dt.Default:
                        default:
                            return 16
                    }
                }, t
            }(u.Component);
        n("9Q3d");
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Hollow = 1] = "Hollow", e[e.Primary = 2] = "Primary", e[e.Alert = 3] = "Alert", e[e.Secondary = 4] = "Secondary", e[e.Success = 5] = "Success"
        }(At || (At = {}));
        var Bt, zt, Wt, qt, Gt = (Bt = {}, Bt[At.Primary] = "tw-button-icon--primary", Bt[At.Hollow] = "tw-button-icon--hollow", Bt[At.Alert] = "tw-button-icon--alert", Bt[At.Secondary] = "tw-button-icon--secondary", Bt[At.Success] = "tw-button-icon--success", Bt),
            Qt = (zt = {}, zt[Dt.Small] = "tw-button-icon--small", zt[Dt.Large] = "tw-button-icon--large", zt),
            Kt = (Wt = {}, Wt[Dt.Small] = {
                width: 12,
                height: 12
            }, Wt[Dt.Large] = {
                width: 20,
                height: 20
            }, Wt),
            $t = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.refHandler = function(e) {
                        t.buttonElement = e
                    }, t.onClick = function(e) {
                        t.props.onClick && t.props.onClick(e), t.props.blurAfterClick && t.buttonElement && t.buttonElement.blur()
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e, t, n = {
                        "tw-button-icon": !0,
                        "tw-button-icon--dropmenu": this.props.dropdown,
                        "tw-button-icon--disabled": this.props.disabled,
                        "tw-button-icon--overlay": this.props.overlay,
                        "tw-button-icon--status": !!this.props.statusAlertIcon
                    };
                    if (this.props.statusAlertIcon ? n[Gt[At.Success]] = !0 : this.props.type && (n[Gt[this.props.type]] = !0), this.props.size && (n[Qt[this.props.size]] = !0), this.props.dropdown && (e = u.createElement("span", {
                            className: "tw-button-icon__icon tw-button-icon__icon--right",
                            key: "tw-button-dropdown"
                        }, u.createElement(dt, {
                            asset: rt.GlyphArrDown,
                            type: Je.Inherit
                        }))), this.props.icon) {
                        var a = {
                            width: 16,
                            height: 16
                        };
                        this.props.size && (a = Kt[this.props.size]), t = u.createElement("span", {
                            className: "tw-button-icon__icon"
                        }, u.createElement(dt, {
                            width: a.width,
                            height: a.height,
                            type: Je.Inherit,
                            asset: this.props.icon
                        })), t = this.props.statusAlertIcon ? u.createElement(J, {
                            className: "tw-button-icon__icon tw-button-icon__icon--status",
                            display: g.Flex,
                            key: "tw-button-icon"
                        }, u.createElement(J, {
                            className: "tw-button-icon__primary-icon",
                            display: g.Flex,
                            alignItems: d.Center,
                            justifyContent: S.Center
                        }, u.createElement(dt, {
                            width: a.width,
                            height: a.height,
                            type: Je.Inherit,
                            asset: this.props.icon
                        })), u.createElement(J, {
                            className: "tw-button-icon__alert-icon",
                            display: g.Flex,
                            alignItems: d.Center,
                            justifyContent: S.Center
                        }, u.createElement(dt, {
                            width: a.width,
                            height: a.height,
                            type: Je.Inherit,
                            asset: this.props.statusAlertIcon
                        }))) : u.createElement("span", {
                            className: "tw-button-icon__icon",
                            key: "tw-button-icon"
                        }, u.createElement(dt, {
                            width: a.width,
                            height: a.height,
                            type: Je.Inherit,
                            asset: this.props.icon
                        }))
                    }
                    var o;
                    this.props.tabIndex && (o = this.props.tabIndex);
                    var s;
                    this.props.targetBlank && (s = "_blank");
                    var p = l.__assign({
                            tabIndex: o,
                            onClick: this.onClick,
                            "aria-label": this.props.ariaLabel,
                            className: c(n)
                        }, i(this.props)),
                        m = [t, e];
                    if (this.props.linkTo && !this.props.disabled) {
                        if (r(this.props.linkTo)) {
                            if ("string" == typeof this.props.linkTo) return u.createElement("a", l.__assign({
                                href: this.props.linkTo,
                                target: s,
                                download: this.props.download,
                                ref: this.refHandler
                            }, p), m);
                            throw new Error("External links with Location descriptors are not implemented in core-ui.button! Pass a string as linkTo instead.")
                        }
                        return u.createElement(ft.a, l.__assign({
                            to: this.props.linkTo,
                            target: s,
                            download: this.props.download
                        }, p), m)
                    }
                    return u.createElement("button", l.__assign({
                        disabled: this.props.disabled,
                        tabIndex: o,
                        ref: this.refHandler
                    }, p), m)
                }, t
            }(u.Component);
        n("/9PY");
        ! function(e) {
            e[e.ExtraSmall = 1] = "ExtraSmall", e[e.Small = 2] = "Small", e[e.Medium = 3] = "Medium", e[e.Large = 4] = "Large", e[e.ExtraLarge = 5] = "ExtraLarge"
        }(qt || (qt = {}));
        var Zt, Yt = (Jt = {}, Jt[qt.ExtraSmall] = "tw-balloon--xs", Jt[qt.Small] = "tw-balloon--sm", Jt[qt.Medium] = "tw-balloon--md", Jt[qt.Large] = "tw-balloon--lg", Jt[qt.ExtraLarge] = "tw-balloon--xl", Jt);
        ! function(e) {
            e[e.Top = 1] = "Top", e[e.Bottom = 2] = "Bottom", e[e.Left = 3] = "Left", e[e.Right = 4] = "Right", e[e.TopLeft = 5] = "TopLeft", e[e.TopRight = 6] = "TopRight", e[e.BottomRight = 7] = "BottomRight", e[e.BottomLeft = 8] = "BottomLeft", e[e.TopCenter = 9] = "TopCenter", e[e.BottomCenter = 10] = "BottomCenter", e[e.LeftCenter = 11] = "LeftCenter", e[e.RightCenter = 12] = "RightCenter"
        }(Zt || (Zt = {}));
        var Jt, Xt, en, tn = (Xt = {}, Xt[Zt.Top] = "tw-balloon--up", Xt[Zt.Bottom] = "tw-balloon--down", Xt[Zt.Left] = "tw-balloon--left", Xt[Zt.Right] = "tw-balloon--right", Xt[Zt.TopLeft] = "tw-balloon--up tw-balloon--left", Xt[Zt.TopRight] = "tw-balloon--up tw-balloon--right", Xt[Zt.BottomRight] = "tw-balloon--down tw-balloon--right", Xt[Zt.BottomLeft] = "tw-balloon--down", Xt[Zt.TopCenter] = "tw-balloon--up tw-balloon--center", Xt[Zt.BottomCenter] = "tw-balloon--down tw-balloon--center", Xt[Zt.LeftCenter] = "tw-balloon--left tw-balloon--center", Xt[Zt.RightCenter] = "tw-balloon--right tw-balloon--center", Xt),
            nn = function(e) {
                var t = {
                    "tw-balloon": !0
                };
                e.size && (t[Yt[e.size]] = !0), e.direction ? t[tn[e.direction]] = !0 : t[tn[Zt.Bottom]] = !0;
                var n, a, r, o;
                e.offsetX && (e.direction === Zt.Left || e.direction === Zt.TopLeft || e.direction === Zt.BottomLeft || e.direction === Zt.LeftCenter || e.direction === Zt.BottomRight || e.direction === Zt.TopRight ? a = e.offsetX : n = e.offsetX), e.offsetY && (e.direction === Zt.Top || e.direction === Zt.TopLeft || e.direction === Zt.TopRight || e.direction === Zt.TopCenter ? o = e.offsetY : r = e.offsetY);
                var s, d, p, m = {
                    marginLeft: n,
                    marginRight: a,
                    marginTop: r,
                    marginBottom: o
                };
                e.tailOffset && (e.direction === Zt.Left || e.direction === Zt.Right || e.direction === Zt.LeftCenter || e.direction === Zt.RightCenter ? s = e.tailOffset + "px" : e.direction === Zt.TopRight || e.direction === Zt.BottomRight ? (d = e.tailOffset + "px", p = "auto") : (d = "auto", p = e.tailOffset + "px"));
                var h, f = {
                    top: s,
                    left: p,
                    right: d
                };
                return e.noTail || (h = u.createElement(Y, {
                    className: "tw-balloon__tail",
                    position: C.Absolute,
                    overflow: w.Hidden
                }, u.createElement("div", {
                    style: f
                }, u.createElement(it, {
                    className: "tw-balloon__tail-symbol",
                    position: C.Absolute,
                    background: e.tailBackground || ze.Base,
                    borderRadius: Ge.Small,
                    border: !0
                })))), u.createElement(Y, {
                    display: e.show ? g.Block : g.Hide,
                    position: C.Absolute
                }, u.createElement("div", l.__assign({
                    style: m,
                    className: c(t)
                }, i(e)), h, u.createElement(it, {
                    border: !0,
                    borderRadius: Ge.Small,
                    background: ze.Base,
                    elevation: e.elevation ? e.elevation : 1
                }, e.children)))
            },
            an = (n("I6b2"), function(e) {
                var t, n = o(),
                    a = {
                        "tw-checkbox": !0,
                        "tw-checkbox--error": e.error
                    };
                return e.tabIndex && (t = e.tabIndex), u.createElement("div", l.__assign({
                    className: c(a)
                }, i(e)), u.createElement("input", {
                    className: "tw-checkbox__input",
                    type: "checkbox",
                    "data-a-target": "tw-checkbox",
                    checked: e.checked,
                    defaultChecked: e.defaultChecked,
                    disabled: e.disabled,
                    id: e.id ? e.id : n,
                    name: e.name,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onFocus: e.onFocus,
                    ref: e.refDelegate,
                    required: e.required,
                    tabIndex: t,
                    value: e.value
                }), u.createElement("label", {
                    className: "tw-checkbox__label",
                    htmlFor: e.id ? e.id : n
                }, e.label))
            }),
            rn = (n("bB4F"), function(e) {
                var t = {
                    "tw-drop-zone": !0,
                    "tw-drop-zone--over": e.dragOver,
                    "tw-drop-zone--error": e.error,
                    "tw-drop-zone--disabled": e.disabled
                };
                return u.createElement(J, l.__assign({
                    className: c(t)
                }, i(e), {
                    alignItems: d.Center,
                    display: g.Flex,
                    fullHeight: !0,
                    fullWidth: !0,
                    justifyContent: S.Center,
                    position: C.Absolute,
                    attachTop: !0,
                    attachLeft: !0
                }), u.createElement("div", {
                    className: "tw-drop-zone__content"
                }, e.children))
            });
        n("iYrx");
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.Medium = 2] = "Medium", e[e.Large = 3] = "Large", e[e.None = 4] = "None"
        }(en || (en = {}));
        var on, sn, ln = (on = {}, on[en.Small] = "tw-grid--gutter-sm", on[en.Medium] = "tw-grid--gutter-md", on[en.Large] = "tw-grid--gutter-lg", on[en.None] = "tw-grid--gutter-none", on),
            cn = function(e) {
                var t = {
                    "tw-grid": !0
                };
                return e.gutterSize && (t[ln[e.gutterSize]] = !0), u.createElement("div", l.__assign({
                    className: c(t)
                }, i(e)), e.children)
            },
            un = (n("M1vR"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = (a = {}, a["tw-col-offset-" + this.props.offset] = this.props.offset && "number" == typeof this.props.offset, a),
                        t = this.getColumnCount("", this.props.cols),
                        n = this.getColumnCount("offset-", this.props.offset);
                    return u.createElement("div", l.__assign({
                        className: c(e, [t, n])
                    }, i(this.props)), this.props.children);
                    var a
                }, t.prototype.getColumnCount = function(e, t) {
                    if (!t) return "";
                    var n = [];
                    return "object" != typeof t ? "tw-col-" + t : (n.push("tw-col-" + e + t.default), t.xs && n.push("tw-xs-col-" + e + t.xs), t.sm && n.push("tw-sm-col-" + e + t.sm), t.md && n.push("tw-md-col-" + e + t.md), t.lg && n.push("tw-lg-col-" + e + t.lg), t.xl && n.push("tw-xl-col-" + e + t.xl), t.xxl && n.push("tw-xxl-col-" + e + t.xxl), n)
                }, t
            }(u.Component));
        n("WjKA");
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Email = 1] = "Email", e[e.Password = 2] = "Password", e[e.Search = 3] = "Search"
        }(sn || (sn = {}));
        var dn, pn = function(e) {
                var t, n;
                e.tabIndex && (n = e.tabIndex);
                var a = {
                    "tw-input": !0,
                    "tw-input--error": e.error
                };
                return e.icon && (t = u.createElement(J, {
                    className: "tw-input__icon-group",
                    position: C.Absolute,
                    attachLeft: e.icon && !e.iconRight,
                    attachRight: e.iconRight,
                    attachTop: !0,
                    zIndex: R.Default
                }, u.createElement(it, {
                    className: "tw-input__icon",
                    color: we.Alt2,
                    display: g.Flex,
                    alignItems: d.Center,
                    justifyContent: S.Center
                }, u.createElement(dt, {
                    asset: e.icon,
                    type: Je.Inherit
                })))), u.createElement(J, l.__assign({
                    position: C.Relative
                }, i(e)), t, u.createElement(Y, {
                    padding: {
                        left: e.icon && !e.iconRight ? 3 : void 0,
                        right: e.iconRight ? 3 : void 0
                    }
                }, u.createElement("input", {
                    type: sn[e.type].toLowerCase(),
                    className: c(a),
                    placeholder: e.placeholder,
                    "aria-label": e.ariaLabel,
                    autoCapitalize: e.autoCapitalize ? "on" : "off",
                    autoCorrect: e.autoCorrect ? "on" : "off",
                    autoComplete: e.autoComplete,
                    autoFocus: e.autoFocus,
                    "data-a-target": "tw-input",
                    defaultValue: e.defaultValue,
                    disabled: e.disabled,
                    id: e.id,
                    name: e.name,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onClick: e.onClick,
                    onFocus: e.onFocus,
                    onKeyDown: e.onKeyDown,
                    maxLength: e.maxLength,
                    readOnly: e.readOnly,
                    ref: e.refDelegate,
                    required: e.required,
                    spellCheck: e.spellCheck,
                    tabIndex: n,
                    value: e.value
                })))
            },
            mn = (n("9NS1"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.refHandler = function(e) {
                        t.buttonElement = e
                    }, t.onClick = function(e) {
                        t.props.onClick && t.props.onClick(e), t.props.blurAfterClick && t.buttonElement && t.buttonElement.blur()
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e, t = {
                        "tw-interactable": !0,
                        "tw-interactable--alpha": this.props.alpha,
                        "tw-interactable--selected": this.props.selected,
                        "tw-interactable--hover": this.props.hover,
                        "tw-interactable--disabled": this.props.disabled,
                        "tw-interactable--alert": this.props.alert
                    };
                    this.props.tabIndex && (e = this.props.tabIndex);
                    var n;
                    this.props.targetBlank && (n = "_blank");
                    var a = l.__assign({
                        tabIndex: e,
                        onClick: this.onClick,
                        "aria-label": this.props.ariaLabel,
                        className: c(t)
                    }, i(this.props));
                    if (this.props.linkTo) {
                        if (r(this.props.linkTo)) {
                            if ("string" == typeof this.props.linkTo) return u.createElement("a", l.__assign({
                                href: this.props.linkTo,
                                target: n,
                                ref: this.refHandler
                            }, a), this.props.children);
                            throw new Error("External links with Location descriptors are not implemented in core-ui.interactable! Pass a string as linkTo instead.")
                        }
                        return u.createElement(ft.a, l.__assign({
                            to: this.props.linkTo,
                            target: n
                        }, a), this.props.children)
                    }
                    return u.createElement("button", l.__assign({
                        disabled: this.props.disabled,
                        ref: this.refHandler
                    }, a), this.props.children)
                }, t
            }(u.Component));
        n("cFXH");
        ! function(e) {
            e[e.Vertical = 1] = "Vertical", e[e.Horizontal = 2] = "Horizontal"
        }(dn || (dn = {}));
        var hn, gn = function(e) {
            var t, n, a = {
                    "tw-form-group": !0,
                    "tw-form-group--error": e.error
                },
                r = {
                    "tw-form-group__label": !0,
                    "tw-form-group__label--selectable": !!e.id
                };
            return e.labelOptional && (t = u.createElement("span", {
                className: "tw-form-group__optional"
            }, "(", e.labelOptional, ")")), e.hint && !e.error ? n = u.createElement("p", {
                className: "tw-form-group__hint"
            }, e.hint) : e.errorMessage && e.error && (n = u.createElement("p", {
                className: "tw-form-group__hint"
            }, e.errorMessage)), e.orientation === dn.Horizontal ? u.createElement(J, l.__assign({
                className: c(a),
                display: g.Flex,
                flexWrap: y.NoWrap
            }, i(e)), u.createElement(J, {
                className: "tw-form-group__label-container",
                flexShrink: 0,
                padding: {
                    right: 2
                }
            }, u.createElement("label", {
                className: c(r),
                htmlFor: e.id
            }, e.label, t)), u.createElement(J, {
                flexGrow: 1
            }, e.children, n)) : u.createElement("div", l.__assign({
                className: c(a)
            }, i(e)), u.createElement("label", {
                className: c(r),
                htmlFor: e.id
            }, e.label, t), e.children, n)
        };
        n("Dxih");
        ! function(e) {
            e[e.Small = 1] = "Small", e[e.Medium = 2] = "Medium", e[e.Large = 3] = "Large"
        }(hn || (hn = {}));
        var fn, vn, bn = (fn = {}, fn[hn.Small] = "tw-live-indicator--small", fn[hn.Medium] = "tw-live-indicator--medium", fn[hn.Large] = "tw-live-indicator--large", fn),
            yn = function(e) {
                var t = {
                    "tw-live-indicator": !0,
                    "tw-live-indicator--pulse": e.pulse
                };
                return e.size ? t[bn[e.size]] = !0 : t[bn[hn.Small]] = !0, u.createElement(J, l.__assign({
                    display: g.InlineBlock,
                    position: C.Relative,
                    className: c(t)
                }, i(e)))
            };
        n("u1ju");
        ! function(e) {
            e[e.Top = 1] = "Top", e[e.Bottom = 2] = "Bottom", e[e.Left = 3] = "Left", e[e.Right = 4] = "Right"
        }(vn || (vn = {}));
        var kn, Sn = (_n = {}, _n[vn.Top] = "tw-tooltip--up", _n[vn.Bottom] = "tw-tooltip--down", _n[vn.Left] = "tw-tooltip--left", _n[vn.Right] = "tw-tooltip--right", _n);
        ! function(e) {
            e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 3] = "Right"
        }(kn || (kn = {}));
        var _n, wn, En, Cn = (wn = {}, wn[kn.Left] = "tw-tooltip--align-left", wn[kn.Center] = "tw-tooltip--align-center", wn[kn.Right] = "tw-tooltip--align-right", wn),
            Nn = function(e) {
                var t = o(),
                    n = {
                        "tw-tooltip": !0,
                        "tw-tooltip--wrap": !!e.width
                    },
                    a = {
                        "tw-tooltip-wrapper": !0,
                        "tw-tooltip-wrapper--show": e.show
                    };
                e.direction ? n[Sn[e.direction]] = !0 : n[Sn[vn.Top]] = !0, e.align && e.align !== kn.Center && e.direction !== vn.Left && e.direction !== vn.Right ? n[Cn[e.align]] = !0 : n[Cn[kn.Center]] = !0;
                var r, s, d, p;
                e.offsetX && (e.align === kn.Right ? s = e.offsetX : r = e.offsetX), e.offsetY && (e.direction && e.direction !== vn.Top ? d = e.offsetY : p = e.offsetY);
                var m = {
                    marginLeft: r,
                    marginRight: s,
                    marginTop: d,
                    marginBottom: p,
                    width: e.width
                };
                return u.createElement(Y, l.__assign({
                    display: e.display ? e.display : g.InlineFlex
                }, i(e)), u.createElement("div", {
                    className: c(a),
                    "aria-describedby": t,
                    title: e.title
                }, e.children, u.createElement("div", {
                    className: c(n),
                    style: m,
                    "data-a-target": "tw-tooltip-label",
                    role: "tooltip",
                    id: t
                }, e.label)))
            },
            Tn = (n("tnvA"), function(e) {
                var t;
                e.icon && (t = u.createElement(dt, {
                    type: Je.Inherit,
                    asset: e.icon
                }));
                var n = u.createElement("div", l.__assign({
                    className: c({
                        "tw-stat": !0
                    })
                }, i(e)), u.createElement("span", {
                    className: "tw-stat__icon"
                }, t), u.createElement("span", {
                    className: "tw-stat__value",
                    "data-a-target": "tw-stat-value"
                }, e.value));
                return e.label ? u.createElement(Nn, {
                    direction: e.tooltipDirection ? e.tooltipDirection : vn.Bottom,
                    align: e.tooltipAlign ? e.tooltipAlign : kn.Center,
                    label: e.label
                }, n) : n
            }),
            On = (n("xdZ7"), function(e) {
                var t;
                e.tabIndex && (t = e.tabIndex);
                var n;
                return n = e.icon ? u.createElement("span", {
                    className: "tw-tag__icon"
                }, u.createElement(dt, {
                    width: 12,
                    height: 12,
                    type: Je.Inherit,
                    asset: e.icon
                })) : u.createElement("span", {
                    className: "tw-tag__label"
                }, e.label), u.createElement("button", l.__assign({
                    onClick: e.onClose,
                    disabled: e.disabled,
                    tabIndex: t,
                    className: c({
                        "tw-tag": !0
                    })
                }, i(e)), n, u.createElement("span", {
                    className: "tw-tag__close"
                }, u.createElement(dt, {
                    width: 8,
                    height: 8,
                    type: Je.Inherit,
                    asset: rt.Close
                })))
            });
        n("pk+c");
        ! function(e) {
            e[e.Notification = 1] = "Notification", e[e.Brand = 2] = "Brand", e[e.Live = 3] = "Live", e[e.Alert = 4] = "Alert", e[e.Success = 5] = "Success", e[e.Prime = 6] = "Prime", e[e.Overlay = 7] = "Overlay"
        }(En || (En = {}));
        var In, Dn, Ln = (In = {}, In[En.Notification] = "tw-pill--notification", In[En.Brand] = "tw-pill--brand", In[En.Live] = "tw-pill--live", In[En.Alert] = "tw-pill--alert", In[En.Success] = "tw-pill--success", In[En.Prime] = "tw-pill--prime", In[En.Overlay] = "tw-pill--overlay", In),
            xn = function(e) {
                var t = {
                    "tw-pill": !0
                };
                return e.type && (t[Ln[e.type]] = !0), u.createElement("span", l.__assign({
                    className: c(t)
                }, i(e)), e.label)
            };
        n("3+CI");
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.ExtraSmall = 2] = "ExtraSmall"
        }(Dn || (Dn = {}));
        var Rn, Fn = (Pn = {}, Pn[Dn.Small] = "tw-progress-bar--sm", Pn[Dn.ExtraSmall] = "tw-progress-bar--xs", Pn);
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.Caution = 1] = "Caution", e[e.Error = 2] = "Error", e[e.Success = 3] = "Success"
        }(Rn || (Rn = {}));
        var Pn, Un, Mn, An = (Un = {}, Un[Rn.Caution] = "tw-progress-bar--caution", Un[Rn.Error] = "tw-progress-bar--error", Un[Rn.Success] = "tw-progress-bar--success", Un),
            Vn = function(e) {
                var t = {
                    "tw-progress-bar": !0,
                    "tw-progress-bar--countdown": !!e.countdown,
                    "tw-progress-bar--inherit": e.inherit,
                    "tw-progress-bar--mask": e.mask
                };
                return e.size && (t[Fn[e.size]] = !0), e.status && (t[An[e.status]] = !0), u.createElement("div", l.__assign({
                    className: c(t)
                }, i(e)), u.createElement("div", {
                    onAnimationEnd: e.onCountdownEnd,
                    className: "tw-progress-bar__fill",
                    style: {
                        width: e.value + "%",
                        animationDuration: e.countdown ? e.countdown + "s" : ""
                    },
                    "data-a-target": "tw-progress-bar-animation"
                }))
            },
            jn = (n("FTZM"), function(e) {
                var t, n = "tw-" + o(),
                    a = {
                        "tw-radio": !0,
                        "tw-radio--error": e.error
                    };
                return e.tabIndex && (t = e.tabIndex), u.createElement("div", l.__assign({
                    className: c(a)
                }, i(e)), u.createElement("input", {
                    type: "radio",
                    className: "tw-radio__input",
                    "data-a-target": "tw-radio",
                    autoFocus: e.autoFocus,
                    checked: e.checked,
                    defaultChecked: e.defaultChecked,
                    disabled: e.disabled,
                    id: e.id ? e.id : n,
                    name: e.name,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onFocus: e.onFocus,
                    required: e.required,
                    ref: e.refDelegate,
                    tabIndex: t,
                    value: e.value
                }), u.createElement("label", {
                    className: "tw-radio__label",
                    htmlFor: e.id ? e.id : n
                }, e.label))
            }),
            Hn = (n("WZjW"), function(e) {
                var t, n = o(),
                    a = {
                        "tw-toggle": !0,
                        "tw-toggle--error": e.error
                    };
                return e.tabIndex && (t = e.tabIndex), u.createElement("div", l.__assign({
                    className: c(a)
                }, i(e)), u.createElement("input", {
                    className: "tw-toggle__input",
                    autoFocus: e.autoFocus,
                    checked: e.checked,
                    defaultValue: e.defaultValue,
                    disabled: e.disabled,
                    id: e.id ? e.id : n,
                    name: e.name,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onFocus: e.onFocus,
                    tabIndex: t,
                    type: "checkbox",
                    ref: e.refDelegate,
                    value: e.value,
                    "data-a-target": "tw-toggle"
                }), u.createElement("label", {
                    htmlFor: e.id ? e.id : n,
                    className: "tw-toggle__button"
                }))
            }),
            Bn = (n("ALci"), function(e) {
                var t, n = {
                    "tw-range": !0,
                    "tw-range--error": e.error
                };
                return e.tabIndex && (t = e.tabIndex), u.createElement("input", l.__assign({
                    className: c(n),
                    id: e.id,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onFocus: e.onFocus,
                    tabIndex: t,
                    defaultValue: e.defaultValue,
                    disabled: e.disabled,
                    type: "range",
                    min: e.min,
                    max: e.max,
                    name: e.name,
                    ref: e.refDelegate,
                    step: e.step,
                    value: e.value
                }, i(e)))
            }),
            zn = (n("FTbL"), function(e) {
                var t, n = "tw-" + o();
                return e.tabIndex && (t = e.tabIndex), u.createElement("div", l.__assign({
                    className: c("tw-search-input")
                }, i(e)), u.createElement(Y, {
                    display: g.HideAccessible
                }, u.createElement("label", {
                    htmlFor: e.id ? e.id : n
                }, "Search")), u.createElement(pn, {
                    autoCapitalize: e.autoCapitalize,
                    autoFocus: e.autoFocus,
                    autoComplete: "off",
                    disabled: e.disabled,
                    error: e.error,
                    icon: rt.NavSearch,
                    id: e.id ? e.id : n,
                    maxLength: e.maxLength,
                    name: e.name,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onFocus: e.onFocus,
                    onKeyDown: e.onKeyDown,
                    placeholder: e.placeholder,
                    refDelegate: e.refDelegate,
                    spellCheck: e.spellCheck,
                    tabIndex: t,
                    type: sn.Search,
                    value: e.value
                }))
            }),
            Wn = (n("lpYt"), function(e) {
                return u.createElement("div", l.__assign({
                    className: c("tw-segmented-button")
                }, i(e)), e.children)
            }),
            qn = (n("qPr7"), function(e) {
                var t;
                return e.tabIndex && (t = e.tabIndex), u.createElement("label", l.__assign({
                    className: c({
                        "tw-segmented-button-option": !0
                    }),
                    htmlFor: e.id
                }, i(e)), u.createElement("input", {
                    type: e.type || "radio",
                    className: "tw-segmented-button-option__input",
                    checked: e.checked,
                    defaultChecked: e.defaultChecked,
                    defaultValue: e.defaultValue,
                    disabled: e.disabled,
                    id: e.id,
                    name: e.name,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onFocus: e.onFocus,
                    tabIndex: t,
                    ref: e.refDelegate,
                    value: e.value,
                    "data-a-target": "tw-segmented-button-option"
                }), u.createElement("span", {
                    className: "tw-segmented-button-option__label"
                }, e.label))
            });
        n("uWno");
        ! function(e) {
            e[e.Default = 1] = "Default", e[e.Hollow = 2] = "Hollow"
        }(Mn || (Mn = {}));
        var Gn, Qn, Kn = (Gn = {}, Gn[Mn.Default] = "", Gn[Mn.Hollow] = "tw-select--hollow", Gn),
            $n = function(e) {
                var t = {
                    "tw-select": !0,
                    "tw-select--disabled": e.disabled,
                    "tw-select--error": e.error
                };
                e.type && (t[Kn[e.type]] = !0);
                var n;
                return e.tabIndex && (n = e.tabIndex), u.createElement("select", l.__assign({
                    className: c(t),
                    defaultValue: e.defaultValue,
                    disabled: e.disabled,
                    id: e.id,
                    name: e.name,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onFocus: e.onFocus,
                    required: e.required,
                    tabIndex: n,
                    value: e.value,
                    ref: e.refDelegate
                }, i(e)), e.children)
            },
            Zn = (n("5fkB"), function(e) {
                var t, n, a = {
                    "tw-tab-nav__item": !0,
                    "mg-l-auto": e.pullRight,
                    "tw-tab-nav__item--disabled": e.disabled
                };
                e.targetBlank && (n = "_blank");
                var o;
                if (e.active && (o = "active"), e.linkTo && !e.disabled)
                    if (r(e.linkTo)) {
                        if ("string" != typeof e.linkTo) throw new Error("External links with Location descriptors are not implemented in core-ui.button! Pass a string as linkTo instead.");
                        t = u.createElement("a", {
                            target: n,
                            className: o,
                            onClick: e.onClick,
                            href: e.linkTo,
                            role: "tab",
                            "data-a-target": "tw-tab-link"
                        }, e.children)
                    } else t = u.createElement(ft.a, {
                        target: n,
                        className: o,
                        onClick: e.onClick,
                        to: e.linkTo,
                        role: "tab",
                        "data-a-target": "tw-tab-link"
                    }, e.children);
                else t = u.createElement("button", {
                    disabled: e.disabled,
                    className: o,
                    onClick: e.onClick,
                    role: "tab",
                    "data-a-target": "tw-tab-link"
                }, e.children);
                return u.createElement("li", l.__assign({
                    className: c(a),
                    role: "presentation"
                }, i(e)), t)
            }),
            Yn = (n("3KEv"), function(e) {
                return u.createElement("div", l.__assign({
                    className: e.alignRight ? "flex" : ""
                }, i(e)), u.createElement("ul", {
                    className: "tw-tab-nav " + (e.alignRight ? "mg-l-auto" : ""),
                    role: "tablist"
                }, e.children))
            }),
            Jn = (n("rxEr"), function(e) {
                var t, n = {
                    "tw-textarea": !0,
                    "tw-textarea--no-resize": e.noResize,
                    "tw-textarea--error": e.error
                };
                e.tabIndex && (t = e.tabIndex);
                var a = {
                    paddingRight: e.paddingRight ? e.paddingRight / 10 + "rem" : null
                };
                return u.createElement(Y, {
                    overflow: e.overflow
                }, u.createElement("textarea", l.__assign({
                    className: c(n),
                    autoFocus: e.autoFocus,
                    cols: e.cols,
                    disabled: e.disabled,
                    id: e.id,
                    maxLength: e.maxLength,
                    name: e.name,
                    onBlur: e.onBlur,
                    onChange: e.onChange,
                    onFocus: e.onFocus,
                    onKeyDown: e.onKeyDown,
                    style: a,
                    placeholder: e.placeholder,
                    rows: e.rows,
                    tabIndex: t,
                    value: e.value,
                    defaultValue: e.defaultValue,
                    ref: e.refDelegate
                }, i(e))))
            }),
            Xn = (n("MQjL"), function(e) {
                var t;
                return t = u.createElement(bt, {
                    key: e.title
                }, u.createElement(wt, l.__assign({
                    aspect: pe.Aspect16x9
                }, a(e))), u.createElement(yt, null, u.createElement(J, {
                    margin: {
                        top: .5
                    }
                }, u.createElement(qe, {
                    className: "tw-thumbnail-card__title",
                    type: Fe.H3,
                    fontSize: Ne.Size5,
                    lineHeight: Oe.Body,
                    ellipsis: !0
                }, e.title)), u.createElement(qe, {
                    color: we.Alt2,
                    ellipsis: !0
                }, e.info))), e.placeholder ? u.createElement(J, null, u.createElement(J, {
                    margin: {
                        bottom: .5
                    }
                }, u.createElement(Se, {
                    ratio: pe.Aspect16x9
                }, u.createElement(Et, null))), u.createElement(qe, null, u.createElement(Et, {
                    width: 150
                })), u.createElement(qe, {
                    fontSize: Ne.Size7
                }, u.createElement(Et, {
                    width: 100
                }))) : e.linkTo ? u.createElement("div", l.__assign({
                    className: "tw-thumbnail-card"
                }, i(e)), u.createElement(ft.a, {
                    to: e.linkTo,
                    title: e.title,
                    "data-a-target": "tw-thumbnail-card-link"
                }, t)) : u.createElement("div", l.__assign({
                    className: "tw-thumbnail-card"
                }, i(e)), t)
            }),
            ei = (n("FlHF"), function(e) {
                return u.createElement(J, {
                    fullWidth: !0
                }, u.createElement(it, {
                    display: g.Flex,
                    flexWrap: y.NoWrap,
                    className: c({
                        "tw-toast": !0
                    }),
                    elevation: 3,
                    background: ze.Base,
                    border: !0
                }, u.createElement(J, {
                    flexGrow: 1
                }, e.children), u.createElement(it, {
                    display: g.Flex,
                    flexShrink: 0,
                    borderLeft: !0
                }, u.createElement(mn, {
                    onClick: e.onClose,
                    ariaLabel: "Dismiss This",
                    tabIndex: e.tabIndex,
                    alpha: !0,
                    "data-a-target": "tw-toast-close"
                }, u.createElement(J, {
                    padding: 1,
                    display: g.Flex,
                    alignItems: d.Center,
                    justifyContent: S.Center,
                    className: "tw-toast__dismiss-target"
                }, u.createElement(dt, {
                    asset: rt.Close
                }))))))
            });
        n("Tr88");
        ! function(e) {
            e[e.Default = 0] = "Default", e[e.ExtraSmall = 1] = "ExtraSmall", e[e.Small = 2] = "Small", e[e.Large = 3] = "Large", e[e.None = 4] = "None"
        }(Qn || (Qn = {}));
        var ti, ni = (ii = {}, ii[Qn.ExtraSmall] = "tw-tower--gutter-xs", ii[Qn.Small] = "tw-tower--gutter-sm", ii[Qn.Large] = "tw-tower--gutter-lg", ii[Qn.None] = "tw-tower--gutter-none", ii);
        ! function(e) {
            e[e.ExtraSmall = 1] = "ExtraSmall", e[e.Small = 2] = "Small", e[e.Medium = 3] = "Medium", e[e.Large = 4] = "Large"
        }(ti || (ti = {}));
        var ii, ai, ri = (ai = {}, ai[ti.ExtraSmall] = "tw-tower--120", ai[ti.Small] = "tw-tower--180", ai[ti.Medium] = "tw-tower--240", ai[ti.Large] = "tw-tower--300", ai),
            oi = function(e) {
                var t = {
                    "tw-tower": !0,
                    "tw-tower--nogrow": e.noGrow
                };
                e.gutterSize && (t[ni[e.gutterSize]] = !0), e.childWidth && (t[ri[e.childWidth]] = !0);
                var n = new Array;
                if (e.placeholderItems)
                    for (var a = 0; a < e.placeholderItems; ++a) n.push(u.createElement("div", {
                        className: "tw-tower__placeholder",
                        key: a
                    }));
                return u.createElement(J, l.__assign({
                    justifyContent: e.center ? S.Center : void 0,
                    flexWrap: e.noWrap ? y.NoWrap : y.Wrap,
                    className: c(t)
                }, i(e)), e.children, n)
            },
            si = (n("OeCe"), function(e) {
                return u.createElement("div", l.__assign({
                    className: c({
                        "tw-typeset": !0
                    })
                }, i(e)), e.children)
            });
        n.d(t, "e", function() {
            return he
        }), n.d(t, "f", function() {
            return K
        }), n.d(t, "g", function() {
            return X
        }), n.d(t, !1, function() {
            return te
        }), n.d(t, "h", function() {
            return ie
        }), n.d(t, "i", function() {
            return re
        }), n.d(t, "j", function() {
            return Se
        }), n.d(t, "k", function() {
            return pe
        }), n.d(t, "a", function() {
            return ge
        }), n.d(t, "l", function() {
            return at
        }), n.d(t, !1, function() {}), n.d(t, "n", function() {
            return gt
        }), n.d(t, "o", function() {
            return ct
        }), n.d(t, "t", function() {
            return Ct
        }), n.d(t, "u", function() {
            return Ht
        }), n.d(t, "x", function() {
            return Dt
        }), n.d(t, "z", function() {
            return Tt
        }), n.d(t, "y", function() {
            return xt
        }), n.d(t, "v", function() {
            return $t
        }), n.d(t, "w", function() {
            return At
        }), n.d(t, "p", function() {
            return nn
        }), n.d(t, "r", function() {
            return qt
        }), n.d(t, "q", function() {
            return Zt
        }), n.d(t, "B", function() {
            return yt
        }), n.d(t, "C", function() {
            return wt
        }), n.d(t, "D", function() {
            return mt
        }), n.d(t, "A", function() {
            return bt
        }), n.d(t, "E", function() {
            return an
        }), n.d(t, "I", function() {
            return rn
        }), n.d(t, "O", function() {
            return cn
        }), n.d(t, "P", function() {
            return en
        }), n.d(t, "G", function() {
            return un
        }), n.d(t, "_10", function() {
            return dt
        }), n.d(t, "_11", function() {
            return rt
        }), n.d(t, "_12", function() {
            return Je
        }), n.d(t, "R", function() {
            return pn
        }), n.d(t, "S", function() {
            return sn
        }), n.d(t, "T", function() {
            return mn
        }), n.d(t, "M", function() {
            return gn
        }), n.d(t, "N", function() {
            return dn
        }), n.d(t, "_19", function() {
            return it
        }), n.d(t, !1, function() {
            return nt
        }), n.d(t, "m", function() {
            return ze
        }), n.d(t, "s", function() {
            return Ge
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "c", function() {
            return d
        }), n.d(t, "d", function() {
            return m
        }), n.d(t, "Q", function() {
            return Y
        }), n.d(t, "V", function() {
            return J
        }), n.d(t, "H", function() {
            return g
        }), n.d(t, "J", function() {
            return v
        }), n.d(t, "K", function() {
            return y
        }), n.d(t, "U", function() {
            return S
        }), n.d(t, !1, function() {
            return T
        }), n.d(t, "_0", function() {
            return w
        }), n.d(t, "_4", function() {
            return C
        }), n.d(t, "_24", function() {
            return I
        }), n.d(t, "_39", function() {
            return R
        }), n.d(t, !1, function() {
            return L
        }), n.d(t, "X", function() {
            return yn
        }), n.d(t, "Y", function() {
            return hn
        }), n.d(t, "Z", function() {
            return It
        }), n.d(t, "_17", function() {
            return St
        }), n.d(t, "_18", function() {
            return Tn
        }), n.d(t, "_22", function() {
            return On
        }), n.d(t, "_1", function() {
            return xn
        }), n.d(t, "_2", function() {
            return En
        }), n.d(t, "_3", function() {
            return Et
        }), n.d(t, "_5", function() {
            return Ce
        }), n.d(t, "_6", function() {
            return be
        }), n.d(t, "_7", function() {
            return Vn
        }), n.d(t, "_8", function() {
            return Dn
        }), n.d(t, !1, function() {
            return Rn
        }), n.d(t, "_9", function() {
            return jn
        }), n.d(t, "_23", function() {
            return qe
        }), n.d(t, "F", function() {
            return we
        }), n.d(t, "L", function() {
            return Ne
        }), n.d(t, "W", function() {
            return Oe
        }), n.d(t, "_26", function() {
            return De
        }), n.d(t, "_27", function() {
            return xe
        }), n.d(t, "_28", function() {
            return Fe
        }), n.d(t, "_38", function() {
            return Ue
        }), n.d(t, "_30", function() {
            return Hn
        }), n.d(t, !1, function() {
            return Bn
        }), n.d(t, "_13", function() {
            return zn
        }), n.d(t, "_14", function() {
            return Wn
        }), n.d(t, "_15", function() {
            return qn
        }), n.d(t, "_16", function() {
            return $n
        }), n.d(t, "_20", function() {
            return Zn
        }), n.d(t, "_21", function() {
            return Yn
        }), n.d(t, "_25", function() {
            return Jn
        }), n.d(t, !1, function() {
            return Xn
        }), n.d(t, "_29", function() {
            return ei
        }), n.d(t, "_31", function() {
            return Nn
        }), n.d(t, "_33", function() {
            return vn
        }), n.d(t, "_32", function() {
            return kn
        }), n.d(t, "_34", function() {
            return oi
        }), n.d(t, "_36", function() {
            return Qn
        }), n.d(t, "_35", function() {
            return ti
        }), n.d(t, "_37", function() {
            return si
        }), n.d(t, "_40", function() {
            return i
        })
    },
    OeCe: function(e, t) {},
    "P+j/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("BhyV"),
            o = n("RH2O"),
            s = n("7vx8"),
            l = n("RweG"),
            c = n("Ldv2"),
            u = n("Aj/L"),
            d = n("Tzcg"),
            p = n("6sO2"),
            m = ["4.99", "9.99", "24.99"],
            h = n("CSlQ"),
            g = n("CwIZ"),
            f = n("HW6M"),
            v = n("zCIC"),
            b = n("6BvN"),
            y = n("7LIQ"),
            k = n("J4ib"),
            S = n("Odds"),
            _ = (n("9uSE"), function(e) {
                var t = {
                        "emote-picker__tab": !0
                    },
                    n = null,
                    r = null;
                if (e.channelTabVisible) {
                    var o = f(i.__assign({}, t, {
                        "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                        "emote-picker__tab--disabled": !e.channelTabEnabled
                    }));
                    n = a.createElement(S.Q, {
                        padding: {
                            x: 1
                        }
                    }, a.createElement("div", {
                        key: "ChannelTabLink",
                        id: "emote-picker__channel",
                        className: o,
                        onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                        "data-a-target": "emote-channel-tab"
                    }, a.createElement("span", null, Object(k.d)("Channel", "EmotePicker"))))
                }
                if (e.allTabVisible) {
                    var s = f(i.__assign({}, t, {
                        "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                    }));
                    r = a.createElement(S.Q, {
                        padding: {
                            x: 1
                        }
                    }, a.createElement("div", {
                        key: "allTabLink",
                        id: "emote-picker__all",
                        className: s,
                        onClick: e.selectAllTab,
                        "data-a-target": "emote-all-tab"
                    }, a.createElement("span", null, Object(k.d)("All", "EmotePicker"))))
                }
                return a.createElement(S._19, {
                    background: S.m.Base,
                    borderTop: !0,
                    className: "emote-picker__tabs-container"
                }, n, r)
            }),
            w = n("YEG/"),
            E = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.subscribeTexts)
                        for (var t = 0; t <= this.props.plan.level; t++) {
                            var n = this.props.subscribeTexts[t];
                            n && (t < this.props.plan.level ? (e.push(a.createElement("span", {
                                key: "upsell-predicate:" + t
                            }, n)), e.push(a.createElement("span", {
                                key: "upsell-plus:" + t
                            }, " + "))) : this.props.plan.level > 0 ? e.push(a.createElement("strong", {
                                key: "upsell-strong-end:" + this.props.plan.level
                            }, n)) : e.push(a.createElement("span", {
                                key: "upsell-end:" + t
                            }, n)))
                        }
                    if (!this.props.plan.emoteSetID) return null;
                    var i = {
                            id: this.props.plan.emoteSetID,
                            emotes: this.props.plan.emotes
                        },
                        r = {};
                    return this.props.plan.price && (r.purchase = Object(p.d)("${price}", {
                        price: this.props.plan.price
                    }, "PlanUpsell")), a.createElement(S.V, {
                        className: "emote-picker-plan-upsell",
                        display: S.H.Flex,
                        flexDirection: S.J.Column,
                        alignItems: S.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(y.a, {
                        emoteSet: i,
                        locked: !0
                    }), a.createElement(S.V, {
                        margin: 1,
                        alignItems: S.c.Center
                    }, e), a.createElement(w.a, {
                        isSubbedToTier: !1,
                        tierPrice: r.purchase || "",
                        reportSubAction: this.props.reportSubAction,
                        url: this.props.plan.url
                    }))
                }, t
            }(a.Component),
            C = (n("Xo53"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.closeOnEsc = function(e) {
                        e.keyCode === b.a.Esc && n.props.toggleVisibility()
                    }, n.handleFilterChange = function(e) {
                        var t = e.target.value,
                            i = t.toLowerCase(),
                            a = n.filterAvailableUpsells(n.props.availableUpsells, i),
                            r = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                        n.setState({
                            filter: i,
                            filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                            filteredAvailableUpsells: a,
                            filteredOwnedChannelEmoteSets: r,
                            inputValue: t,
                            channelTabEnabled: r.length > 0 || a.length > 0
                        })
                    }, n.state = {
                        filter: "",
                        filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                        filteredAvailableUpsells: t.availableUpsells,
                        filteredAllEmoteSets: t.allEmoteSets,
                        inputValue: "",
                        channelTabSelected: !0,
                        channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                    }, n.selectAllTab = function() {
                        return n.setChannelTabSelected(!1)
                    }, n.selectChannelTab = function() {
                        return n.setChannelTabSelected(!0)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.gqlError)
                        if (this.state.filter.length > 0) {
                            var t = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                n = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                            this.setState({
                                filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                filteredAvailableUpsells: t,
                                filteredOwnedChannelEmoteSets: n,
                                channelTabEnabled: n.length > 0 || t.length > 0
                            })
                        } else this.setState({
                            filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                            filteredAvailableUpsells: e.availableUpsells,
                            filteredAllEmoteSets: e.allEmoteSets,
                            channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                        })
                }, t.prototype.render = function() {
                    return a.createElement(S.p, {
                        "data-a-target": "emote-picker",
                        direction: this.props.direction ? this.props.direction : S.q.TopRight,
                        size: this.props.size ? this.props.size : S.r.Medium,
                        noTail: !0,
                        show: !0
                    }, a.createElement(S.V, {
                        className: f("emote-picker")
                    }, this.renderTabContent(), a.createElement(S.V, {
                        className: "emote-picker__controls-container",
                        position: S._4.Relative
                    }, a.createElement(S._19, {
                        padding: 1,
                        borderTop: !0
                    }, a.createElement(S.R, {
                        autoFocus: !0,
                        onChange: this.handleFilterChange,
                        onKeyDown: this.closeOnEsc,
                        placeholder: Object(p.d)("Search for Emotes", "EmotePicker"),
                        type: S.S.Text,
                        value: this.state.inputValue
                    })), a.createElement(_, {
                        allTabVisible: this.props.allEmoteSets.length > 0,
                        channelTabEnabled: this.state.channelTabEnabled,
                        channelTabSelected: this.state.channelTabSelected,
                        channelTabVisible: !!this.props.channelTabVisible,
                        selectAllTab: this.selectAllTab,
                        selectChannelTab: this.selectChannelTab
                    }))))
                }, t.prototype.renderTabContent = function() {
                    var e = this,
                        t = [];
                    return this.props.gqlError ? t.push(a.createElement(S.V, {
                        key: "emotePicker-error"
                    }, a.createElement(S._23, {
                        color: S.F.Error
                    }, Object(p.d)("Unable to load available emotes.", "EmotePicker")))) : this.props.loading ? t.push(a.createElement(S.V, {
                        alignItems: S.c.Center,
                        display: S.H.Flex,
                        key: "loading",
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: S.U.Center
                    }, a.createElement(S.Z, {
                        key: "LoadingSpinner"
                    }))) : this.state.channelTabEnabled && this.state.channelTabSelected ? (this.state.filteredOwnedChannelEmoteSets.length > 0 && t.push(a.createElement(S.V, {
                        className: "emote-picker__content-block",
                        key: "ownedChannelEmoteSets",
                        padding: 1,
                        position: S._4.Relative
                    }, a.createElement(y.a, {
                        emoteSet: this.state.filteredOwnedChannelEmoteSets[0],
                        onClickEmote: this.props.onClickEmote,
                        locked: !1
                    }))), t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                        return a.createElement(S.V, {
                            className: "emote-picker__content-block",
                            key: "planUpsell:" + t.level,
                            padding: 1,
                            position: S._4.Relative
                        }, a.createElement(E, {
                            plan: t,
                            subscribeTexts: e.props.subscribeTexts,
                            reportSubAction: e.props.reportSubAction
                        }))
                    }))) : t = this.state.filteredAllEmoteSets.map(function(t) {
                        return a.createElement(S.V, {
                            key: "emoteGrid" + t.id,
                            position: S._4.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, a.createElement(y.a, {
                            emoteSet: t,
                            onClickEmote: e.props.onClickEmote,
                            locked: !1
                        }))
                    }), t.length > 0 ? a.createElement(v.b, {
                        className: "emote-picker__tab-content"
                    }, a.createElement(S.V, {
                        padding: 1
                    }, t)) : null
                }, t.prototype.filterEmoteSet = function(e, t) {
                    return e.filter(function(e) {
                        return e.token.toLowerCase().includes(t)
                    })
                }, t.prototype.setChannelTabSelected = function(e) {
                    this.setState({
                        channelTabSelected: e
                    })
                }, t.prototype.filterEmoteSets = function(e, t) {
                    for (var n = [], i = 0, a = e; i < a.length; i++) {
                        var r = a[i],
                            o = this.filterEmoteSet(r.emotes, t);
                        o.length > 0 && n.push({
                            id: r.id,
                            emotes: o
                        })
                    }
                    return n
                }, t.prototype.filterAvailableUpsells = function(e, t) {
                    for (var n = [], a = 0, r = e; a < r.length; a++) {
                        var o = r[a],
                            s = this.filterEmoteSet(o.emotes, t);
                        s.length > 0 && n.push(i.__assign({}, o, {
                            emotes: s
                        }))
                    }
                    return n
                }, t
            }(a.Component)),
            N = n("LYwx"),
            T = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.trackSubEvent = function(e) {
                        Object(g.b)(i.__assign({}, e, {
                            action: g.a.ClickCheckout,
                            channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                            channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "emote_picker",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: null
                        }))
                    };
                    var a = {
                        allEmoteSets: [],
                        availableUpsells: [],
                        channelTabVisible: !1,
                        gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                        gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                        subscribeTexts: [],
                        ownedChannelEmoteSets: [],
                        ownedSetIDs: new Set([])
                    };
                    return a = n.applyDataPropsToState(t, a), n.state = i.__assign({}, a), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                        gqlError: !0
                    });
                    else {
                        var t = this.applyDataPropsToState(e, this.state);
                        this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(i.__assign({}, t, {
                            gqlError: !1
                        }))
                    }
                }, t.prototype.render = function() {
                    return this.props.visible ? a.createElement(C, {
                        allEmoteSets: this.state.allEmoteSets,
                        availableUpsells: this.state.availableUpsells,
                        channelTabVisible: this.state.channelTabVisible,
                        gqlError: this.state.gqlError,
                        loading: this.state.gqlLoading,
                        onClickEmote: this.props.onClickEmote,
                        ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                        toggleVisibility: this.props.toggleVisibility,
                        subscribeTexts: this.state.subscribeTexts,
                        reportSubAction: this.trackSubEvent,
                        direction: this.props.direction,
                        size: this.props.size
                    }) : null
                }, t.prototype.checkDataLoaded = function(e) {
                    var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                        n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                    return t && n
                }, t.prototype.checkForContent = function(e) {
                    var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                        n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                    return t || n
                }, t.prototype.applyDataPropsToState = function(e, t) {
                    var n = i.__assign({}, t);
                    return e.emoteSetsData && e.emoteSetsData.emoteSets && (n.ownedSetIDs = new Set(e.emoteSetsData.emoteSets.map(function(e) {
                        return parseInt(e.id, 10)
                    })), n.allEmoteSets = Object(d.a)(e.emoteSetsData.emoteSets)), e.channelData && e.channelData.user && (n.availableUpsells = function(e, t) {
                        var n = [];
                        return t.forEach(function(t, a) {
                            t.emotes.length && t.emoteSetID && !e.has(parseInt(t.emoteSetID, 10)) && n.push(i.__assign({}, t, {
                                emotes: Object(d.b)(t.emotes),
                                level: a,
                                price: m[a]
                            }))
                        }), n
                    }(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.subscribeTexts = function(e) {
                        for (var t = [], n = 0; n < e.length; n++) {
                            var i = e[n];
                            0 === n && i.emotes.length > 1 ? t[n] = Object(p.d)("Unlock {numEmotes, number} Sub Emotes", {
                                numEmotes: i.emotes.length
                            }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(p.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes.length > 1 ? t[n] = Object(p.d)("{numEmotes, number} Extra {price} Sub Emotes", {
                                numEmotes: i.emotes.length,
                                price: m[n]
                            }, "assembleSubscribeTexts") : i.emotes.length && (t[n] = Object(p.d)("1 Extra ${price, number} Sub Emote", {
                                price: m[n]
                            }, "assembleSubscribeTexts"))
                        }
                        return t
                    }(e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = function(e, t) {
                        for (var n = [{
                                id: "0",
                                emotes: []
                            }], i = 0, a = t; i < a.length; i++) {
                            var r = a[i];
                            r.emoteSetID && e.has(parseInt(r.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(d.b)(r.emotes)))
                        }
                        return n[0].emotes.length ? n : []
                    }(n.ownedSetIDs, e.channelData.user.subscriptionProducts)), n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
                }, t.prototype.subscriptionProductHasEmotes = function(e) {
                    return void 0 !== e.emoteSetID && e.emotes.length > 0
                }, t
            }(a.Component),
            O = Object(r.compose)(Object(o.a)(function(e) {
                return {
                    currentUserID: e.session.user && e.session.user.id,
                    isLoggedIn: Object(u.d)(e)
                }
            }), Object(s.a)(N, {
                name: "channelData",
                skip: function(e) {
                    return !e.channelOwnerID
                },
                options: function(e) {
                    return {
                        variables: {
                            channelOwnerID: e.channelOwnerID
                        }
                    }
                }
            }), Object(l.a)([{
                topic: function(e) {
                    return "user-subscribe-events-v1." + e.currentUserID
                },
                mapMessageTypesToProps: {
                    "*": "subscriptionInfo"
                },
                skip: function(e) {
                    return !e.currentUserID
                }
            }]), Object(h.c)("EmotePicker"), Object(c.a)())(T);
        n.d(t, "a", function() {
            return O
        })
    },
    P0T5: function(e, t, n) {
        "use strict";

        function i(e) {
            u.n.tracking.track(d.SpadeEventType.WhisperThreadMod, {
                conversation_id: e.threadID,
                action: e.action
            })
        }

        function a(e) {
            return c.__awaiter(this, void 0, void 0, function() {
                var t;
                return c.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, s()];
                        case 1:
                            return t = n.sent(), u.n.tracking.track(d.SpadeEventType.WhisperIgnoreUser, {
                                ui_context: e.context,
                                from_login: t && t.login,
                                ignored_login: e.targetUserLogin,
                                reason: e.reason || l.Other,
                                source: e.source
                            }), [2]
                    }
                })
            })
        }

        function r(e, t) {
            return c.__awaiter(this, void 0, void 0, function() {
                var n;
                return c.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, s()];
                        case 1:
                            return n = i.sent(), u.n.tracking.track(d.SpadeEventType.WhisperThreadMod, {
                                conversation_id: e,
                                action: t,
                                login: n && n.login
                            }), [2]
                    }
                })
            })
        }

        function o(e) {
            u.n.tracking.track(d.SpadeEventType.WhisperAllThreadsMod, {
                action: e
            })
        }

        function s() {
            return c.__awaiter(this, void 0, void 0, function() {
                var e, t, n;
                return c.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            e = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, u.n.apollo.client.query({
                                query: p
                            })];
                        case 2:
                            return e = i.sent(), [3, 4];
                        case 3:
                            return t = i.sent(), u.i.error(t, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                        case 4:
                            return n = e && e.data && e.data.currentUser, [2, n]
                    }
                })
            })
        }
        n.d(t, "a", function() {
            return g
        }), t.j = function() {
            o(m.MarkAllRead)
        }, t.h = function() {
            o(m.EnableDoNotDisturb)
        }, t.g = function() {
            o(m.DisableDoNotDisturb)
        }, t.l = function(e, t) {
            a({
                context: t,
                targetUserLogin: e,
                reason: l.Spam,
                source: "conversations_button"
            })
        }, t.o = function(e) {
            r(e, f.MarkNotSpam)
        }, t.n = function(e) {
            r(e, f.Archive)
        }, t.k = function(e) {
            i({
                threadID: e,
                action: h.Mute
            })
        }, t.m = function(e) {
            i({
                threadID: e,
                action: h.Unmute
            })
        }, t.i = function(e) {
            i({
                threadID: e,
                action: h.Expand
            })
        }, t.e = function(e) {
            i({
                threadID: e,
                action: h.Collapse
            })
        }, t.d = function(e) {
            i({
                threadID: e,
                action: h.Close
            })
        }, t.b = function(e) {
            i({
                threadID: e,
                action: h.Archive
            })
        }, t.f = function(e) {
            u.n.tracking.track(d.SpadeEventType.WhisperThreadCreate, {
                conversation_id: e.threadID,
                target_login: e.targetUserlogin,
                source: "search_target_result",
                search_result_rank: e.searchResultRank
            })
        }, t.c = function(e) {
            u.n.tracking.track(d.SpadeEventType.WhisperSearchClick, {
                query: e.searchQuery,
                source: "conversation_list",
                rank: e.searchResultRank,
                is_conversation: e.isConversation
            })
        }, t.q = function(e) {
            return c.__awaiter(this, void 0, void 0, function() {
                var t;
                return c.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, s()];
                        case 1:
                            return t = n.sent(), u.n.tracking.track(d.SpadeEventType.WhisperSent, {
                                to: e.targetUserLogin,
                                from: t && t.login,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID,
                                availability: t && t.availability
                            }), [2]
                    }
                })
            })
        }, t.p = function(e) {
            return c.__awaiter(this, void 0, void 0, function() {
                var t;
                return c.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, s()];
                        case 1:
                            return t = n.sent(), u.n.tracking.track(d.SpadeEventType.WhisperReceived, {
                                to: t && t.login,
                                from: e.targetUserLogin,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID
                            }), [2]
                    }
                })
            })
        };
        var l, c = n("TToO"),
            u = n("6sO2"),
            d = n("vH/s"),
            p = n("CCVP");
        n.n(p);
        ! function(e) {
            e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
        }(l || (l = {}));
        var m;
        ! function(e) {
            e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
        }(m || (m = {}));
        var h;
        ! function(e) {
            e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
        }(h || (h = {}));
        var g;
        ! function(e) {
            e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
        }(g || (g = {}));
        var f;
        ! function(e) {
            e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
        }(f || (f = {}))
    },
    PHcJ: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        });
        var i;
        ! function(e) {
            e[e.AllVideos = 0] = "AllVideos", e[e.PastBroadcasts = 1] = "PastBroadcasts", e[e.Uploads = 2] = "Uploads", e[e.Highlights = 3] = "Highlights"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e[e.AnyLength = 0] = "AnyLength", e[e.Short = 1] = "Short", e[e.Long = 2] = "Long"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e[e.Popular = 0] = "Popular", e[e.Newest = 1] = "Newest"
        }(r || (r = {}))
    },
    POVT: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Actions_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "query Core_Actions_CurrentUser {\ncurrentUser {\ndisplayName\nid\nlogin\nroles {\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Q8Dy: function(e, t) {},
    QG7y: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return r
        }), n.d(t, "c", function() {
            return o
        }), n.d(t, "d", function() {
            return s
        }), n.d(t, "a", function() {
            return l
        }), n.d(t, "f", function() {
            return c
        }), n.d(t, "e", function() {
            return u
        }), n.d(t, "g", function() {
            return d
        }), t.i = function(e) {
            d.emit(c, e)
        }, t.h = function(e) {
            d.emit(u, e)
        };
        var i = n("BzvE"),
            a = (n.n(i), n("6sO2")),
            r = {
                directory: {
                    banner: "dfp-directory-banner",
                    rectangle: "dfp-directory-rectangle"
                },
                channel250: "google_companion_300x250",
                anonFront: {
                    rect: "Twitch_FPMedRect_holder",
                    banner: "Twitch_FPopaBanner_holder",
                    takeover: "Twitch_FPTakeoverSkinv2_holder",
                    bottom: "Twitch_FP970Bottom_holder",
                    sizzle: "sizzle_strip"
                },
                front: {
                    leaderboard: "hpto_logged_in_leaderboard",
                    rightTop: "hpto_logged_in_rcol_top",
                    rightBottom: "hpto_logged_in_rcol_bottom"
                }
            },
            o = {
                directory: {
                    banner: [
                        [970, 66],
                        [970, 250],
                        [728, 90]
                    ],
                    rectangle: [
                        [300, 250]
                    ]
                },
                channel250: [300, 250],
                anonFront: {
                    rect: [
                        [300, 250]
                    ],
                    banner: [
                        [970, 418],
                        [970, 67],
                        [970, 250],
                        [970, 150],
                        [980, 250]
                    ],
                    takeover: [
                        [1, 1]
                    ],
                    bottom: [
                        [970, 66],
                        [728, 90]
                    ],
                    sizzle: [
                        [980, 250]
                    ]
                },
                front: {
                    leaderboard: [
                        [970, 66],
                        [728, 90]
                    ],
                    rightTop: [
                        [300, 250]
                    ],
                    rightBottom: [
                        [300, 600]
                    ]
                }
            },
            s = {
                directory: "/" + a.a.dfpNetworkCode + "/twitch/directory",
                channel: "/" + a.a.dfpNetworkCode + "/twitch/channels",
                frontpage: "/" + a.a.dfpNetworkCode + "/twitch/homepage",
                sizzle: "/" + a.a.dfpNetworkCode + "/twitch/sizzle_strip"
            },
            l = {
                games: "games",
                channel: "channel",
                frontpage: "homepage"
            },
            c = "ads.slot-render-end",
            u = "ads.slot-ready",
            d = new i.EventEmitter
    },
    QPF3: function(e, t, n) {
        "use strict";
        t.a = function() {
            if (i.b) return +window.getComputedStyle(i.b).getPropertyValue("width").replace("px", "");
            return 0
        };
        var i = n("1Mw/")
    },
    Qk3C: function(e, t, n) {
        "use strict";

        function i(e) {
            return function() {
                Object(o.c)(e), window.location.reload(!0)
            }
        }
        var a = n("RH2O"),
            r = n("2KeS"),
            o = n("FuaS"),
            s = n("TToO"),
            l = n("U7vG"),
            c = n("6sO2"),
            u = n("Odds"),
            d = (n("2Nqs"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderLink = function(e) {
                        return l.createElement(u.T, {
                            key: e.languageCode,
                            onClick: function() {
                                return t.props.changeLanguage(e.languageCode)
                            },
                            "data-target": "language-selector-link"
                        }, l.createElement(u.V, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e.name))
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = Math.floor(c.a.locales.length / 2);
                    return l.createElement(u.V, {
                        className: "language-selector",
                        display: u.H.Flex,
                        padding: {
                            y: 1
                        }
                    }, l.createElement("div", {
                        className: "language-selector__list language-selector__list--border-right"
                    }, c.a.locales.slice(0, e).map(this.renderLink)), l.createElement("div", {
                        className: "language-selector__list"
                    }, c.a.locales.slice(e).map(this.renderLink)))
                }, t
            }(l.Component)),
            p = Object(a.a)(function() {
                return {}
            }, function(e) {
                return Object(r.bindActionCreators)({
                    changeLanguage: i
                }, e)
            })(d);
        n.d(t, "a", function() {
            return p
        })
    },
    R0Kh: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "f", function() {
            return c
        }), n.d(t, "e", function() {
            return u
        }), n.d(t, "g", function() {
            return d
        }), n.d(t, "i", function() {
            return p
        }), n.d(t, "h", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        });
        var i = n("OAwv"),
            a = (n.n(i), n("6sO2")),
            r = n("S1vB"),
            o = {
                DIRECT_ENTITLEMENT: "DIRECT_ENTITLEMENT",
                CLAIM_CODE: "CLAIM_CODE",
                EXTERNAL_OFFER: "EXTERNAL_OFFER"
            },
            s = function(e, t) {
                return e + "-" + t
            },
            l = function() {
                return m("claimedOffers")
            },
            c = function(e) {
                a.k.set("claimedOffers", e)
            },
            u = function() {
                return m("seenOffers")
            },
            d = function(e) {
                a.k.set("seenOffers", e)
            },
            p = function(e, t) {
                return (e && (e.priority || 0 === e.priority) ? e.priority : 99999) - (t && (t.priority || 0 === t.priority) ? t.priority : 99999)
            },
            m = function(e) {
                return a.k.get(e, [])
            },
            h = function(e, t) {
                return void 0 !== e && void 0 !== t && (!e && Object(r.a)(t))
            },
            g = function() {
                var e = location.search,
                    t = i.parse(e);
                return t && t.dateOverride || void 0
            }
    },
    "RSE+": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "d", function() {
            return o
        });
        var i;
        ! function(e) {
            e.Web = "web", e.Desktop = "desktop"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Live = "live", e.Communities = "communities", e.Games = "games", e.Hosts = "hosts", e.ForYou = "foryou"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.WatchParty = "watch_party", e.PastPremiere = "past_premiere", e.PremiereUpload = "premiere_upload"
        }(r || (r = {}));
        var o;
        ! function(e) {
            e.Clip = "clip", e.Channel = " channel", e.Chomment = "chomment", e.Collection = "collection", e.Event = "event", e.Game = "game", e.Stream = "stream", e.Video = "vod", e.User = "user"
        }(o || (o = {}))
    },
    RSqL: function(e, t) {},
    RweG: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        i.unsubscribers = {};
                        var a = {};
                        return e.map(function(e) {
                            e.skip && e.skip(t) || (a[i.getTopic(e.topic, t)] = {
                                isSubscribing: !0
                            })
                        }), i.state = {
                            status: a,
                            messages: {}
                        }, i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        var t = this;
                        e.map(function(e) {
                            if (!e.skip || !e.skip(t.props)) {
                                var n = t.getTopic(e.topic, t.props);
                                t.unsubscribers[n] = o.j.subscribe({
                                    topic: n,
                                    success: function() {
                                        t.setState(function(e) {
                                            return {
                                                status: a.__assign({}, e.status, (t = {}, t[n] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        t.setState(function(t) {
                                            return {
                                                status: a.__assign({}, t.status, (i = {}, i[n] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, i))
                                            };
                                            var i
                                        })
                                    },
                                    onMessage: function(n) {
                                        e.mapMessageTypesToProps[n.type || ""] ? t.setState(function(t) {
                                            return {
                                                messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps[n.type || ""]] = n, i))
                                            };
                                            var i
                                        }) : e.mapMessageTypesToProps["*"] && t.setState(function(t) {
                                            return {
                                                messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = n, i))
                                            };
                                            var i
                                        })
                                    }
                                })
                            }
                        })
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = this,
                            i = {},
                            r = {};
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t)) {
                                var s = n.getTopic(e.topic, t);
                                i[s] || (i[s] = {
                                    isSubscribing: !0
                                }), n.unsubscribers[s] ? r[s] = n.unsubscribers[s] : r[s] = o.j.subscribe({
                                    topic: s,
                                    success: function() {
                                        n.setState(function(e) {
                                            return {
                                                status: a.__assign({}, e.status, (t = {}, t[s] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        n.setState(function(t) {
                                            return {
                                                status: a.__assign({}, t.status, (n = {}, n[s] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, n))
                                            };
                                            var n
                                        })
                                    },
                                    onMessage: function(t) {
                                        e.mapMessageTypesToProps[t.type || ""] ? n.setState(function(n) {
                                            return {
                                                messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps[t.type || ""]] = t, i))
                                            };
                                            var i
                                        }) : e.mapMessageTypesToProps["*"] && n.setState(function(n) {
                                            return {
                                                messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = t, i))
                                            };
                                            var i
                                        })
                                    }
                                })
                            }
                        }), Object.keys(this.unsubscribers).forEach(function(e) {
                            r[e] || n.unsubscribers[e]()
                        }), this.unsubscribers = r, this.setState(function(e) {
                            return {
                                status: a.__assign({}, e.status, i)
                            }
                        })
                    }, i.prototype.componentWillUnmount = function() {
                        var e = this;
                        Object.keys(this.unsubscribers).map(function(t) {
                            return e.unsubscribers[t]()
                        })
                    }, i.prototype.render = function() {
                        var e = {
                            pubsub: {
                                messages: this.state.messages,
                                status: this.state.status
                            }
                        };
                        return r.createElement(t, a.__assign({}, this.props, e))
                    }, i.prototype.getTopic = function(e, t) {
                        return "string" == typeof e ? e : e(t)
                    }, i
                }(r.Component)
            }
        }
        var a = n("TToO"),
            r = n("U7vG"),
            o = n("6sO2");
        n.d(t, "a", function() {
            return i
        })
    },
    RxMT: function(e, t, n) {
        "use strict";
        var i = n("AckU"),
            a = n("TToO"),
            r = n("U7vG"),
            o = n("6sO2"),
            s = n("HM6l"),
            l = n("cuT/"),
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderPortal = function(e) {
                        l.c ? l.c.provideContent(e, n.contentID) : o.i.warn("RightColumn must be defined on the Root to manipulate its content.")
                    }, n.removePortal = function() {
                        l.c ? l.c.removeContent() : o.i.warn("RightColumn must be defined on the Root to manipulate its content.")
                    }, n.contentID = Object(s.a)(), n
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.children ? this.renderPortal(e.children) : this.removePortal()
                }, t.prototype.componentDidMount = function() {
                    l.c || o.i.warn("RightColumn must be defined on the Root to manipulate its content."), this.props.children && this.renderPortal(this.props.children)
                }, t.prototype.componentWillUnmount = function() {
                    this.removePortal()
                }, t.prototype.render = function() {
                    return null
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return c
        })
    },
    Ryxq: function(e, t, n) {
        "use strict";
        t.b = function(e) {
            var t = Math.floor(e / 3600),
                n = Math.floor((e - 3600 * t) / 60),
                i = e - 3600 * t - 60 * n;
            return t < 10 && (t = "0" + t), n < 10 && (n = "0" + n), i < 10 && (i = "0" + i), t + "h" + n + "m" + i + "s"
        }, t.a = function(e) {
            return "" === e ? "" : e.startsWith("v") ? e : "v" + e
        }
    },
    S1vB: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = i.b.get("prime_blocked_regions", []);
            return !!e && !t.includes(e.toUpperCase())
        };
        var i = n("6sO2")
    },
    SUA7: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowButton_UnfollowUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfollowUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unfollowUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "follow"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 130
            }
        };
        n.loc.source = {
            body: "mutation FollowButton_UnfollowUser($input: UnfollowUserInput!) {\nunfollowUser(input: $input) {\nfollow {\ndisableNotifications\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    SX5d: function(e, t) {},
    SZoP: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("U7vG"),
            a = (n.n(i), /^[\x00-\x7F]*$/),
            r = function(e, t, n) {
                return void 0 === n && (n = !1), t && e && ! function(e) {
                    return a.test(e)
                }(t) ? n ? t + " (" + e + ")" : i.createElement("span", null, t, " ", i.createElement("span", {
                    className: "intl-login"
                }, "(" + e + ")")) : t || (e || "")
            }
    },
    TMvI: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "OnlineFriends"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "login"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "profileImageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "70"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "hosting"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 338
            }
        };
        n.loc.source = {
            body: "query OnlineFriends {\ncurrentUser {\nid\nfriends {\nedges {\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\nhosting {\nid\ndisplayName\nlogin\n}\n}\n}\n}\navailability\nnode {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\nhosting {\nid\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    TVUY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "currentUser"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "availability"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "activity"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Watching"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "user"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Streaming"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Playing"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 204
            }
        };
        n.loc.source = {
            body: "fragment currentUser on User {\nid\nlogin\ndisplayName\navailability\nactivity {\ntype\n... on Watching {\nuser {\ndisplayName\n}\n}\n... on Streaming {\nstream {\ngame {\nname\n}\n}\n}\n... on Playing {\ngame {\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "TWH+": function(e, t) {},
    TbkX: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BrowserPushNotifications_AddBrowserPushSubscription"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AddBrowserPushSubscriptionInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "addBrowserPushSubscription"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "browserPushSubscriptionID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "mutation BrowserPushNotifications_AddBrowserPushSubscription($input: AddBrowserPushSubscriptionInput!) {\naddBrowserPushSubscription(input: $input) {\nbrowserPushSubscriptionID\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Th9g: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("HW6M"),
            o = n("KSGD"),
            s = n("U7vG"),
            l = n("6sO2");
        n("aiwk");
        ! function(e) {
            e[e.Up = 0] = "Up", e[e.Down = 1] = "Down"
        }(i || (i = {}));
        var c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    hasPendingLoadMoreRequest: !1,
                    loadedMore: !0
                }, t.isTriggerVisible = function(e, t) {
                    var n = t.top,
                        i = t.top + t.height;
                    return !(e.bottom < n || e.top > i)
                }, t.getOrientation = function() {
                    return void 0 === t.props.orientation ? i.Up : t.props.orientation
                }, t.setWrapRef = function(e) {
                    return t.wrapElement = e
                }, t.setRef = function(e) {
                    return t.element = e
                }, t
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this.getOrientation(),
                    t = r({
                        "scrollable-trigger__trigger-area": !0,
                        "scrollable-trigger__trigger-area--up": e === i.Up,
                        "scrollable-trigger__trigger-area--down": e === i.Down
                    }),
                    n = {
                        height: this.props.pixelThreshold || 100
                    };
                return s.createElement("div", {
                    className: "scrollable-trigger__wrapper",
                    ref: this.setWrapRef
                }, s.createElement("div", {
                    className: t,
                    ref: this.setRef,
                    style: n
                }))
            }, t.prototype.componentDidMount = function() {
                var e = this.context.registerReceiver;
                e ? this.unregister = e(this) : l.i.warn("<InfiniteScrollTrigger /> initialized missing a <ScrollableArea /> provider")
            }, t.prototype.componentWillUnmount = function() {
                this.unregister && this.unregister()
            }, t.prototype.componentWillReceiveProps = function(e) {
                !this.props.enabled && e.enabled && this.context.requestVisibilityCheck(this)
            }, t.prototype.checkVisible = function(e, t, n) {
                return a.__awaiter(this, void 0, void 0, function() {
                    var t, i, r, o, s = this;
                    return a.__generator(this, function(a) {
                        switch (a.label) {
                            case 0:
                                if (void 0 === n && (n = this.props.requestCap || 5), !(this.element && this.state.loadedMore && !this.state.hasPendingLoadMoreRequest && this.props.enabled && n > 0)) return [3, 4];
                                if (t = this.element.getBoundingClientRect(), i = this.props.contentLength, r = this.wrapElement.offsetTop, !this.isTriggerVisible(t, e)) return [3, 4];
                                this.setState({
                                    hasPendingLoadMoreRequest: !0
                                }), a.label = 1;
                            case 1:
                                return a.trys.push([1, 3, , 4]), [4, this.props.loadMore()];
                            case 2:
                                return a.sent(), this.setState({
                                    hasPendingLoadMoreRequest: !1
                                }), requestAnimationFrame(function() {
                                    if (s.element) {
                                        var t;
                                        t = void 0 !== s.props.contentLength && void 0 !== i ? s.props.contentLength > i : s.wrapElement.offsetTop > r, s.setState({
                                            loadedMore: t
                                        }), n && t && s.checkVisible(e, void 0, n - 1)
                                    }
                                }), [3, 4];
                            case 3:
                                throw o = a.sent(), this.element && this.setState({
                                    hasPendingLoadMoreRequest: !1
                                }), o;
                            case 4:
                                return [2]
                        }
                    })
                })
            }, t.contextTypes = {
                registerReceiver: o.func,
                requestVisibilityCheck: o.func
            }, t
        }(s.Component);
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return c
        })
    },
    Tr88: function(e, t) {},
    Tzcg: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return c
        }), n.d(t, "c", function() {
            return u
        }), n.d(t, "a", function() {
            return p
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        });
        var i = n("TToO"),
            a = n("Bir6"),
            r = n("nEoF"),
            o = {
                "^B-?\\)$": "B)",
                "^:-?[z|Z|\\|]$": ":|",
                "^:-?\\)$": ":)",
                "^:-?\\($": ":(",
                "^:-?(p|P)$": ":P",
                "^;-?(p|P)$": ";P",
                "^:-?[\\\\/]$": ":/",
                "^;-?\\)$": ";)",
                "^R-?\\)$": "R)",
                "^:>$": ":>",
                "^[oO](_|\\.)[oO]$": "O_o",
                "^:-?D$": ":D",
                "^:-?(o|O)$": ":O",
                "^>\\($": ">(",
                "^:-?(?:7|L)$": ":7",
                "^:-?(S|s)$": ":S",
                "^#-?[\\\\/]$": "#/",
                "^<\\]$": "<]",
                "^<3$": "<3",
                "^&lt;3$": "<3",
                "^&lt;\\]$": "<]",
                "^&gt;\\($": ">("
            },
            s = ["1.0", "2.0", "3.0"],
            l = new Set([457, 33, 42, 0]),
            c = function(e) {
                return e.map(function(e) {
                    var t = m(e.token),
                        n = o[t] || t,
                        a = s.reduce(function(t, n) {
                            var i = t.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x");
                            return "3.0" !== n && (i = i.concat(", ")), i
                        }, "");
                    return i.__assign({
                        displayName: n,
                        srcSet: a
                    }, e)
                })
            },
            u = function(e) {
                var t = m(e);
                return o[t] || t
            },
            d = function(e) {
                return e.slice().sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            },
            p = function(e) {
                for (var t = [], n = [], i = 0, a = e; i < a.length; i++) {
                    var r = a[i];
                    l.has(parseInt(r.id, 10)) ? t.push({
                        id: r.id,
                        emotes: c(d(r.emotes))
                    }) : n.push({
                        id: r.id,
                        emotes: c(d(r.emotes))
                    })
                }
                return n.concat(t)
            },
            m = function(e) {
                if (! function(e) {
                        return /[\|\\\^\$\*\+\?\:\#]/.test(e)
                    }(e)) return e;
                return "^" + e.replace(/\\(?=[&;:])/g, "") + "$"
            },
            h = function(e, t) {
                var n = r.b,
                    i = [],
                    o = [],
                    s = [],
                    l = new RegExp("^" + Object(a.a)(t), "i");
                return e.forEach(function(e) {
                    n[e.token] ? s.push(e) : e.token.match(l) ? i.push(e) : o.push(e)
                }), i.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), o.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), s.sort(function(e, t) {
                    return n[t.token].count - n[e.token].count
                }), s.concat(i).concat(o)
            },
            g = function(e) {
                var t = {};
                return e.filter(function(e) {
                    return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                })
            }
    },
    U3i2: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = {},
                i = function(e) {
                    var t = e.actions.filter(function(e) {
                        return "click" === e.type
                    });
                    return t.length > 0 ? t[0].url : ""
                }(e);
            if (!i) return n;
            var a;
            try {
                a = new URL(i)
            } catch (t) {
                return p.i.error(t.toString(), i + " was malformed from notification id:[" + e.id + "]"), n
            }
            return ! function(e, t) {
                if (O.has(e)) return !1;
                return "https://www.twitch.tv" === t.origin
            }(e.type, a) ? (n.linkTo = function(e, t, n) {
                var i = e.split("?");
                if (1 === i.length) return e + "?tt_content=" + t + "&tt_medium=" + n;
                var a = u.parse(i[1]);
                return a.tt_content = a.tt_content ? a.tt_content : t, a.tt_medium = a.tt_medium ? a.tt_medium : n, [i[0], u.stringify(a, {
                    encode: !1
                })].join("?")
            }(a.toString(), e.type, t), n.targetBlank = !0) : n.linkTo = {
                pathname: a.pathname,
                search: a.search,
                state: {
                    content: e.type,
                    medium: t
                }
            }, n
        }

        function a(e, t) {
            return {
                id: e.id,
                body: e.body_md,
                type: e.type,
                thumbnailURL: e.thumbnail_url,
                createdAt: e.created_at,
                updatedAt: e.updated_at,
                isRead: e.read,
                actions: e.actions.map(function(e) {
                    return {
                        body: e.body,
                        type: e.type,
                        url: e.url,
                        __typename: "OnsiteNotificationAction"
                    }
                }),
                isTransient: !t,
                __typename: "OnsiteNotification"
            }
        }

        function r(e, t) {
            return ne.debug("Received pubsub summary update", e), t && t.currentUser && t.currentUser.notifications && t.currentUser.notifications.summary && e.data.summary ? (t.currentUser.notifications.summary.lastSeenAt = e.data.summary.last_seen_at, t.currentUser.notifications.summary.unseenCount = e.data.summary.unseen_view_count, t) : t
        }

        function o(e, t) {
            if (ne.debug("Received pubsub notification update", e), !(t && t.currentUser && t.currentUser.notifications && t.currentUser.notifications.edges && t.currentUser.notifications.edges)) return t;
            if (function(e) {
                    return e.type === v.c.OnsiteNotificationsRead
                }(e)) {
                var n = new Set(e.data.notification_ids),
                    i = t.currentUser.notifications.edges.map(function(e) {
                        return n.has(e.node.id) ? c.__assign({}, e, {
                            node: c.__assign({}, e.node, {
                                isRead: !0
                            })
                        }) : e
                    });
                t.currentUser.notifications.edges = i
            } else if (function(e) {
                    return e.type === v.c.OnsiteNotificationCreate || e.type === v.c.OnsiteNotificationUpdate
                }(e)) {
                if (e.data.persistent) {
                    var r = a(e.data.notification, !0);
                    (i = s(t.currentUser.notifications.edges, r.id)).unshift({
                        cursor: null,
                        node: r,
                        __typename: "OnsiteNotificationEdge"
                    }), t.currentUser.notifications.edges = i
                }
            } else(function(e) {
                return e.type === v.c.OnsiteNotificationDelete
            })(e) && (t.currentUser.notifications.edges = s(t.currentUser.notifications.edges, e.data.notification_id));
            return t
        }

        function s(e, t) {
            return e.filter(function(e) {
                return e.node.id !== t
            })
        }
        var l, c = n("TToO"),
            u = n("OAwv"),
            d = n("U7vG"),
            p = n("6sO2"),
            m = n("+Znq"),
            h = n("7vx8"),
            g = n("WIs4"),
            f = n("Ejve"),
            v = n("C8Io"),
            b = n("oIkB"),
            y = n("HZww"),
            k = n("CSlQ"),
            S = n("zCIC"),
            _ = n("BhyV"),
            w = n("gIPD"),
            E = n.n(w),
            C = n("KSGD"),
            N = n("lfvs"),
            T = n("vH/s"),
            O = new Set(["affiliateinvite", "feedcomment", "friendrequests", "partneragreementupdate", "partnerinvite"]),
            I = {
                Center: "center",
                Toast: "toast",
                Browser: "browser"
            },
            D = {
                Open: "open",
                Close: "close",
                MarkAllRead: "mark_all_read"
            },
            L = {
                PrimaryCta: "primary_cta",
                Dismiss: "dismiss"
            },
            x = function(e) {
                var t = {
                    notification_id: e.notification.id,
                    notification_type: e.notification.type,
                    ui_context: e.uiContext
                };
                p.m.track(T.SpadeEventType.NotificationImpression, t)
            },
            R = function(e) {
                var t = {
                    unseen_view_count: e.unseenCount,
                    action: e.action
                };
                p.m.track(T.SpadeEventType.NotificationCenterInteraction, t)
            },
            F = function(e) {
                var t = {
                    notification_id: e.notification.id,
                    notification_type: e.notification.type,
                    ui_context: e.uiContext,
                    action: e.action
                };
                p.m.track(T.SpadeEventType.NotificationInteraction, t)
            },
            P = n("Odds"),
            U = (n("UW/+"), "persistent-notification__delete"),
            M = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.impressionEventFired = !1, t.isVisible = function(e) {
                        if (null !== t.element) {
                            var n = t.element.getBoundingClientRect();
                            return n.top < e.bottom && n.bottom > e.top
                        }
                        return !1
                    }, t.setRef = function(e) {
                        return t.element = e
                    }, t.deleteNotification = function() {
                        F({
                            uiContext: I.Center,
                            notification: t.props.data,
                            action: L.Dismiss
                        }), t.props.onDeleteNotification(t.props.data.id)
                    }, t.clickNotification = function() {
                        F({
                            uiContext: I.Center,
                            notification: t.props.data,
                            action: L.PrimaryCta
                        }), t.props.onViewNotification(t.props.data.id)
                    }, t.renderDeleteNotification = function() {
                        return d.createElement(P.V, {
                            className: "persistent-notification__delete",
                            padding: {
                                top: 1,
                                left: 1,
                                right: .5
                            },
                            position: P._4.Absolute
                        }, d.createElement(P.V, {
                            display: P.H.Flex,
                            flexWrap: P.K.NoWrap,
                            alignItems: P.c.Start
                        }, d.createElement(P.v, {
                            ariaLabel: "delete-notification",
                            "data-test-selector": U,
                            icon: P._11.Close,
                            size: P.x.Small,
                            onClick: t.deleteNotification
                        })))
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive();
                    var e = this.context.registerReceiver;
                    e ? this.unregister = e(this) : p.i.warn("<PersistentNotification /> initialized missing a <ScrollableArea /> provider")
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister && this.unregister()
                }, t.prototype.render = function() {
                    return d.createElement(P.V, {
                        className: "persistent-notification",
                        position: P._4.Relative,
                        refDelegate: this.setRef,
                        "data-test-selector": "persistent-notification"
                    }, d.createElement(P._19, {
                        display: P.H.Flex,
                        className: this.props.data.isRead ? "persistent-notification__read" : "persistent-notification__unread",
                        borderBottom: !0,
                        flexWrap: P.K.NoWrap
                    }, d.createElement(P.T, c.__assign({
                        "data-test-selector": "persistent-notification__click",
                        onClick: this.clickNotification
                    }, i(this.props.data, T.PageviewMedium.NotificationCenter), {
                        alpha: !0
                    }), d.createElement(P.V, {
                        className: "persistent-notification__area",
                        display: P.H.Flex,
                        flexWrap: P.K.NoWrap,
                        padding: {
                            top: 1,
                            bottom: 1,
                            left: 1,
                            right: 3
                        }
                    }, d.createElement(P.C, {
                        aspect: P.k.Aspect1x1,
                        imageSrc: this.props.data.thumbnailURL,
                        imageAlt: Object(p.d)("Notification center item thumbnail", "OnsiteNotifications"),
                        size: P.D.Size4
                    }), d.createElement(P.V, {
                        display: P.H.Flex,
                        flexDirection: P.J.Column,
                        flexWrap: P.K.NoWrap,
                        margin: {
                            x: 1
                        }
                    }, d.createElement(P.V, {
                        className: "persistent-notification__body",
                        overflow: P._0.Hidden,
                        "data-test-selector": "persistent-notification__body"
                    }, d.createElement(P._23, {
                        type: P._28.Span,
                        color: P.F.Alt
                    }, d.createElement(N, {
                        source: this.props.data.body || ""
                    }))), d.createElement(P.V, {
                        display: P.H.Flex,
                        alignItems: P.c.Center,
                        flexShrink: 0,
                        margin: {
                            top: .5
                        }
                    }, d.createElement(P._10, {
                        asset: P._11.MessagesSC,
                        height: 12,
                        width: 12,
                        type: P._12.Alt2
                    }), d.createElement(P.V, {
                        margin: {
                            left: .5
                        }
                    }, d.createElement(P._23, {
                        type: P._28.Span,
                        color: P.F.Alt2
                    }, Object(p.g)(new Date(this.props.data.updatedAt)))))))), this.renderDeleteNotification()))
                }, t.prototype.checkVisible = function(e) {
                    return c.__awaiter(this, void 0, void 0, function() {
                        return c.__generator(this, function(t) {
                            return !this.impressionEventFired && this.isVisible(e) && (x({
                                uiContext: I.Center,
                                notification: this.props.data
                            }), this.impressionEventFired = !0), [2]
                        })
                    })
                }, t.contextTypes = {
                    registerReceiver: C.func
                }, t = c.__decorate([Object(k.c)("PersistentNotification")], t)
            }(d.Component),
            A = n("+e5i"),
            V = n("UUPo"),
            j = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isRead: !1
                    }, t.createNotificationData = function() {
                        return {
                            id: "friendrequests",
                            type: "friendrequests",
                            body: Object(p.d)("{count, plural, one {You have # new friend request} other {You have # new friend requests}}", {
                                count: t.props.count
                            }, "FriendRequestsNotification"),
                            createdAt: t.props.date,
                            updatedAt: t.props.date,
                            isRead: t.props.isOldNotification || t.state.isRead,
                            thumbnailURL: E.a,
                            actions: [{
                                body: "View",
                                type: "click",
                                url: "https://www.twitch.tv/friends/requests"
                            }]
                        }
                    }, t.clearUnseenCount = function() {
                        Object(b.d)(V, {}, function(e) {
                            return e.currentUser.incomingFriendRequests.totalUnreadCount = 0, e
                        }), t.props.clearUnreadFriendRequests().then(function() {}).catch(function(e) {
                            return p.i.error(e, "[FriendRequestsNotification] Failed to clear unread requests.")
                        })
                    }, t.viewFriendRequests = function() {
                        t.setState({
                            isRead: !0
                        })
                    }, t
                }
                return c.__extends(t, e), t.prototype.render = function() {
                    return d.createElement(M, {
                        key: "friendRequestsNotification",
                        data: this.createNotificationData(),
                        onDeleteNotification: this.clearUnseenCount,
                        onViewNotification: this.viewFriendRequests
                    })
                }, t
            }(d.Component),
            H = Object(_.compose)(Object(h.a)(A, {
                name: "clearUnreadFriendRequests"
            }))(j),
            B = (n("cLQP"), "center-window__empty"),
            z = "center-window__content-footer",
            W = "center-window__footer__text",
            q = "center-window__read-all",
            G = p.i.withCategory("onsite-notifications-center-window"),
            Q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isLoadingMore: !1
                    }, t.renderContent = function() {
                        if (!t.props.hasInitiallyLoaded || t.props.data.length || t.props.friendRequestsData) {
                            return [t.mapPersistentNotificationElements(), t.renderContentFooter()]
                        }
                        return t.renderEmptyCenterWindowElement()
                    }, t.renderContentFooter = function() {
                        var e = !t.props.hasInitiallyLoaded || t.state.isLoadingMore ? d.createElement(P.Z, {
                            delay: 0,
                            fillContent: !0
                        }) : d.createElement(P._10, {
                            asset: P._11.LogoGlitch,
                            width: 24,
                            height: 24,
                            type: P._12.Alt2
                        });
                        return d.createElement(P.V, {
                            className: "center-window__content-footer",
                            key: "center-window__content-footer",
                            "data-test-selector": z,
                            display: P.H.Flex,
                            flexDirection: P.J.Column,
                            justifyContent: P.U.Center,
                            alignItems: P.c.Center,
                            textAlign: P._24.Center,
                            padding: 1,
                            flexGrow: 1
                        }, e)
                    }, t.mapPersistentNotificationElements = function() {
                        var e = t.props.data.map(function(e) {
                            return d.createElement(M, {
                                key: "onsite-notification-" + e.node.id,
                                data: e.node,
                                onDeleteNotification: t.props.onDeleteNotification,
                                onViewNotification: t.props.onViewNotification
                            })
                        });
                        return t.props.friendRequestsData && e.unshift(d.createElement(H, c.__assign({}, t.props.friendRequestsData))), e
                    }, t.renderEmptyCenterWindowElement = function() {
                        return d.createElement(P._19, {
                            "data-test-selector": B,
                            className: "center-window__empty-state",
                            background: P.m.Alt,
                            display: P.H.Flex,
                            justifyContent: P.U.Center,
                            alignItems: P.c.Center,
                            textAlign: P._24.Center,
                            flexDirection: P.J.Column,
                            padding: 2,
                            fullWidth: !0
                        }, d.createElement(P._10, {
                            asset: P._11.LogoGlitch,
                            width: 100,
                            height: 100,
                            type: P._12.Placeholder
                        }), d.createElement(P.V, {
                            margin: {
                                top: 1
                            }
                        }, d.createElement(P._23, {
                            type: P._28.H5,
                            color: P.F.Alt2
                        }, Object(p.d)("Hooray! You're in the clear!", "OnsiteNotifications"))))
                    }, t.renderMarkAsRead = function() {
                        return 0 !== t.props.data.length || t.props.friendRequestsData ? d.createElement(P.u, {
                            "data-test-selector": q,
                            type: P.z.Text,
                            size: P.x.Small,
                            disabled: 0 === t.props.data.length && !t.props.friendRequestsData,
                            onClick: t.props.onReadAllNotifications
                        }, Object(p.d)("Mark All as Read", "OnsiteNotifications")) : null
                    }, t.renderNotificationsHeaderElement = function() {
                        return d.createElement(P._19, {
                            className: "center-window__header",
                            background: P.m.Alt,
                            padding: {
                                x: 1,
                                y: .5
                            },
                            display: P.H.Flex,
                            alignItems: P.c.Center,
                            justifyContent: P.U.Between,
                            borderBottom: !0
                        }, d.createElement(P._23, {
                            type: P._28.H6,
                            color: P.F.Alt2,
                            bold: !0
                        }, Object(p.d)("Notifications", "OnsiteNotifications")), t.renderMarkAsRead())
                    }, t.renderUnreadNotificationsFooterElement = function() {
                        var e = 0 === t.props.newNotificationsCount ? null : d.createElement(P._23, {
                            "data-test-selector": W,
                            type: P._28.H6,
                            color: P.F.Alt2
                        }, Object(p.d)("{num, plural, one {1 New Notification} other {{num, number} New Notifications} }", {
                            num: t.props.newNotificationsCount
                        }, "OnsiteNotifications"));
                        return d.createElement(P._19, {
                            className: "center-window__footer",
                            background: P.m.Alt,
                            padding: .5,
                            alignItems: P.c.Center,
                            textAlign: P._24.Center,
                            borderTop: !0
                        }, e)
                    }, t.loadMore = function() {
                        return c.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return c.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        if (this.state.isLoadingMore) return [3, 5];
                                        this.setState({
                                            isLoadingMore: !0
                                        }), t.label = 1;
                                    case 1:
                                        return t.trys.push([1, 3, , 4]), [4, this.props.onLoadMore()];
                                    case 2:
                                        return t.sent(), [3, 4];
                                    case 3:
                                        return e = t.sent(), G.error(e, "unexpected loadMore failure"), [3, 4];
                                    case 4:
                                        this.setState({
                                            isLoadingMore: !1
                                        }), t.label = 5;
                                    case 5:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return d.createElement(P._19, {
                        className: "center-window",
                        "data-test-selector": "center-window",
                        background: P.m.Alt
                    }, this.renderNotificationsHeaderElement(), d.createElement(S.b, {
                        className: "center-window__scroll",
                        contentClassName: "center-window__scroll-container",
                        suppressScrollX: !0
                    }, d.createElement(P.V, {
                        display: P.H.Flex,
                        alignItems: P.c.Center,
                        flexDirection: P.J.Column,
                        flexGrow: 1,
                        flexWrap: P.K.NoWrap
                    }, this.renderContent(), d.createElement(S.a, {
                        enabled: this.props.data.length > 0 && !!this.props.data[this.props.data.length - 1].cursor,
                        contentLength: this.props.data.length,
                        loadMore: this.loadMore,
                        pixelThreshold: 200
                    }))), this.renderUnreadNotificationsFooterElement())
                }, t = c.__decorate([Object(k.c)("OnsiteNotificationsCenterWindow")], t)
            }(d.Component),
            K = n("RH2O"),
            $ = n("Aj/L"),
            Z = n("RweG"),
            Y = (n("MnLQ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.closeTimeout = 0, t.close = function() {
                        F({
                            uiContext: I.Toast,
                            notification: t.props.item,
                            action: L.Dismiss
                        }), t.props.close(t.props.index)
                    }, t.onMouseEnter = function() {
                        t.cancelCloseTimer()
                    }, t.onMouseLeave = function() {
                        t.scheduleCloseTimer()
                    }, t.view = function() {
                        F({
                            uiContext: I.Toast,
                            notification: t.props.item,
                            action: L.PrimaryCta
                        }), t.props.view(t.props.index)
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.scheduleCloseTimer()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), x({
                        uiContext: I.Toast,
                        notification: this.props.item
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.cancelCloseTimer()
                }, t.prototype.render = function() {
                    return d.createElement(P.e, {
                        type: P.i.BounceIn,
                        duration: P.g.Medium,
                        enabled: !0
                    }, d.createElement("div", {
                        onMouseEnter: this.onMouseEnter,
                        onMouseLeave: this.onMouseLeave,
                        "data-test-selector": "onsite-notification-toast__mouse-enter-detector"
                    }, d.createElement(P._19, {
                        className: "onsite-notification-toast",
                        background: P.m.Base,
                        display: P.H.Flex,
                        flexWrap: P.K.NoWrap,
                        margin: {
                            bottom: 1
                        },
                        border: !0
                    }, d.createElement(P.T, c.__assign({
                        onClick: this.view,
                        alpha: !0
                    }, i(this.props.item, T.PageviewMedium.NotificationToast)), d.createElement(P.V, {
                        className: "onsite-notification-toast__container",
                        display: P.H.Flex,
                        flexWrap: P.K.NoWrap
                    }, d.createElement(P.V, {
                        padding: {
                            y: 1,
                            left: 1
                        },
                        display: P.H.Flex,
                        flexShrink: 0
                    }, d.createElement(P.C, {
                        aspect: P.k.Aspect1x1,
                        imageSrc: this.props.item.thumbnailURL,
                        imageAlt: Object(p.d)("Notification toast thumbnail", "OnsiteNotifications"),
                        size: P.D.Size4
                    })), d.createElement(P.V, {
                        display: P.H.Flex,
                        flexDirection: P.J.Column,
                        flexWrap: P.K.NoWrap,
                        flexGrow: 1,
                        padding: 1
                    }, d.createElement(P.V, {
                        className: "onsite-notification-toast__body",
                        overflow: P._0.Hidden
                    }, d.createElement(P._19, {
                        color: P.F.Alt
                    }, d.createElement(N, {
                        source: this.props.item.body
                    }))), d.createElement(P.V, {
                        margin: {
                            top: .5
                        },
                        flexShrink: 0
                    }, d.createElement(P._19, {
                        color: P.F.Alt2
                    }, Object(p.g)(new Date(this.props.item.updatedAt))))))), this.renderActions())))
                }, t.prototype.renderActions = function() {
                    return d.createElement(P._19, {
                        className: "onsite-notification-toast__action-wrapper",
                        display: P.H.Flex,
                        alignContent: P.b.Stretch,
                        flexGrow: 0,
                        flexShrink: 0,
                        flexDirection: P.J.Column,
                        borderLeft: !0
                    }, d.createElement(P._19, {
                        className: "onsite-notification-toast__action",
                        display: P.H.Flex,
                        alignContent: P.b.Stretch,
                        flexGrow: 1,
                        borderBottom: !0
                    }, d.createElement(P.T, c.__assign({
                        onClick: this.view,
                        "data-test-selector": "onsite-notification-toast__view",
                        alpha: !0
                    }, i(this.props.item, T.PageviewMedium.NotificationToast)), d.createElement(P._19, {
                        display: P.H.Flex,
                        alignItems: P.c.Center,
                        justifyContent: P.U.Center,
                        fullHeight: !0,
                        flexGrow: 1,
                        padding: .5
                    }, d.createElement(P._23, {
                        color: P.F.Link
                    }, this.primaryCTAText())))), d.createElement(P._19, {
                        className: "onsite-notification-toast__action",
                        display: P.H.Flex,
                        alignContent: P.b.Stretch,
                        flexGrow: 1
                    }, d.createElement(P.T, {
                        onClick: this.close,
                        "data-test-selector": "onsite-notification-toast__close",
                        alpha: !0
                    }, d.createElement(P._19, {
                        display: P.H.Flex,
                        alignItems: P.c.Center,
                        justifyContent: P.U.Center,
                        fullHeight: !0,
                        flexGrow: 1,
                        padding: .5
                    }, d.createElement(P._23, {
                        color: P.F.Alt2
                    }, Object(p.d)("Close", "OnsiteNotifications"))))))
                }, t.prototype.primaryCTAText = function() {
                    var e = this.props.item.actions.find(function(e) {
                        return "click" === e.type
                    });
                    return e ? e.body : Object(p.d)("View", "OnsiteNotifications")
                }, t.prototype.scheduleCloseTimer = function() {
                    var e = this;
                    this.cancelCloseTimer(), this.closeTimeout = setTimeout(function() {
                        e.props.close(e.props.index), e.closeTimeout = 0
                    }, 1e4)
                }, t.prototype.cancelCloseTimer = function() {
                    this.closeTimeout && (clearTimeout(this.closeTimeout), this.closeTimeout = 0)
                }, t
            }(d.Component)),
            J = Object(k.c)("OnsiteNotificationToast")(Y),
            X = (n("L6HU"), p.i.withCategory("toast-manager")),
            ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        notifications: []
                    }, t.view = function(e) {
                        var n = t.state.notifications[e];
                        t.props.onViewNotification(n.id, !n.isTransient), t.close(e)
                    }, t.close = function(e) {
                        var n = t.state.notifications.slice();
                        n.splice(e, 1), t.setState({
                            notifications: n
                        })
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.conditionallyInsertTestData()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.pubsub.messages.info,
                        n = e.pubsub.messages.info;
                    if (n && n.data.toast && (!t || n.data.notification.id !== t.data.notification.id || n.data.notification.updated_at !== t.data.notification.updated_at)) {
                        X.debug("Received pubsub update", e.pubsub.messages.info);
                        var i = a(n.data.notification, n.data.persistent);
                        this.onNewNotification(i)
                    }
                }, t.prototype.render = function() {
                    return d.createElement(P.V, {
                        className: "onsite-notifications-toast-manager",
                        position: P._4.Absolute,
                        margin: {
                            top: 5
                        },
                        "data-test-selector": "onsite-notifications-toast-manager"
                    }, this.renderToasts())
                }, t.prototype.conditionallyInsertTestData = function() {
                    return c.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return c.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return p.a.buildType !== f.a.Production && u.parse(window.location.search).onsite_test_data ? [4, n.e(31).then(n.bind(null, "SFZn"))] : [3, 2];
                                case 1:
                                    e = i.sent().MockOnsiteNotifications, t = e.getMockOnsiteNotificationModels(3), this.setState({
                                        notifications: t
                                    }), i.label = 2;
                                case 2:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.renderToasts = function() {
                    var e = this,
                        t = this.state.notifications.map(function(t, n) {
                            return d.createElement(J, {
                                key: t.id,
                                item: t,
                                index: n,
                                view: e.view,
                                close: e.close
                            })
                        });
                    return 0 === t.length ? null : t
                }, t.prototype.onNewNotification = function(e) {
                    var t = this.state.notifications.slice(),
                        n = t.findIndex(function(t) {
                            return t.id === e.id
                        });
                    n > -1 && t.splice(n, 1), t.unshift(e), t.length > 3 && t.pop(), this.setState({
                        notifications: t
                    })
                }, t = c.__decorate([Object(k.c)("OnsiteNotificationToastManager"), Object(Z.a)([{
                    topic: function(e) {
                        return Object(y.e)("" + (e.currentUser && e.currentUser.id))
                    },
                    mapMessageTypesToProps: (l = {}, l[v.c.OnsiteNotificationCreate] = "info", l[v.c.OnsiteNotificationUpdate] = "info", l),
                    skip: function(e) {
                        return !e.currentUser
                    }
                }])], t)
            }(d.Component),
            te = Object(K.a)(function(e) {
                return {
                    currentUser: Object($.c)(e)
                }
            })(ee),
            ne = p.i.withCategory("onsite-pubsub-mutators"),
            ie = n("XF1M"),
            ae = n("UhWx"),
            re = n("WfBs"),
            oe = n("c8sn"),
            se = n("wHbv");
        n("adox");
        n.d(t, "a", function() {
            return pe
        }), n.d(t, "b", function() {
            return fe
        });
        var le = p.i.withCategory("onsite-notifications"),
            ce = "onsite-notifications__badge",
            ue = "99+",
            de = 5e3,
            pe = 10,
            me = 100,
            he = {
                align: P._32.Center,
                direction: P._33.Bottom,
                label: ""
            },
            ge = {
                limit: pe,
                cursor: ""
            },
            fe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        newNotificationsCount: 0,
                        newFriendRequestsBadgeCount: 0,
                        isFriendRequestsNotificationUnread: !1
                    }, t.newNotificationsCountTimer = 0, t.hasInsertedSummaryData = !1, t.hasInsertedListNotificationsData = !1, t.viewNotification = function(e, n) {
                        void 0 === n && (n = !0), t.centerWindowToggleBalloon.toggleBalloon(!1), n && t.readNotification(e)
                    }, t.conditionallyInsertSummaryTestData = function() {
                        t.summaryDataLoaded(t.props) && !t.hasInsertedSummaryData && p.a.buildType !== f.a.Production && u.parse(window.location.search).onsite_test_data && (t.hasInsertedSummaryData = !0, Object(b.d)(oe, c.__assign({}, t.props.summaryData.variables), function(e) {
                            return e.currentUser.notifications.summary.unseenCount = u.parse(window.location.search).onsite_test_data, e
                        }))
                    }, t.conditionallyInsertListNotificationsTestData = function() {
                        return c.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return c.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return this.listDataLoaded() && !this.hasInsertedListNotificationsData && p.a.buildType !== f.a.Production && u.parse(window.location.search).onsite_test_data ? (this.hasInsertedListNotificationsData = !0, [4, n.e(31).then(n.bind(null, "SFZn"))]) : [3, 2];
                                    case 1:
                                        e = t.sent().MockOnsiteNotifications, Object(b.d)(ae, c.__assign({}, this.props.listData.variables), function(t) {
                                            return t.currentUser.notifications.edges = e.getMockOnsiteNotificationEdges(u.parse(window.location.search).onsite_test_data), t
                                        }), t.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t.summaryDataLoaded = function(e) {
                        return e.summaryData && !e.summaryData.loading && !e.summaryData.error && e.summaryData.currentUser && e.summaryData.currentUser.notifications && e.summaryData.currentUser.notifications.summary && e.summaryData.currentUser.incomingFriendRequests
                    }, t.listDataLoaded = function() {
                        return t.props.listData && t.props.listData.currentUser && t.props.listData.currentUser.notifications && void 0 !== t.props.listData.currentUser.notifications.edges
                    }, t.hasNewFriendRequests = function(e) {
                        var t = e.summaryData.currentUser;
                        if (t.incomingFriendRequests && t.incomingFriendRequests.newestEdge && t.incomingFriendRequests.newestEdge.createdAt) {
                            var n = new Date(t.incomingFriendRequests.newestEdge.createdAt),
                                i = new Date(t.notifications.summary.lastSeenAt);
                            return t.incomingFriendRequests.totalUnreadCount > 0 && n > i
                        }
                        return !1
                    }, t.getFriendRequestsData = function() {
                        if (t.summaryDataLoaded(t.props)) {
                            var e = t.props.summaryData.currentUser;
                            if (e.incomingFriendRequests && e.incomingFriendRequests.newestEdge) {
                                var n = e.incomingFriendRequests.totalUnreadCount,
                                    i = e.incomingFriendRequests.newestEdge.createdAt;
                                return n && i ? {
                                    count: n,
                                    date: i,
                                    isOldNotification: !t.state.isFriendRequestsNotificationUnread
                                } : void 0
                            }
                        }
                    }, t.toggleCenter = function(e) {
                        e || (t.props.stopDeferring(), t.getUnseenNotificationsAndApplyTimer(), t.viewNotifications()), R({
                            unseenCount: t.getUnseenNotificationsCount(t.props),
                            action: e ? D.Close : D.Open
                        })
                    }, t.getUnseenNotificationsAndApplyTimer = function() {
                        var e = t.state.newNotificationsCount;
                        t.summaryDataLoaded(t.props) && (e = t.getUnseenNotificationsCount(t.props), t.setState({
                            newNotificationsCount: e
                        })), t.clearTimeout(), e > 0 && (t.newNotificationsCountTimer = setTimeout(function() {
                            t.setState({
                                newNotificationsCount: 0
                            }), t.clearTimeout()
                        }, de))
                    }, t.viewNotifications = function() {
                        return c.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return c.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (!this.summaryDataLoaded(this.props)) return [2];
                                        this.setState({
                                            newFriendRequestsBadgeCount: 0
                                        }), e = c.__assign({}, Object(b.a)({}), {
                                            optimisticResponse: {
                                                viewedNotifications: {
                                                    user: {
                                                        notifications: {
                                                            summary: {
                                                                unseenCount: 0,
                                                                lastSeenAt: new Date,
                                                                __typename: "OnsiteNotificationsSummary"
                                                            },
                                                            __typename: "OnsiteNotificationConnection"
                                                        },
                                                        __typename: "User"
                                                    },
                                                    __typename: "ViewedNotificationsPayload"
                                                }
                                            }
                                        }), Object(b.d)(oe, c.__assign({}, this.props.summaryData.variables), function(e) {
                                            return e.currentUser.notifications.summary.unseenCount = 0, e
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.viewNotifications(e)];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return t = n.sent(), le.error(t, "failure to read message..."), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.getUnseenNotificationsCount = function(e) {
                        return t.summaryDataLoaded(e) ? e.summaryData.currentUser.notifications.summary.unseenCount + t.state.newFriendRequestsBadgeCount : 0
                    }, t.renderUnseenNotificationsBadge = function() {
                        var e = t.getUnseenNotificationsCount(t.props);
                        if (e > 0) {
                            var n = e >= 100 ? ue : e.toString();
                            return d.createElement(P.V, {
                                className: "onsite-notifications__badge",
                                "data-test-selector": ce,
                                position: P._4.Absolute
                            }, d.createElement(P._1, {
                                label: n,
                                type: P._2.Notification
                            }))
                        }
                    }, t.deleteNotification = function(e) {
                        return c.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return c.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        t = c.__assign({}, Object(b.a)({
                                            id: e
                                        }), {
                                            optimisticResponse: {
                                                deleteNotification: {
                                                    __typename: "DeleteNotificationPayload",
                                                    notification: {
                                                        __typename: "OnsiteNotification",
                                                        id: e
                                                    }
                                                }
                                            }
                                        }), this.listDataLoaded() && Object(b.d)(ae, c.__assign({}, this.props.listData.variables), function(t) {
                                            return t.currentUser.notifications.edges = t.currentUser.notifications.edges.filter(function(t) {
                                                return t.node.id !== e
                                            }), t
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.props.deleteOnsiteNotification(t)];
                                    case 2:
                                        return i.sent(), [3, 4];
                                    case 3:
                                        return n = i.sent(), le.error(n, "Unable to delete notification " + e), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.readAllNotifications = function() {
                        if (t.setState({
                                isFriendRequestsNotificationUnread: !1
                            }), t.listDataLoaded()) {
                            R({
                                unseenCount: t.getUnseenNotificationsCount(t.props),
                                action: D.MarkAllRead
                            });
                            var e = t.props.listData.currentUser.notifications.edges.filter(function(e) {
                                return !e.node.isRead
                            }).map(function(e) {
                                return e.node.id
                            });
                            if (0 !== e.length) {
                                var n = function(e, t) {
                                    for (var n = [], i = 0; i < e.length; i += t) {
                                        var a = e.slice(i, i + t);
                                        n.push(a)
                                    }
                                    return n
                                }(e, me);
                                Object(b.d)(ae, c.__assign({}, t.props.listData.variables), function(e) {
                                    return e.currentUser.notifications.edges = e.currentUser.notifications.edges.map(function(e) {
                                        return c.__assign({}, e, {
                                            node: c.__assign({}, e.node, {
                                                isRead: !0
                                            })
                                        })
                                    }), e
                                });
                                for (var i = 0, a = n; i < a.length; i++) {
                                    var r = a[i];
                                    t.markIDsAsRead(r)
                                }
                            }
                        }
                    }, t.markIDsAsRead = function(e) {
                        return c.__awaiter(t, void 0, void 0, function() {
                            var t, n, i;
                            return c.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        t = e.map(function(e) {
                                            return {
                                                id: e,
                                                isRead: !0,
                                                __typename: "OnsiteNotification"
                                            }
                                        }), n = c.__assign({}, Object(b.a)({
                                            ids: e
                                        }), {
                                            optimisticResponse: {
                                                readNotifications: {
                                                    __typename: "ReadNotificationsPayload",
                                                    notifications: t,
                                                    count: e.length
                                                }
                                            }
                                        }), a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.props.readOnsiteNotification(n)];
                                    case 2:
                                        return a.sent(), [3, 4];
                                    case 3:
                                        return i = a.sent(), le.error(i, "Unable to read notifications", {
                                            ids: e
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.readNotification = function(e) {
                        return c.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return c.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        t = c.__assign({}, Object(b.a)({
                                            ids: [e]
                                        }), {
                                            optimisticResponse: {
                                                readNotifications: {
                                                    __typename: "ReadNotificationsPayload",
                                                    notifications: [{
                                                        id: e,
                                                        isRead: !0,
                                                        __typename: "OnsiteNotification"
                                                    }],
                                                    count: 1
                                                }
                                            }
                                        }), this.listDataLoaded() && Object(b.d)(ae, c.__assign({}, this.props.listData.variables), function(t) {
                                            return t.currentUser.notifications.edges = t.currentUser.notifications.edges.map(function(t) {
                                                return t.node.id === e ? c.__assign({}, t, {
                                                    node: c.__assign({}, t.node, {
                                                        isRead: !0
                                                    })
                                                }) : t
                                            }), t
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.props.readOnsiteNotification(t)];
                                    case 2:
                                        return i.sent(), [3, 4];
                                    case 3:
                                        return n = i.sent(), le.error(n, "Unable to read notification", {
                                            id: e
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.loadMore = function() {
                        return c.__awaiter(t, void 0, void 0, function() {
                            return c.__generator(this, function(e) {
                                return this.props.listData.loading ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, t.clearTimeout = function() {
                        t.newNotificationsCountTimer && (clearTimeout(t.newNotificationsCountTimer), t.newNotificationsCountTimer = 0)
                    }, t.saveCenterWindowToggleBalloonRef = function(e) {
                        return t.centerWindowToggleBalloon = e
                    }, t
                }
                return c.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.conditionallyInsertSummaryTestData(), this.conditionallyInsertListNotificationsTestData()
                }, t.prototype.componentWillUnmount = function() {
                    this.clearTimeout()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.summaryDataLoaded(e)) {
                        var t = this.hasNewFriendRequests(e);
                        this.setState({
                            newFriendRequestsBadgeCount: t ? 1 : 0
                        }), this.summaryDataLoaded(this.props) || this.setState({
                            isFriendRequestsNotificationUnread: t
                        }), p.n.setBadgeCount(this.getUnseenNotificationsCount(e))
                    }
                }, t.prototype.render = function() {
                    var e = this.props.shouldDefer || !this.listDataLoaded() ? [] : this.props.listData.currentUser.notifications.edges;
                    return he.label = Object(p.d)("Notifications", "OnsiteNotificationsToolTip"), d.createElement(P.V, {
                        className: "onsite-notifications"
                    }, d.createElement(te, {
                        onViewNotification: this.viewNotification
                    }), d.createElement(P.V, {
                        position: P._4.Relative
                    }, d.createElement(m.a, {
                        onToggle: this.toggleCenter,
                        ref: this.saveCenterWindowToggleBalloonRef,
                        tooltipProps: he
                    }, d.createElement(P.v, {
                        ariaLabel: Object(p.d)("Open Notifications", "OnsiteNotifications"),
                        size: P.x.Large,
                        icon: P._11.NotificationBell,
                        overlay: !0
                    }), d.createElement(P.p, {
                        "data-test-selector": "center-window__balloon",
                        direction: P.q.BottomRight,
                        size: P.r.Large,
                        offsetX: "10px"
                    }, d.createElement(Q, {
                        newNotificationsCount: this.state.newNotificationsCount,
                        hasInitiallyLoaded: this.listDataLoaded(),
                        data: e,
                        friendRequestsData: this.getFriendRequestsData(),
                        onLoadMore: this.loadMore,
                        onViewNotification: this.viewNotification,
                        onReadAllNotifications: this.readAllNotifications,
                        onDeleteNotification: this.deleteNotification
                    }))), this.renderUnseenNotificationsBadge()))
                }, t = c.__decorate([function(e) {
                    return function(t) {
                        function n() {
                            var e = null !== t && t.apply(this, arguments) || this;
                            return e.state = {
                                shouldDefer: !0
                            }, e.stopDeferring = function() {
                                e.state.shouldDefer && e.setState({
                                    shouldDefer: !1
                                })
                            }, e
                        }
                        return c.__extends(n, t), n.prototype.render = function() {
                            var t = {
                                shouldDefer: this.state.shouldDefer,
                                stopDeferring: this.stopDeferring
                            };
                            return d.createElement(e, c.__assign({}, this.props, t))
                        }, n
                    }(d.Component)
                }, Object(h.a)(oe, {
                    name: "summaryData",
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(h.a)(se, {
                    name: "viewNotifications"
                }), Object(h.a)(ae, {
                    name: "listData",
                    options: function(e) {
                        return {
                            variables: c.__assign({}, ge, {
                                language: e.languageCode
                            })
                        }
                    },
                    skip: function(e) {
                        return e.shouldDefer
                    },
                    props: function(e) {
                        return c.__assign({}, e, {
                            loadMore: function() {
                                return e.listData.fetchMore({
                                    query: ae,
                                    variables: c.__assign({}, e.listData.variables, {
                                        cursor: e.listData.currentUser ? e.listData.currentUser.notifications.edges[e.listData.currentUser.notifications.edges.length - 1].cursor : ""
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult;
                                        return {
                                            currentUser: c.__assign({}, n.currentUser, {
                                                notifications: c.__assign({}, n.currentUser.notifications, {
                                                    edges: e.currentUser.notifications.edges.concat(n.currentUser.notifications.edges)
                                                })
                                            })
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(h.a)(ie, {
                    name: "deleteOnsiteNotification"
                }), Object(h.a)(re, {
                    name: "readOnsiteNotification"
                }), Object(g.a)(function(e) {
                    return {
                        query: oe,
                        skip: !e.currentUser,
                        topic: Object(y.e)("" + (e.currentUser && e.currentUser.id)),
                        types: [v.c.OnsiteNotificationSummaryUpdate, v.c.OnsiteNotificationUpdate, v.c.OnsiteNotificationCreate, v.c.OnsiteNotificationDelete],
                        mutator: r
                    }
                }), Object(g.a)(function(e) {
                    return {
                        query: ae,
                        variables: c.__assign({}, ge, {
                            language: e.languageCode
                        }),
                        skip: !e.currentUser,
                        topic: Object(y.e)("" + (e.currentUser && e.currentUser.id)),
                        types: [v.c.OnsiteNotificationsRead, v.c.OnsiteNotificationUpdate, v.c.OnsiteNotificationCreate, v.c.OnsiteNotificationDelete],
                        mutator: o
                    }
                }), Object(k.c)("OnsiteNotifications", {
                    autoReportInteractive: !0
                })], t)
            }(d.Component)
    },
    U8pM: function(e, t) {},
    UF1m: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("BzvE"),
            r = n("CAzn"),
            o = n("IWpL"),
            s = n("/wlI"),
            l = n("FuaS"),
            c = n("rbXT");
        n.d(t, "a", function() {
            return d
        });
        var u = new Set([o.SpadeEventType.Chat, o.SpadeEventType.Follow, o.SpadeEventType.Unfollow]),
            d = function() {
                function e(e) {
                    var t = this;
                    this.eventEmitter = new a.EventEmitter, this.eventQueue = new Array, this.hasCheckedInitialReferrer = !1, this.mixpanelEventQueue = new Array, this.trackingDataCache = {
                        platform: o.SpadePlatform.Web,
                        videoPlayerData: {
                            followCTAVisible: !1
                        }
                    }, this.referrerURL = "", this.firstBatchSubmitted = !1, this.getEventQueue = function() {
                        return t.eventQueue
                    }, this.getEndpoint = function() {
                        return t.endpoint
                    }, this.getLastPageview = function() {
                        return t.trackingDataCache.lastPageView
                    }, this.getPlatform = function() {
                        return t.trackingDataCache.platform
                    }, this.getVideoPlayerTrackingData = function() {
                        return t.trackingDataCache.videoPlayerData
                    }, this.getOrQueryDeviceFingerprint = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return i.__generator(this, function(t) {
                                return this.trackingDataCache.deviceFingerprint ? (this.logger.debug("Using cached device fingerprint"), [2, this.trackingDataCache.deviceFingerprint]) : this.deviceFingerprintPromise ? (this.logger.debug("Awaiting existing device fingerprint promise"), [2, this.deviceFingerprintPromise]) : (this.deviceFingerprintPromise = new Promise(function(t) {
                                    e.logger.debug("Querying device fingerprint");
                                    try {
                                        (new r.Fingerprint2).get(function(n, i) {
                                            e.trackingDataCache.deviceFingerprint = n, e.logger.debug("Identified device fingerprint", {
                                                fingerprint: n
                                            }), t(n);
                                            var a = {};
                                            i.forEach(function(e) {
                                                a["fp_" + e.key] = e.valueHash
                                            }), e.track(o.SpadeEventType.BrowserFingerprint, a)
                                        })
                                    } catch (n) {
                                        e.logger.debug("Error identifying fingerprint:", n), t(null)
                                    }
                                }), [2, this.deviceFingerprintPromise])
                            })
                        })
                    }, this.getOrQueryEventData = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return this.trackingDataCache.eventData ? (this.logger.debug("Using cached event data"), [2, this.trackingDataCache.eventData]) : [3, 1];
                                    case 1:
                                        return this.eventDataPromise ? (this.logger.debug("Awaiting existing promise"), [4, this.eventDataPromise]) : [3, 3];
                                    case 2:
                                        return t = n.sent(), [2, t.data];
                                    case 3:
                                        return e = this.store.getState(), this.isLoggedIn(e) ? (this.logger.debug("Querying event data to submit events..."), this.eventDataPromise = this.apollo.client.query({
                                            query: c
                                        }), [4, this.eventDataPromise]) : [3, 5];
                                    case 4:
                                        (t = n.sent()).data && !t.loading && (this.logger.debug("Event data query completed."), this.trackingDataCache.eventData = t.data), n.label = 5;
                                    case 5:
                                        return this.trackingDataCache.eventData || (this.trackingDataCache.eventData = {
                                            currentUser: {
                                                id: null,
                                                hasTurbo: !1,
                                                hasPrime: !1,
                                                language: null,
                                                login: null
                                            }
                                        }), [2, this.trackingDataCache.eventData]
                                }
                            })
                        })
                    }, this.processEvents = function(e) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, n, a, r, s, l, c;
                            return i.__generator(this, function(d) {
                                switch (d.label) {
                                    case 0:
                                        return t = this.getOrQueryEventData(), n = this.getOrQueryDeviceFingerprint(), [4, t];
                                    case 1:
                                        return a = d.sent(), [4, n];
                                    case 2:
                                        for (r = d.sent(), s = 0, l = e; s < l.length; s++)(c = l[s]).properties.login = a.currentUser.login, c.properties.logged_in = !!a.currentUser.id, c.properties.user_id = a.currentUser.id ? +a.currentUser.id : null, c.properties.device_fingerprint = r, c.event === o.SpadeEventType.Pageview ? (c.properties.is_turbo = a.currentUser.hasTurbo, c.properties.language = a.currentUser.language || navigator.language) : c.event === o.SpadeEventType.Subscription && (c.properties.has_prime = a.currentUser.hasPrime), u.has(c.event) && this.mixpanelEventQueue.push({
                                            event: c.event,
                                            properties: i.__assign({
                                                token: this.config.mixpanelToken
                                            }, c.properties)
                                        });
                                        return [2]
                                }
                            })
                        })
                    }, this.onWindowUnload = function() {
                        t.logger.debug("Unload triggered."), t.sendEvents(!0)
                    }, this.logger = e.logger.withCategory("spade"), this.transmitLogger = this.logger.withCategory("transmitter"), this.endpoint = e.endpoint, this.session = e.session, this.apollo = e.apollo, this.config = e.config, this.store = e.store, this.adBlockSentinel = e.adBlockSentinel, this.adBlockDetector = e.adBlockDetector, this.logger.debug("Creating instance.", {
                        endpoint: this.endpoint,
                        sessionID: this.session.benchmarkID
                    }), window.addEventListener("unload", this.onWindowUnload)
                }
                return e.prototype.setPlatform = function(e) {
                    this.trackingDataCache.platform = e
                }, e.prototype.reportFollowCTAVisibility = function(e) {
                    this.trackingDataCache.videoPlayerData.followCTAVisible = e
                }, e.prototype.setVideoPlayerTrackingData = function(e) {
                    this.trackingDataCache.videoPlayerData = i.__assign({}, this.trackingDataCache.videoPlayerData, e)
                }, e.prototype.track = function(e, t) {
                    return this.trackEvent(e, t)
                }, e.prototype.trackExperiment = function(e) {
                    return this.track(o.SpadeEventType.ExperimentBranch, e)
                }, e.prototype.trackPageview = function(e) {
                    void 0 === e && (e = {});
                    var t = this.store.getState(),
                        n = i.__assign({
                            browser: navigator.userAgent,
                            collapse_right: t.ui && !t.ui.rightColumnExpanded,
                            collapse_left: t.ui && !t.ui.sideNavExpanded,
                            localstorage_device_id: this.session.localStorageDeviceID,
                            location: e.location || o.PageviewLocation.None,
                            page_session_id: this.session.pageviewID,
                            referrer: this.lastLocationURL ? this.lastLocationURL.href : document.referrer,
                            referrer_domain: this.lastLocationURL ? this.lastLocationURL.hostname : this.getCurrentReferrerURL().hostname,
                            sentinel_ab: this.adBlockSentinel.detect,
                            session_device_id: this.session.deviceID,
                            tab_session_id: this.session.tabID,
                            viewport_height: window.innerHeight,
                            viewport_width: window.innerWidth
                        }, e);
                    this.track(o.SpadeEventType.Pageview, n), this.trackingDataCache.lastPageView = n, this.eventEmitter.emit(o.SpadeEventType.Pageview), this.lastLocationURL = new URL(location.href)
                }, e.prototype.trackBenchmark = function(e, t) {
                    this.track(e, i.__assign({
                        benchmark_session_id: this.session.benchmarkID,
                        page_session_id: this.session.pageviewID
                    }, t))
                }, e.prototype.trackApiQueryBenchmark = function(e) {
                    this.track(o.SpadeEventType.APIQuery, i.__assign({
                        benchmark_session_id: this.session.benchmarkID,
                        page_session_id: this.session.pageviewID
                    }, e))
                }, e.prototype.trackCustomEventBenchmark = function(e) {
                    this.track(o.SpadeEventType.CustomEvent, i.__assign({
                        benchmark_session_id: this.session.benchmarkID,
                        page_session_id: this.session.pageviewID
                    }, e))
                }, e.prototype.trackItemSectionLoad = function(e) {
                    this.track(o.SpadeEventType.ItemSectionLoad, function(e) {
                        return i.__assign({}, e, {
                            rendered_item_list: e.rendered_item_list.join(","),
                            rendered_item_types: e.rendered_item_types.join(","),
                            rendered_items_viewcounts: e.rendered_items_viewcounts.join(",")
                        })
                    }(e))
                }, e.prototype.trackItemSectionClick = function(e) {
                    this.track(o.SpadeEventType.ItemSectionClick, e)
                }, e.prototype.trackEvent = function(e, t) {
                    this.hasCheckedInitialReferrer || this.setSpadeReferrerURL();
                    var n = {
                        event: e,
                        properties: i.__assign({
                            adblock: this.adBlockDetector.detect,
                            app_version: this.config.buildID,
                            client_app: "twilight",
                            device_id: this.session.deviceID,
                            domain: window.document.domain,
                            host: window.location.host,
                            platform: this.trackingDataCache.platform,
                            preferred_language: Object(l.b)({
                                includeChosenLanguage: !1
                            })[0],
                            referrer_host: this.lastLocationURL ? this.lastLocationURL.host : this.getCurrentReferrerURL().host,
                            referrer_url: this.referrerURL || "",
                            received_language: Object(l.a)() || "en",
                            tab_session_id: this.session.tabID,
                            batch_time: (new Date).getTime() / 1e3,
                            url: window.location.href
                        }, t)
                    };
                    this.logger.debug("Tracking event", n), this.eventQueue.push(n), this.scheduleEvents()
                }, e.prototype.sendEvents = function(e) {
                    return void 0 === e && (e = !1), i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a, r, o;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return 0 === this.eventQueue.length ? [2] : [4, this.processEvents(this.eventQueue)];
                                case 1:
                                    return i.sent(), this.sendMixpanelEvents(e), t = this.eventQueue, this.eventQueue = [], Date.now() < this.squelchUntil ? (this.logger.debug("Skipped Spade transmission. Client event tracking is squelched due to failure to sumbit to Spade service."), [2]) : (n = new Blob([Object(s.a)(t)], {
                                        type: "application/x-www-form-urlencoded; charset=UTF-8"
                                    }), e && navigator.sendBeacon ? (navigator.sendBeacon(this.endpoint, n) ? this.transmitLogger.debug("Events sent using beacon.", {
                                        size: n.size,
                                        transmitBatch: t
                                    }) : this.transmitLogger.warn("Events failed to send using beacon.", {
                                        size: n.size,
                                        transmitBatch: t
                                    }), [3, 8]) : [3, 2]);
                                case 2:
                                    a = 1, i.label = 3;
                                case 3:
                                    if (!(a <= 3)) return [3, 8];
                                    i.label = 4;
                                case 4:
                                    return i.trys.push([4, 6, , 7]), [4, fetch(this.endpoint, {
                                        method: "POST",
                                        body: n
                                    })];
                                case 5:
                                    return i.sent(), this.firstBatchSubmitted || (this.firstBatchSubmitted = !0, (r = document.getElementById("root")) && r.setAttribute("data-a-page-events-submitted", Date.now().toString())), this.transmitLogger.debug("Events sent using fetch.", {
                                        size: n.size,
                                        transmitBatch: t
                                    }), [2];
                                case 6:
                                    return o = i.sent(), a < 3 ? this.transmitLogger.warn("Events send attempt failed with fetch.", {
                                        attempt: a,
                                        size: n.size,
                                        transmitBatch: t
                                    }, o) : (this.squelchUntil = Date.now() + 6e4, this.transmitLogger.error(o, "Events failed to send using fetch. Maximum attemps tried, so events will be discarded, and further tracking will be temporarily squelched.", {
                                        attempt: a,
                                        size: n.size,
                                        maxAttempts: 3,
                                        squelch: this.squelchUntil,
                                        squelchDuration: 6e4
                                    })), [3, 7];
                                case 7:
                                    return ++a, [3, 3];
                                case 8:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.scheduleEvents = function() {
                    var e = this;
                    this.eventQueueTimeout || (this.eventQueueTimeout = setTimeout(function() {
                        try {
                            if (!e.store.getState().session.firstPageLoaded) return e.eventQueueTimeout = 0, void e.scheduleEvents();
                            e.sendEvents()
                        } catch (t) {
                            e.transmitLogger.error(t, "Failed to send events.")
                        }
                        e.eventQueueTimeout = 0
                    }, this.config.spadeBatchWindow))
                }, e.prototype.sendMixpanelEvents = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return 0 === this.mixpanelEventQueue.length ? [2] : (t = this.mixpanelEventQueue, this.mixpanelEventQueue = [], Date.now() < this.squelchUntil ? (this.logger.debug("Skipped Mixpanel transmission. Client event tracking is squelched due to failure to submit to Spade service."), [2]) : (n = new Blob([Object(s.a)(t)], {
                                        type: "application/x-www-form-urlencoded; charset=UTF-8"
                                    }), e && navigator.sendBeacon ? (navigator.sendBeacon(this.endpoint, n) ? this.transmitLogger.debug("Mixpanel events sent using beacon.", {
                                        size: n.size,
                                        transmitBatch: t
                                    }) : this.transmitLogger.warn("Mixpanel events failed to send using beacon.", {
                                        size: n.size,
                                        transmitBatch: t
                                    }), [3, 7]) : [3, 1]));
                                case 1:
                                    a = 1, i.label = 2;
                                case 2:
                                    if (!(a <= 3)) return [3, 7];
                                    i.label = 3;
                                case 3:
                                    return i.trys.push([3, 5, , 6]), [4, fetch("https://api.mixpanel.com/track", {
                                        method: "POST",
                                        body: n
                                    })];
                                case 4:
                                    return i.sent(), this.transmitLogger.debug("Mixpanel events sent using fetch.", {
                                        size: n.size,
                                        transmitBatch: t
                                    }), [2];
                                case 5:
                                    return r = i.sent(), a < 3 ? this.transmitLogger.warn("Mixpanel events send attempt failed with fetch.", {
                                        attempt: a,
                                        size: n.size,
                                        transmitBatch: t
                                    }, r) : this.transmitLogger.error(r, "Mixpanel events failed to send using fetch. Maximum attemps tried, so events will be discarded.", {
                                        attempt: a,
                                        size: n.size,
                                        maxAttempts: 3
                                    }), [3, 6];
                                case 6:
                                    return ++a, [3, 2];
                                case 7:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.isLoggedIn = function(e) {
                    return !(!e.session || !e.session.user)
                }, e.prototype.getCurrentReferrerURL = function() {
                    return document.referrer.length ? new URL(document.referrer) : {
                        host: "",
                        hostname: "",
                        href: ""
                    }
                }, e.prototype.setSpadeReferrerURL = function() {
                    var e;
                    try {
                        e = new URL(document.referrer)
                    } catch (e) {}
                    e && "go.twitch.tv" !== e.hostname && "www.twitch.tv" !== e.hostname && (this.referrerURL = e.href), this.hasCheckedInitialReferrer = !0
                }, e
            }()
    },
    UKw0: function(e, t) {},
    UUPo: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendRequestsNotification_Query"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "incomingFriendRequests"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "1"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "totalUnreadCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 115
            }
        };
        n.loc.source = {
            body: "query FriendRequestsNotification_Query {\ncurrentUser {\nid\nincomingFriendRequests(first: 1) {\ntotalUnreadCount\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "UW/+": function(e, t) {},
    UbVv: function(e, t, n) {
        "use strict";
        t.a = function() {
            return window.Notification && "denied" === window.Notification.permission
        }, t.b = function() {
            return window.Notification && "granted" === window.Notification.permission
        }
    },
    UhWx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_ListNotifications"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "limit"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Int"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "notifications"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "limit"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "language"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "language"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "pageInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "hasNextPage"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "body"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "createdAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "updatedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isRead"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "thumbnailURL"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "actions"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "body"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "type"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "url"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 311
            }
        };
        n.loc.source = {
            body: "query OnsiteNotifications_ListNotifications($limit: Int $cursor: Cursor $language: String) {\ncurrentUser {\nid\nnotifications(first: $limit after: $cursor language: $language) {\npageInfo {\nhasNextPage\n}\nedges {\ncursor\nnode {\nid\ntype\nbody\ncreatedAt\nupdatedAt\nisRead\nthumbnailURL\nactions {\nbody\ntype\nurl\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    UhzT: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_DismissFriendRecommendation"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissFriendRecommendationInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissFriendRecommendation"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 160
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_DismissFriendRecommendation($input: DismissFriendRecommendationInput!) {\ndismissFriendRecommendation(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Us7i: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = /[^A-Za-z0-9]+/g,
            a = n("6sO2").n.logger.withCategory("McGill"),
            r = function() {
                function e() {}
                return e.polyfillGoogletag = function() {
                    window.googletag = window.googletag || {}, window.googletag.cmd = window.googletag.cmd || []
                }, e.setAppWideTracking = function(e, t) {
                    var n = this;
                    this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                        window.googletag.pubads().setTargeting(e, n.normalizeTargetingValue(t))
                    })
                }, e.clearAppWideTracking = function(e) {
                    this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                        window.googletag.pubads().clearTargeting(e)
                    })
                }, e.createSlot = function(e, t, n, i, r) {
                    var o = this;
                    return a.debug("Creating slot", {
                        div: e,
                        adUnitPath: t,
                        size: n,
                        targeting: i
                    }), this.polyfillGoogletag(), new Promise(function(a, s) {
                        window.googletag.cmd.push(function() {
                            var l = window.googletag.defineSlot(t, n, e);
                            l ? (l.addService(window.googletag.companionAds()), l.addService(window.googletag.pubads()), Object.keys(i).forEach(function(e) {
                                l.setTargeting(e, o.normalizeTargetingValue(i[e]))
                            }), r && window.googletag.enableServices(), a(l)) : s()
                        })
                    })
                }, e.display = function(e) {
                    this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                        window.googletag.enableServices(), window.googletag.display(e)
                    })
                }, e.destroySlot = function(e) {
                    this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                        window.googletag.destroySlots([e])
                    })
                }, e.initialize = function(e) {
                    this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                        window.googletag.pubads().enableSingleRequest(), window.googletag.companionAds().addEventListener("slotRenderEnded", e), window.googletag.pubads().addEventListener("slotRenderEnded", e)
                    })
                }, e.normalizeTargetingValue = function(e) {
                    var t = function(e) {
                        return e.replace(i, "_")
                    };
                    return "string" == typeof e ? t(e) : e.map(t)
                }, e
            }()
    },
    "V1E/": function(e, t) {},
    "V5M+": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), t.d = function(e, t) {
            return {
                type: i,
                modalComponent: e,
                modalProps: t
            }
        }, n.d(t, "a", function() {
            return a
        }), t.c = function() {
            return {
                type: a
            }
        };
        var i = "core.modal.MODAL_SHOWN",
            a = "core.ui.MODAL_CLOSED"
    },
    VAT8: function(e, t, n) {
        "use strict";

        function i(e) {
            switch (e) {
                case r.a.Dark:
                    return "tw-theme--dark";
                default:
                    return ""
            }
        }
        t.b = function() {
            return a.k.get(o, function() {
                var e = a.k.get(s, {
                    activeTheme: ""
                });
                return e && "theme--dark" === e.activeTheme ? r.a.Dark : r.a.Light
            }())
        }, t.d = function(e) {
            a.k.set(o, e)
        }, t.c = i, t.a = function(e) {
            return e === r.a.Light ? "tw-theme--light" : i(e)
        };
        var a = n("6sO2"),
            r = n("NXs7"),
            o = "twilight.theme",
            s = "storage:theme"
    },
    VNvG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FollowButton_FollowUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "FollowUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "followUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "follow"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "disableNotifications"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 124
            }
        };
        n.loc.source = {
            body: "mutation FollowButton_FollowUser($input: FollowUserInput!) {\nfollowUser(input: $input) {\nfollow {\ndisableNotifications\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    VkpB: function(e, t) {},
    Vprp: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecommendedFriend_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecommendedFriend_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    WHFs: function(e, t) {},
    WIs4: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.mutator = function(e, t) {
                            return i.options.mutator(e, t)
                        }, i.typesChanged = function(e) {
                            if (e.types && !i.options.types || !e.types && i.options.types) return !0;
                            if (e.types && i.options.types) {
                                if (e.types.length !== i.options.types.length) return !0;
                                var t = new Set(i.options.types);
                                return e.types.every(function(e) {
                                    return t.has(e)
                                })
                            }
                            return !1
                        }, i.options = e(t), i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.skip !== this.options.skip && (n.skip ? this.unsubscribe() : this.subscribe(n)), n.skip || (n.topic !== this.options.topic || n.type !== this.options.type || this.typesChanged(n)) && (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, i.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, i.prototype.render = function() {
                        return r.createElement(t, a.__assign({}, this.props))
                    }, i.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(o.j)({
                            query: e.query,
                            variables: e.variables,
                            topic: e.topic,
                            type: e.type,
                            types: e.types,
                            mutator: this.mutator,
                            skipMessage: e.skipMessage
                        })
                    }, i.prototype.unsubscribe = function() {
                        this.unsubscriber && (this.unsubscriber(), this.unsubscriber = null)
                    }, i
                }(r.Component)
            }
        }
        var a = n("TToO"),
            r = n("U7vG"),
            o = n("HZww");
        n.d(t, "a", function() {
            return i
        })
    },
    WZjW: function(e, t) {},
    WbwR: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = n("OOv5"),
            s = n("LBNC"),
            l = "browser_notifications_launch",
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = r.n.logger.withCategory("browser-push-notifications"), t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    if (!r.b.get(l, !1)) return [2];
                                    if (!Object(s.a)()) return this.logger.debug("unsupported browser"), [2];
                                    t.label = 1;
                                case 1:
                                    return t.trys.push([1, 3, , 4]), [4, o.a.initialize()];
                                case 2:
                                    return t.sent(), [3, 4];
                                case 3:
                                    return e = t.sent(), this.logger.error(e, "push manager initialization unexpectedly failed"), [3, 4];
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return null
                }, t
            }(a.Component);
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        })
    },
    WfBs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_ReadNotifications"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReadNotificationsInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "readNotifications"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "notifications"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isRead"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 148
            }
        };
        n.loc.source = {
            body: "mutation OnsiteNotifications_ReadNotifications($input: ReadNotificationsInput!) {\nreadNotifications(input: $input) {\nnotifications {\nid\nisRead\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    WjKA: function(e, t) {},
    WnwY: function(e, t) {},
    WtTG: function(e, t) {},
    XF1M: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_DeleteNotification"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DeleteNotificationInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "deleteNotification"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "notification"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 143
            }
        };
        n.loc.source = {
            body: "mutation OnsiteNotifications_DeleteNotification($input: DeleteNotificationInput!) {\ndeleteNotification(input: $input) {\nnotification {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    XTs4: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Ads_Components_AdManager_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 76
            }
        };
        n.loc.source = {
            body: "query Ads_Components_AdManager_User {\ncurrentUser {\nid\nhasPrime\nhasTurbo\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Xo53: function(e, t) {},
    "YEG/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = n("yDzg"),
            s = n("CSlQ"),
            l = n("CwIZ"),
            c = n("Odds"),
            u = "subscribe-button__subscribe-tier-button",
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasPopupExperiment: !1
                    }, t.handleClick = function() {
                        t.openCheckout(), t.props.reportSubAction({
                            action: l.a.ClickCheckout,
                            checkoutButtonTier: t.props.tierPrice
                        })
                    }, t.setPopupExperiment = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, r.n.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP")];
                                    case 1:
                                        return e = t.sent(), this.setState({
                                            hasPopupExperiment: "yes" === e
                                        }), [2]
                                }
                            })
                        })
                    }, t.openCheckout = function() {
                        t.state.hasPopupExperiment && window.open(Object(o.a)(t.props.url, {
                            ref: "subscribe-tier-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    !1 !== this.props.targetBlank && this.setPopupExperiment()
                }, t.prototype.render = function() {
                    if (this.props.isSubbedToTier) {
                        var e = Object(r.d)("Subscribed", "SubTierButton");
                        return a.createElement(c.u, {
                            ariaLabel: e,
                            "data-test-selector": u,
                            disabled: !0,
                            icon: c._11.Star
                        }, e)
                    }
                    var t = Object(r.d)("Subscribe Now", "SubTierButton");
                    return a.createElement(c.u, i.__assign({
                        ariaLabel: t + " " + this.props.tierPrice,
                        "data-test-selector": u,
                        linkTo: this.state.hasPopupExperiment ? void 0 : this.props.url,
                        onClick: this.handleClick,
                        purchase: this.props.tierPrice
                    }, Object(c._40)(this.props), {
                        targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                    }), t)
                }, t = i.__decorate([Object(s.c)("SubTierButton", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component);
        n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return d
        })
    },
    YH6m: function(e, t, n) {
        "use strict";

        function i(e) {
            return "subscribe-button-modal-tab-" + e
        }
        var a, r = n("TToO"),
            o = n("U7vG"),
            s = n("6sO2"),
            l = n("vBst"),
            c = n("Tzcg"),
            u = n("CSlQ"),
            d = n("daN3"),
            p = n("37Pp"),
            m = n("YEG/"),
            h = n("jYA1"),
            g = n("FDYX"),
            f = n("CwIZ"),
            v = n("Odds"),
            b = (n("6O9f"), "gift-subscription-button"),
            y = "subscribe-button";
        ! function(e) {
            e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
        }(a || (a = {}));
        var k = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.toggleActiveTab = function(e) {
                    if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-tier")) {
                        case "subscribe-button-modal-tab-" + a.Prime:
                            n.setState({
                                activeTab: a.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(a.Prime);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier1:
                            n.setState({
                                activeTab: a.Tier1,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(a.Tier1);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier2:
                            n.setState({
                                activeTab: a.Tier2,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[1])
                            }), n.props.onSelectTierTab(a.Tier2);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier3:
                            n.setState({
                                activeTab: a.Tier3,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[2])
                            }), n.props.onSelectTierTab(a.Tier3);
                            break;
                        default:
                            n.setState({
                                activeTab: a.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(a.Prime)
                    }
                }, n.getTabTitle = function() {
                    switch (n.state.activeTab) {
                        case a.Prime:
                            return Object(s.d)("Free Channel Sub with Twitch Prime", "SubTierTabs");
                        case a.Tier1:
                            return n.props.subscriptionProducts[0].displayName;
                        case a.Tier2:
                            return n.props.subscriptionProducts[1].displayName;
                        case a.Tier3:
                            return n.props.subscriptionProducts[2].displayName;
                        default:
                            return n.props.subscriptionProducts[0].displayName
                    }
                }, n.getTierSubscribeButton = function() {
                    var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                    if (n.props.isGift) {
                        var t = Object(s.d)("Gift A Subscription", "SubTierTabs");
                        return n.props.giftRecipient ? o.createElement(d.a, {
                            subProductId: e.id,
                            giftRecipient: n.props.giftRecipient,
                            checkoutURL: e.url,
                            buttonMessage: t,
                            purchase: n.state.currentPurchasePrice,
                            onClick: n.reportGiftCheckoutAction
                        }) : o.createElement(v.u, {
                            ariaLabel: t + " " + n.state.currentPurchasePrice,
                            "data-test-selector": b,
                            onClick: n.onGiftSelect,
                            purchase: n.state.currentPurchasePrice
                        }, t)
                    }
                    return n.state.subbedTier === n.state.activeTab && n.state.activeTab === a.Prime ? o.createElement(h.a, {
                        authToken: n.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: n.props.isSubscribed,
                        isSubscribedWithPrime: n.props.subbedTier === l.a.Prime,
                        onSubscribedWithPrime: n.onSubscribedWithPrime,
                        reportSubMenuAction: n.props.reportSubMenuAction,
                        subLogin: n.props.subLogin,
                        userHasPrime: n.props.userHasPrime,
                        canPrimeSubscribe: n.props.canPrimeSubscribe
                    }) : o.createElement(m.a, {
                        isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                        tierPrice: n.state.currentPurchasePrice,
                        reportSubAction: n.props.reportSubMenuAction,
                        url: e.url,
                        "data-a-target": "subscribe-now-button",
                        "data-test-selector": y
                    })
                }, n.onSubscribedWithPrime = function() {
                    n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                }, n.reportGiftCheckoutAction = function() {
                    n.props.reportSubMenuAction({
                        action: f.a.BuyGiftSub,
                        checkoutButtonTier: n.state.currentPurchasePrice,
                        giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                    })
                }, n.onGiftSelect = function() {
                    n.props.onGiftSelect && n.props.onGiftSelect()
                }, n.mapSubbedTierToTabs = function(e) {
                    e.subbedTier === l.a.Prime ? (n.setState({
                        activeTab: a.Prime,
                        subbedTier: a.Prime
                    }), e.onSelectTierTab(a.Prime)) : e.subbedTier === l.a.Tier1 ? (n.setState({
                        activeTab: a.Tier1,
                        subbedTier: a.Tier1
                    }), e.onSelectTierTab(a.Tier1)) : e.subbedTier === l.a.Tier2 ? (n.setState({
                        activeTab: a.Tier2,
                        subbedTier: a.Tier2
                    }), e.onSelectTierTab(a.Tier2)) : e.subbedTier === l.a.Tier3 ? (n.setState({
                        activeTab: a.Tier3,
                        subbedTier: a.Tier3
                    }), e.onSelectTierTab(a.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(a.Prime)
                }, n.getExtraEmotes = function(e) {
                    return (e === a.Tier2 ? Object(c.b)(n.props.subscriptionProducts[1].emotes) : Object(c.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                        return o.createElement(v.V, {
                            display: v.H.InlineFlex,
                            margin: {
                                right: .5
                            },
                            key: e.id
                        }, o.createElement("img", {
                            srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                        }))
                    })
                }, n.state = n.getInitialState(), n
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.mapSubbedTierToTabs(this.props)
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = null;
                this.state.subbedTier && (e = o.createElement(v.V, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: .5
                    },
                    className: "subscription-balloon-options__subbed-star"
                }, o.createElement(v._10, {
                    asset: v._11.Star
                })));
                var t = null,
                    n = null,
                    r = null,
                    c = o.createElement(v.V, {
                        display: v.H.InlineFlex
                    }, this.state.subbedTier === a.Tier3 && e, o.createElement(v._20, {
                        active: this.state.activeTab === a.Tier3,
                        "data-tier": i(a.Tier3),
                        "data-a-target": i(a.Tier3),
                        onClick: this.toggleActiveTab
                    }, this.props.subscriptionProducts[2].price));
                if (this.props.subbedTier !== l.a.Prime || this.props.isGift || (t = o.createElement(v.V, {
                        display: v.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, o.createElement(v.V, {
                        display: v.H.InlineFlex,
                        margin: {
                            right: 1
                        },
                        className: "subscription-balloon-options__prime-crown"
                    }, o.createElement(v._10, {
                        asset: v._11.Crown
                    })), o.createElement(v._20, {
                        active: this.state.activeTab === a.Prime,
                        "data-tier": i(a.Prime),
                        "data-a-target": i(a.Prime),
                        onClick: this.toggleActiveTab
                    }, Object(s.d)("Prime", "SubTierTabs")))), !this.props.subbedTier || this.props.subbedTier === l.a.Tier1) {
                    var u = this.props.subscriptionProducts[0].price;
                    n = o.createElement(v.V, {
                        display: v.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === a.Tier1 && e, o.createElement(v._20, {
                        active: this.state.activeTab === a.Tier1,
                        "data-tier": i(a.Tier1),
                        "data-a-target": i(a.Tier1),
                        onClick: this.toggleActiveTab
                    }, u))
                }
                this.props.subbedTier && this.props.subbedTier !== l.a.Prime && this.props.subbedTier !== l.a.Tier1 && this.props.subbedTier !== l.a.Tier2 || (r = o.createElement(v.V, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: 2
                    }
                }, this.state.subbedTier === a.Tier2 && e, o.createElement(v._20, {
                    active: this.state.activeTab === a.Tier2,
                    "data-tier": i(a.Tier2),
                    "data-a-target": i(a.Tier2),
                    onClick: this.toggleActiveTab
                }, this.props.subscriptionProducts[1].price)));
                var d = this.props.subscriptionProducts[1].emotes.length,
                    m = d + this.props.subscriptionProducts[2].emotes.length,
                    h = null;
                (d > 0 && this.state.activeTab === a.Tier2 || m > 0 && this.state.activeTab === a.Tier3) && (h = o.createElement(v.V, {
                    display: v.H.InlineFlex,
                    alignItems: v.c.Center
                }, this.getExtraEmotes(this.state.activeTab), o.createElement(v._23, {
                    bold: !0
                }, Object(s.d)("Plus {extraEmoteCount, number} extra channel emote(s)", {
                    extraEmoteCount: this.state.activeTab === a.Tier2 ? d : m
                }, "SubTierTabs"))));
                var g = this.props.subscriptionProducts[this.state.activeTab - 1];
                return o.createElement(v.V, {
                    className: "channel-header__subscription-balloon-options"
                }, o.createElement(v.V, {
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(v._21, null, t, n, r, c)), o.createElement(v.V, null, o.createElement(v.V, {
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(v._23, {
                    type: v._28.H5,
                    bold: !0
                }, this.getTabTitle())), o.createElement(v.V, {
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(v._23, null, Object(s.d)("Includes {availableEmoteCount, number} emoticon(s), subscriber badge, customizable messages upon subscribing, and ad-free viewing", {
                    availableEmoteCount: this.props.subscriptionProducts[0].emotes.length
                }, "SubTierTabs"))), h, o.createElement(p.a, {
                    subscriptionProduct: g,
                    isGift: this.props.isGift
                }), o.createElement(v.V, {
                    margin: {
                        top: 1,
                        right: 1
                    }
                }, this.getTierSubscribeButton())))
            }, t.prototype.getInitialState = function() {
                var e = this.props.subscriptionProducts[0].price;
                return (Object(g.d)(this.props.subscriptionProducts) || Object(g.c)(this.props.subscriptionProducts)) && (e = Object(g.a)(this.props.subscriptionProducts[0], this.props.isGift)), {
                    activeTab: a.Tier1,
                    currentPurchasePrice: e,
                    subbedTier: null
                }
            }, t.prototype.getPrice = function(e) {
                return Object(g.d)(this.props.subscriptionProducts) || Object(g.c)(this.props.subscriptionProducts) ? Object(g.a)(e, this.props.isGift) : e.price
            }, t = r.__decorate([Object(u.c)("SubTierTabs")], t)
        }(o.Component);
        n.d(t, !1, function() {
            return b
        }), n.d(t, !1, function() {
            return y
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return k
        })
    },
    YPdh: function(e, t) {},
    YhVV: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = [];
            if (!e || !t) return n;
            for (var a = /\S+/g, r = a.exec(e); r;) {
                var o = r[0],
                    s = t[o];
                if (s && "function" != typeof s) {
                    var l = Object(i.d)(e.slice(0, r.index)),
                        c = l ? l.length : r.index;
                    n[c] = {
                        startIndex: c,
                        endIndex: c + o.length,
                        data: {
                            alt: o,
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": Object(i.e)(s.id, 1),
                                    "2x": Object(i.e)(s.id, 2),
                                    "4x": Object(i.e)(s.id, 4)
                                }
                            }
                        }
                    }
                }
                r = a.exec(e)
            }
            return n
        }, t.a = function(e) {
            for (var t = {}, n = 0, i = e; n < i.length; n++)
                for (var o = i[n], s = 0, l = o.emotes; s < l.length; s++)
                    for (var c = l[s], u = 0, d = a[c.token] || [c.token]; u < d.length; u++) {
                        var p = d[u];
                        t[p] && o.id === r || (t[p] = {
                            id: c.id,
                            token: p
                        })
                    }
            return t
        };
        var i = n("l21v"),
            a = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            },
            r = "0"
    },
    YmWy: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return c
        });
        var i = n("TToO"),
            a = n("U7vG"),
            r = (n.n(a), n("6sO2")),
            o = n("ZyA2"),
            s = n("Odds"),
            l = n("kNqx"),
            c = (n.n(l), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleHistoryChange = function() {
                        t.handleClose()
                    }, t.handleGlobalKeypress = function(e) {
                        t.props.ignoreEscKey || 27 !== e.which || t.handleClose()
                    }, t.handleGlobalClick = function(e) {
                        var n = e.target;
                        t.props.closeOnBackdropClick && n.matches("." + o.b) && t.handleClose()
                    }, t.handleClose = function() {
                        t.props.onClose()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.ignoreEscKey || document.addEventListener("keydown", this.handleGlobalKeypress), this.props.closeOnBackdropClick && document.addEventListener("click", this.handleGlobalClick), this.props.closeOnPageNavigation && (this.historyUnlisten = r.n.history.listen(this.handleHistoryChange))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("keydown", this.handleGlobalKeypress), document.removeEventListener("click", this.handleGlobalKeypress), this.historyUnlisten && this.historyUnlisten()
                }, t.prototype.render = function() {
                    return a.createElement("div", {
                        className: "modal__close-button"
                    }, a.createElement(s.v, {
                        overlay: !0,
                        onClick: this.handleClose,
                        ariaLabel: Object(r.d)("Close modal", "ModalCloser"),
                        icon: s._11.Close,
                        "data-a-target": "modalClose"
                    }))
                }, t
            }(a.PureComponent))
    },
    YugT: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowButton_FollowEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "query FollowButton_FollowEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\nhosting {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Z+EN": function(e, t) {},
    "Z+Fq": function(e, t) {},
    ZVME: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "d", function() {
            return o
        });
        var i;
        ! function(e) {
            e.Chat = "Chat", e.Player = "Player"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Connected = "Connected", e.Created = "Created", e.FirstFrame = "First Frame", e.Init = "Init"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e.ChatConnected = "chat-connected", e.ChatInit = "chat-init", e.PlayerCreated = "player-created", e.PlayerPlayed = "player-played", e.PlayerLoaded = "player-loaded"
        }(r || (r = {}));
        var o;
        ! function(e) {
            e[e.NavigationStart = 1] = "NavigationStart", e[e.Registration = 2] = "Registration"
        }(o || (o = {}))
    },
    ZaD5: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "d", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "c", function() {
            return o
        }), t.e = function(e) {
            return {
                type: i,
                user: e || void 0
            }
        }, t.h = function(e, t) {
            return {
                type: a,
                languageCode: e,
                locale: t
            }
        }, t.f = function() {
            return {
                type: r
            }
        }, t.g = function() {
            return {
                type: o
            }
        };
        var i = "core.session.AUTH_INITIALIZED",
            a = "core.session.LANGUAGE_INITIALIZED",
            r = "core.session.FIRST_PAGE_LOADED",
            o = "core.session.INITIAL_AVAILABILITY_SET"
    },
    Zifq: function(e, t) {},
    ZyA2: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("Iw4B"),
            r = n("0nzt"),
            o = n("TToO"),
            s = n("U7vG"),
            l = n("sW0/"),
            c = n("VAT8"),
            u = (n("kCP2"), "js-modal-backdrop"),
            d = Object(i.a)(function(e) {
                return {
                    showModal: e.modal.show,
                    component: e.modal.modalID ? Object(a.a)(e) : null,
                    componentProps: e.modal.modalProps,
                    theme: Object(r.a)(e)
                }
            })(function(e) {
                return s.createElement(l, {
                    isOpen: e.showModal,
                    contentLabel: "Modal",
                    className: "modal__content",
                    overlayClassName: "modal__backdrop " + u + " " + Object(c.c)(e.theme),
                    shouldCloseOnOverlayClick: !1
                }, e.component && s.createElement(e.component, o.__assign({}, e.componentProps)))
            });
        n.d(t, "a", function() {
            return d
        }), n.d(t, "b", function() {
            return u
        })
    },
    a0uF: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "blockedUsers"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockedUsers"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 56
            }
        };
        n.loc.source = {
            body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    adox: function(e, t) {},
    afun: function(e, t) {},
    aiwk: function(e, t) {},
    bB4F: function(e, t) {},
    bBGx: function(e, t) {},
    bZTi: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = n("yWCw"),
            s = n("Odds"),
            l = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        showLoader: !1,
                        error: !1
                    }, n
                }
                return i.__extends(t, e), t.wrap = function(e, n, i) {
                    return function(r) {
                        return a.createElement(t, {
                            loader: e,
                            component: n,
                            componentProps: r,
                            failSilently: !(!i || !i.failSilently),
                            onRendered: i && i.onRendered
                        })
                    }
                }, t.prototype.componentDidUpdate = function(e, t) {
                    !t.Component && this.state.Component && this.props.onRendered && this.props.onRendered()
                }, t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, this.props.loader()];
                                case 1:
                                    return e = i.sent(), (t = e[this.props.component]) || r.i.fatal(new Error("Component not found."), "Component not found.", {
                                        component: this.props.component
                                    }), this.setState({
                                        Component: t,
                                        showLoader: !1,
                                        error: !t
                                    }), [3, 3];
                                case 2:
                                    return n = i.sent(), r.i.fatal(n, "Error loading module.", {
                                        component: this.props.component
                                    }), this.setState({
                                        Component: void 0,
                                        showLoader: !1,
                                        error: !0
                                    }), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return this.state.Component ? a.createElement(this.state.Component, i.__assign({}, this.props.componentProps)) : this.state.error ? this.props.failSilently ? null : a.createElement(o.a, {
                        message: Object(r.d)("Failed to load module.", "Loadable")
                    }) : a.createElement(s.Z, {
                        fillContent: !0
                    })
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return l
        })
    },
    bejq: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return u
        }), t.e = function() {
            for (var e = 0, t = c; e < t.length; e++) {
                var n = t[e];
                a.remove(n, p)
            }
        }, t.h = function(e) {
            var t = {
                authToken: e.authToken,
                displayName: e.displayName,
                id: e.id,
                login: e.login,
                roles: e.roles,
                version: u
            };
            a.set(l, JSON.stringify(t), p)
        }, t.d = function(e) {
            var t = a.get(l);
            if (t) try {
                var n = JSON.parse(t);
                if (e.debug("Found user cookie.", n), !n.authToken || "string" != typeof n.authToken) throw new Error('Missing or invalid "authToken" value stored in user cookie.');
                if (!n.displayName || "string" != typeof n.displayName) throw new Error('Missing or invalid "displayName" value stored in user cookie.');
                if (!n.id) throw new Error('Missing "id" value in user cookie.');
                if ("number" == typeof n.id) e.debug('Converting numerical user cookie "id" value to string.'), n.id = String(n.id);
                else if ("string" != typeof n.id) throw new Error('Invalid "id" value stored in user cookie.');
                if (!n.login || "string" != typeof n.login) throw new Error('Missing or invalid "login" value stored in user cookie.');
                if (n.version) {
                    if ("number" != typeof n.version) throw new Error('Invalid "version" value stored in user cookie.')
                } else e.debug("Unversioned user cookie, using default."), n.version = 1;
                return e.debug("Successfully loaded user data.", n), n
            } catch (n) {
                e.error(n, "Failed to load data from user cookie.", {
                    data: t
                }), a.remove(l)
            }
        }, t.b = function() {
            return a.get(s)
        }, t.c = function(e) {
            var t = a.get(o);
            if (t) try {
                return JSON.parse(t)
            } catch (n) {
                e.withCategory("auth").error(n, "Failed to load login state from cookie.", {
                    state: t
                }), a.remove(o)
            }
        }, t.g = function(e) {
            a.set(o, JSON.stringify(e), d)
        }, t.f = function() {
            a.remove(o, d)
        };
        var i = n("TToO"),
            a = n("lbHh"),
            r = (n.n(a), n("o/qv")),
            o = "twilight-login-state",
            s = "api_token",
            l = "twilight-user",
            c = [o, l, "persistent", s, "_twitch_session_id", "login", "name", "twilight-auth"],
            u = 2,
            d = {
                domain: Object(r.a)(),
                secure: "https:" === window.location.protocol
            },
            p = i.__assign({}, d, {
                expires: 365
            })
    },
    c3pS: function(e, t, n) {
        "use strict";
        n("67ft");
        var i, a = n("TToO"),
            r = n("KSGD"),
            o = n("U7vG"),
            s = n("6BvN"),
            l = n("HW6M"),
            c = n("6sO2"),
            u = n("rCmJ"),
            d = n("Odds"),
            p = (n("IfJQ"), "autocomplete-balloon-matches"),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                        noMatches: Object(c.d)("No matches.", "AutocompleteBalloon")
                    }, t.logger = c.i.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                        return t.props.matches.map(function(e, n) {
                            var i = t.state.selectedMatch,
                                a = i && i.replacement === e.replacement,
                                r = l("autocomplete-balloon__item", {
                                    "autocomplete-balloon__item--selected": a
                                });
                            return o.createElement(d.V, {
                                key: "autocomplete-match-" + n,
                                refDelegate: a ? t.focusOnOption : void 0,
                                "data-test-selector": p
                            }, o.createElement(d.Q, {
                                display: d.H.Block,
                                fullWidth: !0
                            }, o.createElement("button", {
                                onMouseEnter: t.handleMatchMouseEnter,
                                className: r,
                                "data-a-target": e.replacement,
                                "data-click-index": n,
                                onClick: t.onMatchClick
                            }, o.createElement(d.V, {
                                padding: {
                                    x: .5
                                },
                                display: d.H.Flex,
                                alignItems: d.c.Center
                            }, e.element))))
                        })
                    }, t.handleMatchMouseEnter = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.setState({
                            selectedMatch: n
                        })
                    }, t.onMatchClick = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.props.onMatchSelect(n)
                    }, t.getMatchFromEvent = function(e) {
                        var n = t.props.matches,
                            i = e.currentTarget.getAttribute("data-click-index");
                        return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                    }, t.handleKeydown = function(e) {
                        var n = e.charCode || e.keyCode,
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                        switch (n) {
                            case s.a.Tab:
                            case s.a.Enter:
                                i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                break;
                            case s.a.Up:
                            case s.a.Down:
                                if (!t.state.selectedMatch || !t.props.matches.length) return;
                                var a = t.props.matches.indexOf(t.state.selectedMatch);
                                if (-1 === a) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                i();
                                var r = n === s.a.Up ? -1 : 1,
                                    o = t.getIndexWithinLength(a + r, t.props.matches.length),
                                    l = t.props.matches[o];
                                t.setState({
                                    selectedMatch: l
                                })
                        }
                    }, t.getIndexWithinLength = function(e, t) {
                        var n = e % t;
                        return n < 0 ? n + t : n
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t.focusOnOption = function(e) {
                        if (e && t.autocompleteBalloonElement) {
                            var n = e.getBoundingClientRect(),
                                i = t.autocompleteBalloonElement.getBoundingClientRect();
                            (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                        }
                    }, t.setAutocompleteBalloonElement = function(e) {
                        t.autocompleteBalloonElement = e
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                        selectedMatch: this.props.matches[0]
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this,
                        n = e.matches.reduce(function(e, n, i) {
                            return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                        }, 0);
                    this.setState({
                        selectedMatch: e.matches[n]
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = 0 === this.props.matches.length ? o.createElement(d.V, {
                        padding: {
                            x: .5
                        },
                        "data-test-selector": "autocomplete-balloon-no-matches"
                    }, o.createElement(d._23, {
                        type: d._28.Span,
                        color: d.F.Alt2
                    }, this.messages.noMatches)) : this.renderMatches(), o.createElement(d.V, {
                        position: d._4.Relative
                    }, o.createElement(u.a, {
                        onClickOut: this.props.onDismiss
                    }, o.createElement(d.p, {
                        direction: d.q.TopLeft,
                        "data-a-target": "autocomplete-balloon",
                        "data-test-selector": "autocomplete-balloon",
                        show: !0
                    }, o.createElement(d.V, {
                        refDelegate: this.setAutocompleteBalloonElement,
                        "data-test-selector": "autocomplete-matches-container",
                        className: "autocomplete-balloon",
                        overflow: d._0.Auto,
                        padding: {
                            y: 1
                        }
                    }, o.createElement("div", {
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, e)))))
                }, t
            }(o.Component),
            h = n("2emZ"),
            g = n("vH/s"),
            f = {
                Chat: "chat",
                Feed: "feed",
                Whisper: "whisper"
            },
            v = ":",
            b = "#",
            y = "@",
            k = function(e) {
                switch (e) {
                    case h.a.Emote:
                        return v;
                    case h.a.Hashtag:
                        return b;
                    case h.a.Mention:
                        return y;
                    default:
                        return void c.i.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                }
            },
            S = function(e) {
                var t = k(e.autocompleteType);
                if (t) {
                    var n = {
                        channel: e.channelLogin,
                        completed_text: e.completedText,
                        source: e.source,
                        start_character: t
                    };
                    c.m.track(g.SpadeEventType.ChatSuggestionComplete, n)
                }
            };
        ! function(e) {
            e.Input = "input", e.TextArea = "textarea"
        }(i || (i = {}));
        var _ = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        autocompleteType: h.a.None,
                        matchedCursorPosition: 0,
                        matches: null,
                        value: ""
                    }, n.providers = [], n.onChange = function(e) {
                        n.setState({
                            value: e.target.value
                        }, function() {
                            n.getMatches()
                        }), n.props.onChange && n.props.onChange(e)
                    }, n.onKeyDown = function(e) {
                        var t = function() {
                                n.props.onKeyDown && n.props.onKeyDown(e)
                            },
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            },
                            a = e.charCode || e.keyCode;
                        if (a !== s.a.Enter) {
                            switch (a) {
                                case s.a.Tab:
                                    n.state.matches || (i(), n.getMatches(!0));
                                    break;
                                case s.a.Esc:
                                    n.state.matches && (i(), n.resetDisplayState())
                            }
                            t()
                        } else t()
                    }, n.setComponentRefDelegate = function(e) {
                        n.componentRef = e, n.props.componentRefDelegate && n.props.componentRefDelegate(e)
                    }, n.getMatches = function(e) {
                        var t = n.state.value;
                        if (0 !== n.providers.length && 0 !== t.length) {
                            var i = n.getCurrentCursorPosition();
                            if (i > t.length);
                            else
                                for (; i < t.length && !/\s/.test(t.charAt(i));) i++;
                            var a = t.substring(0, i);
                            if (0 === a.length || /\s/.test(a.substring(a.length - 1))) n.resetDisplayState();
                            else {
                                for (var r = a.split(/\s/), o = r[r.length - 1], s = 0, l = n.providers; s < l.length; s++) {
                                    var c = l[s];
                                    if (!e || c.canBeTriggeredByTab) {
                                        var u = c.getMatches(o, e);
                                        if (u) return void n.setState({
                                            autocompleteType: c.autocompleteType,
                                            matchedCursorPosition: i,
                                            matches: u
                                        })
                                    }
                                }
                                n.resetDisplayState()
                            }
                        } else n.resetDisplayState()
                    }, n.resetDisplayState = function(e, t) {
                        var i = a.__assign({}, n.state, {
                            autocompleteType: h.a.None,
                            matches: null
                        }, e || {});
                        n.setState(i, t)
                    }, n.insertReplacement = function(e) {
                        var t = n.state.value,
                            i = n.state.matchedCursorPosition,
                            r = t.substring(0, i),
                            o = r.lastIndexOf(e.current);
                        if (-1 === o) r = r.concat(e.replacement + " "), i = r.length;
                        else {
                            var s = r.substring(0, o),
                                l = t.length > o + e.current.length ? t.substring(o + e.current.length) : "",
                                c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                            r = "" + s + c + l, i = s.length + c.length
                        }
                        S(a.__assign({}, n.props.trackingParams || {}, {
                            autocompleteType: n.state.autocompleteType,
                            completedText: e.replacement,
                            source: n.props.suggestionSource
                        })), n.resetDisplayState({
                            value: r
                        }, function() {
                            n.setCursorPosition(i)
                        })
                    }, n.getCurrentCursorPosition = function() {
                        return n.componentRef.selectionStart
                    }, n.setCursorPosition = function(e) {
                        n.componentRef && (n.componentRef.setSelectionRange(e, e), n.componentRef.focus())
                    }, n.registerAutocompleteProvider = function(e) {
                        return n.providers.push(e),
                            function() {
                                var t = n.providers.indexOf(e);
                                n.providers.splice(t, 1)
                            }
                    }, t.refDelegate && t.refDelegate(n), n
                }
                return a.__extends(t, e), t.prototype.getChildContext = function() {
                    return {
                        registerAutocompleteProvider: this.registerAutocompleteProvider
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    !this.state.matches && t.matches && function(e) {
                        var t = k(e.autocompleteType);
                        if (t) {
                            var n = {
                                source: e.source,
                                start_character: t
                            };
                            c.m.track(g.SpadeEventType.ChatSuggestion, n)
                        }
                    }({
                        autocompleteType: t.autocompleteType,
                        source: e.suggestionSource
                    })
                }, t.prototype.componentDidUpdate = function(e, t) {
                    t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                }, t.prototype.render = function() {
                    var e = a.__assign({}, this.props, {
                        onChange: this.onChange,
                        onKeyDown: this.onKeyDown,
                        refDelegate: this.setComponentRefDelegate,
                        value: this.state.value
                    });
                    return o.createElement(d.V, null, this.state.matches && o.createElement(m, {
                        matches: this.state.matches,
                        onMatchSelect: this.insertReplacement,
                        onDismiss: this.resetDisplayState,
                        containerElement: this.props.containerElement
                    }), this.props.componentType === i.Input ? o.createElement(d.R, a.__assign({}, e, {
                        type: e.type || d.S.Text
                    })) : o.createElement(d._25, a.__assign({}, e)), this.props.children)
                }, t.prototype.getValue = function() {
                    return this.state.value
                }, t.prototype.setValue = function(e) {
                    this.resetDisplayState({
                        value: e
                    })
                }, t.childContextTypes = {
                    registerAutocompleteProvider: r.func
                }, t
            }(o.Component),
            w = n("Bir6"),
            E = n("Tzcg"),
            C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = h.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                    }, t.getMatchedEmotes = function(e) {
                        var n = t.state.hydratedEmotes;
                        if (!n || 0 === n.length) return null;
                        var i = e.substring(1),
                            a = n.reduce(function(e, n) {
                                var a = n.emotes.filter(function(e) {
                                    if (e.token) return t.doesEmoteMatchTerm(e, i)
                                });
                                return e.concat([a])
                            }, []).filter(function(e) {
                                return e.length > 0
                            }).reduce(function(e, t) {
                                return e.concat(t)
                            }, []);
                        return a = Object(E.d)(a), (a = Object(E.e)(a, i)).map(function(e) {
                            return {
                                current: ":" + i,
                                replacement: e.token,
                                element: t.renderEmoteSuggestion(e)
                            }
                        })
                    }, t.doesEmoteMatchTerm = function(e, t) {
                        var n = new RegExp("^" + Object(w.a)(t), "i");
                        if (e.token.match(n)) return !0;
                        var i = new RegExp("" + Object(w.a)(t.charAt(0)).toUpperCase()),
                            a = new RegExp("^" + Object(w.a)(t.slice(1)), "i"),
                            r = e.token.match(i);
                        return !!(r && r.index && e.token.slice(r.index + 1).match(a))
                    }, t.renderEmoteSuggestion = function(e) {
                        return [o.createElement(d.V, {
                            padding: {
                                right: .5
                            },
                            key: "emote-img-" + e.id
                        }, o.createElement("img", {
                            srcSet: e.srcSet
                        })), o.createElement(d._23, {
                            type: d._28.Span,
                            key: "emote-text-" + e.id
                        }, e.token)]
                    }, t.hidrateEmotes = function(e) {
                        var n = e.map(function(e) {
                            return {
                                id: e.id,
                                emotes: Object(E.b)(e.emotes)
                            }
                        });
                        t.setState({
                            hydratedEmotes: n
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.emotes && this.props.emotes !== e.emotes && this.hidrateEmotes(e.emotes)
                }, t.prototype.componentWillMount = function() {
                    this.hidrateEmotes(this.props.emotes)
                }, t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: r.func
                }, t
            }(o.Component);
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return _
        }), n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {}), n.d(t, "d", function() {
            return C
        }), n.d(t, "c", function() {
            return f
        })
    },
    c8Is: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("OAwv"),
            r = n("U7vG"),
            o = n("6sO2"),
            s = n("7vx8"),
            l = n("Ejve"),
            c = n("vH/s"),
            u = n("CSlQ"),
            d = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = o.i.withCategory("Tracking/AmazonAds");
                    var i = o.b.get("amazon_ads_url", ""),
                        a = o.b.get("amazon_ads_countries", ["US"]),
                        r = t.countryCode,
                        s = r && a.includes(r);
                    return s && i ? (n.imageSrc = i, n.logger.debug("Created", {
                        imageSrc: n.imageSrc,
                        userCountry: r,
                        isSupportedCountry: s,
                        supportedCountries: a
                    })) : n.logger.debug("Skipping", {
                        isSupportedCountry: s,
                        userCountry: r,
                        supportedCountries: a
                    }), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.imageSrc ? r.createElement("img", {
                        src: this.imageSrc,
                        style: {
                            display: "none"
                        }
                    }) : null
                }, t = i.__decorate([Object(u.c)("AmazonAds")], t)
            }(r.Component),
            p = n("F8kA"),
            m = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderBinding = function(e) {
                        n.containerRef = e
                    }, n.onScriptLoaded = function() {
                        n.logger.debug("Script loaded"), n.sendBeacon()
                    }, n.sendBeacon = function() {
                        window.COMSCORE && window.COMSCORE.beacon ? (n.logger.debug("Sent", {
                            data: n.data
                        }), window.COMSCORE.beacon(n.data)) : n.logger.debug("Could not send beacon; COMSCORE not available.", {
                            data: n.data
                        })
                    }, n.onHistoryChange = function() {
                        window.COMSCORE && window.COMSCORE.beacon && n.sendBeacon()
                    }, n.scriptSrc = o.b.get("comscore_url", ""), n.logger = o.i.withCategory("Tracking/Comscore"), n.data = {
                        c1: o.b.get("comscore_config_c1", 0),
                        c2: o.b.get("comscore_config_c2", 0),
                        c3: o.b.get("comscore_config_c3", 0),
                        c5: o.b.get("comscore_config_c5", "")
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    if (this.scriptSrc) {
                        if (document.querySelector('[data-name="comscore"]')) return;
                        this.logger.debug("Loading", {
                            url: this.scriptSrc
                        });
                        var e = document.createElement("script");
                        e.async = !0, e.src = this.scriptSrc, e.dataset && (e.dataset.name = "comscore"), e.onload = this.onScriptLoaded, this.containerRef.appendChild(e)
                    } else this.logger.warn("Skipping");
                    this.props.history.listen(this.onHistoryChange), this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.scriptSrc ? r.createElement("div", {
                        ref: this.renderBinding
                    }) : null
                }, t = i.__decorate([Object(u.c)("Comscore")], t)
            }(r.Component),
            h = Object(p.f)(m),
            g = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderBinding = function(e) {
                        n.containerRef = e
                    }, n.logger = o.i.withCategory("Tracking/GoogleAnalytics"), n.scriptSrc = o.b.get("google_analytics_url", ""), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    if (this.scriptSrc) {
                        if (document.querySelector('[data-name="google-analytics"]')) return;
                        var e = document.createElement("script");
                        e.async = !0, e.src = this.scriptSrc, e.dataset && (e.dataset.name = "google-analytics"), this.containerRef.appendChild(e), this.logger.debug("Created", {
                            url: this.scriptSrc
                        })
                    } else this.logger.debug("Skipped");
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.scriptSrc ? r.createElement("div", {
                        ref: this.renderBinding
                    }) : null
                }, t = i.__decorate([Object(u.c)("GoogleAnalytics")], t)
            }(r.Component),
            f = n("IWpL"),
            v = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.getPageCode = function(e) {
                        switch (e) {
                            case "directory-game":
                                return "1148gameVIDE";
                            case "directory-creative":
                                return "1148directory_misc";
                            case "directory":
                                return "1148directory";
                            case "search":
                                return "4201search";
                            case "home":
                                return "1101homepage";
                            case "pages":
                                return "1148text";
                            case "channel":
                            case "video":
                                return "1148publVIDE";
                            case "video_list":
                                return "1148publcont";
                            default:
                                return null
                        }
                    }, n.onScriptLoad = function() {
                        n.trackPageView()
                    }, n.trackPageView = function() {
                        var e = o.m.getLastPageview();
                        if (window.iom && window.iom.c && o.m.getLastPageview())
                            if (e && e.location) {
                                var t = n.getPageCode(e.location);
                                if (t) {
                                    n.isMultiLingual && (t += "_multilanguage");
                                    var i = {
                                        st: "twitchtv",
                                        cp: t,
                                        mg: "yes",
                                        sv: "home" === e.location ? "ke" : "in"
                                    };
                                    n.logger.debug("Tracking pageview", {
                                        data: i
                                    }), window.iom.c(i, 1)
                                } else n.logger.debug("Skipping pageview. No page code.", {
                                    pageName: e.location
                                })
                            } else n.logger.debug("Pageview data unavailable or incomplete, skipping pageview.", e);
                        else n.logger.debug("Unable to track pageview. IOM is missing.")
                    }, n.renderBinding = function(e) {
                        n.containerRef = e
                    }, n.logger = o.i.withCategory("Tracking/IVW"), n.languageCode = o.n.intl.getLanguageCode() || "en";
                    var i = o.b.get("ivw_url", ""),
                        a = o.b.get("ivw_countries", [""]),
                        r = o.b.get("ivw_languages", ["de"]),
                        s = t.countryCode,
                        l = s && a.includes(t.countryCode),
                        c = n.languageCode && r.includes(n.languageCode);
                    return i && (l || c) ? (n.scriptSrc = i, n.isMultiLingual = !c, n.logger.debug("Created", {
                        url: i,
                        supportedCountries: a,
                        supportedLanguages: r,
                        languageCode: n.languageCode,
                        userCountry: s
                    })) : n.logger.debug("Skipping", {
                        url: i,
                        supportedCountries: a,
                        supportedLanguages: r,
                        languageCode: n.languageCode,
                        userCountry: s
                    }), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    if (this.scriptSrc) {
                        if (document.querySelector('[data-name="ivw"]')) return;
                        var e = document.createElement("script");
                        e.async = !0, e.src = this.scriptSrc, e.dataset && (e.dataset.name = "ivw"), this.containerRef.appendChild(e), e.onload = this.onScriptLoad
                    }
                    o.m.eventEmitter.addListener(f.SpadeEventType.Pageview, this.trackPageView), this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.scriptSrc ? r.createElement("div", {
                        ref: this.renderBinding
                    }) : null
                }, t = i.__decorate([Object(u.c)("IVW")], t)
            }(r.Component),
            b = Object(p.f)(v),
            y = n("lbHh"),
            k = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.renderBinding = function(e) {
                        n.containerRef = e
                    }, n.onScriptLoad = function() {
                        n.logger.debug("Script loaded"), n.checkForKrux(0)
                    }, n.checkForKrux = function(e) {
                        if (void 0 === window.Krux) return e > 50 && n.logger.warn("Failed to load", {
                            attempt: e
                        }), void setTimeout(function() {
                            return n.checkForKrux(++e)
                        }, 100);
                        n.logger.debug("Krux loaded", {
                            attempt: e
                        });
                        var t = n.retrieve("segs");
                        window.Krux.user = n.retrieve("user"), window.Krux.segments = t && t.split(",") || [], n.trackPageload()
                    }, n.trackPageload = function() {
                        n.logger.debug("Tracking pageload"), window.Krux("page:load", n.onTrackError, {
                            pageView: !0
                        })
                    }, n.onTrackError = function(e) {
                        e ? n.logger.warn("Failed to track pageview.", e) : n.logger.debug("Tracked pageview")
                    }, n.onHistoryChange = function() {
                        window.Krux ? n.trackPageload() : o.i.debug("Failed to track pageview; Krux not available.")
                    }, n.retrieve = function(e) {
                        var t = "kx" + e;
                        if (window.localStorage) return window.localStorage[t] || "";
                        if (navigator.cookieEnabled) {
                            var n = y.get(t);
                            return n && decodeURI(n[1]) || ""
                        }
                        return ""
                    }, n.logger = o.i.withCategory("Tracking/Krux");
                    var i = t.countryCode,
                        a = o.b.get("krux_countries", [""]);
                    if (i && a.includes(i)) {
                        var r = /\bkxsrc=([^&]+)/,
                            s = /^https?:\/\/([a-z0-9_\-\.]+\.)?krxd\.net(:\d{1,5})?\//i,
                            l = location.href.match(r),
                            c = l && decodeURIComponent(l[1]),
                            u = o.b.get("krux_url", "");
                        c && (s.test(c) ? u = c : "disable" === c && (u = "")), n.scriptSrc = u, n.logger.debug("Created", {
                            userCountry: i,
                            supportedCountries: a,
                            src: n.scriptSrc
                        })
                    } else n.logger.debug("Skipping", {
                        userCountry: i,
                        supportedCountries: a
                    });
                    return n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    if (this.scriptSrc) {
                        if (document.querySelector('[data-name="krux"]')) return;
                        var e = document.createElement("script");
                        e.async = !0, e.src = this.scriptSrc, e.dataset && (e.dataset.name = "krux"), e.onload = this.onScriptLoad, this.containerRef.appendChild(e)
                    }
                    this.props.history.listen(this.onHistoryChange), this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.scriptSrc ? r.createElement("div", {
                        ref: this.renderBinding
                    }) : null
                }, t = i.__decorate([Object(u.c)("Krux")], t)
            }(r.Component),
            S = Object(p.f)(k),
            _ = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.renderBinding = function(e) {
                        n.containerRef = e
                    }, n.logger = o.i.withCategory("Tracking/Quantcast"), n.scriptSrc = o.b.get("quantcast_url", ""), n.qacct = o.b.get("quantcast_account", ""), n.labels = o.b.get("quantcast_labels", ""), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    if (this.scriptSrc && this.qacct && this.labels) {
                        if (document.querySelector('[data-name="quantcast"]')) return;
                        var e = {
                            qacct: this.qacct,
                            labels: this.labels
                        };
                        window._qoptions = e;
                        var t = document.createElement("script");
                        t.async = !0, t.src = this.scriptSrc, t.dataset && (t.dataset.name = "quantcast"), this.containerRef.appendChild(t), this.logger.debug("Created", {
                            url: this.scriptSrc,
                            options: e
                        })
                    } else this.logger.debug("Skipped");
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.scriptSrc ? r.createElement("div", {
                        ref: this.renderBinding
                    }) : null
                }, t = i.__decorate([Object(u.c)("Quantcast")], t)
            }(r.Component),
            w = n("wG4N");
        n.d(t, "a", function() {
            return E
        });
        var E = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.logger = o.i.withCategory("Tracking/Manager"), n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.reportInteractive(), o.m.track(c.SpadeEventType.BTTV, {
                    is_bttv: !!window.BetterTTV
                }), o.m.track(c.SpadeEventType.FFZ, {
                    is_ffz: !!window.FrankerFaceZ
                })
            }, t.prototype.componentDidUpdate = function() {
                this.reportInteractive()
            }, t.prototype.render = function() {
                if (!this.props.data || this.props.data.loading || this.props.data.error) return null;
                var e = this.props.data.requestInfo.countryCode;
                if (!e && o.a.buildType !== l.a.Production) {
                    var t = a.parse(this.props.history.location.search || "");
                    t.country ? (e = t.country, this.logger.debug("Using supplied country code", {
                        countryCode: e
                    })) : (e = "US", this.logger.debug("Using default country code", {
                        countryCode: e
                    }))
                }
                return r.createElement("div", null, r.createElement(d, {
                    countryCode: e
                }), r.createElement(_, null), r.createElement(g, null), r.createElement(S, {
                    countryCode: e
                }), r.createElement(h, null), r.createElement(b, {
                    countryCode: e
                }))
            }, t.prototype.reportInteractive = function() {
                !this.props.data || this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
            }, t = i.__decorate([Object(s.a)(w), Object(u.c)("TrackingManager")], t)
        }(r.Component)
    },
    c8sn: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_Summary"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "notifications"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "summary"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "unseenCount"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "lastSeenAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "incomingFriendRequests"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "1"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "totalUnreadCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "newestEdge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "createdAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 188
            }
        };
        n.loc.source = {
            body: "query OnsiteNotifications_Summary {\ncurrentUser {\nid\nnotifications {\nsummary {\nunseenCount\nlastSeenAt\n}\n}\nincomingFriendRequests(first: 1) {\ntotalUnreadCount\nnewestEdge {\ncreatedAt\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    cFXH: function(e, t) {},
    cLQP: function(e, t) {},
    cVFG: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("TToO"),
            r = n("U7vG"),
            o = n("6sO2"),
            s = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.componentWillMount = function() {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return a.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    this.props.username && this.props.authToken && o.n.tmi.setIdentity(this.props.username, this.props.authToken), t.label = 1;
                                case 1:
                                    return t.trys.push([1, 3, , 4]), [4, o.n.tmi.connect()];
                                case 2:
                                    return t.sent(), [3, 4];
                                case 3:
                                    return e = t.sent(), o.i.warn("Failed to connect to TMI from chat manager. It will be retried as needed.", e), [3, 4];
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.componentWillUnmount = function() {
                    o.n.tmi.disconnect()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.username && e.authToken && (e.username !== this.props.username || e.authToken !== this.props.authToken) && o.n.tmi.setIdentity(e.username, e.authToken)
                }, t.prototype.render = function() {
                    return null
                }, t
            }(r.Component);
        n.d(t, "a", function() {
            return l
        });
        var l = Object(i.a)(function(e) {
            return {
                authToken: e.session.user && e.session.user.authToken,
                username: e.session.user && e.session.user.login
            }
        })(s)
    },
    "cuT/": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return g
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return f
        });
        var i, a = n("TToO"),
            r = n("HW6M"),
            o = (n.n(r), n("knr3")),
            s = (n.n(o), n("U7vG")),
            l = (n.n(s), n("6sO2")),
            c = n("rK5D"),
            u = n("zNzU"),
            d = n("CSlQ"),
            p = n("Odds"),
            m = n("WHFs"),
            h = (n.n(m), 920),
            g = "34rem",
            f = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = l.i.withCategory("RightColumn"), n.handleToggleVisibility = function() {
                        var e = n.getLayoutCache();
                        n.props.isExpanded ? (n.props.collapse(), e.resource.isRightColumnClosedByUserAction = !0) : (n.props.expand(), e.resource.isRightColumnClosedByUserAction = !1), l.k.set(l.n.config.layoutCacheKey, e), Object(c.c)({
                            element: c.a.Chat,
                            action: n.props.isExpanded ? c.b.Close : c.b.Open
                        })
                    }, n.hideOnBreakpoint = function() {
                        if (n.containerRef) {
                            var e = h;
                            window.innerWidth < e && !n.props.theatreModeEnabled ? "none" !== n.containerRef.style.display && (n.containerRef.style.display = "none") : "none" === n.containerRef.style.display && (n.containerRef.style.display = "")
                        }
                    }, n.setContainerRef = function(e) {
                        return n.containerRef = e
                    }, n.state = {
                        content: null,
                        contentID: null
                    }, i && n.logger.warn("RightColumn should only ever be used in the Root. Use <RightColumnContent> instead to wrap components that should display in the right column."), i = n, n
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.hideOnBreakpoint), this.hideOnBreakpoint(), this.reportInteractive(), o.bind("alt+r", this.handleToggleVisibility)
                }, t.prototype.componentDidUpdate = function() {
                    this.hideOnBreakpoint(), this.state.content && this.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.hideOnBreakpoint), o.unbind("alt+r")
                }, t.prototype.render = function() {
                    if (!this.state.content) return null;
                    var e = r("right-column", {
                        "right-column--collapsed": !this.props.isExpanded,
                        "right-column--theatre": this.props.theatreModeEnabled
                    });
                    return s.createElement(p.V, {
                        className: e,
                        refDelegate: this.setContainerRef,
                        flexShrink: 0,
                        fullHeight: !0,
                        position: this.props.theatreModeEnabled ? p._4.Fixed : p._4.Relative,
                        attachTop: this.props.theatreModeEnabled,
                        attachRight: this.props.theatreModeEnabled
                    }, s.createElement(p.V, {
                        position: p._4.Relative,
                        flexGrow: 0,
                        flexShrink: 0,
                        fullHeight: !0,
                        display: this.props.isExpanded ? p.H.Block : p.H.Hide
                    }, this.state.content), s.createElement(p.Q, {
                        className: "right-column__toggle-visibility",
                        position: p._4.Absolute,
                        flexGrow: 0,
                        flexShrink: 0,
                        display: p.H.Block,
                        zIndex: p._39.Above
                    }, s.createElement("button", {
                        onClick: this.handleToggleVisibility,
                        "data-a-target": "right-column__toggle-collapse-btn"
                    }, s.createElement(p.Q, {
                        className: "right-column__toggle-visibility-icon",
                        position: p._4.Absolute
                    }, s.createElement(p._23, {
                        type: p._28.Span
                    }, s.createElement(p._10, {
                        asset: p._11.GlyphArrDown
                    }))))))
                }, t.prototype.provideContent = function(e, t) {
                    this.state.content && this.state.contentID !== t && this.logger.warn("Displaying another component already. Only one component can be displayed at a time using <RightColumnContent>. Check the page or other subcomponents to find the other instance and determine which one should be showing."), this.setState({
                        content: e,
                        contentID: t
                    })
                }, t.prototype.removeContent = function() {
                    this.setState({
                        content: null,
                        contentID: null
                    })
                }, t.prototype.reportInteractive = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.getLayoutCache = function() {
                    return l.k.get(l.n.config.layoutCacheKey, u.a)
                }, t = a.__decorate([Object(d.c)("RightColumn")], t)
            }(s.Component)
    },
    cx1p: function(e, t) {},
    czpb: function(e, t, n) {
        "use strict";
        var i = n("6sO2"),
            a = n("Ejve"),
            r = n("MSvX");
        t.a = function(e) {
            return i.b.get(r.a, !1) || i.a.buildType !== a.a.Production ? "string" == typeof e ? e : e.pathname || "" : "string" == typeof e ? o + e : o + e.pathname
        }, t.b = function() {
            return !i.b.get(r.a, !1) && i.a.buildType === a.a.Production
        };
        var o = "https://www.twitch.tv"
    },
    daN3: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("yDzg"),
            l = n("CSlQ"),
            c = n("Odds"),
            u = n("lK86"),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasPopupExperiment: !1
                    }, t.setPopupExperiment = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, r.n.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP")];
                                    case 1:
                                        return e = t.sent(), this.setState({
                                            hasPopupExperiment: "yes" === e
                                        }), [2]
                                }
                            })
                        })
                    }, t.handleClick = function() {
                        return t.openCheckout(), t.props.onClick && t.props.onClick()
                    }, t.openCheckout = function() {
                        t.state.hasPopupExperiment && t.props.checkoutURL && t.props.giftRecipient && window.open(Object(s.a)(t.props.checkoutURL, {
                            recipient: t.props.giftRecipient,
                            ref: "gift-subscribe-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.setPopupExperiment()
                }, t.prototype.render = function() {
                    var e = this.props.checkoutURL ? Object(r.d)("Buy Gift Subscription", "GiftSubscribeButton") : Object(r.d)("Gift Subscription", "GiftSubscribeButton"),
                        t = !!(this.props.data && this.props.data.user && this.props.data.user.self) && this.props.data.user.self.canGift,
                        n = this.props.checkoutURL && this.props.giftRecipient ? Object(s.a)(this.props.checkoutURL, {
                            recipient: this.props.giftRecipient
                        }) : "";
                    return a.createElement(c.u, {
                        targetBlank: !0,
                        disabled: !t,
                        onClick: this.handleClick,
                        linkTo: this.state.hasPopupExperiment ? void 0 : n,
                        "data-test-selector": "gift-subscribe-button",
                        purchase: this.props.purchase
                    }, this.props.buttonMessage || e)
                }, t = i.__decorate([Object(l.c)("GiftSubscribeButton", {
                    autoReportInteractive: !0
                }), Object(o.a)(u, {
                    options: function(e) {
                        return {
                            variables: {
                                recipientLogin: e.giftRecipient,
                                subProductId: e.subProductId
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.giftRecipient || !e.subProductId
                    }
                })], t)
            }(a.Component);
        n.d(t, !1, function() {
            return "gift-subscribe-button"
        }), n.d(t, "a", function() {
            return d
        })
    },
    djIP: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return r
        });
        var i;
        ! function(e) {
            e.Spam = "Spam", e.Harassment = "Harassment"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e.Whisper = "WHISPER", e.Chat = "CHAT"
        }(r || (r = {}))
    },
    e1CU: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            var n = e,
                i = !1;
            return n ? function(e) {
                return e.split("").map(function(e) {
                    return e.charCodeAt(0) > 127
                }).reduce(function(e, t) {
                    return e || t
                })
            }(n) && (i = !0) : n = t, {
                userDisplayName: n,
                isIntl: i
            }
        }
    },
    e2wA: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Current_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 50
            }
        };
        n.loc.source = {
            body: "query Current_User {\ncurrentUser {\nid\nhasPrime\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    eBiB: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e && "v" === e.charAt(0) ? e.substring(1) : e
        }
    },
    eXld: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("TToO"),
            r = n("HW6M"),
            o = n("KSGD"),
            s = n("U7vG"),
            l = n("N221"),
            c = n("Odds"),
            u = (n("V1E/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        scrollableProps: {}
                    }, t.getChildContext = function() {
                        return {
                            setRootScrollableProps: t.setRootScrollableProps,
                            resetRootScrollableProps: t.resetRootScrollableProps
                        }
                    }, t.setRootScrollableProps = function(e) {
                        t.setState({
                            scrollableProps: e
                        })
                    }, t.resetRootScrollableProps = function() {
                        t.setState({
                            scrollableProps: {}
                        })
                    }, t.setScrollableAreaRef = function(e) {
                        return t.scrollableAreaRef = e
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.playerIsPersisting && this.state.scrollableProps && this.state.scrollableProps.addPaddingWhenPlayerIsPersisting,
                        t = r({
                            "root-scrollable": !this.state.scrollableProps.className,
                            "root-scrollable--persisting-player": e
                        }, this.state.scrollableProps.className || ""),
                        n = a.__assign({
                            contentClassName: "root-scrollable__content"
                        }, this.state.scrollableProps, {
                            className: t
                        });
                    return s.createElement(l.b, a.__assign({}, n, {
                        "data-a-target": "root-scroller",
                        scrollRef: this.setScrollableAreaRef
                    }), s.createElement(c.V, {
                        position: c._4.Relative,
                        fullWidth: !0,
                        className: "root-scrollable__wrapper",
                        refDelegate: this.props.contentRefDelegate
                    }, this.props.children))
                }, t.childContextTypes = {
                    setRootScrollableProps: o.func,
                    resetRootScrollableProps: o.func
                }, t
            }(s.Component)),
            d = Object(i.a)(function(e) {
                return {
                    playerIsPersisting: e.ui.persistentPlayerEnabled && e.ui.persistentPlayerIsPersisting
                }
            })(u),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.shouldSetRootScrollableProps = function(e, t) {
                        return !(!e || !t) && (e.disableDebounce !== t.disableDebounce || (e.scrollRef !== t.scrollRef || (e.contentClassName !== t.contentClassName || (e.scrollContentClassName !== t.scrollContentClassName || (e.suppressScrollX !== t.suppressScrollX || (e.suppressScrollY !== t.suppressScrollY || e.className !== t.className))))))
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.context.setRootScrollableProps && this.context.setRootScrollableProps(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.shouldSetRootScrollableProps(this.props, e) && this.context.setRootScrollableProps && this.context.setRootScrollableProps(e)
                }, t.prototype.componentWillUnmount = function() {
                    this.context.resetRootScrollableProps && this.context.resetRootScrollableProps()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    setRootScrollableProps: o.func,
                    resetRootScrollableProps: o.func
                }, t
            }(s.Component);
        n.d(t, "a", function() {
            return d
        }), n.d(t, "b", function() {
            return p
        })
    },
    eY4D: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_PrimeOfferList_PrimeOffers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "dateOverride"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Time"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "primeOffers"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "dateOverride"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "dateOverride"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "imageURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "claimInstructions"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "description"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "deliveryMethod"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "priority"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "externalURL"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "publisher"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "categories"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "hasEntitlement"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "claimData"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 276
            }
        };
        n.loc.source = {
            body: "query Prime_PrimeOfferList_PrimeOffers($dateOverride: Time) {\nprimeOffers(dateOverride: $dateOverride) {\nid\ntitle\nimageURL\nclaimInstructions\ndescription\ndeliveryMethod\npriority\ncontent {\ngame {\nid\nname\n}\nexternalURL\npublisher\ncategories\n}\nself {\nhasEntitlement\nclaimData\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    el3o: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "claimPrimeOffer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ClaimPrimeOfferInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "claimPrimeOffer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "claimData"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "hasEntitlement"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 128
            }
        };
        n.loc.source = {
            body: "mutation claimPrimeOffer($input: ClaimPrimeOfferInput!) {\nclaimPrimeOffer(input: $input) {\nself {\nclaimData\nhasEntitlement\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    emkL: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = n("Odds"),
            s = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onHistoryChange = function(e) {
                        n.setState({
                            currentPathname: e.pathname
                        })
                    }, n.shouldShow = function() {
                        return n.props.link && n.state.currentPathname !== n.props.link.pathname
                    }, n.state = {
                        currentPathname: location.pathname
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = r.n.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten()
                }, t.prototype.render = function() {
                    return this.props.link && this.shouldShow() ? a.createElement(o.u, {
                        linkTo: this.props.link,
                        onClick: this.props.onClick,
                        overlay: this.props.shouldHollowOverlay,
                        size: o.x.Small,
                        tabIndex: -1,
                        type: this.props.shouldHollowOverlay ? o.z.Hollow : o.z.Default
                    }, Object(r.d)("Join", "JoinButton")) : null
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return s
        })
    },
    "f2i/": function(e, t, n) {
        "use strict";

        function i() {
            return function(e) {
                l.n.apollo.authToken = null, e(Object(C.e)(null))
            }
        }

        function a(e, t) {
            return s.__awaiter(this, void 0, void 0, function() {
                var n, i, a, r, o, c, u, d, p, m, h, g;
                return s.__generator(this, function(s) {
                    switch (s.label) {
                        case 0:
                            return s.trys.push([0, 8, , 9]), t.debug("Getting OAuth client ID for token."), [4, fetch(l.a.apiBaseURL + "/kraken", {
                                method: "GET",
                                headers: {
                                    authorization: "OAuth " + e
                                }
                            })];
                        case 1:
                            return 200 === (n = s.sent()).status ? [3, 3] : (a = (i = t).warn, r = ["Got a " + n.status + " status response while getting OAuth client ID."], o = {}, [4, n.text()]);
                        case 2:
                            throw a.apply(i, r.concat([(o.body = s.sent(), o.status = n.status, o)])), new Error("Failed to get OAuth client ID: " + n.status + " status response.");
                        case 3:
                            return [4, n.json()];
                        case 4:
                            return (c = s.sent()) && c.token && c.token.client_id ? [3, 6] : (d = (u = t).warn, p = ["Received a malformed response while getting OAuth client ID."], m = {}, [4, n.text()]);
                        case 5:
                            throw d.apply(u, p.concat([(m.body = s.sent(), m)])), new Error("Failed to get OAuth client ID: Malformed response.");
                        case 6:
                            return t.debug("Revoking OAuth token.", {
                                clientID: c.token.client_id
                            }), (h = new FormData).append("client_id", c.token.client_id), h.append("token", e), [4, fetch(l.a.apiBaseURL + "/kraken/oauth2/revoke", {
                                body: h,
                                method: "POST",
                                mode: "no-cors"
                            })];
                        case 7:
                            return s.sent(), [3, 9];
                        case 8:
                            return g = s.sent(), t.error(g, "Failed to revoke OAuth token."), [3, 9];
                        case 9:
                            return [2]
                    }
                })
            })
        }

        function r(e, t) {
            return s.__awaiter(this, void 0, void 0, function() {
                var n, i, a, r;
                return s.__generator(this, function(o) {
                    switch (o.label) {
                        case 0:
                            t.debug("Getting user data from legacy API.", {
                                legacyCSRFToken: e
                            }), o.label = 1;
                        case 1:
                            return o.trys.push([1, 4, , 5]), [4, fetch("https://api.twitch.tv/api/me?on_site=1", {
                                method: "GET",
                                headers: {
                                    "client-id": l.a.authClientID,
                                    "twitch-api-token": e
                                },
                                credentials: "include"
                            })];
                        case 2:
                            return n = o.sent(), [4, n.json()];
                        case 3:
                            return i = o.sent(), 200 !== n.status || i.error ? (t.error(new Error("Error getting user data from legacy API."), "Error getting user data from legacy API.", {
                                body: i,
                                legacyCSRFToken: e,
                                status: n.status
                            }), [2]) : (a = {
                                authToken: i.chat_oauth_token,
                                displayName: i.name,
                                id: i.id.toString(),
                                legacyCSRFToken: e,
                                login: i.login,
                                roles: {
                                    isStaff: i.is_staff
                                }
                            }, [2, a]);
                        case 4:
                            return r = o.sent(), t.error(r, "Error getting user data from legacy API.", {
                                legacyCSRFToken: e
                            }), [3, 5];
                        case 5:
                            return [2]
                    }
                })
            })
        }
        var o, s = n("TToO"),
            l = n("6sO2"),
            c = n("lbHh"),
            u = n("U7vG"),
            d = n("+8VM"),
            p = n("yWCw");
        ! function(e) {
            e.Login = "login", e.Signup = "signup"
        }(o || (o = {}));
        var m;
        ! function(e) {
            e.Height = "height", e.Loaded = "loaded", e.KrakenCallback = "krakenCallback", e.PassportCallback = "passportCallback", e.Heartbeat = "heartbeat"
        }(m || (m = {}));
        var h = n("HM6l"),
            g = n("yDzg"),
            f = n("bejq"),
            v = n("+xm8"),
            b = n("vH/s"),
            y = n("o/qv"),
            k = n("Odds"),
            S = (n("lw07"), 5e3),
            _ = "passport_requested",
            w = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.frameLoadStart = 0, n.lastHeartbeart = 0, n.heartBeatCheckInterval = 0, n.logger = l.n.logger.withCategory("passport-modal"), n.nonce = Object(v.b)(), n.passportHosts = l.b.get("passport_hosts", []), n.handleMessage = function(e) {
                        if (n.logger.debug("Received a Passport frame message", e), window && document && n.passportHosts.includes(e.origin) && e.data) {
                            var t = {
                                messageType: null
                            };
                            if ("string" == typeof e.data && e.data.startsWith("{")) try {
                                t = JSON.parse(e.data)
                            } catch (e) {
                                return void n.logger.warn("Unable to parse Passport IFrame message", e)
                            } else {
                                if ("object" != typeof e.data) return void n.logger.warn("The Passport IFrame message was not a string or an object");
                                t = e.data
                            }
                            if (t.messageType) switch (t.messageType) {
                                case m.Loaded:
                                    return n.frameRef ? void n.frameRef.contentWindow.postMessage(JSON.stringify({
                                        width: "100%"
                                    }), "*") : (n.logger.error(new Error("Passport IFrame Ref Missing"), "Received a loaded message from Passport but had no ref to the IFrame"), void n.setState({
                                        hasError: !0
                                    }));
                                case m.Height:
                                    var i = t;
                                    return i.height ? void n.setState({
                                        height: i.height
                                    }) : (n.logger.error(new Error("Invalid Passport Height Message"), "The Passport IFrame height message type had an invalid height"), void n.setState({
                                        hasError: !0
                                    }));
                                case m.KrakenCallback:
                                case m.PassportCallback:
                                    var a = t;
                                    return a.redirectURI ? void window.location.assign(a.redirectURI) : (n.setState({
                                        hasError: !0
                                    }), void n.logger.error(new Error("Invalid Passport Redirect Message"), "The Passport IFrame redirect message type had an invalid redirectURI"));
                                case m.Heartbeat:
                                    return void(n.lastHeartbeart = Date.now());
                                default:
                                    return
                            } else n.logger.warn("The Passport IFrame message did not have a messageType")
                        }
                    }, n.onClickTryAgain = function() {
                        n.setState({
                            isLoading: !0,
                            hasError: !1,
                            height: 0
                        }, function() {
                            return n.frameLoadStart = Date.now()
                        })
                    }, n.onFrameError = function() {
                        n.logger.error(new Error("Unable to load Passport IFrame"), "The IFrame called its onError handler."), n.state.hasError || n.setState({
                            hasError: !0,
                            isLoading: !1
                        })
                    }, n.onFrameLoad = function() {
                        n.state.isLoading && n.setState({
                            isLoading: !1
                        }, function() {
                            var e = Date.now() - n.frameLoadStart;
                            e > S && n.logger.warn("The Passport IFrame took a long time to load.", {
                                duration: e
                            })
                        })
                    }, n.renderContent = function() {
                        if (n.state.hasError) {
                            var e = Object(l.d)("Try Again", "PassportModal");
                            return u.createElement(k.V, {
                                fullHeight: !0,
                                flexDirection: k.J.Column,
                                display: k.H.Flex,
                                alignItems: k.c.Center,
                                justifyContent: k.U.Center
                            }, u.createElement(p.a, {
                                inline: !0,
                                key: "error",
                                message: Object(l.d)("Something went wrong", "PassportModal")
                            }), u.createElement(k.u, {
                                key: "try-again",
                                ariaLabel: e,
                                onClick: n.onClickTryAgain
                            }, e))
                        }
                        return u.createElement("iframe", {
                            height: n.state.height,
                            ref: n.setFrameRef,
                            onLoad: n.onFrameLoad,
                            onError: n.onFrameError,
                            scrolling: "no",
                            src: n.state.url,
                            width: "100%",
                            name: "passport"
                        })
                    }, n.setFrameRef = function(e) {
                        return n.frameRef = e
                    }, n.state = {
                        height: 0,
                        hasError: !1,
                        isLoading: !0,
                        url: function(e) {
                            var t = {
                                    next: window.location.href,
                                    nonce: Object(h.b)()
                                },
                                n = {
                                    client_id: l.a.authClientID,
                                    embed: "true",
                                    force_login: "true",
                                    lang: l.n.intl.getLanguageCode() || "en",
                                    login_type: e,
                                    redirect_uri: l.a.passportRedirectURI,
                                    response_type: "token",
                                    scope: l.a.passportScopes.join(" "),
                                    state: JSON.stringify(t)
                                };
                            return Object(f.g)(t), Object(g.a)(l.a.passportAuthURL, n)
                        }(n.props.initialTab)
                    }, c.set(_, n.nonce, {
                        domain: Object(y.a)(),
                        secure: "https:" === window.location.protocol
                    }), n
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.handleMessage)
                }, t.prototype.componentDidMount = function() {
                    var e = this;
                    this.frameLoadStart = Date.now(), this.heartBeatCheckInterval = setInterval(function() {
                        e.lastHeartbeart && Date.now() - e.lastHeartbeart > 15e3 && (e.logger.error(new Error("Passport Heartbeat Timeout"), "Client did not receive a Passport heartbeat within the timeout.", {
                            heartbeatTimeout: 15e3
                        }), clearInterval(e.heartBeatCheckInterval))
                    }, 1e3), Object(v.c)(b.SpadeEventType.PassportShow, {
                        action: this.props.action,
                        nonce: this.nonce,
                        type: this.props.initialTab
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.handleMessage), clearInterval(this.heartBeatCheckInterval), Object(v.c)(b.SpadeEventType.PassportHide, {
                        action: this.props.action,
                        nonce: this.nonce,
                        type: this.props.initialTab
                    })
                }, t.prototype.render = function() {
                    return u.createElement(k.V, {
                        padding: {
                            top: 4,
                            bottom: 2,
                            x: 2
                        },
                        className: "passport-modal",
                        position: k._4.Relative
                    }, this.renderContent(), this.state.isLoading && !this.state.hasError && u.createElement(k._19, {
                        background: k.m.Base,
                        position: k._4.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0
                    }, u.createElement(k.Z, {
                        fillContent: !0
                    })), u.createElement(d.a, {
                        closeOnBackdropClick: !0
                    }))
                }, t
            }(u.Component),
            E = n("V5M+"),
            C = n("ZaD5"),
            N = n("Aj/L"),
            T = n("FuaS"),
            O = n("POVT");
        t.f = function(e) {
            return Object(E.d)(w, {
                action: e,
                initialTab: o.Login
            })
        }, t.h = function(e) {
            return Object(E.d)(w, {
                action: e,
                initialTab: o.Signup
            })
        }, t.g = function() {
            var e = this;
            return function(t, n) {
                return s.__awaiter(e, void 0, void 0, function() {
                    var e, t, i, o, c, u, d, p;
                    return s.__generator(this, function(s) {
                        switch (s.label) {
                            case 0:
                                if (e = l.n.logger.withCategory("auth.logout"), t = n(), !(i = Object(N.a)(t))) return e.warn("Attempted to log out without being logged in."), [2];
                                if (o = Object(N.b)(t)) return [3, 4];
                                s.label = 1;
                            case 1:
                                return s.trys.push([1, 3, , 4]), e.debug("No legacy CSRF token found, making blank request to get one."), [4, fetch("https://passport.twitch.tv/logout/new", {
                                    credentials: "include",
                                    method: "POST",
                                    mode: "no-cors"
                                })];
                            case 2:
                                return s.sent(), o = Object(f.b)(), [3, 4];
                            case 3:
                                return c = s.sent(), e.warn("Failed to acquire legacy CSRF token.", {
                                    err: c
                                }), [3, 4];
                            case 4:
                                return o ? [4, r(o, e)] : [3, 11];
                            case 5:
                                return (u = s.sent()) && u.authToken !== i ? [4, a(u.authToken, e)] : [3, 7];
                            case 6:
                                s.sent(), s.label = 7;
                            case 7:
                                return s.trys.push([7, 9, , 10]), e.debug("Invalidating passport session."), (d = new FormData).append("api_token", o), [4, fetch("https://passport.twitch.tv/logout/new", {
                                    body: d,
                                    credentials: "include",
                                    method: "POST",
                                    mode: "no-cors"
                                })];
                            case 8:
                                return s.sent(), [3, 10];
                            case 9:
                                return p = s.sent(), e.error(p, "Failed to invalidate passport session."), [3, 10];
                            case 10:
                                return [3, 12];
                            case 11:
                                e.debug("Skipping legacy OAuth token revocation and passport session invalidation: No legacy CSRF token found."), s.label = 12;
                            case 12:
                                return [4, a(i, e)];
                            case 13:
                                return s.sent(), e.debug("Clearing auth cookies and reloading."), Object(f.e)(), window.location.reload(), [2]
                        }
                    })
                })
            }
        }, t.a = i, t.d = function(e) {
            return function(t) {
                l.n.apollo.authToken = e.authToken, t(Object(C.e)(e))
            }
        }, t.c = function(e, t, n) {
            var a = this;
            return void 0 === n && (n = !0),
                function(r) {
                    return s.__awaiter(a, void 0, void 0, function() {
                        var a, o, c, u;
                        return s.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    (a = l.n.logger.withCategory("auth.init.token")).debug("Getting user data from GraphQL."), l.n.apollo.authToken = e, s.label = 1;
                                case 1:
                                    return s.trys.push([1, 3, , 4]), [4, l.n.apollo.client.query({
                                        fetchPolicy: "network-only",
                                        query: O
                                    })];
                                case 2:
                                    return (o = s.sent()).data.currentUser ? (c = {
                                        authToken: e,
                                        displayName: o.data.currentUser.displayName,
                                        id: o.data.currentUser.id,
                                        legacyCSRFToken: t,
                                        login: o.data.currentUser.login,
                                        roles: {
                                            isStaff: !!o.data.currentUser.roles && o.data.currentUser.roles.isStaff
                                        }
                                    }, n && Object(f.h)(c), r(Object(C.e)(c)), [3, 4]) : (a.error(new Error("Failed to get user data from GraphQL, but there was no client error."), "Failed to get user data from GraphQL, but there was no client error."), r(i()), [2]);
                                case 3:
                                    return u = s.sent(), a.error(u, "Failed to get user data from GraphQL."), r(i()), [3, 4];
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }
        }, t.b = function(e) {
            var t = this;
            return function(n) {
                return s.__awaiter(t, void 0, void 0, function() {
                    var t;
                    return s.__generator(this, function(a) {
                        switch (a.label) {
                            case 0:
                                return [4, r(e, l.n.logger.withCategory("auth.init.legacy"))];
                            case 1:
                                return (t = a.sent()) ? (l.n.apollo.authToken = t.authToken, Object(f.h)(t), n(Object(C.e)(t))) : n(i()), [2]
                        }
                    })
                })
            }
        }, t.e = function(e) {
            var t = this;
            return function(n) {
                return s.__awaiter(t, void 0, void 0, function() {
                    var t, i;
                    return s.__generator(this, function(a) {
                        switch (a.label) {
                            case 0:
                                return [4, l.n.intl.loadLocale(e ? [e].concat(Object(T.b)({
                                    includeChosenLanguage: !1
                                })) : Object(T.b)())];
                            case 1:
                                return a.sent(), t = l.n.intl.getLanguageCode() || "en", (i = l.a.locales.find(function(e) {
                                    return e.languageCode === t
                                })) || (l.n.logger.warn("Tried to use invalid language code, using default.", t), i = l.a.locales.find(function(e) {
                                    return !!e.default
                                })), n(Object(C.h)(i.languageCode, i.locale)), [2]
                        }
                    })
                })
            }
        }
    },
    f8UT: function(e, t) {},
    fS5P: function(e, t) {},
    fc0G: function(e, t, n) {
        "use strict";

        function i() {
            return !!window.Twitch && !!window.Twitch.Player
        }

        function a(e, t, n) {
            if (e.collectionID || !e.videoID)
                if (e.collectionID && e.videoID) {
                    if (n && n.currentVideoID && n.currentCollectionID && n.currentVideoID === e.videoID && n.currentCollectionID === e.collectionID) return;
                    t.push("/videos/" + e.videoID + "?collection=" + e.collectionID)
                } else !e.collectionID || e.videoID ? c.i.withCategory("video-player").error(new Error("No collection or video specified from the emitted player transition event."), "No collection or video specified from the emitted player transition event.") : t.push("/collections/" + e.collectionID);
            else t.push("/videos/" + e.videoID)
        }
        var r, o = n("TToO"),
            s = n("U7vG"),
            l = n("F8kA"),
            c = n("6sO2"),
            u = n("hdYS"),
            d = n("+Znq"),
            p = n("vH/s"),
            m = n("LjAQ"),
            h = n("mw/a"),
            g = n("70dR"),
            f = n("Odds"),
            v = (n("Zifq"), "hosting-ui-report-button"),
            b = "hosting-ui-more-balloon",
            y = "hosting-ui-more-button",
            k = "hosting-ui-channel-name",
            S = "video-player-hosting-ui__header",
            _ = "video-player-hosting-ui__footer",
            w = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleReportHosterClick = function() {
                        t.props.isLoggedIn ? t.props.showReportUserModal({
                            onClose: t.handleReportModalClose,
                            reportContext: {
                                contentType: h.a.User,
                                targetUserID: t.props.hostChannelID
                            },
                            title: Object(c.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.hostChannelDisplayName
                            }, "VideoPlayerHostingUI")
                        }) : t.props.login()
                    }, t.handleReportModalClose = function(e) {
                        (e === m.b.MutationError || e === m.b.Success) && t.props.history.push("/")
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    var e = !!this.props.hostedChannelDisplayName;
                    return s.createElement(f._19, {
                        className: "video-player-hosting-ui__container"
                    }, e && this.renderHeader(), s.createElement("span", {
                        key: "video-player"
                    }, this.props.children), s.createElement(f.V, {
                        display: e ? f.H.Block : f.H.Hide,
                        position: f._4.Relative,
                        zIndex: f._39.Above
                    }, e && this.renderFooter()))
                }, t.prototype.renderHeader = function() {
                    return s.createElement(f.e, {
                        type: f.i.SlideInBottom,
                        delay: f.f.Medium,
                        duration: f.g.Medium,
                        enabled: !0
                    }, s.createElement(l.a, {
                        key: "hosting-ui-header",
                        className: "video-player-hosting-ui__link",
                        to: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                medium: p.PageviewMedium.Channel,
                                content: p.PageviewContent.Host
                            }
                        },
                        "data-a-target": "hosting-ui-link",
                        "data-test-selector": S
                    }, s.createElement(f._19, {
                        className: "video-player-hosting-ui__header",
                        display: f.H.Flex,
                        background: f.m.AccentAlt2,
                        color: f.F.Overlay,
                        alignItems: f.c.Center,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        "data-a-target": "hosting-ui-header"
                    }, s.createElement(f.V, {
                        className: "video-player-hosting-ui__avatar-container"
                    }, s.createElement(f.l, {
                        imageSrc: this.props.hostedChannelProfileImageURL || "",
                        size: 30,
                        imageAlt: Object(c.d)("Hosted Channel {hostedChannelDisplayName}'s Avatar", {
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName || ""
                        }, "VideoPlayerHostingUI")
                    })), s.createElement(f._19, {
                        margin: {
                            left: 1
                        },
                        fontSize: f.L.Size5
                    }, Object(c.d)("Hosting", "VideoPlayerHostingUI"), " ", s.createElement(f._23, {
                        type: f._28.Span,
                        className: "video-player-hosting-ui__channel-name",
                        color: f.F.OverlayAlt,
                        "data-a-target": k
                    }, this.props.hostedChannelDisplayName)))))
                }, t.prototype.renderFooter = function() {
                    return s.createElement(f.e, {
                        type: f.i.SlideInTop,
                        enabled: !0,
                        delay: f.f.Medium,
                        duration: f.g.Medium
                    }, s.createElement(f._19, {
                        key: "hosting-ui-footer",
                        background: f.m.AccentAlt2,
                        className: "video-player-hosting-ui__footer",
                        display: f.H.Block,
                        padding: 1,
                        "data-test-selector": _,
                        "data-a-target": "hosting-ui-footer"
                    }, s.createElement(f.V, {
                        padding: {
                            y: .5
                        },
                        display: f.H.Flex,
                        justifyContent: f.U.Between
                    }, s.createElement(f.V, {
                        display: f.H.Flex
                    }, s.createElement(f.V, {
                        margin: {
                            right: 1
                        }
                    }, s.createElement(u.a, {
                        "data-a-target": "hosting-ui-follow-button",
                        channelName: this.props.hostedChannelLogin || "",
                        channelLogin: this.props.hostedChannelLogin,
                        hostChannelLogin: this.props.hostChannelLogin,
                        hostChannelID: this.props.hostChannelID,
                        isHostedFollow: !0,
                        balloonDirection: f.q.BottomLeft
                    })), s.createElement(f.V, null, s.createElement(g.a, {
                        channelLogin: this.props.hostedChannelLogin,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        "data-a-target": "hosting-ui-subscribe-button"
                    }))), s.createElement(d.a, null, s.createElement(f.v, {
                        ariaLabel: Object(c.d)("More options", "HostingUI"),
                        overlay: !0,
                        icon: f._11.More,
                        onClick: this.handleReportHosterClick,
                        "data-a-target": y
                    }), s.createElement(f.p, {
                        direction: f.q.TopRight,
                        "data-a-target": b
                    }, s.createElement(f.V, {
                        padding: {
                            y: 1
                        }
                    }, s.createElement(f.T, {
                        onClick: this.handleReportHosterClick,
                        "data-a-target": v
                    }, s.createElement(f.V, {
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(c.d)("Report {hostChannelDisplayName}", {
                        hostChannelDisplayName: this.props.hostChannelDisplayName
                    }, "VideoPlayerHostingUI")))))))))
                }, t
            }(s.Component),
            E = n("RH2O"),
            C = n("2KeS"),
            N = n("+xm8"),
            T = n("V5M+"),
            O = n("f2i/"),
            I = n("Aj/L"),
            D = n("oSFp"),
            L = Object(E.a)(function(e) {
                return {
                    isLoggedIn: Object(I.d)(e)
                }
            }, function(e) {
                return Object(C.bindActionCreators)({
                    login: function() {
                        return Object(O.f)(N.a.ReportHoster)
                    },
                    showReportUserModal: function(e) {
                        var t = o.__rest(e, []);
                        return Object(T.d)(D.a, t)
                    }
                }, e)
            })(Object(l.f)(w)),
            x = n("7enT"),
            R = n("HW6M"),
            F = n("BwgW"),
            P = n("knr3"),
            U = n("OAwv"),
            M = n("eBiB"),
            A = n("ZVME"),
            V = n("CSlQ");
        ! function(e) {
            e.LoadStart = "loadstart", e.Error = "error", e.LoadedMetadata = "loadedmetadata", e.CanPlay = "canplay", e.Playing = "playing", e.Waiting = "waiting", e.Seeking = "seeking", e.Seeked = "seeked", e.Ended = "ended", e.DurationChange = "durationchange", e.TimeUpdate = "timeupdate", e.Play = "play", e.Pause = "pause", e.VolumeChange = "volumechange", e.RateChange = "ratechange"
        }(r || (r = {}));
        var j;
        ! function(e) {
            e.PlayerInit = "init", e.ContentShowing = "contentShowing", e.PlaybackStatistics = "playbackStatistics", e.ChansubRequired = "chansubRequired", e.VideoFailure = "videoFailure", e.Formats = "videoFormats", e.ABSStreamFormatChange = "abs_stream_format_change", e.FormatChanged = "videoFormatChanged", e.TimeChange = "timeChange", e.BufferChange = "bufferChange", e.SegmentChange = "segmentchange", e.UsherFailError = "usherFail", e.CaptionUpdate = "captions", e.SeekFailed = "seekfailed", e.VariantSwitchRequest = "variantSwitchRequested", e.ViewersChange = "viewerschange", e.StreamLoaded = "streamLoaded", e.VideoLoaded = "videoLoaded", e.VideoPaused = "videoPaused", e.QualityChange = "qualitychange", e.Online = "online", e.Offline = "offline", e.Restricted = "restricted", e.CastingChange = "castingchange", e.TheatreChange = "theatrechange", e.MidrollRequested = "midrollrequested", e.ManifestExtraInfo = "manifestExtraInfo", e.TransitionToCollectionVOD = "transitionToCollectionVod", e.TransitionToRecommendedVOD = "transitionToRecommendedVod", e.StitchedAdStart = "stitchedadstart", e.StichedAdEnd = "stitchedadend", e.PersistenPlayerToggle = "persistentPlayerEnableToggle", e.StatsUpdate = "statsupdate", e.PromptLoginModal = "prompt login modal", e.OpenStream = "openStream", e.PlayerReady = "ready", e.FullscreenChange = "fullscreenchange"
        }(j || (j = {}));
        n("4NZK");
        var H, B = n("Ryxq");
        ! function(e) {
            e.Embed = "embed", e.Feed = "feed", e.Frontpage = "frontpage", e.Site = "site"
        }(H || (H = {}));
        var z = {
                allowfullscreen: !0,
                autoplay: !0,
                branding: !1,
                channelInfo: !1,
                controls: !0,
                height: "100%",
                playsinline: !0,
                player: H.Site,
                showInfo: !1,
                showtheatre: !1,
                trackingProperties: {
                    client_app: "twilight"
                },
                width: "100%",
                oauth_token: ""
            },
            W = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.logger = c.i.withCategory("video-player"), n.checkPlayerDependencyStatus = function() {
                        i() ? (n.setState({
                            canInitializePlayer: !0
                        }), n.checkPlayerDependencyAnimationFrame = null) : n.checkPlayerDependencyAnimationFrame = requestAnimationFrame(n.checkPlayerDependencyStatus)
                    }, n.attachRef = function(e) {
                        return n.playerRef = e
                    }, n.onMetadataLoaded = function() {
                        var e = n.player && n.player.getSessionInfo();
                        e && (n.logger.debug("Got player session info from player instance", e), c.m.setVideoPlayerTrackingData({
                            broadcastID: e.broadcastId,
                            playSessionID: e.playSessionId
                        }))
                    }, n.onOpenStream = function() {
                        if (n.props.playerTypeOverride === H.Frontpage && n.player)
                            if (n.props.channelLogin) c.n.history.push("/" + n.props.channelLogin);
                            else if (n.props.vodID) {
                            var e = Math.floor(n.player.getCurrentTime());
                            c.n.history.push("/videos/" + n.props.vodID + "?t=" + Object(B.b)(e))
                        } else n.props.collectionID && c.n.history.push("/collections/" + n.props.collectionID)
                    }, n.onPlayerReady = function() {
                        n.player && (n.logger.debug("Ready"), n.props.latencyTracking.reportInteractive(), n.hasPlayed = !1, n.props.latencyTracking.reportCustomEvent(n.playerLoaded), n.setState({
                            playerInitialized: !0
                        }, function() {
                            return n.updatePlayerTrackingData(n.props.hostChannel)
                        }))
                    }, n.onPlayerPlay = function() {
                        n.logger.debug("Play"), n.reportPlayerPlayed(), n.lastPausedProp = !1, n.props.onPauseToggled && n.props.onPauseToggled(!1)
                    }, n.onPlayerPlaying = function() {
                        n.logger.debug("Playing"), n.lastPausedProp = !1, n.props.onPauseToggled && n.props.onPauseToggled(!1)
                    }, n.onPause = function() {
                        n.logger.debug("Pause"), n.lastPausedProp = !0, n.props.onPauseToggled && n.props.onPauseToggled(!0)
                    }, n.onStreamStatusOnline = function() {
                        n.props.onStreamStatusChange && n.props.onStreamStatusChange(j.Online)
                    }, n.onStreamStatusOffline = function() {
                        n.props.onStreamStatusChange && n.props.onStreamStatusChange(j.Offline)
                    }, n.onTheatreChange = function(e) {
                        e ? (n.logger.debug("Theatre Entered"), n.props.enableTheatreMode && !n.props.theatreModeEnabled && n.props.enableTheatreMode()) : (n.logger.debug("Theatre Exited"), n.props.disableTheatreMode && n.props.theatreModeEnabled && n.props.disableTheatreMode())
                    }, n.onFullScreenChange = function() {
                        n.player && (n.logger.debug("Fullscreen change", n.player.fullscreen), n.player.fullscreen !== n.state.isFullScreen && n.setState({
                            isFullScreen: n.player.fullscreen
                        }))
                    }, n.onSeek = function() {
                        n.props.onSeek && n.player && n.props.onSeek(n.player.getCurrentTime())
                    }, n.onTimeUpdate = function() {
                        n.props.onVideoTimeChange && n.player && n.props.onVideoTimeChange(n.player.getCurrentTime())
                    }, n.onTransitionToCollectionVod = function(e) {
                        if (n.props.onNavigationRequest) {
                            var t = {};
                            e.vodId && (t.videoID = Object(M.a)(e.vodId)), e.collectionId && (t.collectionID = e.collectionId), n.props.onNavigationRequest(t)
                        }
                    }, n.onTransitionToRecommendedVod = function(e) {
                        if (n.props.onNavigationRequest) {
                            var t = {};
                            e.vodId && (t.videoID = Object(M.a)(e.vodId)), n.props.onNavigationRequest(t)
                        }
                    }, n.onPersistentPlayerToggled = function() {
                        n.props.togglePersistentPlayer && n.props.togglePersistentPlayer()
                    }, n.updatePlayerTrackingData = function(e) {
                        if (n.state.playerInitialized && n.player) {
                            var t = c.m.getLastPageview();
                            t ? n.logger.debug("Tracking data updated.", {
                                pageviewProperties: t,
                                hostChannel: e
                            }) : n.logger.debug("pageviewProperties not found; only hosting status updated", {
                                pageviewProperties: t,
                                hostChannel: e
                            }), n.player.setTrackingProperties(o.__assign({}, t, {
                                host_channel: e
                            }))
                        }
                    }, n.updatePlayerType = function() {
                        var e = n.props.playerTypeOverride || z.player;
                        n.player && n.playerType !== e && (n.player.setPlayerType(e), n.playerType = e)
                    }, n.maybeRecordClip = function() {
                        n.player && n.state.playerInitialized && n.player.recordClip()
                    }, n.playerCreated = n.registerCreatedEvent(), n.playerLoaded = n.registerLoadedEvent(), n.playerPlayed = n.registerPlayedEvent(), n.state = {
                        canInitializePlayer: i(),
                        playerInitialized: !1,
                        isFullScreen: !1
                    }, n.playerType = t.playerTypeOverride || z.player, n.lastSetChannel = t.channelLogin, t.instanceRef && t.instanceRef(n), n
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    if (this.props.latencyTracking.reportCustomEvent(this.playerCreated), this.bindHotKeys(), this.state.canInitializePlayer ? this.initializePlayer() : this.checkPlayerDependencyAnimationFrame = window.requestAnimationFrame(this.checkPlayerDependencyStatus), c.m.eventEmitter.addListener(p.SpadeEventType.Pageview, function() {
                            return e.updatePlayerTrackingData(e.props.hostChannel)
                        }), window.__playerScriptChunk && !t.tagInjected) {
                        this.logger.debug("Loading player chunk after page loaded");
                        var n = document.createElement("script");
                        n.crossOrigin = "anonymous", n.src = window.__jqueryChunk, n.onload = function() {
                            var e = document.createElement("script");
                            e.async = !0, e.crossOrigin = "anonymous", e.src = window.__playerScriptChunk, document.body.appendChild(e)
                        }, document.body.appendChild(n);
                        var i = document.createElement("link");
                        i.href = window.__playerStyleChunk, i.media = "screen", i.rel = "stylesheet", i.type = "text/css", document.body.appendChild(i), t.tagInjected = !0
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    if (this.state.canInitializePlayer || !t.canInitializePlayer) {
                        if (t.canInitializePlayer && t.playerInitialized) {
                            if (this.updatePlayerTrackingData(e.hostChannel), this.updatePlayerType(), this.player && e.theatreModeEnabled !== this.player.getTheatre() && this.player.setTheatre(e.theatreModeEnabled), this.player && e.miniModeEnabled !== this.props.miniModeEnabled && this.player.setMiniPlayerMode(!!e.miniModeEnabled), this.player && e.paused !== this.lastPausedProp && (e.paused ? this.player.pause() : e.paused || this.player.play(), this.lastPausedProp = e.paused), this.player && e.channelLogin && e.channelLogin !== this.lastSetChannel) return this.logger.debug("Setting Channel: ", e.channelLogin), this.player.setChannel(e.channelLogin), this.lastSetChannel = e.channelLogin, void c.m.setVideoPlayerTrackingData({
                                vodID: void 0
                            });
                            var n = e.collectionID && this.props.collectionID !== e.collectionID,
                                i = e.vodID && this.props.vodID !== e.vodID;
                            if (n || i) {
                                var a = e.vodID ? Object(B.a)(e.vodID) : "";
                                if ("" !== a && c.m.setVideoPlayerTrackingData({
                                        vodID: e.vodID
                                    }), !this.player) return;
                                n || e.collectionID && i ? this.player.setCollection(e.collectionID, a, e.nextVideoOffset) : this.player.setVideo(a, e.nextVideoOffset)
                            } else void 0 !== e.nextVideoOffset && e.nextVideoOffset >= 0 && this.props.nextVideoOffset !== e.nextVideoOffset && this.player && this.player.setCurrentTime(e.nextVideoOffset)
                        }
                    } else this.initializePlayer()
                }, t.prototype.render = function() {
                    var e = R("video-player", {
                        "video-player--theatre": this.props.theatreModeEnabled,
                        "video-player--logged-in": this.props.isLoggedIn,
                        "video-player--fullscreen": this.state.isFullScreen
                    });
                    return s.createElement("div", {
                        className: R(e),
                        "data-test-selector": "video-player"
                    }, s.createElement("div", {
                        className: "video-player__container",
                        ref: this.attachRef
                    }))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.latencyTracking.reportInteractive(), this.unbindHotKeys(), this.checkPlayerDependencyAnimationFrame && cancelAnimationFrame(this.checkPlayerDependencyAnimationFrame), this.maybeDetachFromWindow(), this.props.onDestroy && this.props.onDestroy(), this.player && (c.m.eventEmitter.removeListener(p.SpadeEventType.Pageview, this.updatePlayerTrackingData), this.player.removeEventListener(j.PlayerReady, this.onPlayerReady), this.player.removeEventListener(j.Online, this.onStreamStatusOnline), this.player.removeEventListener(j.Offline, this.onStreamStatusOffline), this.player.removeEventListener(r.Ended, this.onStreamStatusOffline), this.player.removeEventListener(r.Play, this.onPlayerPlay), this.player.removeEventListener(r.Playing, this.onPlayerPlaying), this.player.removeEventListener(j.TheatreChange, this.onTheatreChange), this.player.removeEventListener(j.TransitionToCollectionVOD, this.onTransitionToCollectionVod), this.player.removeEventListener(j.FullscreenChange, this.onFullScreenChange), this.player.removeEventListener(r.Seeked, this.onSeek), this.player.removeEventListener(r.TimeUpdate, this.onTimeUpdate), this.player.removeEventListener(j.OpenStream, this.onOpenStream), this.player.removeEventListener(r.Pause, this.onPause), this.player.removeEventListener(j.PersistenPlayerToggle, this.onPersistentPlayerToggled), this.player.removeEventListener(r.LoadedMetadata, this.onMetadataLoaded), F.extensionService.unregisterPlayer(), this.player.destroy()), c.m.setVideoPlayerTrackingData({
                        vodID: void 0
                    })
                }, t.prototype.trackMiniPlayerAction = function(e, t) {
                    this.player && this.state.playerInitialized && this.player.trackMiniPlayerAction(e, t)
                }, t.prototype.initializePlayer = function() {
                    var e = o.__assign({}, z, {
                        showtheatre: !this.props.disableTheatreButton,
                        autoplay: !this.props.paused
                    });
                    this.props.playerTypeOverride && (e.player = this.props.playerTypeOverride, this.playerType = this.props.playerTypeOverride), this.props.channelLogin && (e.channel = this.props.channelLogin, this.lastSetChannel = this.props.channelLogin), this.props.collectionID && (e.collection = this.props.collectionID), this.props.vodID && (e.video = Object(B.a)(this.props.vodID), c.m.setVideoPlayerTrackingData({
                        vodID: this.props.vodID
                    })), this.props.nextVideoOffset && (e.time = Object(B.b)(this.props.nextVideoOffset)), this.lastPausedProp = this.props.paused, e.oauth_token = this.props.authToken || "", this.logger.debug("Initializing", e);
                    var t = new window.Twitch.Player(this.playerRef, e);
                    this.player = t, t.addEventListener(j.PlayerReady, this.onPlayerReady), t.addEventListener(j.Online, this.onStreamStatusOnline), t.addEventListener(j.Offline, this.onStreamStatusOffline), t.addEventListener(r.Ended, this.onStreamStatusOffline), t.addEventListener(r.Play, this.onPlayerPlay), t.addEventListener(r.Playing, this.onPlayerPlaying), t.addEventListener(r.Seeked, this.onSeek), t.addEventListener(r.TimeUpdate, this.onTimeUpdate), t.addEventListener(j.TheatreChange, this.onTheatreChange), t.addEventListener(j.FullscreenChange, this.onFullScreenChange), t.addEventListener(j.TransitionToCollectionVOD, this.onTransitionToCollectionVod), t.addEventListener(j.TransitionToRecommendedVOD, this.onTransitionToRecommendedVod), t.addEventListener(j.OpenStream, this.onOpenStream), t.addEventListener(r.Pause, this.onPause), t.addEventListener(j.PersistenPlayerToggle, this.onPersistentPlayerToggled), t.addEventListener(r.LoadedMetadata, this.onMetadataLoaded), F.extensionService.registerPlayer(this.player), this.props.onInit && this.props.onInit(t), this.maybeAttachToWindow(this.props)
                }, t.prototype.registerCreatedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 1e3,
                        group: A.a.Player,
                        key: A.b.PlayerCreated,
                        label: A.c.Created
                    })
                }, t.prototype.registerLoadedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 2500,
                        group: A.a.Player,
                        key: A.b.PlayerLoaded,
                        label: A.c.Init
                    })
                }, t.prototype.registerPlayedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 4e3,
                        group: A.a.Player,
                        key: A.b.PlayerPlayed,
                        label: A.c.FirstFrame
                    })
                }, t.prototype.reportPlayerPlayed = function() {
                    this.hasPlayed || (this.hasPlayed = !0, this.playerPlayed && this.props.latencyTracking.reportCustomEvent(this.playerPlayed))
                }, t.prototype.maybeAttachToWindow = function(e) {
                    U.parse(window.location.search).attachPlayer && e.attachToWindow && this.player && (window.player = this.player)
                }, t.prototype.maybeDetachFromWindow = function() {
                    window.player = void 0
                }, t.prototype.bindHotKeys = function() {
                    P.bind("alt+x", this.maybeRecordClip)
                }, t.prototype.unbindHotKeys = function() {
                    P.unbind("alt+x")
                }, t.tagInjected = !1, t
            }(s.Component),
            q = Object(V.c)("VideoPlayer")(W),
            G = Object(E.a)(function(e) {
                return {
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    isLoggedIn: Object(I.d)(e),
                    authToken: Object(I.a)(e)
                }
            }, function(e) {
                return Object(C.bindActionCreators)({
                    enableTheatreMode: x.o,
                    disableTheatreMode: x.n,
                    togglePersistentPlayer: x.t
                }, e)
            })(q);
        n.d(t, !1, function() {
            return v
        }), n.d(t, !1, function() {
            return b
        }), n.d(t, !1, function() {
            return y
        }), n.d(t, !1, function() {
            return k
        }), n.d(t, !1, function() {
            return S
        }), n.d(t, !1, function() {
            return _
        }), n.d(t, !1, function() {
            return w
        }), n.d(t, "a", function() {
            return L
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return H
        }), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return G
        }), n.d(t, "d", function() {
            return a
        })
    },
    gIPD: function(e, t, n) {
        e.exports = n.p + "assets/friend_requests-aec9595d7e19764bc23d982c8c0f43d9.png"
    },
    h4Qz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "participants"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "spamInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "lastMarkedNotSpamAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "likelihood"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isMuted"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isArchived"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 449
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_WhisperThread($id: ID! $cursor: Cursor) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nparticipants {\nid\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\nisMuted\nisArchived\nmessages(first: 20 after: $cursor) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\nunreadMessagesCount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    h9f9: function(e, t) {},
    hdYS: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("+xm8"),
            o = n("f2i/"),
            s = n("Aj/L"),
            l = n("TToO"),
            c = n("U7vG"),
            u = n("6sO2"),
            d = n("+Znq"),
            p = n("7vx8"),
            m = n("oIkB"),
            h = n("2BvQ"),
            g = n("xrVp"),
            f = n("YugT"),
            v = {
                Channel: "channel"
            },
            b = n("vH/s"),
            y = n("CSlQ"),
            k = n("Odds"),
            S = n("VNvG"),
            _ = (n("3ydF"), n("SUA7")),
            w = n("x4k6"),
            E = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isFollowing: !1,
                        showDropdown: !1,
                        disableNotifications: !0
                    }, t.userDataLoaded = function() {
                        return t.props.data && !t.props.data.loading && !t.props.data.error && t.props.data.user
                    }, t.toggleFollowing = function() {
                        var e;
                        t.state.isFollowing ? (t.unfollowUser(), e = b.SpadeEventType.Unfollow) : (t.followUser(), e = b.SpadeEventType.Follow), t.props.data && function(e, t) {
                            l.__awaiter(this, void 0, void 0, function() {
                                var n, i, a, r, o, s, c, d, p, m;
                                return l.__generator(this, function(l) {
                                    switch (l.label) {
                                        case 0:
                                            if (n = null, i = null, a = null, r = null, o = null, !t.channelID) return [3, 5];
                                            l.label = 1;
                                        case 1:
                                            return l.trys.push([1, 3, , 4]), [4, u.n.apollo.client.query({
                                                query: f,
                                                variables: {
                                                    id: t.channelID
                                                }
                                            })];
                                        case 2:
                                            return r = l.sent(), [3, 4];
                                        case 3:
                                            return c = l.sent(), u.i.error(c, "Failed to make query for channel info in FollowEvent reporting.", {
                                                channelID: t.channelID
                                            }), [3, 4];
                                        case 4:
                                            (a = r && r.data && r.data.user) ? o = a.hosting.stream && a.hosting.stream.game ? a.hosting.stream.game.name : a.stream && a.stream.game && a.stream.game.name: u.i.error(new Error("GraphQL empty response"), "Query for channel info in FollowEvent reporting return no data.", {
                                                channelID: t.channelID
                                            }), l.label = 5;
                                        case 5:
                                            if (!(d = u.m.getVideoPlayerTrackingData().vodID)) return [3, 10];
                                            l.label = 6;
                                        case 6:
                                            return l.trys.push([6, 8, , 9]), [4, u.n.apollo.client.query({
                                                query: h,
                                                variables: {
                                                    id: d
                                                }
                                            })];
                                        case 7:
                                            return n = l.sent(), [3, 9];
                                        case 8:
                                            return p = l.sent(), u.i.error(p, "Failed to make query for VOd info in FollowEvent reporting.", {
                                                currentVODID: d
                                            }), [3, 9];
                                        case 9:
                                            (i = n && n.data && n.data.video) ? s = Object(g.a)(i.broadcastType): (s = null, u.i.error(new Error("GraphQL empty response"), "Query for video info in FollowEvent reporting return no data.", {
                                                currentVODID: d
                                            })), l.label = 10;
                                        case 10:
                                            return m = {
                                                channel: t.channelLogin,
                                                channel_id: t.channelID,
                                                channel_game: o,
                                                cta_visible: u.m.getVideoPlayerTrackingData().followCTAVisible,
                                                host_channel: t.hostChannelLogin,
                                                host_channel_id: t.hostChannelID,
                                                game: t.game,
                                                partner: a ? a.isPartner : null,
                                                src: t.src,
                                                vod_id: d,
                                                vod_type: s
                                            }, u.m.track(e, m), [2]
                                    }
                                })
                            })
                        }(e, {
                            channelLogin: t.props.data.user.login,
                            channelID: t.props.data.user.id,
                            hostChannelLogin: t.props.hostChannelLogin,
                            hostChannelID: t.props.hostChannelID,
                            src: v.Channel
                        }), t.setState(function(e) {
                            return {
                                isFollowing: !e.isFollowing,
                                disableNotifications: !1
                            }
                        })
                    }, t.followUser = function() {
                        if (t.props.followUser && t.props.data) {
                            t.setState({
                                showDropdown: !0
                            });
                            var e = l.__assign({}, Object(m.a)({
                                disableNotifications: !1,
                                targetID: t.props.data.user.id
                            }), {
                                optimisticResponse: {
                                    followUser: {
                                        __typename: "FollowUserPayload",
                                        follow: {
                                            disableNotifications: !1,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.followUser(e).then(function(e) {
                                Object(m.d)(w, {
                                    login: t.props.channelLogin
                                }, function(t) {
                                    return t.user.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications, t
                                })
                            })
                        }
                    }, t.unfollowUser = function() {
                        if (t.props.unfollowUser && t.props.data) {
                            var e = l.__assign({}, Object(m.a)({
                                targetID: t.props.data.user.id
                            }), {
                                optimisticResponse: {
                                    unfollowUser: {
                                        __typename: "UnfollowUserPayload",
                                        follow: {
                                            disableNotifications: null,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.unfollowUser(e).then(function() {
                                Object(m.d)(w, {
                                    login: t.props.channelLogin
                                }, function(e) {
                                    return e.user.self.follower.disableNotifications = null, e
                                })
                            })
                        }
                    }, t.toggleNotificationsEnabled = function() {
                        if (t.props.followUser && t.props.data) {
                            var e = l.__assign({}, Object(m.a)({
                                disableNotifications: !t.state.disableNotifications,
                                targetID: t.props.data.user.id
                            }), {
                                optimisticResponse: {
                                    followUser: {
                                        __typename: "FollowUserPayload",
                                        follow: {
                                            disableNotifications: !t.state.disableNotifications,
                                            __typename: "Follow"
                                        }
                                    }
                                }
                            });
                            t.props.followUser(e).then(function(e) {
                                Object(m.d)(w, {
                                    login: t.props.channelLogin
                                }, function(t) {
                                    return t.user.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications, t
                                })
                            }), t.setState(function(e) {
                                return {
                                    disableNotifications: !e.disableNotifications
                                }
                            })
                        }
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.userDataLoaded() || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !e.data || e.data.loading || e.data.error || this.setState({
                        isFollowing: e.data.user.self && null !== e.data.user.self.follower.disableNotifications,
                        disableNotifications: e.data.user.self && e.data.user.self.follower.disableNotifications
                    })
                }, t.prototype.render = function() {
                    var e = this.props.isHostedFollow && this.props.channelName ? Object(u.d)("Follow {username}", {
                        username: this.props.channelName
                    }, "FollowButton") : Object(u.d)("Follow", "FollowButton");
                    if (!this.props.isLoggedIn) return c.createElement(k.u, l.__assign({
                        tabIndex: this.props.tabIndex,
                        ariaLabel: e,
                        icon: this.props.hideIcon ? void 0 : k._11.Heart,
                        onClick: this.props.login,
                        blurAfterClick: this.props.blurAfterClick,
                        "data-a-target": "follow-button"
                    }, Object(k._40)(this.props), {
                        size: this.props.size
                    }), e);
                    if (this.props.showLoadingPlaceholder && (!this.props.data || this.props.data.loading)) return c.createElement(k._3, {
                        width: 70,
                        height: 30
                    });
                    if (!this.props.followUser || !this.props.unfollowUser || !this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user || this.props.data.user.id === this.props.data.currentUser.id) return null;
                    var t = this.state.disableNotifications ? Object(u.d)("Opt in to notifications to receive updates on this channel's activity, including when they go live.", "FollowButton") : Object(u.d)("You will be notified on this channel's activity, including when they go live.", "FollowButton");
                    if (!this.state.isFollowing) return c.createElement(k.u, l.__assign({
                        blurAfterClick: this.props.blurAfterClick,
                        ariaLabel: e,
                        size: this.props.size,
                        "data-a-target": "follow-button",
                        "data-test-selector": "follow-button",
                        icon: this.props.hideIcon ? void 0 : k._11.Heart,
                        onClick: this.toggleFollowing
                    }, Object(k._40)(this.props), {
                        tabIndex: this.props.tabIndex
                    }), e);
                    if (this.props.hideWhenFollowing) return null;
                    var n = this.props.balloonDirection ? this.props.balloonDirection : k.q.BottomRight;
                    return c.createElement(k.V, {
                        display: k.H.Flex,
                        className: "follow-btn"
                    }, c.createElement(k.V, null, c.createElement(k.v, {
                        ariaLabel: Object(u.d)("Unfollow", "FollowButton"),
                        "data-a-target": "unfollow-button",
                        "data-test-selector": "unfollow-button",
                        icon: k._11.Heart,
                        onClick: this.toggleFollowing,
                        statusAlertIcon: k._11.Unheart
                    })), c.createElement(d.a, {
                        display: k.H.InlineFlex,
                        openByDefault: this.state.showDropdown
                    }, c.createElement("button", {
                        tabIndex: this.props.tabIndex,
                        "aria-label": Object(u.d)("Dropdown", "FollowButton"),
                        className: "follow-btn__dropdown-toggle",
                        "data-a-target": "follow-dropdown-toggle"
                    }, c.createElement(k.V, {
                        justifyContent: k.U.Center,
                        display: k.H.Flex,
                        alignItems: k.c.Stretch,
                        fullHeight: !0
                    }, c.createElement(k._10, {
                        asset: k._11.GlyphArrDown
                    }))), c.createElement(k.p, {
                        size: k.r.Small,
                        direction: n,
                        "data-a-target": "follow-notifications-balloon"
                    }, c.createElement(k._19, {
                        color: k.F.Base,
                        display: k.H.Flex,
                        padding: 1
                    }, c.createElement(k.V, {
                        display: k.H.Flex,
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement(k._23, {
                        type: k._28.H6
                    }, Object(u.d)("You are following {followingName}", {
                        followingName: this.props.data.user.displayName
                    }, "FollowButton"))), c.createElement(k.V, {
                        display: k.H.Flex,
                        flexWrap: k.K.NoWrap,
                        padding: {
                            bottom: 1
                        }
                    }, c.createElement(k.V, {
                        display: k.H.Flex,
                        padding: {
                            right: 2
                        }
                    }, c.createElement("span", null, c.createElement(k._23, {
                        type: k._28.H6
                    }, Object(u.d)("Notifications", "FollowButton")))), c.createElement(k.V, {
                        display: k.H.Flex,
                        flexShrink: 0
                    }, c.createElement(k._30, {
                        onChange: this.toggleNotificationsEnabled,
                        checked: !this.state.disableNotifications,
                        "data-a-target": "notifications-toggle"
                    }))), c.createElement(k.V, {
                        display: k.H.InlineFlex,
                        padding: {
                            bottom: 1
                        }
                    }, c.createElement(k._23, {
                        type: k._28.Span,
                        color: k.F.Alt2
                    }, t))))))
                }, t.prototype.reportInteractive = function() {
                    this.props.isLoggedIn ? this.props.channelLogin && !this.userDataLoaded() || this.props.latencyTracking.reportInteractive() : this.props.latencyTracking.reportInteractive()
                }, t = l.__decorate([Object(p.a)(w, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.isLoggedIn || !e.channelLogin
                    }
                }), Object(p.a)(S, {
                    name: "followUser"
                }), Object(p.a)(_, {
                    name: "unfollowUser"
                }), Object(y.c)("FollowButton")], t)
            }(c.Component),
            C = Object(i.a)(function(e) {
                return {
                    isLoggedIn: Object(s.d)(e)
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    login: function() {
                        return Object(o.f)(r.a.FollowButton)
                    }
                }, e)
            })(E);
        n.d(t, "a", function() {
            return C
        })
    },
    hfrE: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object.keys(e).reduce(function(t, n) {
                var i = e[n];
                return i.muted || i.archived ? t : t + i.unreadMessagesCount
            }, 0)
        }

        function a(e) {
            return e.type === C.c.WhisperSent
        }

        function r(e) {
            return e.type === C.c.WhisperReceived
        }
        var o = n("TToO"),
            s = n("U7vG"),
            l = n("BC6Q"),
            c = n("RxMT"),
            u = n("eXld"),
            d = n("LiYP"),
            p = n("RH2O"),
            m = n("2KeS"),
            h = n("7enT"),
            g = n("Aj/L"),
            f = Object(p.a)(function(e) {
                return {
                    collapsed: !e.ui.sideNavExpanded,
                    isLoggedIn: Object(g.d)(e),
                    firstPageLoaded: e.session.firstPageLoaded
                }
            }, function(e) {
                return Object(m.bindActionCreators)({
                    collapseSideNav: h.m,
                    expandSideNav: h.q
                }, e)
            })(d.c),
            v = n("H4lr"),
            b = n("2aoH"),
            y = n("/UH7"),
            k = n("uXDg"),
            S = n("QPF3"),
            _ = n("HW6M"),
            w = n("7vx8"),
            E = n("WIs4"),
            C = n("C8Io"),
            N = n("oIkB"),
            T = n("HZww"),
            O = n("6sO2"),
            I = n("rCmJ"),
            D = n("zCIC"),
            L = n("+Znq"),
            x = n("HM6l"),
            R = n("5LoI"),
            F = n("MAZT"),
            P = n("hvzu"),
            U = n("Odds"),
            M = (n("zC6J"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleThreadClick = function() {
                        t.props.selectThread(t.props.threadID)
                    }, t.handleArchiveClick = function(e) {
                        e.stopPropagation(), t.props.archiveThread(t.props.threadID)
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.user;
                    if (!e) return this.renderError();
                    var t = this.props.lastMessage ? Object(P.a)(this.props.lastMessage.content.content, this.props.lastMessage.content.emotes, this.props.lastMessage.editedAt) : null,
                        n = this.props.unreadMessageCount,
                        i = e.displayName || e.login;
                    return s.createElement("div", {
                        onClick: this.handleThreadClick
                    }, s.createElement(U._19, {
                        className: "whispers-list-item",
                        borderBottom: !0,
                        padding: 1,
                        display: U.H.Flex,
                        flexDirection: U.J.Row,
                        flexWrap: U.K.NoWrap,
                        fullWidth: !0,
                        alignItems: U.c.Center
                    }, s.createElement(U.V, {
                        className: "whispers-list-item__avatar",
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, s.createElement(U.l, {
                        size: 30,
                        imageAlt: Object(O.d)("{interlocutorName}'s Avatar", {
                            interlocutorName: i
                        }, "WhisperThreadListItem"),
                        imageSrc: e.profileImageURL
                    })), s.createElement(U.V, {
                        fullWidth: !0,
                        display: U.H.Inline
                    }, s.createElement(U._23, {
                        fontSize: U.L.Size5,
                        bold: !0
                    }, i), s.createElement(U.V, {
                        className: "whispers-list-item__last-message",
                        ellipsis: !0
                    }, t)), s.createElement(U.V, {
                        className: "whispers-list-item__unread-count",
                        margin: {
                            right: 1
                        },
                        textAlign: U._24.Right
                    }, s.createElement(U._23, {
                        bold: !0
                    }, n > 0 && !this.props.muted ? n : null), this.props.muted && s.createElement(U.V, {
                        display: U.H.Flex,
                        alignItems: U.c.Center,
                        justifyContent: U.U.Center
                    }, s.createElement(U._10, {
                        type: U._12.Alt2,
                        asset: U._11.WhisperMuted
                    }))), s.createElement("div", {
                        className: "whispers-list-item__archive"
                    }, s.createElement(U.v, {
                        ariaLabel: Object(O.d)("Archive Thread", "WhisperThreadListItem"),
                        tabIndex: -1,
                        icon: U._11.Close,
                        "data-a-target": "whispers-list-item__archive-button",
                        onClick: this.handleArchiveClick,
                        "data-click-out-id": "whispers-list-item__archive-button"
                    }))))
                }, t.prototype.renderError = function() {
                    return s.createElement(U.V, null, s.createElement("p", null, Object(O.d)("Sorry, something went wrong fetching this conversation.", "WhisperThreadListItem")))
                }, t
            }(s.Component)),
            A = n("7miU"),
            V = n("n9f8"),
            j = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.markAllWhispersAsRead = function() {
                        var e = Object(N.a)({
                            markAllAsRead: !0
                        });
                        n.props.markAllWhispersAsRead && (Object(A.i)(), n.props.markAllWhispersAsRead(e)), n.props.onMarkAllMessagesRead && n.props.onMarkAllMessagesRead()
                    }, n.toggleDoNotDisturb = function() {
                        n.state.doNotDisturb ? (O.l.set("whisperDoNotDisturb", !1), Object(A.f)(), n.setState({
                            doNotDisturb: !1
                        })) : (O.l.set("whisperDoNotDisturb", !0), Object(A.g)(), n.setState({
                            doNotDisturb: !0
                        }))
                    }, n.state = {
                        doNotDisturb: O.l.get("whisperDoNotDisturb", !1)
                    }, n
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.doNotDisturb ? Object(O.d)("Disable Do Not Disturb", "ThreadsBoxSettings") : Object(O.d)("Enable Do Not Disturb", "ThreadsBoxSettings"),
                        t = Object(O.d)("Mark All Whispers as Read", "ThreadsBoxSettings");
                    return s.createElement(U.V, {
                        className: "threads-box-settings",
                        display: U.H.Flex,
                        flexDirection: U.J.Column,
                        margin: 1
                    }, s.createElement(U.T, {
                        ariaLabel: e,
                        onClick: this.toggleDoNotDisturb
                    }, s.createElement(U.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e)), s.createElement(U.T, {
                        ariaLabel: t,
                        onClick: this.markAllWhispersAsRead
                    }, s.createElement(U.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)))
                }, t = o.__decorate([Object(w.a)(V, {
                    name: "markAllWhispersAsRead"
                })], t)
            }(s.Component),
            H = n("m4HT"),
            B = (n("U8pM"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onMarkAllMessagesRead = function() {
                        n.settingsMenu.toggleBalloon(!1)
                    }, n.renderUserSearchResult = function(e, t) {
                        var i = Object(O.d)("{username}'s avatar", {
                            username: e.name
                        }, "ThreadsBox");
                        return s.createElement("div", {
                            key: "searchResult:" + e.objectID,
                            onClick: n.handleUserSearchResultClick(e, t)
                        }, s.createElement(U._19, {
                            className: "whispers-list-item",
                            borderBottom: !0,
                            padding: 1,
                            display: U.H.Flex,
                            flexDirection: U.J.Row,
                            flexWrap: U.K.NoWrap,
                            fullWidth: !0,
                            alignItems: U.c.Center
                        }, s.createElement(U.V, {
                            margin: {
                                right: .5
                            },
                            flexShrink: 0
                        }, s.createElement(U.l, {
                            size: 30,
                            imageSrc: e.profile_image,
                            imageAlt: i
                        })), s.createElement(U.V, {
                            fullWidth: !0,
                            display: U.H.Flex,
                            flexDirection: U.J.Column
                        }, s.createElement(U._23, {
                            fontSize: U.L.Size5,
                            bold: !0
                        }, e.login), s.createElement(U.V, null, " "))))
                    }, n.saveSettingsMenuRef = function(e) {
                        return n.settingsMenu = e
                    }, n.handleConversationsClick = function() {
                        n.setState(function(e) {
                            return {
                                open: !e.open
                            }
                        })
                    }, n.selectThread = function(e) {
                        n.handleClose(), n.clearSearchText(), n.props.selectThread(e)
                    }, n.handleClose = function() {
                        n.setState({
                            open: !1
                        })
                    }, n.clearSearchText = function() {
                        n.setState({
                            searchText: "",
                            searching: !1
                        })
                    }, n.onSearchInputChange = function(e) {
                        return o.__awaiter(n, void 0, void 0, function() {
                            var t, n = this;
                            return o.__generator(this, function(i) {
                                return t = e.currentTarget.value, clearTimeout(this.inputTimeout), t && 0 !== t.length ? (this.setState({
                                    searchText: t,
                                    searching: !0
                                }), this.inputTimeout = setTimeout(function() {
                                    n.search(n.state.searchText)
                                }, 200), [2]) : (this.inputTimeout = 0, this.clearSearchText(), [2])
                            })
                        })
                    }, n.handleUserSearchResultClick = function(e, t) {
                        return function() {
                            var i = e.objectID;
                            if (null !== n.props.currentUserID && i !== n.props.currentUserID) {
                                n.handleClose(), n.clearSearchText();
                                var a = Object(H.a)(n.props.currentUserID, i);
                                Object(A.e)({
                                    threadID: a,
                                    targetUserlogin: e.login,
                                    searchResultRank: t
                                }), Object(A.b)({
                                    searchResultRank: t,
                                    searchQuery: n.state.searchText,
                                    isConversation: !1
                                }), n.props.selectThread(a)
                            }
                        }
                    }, n.filterExistingThreads = function(e) {
                        var t = e.toLowerCase();
                        return n.props.orderedThreadIDs.filter(function(e) {
                            var i = n.props.threadsByID[e].participants.find(function(e) {
                                return e.id !== n.props.currentUserID
                            });
                            return !(!i || !i.displayName) && i.displayName.toLowerCase().indexOf(t) >= 0
                        })
                    }, n.searchClient = new F.a(O.a.algoliaApplicationID, O.a.algoliaAPIKey), n.state = {
                        open: !1,
                        searchText: "",
                        searching: !1
                    }, n
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(I.a, {
                        onClickOut: this.handleClose
                    }, s.createElement(U._19, {
                        className: "whispers-threads-box__container " + (this.state.open ? "whispers-threads-box__container--open" : ""),
                        display: U.H.Flex,
                        flexDirection: U.J.Column,
                        flexWrap: U.K.NoWrap,
                        border: !0,
                        background: U.m.Base,
                        position: U._4.Absolute,
                        attachBottom: !0,
                        attachRight: !0,
                        "data-click-out-id": "threads-box",
                        "data-a-target": "threads-box-" + (this.state.open ? "open" : "closed")
                    }, this.renderHeader(), this.renderList(), this.renderFooter()))
                }, t.prototype.renderOpenCloseButton = function() {
                    var e = null;
                    if (this.props.unreadCount > 0) {
                        var t = this.props.unreadCount > 99 ? "99+" : this.props.unreadCount.toString();
                        e = s.createElement(U.V, {
                            className: "whispers-threads-box__unread",
                            margin: {
                                y: .5
                            }
                        }, s.createElement("span", {
                            className: "whispers-threads-box__unread--count",
                            "data-a-target": "whisper-unreads"
                        }, t))
                    }
                    return s.createElement(U._19, {
                        className: "whispers-threads-box__open-close",
                        position: U._4.Relative,
                        background: U.m.Alt2,
                        display: U.H.Flex,
                        alignItems: U.c.Center,
                        justifyContent: U.U.Center
                    }, e, s.createElement(U.v, {
                        ariaLabel: Object(O.d)("Close Threads", "WhisperThreadsBox"),
                        icon: U._11.Conversations,
                        onClick: this.handleConversationsClick,
                        "data-a-target": "whisper-box-button"
                    }))
                }, t.prototype.renderList = function() {
                    var e = this;
                    if (!this.state.open) return null;
                    var t, n = null;
                    "" !== this.state.searchText && (n = s.createElement(U._19, {
                        key: "otherPeopleDivider",
                        borderBottom: !0,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, Object(O.d)("Other People", "WhispersThreadBox")));
                    var i = null;
                    if (this.state.searching ? i = s.createElement(U.V, {
                            display: U.H.Flex,
                            flexDirection: U.J.Column,
                            margin: {
                                top: 4
                            },
                            alignItems: U.c.Center
                        }, s.createElement(U.Z, {
                            delay: 0
                        })) : this.state.searchResults && this.state.searchResults.users && "" !== this.state.searchText && (i = this.state.searchResults.users.hits.filter(function(t) {
                            return !e.props.threadsByID[t.objectID]
                        }).map(this.renderUserSearchResult)), this.props.error) t = s.createElement(U.V, {
                        margin: {
                            x: "auto"
                        },
                        display: U.H.Flex,
                        justifyContent: U.U.Center,
                        alignItems: U.c.Center,
                        fullHeight: !0
                    }, s.createElement(U._23, {
                        color: U.F.Error
                    }, Object(O.d)("There was a problem loading whispers.", "WhisperThreadsBox")));
                    else if (this.props.loading) t = s.createElement(U.Z, null);
                    else {
                        var a = this.props.orderedThreadIDs;
                        "" !== this.state.searchText && (a = this.filterExistingThreads(this.state.searchText)), t = a.filter(function(t) {
                            return e.props.threadsByID[t] && !e.props.threadsByID[t].archived
                        }).map(function(t) {
                            var n = e.props.threadsByID[t];
                            return s.createElement(M, {
                                key: "whisperThread:" + n.id,
                                user: n.participants.find(function(t) {
                                    return t.id !== e.props.currentUserID
                                }),
                                threadID: n.id,
                                lastMessage: n.lastMessage,
                                archiveThread: e.props.archiveThread,
                                selectThread: e.selectThread,
                                unreadMessageCount: n.unreadMessagesCount,
                                muted: n.muted
                            })
                        })
                    }
                    return s.createElement(D.b, {
                        suppressScrollX: !0
                    }, s.createElement(U.V, null, t, n, i, s.createElement(D.a, {
                        enabled: this.state.open,
                        loadMore: this.props.loadMore,
                        pixelThreshold: 200
                    })))
                }, t.prototype.renderHeader = function() {
                    return this.state.open ? s.createElement(U._19, {
                        className: "whispers-threads-box__header",
                        "data-a-target": "whispers-threads-box__header",
                        alignItems: U.c.Center,
                        background: U.m.Alt,
                        borderBottom: !0,
                        color: U.F.Base,
                        display: U.H.Flex,
                        flexDirection: U.J.Row,
                        flexGrow: 0,
                        flexShrink: 0,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        "data-click-hide-id": "threads-box-header"
                    }, s.createElement(U.V, {
                        flexGrow: 1,
                        display: U.H.Flex
                    }, s.createElement(U._23, {
                        type: U._28.Span,
                        bold: !0
                    }, Object(O.d)("Whispers", "WhisperThreadsBox"))), s.createElement(L.a, {
                        ref: this.saveSettingsMenuRef
                    }, s.createElement(U.v, {
                        ariaLabel: Object(O.d)("Settings", "WhisperThreadsBox"),
                        icon: U._11.Gear,
                        "data-a-target": "whisper-settings-button"
                    }), s.createElement(U.p, {
                        size: U.r.Small,
                        direction: U.q.BottomRight,
                        offsetX: "0.5rem"
                    }, s.createElement(j, {
                        onMarkAllMessagesRead: this.onMarkAllMessagesRead
                    }))), s.createElement(U.v, {
                        ariaLabel: Object(O.d)("Minimize", "WhisperThreadsBox"),
                        icon: U._11.Minimize,
                        onClick: this.handleClose,
                        "data-a-target": "whisper-close-button"
                    })) : null
                }, t.prototype.renderFooter = function() {
                    return this.state.open ? s.createElement(U._19, {
                        display: U.H.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        alignItems: U.c.Center,
                        borderTop: !0,
                        background: U.m.Alt
                    }, s.createElement(U.V, {
                        flexGrow: 1,
                        padding: {
                            top: .5,
                            bottom: .5,
                            left: 1
                        }
                    }, s.createElement(U._13, {
                        onChange: this.onSearchInputChange,
                        value: this.state.searchText,
                        placeholder: Object(O.d)("Search for People", "WhisperThreadsBox"),
                        id: "threads-box-filter",
                        autoFocus: !0,
                        "data-a-target": "whisper-search-input"
                    })), this.renderOpenCloseButton()) : this.renderOpenCloseButton()
                }, t.prototype.search = function(e) {
                    return o.__awaiter(this, void 0, void 0, function() {
                        var t;
                        return o.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return e ? [4, this.searchClient.queryForType(R.a.Users, e, x.a())] : [2];
                                case 1:
                                    return t = n.sent(), this.setState({
                                        searchResults: t,
                                        searching: !1
                                    }), [2]
                            }
                        })
                    })
                }, t
            }(s.Component)),
            z = n("1Mw/"),
            W = Object(p.a)(function(e) {
                return {
                    openedThreads: e.whispers.display.openedIDs.map(function(t) {
                        return Object(y.b)(e, t)
                    }),
                    focusedThreadID: e.whispers.display.focusedID
                }
            }, function(e) {
                return {
                    onBlockThread: function(t) {
                        return e(k.h(t, Object(S.a)()))
                    },
                    onCloseThread: function(t) {
                        return e(k.h(t, Object(S.a)()))
                    },
                    onCollapseThread: function(t) {
                        return e(k.i(t, Object(S.a)()))
                    },
                    onExpandThread: function(t) {
                        return e(k.j(t, Object(S.a)()))
                    },
                    onFocusThread: function(t) {
                        return e(k.k(t, Object(S.a)()))
                    },
                    onUnfocusThread: function(t) {
                        return e(k.n(t, Object(S.a)()))
                    },
                    onResizeContent: function() {
                        return e(k.m(Object(S.a)()))
                    }
                }
            })(z.a),
            q = function(e) {
                for (var t = {}, n = 0, i = e; n < i.length; n++) {
                    var a = i[n];
                    t[a.id] = o.__assign({}, G(a))
                }
                return t
            },
            G = function(e) {
                return {
                    id: e.id,
                    messageHistory: e.messages.edges.map(function(e) {
                        return e.node
                    }).slice(0, -1),
                    lastMessage: e.messages.edges.map(function(e) {
                        return e.node
                    }).find(function(e) {
                        return !e.deletedAt
                    }) || null,
                    spamInfo: e.spamInfo,
                    participants: e.participants,
                    muted: e.isMuted,
                    archived: e.isArchived,
                    unreadMessagesCount: e.unreadMessagesCount
                }
            },
            Q = n("9RMu"),
            K = n("DCOT"),
            $ = n("qpaC"),
            Z = (n("n7G4"), n("6Vcl")),
            Y = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.archiveThread = function(e) {
                        if (n.state.threadsByID[e]) {
                            var t = o.__assign({}, Object(N.a)({
                                threadID: e,
                                isArchived: !0
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            __typename: "WhisperThread",
                                            id: e,
                                            isArchived: !0
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                            n.props.archiveThread && (n.props.closeThread(e), n.props.data.currentUser && Object(A.a)(e), n.props.archiveThread(t))
                        }
                    }, n.selectThread = function(e) {
                        n.props.openThread({
                            threadID: e,
                            collapsed: !1
                        })
                    }, n.loadMore = function() {
                        return o.__awaiter(n, void 0, void 0, function() {
                            return o.__generator(this, function(e) {
                                return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.handleThreadDataReport = function(e, t) {
                        n.state.threadsByID[e] || Object(N.d)(Z, {
                            cursor: null
                        }, function(e) {
                            return e.currentUser && e.currentUser.whisperThreads.edges.unshift({
                                cursor: "0",
                                node: o.__assign({}, t, {
                                    isArchived: !1
                                }),
                                __typename: "WhisperThreadEdge"
                            }), e
                        });
                        var a = o.__assign({}, n.state.threadsByID[e]);
                        t.messages && (a.messageHistory = t.messages.edges.map(function(e) {
                            return e.node
                        }).slice(0, -1)), !1 !== t.isMuted && !0 !== t.isMuted || (a.muted = t.isMuted);
                        var r = o.__assign({}, n.state.threadsByID, (s = {}, s[e] = a, s));
                        n.setState({
                            threadsByID: r,
                            unreadCount: i(r)
                        });
                        var s
                    };
                    var a = n.props.data.currentUser && q(n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                        return e.node
                    })) || {};
                    return n.state = {
                        error: !!n.props.data.error,
                        orderedThreadIDs: n.props.data.currentUser && n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node.id
                        }) || [],
                        threadsByID: a,
                        unreadCount: i(a)
                    }, n
                }
                return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data.error) this.setState({
                        error: !!e.data.error
                    });
                    else if (!e.data.loading && e.data.currentUser) {
                        var t = q(e.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node
                        }));
                        this.setState({
                            threadsByID: t,
                            orderedThreadIDs: e.data.currentUser.whisperThreads.edges.map(function(e) {
                                return e.node.id
                            }),
                            unreadCount: i(t)
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.props.data.currentUser) return null;
                    var e = _({
                        whispers: !0,
                        "whispers--theatre-mode": this.props.theatreModeEnabled,
                        "whispers--right-column-expanded": this.props.rightColumnExpanded
                    });
                    return s.createElement(U.V, {
                        className: e,
                        position: U._4.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        margin: {
                            right: 1
                        }
                    }, s.createElement(W, {
                        currentUserID: this.props.data.currentUser.id,
                        reportThreadData: this.handleThreadDataReport,
                        archiveThread: this.archiveThread
                    }), s.createElement(B, {
                        currentUserID: this.props.data.currentUser.id,
                        error: this.state.error,
                        loading: this.props.data.loading,
                        unreadCount: this.state.unreadCount,
                        orderedThreadIDs: this.state.orderedThreadIDs,
                        threadsByID: this.state.threadsByID,
                        selectThread: this.selectThread,
                        archiveThread: this.archiveThread,
                        loadMore: this.loadMore
                    }))
                }, t = o.__decorate([Object(w.a)(Z, {
                    props: function(e) {
                        return o.__assign({}, e, {
                            loadMore: function() {
                                return e.data.fetchMore({
                                    query: Z,
                                    variables: o.__assign({}, e.data.variables, {
                                        cursor: e.data.currentUser && e.data.currentUser.whisperThreads.edges.length > 0 ? e.data.currentUser.whisperThreads.edges[e.data.currentUser.whisperThreads.edges.length - 1].cursor : null
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult;
                                        return n.currentUser ? e.currentUser ? {
                                            currentUser: o.__assign({}, n.currentUser, {
                                                whisperThreads: o.__assign({}, n.currentUser.whisperThreads, {
                                                    edges: Object(N.b)(e.currentUser.whisperThreads.edges, n.currentUser.whisperThreads.edges)
                                                })
                                            })
                                        } : {
                                            currentUser: n.currentUser
                                        } : {
                                            currentUser: null
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(w.a)($, {
                    name: "archiveThread"
                }), Object(E.a)(function(e) {
                    return {
                        query: Z,
                        types: [C.c.WhisperDeleted, C.c.WhisperEdited, C.c.WhisperSent, C.c.WhisperAllThreadsUpdate, C.c.WhisperReceived, C.c.WhisperThreadUpdate],
                        variables: o.__assign({}, e.data.variables),
                        skip: !e.data.currentUser || void 0 === e.data.currentUser.id,
                        topic: Object(T.p)(e.data.currentUser && e.data.currentUser.id || ""),
                        mutator: function(t, n) {
                            if (!n.currentUser) return n;
                            if (a(t) || r(t)) {
                                if (r(t)) {
                                    var i = n.currentUser.whisperThreads.edges.find(function(e) {
                                        return e.node.id === t.data_object.thread_id
                                    });
                                    if (i) {
                                        var o = i.node.participants.find(function(e) {
                                            return e.id === "" + t.data_object.from_id
                                        });
                                        o && Object(A.l)({
                                            targetUserLogin: o.login,
                                            threadID: t.data_object.thread_id
                                        })
                                    }
                                }
                                return function(e, t, n, i) {
                                    if (!t.currentUser) return t;
                                    var a = O.l.get("whisperDoNotDisturb", !1),
                                        o = t.currentUser.whisperThreads.edges.find(function(t) {
                                            return t.node.id === e.data_object.thread_id
                                        });
                                    if (o) {
                                        var s = Object(Q.c)(e);
                                        o.node.messages.edges.unshift(s), r(e) && (e.data_object.thread_id !== n ? o.node.unreadMessagesCount += 1 : Object(K.a)({
                                            threadID: e.data_object.thread_id,
                                            lastReadMessageID: e.data_object.message_id
                                        }), i({
                                            threadID: e.data_object.thread_id,
                                            collapsed: !0,
                                            hidden: a
                                        })), o.node.isArchived = !1;
                                        var l = t.currentUser.whisperThreads.edges.filter(function(t) {
                                            return t.node.id !== e.data_object.thread_id
                                        });
                                        l.unshift(o), t.currentUser.whisperThreads.edges = l
                                    } else i({
                                        threadID: e.data_object.thread_id,
                                        collapsed: !0,
                                        hidden: a
                                    });
                                    return t
                                }(t, n, e.focusedThreadID, e.openThread)
                            }
                            return function(e) {
                                return e.type === C.c.WhisperDeleted
                            }(t) ? function(e, t) {
                                if (!t.currentUser) return t;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n) {
                                    var i = n.node.messages.edges.find(function(t) {
                                        return t.node.id === e.data_object.message_id
                                    });
                                    i && (i.node.deletedAt = new Date(1e3 * e.data_object.deleted_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(Q.b)(e.data_object.tags.emotes))
                                }
                                return t
                            }(t, n) : function(e) {
                                return e.type === C.c.WhisperEdited
                            }(t) ? function(e, t) {
                                if (!t.currentUser) return t;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n) {
                                    var i = n.node.messages.edges.find(function(t) {
                                        return t.node.id === e.data_object.message_id
                                    });
                                    i && (i.node.editedAt = new Date(1e3 * e.data_object.edited_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(Q.b)(e.data_object.tags.emotes))
                                }
                                return t
                            }(t, n) : function(e) {
                                return e.type === C.c.WhisperThreadUpdate
                            }(t) ? function(e, t, n) {
                                if (!t.currentUser) return t;
                                var i = t.currentUser.whisperThreads.edges.findIndex(function(t) {
                                    return t.node.id === e.data_object.id
                                });
                                if (i >= 0) {
                                    var a = t.currentUser.whisperThreads.edges[i],
                                        r = a.node.messages.edges[0].cursor,
                                        o = parseInt(r, 10) - e.data_object.last_read;
                                    a.node.unreadMessagesCount = o >= 0 ? o : 0, a.node.isMuted = e.data_object.muted, !a.node.isArchived && e.data_object.archived && n(e.data_object.id), a.node.isArchived = e.data_object.archived
                                }
                                return t
                            }(t, n, e.closeThread) : function(e) {
                                return e.type === C.c.WhisperAllThreadsUpdate
                            }(t) ? function(e, t) {
                                return t.currentUser ? (e.data_object.mark_all_read && t.currentUser.whisperThreads.edges.forEach(function(e) {
                                    e.node.unreadMessagesCount = 0
                                }), t) : t
                            }(t, n) : n
                        },
                        skipMessage: function(e, t) {
                            if (a(e)) {
                                if (!t.currentUser) return !1;
                                var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                    return t.node.id === e.data_object.thread_id
                                });
                                if (n && n.node.messages.edges.findIndex(function(t) {
                                        return t.node.id === e.data_object.nonce
                                    }) >= 0) return !0
                            }
                            return !1
                        }
                    }
                })], t)
            }(s.Component),
            J = Object(p.a)(function(e) {
                return {
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    focusedThreadID: e.whispers.display.focusedID
                }
            }, function(e) {
                return {
                    openThread: function(t) {
                        return e(k.l(t, Object(S.a)()))
                    },
                    closeThread: function(t) {
                        return e(k.h(t, Object(S.a)()))
                    }
                }
            })(Y),
            X = n("F8kA"),
            ee = n("bZTi"),
            te = n("Ejve"),
            ne = n("eBiB"),
            ie = n("0Mfl"),
            ae = n("CSlQ"),
            re = ee.a.wrap(function() {
                return n.e(47).then(n.bind(null, "8U1+"))
            }, "AnonFrontPage"),
            oe = ee.a.wrap(function() {
                return n.e(49).then(n.bind(null, "Dd84"))
            }, "BrowseRootPage"),
            se = ee.a.wrap(function() {
                return n.e(40).then(n.bind(null, "gZGZ"))
            }, "ChannelClipsPage"),
            le = ee.a.wrap(function() {
                return n.e(48).then(n.bind(null, "zfLI"))
            }, "ChannelCollectionsPage"),
            ce = ee.a.wrap(function() {
                return n.e(42).then(n.bind(null, "lW0T"))
            }, "ChannelEventsPage"),
            ue = ee.a.wrap(function() {
                return n.e(33).then(n.bind(null, "oFVJ"))
            }, "ChannelPage"),
            de = ee.a.wrap(function() {
                return n.e(38).then(n.bind(null, "g8mI"))
            }, "ChannelVideosPage"),
            pe = ee.a.wrap(function() {
                return n.e(57).then(n.bind(null, "yMnN"))
            }, "DevOnlyRoot"),
            me = ee.a.wrap(function() {
                return n.e(43).then(n.bind(null, "7yeK"))
            }, "DirectoryRootPage"),
            he = ee.a.wrap(function() {
                return n.e(53).then(n.bind(null, "IzAE"))
            }, "DevOnlyTestingCarouselPage"),
            ge = ee.a.wrap(function() {
                return n.e(55).then(n.bind(null, "Tj44"))
            }, "EmailVerificationPage"),
            fe = ee.a.wrap(function() {
                return n.e(45).then(n.bind(null, "NTi8"))
            }, "EventLandingPage"),
            ve = ee.a.wrap(function() {
                return n.e(46).then(n.bind(null, "IpE8"))
            }, "FollowingRootPage"),
            be = ee.a.wrap(function() {
                return n.e(44).then(n.bind(null, "IOEW"))
            }, "FrontPage"),
            ye = ee.a.wrap(function() {
                return n.e(56).then(n.bind(null, "DkuH"))
            }, "ReportUserPage"),
            ke = ee.a.wrap(function() {
                return n.e(50).then(n.bind(null, "K4jf"))
            }, "SettingsRoot"),
            Se = ee.a.wrap(function() {
                return n.e(35).then(n.bind(null, "uiPj"))
            }, "VideoWatchPage"),
            _e = ee.a.wrap(function() {
                return n.e(52).then(n.bind(null, "6Vx1"))
            }, "DevOnlyTestingAmazonOffersPage"),
            we = function() {
                return s.createElement(X.c, {
                    path: "/",
                    to: "/directory/following"
                })
            },
            Ee = function() {
                return window.location.reload(), null
            },
            Ce = function(e) {
                var t = Object(ne.a)(e.match.params.videoID);
                return s.createElement(X.c, {
                    to: "/videos/" + t
                })
            },
            Ne = function(e) {
                return s.createElement(X.c, {
                    to: "/popout/" + e.match.params.channelLogin + "/chat"
                })
            },
            Te = function(e) {
                return s.createElement(X.c, {
                    to: "/" + e.match.params.channelLogin + "/videos/all"
                })
            },
            Oe = function(e) {
                return s.createElement(X.c, {
                    to: "/" + e.match.params.channelLogin + "/videos/archive"
                })
            },
            Ie = function(e) {
                return s.createElement(X.c, {
                    to: "/directory/game/" + e.match.params.encodedCommunityName + "/videos/all"
                })
            },
            De = function() {
                return s.createElement(X.c, {
                    to: "/directory/all/xbox"
                })
            },
            Le = function() {
                return window.location.replace(ie.a), null
            },
            xe = Object(ae.c)("DefaultRootRouter", {
                autoReportInteractive: !0
            })(function(e) {
                var t = e.isLoggedIn;
                return s.createElement(X.e, null, O.a.buildType !== te.a.Production && s.createElement(X.d, {
                    path: "/_dev/testing/carousel",
                    component: he
                }), O.a.buildType !== te.a.Production && s.createElement(X.d, {
                    path: "/_dev/testing/amazon-offers/:channelName",
                    component: _e
                }), O.a.buildType !== te.a.Production && s.createElement(X.d, {
                    path: "/_dev",
                    component: pe
                }), s.createElement(X.d, {
                    exact: !0,
                    path: "/",
                    component: t ? be : re
                }), s.createElement(X.d, {
                    path: "/bits",
                    render: Ee
                }), s.createElement(X.d, {
                    path: "/collections/:collectionID",
                    component: Se
                }), s.createElement(X.d, {
                    path: "/communities/:encodedCommunityName/details",
                    component: me
                }), s.createElement(X.d, {
                    path: "/communities/:encodedCommunityName/:encodedLanguage",
                    component: me
                }), s.createElement(X.d, {
                    path: "/communities/:encodedCommunityName",
                    component: me
                }), s.createElement(X.d, {
                    path: "/directory/communities",
                    component: oe
                }), s.createElement(X.d, {
                    path: "/directory/creative",
                    component: oe
                }), s.createElement(X.d, {
                    path: "/directory/following/:category?",
                    component: ve
                }), s.createElement(X.d, {
                    path: "/directory/game/:encodedCommunityName/clips",
                    component: me
                }), s.createElement(X.d, {
                    path: "/directory/game/:encodedCommunityName/details",
                    component: me
                }), s.createElement(X.d, {
                    path: "/directory/game/:encodedCommunityName/videos/:filter",
                    component: me
                }), s.createElement(X.d, {
                    path: "/directory/game/:encodedCommunityName/videos",
                    render: Ie
                }), s.createElement(X.d, {
                    path: "/directory/game/:encodedCommunityName/:encodedLanguage",
                    component: me
                }), s.createElement(X.d, {
                    path: "/directory/game/:encodedCommunityName",
                    component: me
                }), s.createElement(X.d, {
                    path: "/directory/all/ps4",
                    component: oe
                }), s.createElement(X.d, {
                    path: "/directory/all/xb1",
                    component: De
                }), s.createElement(X.d, {
                    path: "/directory/all/xbox",
                    component: oe
                }), s.createElement(X.d, {
                    path: "/directory/all/:encodedLanguage",
                    component: oe
                }), s.createElement(X.d, {
                    path: "/directory/all",
                    component: oe
                }), s.createElement(X.d, {
                    path: "/directory/:category?",
                    component: oe
                }), s.createElement(X.d, {
                    path: "/events/:eventName",
                    render: fe
                }), s.createElement(X.d, {
                    path: "/email-verification/:emailOpaqueId",
                    component: ge
                }), s.createElement(X.d, {
                    path: "/following",
                    component: we
                }), s.createElement(X.d, {
                    path: "/popout/:channelName/chat",
                    render: Ee
                }), s.createElement(X.d, {
                    path: "/videos/v:videoID",
                    render: Ce
                }), s.createElement(X.d, {
                    path: "/videos/:videoID",
                    component: Se
                }), s.createElement(X.d, {
                    path: "/store",
                    render: Le
                }), s.createElement(X.d, {
                    path: "/store/merch",
                    render: Le
                }), s.createElement(X.d, {
                    path: "/subs",
                    render: Ee
                }), s.createElement(X.d, {
                    path: "/settings/:tab?",
                    component: ke
                }), s.createElement(X.d, {
                    path: "/:channelName/report",
                    component: ye
                }), s.createElement(X.d, {
                    path: "/:channelLogin/videos/(past_broadcasts?)",
                    render: Oe
                }), s.createElement(X.d, {
                    path: "/:channelLogin/videos/:filter(all|archive|upload|highlight|past_premiere)",
                    component: de
                }), s.createElement(X.d, {
                    path: "/:channelLogin/videos/:unknownFilter?",
                    render: Te
                }), s.createElement(X.d, {
                    path: "/:channelName/clips",
                    component: se
                }), s.createElement(X.d, {
                    path: "/:channelLogin/chat",
                    render: Ne
                }), s.createElement(X.d, {
                    path: "/:channelLogin/collections",
                    component: le
                }), s.createElement(X.d, {
                    path: "/:channelLogin/events",
                    component: ce
                }), s.createElement(X.d, {
                    path: "/:channelName/p/:entityID",
                    component: ue
                }), s.createElement(X.d, {
                    path: "/:channelName",
                    component: ue
                }))
            });
        n.d(t, "b", function() {
            return Re
        }), n.d(t, "a", function() {
            return Fe
        });
        var Re = "twilight-main",
            Fe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.setRootScrollableContentRef = function(e) {
                        t.setState({
                            rootScrollableContentRef: e
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(U.V, {
                        display: U.H.Flex,
                        flexWrap: U.K.NoWrap,
                        fullHeight: !0,
                        position: U._4.Relative
                    }, s.createElement(f, null), s.createElement(U.Q, {
                        display: U.H.Flex,
                        flexDirection: U.J.Column,
                        flexWrap: U.K.NoWrap,
                        position: U._4.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        fullWidth: !0
                    }, s.createElement("main", {
                        className: Re
                    }, s.createElement(b.b, null), s.createElement(u.a, {
                        contentRefDelegate: this.setRootScrollableContentRef
                    }, s.createElement(xe, {
                        isLoggedIn: this.props.isLoggedIn
                    }), s.createElement(l.b, {
                        mainRef: this.state.rootScrollableContentRef
                    })), s.createElement(v.b, null), this.props.firstPageLoaded && s.createElement(J, null))), s.createElement(c.a, null))
                }, t
            }(s.Component)
    },
    hvzu: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = function(e) {
                var t = e.split(/\s+/),
                    n = [];
                return t.forEach(function(e, i) {
                    var a = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)([^\w./@#%&()\-+=:?~]|\s|$)/g,
                        o = a.exec(e);
                    if (o) {
                        var s = o.index,
                            l = !1,
                            c = !1,
                            u = o[1];
                        u && (s += 1, /\s/.test(u) || (l = !0)), 0 !== s && n.push({
                            type: r.Text,
                            content: (c ? " " : "") + e.slice(0, s) + (l ? " " : "")
                        }), c = !1;
                        var d = a.lastIndex,
                            p = o[3];
                        p && (d -= 1, /\s/.test(p) || (c = !0));
                        var m = e.slice(s, d);
                        if (m.indexOf("@") > -1 && (-1 === m.indexOf("/") || m.indexOf("@") < m.indexOf("/"))) n.push({
                            type: r.Link,
                            content: {
                                displayText: m,
                                url: "mailto:" + m,
                                shouldOpenInNewTab: !1
                            }
                        });
                        else {
                            var h = (o[2] ? "" : "https://") + e.slice(s, d);
                            n.push({
                                type: r.Link,
                                content: {
                                    displayText: e.slice(s, d),
                                    shouldOpenInNewTab: !0,
                                    url: h
                                }
                            })
                        }
                        var g = e.slice(d),
                            f = "";
                        i < t.length - 1 && (f = " "), g && n.push({
                            type: r.Text,
                            content: (c ? " " : "") + g + f
                        })
                    } else {
                        var v = n.length && n[n.length - 1];
                        if (f = "", i < t.length - 1 && (f = " "), v && v.type === r.Text) v.content += e + f;
                        else {
                            var b = "";
                            i && (b = " "), n.push({
                                type: r.Text,
                                content: b + e + f
                            })
                        }
                    }
                }), n
            }(e);
            return t.reduce(function(e, n, i) {
                if (n.type === r.Text) e.push(n.content);
                else if (n.type === r.Link) {
                    t[i - 1] && t[i - 1].type === r.Link && e.push(" "), e.push(o.createElement("a", {
                        key: i,
                        href: n.content.url,
                        target: "__blank"
                    }, n.content.displayText))
                }
                return e
            }, [])
        }

        function a(e, t, n) {
            var a = [],
                r = 0,
                d = Object(c.d)(e);
            if (t.forEach(function(t) {
                    var n = t.from,
                        s = t.to,
                        p = {
                            themed: !1,
                            sources: {
                                "1x": Object(c.e)("" + t.emoteID, 1),
                                "2x": Object(c.e)("" + t.emoteID, 2),
                                "4x": Object(c.e)("" + t.emoteID, 4)
                            }
                        };
                    if (n > r) {
                        var m = d ? d.slice(r, n).join("") : e.slice(r, n);
                        a.push(o.createElement("span", {
                            key: "str-" + r,
                            className: "thread-message__message--part"
                        }, i(m)))
                    }
                    var h = d ? d.slice(n, s + 1).join("") : e.slice(n, s + 1);
                    a.push(o.createElement(l.a, {
                        key: "emote-" + r,
                        tooltipDirection: u._33.Top,
                        className: "thread-message__message--emote",
                        srcSet: p,
                        srcKey: "1x",
                        alt: h
                    })), r = s + 1
                }), r < e.length) {
                var p = d ? d.slice(r, d.length).join("") : e.slice(r, e.length);
                a.push(o.createElement("span", {
                    key: "str-" + r,
                    className: "thread-message__message--part"
                }, i(p)))
            }
            if (n) {
                var m = Object(s.d)("edited", "ThreadMessage"),
                    h = Object(s.d)("{timestamp, date, full} {timestamp, time, long}", {
                        timestamp: new Date(n)
                    }, "ThreadMessage");
                a.push(o.createElement(u.Q, {
                    key: "editedAt",
                    margin: {
                        left: 1
                    }
                }, o.createElement(u._23, {
                    type: u._28.Span,
                    className: "thread-message__message--edited",
                    title: h,
                    color: u.F.Alt2
                }, "(" + m + ")")))
            }
            return a
        }
        var r, o = n("U7vG"),
            s = n("6sO2"),
            l = n("8RKZ"),
            c = n("l21v");
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Link = 1] = "Link"
        }(r || (r = {}));
        var u = n("Odds");
        t.a = a, n.d(t, "f", function() {
            return d
        }), n.d(t, "e", function() {
            return p
        }), n.d(t, "d", function() {
            return m
        }), n.d(t, "c", function() {
            return h
        }), n.d(t, "b", function() {
            return g
        });
        var d = function(e) {
                var t = a(e.content, e.emotes, e.editedAt);
                if (e.deletedAt) return null;
                var n = e.from && e.from.chatColor || "",
                    i = e.from && e.from.displayName || o.createElement(u._23, {
                        type: u._28.Span,
                        italic: !0
                    }, Object(s.d)("Unknown", "ThreadMessage"));
                return o.createElement(u.V, {
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, o.createElement("span", {
                    className: "thread-message__message--user-name",
                    style: {
                        color: n
                    }
                }, i), o.createElement("span", null, ": "), t)
            },
            p = function() {
                return o.createElement(u.V, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(s.d)("Please don't share passwords or personal information.", "whispers"))
            },
            m = function(e) {
                var t = new Date,
                    n = Object(s.d)("Today, {timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    i = Object(s.d)("{timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    a = e.timestamp.toDateString() === t.toDateString() ? n : i;
                return o.createElement(u.V, {
                    padding: {
                        y: 1
                    },
                    textAlign: u._24.Center
                }, "" + a)
            },
            h = function(e) {
                return o.createElement(u.V, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, o.createElement(u._23, {
                    type: u._28.Span,
                    color: u.F.Alt2
                }, e.content))
            },
            g = function() {
                return o.createElement(u.V, {
                    textAlign: u._24.Center,
                    padding: {
                        y: .5
                    }
                }, Object(s.d)("New Whispers", "whispers"))
            }
    },
    iOr9: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        assignmentDetermined: !1,
                        assignment: ""
                    }, t.logger = r.n.logger.withCategory("component-experiment"), t.didUnmount = !1, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, r.n.experiments.getAssignment(this.props.name, this.props.channel ? {
                                        channel: this.props.channel
                                    } : {})];
                                case 1:
                                    return e = t.sent(), this.didUnmount ? [2] : (e && this.props.assignments[e] ? this.logger.debug("Displaying component for experiment", {
                                        name: this.props.name,
                                        assignment: e
                                    }) : this.logger.debug("Displaying fallback component for experiment", {
                                        name: this.props.name,
                                        assignment: e
                                    }), this.setState({
                                        assignment: e,
                                        assignmentDetermined: !0
                                    }), [2])
                            }
                        })
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.didUnmount = !0
                }, t.prototype.render = function() {
                    if (!this.state.assignmentDetermined) return this.props.loader();
                    if (this.props.assignments[this.state.assignment]) {
                        var e = this.props.assignments[this.state.assignment]();
                        return "string" == typeof e ? (window.location.replace(e), null) : e
                    }
                    return this.props.assignments.fallback()
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return o
        })
    },
    iPhu: function(e, t, n) {
        "use strict";

        function i(e) {
            if (r && e.ref) {
                var t = function(e) {
                    var t = o.__assign({}, e),
                        n = 0;
                    e.y + _ + 20 > window.innerHeight && (t.y = window.innerHeight - _ - 20, n = e.y - t.y);
                    return {
                        coords: t,
                        offset: n
                    }
                }(function(e, t) {
                    var n = t.getBoundingClientRect();
                    switch (e) {
                        case l.q.Bottom:
                        case l.q.BottomLeft:
                            return {
                                x: n.left,
                                y: n.bottom
                            };
                        case l.q.BottomCenter:
                            return {
                                x: n.left + n.width / 2,
                                y: n.bottom
                            };
                        case l.q.BottomRight:
                            return {
                                x: n.right,
                                y: n.bottom
                            };
                        case l.q.Left:
                        case l.q.Top:
                        case l.q.TopLeft:
                            return {
                                x: n.left,
                                y: n.top
                            };
                        case l.q.LeftCenter:
                            return {
                                x: n.left,
                                y: n.top + n.height / 2
                            };
                        case l.q.TopCenter:
                            return {
                                x: n.left + n.width / 2,
                                y: n.top
                            };
                        case l.q.TopRight:
                        case l.q.Right:
                            return {
                                x: n.right,
                                y: n.top
                            };
                        case l.q.RightCenter:
                            return {
                                x: n.right,
                                y: n.top + n.height / 2
                            };
                        default:
                            return {
                                x: n.left,
                                y: n.bottom
                            }
                    }
                }(e.direction, e.ref));
                r.showUserCard({
                    id: e.id,
                    direction: e.direction,
                    from: {
                        x: t.coords.x,
                        y: t.coords.y
                    },
                    tailOffset: t.offset
                })
            }
        }

        function a(e) {
            void 0 === e && (e = {}), r && r.hideUserCard(e)
        }
        var r, o = n("TToO"),
            s = n("U7vG"),
            l = n("Odds"),
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        options: null,
                        hovering: !1
                    }, n.clearTimeoutAndRun = function(e, t) {
                        void 0 === t && (t = 400), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                            e(), n.displayTimeout = 0
                        }, t)
                    }, n.setRef = function(e) {
                        n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                    }, n.addEventListeners = function(e) {
                        e && (e.addEventListener("mouseenter", n.handleMouseEnter, !0), e.addEventListener("mouseleave", n.handleMouseLeave))
                    }, n.removeEventListeners = function() {
                        n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave))
                    }, n.handleMouseEnter = function() {
                        n.setState({
                            hovering: !0
                        })
                    }, n.handleMouseLeave = function() {
                        n.setState({
                            hovering: !1
                        }, function() {
                            n.displayTimeout || n.hideUserCard()
                        })
                    }, r = n, n
                }
                return o.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.state.options || this.removeEventListeners()
                }, t.prototype.render = function() {
                    var e = null;
                    if (this.state.options) {
                        var t = {
                            left: this.state.options.from.x,
                            top: this.state.options.from.y
                        };
                        e = s.createElement(l.Q, {
                            position: l._4.Fixed
                        }, s.createElement("div", {
                            className: "user-card-layer__balloon",
                            style: t,
                            ref: this.setRef
                        }, s.createElement(S, {
                            id: this.state.options.id,
                            direction: this.state.options.direction ? this.state.options.direction : l.q.Right,
                            tailOffset: this.state.options.tailOffset
                        })))
                    }
                    return e
                }, t.prototype.showUserCard = function(e) {
                    var t = this;
                    this.clearTimeoutAndRun(function() {
                        t.setState({
                            options: e
                        })
                    })
                }, t.prototype.hideUserCard = function(e) {
                    var t = this;
                    void 0 === e && (e = {}), this.clearTimeoutAndRun(function() {
                        t.state.hovering && !e.force || t.setState({
                            options: null
                        })
                    }, e.timeout)
                }, t
            }(s.Component),
            u = n("RH2O"),
            d = n("6sO2"),
            p = n("E9Qg"),
            m = n("hdYS"),
            h = n("5s0/"),
            g = n("7vx8"),
            f = n("O1nh"),
            v = n("2Hj/"),
            b = n("m4HT"),
            y = (n("rRWv"), n("/OR/")),
            k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getContent = function() {
                        if (t.props.data.loading) return s.createElement("div", {
                            className: "user-card"
                        }, s.createElement(l.Z, {
                            fillContent: !0
                        }));
                        var e = {
                            backgroundImage: "url(" + (t.props.data.user.bannerImageURL || p),
                            backgroundPosition: "center",
                            backgroundSize: "auto 100%",
                            backgroundRepeat: "repeat"
                        };
                        return s.createElement(l.V, {
                            padding: 1
                        }, s.createElement("div", {
                            className: "user-card",
                            style: t.props.data.loading ? {} : e
                        }, s.createElement(l._19, {
                            padding: 1,
                            display: l.H.Flex,
                            flexDirection: l.J.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            background: l.m.Overlay,
                            "data-a-target": "user-card-modal"
                        }, s.createElement(l.V, {
                            alignItems: l.c.Center,
                            justifyContent: l.U.Center,
                            display: l.H.Flex,
                            flexDirection: l.J.Column,
                            textAlign: l._24.Center,
                            fullWidth: !0,
                            flexGrow: 1
                        }, s.createElement(l.l, {
                            imageSrc: t.props.data.user.profileImageURL,
                            size: 50,
                            imageAlt: t.props.data.user.displayName
                        }), s.createElement(l._19, {
                            padding: {
                                top: .5
                            },
                            ellipsis: !0,
                            color: l.F.Overlay
                        }, t.props.data.user.displayName), t.getBio()), t.getButtons())))
                    }, t.getBio = function() {
                        if (t.props.data.loading || t.props.data.error) return null;
                        if (!t.props.data.user.description) return s.createElement(l._19, {
                            ellipsis: !0,
                            color: l.F.Overlay,
                            padding: {
                                top: .5
                            }
                        }, Object(d.d)("This user has no bio.", "UserCard"));
                        var e = null;
                        return t.props.data.user && (t.props.data.user.activity || t.props.data.user.availability) && (e = s.createElement(v.b, {
                            availability: t.props.data.user.availability,
                            activity: t.props.data.user.activity
                        })), s.createElement(l.V, {
                            ellipsis: !0,
                            padding: {
                                top: .5
                            }
                        }, e && s.createElement(l._23, {
                            color: l.F.Alt
                        }, e), t.props.data.user.description)
                    }, t.getButtons = function() {
                        return s.createElement(l.V, {
                            display: l.H.Flex,
                            flexDirection: l.J.Row,
                            justifyContent: l.U.Between,
                            fullWidth: !0,
                            flexGrow: 0
                        }, s.createElement(l.V, {
                            display: l.H.InlineFlex,
                            flexDirection: l.J.Row
                        }, s.createElement(l.V, {
                            padding: {
                                right: 1
                            }
                        }, s.createElement(f.a, {
                            channelID: t.props.id
                        })), s.createElement(m.a, {
                            channelLogin: t.props.data.user.login
                        })), s.createElement(h.a, {
                            threadID: t.getThreadID(),
                            onClick: t.onWhisperButtonClick
                        }))
                    }, t.onWhisperButtonClick = function() {
                        a({
                            force: !0,
                            timeout: 0
                        })
                    }, t.getThreadID = function() {
                        return t.props.currentUserID ? Object(b.a)(t.props.data.user.id, t.props.currentUserID) : ""
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return this.props.data.error ? null : s.createElement(l.p, {
                        direction: this.props.direction,
                        size: l.r.Large,
                        show: !0,
                        tailOffset: this.props.tailOffset
                    }, this.getContent())
                }, t = o.__decorate([Object(g.a)(y, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.id
                            }
                        }
                    }
                })], t)
            }(s.Component),
            S = Object(u.a)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id
                }
            })(k),
            _ = 214;
        n.d(t, "b", function() {
            return c
        }), n.d(t, "a", function() {
            return S
        }), n.d(t, "d", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        })
    },
    iXJ1: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SearchFriendResult_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 137
            }
        };
        n.loc.source = {
            body: "mutation SearchFriendResult_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    iYmP: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 131
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    iYrx: function(e, t) {},
    ieBa: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("TToO"),
            r = n("U7vG"),
            o = n("rCmJ"),
            s = n("6sO2"),
            l = n("Odds"),
            c = function(e) {
                return r.createElement(l.v, {
                    icon: l._11.Emoticons,
                    ariaLabel: Object(s.d)("Emote picker", "EmotePickerButton"),
                    type: l.w.Secondary,
                    onClick: e.onClick,
                    "data-a-target": "emote-picker-button"
                })
            },
            u = n("P+j/"),
            d = n("CSlQ"),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasInteracted: !1,
                        isEmotePickerMenuVisible: !1,
                        isEmotePickerButtonVisible: !1
                    }, t.onClickOut = function() {
                        t.setState({
                            isEmotePickerMenuVisible: !1
                        })
                    }, t.onClickEmote = function(e, n) {
                        t.props.onClickEmote && t.props.onClickEmote(e, n)
                    }, t.toggleEmotePicker = function() {
                        t.setState(function(e) {
                            return {
                                isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                            }
                        })
                    }, t.onEmotePickerDataLoaded = function(e) {
                        e && t.setState({
                            isEmotePickerButtonVisible: !0
                        })
                    }, t.onInteraction = function() {
                        return t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.isEmotePickerButtonVisible && (e = r.createElement(c, {
                        onClick: this.toggleEmotePicker
                    }));
                    var t = null;
                    this.hasInteractedOrPageload && (t = r.createElement(u.a, {
                        channelOwnerID: this.props.channelOwnerID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.toggleEmotePicker,
                        visible: this.state.isEmotePickerMenuVisible,
                        direction: this.props.direction
                    }));
                    var n = r.createElement(l.V, a.__assign({
                        className: "emote-picker-and-button"
                    }, this.layoutProps), e, t);
                    return this.props.shouldCloseOnClickOut ? r.createElement(o.a, {
                        onClickOut: this.onClickOut
                    }, n) : n
                }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                    get: function() {
                        return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "layoutProps", {
                    get: function() {
                        var e = {
                            attachTop: !!this.props.attachTop,
                            attachRight: !!this.props.attachRight,
                            attachBottom: !!this.props.attachBottom,
                            attachLeft: !!this.props.attachLeft,
                            padding: this.props.padding
                        };
                        return this.props.position && this.props.position in l._4 && (e.position = this.props.position), e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            m = Object(d.c)("EmotePicker")(p),
            h = Object(i.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(m),
            g = n("nEoF");
        n.d(t, "a", function() {
            return h
        }), n.d(t, "c", function() {
            return u.a
        }), n.d(t, !1, function() {
            return g.b
        }), n.d(t, !1, function() {
            return g.a
        }), n.d(t, "b", function() {
            return c
        })
    },
    iydZ: function(e, t, n) {
        "use strict";

        function i(e, t, n) {
            void 0 === n && (n = !0);
            var i = n ? "animated" : "static";
            return t ? {
                themed: !0,
                dark: (a = {}, a[t + "x"] = e.indexedImages.DARK[i].get(t), a),
                light: (r = {}, r[t + "x"] = e.indexedImages.LIGHT[i].get(t), r)
            } : {
                themed: !0,
                dark: {
                    "1x": e.indexedImages.DARK[i].get(1),
                    "1.5x": e.indexedImages.DARK[i].get(1.5),
                    "2x": e.indexedImages.DARK[i].get(2),
                    "3x": e.indexedImages.DARK[i].get(3),
                    "4x": e.indexedImages.DARK[i].get(4)
                },
                light: {
                    "1x": e.indexedImages.LIGHT[i].get(1),
                    "1.5x": e.indexedImages.LIGHT[i].get(1.5),
                    "2x": e.indexedImages.LIGHT[i].get(2),
                    "3x": e.indexedImages.LIGHT[i].get(3),
                    "4x": e.indexedImages.LIGHT[i].get(4)
                }
            };
            var a, r
        }
        n.d(t, "a", function() {
            return s
        }), t.c = function(e, t) {
            var n = [],
                s = t.indexedActions,
                l = new RegExp("^(" + Object.keys(s).join("|") + ")(\\d+)$", "i"),
                c = e.split(/\s+/);
            return c.forEach(function(e, t) {
                var u = l.exec(e);
                if (u) {
                    var d = u[1].toLowerCase(),
                        p = +u[2],
                        m = s[d];
                    if (m || d !== a.f || (m = Object(r.b)()), m) {
                        var h = m.orderedTiers.find(function(e) {
                            return e.bits <= p
                        });
                        !h && p && (h = m.orderedTiers[0]), h && n.push({
                            type: o.a.Emote,
                            content: {
                                images: i(h),
                                alt: m.prefix,
                                cheerAmount: p,
                                cheerColor: h.color
                            }
                        })
                    }
                } else {
                    var g = n.length && n[n.length - 1],
                        f = "";
                    if (t < c.length - 1 && (f = " "), g && g.type === o.a.Text) g.content += e + f;
                    else {
                        var v = "";
                        t && (v = " "), n.push({
                            type: o.a.Text,
                            content: v + e + f
                        })
                    }
                }
            }), n
        }, t.b = i;
        var a = n("3iBR"),
            r = n("CFVp"),
            o = n("mwvJ"),
            s = {
                indexedActions: {},
                orderedActions: []
            }
    },
    jYA1: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = 3,
            s = n("CwIZ"),
            l = n("Odds"),
            c = "subscribe-button__subscribe-with-prime",
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribing: !1,
                        primeSubFailure: !0
                    }, t.handleStartPrimeTrialClick = function() {
                        t.props.reportSubMenuAction({
                            action: s.a.ClickSignupForPrime
                        })
                    }, t.handleSubWithPrimeClick = function() {
                        t.setState({
                            isSubscribing: !0
                        }, function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e;
                                return i.__generator(this, function(t) {
                                    switch (t.label) {
                                        case 0:
                                            return t.trys.push([0, 3, 4, 5]), this.props.authToken && this.props.userHasPrime && this.props.subLogin ? [4, function(e, t) {
                                                return i.__awaiter(this, void 0, void 0, function() {
                                                    var n, a, s, l, c;
                                                    return i.__generator(this, function(i) {
                                                        switch (i.label) {
                                                            case 0:
                                                                n = "https://api.twitch.tv/api/premium/credit/spend_token?channel_id=" + e, a = 1, i.label = 1;
                                                            case 1:
                                                                if (!(a <= o)) return [3, 7];
                                                                i.label = 2;
                                                            case 2:
                                                                return i.trys.push([2, 5, , 6]), [4, fetch(n, {
                                                                    method: "POST",
                                                                    headers: {
                                                                        "Client-ID": r.n.config.legacyClientID,
                                                                        Accept: "application/json; charset=UTF-8",
                                                                        "content-type": "application/json; charset=UTF-8",
                                                                        Authorization: "OAuth " + t
                                                                    }
                                                                })];
                                                            case 3:
                                                                return s = i.sent(), [4, s.body];
                                                            case 4:
                                                                return l = i.sent(), [2, l];
                                                            case 5:
                                                                if (c = i.sent(), a === o) throw c;
                                                                return [3, 6];
                                                            case 6:
                                                                return ++a, [3, 1];
                                                            case 7:
                                                                return [2]
                                                        }
                                                    })
                                                })
                                            }(this.props.subLogin, this.props.authToken)] : [3, 2];
                                        case 1:
                                            t.sent(), this.props.onSubscribedWithPrime(), t.label = 2;
                                        case 2:
                                            return [3, 5];
                                        case 3:
                                            return e = t.sent(), r.i.error(e, "Failed to subscribe with Prime", {
                                                subLogin: this.props.subLogin
                                            }), this.setState({
                                                isSubscribing: !1,
                                                primeSubFailure: !0
                                            }), [3, 5];
                                        case 4:
                                            return this.setState({
                                                isSubscribing: !1
                                            }), [7];
                                        case 5:
                                            return [2]
                                    }
                                })
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.isSubscribedWithPrime && this.props.canPrimeSubscribe;
                    if (!this.props.userHasPrime) {
                        var t = Object(r.d)("Start Your Free Trial", "SubscribeWithPrime");
                        return a.createElement(l.u, i.__assign({
                            ariaLabel: t,
                            "data-test-selector": c,
                            icon: l._11.Crown,
                            linkTo: r.a.tryPrimeURI,
                            onClick: this.handleStartPrimeTrialClick
                        }, Object(l._40)(this.props), {
                            targetBlank: !0
                        }), t)
                    }
                    if (this.props.isSubscribed && !e) {
                        var n = Object(r.d)("Subscribed", "SubscribeWithPrime");
                        return a.createElement(l.u, i.__assign({
                            ariaLabel: n,
                            "data-test-selector": c,
                            disabled: !0,
                            icon: l._11.Crown
                        }, Object(l._40)(this.props)), n)
                    }
                    if (!this.props.canPrimeSubscribe) {
                        var o = Object(r.d)("Not yet!", "SubscribeWithPrime");
                        return a.createElement(l.u, i.__assign({
                            ariaLabel: o,
                            "data-test-selector": c,
                            disabled: !0,
                            icon: l._11.Crown
                        }, Object(l._40)(this.props)), o)
                    }
                    var s = e ? Object(r.d)("Resubscribe Free", "SubscribeWithPrime") : Object(r.d)("Subscribe Free", "SubscribeWithPrime");
                    return a.createElement(l.u, i.__assign({
                        ariaLabel: s,
                        "data-test-selector": c,
                        disabled: this.state.isSubscribing,
                        icon: l._11.Crown,
                        state: this.state.isSubscribing ? l.y.Loading : l.y.Default,
                        onClick: this.handleSubWithPrimeClick
                    }, Object(l._40)(this.props)), s)
                }, t
            }(a.Component);
        n.d(t, !1, function() {
            return c
        }), n.d(t, "a", function() {
            return u
        })
    },
    jetF: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            a = n("U7vG"),
            r = (n.n(a), n("HM6l")),
            o = n("Odds"),
            s = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showBalloon: !!t.props.openByDefault,
                        hasInteracted: !!t.props.openByDefault
                    }, t.toggleBalloonId = Object(r.a)(), t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                showBalloon: !e.showBalloon,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.handleGlobalClick = function(e) {
                        e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.setState({
                            showBalloon: !1
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.onMouseEnter = function() {
                        t.state.hasInteracted || t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = a.Children.toArray(this.props.children);
                    if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                    var t = e[0],
                        n = e[1];
                    if (n.type !== o.p) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                    var r = a.cloneElement(t, {
                            onClick: this.handleButtonClick
                        }),
                        s = null;
                    (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (s = a.cloneElement(n, {
                        show: this.state.showBalloon
                    }));
                    var l = r;
                    return this.props.tooltipProps && (l = a.createElement(o._31, i.__assign({}, this.props.tooltipProps), r)), a.createElement(o.V, {
                        "data-toggle-balloon-id": this.toggleBalloonId,
                        display: this.props.display,
                        position: o._4.Relative
                    }, a.createElement("div", {
                        style: {
                            display: "inherit"
                        },
                        onMouseEnter: this.onMouseEnter,
                        "data-test-selector": "toggle-balloon-wrapper__mouse-enter-detector"
                    }, l), s)
                }, t.prototype.toggleBalloon = function(e) {
                    void 0 === e && (e = !this.state.showBalloon), this.setState({
                        showBalloon: e,
                        hasInteracted: !0
                    })
                }, t
            }(a.Component)
    },
    jgDs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TopNav_User_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSharingActivity"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "visibility"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "activity"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Watching"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "user"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "stream"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "hosting"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Streaming"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "stream"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "game"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "name"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: {
                                                kind: "Name",
                                                value: "Playing"
                                            }
                                        },
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 351
            }
        };
        n.loc.source = {
            body: "query TopNav_User_User {\ncurrentUser {\nid\ndisplayName\nprofileImageURL(width: 70)\navailability\nsettings {\nisSharingActivity\nvisibility\n}\nactivity {\ntype\n... on Watching {\nuser {\ndisplayName\nstream {\ngame {\nname\n}\n}\nhosting {\ndisplayName\nstream {\ngame {\nname\n}\n}\n}\n}\n}\n... on Streaming {\nstream {\ngame {\nname\n}\n}\n}\n... on Playing {\ngame {\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    kCP2: function(e, t) {},
    kDWL: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.AchievementSpotlightImpression = "achievement_spotlight_impression", e.AchievementQuestBannerClick = "achievement_quest_banner_click", e.APIQuery = "benchmark_api_query", e.AppBooted = "benchmark_app_booted", e.AutohostChatImpression = "autohost_chat_impression", e.AutohostChatYes = "autohost_chat_yes", e.AutohostChatDismiss = "autohost_chat_dismiss", e.AutohostChatSettings = "autohost_chat_settings", e.BitsAdsAvailability = "bits_ads_availability", e.BitsAdsImpression = "bits_ads_impression", e.BitsAdsRequest = "bits_ads_request", e.BitsCardInteraction = "bits_card_interaction", e.BrowseForYou = "browse_for_you", e.BrowserFingerprint = "browser_fingerprint", e.BrowserPushNotificationPrompt = "browser_notification_prompt", e.BrowserPushNotificationDisable = "browser_notification_disable", e.BTTV = "bttv_check", e.Chat = "chat", e.ChatMentionUsed = "chat_mention_used", e.ChatRoomJoined = "chat_room_join", e.ChatSettingsChanged = "chat_client_setting_changed", e.ChatSettingsOpened = "chat_client_settings_open", e.ChatSuggestion = "chat-suggestions", e.ChatSuggestionComplete = "chat-completed-suggestion", e.ChommentCreated = "chomment_create", e.ChommentDeleted = "chomment_delete", e.ChommentUIAction = "chomment_ui_action", e.CommunityEdit = "community_client_edit", e.CommunityFollow = "community_client_follow", e.CommunityModeration = "community_client_channel_moderation", e.CommunityReport = "community_client_report", e.CommunityUnfollow = "community_client_unfollow", e.CompleteTransition = "benchmark_complete_transition", e.ComponentInitializing = "benchmark_component_initializing", e.ComponentInteractive = "benchmark_component_interactive", e.CustomEvent = "benchmark_custom_event", e.CrateNotificationAction = "crate_notification_action", e.EventFollowing = "oracle_user_notification_client", e.EventShare = "oracle_event_share", e.ExperimentBranch = "experiment_branch", e.FeaturedEventPresentation = "event_suggestions_shown", e.FeedCardImpression = "feed_client_card_impression", e.FeedCardEmbedImpression = "feed_client_card_embed_impression", e.FeedCardEmbedPlay = "feed_client_card_embed_play", e.FeedPost = "feed_client_post", e.FeedReaction = "feed_client_reaction", e.FetchStart = "benchmark_fetch_start", e.FFZ = "ffz_check", e.Follow = "follow", e.FrontPageCarouselClick = "frontpage_carousel_click", e.FrontPageCarouselDisplay = "carousel_display", e.FrontPageCarouselPromotionCardClick = "promotion_card_click", e.FrontPageCarouselPromotionCardView = "promotion_card_view", e.FrontPageCarouselNavButtonClick = "carousel_nav_button_click", e.FuelBuyButton = "fuel_buy_button", e.FuelGetGameClick = "fuel_get_game_click", e.FuelOfferView = "offer_view", e.FuelOfferInteraction = "offer_interaction", e.FuelSocialShare = "fuel_social_share", e.GameFollow = "follow-game", e.GameUnfollow = "unfollow-game", e.ItemSectionClick = "item_section_click", e.ItemSectionLoad = "item_section_load", e.OnboardingEvent = "onboarding_web", e.NetworkRequest = "network_request", e.NewChatterTokenStatus = "nca_client_token_status", e.NewChatterOnboardingInteraction = "nca_onboarding_chatbox_interaction", e.NotificationCenterInteraction = "notification_center_interaction", e.NotificationImpression = "notification_impression", e.NotificationInteraction = "notification_interaction", e.Pageview = "pageview", e.PartnerAffiliateSettings = "partner_affiliate_settings", e.PassportHide = "auth_exit", e.PassportShow = "auth_show", e.PresenceClick = "friend_presence_click", e.RaidPromptJoin = "raid_prompt_join", e.RaidPromptLeave = "raid_prompt_leave", e.RaidPromptImpression = "raid_prompt_impression", e.ShareItem = "share_item", e.SideNavChannelClick = "sidenav_channel_click", e.SideNavDetails = "sidenav_details", e.SideNavLoadMore = "sidenav_load_more", e.SiteLayoutMod = "site_layout_mod", e.SiteToggle = "twilight_site_toggle", e.StreamSummarySpotlightImpression = "summary_spotlight_impression", e.StreamSummarySpotlightClick = "summary_spotlight_click", e.StoreMerchClick = "store_item_select", e.StoreMerchView = "store_item_view", e.Subscription = "subscribe_button", e.SubsLandingStreamerClick = "subs_landing_streamer_click", e.ThemeChange = "dark_mode_toggle", e.Unfollow = "unfollow", e.VideoChatSettingChanged = "video_chat_setting_changed", e.VideoShare = "video_share", e.WhisperAllThreadsMod = "chat_convo_mod_global", e.WhisperIgnoreUser = "chat_ignore_client", e.WhisperReceived = "whisper_received", e.WhisperSearchClick = "search_click", e.WhisperSent = "whisper", e.WhisperThreadCreate = "chat_convo_create", e.WhisperThreadMod = "chat_convo_mod"
        }(i || (i = {}))
    },
    kIPx: function(e, t) {},
    kLsX: function(e, t) {},
    kNqx: function(e, t) {},
    kSXB: function(e, t) {},
    l21v: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return void 0 === t && (t = 15), "number" != typeof b[e] && (b[e] = Math.floor(Math.random() * t)), v[b[e]]
        }

        function a(e, t, n, i, a, l) {
            void 0 === t && (t = []);
            var u = [],
                d = 0,
                m = r(e);
            t.forEach(function(t) {
                var r = m ? m.slice(d, t.startIndex).join("") : e.slice(d, t.startIndex);
                r && (u = n ? u.concat(o(r, l, a, i)) : u.concat(s(r, l, a))), u.push({
                    type: p.a.Emote,
                    content: c.__assign({
                        alt: m ? m.slice(t.startIndex, t.endIndex).join("") : e.slice(t.startIndex, t.endIndex)
                    }, t.data)
                }), d = t.endIndex
            });
            var h = m ? m.slice(d).join("") : e.slice(d);
            return h && (u = n ? u.concat(o(h, l, a, i)) : u.concat(s(h, l, a))), u
        }

        function r(e) {
            return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
        }

        function o(e, t, n, i) {
            if (!i) return s(e, t, n);
            var a = Object(d.c)(e, i).map(function(e) {
                return e.type === p.a.Text ? s(e.content, t, n) : e
            });
            return [].concat.apply([], a)
        }

        function s(e, t, n) {
            var i = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)([^\w./@#%&()\-+=:?~]|\s|$)/g,
                a = /([^\w@#%\-+=:~])?(@)([^\u0000-\u007F]+|\w+)+([^\w./@#%&()\-+=:?~]|\s|$)/g,
                r = [],
                o = e.split(/\s+/);
            return o.forEach(function(e, s) {
                i.lastIndex = 0;
                var l = i.exec(e);
                a.lastIndex = 0;
                var c = a.exec(e);
                if (l) {
                    var d = l.index,
                        h = !1,
                        f = !1,
                        v = l[1];
                    v && (d += 1, /\s/.test(v) || (h = !0)), 0 !== d && r.push({
                        type: p.a.Text,
                        content: (f ? " " : "") + e.slice(0, d) + (h ? " " : "")
                    }), f = !1;
                    var b = i.lastIndex,
                        y = l[3];
                    if (y && (b -= 1, /\s/.test(y) || (f = !0)), n) r.push({
                        type: p.a.Text,
                        content: " <" + Object(u.d)("deleted link", "CreateMessageData") + "> "
                    });
                    else {
                        var k = (l[2] ? "" : "https://") + e.slice(d, b);
                        if (function(e) {
                                return void 0 === e && (e = ""), m.test(e) && !e.includes("clips.twitch.tv/2017/")
                            }(k)) {
                            var S = function(e) {
                                void 0 === e && (e = "");
                                var t = e.match(m);
                                if (null === t) return "";
                                if (t && t.length > 0 && void 0 !== t.index) return t[1];
                                return ""
                            }(k);
                            r.push({
                                type: p.a.ClipLink,
                                content: {
                                    slug: S,
                                    url: k,
                                    displayText: e.slice(d, b)
                                }
                            })
                        } else if (function(e) {
                                return void 0 === e && (e = ""), g.test(e)
                            }(k)) {
                            var _ = function(e) {
                                void 0 === e && (e = "");
                                var t = e.match(g);
                                if (null === t) return "";
                                if (t && t.length > 0 && void 0 !== t.index) return t[1];
                                return ""
                            }(k);
                            r.push({
                                type: p.a.VideoLink,
                                content: {
                                    id: _,
                                    url: k,
                                    displayText: e.slice(d, b)
                                }
                            })
                        } else r.push({
                            type: p.a.Link,
                            content: {
                                displayText: e.slice(d, b),
                                url: k
                            }
                        })
                    }
                    var w = e.slice(b),
                        E = "";
                    s < o.length - 1 && (E = " "), w && r.push({
                        type: p.a.Text,
                        content: (f ? " " : "") + w + E
                    })
                } else {
                    if (!c) {
                        var C = r.length && r[r.length - 1];
                        E = "";
                        if (s < o.length - 1 && (E = " "), C && C.type === p.a.Text) C.content += e + E;
                        else {
                            var N = "";
                            s && (N = " "), r.push({
                                type: p.a.Text,
                                content: N + e + E
                            })
                        }
                        return
                    }
                    var T = c[3];
                    r.push({
                        type: p.a.Mention,
                        content: {
                            sender: t,
                            recipient: T
                        }
                    })
                }
            }), r
        }

        function l(e, t) {
            return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
        }
        var c = n("TToO"),
            u = n("6sO2"),
            d = n("iydZ"),
            p = n("mwvJ"),
            m = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
            h = n("YhVV"),
            g = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?"),
            f = n("e1CU");
        t.a = function(e, t, n, r, o, s) {
            void 0 === s && (s = !1);
            var u;
            u = o ? Object(h.b)(e, o) : function(e) {
                var t = [];
                return e && Object.keys(e).forEach(function(n) {
                    var i = e[n];
                    i.forEach(function(e) {
                        t[e.startIndex] = {
                            startIndex: e.startIndex,
                            endIndex: e.endIndex + 1,
                            data: {
                                images: {
                                    themed: !1,
                                    sources: {
                                        "1x": l(n, 1),
                                        "2x": l(n, 2),
                                        "4x": l(n, 4)
                                    }
                                }
                            }
                        }
                    })
                }), t
            }(t.emotes);
            var d = Object(f.a)(t.displayName, t.username);
            return {
                badges: t.badges || {},
                bits: t.bits,
                user: c.__assign({}, d, {
                    userLogin: t.username,
                    userID: t.userID,
                    userType: t.userType,
                    color: t.color || i(t.userID)
                }),
                messageParts: e ? a(e, u, t.bits, n, r, d.userDisplayName) : [],
                deleted: s,
                timestamp: Date.now()
            }
        }, t.b = i, t.f = a, t.d = r, t.c = s, t.e = l;
        var v = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            b = {}
    },
    l4QG: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Away: "AWAY",
            Busy: "BUSY",
            Idle: "IDLE",
            Invisible: "INVISIBLE",
            Offline: "OFFLINE",
            Online: "ONLINE"
        }
    },
    lK86: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GiftSubscribeButton_Gift_Eligibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recipientLogin"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "subProductId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "recipientLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canGift"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "product"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "subProductId"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 171
            }
        };
        n.loc.source = {
            body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String $subProductId: String!) {\nuser(login: $recipientLogin) {\nid\nself {\ncanGift(product: $subProductId)\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    lpYt: function(e, t) {},
    lw07: function(e, t) {},
    m0Vj: function(e, t) {},
    m4HT: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
        }, t.b = function(e, t) {
            return e.split("_").find(function(e) {
                return e !== t
            }) || null
        }
    },
    mRH2: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportContent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "contentID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 111
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\nreportContent(input: $input) {\ncontentID\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mi6k: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return (t -= e.toString().length) > 0 ? new Array(t + (/\./.test(e.toString()) ? 2 : 1)).join("0") + e : e.toString()
        }
        t.a = function(e, t) {
            var n = Math.floor(e % 60),
                a = Math.floor(e % 3600 / 60),
                r = Math.floor(e / 3600);
            return t && t.zeroPadAll ? i(r, 2) + ":" + i(a, 2) + ":" + i(n, 2) : r ? r + ":" + i(a, 2) + ":" + i(n, 2) : a + ":" + i(n, 2)
        }
    },
    mmQh: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUserCommunity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportUserInCommunityInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportUserInCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\nreportUserInCommunity(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mqvl: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            switch (e.type) {
                case i.b.Playing:
                    return {
                        type: i.a.Playing,
                        "Symbol(id)": t,
                        __typename: "Playing",
                        game: {
                            id: e.game_id,
                            name: e.game,
                            "Symbol(id)": t + ".game",
                            __typename: "Game"
                        }
                    };
                case i.b.Streaming:
                    var n = {
                        type: i.a.Streaming,
                        "Symbol(id)": t,
                        __typename: "Streaming",
                        stream: {
                            id: e.channel_id,
                            game: null,
                            "Symbol(id)": t + ".stream",
                            __typename: "Stream"
                        }
                    };
                    return e.game && e.game_id && (n.stream.game = {
                        id: e.game_id,
                        name: e.game,
                        "Symbol(id)": t + ".stream.game",
                        __typename: "Game"
                    }), n;
                case i.b.Watching:
                    return {
                        type: i.a.Watching,
                        "Symbol(id)": t,
                        __typename: "Watching",
                        user: {
                            id: e.channel_id,
                            login: e.channel_login,
                            displayName: e.channel_display_name,
                            "Symbol(id)": t + ".user",
                            __typename: "User",
                            hosting: {
                                id: e.hosted_channel_id || null,
                                displayName: e.hosted_channel_display_name || null,
                                login: e.hosted_channel_login || null,
                                "Symbol(id)": t + ".user.hosting",
                                __typename: "User"
                            }
                        }
                    };
                default:
                    return null
            }
        };
        var i = n("Ex+h")
    },
    "mw/a": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT"
        }(i || (i = {}))
    },
    mwvJ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Mention = 1] = "Mention", e[e.Link = 2] = "Link", e[e.Emote = 3] = "Emote", e[e.ClipLink = 4] = "ClipLink", e[e.VideoLink = 5] = "VideoLink"
        }(i || (i = {}))
    },
    n7G4: function(e, t) {},
    n9f8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Threads_MarkAllWhispersAsRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateAllWhisperThreadsInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateAllWhisperThreads"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "count"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 130
            }
        };
        n.loc.source = {
            body: "mutation Threads_MarkAllWhispersAsRead($input: UpdateAllWhisperThreadsInput!) {\nupdateAllWhisperThreads(input: $input) {\ncount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nEoF: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        });
        var i = {
                TriHard: {
                    count: 196568036
                },
                Kappa: {
                    count: 192158118
                },
                "4Head": {
                    count: 155758710
                },
                PogChamp: {
                    count: 151485090
                },
                cmonBruh: {
                    count: 146352878
                },
                BibleThump: {
                    count: 56472964
                },
                WutFace: {
                    count: 45069031
                },
                Kreygasm: {
                    count: 41387580
                },
                DansGame: {
                    count: 38097659
                },
                hi5F: {
                    count: 34986404
                },
                SMOrc: {
                    count: 34734484
                },
                KappaPride: {
                    count: 34262839
                },
                VoHiYo: {
                    count: 27886434
                },
                SwiftRage: {
                    count: 24561900
                },
                ResidentSleeper: {
                    count: 24438298
                },
                EleGiggle: {
                    count: 19891526
                },
                FailFish: {
                    count: 19118343
                },
                NotLikeThis: {
                    count: 18802905
                },
                Keepo: {
                    count: 18351415
                },
                BabyRage: {
                    count: 18220906
                },
                MingLee: {
                    count: 18026207
                },
                pbfSSH: {
                    count: 16911241
                },
                forsenE: {
                    count: 14960299
                },
                HeyGuys: {
                    count: 14851569
                },
                ANELE: {
                    count: 14648986
                },
                PJSalt: {
                    count: 14438861
                }
            },
            a = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"]
    },
    nFc2: function(e, t) {},
    nist: function(e, t) {},
    "o/qv": function(e, t, n) {
        "use strict";

        function i() {
            return "twitch.tv" === window.location.hostname || window.location.hostname.endsWith(".twitch.tv")
        }
        t.b = i, t.a = function() {
            if (i()) return ".twitch.tv"
        }
    },
    oFw4: function(e, t) {},
    oH2x: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = a.n.logger.withCategory("auth"),
                t = Object(s.b)();
            if ("/passport-callback" !== window.location.pathname) {
                if (!t && Object(l.b)()) return e.debug("No legacy CSRF token found."), void a.n.store.dispatch(Object(o.a)());
                var n = Object(s.d)(e);
                if (n) n.version === s.a ? (e.debug("Using existing user cookie."), a.n.store.dispatch(Object(o.d)({
                    authToken: n.authToken,
                    displayName: n.displayName,
                    id: n.id,
                    legacyCSRFToken: t,
                    login: n.login,
                    roles: n.roles
                }))) : (e.debug("User cookie version mismatch. Refreshing with auth token."), a.n.store.dispatch(Object(o.c)(n.authToken, t)));
                else {
                    if (t) return e.debug("Using legacy API token."), void a.n.store.dispatch(Object(o.b)(t));
                    e.debug("No user data found."), a.n.store.dispatch(Object(o.a)())
                }
            } else ! function(e, t) {
                t.debug("Handling passport callback.");
                var n = function(e, t) {
                    var n = i.parse(e);
                    if (n) try {
                        var a = JSON.parse(n.state);
                        return {
                            next: a.next,
                            nonce: a.nonce,
                            token: n.access_token
                        }
                    } catch (e) {
                        t.error(e, "Failed to parse incoming state.")
                    }
                }(window.location.hash, t);
                if (!n) return t.debug("Got invalid data from passport, removing existing auth data and reloading."), Object(s.e)(), a.n.store.dispatch(Object(o.a)()), void a.n.history.replace("/");
                var l = document.createElement("a");
                if (l.href = n.next, l.hostname === window.location.hostname) {
                    var c = Object(s.c)(t);
                    if (!c) return t.debug("No passport state cookie found, aborting."), a.n.store.dispatch(Object(o.a)()), void a.n.history.replace("/");
                    Object(s.f)();
                    try {
                        if (c.nonce !== n.nonce) return t.error(new Error("Login nonce mismatch."), "Login nonce mismatch."), a.n.store.dispatch(Object(o.a)()), void a.n.history.replace("/")
                    } catch (e) {
                        return t.error(e, "Failed to parse session storage state."), a.n.store.dispatch(Object(o.a)()), void a.n.history.replace("/")
                    }
                    a.n.store.dispatch(Object(o.c)(n.token, e)), a.n.history.replace(l.pathname + l.search)
                } else a.a.buildType !== r.a.Production || "twitch.tv" === l.hostname || l.hostname.endsWith(".twitch.tv") ? window.location.assign(l.protocol + "//" + l.host + window.location.pathname + window.location.search + window.location.hash) : (t.error(new Error("Attempted to redirect away from site."), "Attempted to redirect away from site."), a.n.store.dispatch(Object(o.a)()), a.n.history.replace("/"))
            }(t, e)
        };
        var i = n("OAwv"),
            a = (n.n(i), n("6sO2")),
            r = n("Ejve"),
            o = n("f2i/"),
            s = n("bejq"),
            l = n("o/qv")
    },
    oI0V: function(e, t) {},
    oIkB: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = new Set(e.map(function(e) {
                return e.node.id
            }));
            return e.concat(t.filter(function(e) {
                return !n.has(e.node.id)
            }))
        }, t.a = function(e) {
            return {
                variables: {
                    input: e
                }
            }
        }, t.d = function(e, t, n, r) {
            void 0 === t && (t = {});
            try {
                var o = a.n.apollo.client.readQuery({
                    query: e,
                    variables: t
                });
                if (r && r(o)) return;
                var s = i(o, function(e) {
                    return e
                }, function(e) {
                    return n(e)
                });
                a.n.apollo.client.writeQuery({
                    query: e,
                    variables: t,
                    data: s
                })
            } catch (e) {
                a.i.warn("Failed writing updated query to Apollo", e)
            }
        }, t.c = function(e) {
            try {
                var t = e.id,
                    n = e.fragment,
                    r = e.mutator,
                    o = a.n.apollo.client.readFragment({
                        id: t,
                        fragment: n
                    }),
                    s = i(o, function(e) {
                        return e
                    }, function(e) {
                        return r(e)
                    });
                a.n.apollo.client.writeFragment({
                    fragment: n,
                    id: t,
                    data: s
                })
            } catch (e) {
                a.i.warn("Failed writing updated query to Apollo", e)
            }
        };
        var i = n("LIeg"),
            a = (n.n(i), n("6sO2"))
    },
    oM0L: function(e, t) {},
    oSFp: function(e, t, n) {
        "use strict";
        var i = n("A5Hr"),
            a = n("TToO"),
            r = n("U7vG"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("+8VM"),
            c = n("V5M+"),
            u = n("CSlQ"),
            d = n("Odds"),
            p = (n("oFw4"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClose = function(e) {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(e)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(d._19, {
                        className: "reporting-modal__container",
                        background: d.m.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, r.createElement(i.a, {
                        onClose: this.handleClose,
                        reportContext: this.props.reportContext,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    }), r.createElement(l.a, null))
                }, t
            }(r.Component)),
            m = Object(s.compose)(Object(u.c)("ReportUserModal"), Object(o.a)(null, function(e) {
                return Object(s.bindActionCreators)({
                    closeModal: c.c
                }, e)
            }))(p);
        n.d(t, !1, function() {}), n.d(t, !1, function() {
            return i.a
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return m
        })
    },
    oWcd: function(e, t) {},
    ozx1: function(e, t) {},
    p6Rc: function(e, t) {},
    p8c9: function(e, t) {},
    pP2G: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("JVK9");
        a.n.store.registerReducer("ads", function(e, t) {
            switch (void 0 === e && (e = {
                trackingSet: !1
            }), t.type) {
                case r.a:
                    return i.__assign({}, e, {
                        trackingSet: !0
                    });
                default:
                    return e
            }
        });
        n("Iw4B"), n("Aj/L"), n("0nzt")
    },
    pQNb: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            o = n("FDYX"),
            s = n("Odds"),
            l = (n("Z+EN"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.hasDiscount(this.props.subscriptionProducts)) {
                        var e = this.getMessage();
                        return a.createElement(s._19, {
                            textAlign: s._24.Center,
                            className: "sub-discount-banner",
                            padding: 1,
                            color: s.F.Overlay,
                            "data-test-selector": "sub-discount-banner"
                        }, a.createElement(s._23, {
                            bold: !0
                        }, e))
                    }
                    return null
                }, t.prototype.getMessage = function() {
                    var e = Object(o.b)(this.props.subscriptionProducts[0], this.props.isGift);
                    return this.props.isGift ? Object(r.d)("Gift a sub and get {percent} off!", {
                        percent: Object(r.e)(e / 100, "percent")
                    }, "SubDiscountBanner") : Object(r.d)("Get {percent} off the first month of any paid subscription!", {
                        percent: Object(r.e)(e / 100, "percent")
                    }, "SubDiscountBanner")
                }, t.prototype.hasDiscount = function(e) {
                    return this.props.isGift ? Object(o.c)(e) : Object(o.d)(e)
                }, t
            }(a.Component));
        n.d(t, !1, function() {
            return "sub-discount-banner"
        }), n.d(t, "a", function() {
            return l
        })
    },
    "pk+c": function(e, t) {},
    pna9: function(e, t) {},
    py4c: function(e, t) {},
    qPr7: function(e, t) {},
    qe65: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("RH2O"),
            o = n("NXs7"),
            s = n("0nzt"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = (e.defaultRes, e.sources),
                        n = (e.darkModeEnabled, i.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                        r = this.props.darkModeEnabled ? t.dark : t.light,
                        o = Object.keys(r);
                    delete n.dispatch;
                    var s = i.__assign({}, n, {
                        src: r[this.props.defaultRes || o[0]],
                        srcSet: o.map(function(e) {
                            return r[e] + " " + e
                        }).join(",")
                    });
                    return a.createElement("img", i.__assign({}, s, {
                        onLoad: this.props.onLoad
                    }))
                }, t
            }(a.Component),
            c = Object(r.a)(function(e) {
                return {
                    darkModeEnabled: Object(s.a)(e) === o.a.Dark
                }
            })(l);
        n.d(t, "a", function() {
            return c
        })
    },
    qpaC: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ArchiveThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isArchived"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "mutation Thread_ArchiveThread($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nisArchived\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "qzJ+": function(e, t, n) {
        "use strict";

        function i(e) {
            try {
                return r.n.apollo.client.readQuery({
                    query: p,
                    variables: {
                        id: e
                    }
                }).whisperThread
            } catch (e) {
                return null
            }
        }
        var a = n("TToO"),
            r = n("6sO2"),
            o = n("oIkB"),
            s = n("HM6l"),
            l = n("9RMu"),
            c = n("l21v"),
            u = n("BVQ1"),
            d = n("m4HT"),
            p = n("+gWs");
        t.a = function(e) {
            var t = e.currentUserID,
                n = e.emotes,
                m = e.message,
                h = e.recipientUserID;
            if ("" === t || "" === m || "" === h) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
            var g = Object(s.b)(),
                f = a.__assign({
                    mutation: u
                }, Object(o.a)({
                    message: m,
                    nonce: g,
                    recipientUserID: h
                })),
                v = Object(d.a)(t, h),
                b = i(v);
            if (b) {
                var y = function(e, t) {
                    for (var n = [], i = /\S+/g, a = i.exec(e); a;) {
                        var r = a[0],
                            o = t[r];
                        if (o) {
                            var s = Object(c.d)(e.slice(0, a.index)),
                                l = s ? s.length : a.index;
                            n.push({
                                id: o.id,
                                start: l,
                                end: l + r.length - 1
                            })
                        }
                        a = i.exec(e)
                    }
                    return n
                }(m, n).map(l.a);
                f.optimisticResponse = {
                    sendWhisper: {
                        __typename: "SendWhisperPayload",
                        message: {
                            content: {
                                content: m,
                                emotes: y,
                                __typename: "MessageBody"
                            },
                            from: {
                                id: t,
                                __typename: "User"
                            },
                            id: g,
                            sentAt: (new Date).toISOString(),
                            deletedAt: null,
                            editedAt: null,
                            __typename: "WhisperMessage"
                        }
                    }
                }, f.update = function(e, t) {
                    var n = "" + (parseInt(b.messages.edges[0].cursor, 10) + 1) || "";
                    if (t.data) {
                        var a = i(v);
                        if (a) {
                            var r = a.messages.edges.findIndex(function(e) {
                                return e.cursor === n
                            });
                            if (r < 0) {
                                var o = {
                                    cursor: n,
                                    node: t.data.sendWhisper.message,
                                    __typename: "WhisperMessageEdge"
                                };
                                a.messages.edges.unshift(o)
                            } else a.messages.edges[r].node = t.data.sendWhisper.message;
                            a.userLastMessageRead.sentAt = t.data.sendWhisper.message.sentAt, a.unreadMessagesCount = 0, e.writeQuery({
                                query: p,
                                data: {
                                    whisperThread: a
                                }
                            })
                        }
                    }
                }
            }
            return r.n.apollo.client.mutate(f)
        }
    },
    rCmJ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        t.container = e
                    }, t.handleGlobalClick = function(e) {
                        var n = e.target;
                        t.isParentOf(n) || t.props.onClickOut(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = (e.onClickOut, i.__rest(e, ["onClickOut"]));
                    return a.createElement("div", i.__assign({}, t, {
                        ref: this.setContainerRef
                    }), this.props.children)
                }, t.prototype.isParentOf = function(e) {
                    for (var t = e; t;) {
                        if (t === this.container) return !0;
                        t = t.parentElement
                    }
                    return !1
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return r
        })
    },
    rK5D: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "c", function() {
            return l
        });
        var i, a = n("TToO"),
            r = n("6sO2"),
            o = n("vH/s");
        ! function(e) {
            e.Chat = "chat", e.SocialColumn = "socialcolumn"
        }(i || (i = {}));
        var s;
        ! function(e) {
            e.Close = "close", e.Open = "open"
        }(s || (s = {}));
        var l = function(e) {
            var t = a.__assign({
                action_type: "click"
            }, e);
            r.m.track(o.SpadeEventType.SiteLayoutMod, t)
        }
    },
    rM0q: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Current_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 50
            }
        };
        n.loc.source = {
            body: "query Current_User {\ncurrentUser {\nid\nhasPrime\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    rRWv: function(e, t) {},
    rWzl: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    rZAm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Search_SearchGameResultCard_Game"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "game"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "name"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "boxArtURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "40"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "55"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 115
            }
        };
        n.loc.source = {
            body: "query Search_SearchGameResultCard_Game($name: String!) {\ngame(name: $name) {\nid\nboxArtURL(width: 40 height: 55)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    rbXT: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "language"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 93
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_CurrentUser {\ncurrentUser {\nid\nlogin\nhasTurbo\nhasPrime\nlanguage\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    rhaD: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("TToO"),
            a = n("Ejve"),
            r = n("ZEbP"),
            o = n("plEf"),
            s = n("1Tgx");
        window.IntlMessageFormat = o, window.IntlRelativeFormat = s;
        var l = "https://api.twitch.tv",
            c = "https://gql.twitch.tv",
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.buildType = a.a.Production, t.apiBaseURL = l, t.graphqlEndpoint = c + "/gql", t.sentinelEndpoint = "https://sentinel.twitchsvc.net/error-report", t.defaultSpadeEndpoint = "https://spade.twitch.tv/track", t.authClientID = "kimne78kx3ncx6brgo4mv6wki5h1ko", t.passportRedirectURI = "https://go.twitch.tv/passport-callback", t.pubsubTopicUploadPrefix = "pubsub.upload", t.mixpanelToken = "809576468572134f909dffa6bd0dcfcf", t
                }
                return i.__extends(t, e), t
            }(function() {
                return function() {
                    this.optimizedBuild = !0, this.embedded = void 0, this.buildID = window.__twilightBuildID || "00000000-0000-0000-0000-000000000000", this.spadeBatchWindow = 1e3, this.locales = [{
                        name: "English",
                        languageCode: "en",
                        locale: "en-US",
                        loader: function() {
                            return Promise.resolve({
                                formatData: {
                                    numberShort: r,
                                    intlMessageFormatKey: "en"
                                }
                            })
                        },
                        default: !0
                    }, {
                        name: "Dansk",
                        languageCode: "da",
                        locale: "da-DK",
                        loader: function() {
                            return n.e(26).then(n.bind(null, "upzD"))
                        }
                    }, {
                        name: "Deutsch",
                        languageCode: "de",
                        locale: "de-DE",
                        loader: function() {
                            return n.e(25).then(n.bind(null, "8UKq"))
                        }
                    }, {
                        name: "English - UK",
                        languageCode: "en-gb",
                        locale: "en-GB",
                        loader: function() {
                            return n.e(30).then(n.bind(null, "q3oo"))
                        }
                    }, {
                        name: "Español - España",
                        languageCode: "es",
                        locale: "es-ES",
                        loader: function() {
                            return n.e(22).then(n.bind(null, "HuVx"))
                        }
                    }, {
                        name: "Español - Latinoamérica",
                        languageCode: "es-mx",
                        locale: "es-MX",
                        loader: function() {
                            return n.e(23).then(n.bind(null, "q7em"))
                        }
                    }, {
                        name: "Français",
                        languageCode: "fr",
                        locale: "fr-FR",
                        loader: function() {
                            return n.e(20).then(n.bind(null, "oicQ"))
                        }
                    }, {
                        name: "Italiano",
                        languageCode: "it",
                        locale: "it-IT",
                        loader: function() {
                            return n.e(17).then(n.bind(null, "OdBR"))
                        }
                    }, {
                        name: "Magyar",
                        languageCode: "hu",
                        locale: "hu-HU",
                        loader: function() {
                            return n.e(18).then(n.bind(null, "U+bT"))
                        }
                    }, {
                        name: "Nederlands",
                        languageCode: "nl",
                        locale: "nl-NL",
                        loader: function() {
                            return n.e(14).then(n.bind(null, "Rk/Q"))
                        }
                    }, {
                        name: "Norsk",
                        languageCode: "no",
                        locale: "no-NO",
                        loader: function() {
                            return n.e(13).then(n.bind(null, "6T36"))
                        },
                        cldrLocale: "nn"
                    }, {
                        name: "Polski",
                        languageCode: "pl",
                        locale: "pl-PL",
                        loader: function() {
                            return n.e(12).then(n.bind(null, "MrAg"))
                        }
                    }, {
                        name: "Português",
                        languageCode: "pt",
                        locale: "pt-PT",
                        loader: function() {
                            return n.e(10).then(n.bind(null, "D5sO"))
                        },
                        cldrLocale: "pt-pt"
                    }, {
                        name: "Português - Brasil",
                        languageCode: "pt-br",
                        locale: "pt-BR",
                        loader: function() {
                            return n.e(11).then(n.bind(null, "j/Ed"))
                        },
                        cldrLocale: "pt"
                    }, {
                        name: "Slovenčina",
                        languageCode: "sk",
                        locale: "sk-SK",
                        loader: function() {
                            return n.e(7).then(n.bind(null, "HsP5"))
                        }
                    }, {
                        name: "Suomi",
                        languageCode: "fi",
                        locale: "fi-FI",
                        loader: function() {
                            return n.e(21).then(n.bind(null, "IY8u"))
                        }
                    }, {
                        name: "Svenska",
                        languageCode: "sv",
                        locale: "sv-SE",
                        loader: function() {
                            return n.e(6).then(n.bind(null, "FMvw"))
                        }
                    }, {
                        name: "Tiếng Việt",
                        languageCode: "vi",
                        locale: "vi-VN",
                        loader: function() {
                            return n.e(3).then(n.bind(null, "eSjI"))
                        }
                    }, {
                        name: "Türkçe",
                        languageCode: "tr",
                        locale: "tr-TR",
                        loader: function() {
                            return n.e(4).then(n.bind(null, "y/8H"))
                        }
                    }, {
                        name: "Čeština",
                        languageCode: "cs",
                        locale: "cs-CZ",
                        loader: function() {
                            return n.e(27).then(n.bind(null, "7w/k"))
                        }
                    }, {
                        name: "Ελληνικά",
                        languageCode: "el",
                        locale: "el-GR",
                        loader: function() {
                            return n.e(24).then(n.bind(null, "60Nr"))
                        }
                    }, {
                        name: "Български",
                        languageCode: "bg",
                        locale: "bg-BG",
                        loader: function() {
                            return n.e(28).then(n.bind(null, "AuY2"))
                        }
                    }, {
                        name: "Русский",
                        languageCode: "ru",
                        locale: "ru-RU",
                        loader: function() {
                            return n.e(8).then(n.bind(null, "BmrF"))
                        }
                    }, {
                        name: "العربية",
                        languageCode: "ar",
                        locale: "ar-SA",
                        loader: function() {
                            return n.e(29).then(n.bind(null, "edg0"))
                        }
                    }, {
                        name: "ภาษาไทย",
                        languageCode: "th",
                        locale: "th-TH",
                        loader: function() {
                            return n.e(5).then(n.bind(null, "/QRT"))
                        }
                    }, {
                        name: "中文 简体",
                        languageCode: "zh-cn",
                        locale: "zh-CN",
                        loader: function() {
                            return n.e(2).then(n.bind(null, "pn/1"))
                        },
                        cldrLocale: "zh-hans"
                    }, {
                        name: "中文 繁體",
                        languageCode: "zh-tw",
                        locale: "zh-TW",
                        loader: function() {
                            return n.e(1).then(n.bind(null, "0y5z"))
                        },
                        cldrLocale: "zh-hant"
                    }, {
                        name: "日本語",
                        languageCode: "ja",
                        locale: "ja-JP",
                        loader: function() {
                            return n.e(16).then(n.bind(null, "bxdU"))
                        }
                    }, {
                        name: "한국어",
                        languageCode: "ko",
                        locale: "ko-KR",
                        loader: function() {
                            return n.e(15).then(n.bind(null, "dW+O"))
                        }
                    }, {
                        name: "हिंदी",
                        languageCode: "hi",
                        locale: "hi-IN",
                        loader: function() {
                            return n.e(19).then(n.bind(null, "rfGJ"))
                        }
                    }, {
                        name: "Română",
                        languageCode: "ro",
                        locale: "ro-RO",
                        loader: function() {
                            return n.e(9).then(n.bind(null, "TkpZ"))
                        }
                    }], this.passportAuthURL = "https://api.twitch.tv/kraken/oauth2/authorize", this.passportScopes = ["chat_login", "user_read", "user_subscriptions", "user_presence_friends_read"], this.defaultAvatarURL = "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_70x70.png", this.defaultStreamPreviewURL = "https://static-cdn.jtvnw.net/ttv-static/404_preview-160x90.jpg", this.defaultBoxArtURL = "https://static-cdn.jtvnw.net/ttv-boxart/404_boxart.png", this.defaultCollectionPreviewURL = "https://static-cdn.jtvnw.net/ttv-playlists-thumbnails-prod/missing-video-thumb-320x180.png", this.hostingCacheDelay = 2001, this.legacyClientID = "jzkbprff40iqj646a697cyrvl0zt2m6", this.algoliaApplicationID = "XLUO134HOR", this.algoliaAPIKey = "d157112f6fc2cab93ce4b01227c80a6d", this.forceNetworkLogging = !1, this.networkLoggingHostNames = ["twitch.tv", "localhost", "jtvnw.net", "twitchcdn.net", "twitchcdn.tech", "twitchcdn-shadow.net", "twitchsvc.net", "twitchsvc.tech", "twitchsvc-shadow.net"], this.defaultNetworkLoggingThreshold = .2, this.layoutCacheKey = "TwitchCache:Layout", this.forceComponentBenchmarking = !1, this.defaultComponentBenchmarkingThreshold = .1, this.forceBenchmarkingTools = !1, this.dfpNetworkCode = "3576121", this.krakenEndpoint = "https://api.twitch.tv/kraken", this.defaultAPIVersion = "5", this.adblockAccount = 58, this.adblockID = "qFEaZsFQnwEdUIs", this.forceMinConsoleLogLevelKey = "twilight.minConsoleLogLevel", this.tryPrimeURI = "https://twitch.amazon.com/prime", this.experimentsOverrideCookie = "experiment_overrides", this.tmiHost = "irc-ws.chat.twitch.tv", this.persistentPlayerEnabledKey = "persistenceEnabled", this.manifestURL = "https://static.twitchcdn.net/config/manifest.json", this.cdnURL = "https://static.twitchcdn.net/"
                }
            }()),
            d = n("J4ib");
        Object(d.i)(new u)
    },
    rxEr: function(e, t) {},
    s3R1: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = rt.exec(e);
            if (t) return t[1] + "." + t[2]
        }

        function a(e, t) {
            return f.__awaiter(this, void 0, void 0, function() {
                var n, a, r, o, s, l, c, d, p, m, h, g;
                return f.__generator(this, function(f) {
                    switch (f.label) {
                        case 0:
                            for (n = u.n.dynamicSettings.get(at, []), a = {
                                    headers: new Headers({
                                        "Content-Type": "application/octet-stream"
                                    })
                                }, r = [], o = 0, s = e; o < s.length; o++) l = s[o], (c = i(l)) && n.includes(c) && r.push(fetch("" + u.n.config.cdnURL + l, a));
                            return 0 === r.length ? [2, !1] : [4, Promise.all(r)];
                        case 1:
                            for (d = f.sent(), p = !1, m = 0, h = d; m < h.length; m++)(g = h[m]).ok || (p = !0, t.warn("Failed to preload chunk.", {
                                status: g.status,
                                url: g.url
                            }));
                            return [2, !p]
                    }
                })
            })
        }

        function r() {
            u.n.mount(l.createElement(c.c, {
                history: u.n.history
            }, l.createElement(kt, null)), document.getElementById("root"))
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var o, s, l = n("U7vG"),
            c = n("CIox"),
            u = n("6sO2"),
            d = n("f2i/"),
            p = n("Aj/L"),
            m = n("oH2x"),
            h = n("RH2O"),
            g = n("0nzt"),
            f = n("TToO"),
            v = n("F8kA"),
            b = n("bZTi"),
            y = n("ZyA2"),
            k = n("Ejve"),
            S = n("VAT8"),
            _ = n("Us7i"),
            w = n("2KeS"),
            E = n("JVK9"),
            C = n("OAwv"),
            N = n("7vx8"),
            T = n("QG7y"),
            O = n("XTs4"),
            I = "https://www.googletagservices.com/tag/js/gpt.js",
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = u.n.logger.withCategory("ad-manager"), t.injectGoogletag = function(e) {
                        if (0 === t.containerRef.children.length) {
                            t.isInjected = !0;
                            var n = document.createElement("script");
                            n.async = !0, n.src = I, t.containerRef.appendChild(n), _.a.initialize(T.i);
                            var i = C.parse(window.location.search).campaign || "";
                            i && t.logger.debug("Setting campaign", i), _.a.setAppWideTracking("campaign", i), _.a.setAppWideTracking("server", u.a.buildType === k.a.Production ? "production" : "dev"), _.a.setAppWideTracking("salt", "true"), _.a.setAppWideTracking("kuid", window.Krux && window.Krux.user || ""), _.a.setAppWideTracking("loggedin", e.data.currentUser ? "true" : "false"), e.trackingSet(), t.logger.debug("Tracking is set")
                        }
                    }, t.setContainerRef = function(e) {
                        return t.containerRef = e
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.shouldInjectGoogletag(this.props) && this.injectGoogletag(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.shouldInjectGoogletag(e) && this.injectGoogletag(e)
                }, t.prototype.shouldComponentUpdate = function() {
                    return !1
                }, t.prototype.render = function() {
                    return l.createElement("div", {
                        ref: this.setContainerRef
                    })
                }, t.prototype.shouldInjectGoogletag = function(e) {
                    var t = !e.data.loading && !e.data.error,
                        n = e.data.currentUser && (e.data.currentUser.hasTurbo || e.data.currentUser.hasPrime);
                    return !this.isInjected && t && !n
                }, t = f.__decorate([Object(N.a)(O)], t)
            }(l.Component),
            L = Object(h.a)(null, function(e) {
                return Object(w.bindActionCreators)({
                    trackingSet: E.b
                }, e)
            })(D),
            x = n("WbwR"),
            R = n("cVFG"),
            F = n("lbHh"),
            P = n("o/qv"),
            U = n("0Ng3"),
            M = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.checkImpactCookie(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.checkImpactCookie(e)
                }, t.prototype.shouldComponentUpdate = function() {
                    return !1
                }, t.prototype.render = function() {
                    return null
                }, t.prototype.checkImpactCookie = function(e) {
                    e.data && e.data.currentUser && e.data.currentUser.roles && !F.get("impact_excluded") && (e.data.currentUser.roles.isAffiliate || e.data.currentUser.roles.isPartner || e.data.currentUser.roles.isSiteAdmin || e.data.currentUser.roles.isStaff) && F.set("impact_excluded", "1", {
                        expires: 90,
                        domain: Object(P.a)(),
                        secure: "https:" === window.location.protocol
                    })
                }, t
            }(l.Component),
            A = Object(N.a)(U)(M),
            V = n("CSlQ"),
            j = n("MSvX"),
            H = n("08LF"),
            B = n("GfPd"),
            z = n("+xm8"),
            W = n("Qk3C"),
            q = n("+Znq"),
            G = n("vH/s"),
            Q = n("0Mfl"),
            K = n("DBTH"),
            $ = n("U3i2"),
            Z = Object(h.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    languageCode: e.session.languageCode,
                    currentUser: Object(p.c)(e)
                }
            })($.b),
            Y = n("6BvN"),
            J = n("HM6l"),
            X = n("MAZT"),
            ee = n("uTyw"),
            te = n("rCmJ"),
            ne = n("HW6M"),
            ie = n("zCIC"),
            ae = n("czpb"),
            re = n("SZoP"),
            oe = n("mi6k"),
            se = n("7Nlu"),
            le = n("5kgt"),
            ce = n("Odds"),
            ue = (n("afun"), n("y+bN")),
            de = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return f.__extends(t, e), t.prototype.render = function() {
                    var e, t = {
                        "search-live-result-card": !0,
                        "search-live-result-card--hover": this.props.borderHover
                    };
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.user.stream && (e = this.props.data.user.stream.previewImageURL), l.createElement(ce.V, {
                        className: ne(t),
                        key: this.props.id,
                        fullWidth: !0
                    }, l.createElement(ce.T, f.__assign({
                        linkTo: this.props.linkTo,
                        hover: this.props.borderHover,
                        tabIndex: -1,
                        "data-a-target": "search-live-result-card-link"
                    }, Object(le.a)(this.props)), l.createElement(ce.A, null, l.createElement(ce.V, {
                        className: "search-live-result-card__wrapper",
                        position: ce._4.Relative,
                        overflow: ce._0.Hidden,
                        fullWidth: !0
                    }, l.createElement(ce.C, {
                        imageSrc: e || u.a.defaultStreamPreviewURL,
                        imageAlt: this.props.imageAlt,
                        aspect: ce.k.Aspect16x9
                    }), l.createElement(ce._19, {
                        className: "search-live-result-card__overlay",
                        position: ce._4.Absolute,
                        attachLeft: !0,
                        attachTop: !0,
                        attachRight: !0,
                        attachBottom: !0,
                        display: ce.H.Flex,
                        flexDirection: ce.J.Column,
                        justifyContent: ce.U.End,
                        overflow: ce._0.Hidden,
                        color: ce.F.Overlay
                    }, l.createElement(ce.B, null, l.createElement(ce.V, {
                        className: "search-live-result-card__body",
                        padding: .5
                    }, l.createElement(ce._23, {
                        type: ce._28.H5,
                        ellipsis: !0,
                        className: "search-live-result-card__title"
                    }, this.props.channelName), l.createElement(ce.V, {
                        className: "search-live-result-card__viewer-count-container",
                        display: ce.H.Flex,
                        alignItems: ce.c.Center
                    }, l.createElement(ce.V, {
                        margin: {
                            right: .5
                        },
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        flexShrink: 0
                    }, l.createElement(ce._10, {
                        asset: ce._11.GlyphLive,
                        type: ce._12.Live,
                        width: 14,
                        height: 14
                    })), l.createElement(ce._23, {
                        className: "search-live-result-card__viewer-count",
                        ellipsis: !0
                    }, Object(u.e)(this.props.viewerCount))), l.createElement(ce._23, {
                        className: "search-live-result-card__info",
                        ellipsis: !0
                    }, this.props.title))))))))
                }, t = f.__decorate([Object(N.a)(ue, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.login
                            }
                        }
                    }
                })], t)
            }(l.Component),
            pe = (n("H9qc"), function(e) {
                var t, n, i;
                e.title && (e.hitsCount && e.hitsCount > 0 ? t = Object(u.d)("more", "SearchResultSection") : e.totalHitsCount && e.totalHitsCount > 0 && (t = Object(u.d)("Show", "SearchResultSection")), void 0 !== e.totalHitsCount && (i = l.createElement(ce._1, {
                    type: ce._2.Brand,
                    label: e.totalHitsCount < 100 ? Object(u.e)(e.totalHitsCount) : "99+"
                })), n = l.createElement(ce.V, {
                    className: "search-result-section__titlesep"
                }, l.createElement(ce.T, f.__assign({
                    onClick: e.onHeaderClick,
                    tabIndex: -1,
                    alpha: !0
                }, Object(ce._40)(e), {
                    "data-ts_selectable": !0
                }), l.createElement(ce.V, {
                    display: ce.H.Flex,
                    padding: {
                        left: 1,
                        right: 2,
                        y: .5
                    }
                }, l.createElement(ce.V, {
                    display: ce.H.Inline,
                    margin: {
                        right: 1
                    }
                }, l.createElement(ce._23, {
                    type: ce._28.Span,
                    color: ce.F.Link,
                    fontSize: ce.L.Size7,
                    transform: ce._27.Uppercase
                }, e.title)), l.createElement("div", null, i), l.createElement(ce.V, {
                    textAlign: ce._24.Right,
                    flexGrow: 1
                }, l.createElement(ce._23, {
                    fontSize: ce.L.Size7,
                    transform: ce._27.Uppercase
                }, t))))));
                var a;
                return (Array.isArray(e.children) && e.children.length > 0 || e.children && !Array.isArray(e.children)) && (a = l.createElement(ce.V, {
                    className: "search-result-section__listing-wrapper",
                    margin: {
                        top: .5,
                        bottom: .5
                    }
                }, e.children)), l.createElement("div", {
                    className: "search-result-section__block"
                }, n, a)
            }),
            me = (n("oI0V"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return f.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(ce._19, {
                        className: "search-title-bar " + (this.props.showBack ? "search-title-bar--show" : ""),
                        background: ce.m.Alt2,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        position: ce._4.Relative,
                        zIndex: ce._39.Above,
                        borderBottom: !0,
                        "data-a-target": "nav-search-title-bar"
                    }, l.createElement(ce.V, {
                        className: "search-title-bar__back-container",
                        display: ce.H.Flex,
                        alignContent: ce.b.Stretch
                    }, l.createElement(ce.v, {
                        icon: ce._11.AngleLeft,
                        type: ce.w.Secondary,
                        size: ce.x.Large,
                        onClick: this.props.onBackClick,
                        ariaLabel: Object(u.d)("Back button", "SearchTitleBar"),
                        "data-ts_selectable": this.props.showBack,
                        "data-a-target": "nav-search-back"
                    })), l.createElement(ce.V, {
                        className: "search-title-bar__title",
                        position: ce._4.Relative,
                        padding: {
                            left: 1
                        }
                    }, l.createElement(ce._23, {
                        fontSize: ce.L.Size5
                    }, this.props.title)))
                }, t
            }(l.Component)),
            he = n("PHcJ"),
            ge = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleOptionChange = function(e) {
                        var n = e.currentTarget.elements;
                        t.props.onOptionsChange({
                            type: +n.type.value,
                            length: +n.video_length.value,
                            sort: +n.sort.value
                        })
                    }, t
                }
                return f.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(ce._19, {
                        className: "search__video-filters",
                        background: ce.m.Alt,
                        padding: {
                            top: .5,
                            x: 1
                        }
                    }, l.createElement(ce.Q, {
                        display: ce.H.Flex,
                        justifyContent: ce.U.Between
                    }, l.createElement("form", {
                        onInput: this.handleOptionChange
                    }, l.createElement(ce.V, {
                        padding: {
                            bottom: .5
                        },
                        flexShrink: 0
                    }, l.createElement(ce.V, {
                        display: ce.H.InlineFlex,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._16, {
                        name: "type"
                    }, l.createElement("option", {
                        value: he.c.AllVideos
                    }, Object(u.d)("All Videos", "search__video-filters")), l.createElement("option", {
                        value: he.c.PastBroadcasts
                    }, Object(u.d)("Past Broadcasts", "search__video-filters")), l.createElement("option", {
                        value: he.c.Uploads
                    }, Object(u.d)("Uploads", "search__video-filters")), l.createElement("option", {
                        value: he.c.Highlights
                    }, Object(u.d)("Highlights", "search__video-filters")))), l.createElement(ce.V, {
                        display: ce.H.InlineFlex
                    }, l.createElement(ce._16, {
                        name: "video_length"
                    }, l.createElement("option", {
                        value: he.a.AnyLength
                    }, Object(u.d)("Any Length", "search__video-filters")), l.createElement("option", {
                        value: he.a.Short
                    }, Object(u.d)("Short", "search__video-filters")), l.createElement("option", {
                        value: he.a.Long
                    }, Object(u.d)("Long", "search__video-filters"))))), l.createElement(ce.V, {
                        padding: {
                            bottom: .5
                        },
                        display: ce.H.InlineFlex,
                        flexShrink: 0
                    }, l.createElement(ce._16, {
                        name: "sort"
                    }, l.createElement("option", {
                        value: he.b.Popular
                    }, Object(u.d)("Popular", "search__video-filters")), l.createElement("option", {
                        value: he.b.Newest
                    }, Object(u.d)("Newest", "search__video-filters")))))))
                }, t
            }(l.Component),
            fe = n("5LoI"),
            ve = (n("FroJ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBackClick = function() {
                        return t.headerSelect(null)
                    }, t.gameHeaderSelect = function() {
                        return t.headerSelect(fe.a.Games)
                    }, t.liveHeaderSelect = function() {
                        return t.headerSelect(fe.a.Channels)
                    }, t.userHeaderSelect = function() {
                        return t.headerSelect(fe.a.Users)
                    }, t.videoHeaderSelect = function() {
                        return t.headerSelect(fe.a.Videos)
                    }, t.communityHeaderSelect = function() {
                        return t.headerSelect(fe.a.Communities)
                    }, t.headerSelect = function(e) {
                        t.props.onCategorySelected(e)
                    }, t.onClick = function(e) {
                        if (e.nativeEvent.stopImmediatePropagation(), e.target !== e.currentTarget) {
                            var n = e.target,
                                i = n.querySelector("a"),
                                a = i ? i.querySelector("[data-tt_content]") : null;
                            a || (i = n.closest("a")), (a = i && i.dataset.tt_content ? i : null) && t.props.onResultSelected()
                        }
                    }, t.setScrollRef = function(e) {
                        return t.scroll = e
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.previousCategory !== this.props.currentCategory && (this.previousCategory = this.props.currentCategory, this.scroll.scrollToTop())
                }, t.prototype.render = function() {
                    var e, t = {
                        "search-results-panel": !0,
                        "search-results-panel--active": !0,
                        "search-results-panel--closed": !this.props.isOpen,
                        "search-results-panel--filtered": this.props.currentCategory === fe.a.Videos
                    };
                    e = this.props.currentCategory && null !== this.props.currentCategory ? l.createElement(me, {
                        title: this.getCategoryTitle(this.props.currentCategory),
                        showBack: !0,
                        onBackClick: this.onBackClick
                    }) : l.createElement(me, {
                        title: Object(u.d)("Top Results", "SearchResultPanel__titlebar"),
                        showBack: !1
                    });
                    var n;
                    n = this.props.isWaiting ? l.createElement(ce.Z, {
                        fillContent: !0
                    }) : this.props.isErrored ? this.getErrorMessage() : this.props.currentCategory && null !== this.props.currentCategory ? this.getCategoryDrillDown(this.props.currentCategory) : this.props.gameResults && this.props.gameResults.totalHits > 0 || this.props.userResults && this.props.userResults.totalHits > 0 || this.props.communityResults && this.props.communityResults.totalHits > 0 || this.props.videoResults && this.props.videoResults.totalHits > 0 || this.props.liveResults && this.props.liveResults.totalHits > 0 ? this.getResultSections() : this.getNoResultsMessage();
                    var i;
                    return this.props.currentCategory === fe.a.Videos && (i = l.createElement(ge, {
                        key: "video-filters",
                        onOptionsChange: this.props.onVideoOptionsChange
                    })), l.createElement("div", {
                        tabIndex: 0,
                        onKeyDown: this.props.onKeyDown
                    }, l.createElement(ce._19, {
                        className: ne(t),
                        background: ce.m.Base,
                        overflow: ce._0.Hidden,
                        elevation: 5,
                        display: ce.H.Flex,
                        flexDirection: ce.J.Column,
                        flexWrap: ce.K.NoWrap
                    }, e, i, l.createElement(ie.b, {
                        className: "search-results-panel__wrapper",
                        contentClassName: "search-results-panel__content",
                        onClick: this.onClick,
                        scrollRef: this.setScrollRef,
                        suppressScrollX: !0,
                        "data-a-target": "search-scroller"
                    }, l.createElement(ce.V, {
                        fullWidth: !0
                    }, n, l.createElement(ie.a, {
                        key: this.props.currentCategory || "none",
                        enabled: !this.props.isWaiting && this.props.isOpen,
                        loadMore: this.props.loadMore
                    })))))
                }, t.prototype.getResultSections = function() {
                    var e, t = [],
                        n = [],
                        i = this.getGameCards(),
                        a = this.getUserCards(),
                        r = this.getCommunityCards(),
                        o = this.getVideoCards(),
                        s = this.getLiveCards();
                    return s.length > 0 && (e = l.createElement(ce.V, {
                        className: "search-results-panel__live",
                        margin: {
                            y: 1,
                            x: 1
                        }
                    }, l.createElement(ce.O, null, s))), this.getResultSection("games-section", fe.a.Games, this.gameHeaderSelect, this.props.gameResults, i.length, i, n, t), this.getResultSection("live-section", fe.a.Channels, this.liveHeaderSelect, this.props.liveResults, s.length, e, n, t), this.getResultSection("channels-section", fe.a.Users, this.userHeaderSelect, this.props.userResults, a.length, a, n, t), this.getResultSection("videos-section", fe.a.Videos, this.videoHeaderSelect, this.props.videoResults, o.length, o, n, t), this.getResultSection("communities-section", fe.a.Communities, this.communityHeaderSelect, this.props.communityResults, r.length, r, n, t), t.concat(n)
                }, t.prototype.getResultSection = function(e, t, n, i, a, r, o, s) {
                    var c = l.createElement(pe, {
                        key: e,
                        totalHitsCount: i ? i.totalHits : 0,
                        hitsCount: a,
                        title: this.getCategoryTitle(t),
                        onHeaderClick: n,
                        "data-a-target": e
                    }, r);
                    0 === a ? o.push(c) : s.push(c)
                }, t.prototype.getGameCards = function() {
                    return this.props.gameResults ? this.props.gameResults.results.map(function(e) {
                        return l.createElement(se.a, {
                            id: "game_" + e.id,
                            key: "game_" + e.id,
                            imageAlt: e.thumbnailAltText,
                            linkTo: e.linkTo,
                            title: e.title,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0
                        })
                    }) : []
                }, t.prototype.getLiveCards = function() {
                    return this.props.liveResults ? this.props.liveResults.results.map(function(e) {
                        var t = Object(re.a)(e.login || "", e.name || "");
                        return l.createElement(ce.G, {
                            key: "live_" + e.id,
                            cols: 6
                        }, l.createElement(ce.V, {
                            margin: {
                                bottom: 1
                            }
                        }, l.createElement(de, {
                            id: "live_" + e.id,
                            imageAlt: e.thumbnailAltText,
                            linkTo: e.linkTo,
                            title: e.status || "",
                            login: e.login ? e.login : "",
                            channelName: t,
                            viewerCount: e.viewerCount || 0,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0
                        })))
                    }) : []
                }, t.prototype.getUserCards = function() {
                    return this.props.userResults ? this.props.userResults.results.map(function(e) {
                        var t = Object(re.a)(e.login || "", e.name || "");
                        return l.createElement(ce.T, {
                            linkTo: e.linkTo,
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0,
                            key: e.id
                        }, l.createElement(ce.V, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, l.createElement(ce.A, {
                            row: !0
                        }, l.createElement(ce.C, {
                            imageAlt: e.thumbnailAltText,
                            imageSrc: e.thumbnail ? e.thumbnail : "",
                            size: ce.D.Size4,
                            aspect: ce.k.Aspect1x1
                        }), l.createElement(ce.B, null, l.createElement(ce.Q, {
                            padding: {
                                x: 1
                            }
                        }, l.createElement(ce._23, {
                            type: ce._28.H5,
                            ellipsis: !0
                        }, t))))))
                    }) : []
                }, t.prototype.getVideoCards = function() {
                    return this.props.videoResults ? this.props.videoResults.results.map(function(e) {
                        var t = Object(re.a)(e.login || "", e.name || ""),
                            n = Object(oe.a)(e.length || 0);
                        return l.createElement(ce.T, {
                            key: "video_" + e.id,
                            linkTo: e.linkTo,
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0
                        }, l.createElement(ce.V, {
                            className: "search-results-panel__card",
                            fullWidth: !0,
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, l.createElement(ce.A, {
                            row: !0
                        }, l.createElement(ce.C, {
                            imageSrc: e.thumbnail ? e.thumbnail : "",
                            imageAlt: e.thumbnailAltText,
                            size: ce.D.Size8,
                            aspect: ce.k.Aspect16x9
                        }), l.createElement(ce.B, null, l.createElement(ce.Q, {
                            margin: {
                                left: 1
                            }
                        }, l.createElement(ce._23, {
                            type: ce._28.H5,
                            ellipsis: !0
                        }, e.title)), l.createElement(ce.Q, {
                            margin: {
                                left: 1
                            }
                        }, l.createElement(ce._23, {
                            className: "search-results-panel__link",
                            ellipsis: !0
                        }, e.createdAt ? Object(u.c)(new Date(1e3 * e.createdAt), "medium") : "", " · ", n || "", " · ", l.createElement(ce._23, {
                            className: "search-results-panel__highlight-link",
                            type: ce._28.Span
                        }, t)))))))
                    }) : []
                }, t.prototype.getCommunityCards = function() {
                    return this.props.communityResults ? this.props.communityResults.results.map(function(e) {
                        return l.createElement(ce.T, {
                            key: "community_" + e.id,
                            targetBlank: Object(ae.b)(),
                            linkTo: Object(ae.a)(e.linkTo),
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0
                        }, l.createElement(ce.V, {
                            className: "search-results-panel__card",
                            fullWidth: !0,
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, l.createElement(ce.A, {
                            row: !0
                        }, l.createElement(ce.C, {
                            imageSrc: e.thumbnail ? e.thumbnail : "",
                            imageAlt: e.thumbnailAltText,
                            size: ce.D.Size4,
                            aspect: ce.k.BoxArt
                        }), l.createElement(ce.B, null, l.createElement(ce.Q, {
                            margin: {
                                left: 1
                            }
                        }, l.createElement(ce._23, {
                            type: ce._28.H5,
                            ellipsis: !0
                        }, e.name)), l.createElement(ce.Q, {
                            margin: {
                                left: 1
                            }
                        }, l.createElement(ce._23, {
                            className: "search-results-panel__link",
                            ellipsis: !0
                        }, Object(u.d)("{viewerCount,number} Viewers", {
                            viewerCount: e.viewerCount || 0
                        }, "SearchResultPanel")))))))
                    }) : []
                }, t.prototype.getCategoryDrillDown = function(e) {
                    var t;
                    switch (e) {
                        case fe.a.Games:
                            if (!this.props.gameResults || 0 === this.props.gameResults.totalHits) return this.getNoResultsMessage();
                            t = this.getGameCards();
                            break;
                        case fe.a.Users:
                            if (!this.props.userResults || 0 === this.props.userResults.totalHits) return this.getNoResultsMessage();
                            t = this.getUserCards();
                            break;
                        case fe.a.Communities:
                            if (!this.props.communityResults || 0 === this.props.communityResults.totalHits) return this.getNoResultsMessage();
                            t = this.getCommunityCards();
                            break;
                        case fe.a.Videos:
                            if (!this.props.videoResults || 0 === this.props.videoResults.totalHits) return this.getNoResultsMessage();
                            t = this.getVideoCards();
                            break;
                        case fe.a.Channels:
                            if (!this.props.liveResults || 0 === this.props.liveResults.totalHits) return this.getNoResultsMessage();
                            t = [l.createElement(ce.V, {
                                className: "search-results-panel__live",
                                margin: {
                                    x: 1
                                },
                                key: "live_drill-down-container"
                            }, l.createElement(ce.O, null, this.getLiveCards()))];
                            break;
                        default:
                            return this.getNoResultsMessage()
                    }
                    return l.createElement(pe, null, t)
                }, t.prototype.getCategoryTitle = function(e) {
                    switch (e) {
                        case fe.a.Games:
                            return Object(u.d)("Games", "SearchResultPanel");
                        case fe.a.Users:
                            return Object(u.d)("Channels", "SearchResultPanel");
                        case fe.a.Communities:
                            return Object(u.d)("Communities", "SearchResultPanel");
                        case fe.a.Videos:
                            return Object(u.d)("Videos", "SearchResultPanel");
                        case fe.a.Channels:
                            return Object(u.d)("Live", "SearchResultPanel");
                        default:
                            return Object(u.d)("Top Results", "SearchResultPanel")
                    }
                }, t.prototype.getNoResultsMessage = function() {
                    return l.createElement(ce.V, {
                        display: ce.H.Flex,
                        flexDirection: ce.J.Column,
                        justifyContent: ce.U.Center,
                        alignItems: ce.c.Center,
                        flexGrow: 1,
                        fullHeight: !0,
                        zIndex: ce._39.Above,
                        className: "search-results-panel__notice-wrap"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt2,
                        textAlign: ce._24.Center,
                        flexShrink: 1
                    }, l.createElement(ce._10, {
                        asset: ce._11.SearchNoResults,
                        width: 46,
                        height: 48
                    })), l.createElement(ce.Q, {
                        margin: {
                            top: 1
                        },
                        textAlign: ce._24.Center
                    }, l.createElement(ce._23, {
                        type: ce._28.H4,
                        "data-test-selector": "panel-body-no-results"
                    }, Object(u.d)("No results found", "SearchResultPanel"))), l.createElement(ce._23, {
                        type: ce._28.P
                    }, Object(u.d)("They're probably in another castle", "SearchResultPanel")))
                }, t.prototype.getErrorMessage = function() {
                    return l.createElement(ce.V, {
                        display: ce.H.Flex,
                        flexDirection: ce.J.Column,
                        justifyContent: ce.U.Center,
                        alignItems: ce.c.Center,
                        flexGrow: 1,
                        fullHeight: !0,
                        zIndex: ce._39.Above,
                        className: "search-results-panel__notice-wrap"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt2,
                        textAlign: ce._24.Center,
                        flexShrink: 1
                    }, l.createElement(ce._10, {
                        asset: ce._11.DeadGlitch,
                        width: 46,
                        height: 48
                    })), l.createElement(ce.Q, {
                        margin: {
                            top: 1
                        },
                        textAlign: ce._24.Center
                    }, l.createElement(ce._23, {
                        type: ce._28.H4,
                        "data-test-selector": "search-error-message"
                    }, Object(u.d)("Search is not available at this time", "SearchResultPanel"))), l.createElement(ce._23, {
                        type: ce._28.P
                    }, Object(u.d)("Please try again later", "SearchResultPanel")))
                }, t
            }(l.Component)),
            be = (n("GtMZ"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isAnimating: !1,
                        currentCategory: t.currentCategory
                    }, n
                }
                return f.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    e.currentCategory && e.currentCategory !== this.props.currentCategory && this.setState({
                        currentCategory: e.currentCategory
                    }), this.props.isVisible !== e.isVisible && (this.animationTimeout && window.clearTimeout(this.animationTimeout), this.setState({
                        isAnimating: !0
                    }), this.animationTimeout = window.setTimeout(function() {
                        t.setState({
                            isAnimating: !1
                        })
                    }, 300))
                }, t.prototype.componentWillUnmount = function() {
                    this.animationTimeout && window.clearTimeout(this.animationTimeout)
                }, t.prototype.render = function() {
                    if (!this.state.currentCategory) return null;
                    var e = this.getAssetName(this.state.currentCategory);
                    return this.props.isVisible || this.state.isAnimating ? l.createElement(ce.V, {
                        className: "search-tag",
                        display: ce.H.Flex,
                        position: ce._4.Absolute,
                        attachTop: !0,
                        attachBottom: !0,
                        alignItems: ce.c.Center
                    }, l.createElement(ce.e, {
                        enabled: !0,
                        type: this.props.isVisible ? ce.i.BounceIn : ce.i.BounceOut
                    }, l.createElement(ce._22, {
                        label: this.state.currentCategory,
                        icon: e,
                        onClose: this.props.onClick,
                        "data-test-selector": "filter-icon",
                        "data-a-target": "nav-search-clear"
                    }))) : null
                }, t.prototype.getAssetName = function(e) {
                    switch (e) {
                        case fe.a.Games:
                            return ce._11.NavGames;
                        case fe.a.Users:
                            return ce._11.NavProfile;
                        case fe.a.Communities:
                            return ce._11.Communities;
                        case fe.a.Videos:
                            return ce._11.NavVideos;
                        case fe.a.Channels:
                        default:
                            return ce._11.NavChannels
                    }
                }, t
            }(l.Component)),
            ye = (n("p6Rc"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleKeydown = function(e) {
                        e.keyCode === Y.a.F && e.altKey && (e.preventDefault(), t.NavSearchInputRef.focus())
                    }, t.setNavSearchInputRef = function(e) {
                        return t.NavSearchInputRef = e
                    }, t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t.categoryTagClicked = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onCategorySelected(null)
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentWillMount = function() {
                    var e = this;
                    window.addEventListener("keydown", function(t) {
                        return e.handleKeydown(t)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("keydown")
                }, t.prototype.render = function() {
                    return l.createElement("div", null, l.createElement("div", {
                        className: "top-nav__search-container",
                        "data-click-out-id": "nav-search-balloon"
                    }, l.createElement(te.a, {
                        onClickOut: this.props.onClickOut
                    }, l.createElement(ce._13, {
                        onChange: this.handleChange,
                        onFocus: this.props.onFocus,
                        onKeyDown: this.props.onKeyDown,
                        placeholder: Object(u.d)("Search", "NavSearch"),
                        id: "nav-search-input",
                        "data-a-target": "nav-search-input",
                        spellCheck: !1,
                        refDelegate: this.setNavSearchInputRef
                    }), l.createElement(ce.p, {
                        direction: ce.q.Bottom,
                        noTail: !0,
                        size: ce.r.Large,
                        show: this.props.isOpen,
                        offsetY: "5px",
                        "data-a-target": "nav-search-balloon"
                    }, l.createElement(ve, {
                        isOpen: this.props.isOpen,
                        gameResults: this.props.gameResults,
                        userResults: this.props.userResults,
                        communityResults: this.props.communityResults,
                        videoResults: this.props.videoResults,
                        liveResults: this.props.liveResults,
                        isErrored: this.props.isErrored,
                        isWaiting: this.props.isWaiting,
                        onResultSelected: this.props.onResultSelected,
                        onCategorySelected: this.props.onCategorySelected,
                        currentCategory: this.props.currentCategory,
                        onVideoOptionsChange: this.props.onVideoOptionsChange,
                        loadMore: this.props.loadMore,
                        onKeyDown: this.props.onKeyDown
                    })), l.createElement(be, {
                        isVisible: this.props.isOpen && !!this.props.currentCategory,
                        currentCategory: this.props.currentCategory,
                        onClick: this.categoryTagClicked
                    }))))
                }, t
            }(l.Component)),
            ke = 50,
            Se = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.onCategorySelected = function(e) {
                        t.setState(function(n) {
                            return f.__assign({}, t.getEmptyState(), {
                                term: n.term,
                                currentCategory: e,
                                isOpen: !0,
                                isWaiting: !0
                            })
                        }, function() {
                            t.doSearch(t.state.term)
                        })
                    }, t.onChange = function(e) {
                        t.inputTimer && (clearTimeout(t.inputTimer), t.inputTimer = 0), e ? t.inputTimer = setTimeout(function() {
                            t.setState({
                                topGameResults: null,
                                topUserResults: null,
                                topLiveResults: null,
                                topVideoResults: null,
                                topCommunityResults: null,
                                isWaiting: !0,
                                term: e
                            }, function() {
                                t.state.videoOptions ? t.doVideosSearch(e, t.state.videoOptions) : t.doSearch(e)
                            })
                        }, ke) : t.setState(t.getEmptyState())
                    }, t.onHistoryChange = function() {
                        t.state.isOpen && t.setState({
                            isOpen: !1
                        })
                    }, t.onClickOut = function() {
                        t.state.isOpen && t.setState({
                            isOpen: !1
                        })
                    }, t.onFocus = function() {
                        t.state.term && !t.state.isOpen && t.setState({
                            isOpen: !0
                        })
                    }, t.onKeyDown = function(e) {
                        if (t.state.term) {
                            var n = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                            e.keyCode === Y.a.Esc ? t.setState({
                                isOpen: !1
                            }) : e.keyCode === Y.a.Up ? (n(), t.focusNext(-1)) : e.keyCode === Y.a.Down && (n(), t.focusNext(1))
                        }
                    }, t.onResultSelected = function() {
                        t.setState({
                            isOpen: !1
                        })
                    }, t.loadMore = function() {
                        return f.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i;
                            return f.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (this.state.queryID || null === this.state.currentCategory || !0 === this.state.exhaustedHits || this.state.videoOptions) return [2];
                                        e = this.state.currentPage + 1, a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(this.state.currentCategory, this.state.term, "", {
                                            page: e
                                        })];
                                    case 2:
                                        return t = a.sent(), [3, 4];
                                    case 3:
                                        return n = a.sent(), u.i.error(n, "Algolia page search failed"), this.setState(f.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            isOpen: !0
                                        })), [2];
                                    case 4:
                                        return t ? (i = Object(ee.b)({
                                            searchResults: t,
                                            append: e > 0,
                                            currentGameResults: this.state.currentGameResults,
                                            currentUserResults: this.state.currentUserResults,
                                            currentCommunityResults: this.state.currentCommunityResults,
                                            currentVideoResults: this.state.currentVideoResults,
                                            currentLiveResults: this.state.currentLiveResults
                                        }), this.setState(f.__assign({}, i, {
                                            isOpen: !0,
                                            isWaiting: !1,
                                            currentPage: e,
                                            exhaustedHits: i.exhaustedHits
                                        })), [2]) : (this.setState(f.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            isOpen: !0
                                        })), [2])
                                }
                            })
                        })
                    }, t.doVideosSearch = function(e, n) {
                        return f.__awaiter(t, void 0, void 0, function() {
                            var t, i, a;
                            return f.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        t = J.a(), r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, this.searchClient.queryVideos(e, t, n)];
                                    case 2:
                                        return (i = r.sent()).hits && this.setState({
                                            topGameResults: null,
                                            topUserResults: null,
                                            topLiveResults: null,
                                            topVideoResults: null,
                                            topCommunityResults: null,
                                            currentVideoResults: {
                                                totalHits: i.totalHits,
                                                results: i.hits.map(ee.a)
                                            },
                                            queryID: "",
                                            isWaiting: !1
                                        }), [3, 4];
                                    case 3:
                                        return a = r.sent(), u.i.error(a, "Algolia video search failed"), this.setState({
                                            isErrored: !0,
                                            isWaiting: !1
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.changeVideoOptions = function(e) {
                        t.setState({
                            videoOptions: e
                        }, function() {
                            t.doVideosSearch(t.state.term, e)
                        })
                    }, t.searchClient = new X.a(u.a.algoliaApplicationID, u.a.algoliaAPIKey), t.state = t.getEmptyState(), t
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.history.listen(this.onHistoryChange)
                }, t.prototype.componentDidUpdate = function() {
                    !this.state.focusSelectable || this.state.queryID || this.inputTimer || (this.focusNext(1), this.setState({
                        focusSelectable: !1
                    }))
                }, t.prototype.render = function() {
                    return l.createElement(ye, {
                        onChange: this.onChange,
                        onClickOut: this.onClickOut,
                        onFocus: this.onFocus,
                        onKeyDown: this.onKeyDown,
                        onResultSelected: this.onResultSelected,
                        gameResults: this.state.currentGameResults,
                        userResults: this.state.currentUserResults,
                        communityResults: this.state.currentCommunityResults,
                        videoResults: this.state.currentVideoResults,
                        liveResults: this.state.currentLiveResults,
                        isOpen: this.state.isOpen,
                        isErrored: this.state.isErrored,
                        isWaiting: this.state.isWaiting,
                        onCategorySelected: this.onCategorySelected,
                        currentCategory: this.state.currentCategory,
                        onVideoOptionsChange: this.changeVideoOptions,
                        loadMore: this.loadMore
                    })
                }, t.prototype.focusNext = function(e) {
                    var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                        i = document.activeElement,
                        a = Array.prototype.indexOf.call(n, i);
                    if ((t = a < 0 ? e > 0 ? 0 : n.length - 1 : a + e) < 0 && (t = 0), !(t >= n.length)) {
                        var r = n.item(t);
                        r.focus(), r.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                            currentFocus: r
                        })
                    }
                }, t.prototype.doSearch = function(e) {
                    return f.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, a, r, o;
                        return f.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    this.inputTimer = 0, t = -1, n = J.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                        queryID: n,
                                        focusSelectable: !i && !!this.state.currentFocus
                                    }), s.label = 1;
                                case 1:
                                    return s.trys.push([1, 6, , 7]), this.state.currentCategory && null !== this.state.currentCategory ? (t = 0, [4, this.searchClient.queryForType(this.state.currentCategory, e, n)]) : [3, 3];
                                case 2:
                                    return a = s.sent(), [3, 5];
                                case 3:
                                    return this.state.topGameResults && this.state.topUserResults && this.state.topLiveResults && this.state.topVideoResults && this.state.topCommunityResults ? (this.setState({
                                        currentGameResults: this.state.topGameResults,
                                        currentUserResults: this.state.topUserResults,
                                        currentLiveResults: this.state.topLiveResults,
                                        currentVideoResults: this.state.topVideoResults,
                                        currentCommunityResults: this.state.topCommunityResults,
                                        queryID: "",
                                        term: e,
                                        isOpen: !0,
                                        isWaiting: !1,
                                        currentPage: t
                                    }), [2]) : [4, this.searchClient.queryTopResults(e, n)];
                                case 4:
                                    a = s.sent(), s.label = 5;
                                case 5:
                                    return [3, 7];
                                case 6:
                                    return r = s.sent(), u.i.error(r, "Algolia top results search failed"), this.setState(f.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        isOpen: !0,
                                        term: e
                                    })), [2];
                                case 7:
                                    return a ? this.state.queryID !== a.id ? [2] : (o = Object(ee.b)({
                                        searchResults: a,
                                        append: !1,
                                        currentGameResults: this.state.currentGameResults,
                                        currentUserResults: this.state.currentUserResults,
                                        currentCommunityResults: this.state.currentCommunityResults,
                                        currentVideoResults: this.state.currentVideoResults,
                                        currentLiveResults: this.state.currentLiveResults
                                    }), this.setState(f.__assign({}, o, {
                                        queryID: "",
                                        term: e,
                                        isOpen: !0,
                                        isWaiting: !1,
                                        currentPage: t
                                    })), this.state.currentCategory && null === this.state.currentCategory && this.setState({
                                        topGameResults: o.currentGameResults,
                                        topUserResults: o.currentUserResults,
                                        topLiveResults: o.currentLiveResults,
                                        topVideoResults: o.currentVideoResults,
                                        topCommunityResults: o.currentCommunityResults,
                                        exhaustedHits: o.exhaustedHits
                                    }), [2]) : (this.setState(f.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        isOpen: !0,
                                        term: e
                                    })), [2])
                            }
                        })
                    })
                }, t.prototype.getEmptyState = function() {
                    return {
                        term: "",
                        currentGameResults: {
                            totalHits: 0,
                            results: []
                        },
                        currentUserResults: {
                            totalHits: 0,
                            results: []
                        },
                        currentLiveResults: {
                            totalHits: 0,
                            results: []
                        },
                        currentCommunityResults: {
                            totalHits: 0,
                            results: []
                        },
                        currentVideoResults: {
                            totalHits: 0,
                            results: []
                        },
                        isOpen: !1,
                        isErrored: !1,
                        queryID: "",
                        isWaiting: !1,
                        currentCategory: null,
                        currentPage: -1,
                        focusSelectable: !1,
                        exhaustedHits: !1,
                        videoOptions: void 0
                    }
                }, t = f.__decorate([Object(V.c)("NavSearch")], t)
            }(l.Component),
            _e = Object(c.e)(Se),
            we = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onLoginClick = function(e) {
                        e.preventDefault(), t.props.login()
                    }, t.onSignUpClick = function(e) {
                        e.preventDefault(), t.props.signup()
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return l.createElement(ce.V, {
                        className: "anon-user",
                        flexWrap: ce.K.NoWrap,
                        display: ce.H.Flex,
                        margin: {
                            left: 1
                        },
                        "data-a-target": "user-card"
                    }, l.createElement(ce.V, {
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce.u, {
                        onClick: this.onLoginClick,
                        "data-a-target": "login-button"
                    }, Object(u.d)("Log in", "top-nav"))), l.createElement(ce.V, {
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce.u, {
                        onClick: this.onSignUpClick,
                        "data-a-target": "signup-button"
                    }, Object(u.d)("Sign up", "top-nav"))))
                }, t = f.__decorate([Object(V.c)("AnonUser")], t)
            }(l.Component),
            Ee = n("DEPb"),
            Ce = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return f.__extends(t, e), t.prototype.render = function() {
                    var e = !1;
                    if (this.props.data) {
                        if (this.props.data.loading || this.props.data.error) return null;
                        e = !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                    }
                    return !this.props.isLoggedIn || e ? l.createElement("a", {
                        href: Q.a,
                        target: "_blank",
                        className: "top-nav__nav-link",
                        "data-a-target": "store-link"
                    }, Object(u.d)("Store", "TopNavStore")) : null
                }, t = f.__decorate([Object(N.a)(Ee, {
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                }), Object(V.c)("TopNavStoreComponent", {
                    autoReportInteractive: !0
                })], t)
            }(l.Component),
            Ne = Object(h.a)(function(e) {
                return {
                    isLoggedIn: Object(p.d)(e)
                }
            })(Ce),
            Te = n("S1vB"),
            Oe = n("Hs3O"),
            Ie = n("NhfZ"),
            De = Object(ae.a)("/products/turbo?ref=top_nav"),
            Le = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading || this.props.data.error) return null;
                    var e = this.props.data.requestInfo && !Object(Te.a)(this.props.data.requestInfo.countryCode),
                        t = !this.props.data.currentUser || !this.props.data.currentUser.hasTurbo;
                    if (e && t) return l.createElement("a", {
                        href: De,
                        target: "_blank",
                        className: "top-nav__nav-link",
                        "data-a-target": "try-prime-link"
                    }, Object(u.d)("Go Turbo", "TopNavUpsell"));
                    if (!this.props.data.currentUser || !this.props.data.currentUser.hasPrime) {
                        var n = Object(Oe.d)(Oe.b, window.location.pathname.substring(1));
                        return l.createElement("a", {
                            href: n,
                            target: "_blank",
                            className: "top-nav__nav-link",
                            "data-a-target": "try-prime-link"
                        }, Object(u.d)("Try Prime", "TopNavUpsell"))
                    }
                    return null
                }, t = f.__decorate([Object(N.a)(Ie), Object(V.c)("TopNavUpsellComponent")], t)
            }(l.Component),
            xe = n("RweG"),
            Re = n("WIs4"),
            Fe = n("l4QG"),
            Pe = n("C8Io"),
            Ue = n("NXs7"),
            Me = n("HZww"),
            Ae = n("FLwB"),
            Ve = n("ZaD5"),
            je = n("NikC"),
            He = n("oIkB"),
            Be = (n("/Urv"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onLogoutClick = function(e) {
                        e.preventDefault(), t.props.logout()
                    }, t.onShareCheckboxClick = function() {
                        t.props.data && !t.props.data.error && t.props.data.currentUser && t.props.toggleShareActivity()
                    }, t.onDarkModeCheckboxClick = function() {
                        var e = t.props.theme === Ue.a.Dark ? Ue.a.Light : Ue.a.Dark;
                        t.props.changeTheme(e, je.a.UserMenu)
                    }, t.onOnlineClick = function(e) {
                        t.props.data && !t.props.data.error && t.props.data.currentUser && (e && e.stopPropagation(), t.props.toggleVisibility(Fe.a.Online))
                    }, t.onInvisibleClick = function(e) {
                        t.props.data && !t.props.data.error && t.props.data.currentUser && (e && e.stopPropagation(), t.props.toggleVisibility(Fe.a.Offline))
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = ne("top-nav-user-menu-dropdown", {
                            "top-nav-user-menu-dropdown--toggled": this.props.dropdownOpen
                        }),
                        t = this.props.dropdownOpen ? "dropdown-down" : "dropdown-up",
                        n = this.props.dropdownOpen ? "dropdown-down" : "dropdown-up",
                        i = !1,
                        a = ce.F.Alt2,
                        r = ce.F.Alt2,
                        o = !1,
                        s = !0,
                        c = !1,
                        d = !1,
                        p = void 0,
                        m = void 0,
                        h = void 0;
                    return this.props.data && !this.props.data.error && this.props.data.currentUser && (i = !0, a = this.props.data.currentUser.availability === Fe.a.Offline ? ce.F.Base : ce.F.Alt2, r = this.props.data.currentUser.availability === Fe.a.Online ? ce.F.Base : ce.F.Alt2, o = this.props.data.currentUser.settings.isSharingActivity, s = this.props.data.currentUser.availability === Fe.a.Offline, c = this.props.data.currentUser.availability === Fe.a.Online, d = this.props.data.currentUser.availability === Fe.a.Offline, p = {
                        pathname: "/" + this.props.data.currentUser.login,
                        state: {
                            content: G.PageviewContent.SelfChannel,
                            medium: G.PageviewMedium.TopNav
                        }
                    }, m = Object(ae.a)("/" + this.props.data.currentUser.login + "/manager/past_broadcasts"), h = Object(ae.a)("/" + this.props.data.currentUser.login + "/dashboard")), l.createElement(ce._19, {
                        overflow: ce._0.Hidden,
                        position: ce._4.Absolute,
                        className: e,
                        background: ce.m.Base,
                        color: ce.F.Base,
                        "data-a-target": t,
                        "data-test-selector": n,
                        attachRight: !0,
                        zIndex: ce._39.Below
                    }, l.createElement(ie.b, {
                        className: "top-nav-user-menu-dropdown__scrollable",
                        suppressScrollX: !0
                    }, l.createElement(ce.V, null, l.createElement(ce._19, {
                        padding: {
                            y: 1
                        },
                        background: ce.m.Alt
                    }, l.createElement(ce.T, {
                        disabled: !i,
                        onClick: this.onOnlineClick,
                        "data-a-target": "online-dropdown-button",
                        "data-test-selector": "online-dropdown-button"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt2,
                        display: ce.H.Flex,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        alignItems: ce.c.Center,
                        display: ce.H.InlineFlex,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._5, {
                        status: ce._6.Online
                    })), l.createElement(ce._23, {
                        bold: c,
                        color: r
                    }, Object(u.d)("Online", "UserMenuDropdown")))), l.createElement(ce.T, {
                        disabled: !i,
                        onClick: this.onInvisibleClick,
                        "data-a-target": "invisible-dropdown-button",
                        "data-test-selector": "invisible-dropdown-button"
                    }, l.createElement(ce._19, {
                        color: ce.F.Base,
                        display: ce.H.Flex,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        alignItems: ce.c.Center,
                        display: ce.H.InlineFlex,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._5, {
                        status: ce._6.Invisible
                    })), l.createElement(ce._23, {
                        bold: d,
                        color: a
                    }, Object(u.d)("Invisible", "UserMenuDropdown")))), l.createElement(ce.V, {
                        margin: {
                            x: 2,
                            bottom: 1,
                            top: .5
                        }
                    }, l.createElement(ce.E, {
                        id: "share-activity-toggle",
                        label: Object(u.d)("Share my activity", "UserMenuDropdown"),
                        "data-a-target": "share-activity-toggle",
                        "data-test-selector": "share-activity-toggle",
                        "data-a-value": o,
                        checked: o,
                        onChange: this.onShareCheckboxClick,
                        disabled: s
                    }), l.createElement(ce._23, {
                        type: ce._28.Span,
                        color: ce.F.Alt
                    }, Object(u.d)("Share what you're watching, playing, or streaming with your friends.", "UserMenuDropdown"))), l.createElement(ce._19, {
                        borderBottom: !0,
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }), l.createElement(ce.V, {
                        margin: {
                            x: 2,
                            bottom: 1
                        }
                    }, l.createElement(ce.E, {
                        id: "dark-mode-toggle",
                        label: Object(u.d)("Dark Mode", "UserMenuDropdown"),
                        "data-a-target": "dark-mode-toggle",
                        "data-test-selector": "dark-mode-toggle",
                        "data-a-value": this.props.theme,
                        checked: this.props.theme === Ue.a.Dark,
                        onChange: this.onDarkModeCheckboxClick
                    }))), l.createElement(ce.V, {
                        margin: {
                            y: 1
                        }
                    }, l.createElement(ce.T, {
                        disabled: !i,
                        linkTo: p,
                        "data-a-target": "channel-dropdown-link"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.NavMyChannel,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Channel", "UserMenuDropdown")))), l.createElement(ce.T, {
                        disabled: !i,
                        linkTo: m,
                        "data-a-target": "video-manager-dropdown-link"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.NavManager,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Video Manager", "UserMenuDropdown")))), l.createElement(ce.T, {
                        disabled: !i,
                        linkTo: h,
                        "data-a-target": "dashboard-dropdown-link"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.NavDashboard,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Dashboard", "UserMenuDropdown")))), l.createElement(ce._19, {
                        borderBottom: !0,
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }), l.createElement(ce.T, {
                        targetBlank: Object(ae.b)(),
                        linkTo: Object(ae.a)("/friends"),
                        "data-a-target": "friends-dropdown-link"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.Friends,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Friends", "UserMenuDropdown")))), l.createElement(ce.T, {
                        targetBlank: Object(ae.b)(),
                        linkTo: Object(ae.a)("/messages/inbox"),
                        "data-a-target": "inbox-dropdown-link"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.NavMessages,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Messages", "UserMenuDropdown")))), l.createElement(ce.T, {
                        targetBlank: Object(ae.b)(),
                        linkTo: Object(ae.a)("/subscriptions"),
                        "data-a-target": "subscriptions-dropdown-link"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.NavBackpack,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Subscriptions", "UserMenuDropdown")))), l.createElement(ce.T, {
                        targetBlank: Object(ae.b)(),
                        linkTo: Object(ae.a)("/inventory"),
                        "data-a-target": "inventory-dropdown-link"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.Crate,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Inventory", "UserMenuDropdown")))), l.createElement(ce._19, {
                        borderBottom: !0,
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }), l.createElement(ce.T, {
                        targetBlank: Object(ae.b)(),
                        linkTo: Object(ae.a)("/settings/profile"),
                        "data-a-target": "settings-dropdown-link"
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.NavSettings,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Settings", "UserMenuDropdown")))), l.createElement(ce.T, {
                        "data-a-target": "dropdown-logout",
                        onClick: this.onLogoutClick
                    }, l.createElement(ce._19, {
                        color: ce.F.Alt,
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(ce._10, {
                        asset: ce._11.NavLogout,
                        height: 18,
                        width: 18
                    })), l.createElement(ce._23, null, Object(u.d)("Log Out", "UserMenuDropdown"))))))))
                }, t = f.__decorate([Object(V.c)("UserMenuDropdown")], t)
            }(l.Component)),
            ze = n("NfS6"),
            We = n("94wQ"),
            qe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.toggleShareActivity = function() {
                        if (t.props.data && !t.props.data.error && t.props.data.currentUser) {
                            var e = !t.props.data.currentUser.settings.isSharingActivity,
                                n = f.__assign({}, Object(He.a)({
                                    isSharingActivity: e
                                }), {
                                    optimisticResponse: {
                                        updateIsSharingActivity: {
                                            __typename: "UpdateIsSharingActivityPayload",
                                            user: {
                                                __typename: "User",
                                                id: t.props.data.currentUser.id,
                                                settings: {
                                                    isSharingActivity: e,
                                                    __typename: "UserSettings"
                                                }
                                            }
                                        }
                                    }
                                });
                            t.props.updateIsSharingActivity(n)
                        }
                    }, t.toggleVisibility = function(e) {
                        t.props.data && !t.props.data.error && t.props.data.currentUser && Object(Ae.e)(e)
                    }, t
                }
                return f.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(Be, {
                        data: this.props.data,
                        dropdownOpen: this.props.dropdownOpen,
                        toggleShareActivity: this.toggleShareActivity,
                        toggleVisibility: this.toggleVisibility,
                        changeTheme: this.props.changeTheme,
                        logout: this.props.logout,
                        theme: this.props.theme
                    })
                }, t = f.__decorate([Object(N.a)(ze, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(N.a)(We, {
                    name: "updateIsSharingActivity"
                }), Object(Re.a)(function(e) {
                    return {
                        query: ze,
                        topic: e.data && e.data.currentUser ? Object(Me.f)(e.data.currentUser.id) : "",
                        skip: !(e.data && !e.data.loading && !e.data.error && e.data.currentUser),
                        type: Pe.c.PresenceSettings,
                        mutator: function(e, t) {
                            return t.currentUser && (t.currentUser.settings.visibility = e.data.availability_override.toUpperCase(), t.currentUser.settings.isSharingActivity = e.data.share_activity), t
                        }
                    }
                })], t)
            }(l.Component),
            Ge = Object(h.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    theme: Object(g.a)(e)
                }
            }, function(e) {
                return Object(w.bindActionCreators)({
                    changeTheme: je.b,
                    logout: d.g
                }, e)
            })(qe),
            Qe = (n("Q8Dy"), function(e) {
                return l.createElement(ce.V, {
                    position: ce._4.Relative,
                    display: ce.H.Flex,
                    flexGrow: 1,
                    alignItems: ce.c.Stretch,
                    fullHeight: !0,
                    className: Object(S.c)(Ue.a.Dark)
                }, l.createElement(ce.V, {
                    display: ce.H.Flex,
                    flexGrow: 1,
                    alignItems: ce.c.Stretch,
                    fullHeight: !0
                }, l.createElement(ce.T, {
                    onClick: e.onMenuCardClick,
                    "data-a-target": "user-menu-toggle",
                    "data-test-selector": "user-menu-toggle"
                }, l.createElement(ce.V, {
                    display: ce.H.Flex,
                    flexGrow: 1,
                    alignItems: ce.c.Center,
                    fullHeight: !0,
                    className: "top-nav-user-menu-placeholder",
                    "data-a-target": "user-card"
                }, l.createElement(ce.V, {
                    display: ce.H.Flex,
                    flexWrap: ce.K.NoWrap,
                    alignItems: ce.c.Center,
                    flexGrow: 1,
                    padding: {
                        right: 1
                    },
                    fullHeight: !0
                }, l.createElement(ce.V, {
                    margin: {
                        x: 1
                    }
                }, l.createElement(ce._3, {
                    width: 30,
                    height: 30,
                    overlay: !0
                })), l.createElement(ce.V, {
                    flexGrow: 1,
                    display: ce.H.Flex,
                    flexDirection: ce.J.Column,
                    justifyContent: ce.U.Center
                }, l.createElement(ce._19, {
                    margin: {
                        y: .5
                    }
                }, l.createElement(ce._3, {
                    width: 80,
                    height: 4,
                    overlay: !0
                })), l.createElement(ce.V, null, l.createElement(ce.V, {
                    ellipsis: !0,
                    display: ce.H.Flex,
                    alignItems: ce.c.Center
                }, l.createElement(ce.V, {
                    display: ce.H.InlineFlex,
                    margin: {
                        right: .5
                    }
                }, l.createElement(ce._3, {
                    width: 6,
                    height: 6,
                    overlay: !0
                })), l.createElement(ce._19, {
                    display: ce.H.InlineFlex,
                    margin: {
                        y: .5
                    }
                }, l.createElement(ce._3, {
                    width: 40,
                    height: 4,
                    overlay: !0
                }))))), l.createElement(ce._19, {
                    display: ce.H.Flex,
                    flexShrink: 0,
                    color: ce.F.Base,
                    className: "top-nav-user-menu__dropdown-arrow",
                    "data-a-target": "top-nav-dropdown-arrow"
                }, l.createElement(ce._10, {
                    asset: ce._11.GlyphArrDown
                })))))))
            }),
            Ke = n("2Hj/"),
            $e = (n("nist"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onCardClick = function() {
                        t.props.onMenuCardClick()
                    }, t
                }
                return f.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data.currentUser,
                        t = e && e.profileImageURL || u.a.defaultAvatarURL,
                        n = e && (e.availability || e.settings.visibility) || Fe.a.Offline,
                        i = e && e.displayName || "";
                    return l.createElement(ce.V, {
                        position: ce._4.Relative,
                        display: ce.H.Flex,
                        flexGrow: 1,
                        alignItems: ce.c.Stretch,
                        fullHeight: !0
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        flexGrow: 1,
                        alignItems: ce.c.Stretch,
                        fullHeight: !0
                    }, l.createElement(ce.T, {
                        onClick: this.onCardClick,
                        "data-a-target": "user-menu-toggle",
                        "data-test-selector": "user-menu-toggle"
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        flexWrap: ce.K.NoWrap,
                        alignItems: ce.c.Center,
                        flexGrow: 1,
                        padding: {
                            right: 1
                        },
                        fullHeight: !0,
                        className: "top-nav-user-menu"
                    }, l.createElement(ce.V, {
                        margin: {
                            x: 1
                        },
                        flexShrink: 0
                    }, l.createElement(ce.V, {
                        className: "top-nav-user-menu__avatar-container"
                    }, l.createElement(V.a, {
                        size: 30,
                        imageSrc: t,
                        imageAlt: Object(u.d)("User avatar", "UserMenuToggle"),
                        "data-a-target": "top-nav-avatar"
                    }))), l.createElement(ce.V, {
                        flexGrow: 1,
                        flexShrink: 1,
                        flexDirection: ce.J.Column
                    }, l.createElement(ce._19, {
                        color: ce.F.Base,
                        fontSize: ce.L.Size5,
                        className: "top-nav-user-menu__username",
                        "data-a-target": "user-display-name"
                    }, l.createElement(ce._23, {
                        lineHeight: ce.W.Heading
                    }, i)), l.createElement(ce._19, {
                        className: "top-nav-user-menu__status-wrapper",
                        ellipsis: !0,
                        fullWidth: !0,
                        fontSize: ce.L.Size7,
                        alignItems: ce.c.Center,
                        display: ce.H.Flex,
                        flexWrap: ce.K.NoWrap
                    }, l.createElement(ce.V, {
                        display: ce.H.Flex,
                        flexShrink: 0,
                        margin: {
                            right: .5
                        }
                    }, l.createElement(Ke.a, {
                        availability: n
                    })), l.createElement(ce._19, {
                        ellipsis: !0,
                        color: ce.F.Alt
                    }, l.createElement(ce._23, {
                        type: ce._28.Span,
                        noWrap: !0,
                        "data-a-target": "online-status",
                        lineHeight: ce.W.Heading
                    }, this.props.data.currentUser && l.createElement(Ke.b, {
                        activity: this.props.data.currentUser.activity,
                        availability: n === Fe.a.Offline ? Fe.a.Invisible : n
                    }))))), l.createElement(ce._19, {
                        display: ce.H.Flex,
                        flexShrink: 0,
                        color: ce.F.Base,
                        className: "top-nav-user-menu__dropdown-arrow",
                        "data-a-target": "top-nav-dropdown-arrow"
                    }, l.createElement(ce._10, {
                        asset: ce._11.GlyphArrDown
                    }))))))
                }, t
            }(l.Component)),
            Ze = n("jgDs"),
            Ye = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.isSettingNewSession = !1, n.onMenuCardClick = function() {
                        n.props.data.loading && !n.props.data.currentUser || n.setState({
                            dropdownOpen: !n.state.dropdownOpen
                        })
                    }, n.onClickOut = function() {
                        n.setState({
                            dropdownOpen: !1
                        })
                    }, n.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error && e.data.currentUser
                    }, n.setUserToOffline = function() {
                        Object(Ae.c)(Fe.a.Offline), Object(Ae.a)()
                    }, n.setNewSession = function() {
                        return f.__awaiter(n, void 0, void 0, function() {
                            var e;
                            return f.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        if (this.isSettingNewSession) return [2];
                                        this.isSettingNewSession = !0, t.label = 1;
                                    case 1:
                                        return t.trys.push([1, 3, 4, 5]), [4, Object(Ae.g)()];
                                    case 2:
                                        return t.sent(), this.props.initialUserAvailabilitySet(), [3, 5];
                                    case 3:
                                        return e = t.sent(), u.i.warn("Failed to set new user availability session.", e), [3, 5];
                                    case 4:
                                        return this.isSettingNewSession = !1, [7];
                                    case 5:
                                        return [2]
                                }
                            })
                        })
                    }, n.maybeRefetchData = function(e) {
                        var t = e.pubsub.messages.presence;
                        t && e.data.currentUser && e.data.currentUser.id && t.data.user_id === +e.data.currentUser.id && n.props.pubsub.messages.presence !== t && e.data.refetch()
                    }, n.unsubscribeFromHistory = n.props.history.listen(function() {
                        n.setState({
                            dropdownOpen: !1
                        })
                    }), n.state = {
                        dropdownOpen: !1
                    }, n
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.maybeRefetchData(this.props), this.props.firstPageLoaded && this.dataIsReady(this.props) && !this.props.initialUserAvailabilityIsSet && this.setNewSession(), this.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.maybeRefetchData(e), e.firstPageLoaded && this.dataIsReady(e) && !e.initialUserAvailabilityIsSet && this.setNewSession()
                }, t.prototype.componentDidUpdate = function() {
                    this.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribeFromHistory(), this.setUserToOffline()
                }, t.prototype.render = function() {
                    var e = ne(Object(S.c)(Ue.a.Dark), {
                            "top-nav-user-menu--dropdown-open": this.state.dropdownOpen
                        }),
                        t = null;
                    return t = this.props.data.loading && !this.props.data.currentUser || this.props.data.error ? l.createElement(Qe, {
                        onMenuCardClick: this.onMenuCardClick
                    }) : l.createElement($e, {
                        data: this.props.data,
                        onMenuCardClick: this.onMenuCardClick,
                        theme: this.props.theme
                    }), l.createElement(ce.V, {
                        position: ce._4.Relative,
                        display: ce.H.Flex,
                        flexGrow: 1,
                        alignItems: ce.c.Stretch,
                        fullHeight: !0
                    }, l.createElement(te.a, {
                        onClickOut: this.onClickOut,
                        className: e
                    }, t, l.createElement(Ge, {
                        dropdownOpen: this.state.dropdownOpen
                    })))
                }, t.prototype.reportInteractive = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t = f.__decorate([Object(N.a)(Ze), Object(Re.a)(function(e) {
                    return {
                        query: Ze,
                        topic: e.data.currentUser ? Object(Me.f)(e.data.currentUser.id) : "",
                        skip: !(e.data && !e.data.loading && !e.data.error && e.data.currentUser),
                        type: Pe.c.PresenceSettings,
                        mutator: function(e, t) {
                            return t.currentUser && (t.currentUser.settings.visibility = e.data.availability_override.toUpperCase(), t.currentUser.settings.isSharingActivity = e.data.share_activity), t
                        }
                    }
                }), Object(xe.a)([{
                    topic: function(e) {
                        return e.data.currentUser ? Object(Me.f)(e.data.currentUser.id) : ""
                    },
                    mapMessageTypesToProps: (o = {}, o[Pe.c.Presence] = "presence", o),
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }]), Object(V.c)("User")], t)
            }(l.Component),
            Je = Object(h.a)(function(e) {
                return {
                    theme: Object(g.a)(e),
                    firstPageLoaded: e.session.firstPageLoaded,
                    initialUserAvailabilityIsSet: e.session.initialUserAvailabilityIsSet
                }
            }, function(e) {
                return Object(w.bindActionCreators)({
                    changeTheme: je.b,
                    initialUserAvailabilitySet: Ve.g
                }, e)
            })(Object(v.f)(Ye)),
            Xe = n("8PKe"),
            et = n("6yAw"),
            tt = (n("HTB+"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.renderOnsiteNotifications = function() {
                        return t.props.isLoggedIn ? l.createElement(ce.V, {
                            flexGrow: 0,
                            alignSelf: ce.d.Center,
                            flexWrap: ce.K.NoWrap,
                            padding: {
                                left: .5,
                                right: 1
                            },
                            flexShrink: 0
                        }, l.createElement(Z, null)) : null
                    }, t.renderTwitchPrimeCrown = function(e) {
                        return l.createElement(ce.V, {
                            className: "top-nav__prime",
                            flexGrow: 0,
                            flexShrink: 0,
                            padding: {
                                x: .5
                            },
                            alignSelf: ce.d.Center,
                            flexWrap: ce.K.NoWrap
                        }, !e && l.createElement(Xe.b, null))
                    }, t.renderStoreLink = function() {
                        var e = !1;
                        if (t.props.data) {
                            if (t.props.data.loading || t.props.data.error) return null;
                            e = !!t.props.data.currentUser && t.props.data.currentUser.hasPrime
                        }
                        return !t.props.isLoggedIn || e ? null : l.createElement(ce.T, {
                            targetBlank: !0,
                            linkTo: Q.a,
                            "data-a-target": "store-link-dropdown",
                            "data-test-selector": "store-link-dropdown"
                        }, l.createElement(ce.V, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, Object(u.d)("Store", "TopNav")))
                    }, t.saveEllipsisRef = function(e) {
                        return t.ellipsisMenu = e
                    }, t.onNavigationClicked = function() {
                        t.ellipsisMenu.toggleBalloon(!1)
                    }, t.renderBrowseLink = function(e) {
                        var t = e.match,
                            n = t && "following" !== t.params.subpage,
                            i = Object(u.d)("Browse", "TopNav");
                        return l.createElement(v.a, {
                            className: "top-nav__nav-link" + (n ? " active" : ""),
                            "data-a-target": "browse-link",
                            title: i,
                            to: {
                                pathname: "/directory",
                                state: {
                                    medium: G.PageviewMedium.TopNav,
                                    content: G.PageviewContent.Games
                                }
                            }
                        }, i)
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    return f.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return f.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return this.props.latencyTracking.reportInteractive(), [4, u.n.experiments.getAssignment(K.h)];
                                case 1:
                                    return e = n.sent(), [4, u.n.experiments.getAssignment(K.i)];
                                case 2:
                                    return t = n.sent(), Object(K.n)(e, t) && this.setState({
                                        forYouAssignment: t
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = null;
                    if (this.props.isLoggedIn) {
                        var t = Object(u.d)("Following", "TopNav"),
                            n = this.state.forYouAssignment === K.d.First ? "/directory/following/foryou" : "/directory/following";
                        e = l.createElement(v.b, {
                            activeClassName: "active",
                            to: {
                                pathname: n,
                                state: {
                                    medium: G.PageviewMedium.TopNav,
                                    content: G.PageviewContent.Following
                                }
                            },
                            className: "top-nav__nav-link",
                            "data-a-target": "following-link",
                            title: t
                        }, t)
                    }
                    return l.createElement(ce.Q, {
                        position: ce._4.Fixed,
                        attachTop: !0,
                        fullWidth: !0
                    }, l.createElement("nav", {
                        className: "top-nav",
                        "data-a-target": "top-nav-container",
                        style: {
                            height: "5rem"
                        }
                    }, l.createElement(ce.V, {
                        className: "top-nav__menu",
                        display: ce.H.Flex,
                        alignItems: ce.c.Stretch,
                        flexWrap: ce.K.NoWrap,
                        fullHeight: !0
                    }, l.createElement(ce.Q, {
                        display: ce.H.InlineFlex,
                        alignItems: ce.c.Center,
                        flexShrink: 0
                    }, l.createElement(v.a, {
                        to: {
                            pathname: "/",
                            state: {
                                medium: G.PageviewMedium.TopNav,
                                content: G.PageviewContent.Logo
                            }
                        },
                        className: "top-nav__home-link",
                        "data-a-target": "home-link"
                    }, l.createElement(ce._10, {
                        asset: ce._11.LogoTwitch,
                        width: 94,
                        height: 32
                    }))), l.createElement(ce.V, {
                        className: "top-nav__nav-items-container",
                        display: ce.H.Flex,
                        alignItems: ce.c.Stretch,
                        flexGrow: 1,
                        flexWrap: ce.K.NoWrap,
                        flexShrink: 0
                    }, e, l.createElement(v.d, {
                        path: "/directory/:subpage?",
                        children: this.renderBrowseLink
                    }), l.createElement("a", {
                        href: "https://app.twitch.tv/download",
                        "data-a-target": "get-desktop-link",
                        className: "top-nav__nav-link"
                    }, Object(u.d)("Get Desktop", "TopNav")), l.createElement(Le, null), l.createElement(Ne, null), l.createElement(ce.V, {
                        className: "top-nav__ellipsis-button",
                        display: ce.H.Flex,
                        alignItems: ce.c.Center
                    }, l.createElement(q.a, {
                        ref: this.saveEllipsisRef
                    }, l.createElement(ce.v, {
                        icon: ce._11.NavMore,
                        overlay: !0,
                        ariaLabel: Object(u.d)("More nav items", "TopNav"),
                        "data-a-target": "ellipsis-button"
                    }), l.createElement(ce.p, {
                        direction: ce.q.Bottom,
                        tailOffset: 7,
                        size: ce.r.Small,
                        "data-a-target": "overflow-menu"
                    }, l.createElement(ce.V, {
                        padding: 1
                    }, l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/about",
                        "data-a-target": "about-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("About", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "http://twitchadvertising.tv/",
                        "data-a-target": "advertisers-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Advertisers", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://blog.twitch.tv/",
                        "data-a-target": "blog-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Blog", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/legal/community-guidelines",
                        "data-a-target": "community-guidelines-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Community Guidelines", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/cookie-policy",
                        "data-a-target": "cookie-policy-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Cookie Policy", "TopNav"))), l.createElement(ce.T, {
                        onClick: this.onNavigationClicked,
                        linkTo: "/directory/game/Creative",
                        "data-a-target": "creative-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Creative", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://dev.twitch.tv/",
                        "data-a-target": "developers-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Developers", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://help.twitch.tv/",
                        "data-a-target": "help-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Help", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/jobs",
                        "data-a-target": "jobs-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Jobs", "TopNav"))), l.createElement(q.a, {
                        display: ce.H.Block
                    }, l.createElement(ce.T, {
                        "data-target": "language-selector-click",
                        "data-a-target": "language-selector"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Language", "TopNav"))), l.createElement(ce.p, {
                        size: ce.r.Small,
                        direction: ce.q.Right,
                        tailOffset: 270,
                        offsetY: "-263px",
                        offsetX: "20px",
                        "data-target": "language-selector",
                        "data-a-target": "language-selector-menu"
                    }, l.createElement(W.a, null))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://music.twitch.tv/",
                        "data-a-target": "music-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Music", "TopNav"))), this.renderStoreLink(), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/partners",
                        "data-a-target": "partners-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Partners", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/press",
                        "data-a-target": "press-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Press", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://twitch.tv/p/security",
                        "data-a-target": "security-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Security", "TopNav"))), l.createElement(ce.T, {
                        targetBlank: !0,
                        linkTo: "https://www.twitch.tv/p/terms-of-service",
                        "data-a-target": "terms-link"
                    }, l.createElement(ce.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Object(u.d)("Terms", "TopNav"))))))), l.createElement(ce.V, {
                        className: "top-nav__search",
                        flexGrow: 1,
                        alignSelf: ce.d.Center
                    }, l.createElement(_e, null))), this.renderTwitchPrimeCrown(), this.renderOnsiteNotifications(), l.createElement(ce.V, {
                        className: "top-nav__nav-items-container",
                        display: ce.H.Flex,
                        alignItems: ce.c.Center,
                        flexWrap: ce.K.NoWrap,
                        flexGrow: 0,
                        flexShrink: 0
                    }, this.props.isLoggedIn ? l.createElement(Je, null) : l.createElement(we, {
                        login: this.props.login,
                        signup: this.props.signup
                    })))))
                }, t = f.__decorate([Object(N.a)(et, {
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                }), Object(V.c)("TopNav")], t)
            }(l.Component)),
            nt = Object(v.f)(Object(h.a)(function(e) {
                return {
                    isLoggedIn: Object(p.d)(e)
                }
            }, function(e) {
                return Object(w.bindActionCreators)({
                    login: function() {
                        return Object(d.f)(z.a.TopNavSignupButton)
                    },
                    logout: d.g,
                    signup: function() {
                        return Object(d.h)(z.a.TopNavSignupButton)
                    }
                }, e)
            })(tt)),
            it = n("c8Is"),
            at = "update_chunks",
            rt = /^assets\/(.+)-.+\.(.+?)$/i,
            ot = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        knownBuildIDs: new Set([u.n.config.buildID]),
                        shouldReloadOnTransition: !1
                    }, t.logger = u.n.logger.withCategory("update-manager"), t.handleHistoryChange = function() {
                        t.state.shouldReloadOnTransition && window.location.reload(!0)
                    }, t.processManifest = function() {
                        return f.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return f.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return n.trys.push([0, 7, , 8]), [4, function(e) {
                                            return f.__awaiter(this, void 0, void 0, function() {
                                                var t, n;
                                                return f.__generator(this, function(i) {
                                                    switch (i.label) {
                                                        case 0:
                                                            return u.n.config.manifestURL ? [4, fetch(u.n.config.manifestURL)] : (e.error(new Error("Unable to download manifest: The manifest URL is not set."), "Unable to download manifest: The manifest URL is not set."), [2]);
                                                        case 1:
                                                            if (!(t = i.sent()).ok) return e.error(new Error("Unable to download manifest"), "Unable to download manifest.", {
                                                                status: t.status
                                                            }), [2];
                                                            i.label = 2;
                                                        case 2:
                                                            return i.trys.push([2, 4, , 5]), [4, t.json()];
                                                        case 3:
                                                            return [2, i.sent()];
                                                        case 4:
                                                            return n = i.sent(), e.error(n, "Unable to parse manifest."), [3, 5];
                                                        case 5:
                                                            return [2]
                                                    }
                                                })
                                            })
                                        }(this.logger)];
                                    case 1:
                                        return (e = n.sent()) ? this.state.knownBuildIDs.has(e.release.buildId) ? [3, 3] : [4, a(e.release.files, this.logger)] : (this.logger.debug("Manifest is missing. Skipping preload", {
                                            currentBuildID: u.n.config.buildID
                                        }), [2]);
                                    case 2:
                                        return n.sent() ? (this.logger.debug("Preloading release chunks succeeded", {
                                            currentBuildID: u.n.config.buildID,
                                            releaseBuildID: e.release.buildId
                                        }), this.setState(function(t) {
                                            return {
                                                knownBuildIDs: new Set(t.knownBuildIDs).add(e.release.buildId),
                                                shouldReloadOnTransition: !e.canary || u.n.config.buildID !== e.canary.buildId
                                            }
                                        }), [2]) : [3, 4];
                                    case 3:
                                        if (u.n.config.buildID !== e.release.buildId && (!e.canary || u.n.config.buildID !== e.canary.buildId)) return this.setState({
                                            shouldReloadOnTransition: !0
                                        }), [2];
                                        n.label = 4;
                                    case 4:
                                        return !e.canary || this.state.knownBuildIDs.has(e.canary.buildId) ? [3, 6] : [4, a(e.canary.files, this.logger)];
                                    case 5:
                                        n.sent() && (this.logger.debug("Preloading canary chunks succeeded", {
                                            currentBuildID: u.n.config.buildID,
                                            canaryBuildID: e.canary.buildId
                                        }), this.setState(function(t) {
                                            if (e.canary) return {
                                                knownBuildIDs: new Set(t.knownBuildIDs).add(e.canary.buildId)
                                            }
                                        })), n.label = 6;
                                    case 6:
                                        return [3, 8];
                                    case 7:
                                        return t = n.sent(), this.logger.error(t, "Unable to update chunks"), [3, 8];
                                    case 8:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentDidMount = function() {
                    u.n.dynamicSettings.get("update_manager_enabled", !1) ? u.n.config.manifestURL ? (this.historyUnlisten = u.n.history.listen(this.handleHistoryChange), this.processManifestInterval = setInterval(this.processManifest, 6e5), this.processManifest()) : this.logger.debug("Maniest URL is not set. Chunks will not be preloaded.") : this.logger.debug("Update manager not enabled. Chunks will not be preloaded.")
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.processManifestInterval), this.historyUnlisten && this.historyUnlisten()
                }, t.prototype.shouldComponentUpdate = function() {
                    return !1
                }, t.prototype.render = function() {
                    return null
                }, t
            }(l.Component),
            st = 6e5,
            lt = ["mousemove", "keydown", "wheel", "DOMMouseScroll", "mouseWheel", "mousedown", "touchstart", "touchmove", "MSPointerDown", "MSPointerMove"],
            ct = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIdle: !1,
                        oldDate: +new Date,
                        lastActiveTimestamp: +new Date,
                        timeoutID: null,
                        lastPageX: null,
                        lastPageY: null
                    }, t.onActiveEvent = function(e) {
                        var n = null,
                            i = null;
                        if (function(e) {
                                return "mousemove" === e.type
                            }(e)) {
                            if (n = e.pageX, i = e.pageY, n === t.state.lastPageX && i === t.state.lastPageY) return;
                            if (+new Date - t.state.oldDate < 200) return
                        }
                        t.state.timeoutID && clearTimeout(t.state.timeoutID), t.state.isIdle && Object(Ae.b)(), t.setStateOnActive(n, i)
                    }, t.setStateOnActive = function(e, n) {
                        t.setState({
                            isIdle: !1,
                            lastActiveTimestamp: +new Date,
                            timeoutID: setTimeout(t.setIdleState, st),
                            lastPageX: e,
                            lastPageY: n
                        })
                    }, t.setIdleState = function() {
                        t.setState({
                            isIdle: !0
                        }), Object(Ae.d)()
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentWillMount = function() {
                    var e = this;
                    lt.forEach(function(t) {
                        document.addEventListener(t, e.onActiveEvent)
                    }), Object(Ae.b)(), this.setStateOnActive(null, null)
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    this.state.timeoutID && clearTimeout(this.state.timeoutID), lt.forEach(function(t) {
                        document.removeEventListener(t, e.onActiveEvent)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t
            }(l.Component),
            ut = n("iPhu"),
            dt = n("iOr9");
        ! function(e) {
            e.ENABLED = "enabled", e.CONTROL = "control"
        }(s || (s = {}));
        var pt = function() {
                var e = {
                    name: "TWILIGHT_GROWTH_EMAIL_VERIFY_BAR",
                    assignments: (t = {
                        fallback: function() {
                            return null
                        }
                    }, t[s.ENABLED] = function() {
                        return b.a.wrap(function() {
                            return n.e(54).then(n.bind(null, "CNsG"))
                        }, "VerifyEmailBar")({})
                    }, t),
                    loader: function() {
                        return null
                    }
                };
                return "en" === u.n.intl.getLanguageCode() ? l.createElement(dt.a, f.__assign({}, e)) : l.createElement("span", null);
                var t
            },
            mt = n("hfrE"),
            ht = Object(h.a)(function(e) {
                return {
                    isLoggedIn: Object(p.d)(e),
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(mt.a),
            gt = (n("YPdh"), b.a.wrap(function() {
                return n.e(32).then(n.bind(null, "EkQQ"))
            }, "DashboardRoot")),
            ft = b.a.wrap(function() {
                return n.e(34).then(n.bind(null, "r7VP"))
            }, "TeamsDashboardRoot"),
            vt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onHistoryChange = function(e, n) {
                        "REPLACE" !== n && (t.props.rootLatencyTracker.reset(), _.a.clearAppWideTracking("game"), _.a.clearAppWideTracking("chan"), _.a.clearAppWideTracking("pagetype"))
                    }, t
                }
                return f.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.props.history.listen(this.onHistoryChange), u.n.setPageTitle()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive();
                    var e = Object(S.c)(this.props.theme);
                    e && document.body.classList.add(e)
                }, t.prototype.componentDidUpdate = function(e) {
                    if (this.props.location !== e.location && window.scrollTo(0, 0), this.props.latencyTracking.reportInteractive(), e.theme !== this.props.theme) {
                        var t = Object(S.c)(e.theme),
                            n = Object(S.c)(this.props.theme);
                        t && document.body.classList.remove(t), n && document.body.classList.add(n)
                    }
                }, t.prototype.render = function() {
                    return l.createElement("div", null, l.createElement(ce.V, {
                        className: "twilight-root",
                        position: ce._4.Absolute,
                        overflow: ce._0.Hidden,
                        display: ce.H.Flex,
                        flexDirection: ce.J.Column,
                        flexWrap: ce.K.NoWrap,
                        attachRight: !0,
                        attachBottom: !0,
                        attachLeft: !0
                    }, l.createElement(L, null), l.createElement(R.a, null), l.createElement(nt, null), this.props.firstPageLoaded && this.props.isLoggedIn && l.createElement(pt, null), l.createElement(v.e, null, l.createElement(v.d, {
                        path: "/:channelName/dashboard/:pageName?",
                        component: gt
                    }), l.createElement(v.d, {
                        path: "/:channelName/:pageName(manager|manager_v2)",
                        component: gt
                    }), u.a.buildType !== k.a.Production && l.createElement(v.d, {
                        path: "/teams/:teamName/dashboard/:pageName?",
                        component: ft
                    }), l.createElement(v.d, {
                        path: "/",
                        component: ht
                    })), l.createElement(ut.b, null), l.createElement(B.b, null), l.createElement(y.a, null), this.props.firstPageLoaded && l.createElement(H.a, null), this.props.firstPageLoaded && l.createElement(it.a, {
                        history: this.props.history
                    }), this.props.isLoggedIn && l.createElement(ct, null), u.n.benchmarking.toolsEnabled && l.createElement(V.b, {
                        benchmarking: u.n.benchmarking
                    }), this.props.firstPageLoaded && l.createElement(j.b, {
                        history: this.props.history
                    }), this.props.firstPageLoaded && l.createElement(ot, null), this.props.firstPageLoaded && l.createElement(x.a, null), this.props.firstPageLoaded && l.createElement(A, null)))
                }, t
            }(l.Component),
            bt = Object(V.c)("Root", {
                isRoot: !0
            })(vt),
            yt = Object(h.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isLoggedIn: Object(p.d)(e),
                    theme: Object(g.a)(e)
                }
            })(bt),
            kt = Object(c.e)(yt);
        u.a.optimizedBuild || n.e(0).then(n.bind(null, "c+Ld")).then(function(e) {
            return window.Perf = e
        });
        var St, _t = !1;
        St = u.n.store.getReduxStore().subscribe(function() {
            var e = u.n.store.getState();
            !_t && Object(p.e)(e) && (_t = !0, St(), u.a.optimizedBuild ? r() : setTimeout(r, 500))
        }), Object(m.a)(), u.n.store.dispatch(Object(d.e)())
    },
    sq7i: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Current_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 41
            }
        };
        n.loc.source = {
            body: "query Current_User {\ncurrentUser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    tTbW: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_PrimeOffers_PrimeOfferIds"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "dateOverride"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Time"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "primeOffers"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "dateOverride"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "dateOverride"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "hasEntitlement"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "claimData"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 144
            }
        };
        n.loc.source = {
            body: "query Prime_PrimeOffers_PrimeOfferIds($dateOverride: Time) {\nprimeOffers(dateOverride: $dateOverride) {\nid\nself {\nhasEntitlement\nclaimData\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    tcHh: function(e, t) {},
    tnvA: function(e, t) {},
    u1ju: function(e, t) {},
    u8SD: function(e, t, n) {
        "use strict";

        function i(e) {
            return e && r.n.apollo.client.dataIdFromObject ? r.n.apollo.client.dataIdFromObject(e) || "" : ""
        }
        t.a = function() {
            var e = this;
            return Object(o.a)(s, {
                props: function(t) {
                    return {
                        blockUserMutation: function(n, r, o, s) {
                            return a.__awaiter(e, void 0, void 0, function() {
                                return a.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n,
                                                        sourceContext: o,
                                                        reason: r
                                                    }
                                                },
                                                optimisticResponse: {
                                                    blockUser: {
                                                        __typename: "BlockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: i(s),
                                                        fragment: l
                                                    });
                                                    t && (t.blockedUsers.push({
                                                        id: n,
                                                        __typename: "User"
                                                    }), e.writeFragment({
                                                        id: i(s),
                                                        fragment: l,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("blockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var a = n("TToO"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("rWzl"),
            l = (n.n(s), n("a0uF"));
        n.n(l)
    },
    uTyw: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return {
                title: e.title,
                thumbnail: e.thumbnail,
                thumbnailAltText: e.title,
                linkTo: {
                    pathname: "/videos/" + e.objectID,
                    state: {
                        content: o.PageviewContent.Video,
                        content_index: t,
                        medium: o.PageviewMedium.NavSearch
                    }
                },
                login: e.broadcaster_login,
                name: e.broadcaster_name,
                createdAt: e.created_at,
                length: e.length,
                id: e.objectID
            }
        }
        t.b = function(e) {
            var t, n, s, l, c, u = e.append,
                d = void 0 !== u && u,
                p = e.searchResults,
                m = e.currentGameResults,
                h = e.currentUserResults,
                g = e.currentCommunityResults,
                f = e.currentVideoResults,
                v = e.currentLiveResults;
            if (p.games && (t = {
                    totalHits: p.games.totalHits,
                    results: d && m ? m.results : []
                }, d && p.exhaustedHits && m && !p.games.totalHits && (t.totalHits = m.totalHits), t.results = t.results.concat(p.games.hits.map(function(e, t) {
                    var n, i = a.n.intl.getLanguageCode();
                    return n = i && void 0 !== e.localizations && i in e.localizations ? e.localizations[i] : e.name, {
                        title: n,
                        thumbnailAltText: e.name,
                        linkTo: {
                            pathname: Object(r.c)(e.name),
                            state: {
                                content: o.PageviewContent.Game,
                                content_index: t,
                                medium: o.PageviewMedium.NavSearch
                            }
                        },
                        id: e.objectID,
                        popularity: e.popularity
                    }
                }))), p.videos) {
                var b = d && f ? f.results : [],
                    y = p.videos.totalHits;
                d && p.exhaustedHits && f && !p.videos.totalHits && (y = f.totalHits), l = function(e, t, n) {
                    return {
                        results: e.concat(t.hits.map(i)),
                        totalHits: t.totalHits || n
                    }
                }(b, p.videos, y)
            }
            return p.users && (n = {
                totalHits: d && h ? h.totalHits : p.users.totalHits,
                results: d && h ? h.results : []
            }, d && p.exhaustedHits && h && !p.users.totalHits && (n.totalHits = h.totalHits), n.results = n.results.concat(p.users.hits.map(function(e, t) {
                return {
                    login: e.login,
                    name: e.name,
                    thumbnail: e.profile_image || a.a.defaultAvatarURL,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: o.PageviewContent.User,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    followers: e.followers
                }
            }))), p.channels && ((c = {
                totalHits: d && v ? v.totalHits : p.channels.totalHits,
                results: d && v ? v.results : []
            }).results = c.results.concat(p.channels.hits.map(function(e, t) {
                return {
                    viewerCount: e.channel_count,
                    login: e.login,
                    name: e.name,
                    thumbnailAltText: e.status,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: o.PageviewContent.Live,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    status: e.status
                }
            }))), p.communities && (s = {
                totalHits: p.communities.totalHits,
                results: d && g ? g.results : []
            }, d && p.exhaustedHits && g && !p.communities.totalHits && (s.totalHits = g.totalHits), s.results = s.results.concat(p.communities.hits.map(function(e, t) {
                return {
                    name: e.name,
                    thumbnail: e.avatar_image_url,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/communities/" + e.name,
                        state: {
                            content: o.PageviewContent.Community,
                            content_index: t,
                            medium: o.PageviewMedium.NavSearch
                        }
                    },
                    viewerCount: e.viewers,
                    id: e.objectID
                }
            }))), {
                currentGameResults: t,
                currentUserResults: n,
                currentLiveResults: c,
                currentCommunityResults: s,
                currentVideoResults: l,
                exhaustedHits: p.exhaustedHits
            }
        }, t.a = i;
        var a = n("6sO2"),
            r = n("NY9D"),
            o = n("vH/s")
    },
    uWno: function(e, t) {},
    uXDg: function(e, t, n) {
        "use strict";
        n.d(t, "f", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "d", function() {
            return o
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "g", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), t.l = function(e, t) {
            return {
                type: i,
                data: e,
                contentWidth: t
            }
        }, t.h = function(e, t) {
            return {
                type: a,
                threadID: e,
                contentWidth: t
            }
        }, t.i = function(e, t) {
            return {
                type: r,
                threadID: e,
                contentWidth: t
            }
        }, t.j = function(e, t) {
            return {
                type: o,
                threadID: e,
                contentWidth: t
            }
        }, t.m = function(e) {
            return {
                type: c,
                contentWidth: e
            }
        }, t.k = function(e, t) {
            return {
                type: s,
                threadID: e,
                contentWidth: t
            }
        }, t.n = function(e, t) {
            return {
                type: l,
                threadID: e,
                contentWidth: t
            }
        };
        var i = "whispers.THREAD_OPENED",
            a = "whispers.THREAD_CLOSED",
            r = "whispers.THREAD_COLLAPSED",
            o = "whispers.THREAD_EXPANDED",
            s = "whispers.THREAD_FOCUSED",
            l = "whispers.THREAD_UNFOCUSED",
            c = "whispers.CONTENT_RESIZED"
    },
    ukY1: function(e, t) {},
    "v+rJ": function(e, t) {},
    vBst: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i;
        ! function(e) {
            e[e.PercentOff = 0] = "PercentOff"
        }(i || (i = {}));
        var a = {
            Prime: "prime",
            Tier1: "1000",
            Tier2: "2000",
            Tier3: "3000"
        }
    },
    "vH/s": function(e, t, n) {
        "use strict";
        var i = n("UF1m");
        n.d(t, "Spade", function() {
            return i.a
        });
        var a = n("IWpL");
        n.o(a, "PageviewContent") && n.d(t, "PageviewContent", function() {
            return a.PageviewContent
        }), n.o(a, "PageviewDirectoryContentType") && n.d(t, "PageviewDirectoryContentType", function() {
            return a.PageviewDirectoryContentType
        }), n.o(a, "PageviewFollowingTab") && n.d(t, "PageviewFollowingTab", function() {
            return a.PageviewFollowingTab
        }), n.o(a, "PageviewLocation") && n.d(t, "PageviewLocation", function() {
            return a.PageviewLocation
        }), n.o(a, "PageviewMedium") && n.d(t, "PageviewMedium", function() {
            return a.PageviewMedium
        }), n.o(a, "ShareItemContext") && n.d(t, "ShareItemContext", function() {
            return a.ShareItemContext
        }), n.o(a, "ShareItemSourceItemType") && n.d(t, "ShareItemSourceItemType", function() {
            return a.ShareItemSourceItemType
        }), n.o(a, "ShareItemType") && n.d(t, "ShareItemType", function() {
            return a.ShareItemType
        }), n.o(a, "SpadeEventType") && n.d(t, "SpadeEventType", function() {
            return a.SpadeEventType
        }), n.o(a, "SpadeFollowingCategory") && n.d(t, "SpadeFollowingCategory", function() {
            return a.SpadeFollowingCategory
        }), n.o(a, "SpadeVideoBroadcastType") && n.d(t, "SpadeVideoBroadcastType", function() {
            return a.SpadeVideoBroadcastType
        }), n.o(a, "TwitchDataType") && n.d(t, "TwitchDataType", function() {
            return a.TwitchDataType
        })
    },
    "vKN/": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "SideNav_FeaturedChannels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "language"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "featuredStreams"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "language"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "broadcaster"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "profileImageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "70"
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query SideNav_FeaturedChannels($language: String) {\nfeaturedStreams(language: $language) {\nstream {\nid\nbroadcaster {\nid\ndisplayName\nlogin\nprofileImageURL(width: 70)\n}\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vQuK: function(e, t) {},
    vRhQ: function(e, t) {},
    "w/8h": function(e, t) {},
    wG4N: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "TrackingManager_RequestInfo"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ipAddress"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 75
            }
        };
        n.loc.source = {
            body: "query TrackingManager_RequestInfo {\nrequestInfo {\ncountryCode\nipAddress\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    wHbv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "OnsiteNotifications_View"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "viewedNotifications"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "notifications"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "summary"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "unseenCount"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "lastSeenAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 123
            }
        };
        n.loc.source = {
            body: "mutation OnsiteNotifications_View {\nviewedNotifications {\nuser {\nnotifications {\nsummary {\nunseenCount\nlastSeenAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    wjhu: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Prime_PrimeOffers_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 95
            }
        };
        n.loc.source = {
            body: "query Prime_PrimeOffers_CurrentUser {\ncurrentUser {\nid\nhasPrime\n}\nrequestInfo {\ncountryCode\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    x4k6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FollowButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "follower"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "disableNotifications"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "query FollowButton_User($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nlogin\nself {\nfollower {\ndisableNotifications\n}\n}\n}\ncurrentUser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    x6ny: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportReasons"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "content"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentType"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportReasons"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 109
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\nreportReasons(content: $content) {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xdZ7: function(e, t) {},
    xrVp: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = "";
            switch (t) {
                case o.a.TypedCommand:
                    n = "typed_command";
                    break;
                case o.a.UserMenu:
                    n = "user_menu";
                    break;
                default:
                    n = "user_menu"
            }
            var r = "";
            switch (e) {
                case a.a.Dark:
                    r = "dark";
                    break;
                case a.a.Light:
                    r = "light";
                    break;
                default:
                    r = "light"
            }
            i.m.track(s.SpadeEventType.ThemeChange, {
                source: n,
                mode: r
            })
        }, t.a = function(e) {
            switch (e) {
                case r.a.Archive:
                    return s.SpadeVideoBroadcastType.Archive;
                case r.a.Highlight:
                    return s.SpadeVideoBroadcastType.Highlight;
                case r.a.Upload:
                    return s.SpadeVideoBroadcastType.Upload;
                case r.a.WatchParty:
                    return s.SpadeVideoBroadcastType.WatchParty;
                case r.a.PastPremiere:
                    return s.SpadeVideoBroadcastType.PastPremiere;
                case r.a.PremiereUpload:
                    return s.SpadeVideoBroadcastType.PremiereUpload;
                default:
                    return e
            }
        };
        var i = n("6sO2"),
            a = n("NXs7"),
            r = n("6WAQ"),
            o = n("NikC"),
            s = n("vH/s")
    },
    xwpJ: function(e, t, n) {
        "use strict";

        function i(e) {
            if (e) {
                var t = e.map(function(e) {
                    return e.id
                });
                return o().filter(function(e) {
                    return t.includes(e.canonical)
                })
            }
            return o()
        }
        var a = function(e, t) {
                var n = "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e);
                return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, n).replace(/{description}/, t)
            },
            r = n("6sO2"),
            o = function() {
                return [{
                    localized: Object(r.d)("Site Suspension Evasion", "ReportUserModal"),
                    canonical: "tos_ban_evasion"
                }, {
                    localized: Object(r.d)("Chat Ban Evasion", "ReportUserModal"),
                    canonical: "chat_ban_evasion"
                }, {
                    localized: Object(r.d)("Self-Harm", "ReportUserModal"),
                    canonical: "selfharm"
                }, {
                    localized: Object(r.d)("Attempts or Threats to Harm", "ReportUserModal"),
                    canonical: "harm"
                }, {
                    localized: Object(r.d)("Harassment", "ReportUserModal"),
                    canonical: "harassment"
                }, {
                    localized: Object(r.d)("Hate Speech", "ReportUserModal"),
                    canonical: "hate_speech"
                }, {
                    localized: Object(r.d)("Offensive Username", "ReportUserModal"),
                    canonical: "offensive_username"
                }, {
                    localized: Object(r.d)("Impersonation", "ReportUserModal"),
                    canonical: "impersonation"
                }, {
                    localized: Object(r.d)("Spam, Scams, or Other Malicious Content", "ReportUserModal"),
                    canonical: "spam"
                }, {
                    localized: Object(r.d)("Porn or Other Sexually Explicit Content", "ReportUserModal"),
                    canonical: "porn"
                }, {
                    localized: Object(r.d)("Nudity or Sexual Behavior/Attire", "ReportUserModal"),
                    canonical: "nudity"
                }, {
                    localized: Object(r.d)("Extreme Violence, Gore, or Other Obscene Content", "ReportUserModal"),
                    canonical: "gore"
                }, {
                    localized: Object(r.d)("Underaged User", "ReportUserModal"),
                    canonical: "underaged"
                }, {
                    localized: Object(r.d)("Cheating in Online Game", "ReportUserModal"),
                    canonical: "cheating"
                }, {
                    localized: Object(r.d)("Prohibited Game", "ReportUserModal"),
                    canonical: "prohibited"
                }, {
                    localized: Object(r.d)("Miscategorized Content or Other Category Violation", "ReportUserModal"),
                    canonical: "miscategorized"
                }, {
                    localized: Object(r.d)("Community Rules Violation", "ReportUserModal"),
                    canonical: "community_rules_violation"
                }, {
                    localized: Object(r.d)("Community is Violating Terms of Service", "ReportUserModal"),
                    canonical: "community_tos_violation"
                }, {
                    localized: Object(r.d)("Bits Acceptable Use Policy Violation", "ReportUserModal"),
                    canonical: "bits_violation"
                }, {
                    localized: Object(r.d)("Other Terms of Service Violation", "ReportUserModal"),
                    canonical: "other"
                }]
            };
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        })
    },
    "y+bN": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Search_SearchLiveResultCard_UserStream"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "previewImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "156"
                                            }
                                        }, {
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "height"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "88"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 145
            }
        };
        n.loc.source = {
            body: "query Search_SearchLiveResultCard_UserStream($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\npreviewImageURL(width: 156 height: 88)\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "y+pq": function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return r
        });
        var i;
        (i || (i = {})).Collection = "collection";
        var a;
        (a || (a = {})).Chomment = "chomment";
        var r;
        ! function(e) {
            e.Collection = "collection", e.Chomment = "chomment"
        }(r || (r = {}))
    },
    yDzg: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (void 0 === t && (t = {}), 0 === Object.keys(t).length) return e;
            var n = new URL(e),
                r = a.stringify(i.__assign({}, a.parse(n.search), t));
            return "" + n.origin + n.pathname + "?" + r + n.hash
        };
        var i = n("TToO"),
            a = n("OAwv");
        n.n(a)
    },
    "yTC+": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_SetMuteThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yWCw: function(e, t, n) {
        "use strict";
        var i = n("U7vG"),
            a = n("Odds"),
            r = (n("N72C"), function(e) {
                return i.createElement(a._19, {
                    className: "core-error",
                    color: a.F.Alt2,
                    display: a.H.Flex,
                    justifyContent: a.U.Center,
                    alignItems: a.c.Center,
                    fullWidth: !e.inline,
                    fullHeight: !e.inline
                }, i.createElement(a.V, {
                    className: "core-error__container",
                    display: a.H.InlineFlex,
                    alignItems: a.c.Center,
                    flexWrap: a.K.NoWrap
                }, i.createElement(a._19, {
                    margin: {
                        right: 2
                    },
                    flexShrink: 0,
                    color: a.F.Alt2
                }, i.createElement(a._10, {
                    asset: a._11.DeadGlitch,
                    width: 92,
                    height: 96
                })), i.createElement(a.V, {
                    className: "core-error__message-container",
                    display: a.H.Flex,
                    flexDirection: a.J.Column
                }, i.createElement(a._23, {
                    fontSize: a.L.Size4,
                    "data-a-target": "core-error-message"
                }, e.message), e.children)))
            });
        n.d(t, "a", function() {
            return r
        })
    },
    zC6J: function(e, t) {},
    zCIC: function(e, t, n) {
        "use strict";
        var i = n("N221"),
            a = n("Th9g"),
            r = n("RH2O"),
            o = n("TToO"),
            s = n("KSGD"),
            l = n("U7vG"),
            c = n("6sO2"),
            u = n("Odds"),
            d = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.getStyles = function() {
                        var e = n.state,
                            t = e.anchoredBottom,
                            i = e.anchoredTop,
                            a = e.top,
                            r = e.width,
                            o = t || i,
                            s = "absolute";
                        return window.outerWidth < (n.props.disableStickinessBelowWidth || 0) ? (s = "inherit", o = !1) : o && (s = "fixed"), {
                            position: s,
                            top: i ? "inherit" : a,
                            width: o ? r : "inherit"
                        }
                    }, n.lockBottom = function(e) {
                        n.setState({
                            anchoredBottom: !0,
                            top: window.innerHeight - e,
                            width: n.element.getBoundingClientRect().width
                        })
                    }, n.lockTop = function() {
                        n.setState({
                            anchoredTop: !0,
                            width: n.element.getBoundingClientRect().width
                        })
                    }, n.resizeStickyColumn = function() {
                        n.unlock(n.state.lastOffset || 0), n.checkBounding(!0, 0)
                    }, n.setRef = function(e) {
                        return n.element = e
                    }, n.state = {
                        anchoredBottom: !1,
                        anchoredTop: !1,
                        lastOffset: void 0,
                        offsetTop: void 0,
                        top: void 0,
                        width: void 0
                    }, n
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this.element.getBoundingClientRect();
                    this.setState({
                        offsetTop: e.top
                    });
                    var t = this.context.registerReceiver;
                    t ? this.unregister = t(this) : c.i.warn("<StickyContainer /> initialized missing a <ScrollableArea /> provider")
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.sideNavExpanded !== e.sideNavExpanded && this.resizeStickyColumn()
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister && this.unregister()
                }, t.prototype.render = function() {
                    return l.createElement(u.V, {
                        position: u._4.Relative,
                        fullWidth: !0
                    }, l.createElement("div", {
                        className: "sticky-container",
                        ref: this.setRef,
                        style: this.getStyles()
                    }, this.props.children))
                }, t.prototype.checkVisible = function(e, t) {
                    return o.__awaiter(this, void 0, void 0, function() {
                        var e, n, a, r, s;
                        return o.__generator(this, function(o) {
                            return !t || t.type !== i.a.Resize && t.type !== i.a.Wheel && t.type !== i.a.Scroll || (e = this.state.anchoredBottom || this.state.anchoredTop, n = t.offset >= (this.state.lastOffset || 0), t.type === i.a.Resize ? (this.unlock(t.offset), this.checkBounding(n, t.offset)) : t.wheelEvent && t.type === i.a.Wheel && e ? (a = t.wheelEvent, r = void 0, r = 0 === a.deltaMode ? a.deltaY || a.wheelDelta : 16 * a.deltaY, s = r + t.offset, this.context.yScrollTo(s), this.checkBounding(r > 0, t.offset)) : t.type !== i.a.Scroll || t.offset === this.state.lastOffset || e || this.checkBounding(n, t.offset)), [2]
                        })
                    })
                }, t.prototype.checkBounding = function(e, t) {
                    e && this.state.anchoredTop && this.unlock(t), !e && this.state.anchoredBottom && this.unlock(t), this.state.anchoredBottom || this.state.anchoredTop || this.shouldLock(e), this.setState({
                        lastOffset: t
                    })
                }, t.prototype.shouldLock = function(e) {
                    var t = this.element.getBoundingClientRect(),
                        n = this.state.offsetTop || 0;
                    if (t.height < window.innerHeight - n) this.lockTop();
                    else {
                        var i = t.top < n,
                            a = t.top >= window.innerHeight,
                            r = t.bottom < n,
                            o = t.bottom + (this.props.bottomPixelThreshold || 0) >= window.innerHeight,
                            s = !a && !i,
                            l = !o && !r;
                        !s && !l || s && l || (!e && s && this.lockTop(), e && l && this.lockBottom(t.height + (this.props.bottomPixelThreshold || 0))), i && r && this.lockBottom(t.height + (this.props.bottomPixelThreshold || 0)), a && o && this.lockTop()
                    }
                }, t.prototype.unlock = function(e) {
                    var t, n = this.state,
                        i = n.offsetTop,
                        a = n.width,
                        r = this.element.getBoundingClientRect(),
                        o = window.innerHeight - (i || 0),
                        s = a;
                    t = "inherit", r.height <= o ? s = "inherit" : this.state.anchoredTop ? t = e : this.state.anchoredBottom && (t = e - r.height + o - (this.props.bottomPixelThreshold || 0)), this.setState({
                        top: t,
                        width: s,
                        anchoredBottom: !1,
                        anchoredTop: !1
                    })
                }, t.contextTypes = {
                    registerReceiver: s.func,
                    yScrollTo: s.func
                }, t
            }(l.Component),
            p = Object(r.a)(function(e) {
                return {
                    sideNavExpanded: e.ui.sideNavExpanded
                }
            })(d);
        n.d(t, "b", function() {
            return i.b
        }), n.d(t, "a", function() {
            return a.a
        }), n.d(t, "c", function() {
            return p
        })
    },
    zF1n: function(e, t) {},
    zNzU: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            resource: {
                isSocialColumnClosedByUserAction: !1,
                isRightColumnClosedByUserAction: !1
            },
            time: Date.now()
        }
    }
}, [4]);
//# sourceMappingURL=core-445fb3892996798ef07c978a2a62aec8.js.map