webpackJsonp([63], [, , function(e, t, n) {
    "use strict";
    var i = n(68);
    n.d(t, "a", function() {
        return i.a
    }), n.d(t, "b", function() {
        return i.b
    }), n.d(t, "c", function() {
        return i.c
    }), n.d(t, "d", function() {
        return i.d
    }), n.d(t, "e", function() {
        return i.e
    }), n.d(t, "f", function() {
        return i.f
    }), n.d(t, "g", function() {
        return i.g
    }), n.d(t, "h", function() {
        return i.h
    }), n.d(t, "i", function() {
        return i.j
    }), n.d(t, "k", function() {
        return i.l
    }), n.d(t, "j", function() {
        return i.k
    }), n.d(t, "m", function() {
        return i.n
    }), n.d(t, "l", function() {
        return i.m
    }), n.d(t, "n", function() {
        return i.o
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        for (var t = {}, n = 0, i = Object.keys(e).filter(function(e) {
                return e.startsWith("data-")
            }); n < i.length; n++) {
            var a = i[n];
            t[a] = e[a]
        }
        return t
    }

    function a(e) {
        for (var t = {}, n = 0, i = Object.keys(e); n < i.length; n++) {
            var a = i[n];
            ct.has(a) && (t[a] = e[a])
        }
        return t
    }

    function r() {
        return "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".replace(/[xy]/g, function(e) {
            var t = 16 * Math.random() | 0;
            return ("x" === e ? t : 3 & t | 8).toString(16)
        })
    }

    function o(e) {
        var t;
        return "string" == typeof e ? t = e : e.pathname && (t = e.pathname), !(!t || !/^\w+:\/\//.test(t) && !t.startsWith("//"))
    }
    var s, l = n(0),
        c = n(4),
        u = n(1);
    n(187);
    ! function(e) {
        e[e.Start = 1] = "Start", e[e.End = 2] = "End", e[e.Center = 3] = "Center", e[e.Baseline = 4] = "Baseline", e[e.Stretch = 5] = "Stretch"
    }(s || (s = {}));
    var d, p = (R = {}, R[s.Start] = "align-content-start", R[s.End] = "align-content-end", R[s.Center] = "align-content-center", R[s.Baseline] = "align-content-baseline", R[s.Stretch] = "align-content-stretch", R);
    ! function(e) {
        e[e.Start = 1] = "Start", e[e.End = 2] = "End", e[e.Center = 3] = "Center", e[e.Baseline = 4] = "Baseline", e[e.Stretch = 5] = "Stretch"
    }(d || (d = {}));
    var m, h = (F = {}, F[d.Start] = "align-items-start", F[d.End] = "align-items-end", F[d.Center] = "align-items-center", F[d.Baseline] = "align-items-baseline", F[d.Stretch] = "align-items-stretch", F);
    ! function(e) {
        e[e.Start = 1] = "Start", e[e.End = 2] = "End", e[e.Center = 3] = "Center", e[e.Baseline = 4] = "Baseline", e[e.Stretch = 5] = "Stretch"
    }(m || (m = {}));
    var g, f = (U = {}, U[m.Start] = "align-self-start", U[m.End] = "align-self-end", U[m.Center] = "align-self-center", U[m.Baseline] = "align-self-baseline", U[m.Stretch] = "align-self-stretch", U);
    ! function(e) {
        e[e.Block = 1] = "Block", e[e.Flex = 2] = "Flex", e[e.Inline = 3] = "Inline", e[e.InlineBlock = 4] = "InlineBlock", e[e.InlineFlex = 5] = "InlineFlex", e[e.Hide = 6] = "Hide", e[e.HideAccessible = 7] = "HideAccessible"
    }(g || (g = {}));
    var v, b = (P = {}, P[g.Block] = "block", P[g.Flex] = "flex", P[g.Inline] = "inline", P[g.InlineBlock] = "inline-block", P[g.InlineFlex] = "inline-flex", P[g.Hide] = "hide", P[g.HideAccessible] = "hide-accessible", P);
    ! function(e) {
        e[e.Column = 1] = "Column", e[e.ColumnReverse = 2] = "ColumnReverse", e[e.Row = 3] = "Row", e[e.RowReverse = 4] = "RowReverse"
    }(v || (v = {}));
    var y, k = (M = {}, M[v.Column] = "flex-column", M[v.ColumnReverse] = "flex-column-reverse", M[v.Row] = "flex-row", M[v.RowReverse] = "flex-row-reverse", M);
    ! function(e) {
        e[e.Wrap = 1] = "Wrap", e[e.NoWrap = 2] = "NoWrap", e[e.WrapReverse = 3] = "WrapReverse"
    }(y || (y = {}));
    var S, _ = (A = {}, A[y.Wrap] = "flex-wrap", A[y.NoWrap] = "flex-nowrap", A[y.WrapReverse] = "flex-wrap-reverse", A);
    ! function(e) {
        e[e.Start = 1] = "Start", e[e.End = 2] = "End", e[e.Center = 3] = "Center", e[e.Between = 4] = "Between", e[e.Around = 5] = "Around"
    }(S || (S = {}));
    var w, E = (j = {}, j[S.Start] = "justify-content-start", j[S.End] = "justify-content-end", j[S.Center] = "justify-content-center", j[S.Between] = "justify-content-between", j[S.Around] = "justify-content-around", j);
    ! function(e) {
        e[e.Auto = 1] = "Auto", e[e.Scroll = 2] = "Scroll", e[e.Visible = 3] = "Visible", e[e.Hidden = 4] = "Hidden"
    }(w || (w = {}));
    var C, N = (B = {}, B[w.Auto] = "overflow-auto", B[w.Scroll] = "overflow-scroll", B[w.Visible] = "overflow-visible", B[w.Hidden] = "overflow-hidden", B);
    ! function(e) {
        e[e.Relative = 1] = "Relative", e[e.Absolute = 2] = "Absolute", e[e.Fixed = 3] = "Fixed"
    }(C || (C = {}));
    var T, D = (H = {}, H[C.Relative] = "relative", H[C.Absolute] = "absolute", H[C.Fixed] = "fixed", H);
    ! function(e) {
        e[e.None = 1] = "None", e[e.X = 2] = "X", e[e.Y = 3] = "Y"
    }(T || (T = {}));
    var I, O = (V = {}, V[T.None] = "resize-none", V[T.X] = "resize-x", V[T.Y] = "resize-y", V);
    ! function(e) {
        e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 3] = "Right"
    }(I || (I = {}));
    var L, x = (z = {}, z[I.Left] = "align-left", z[I.Center] = "align-center", z[I.Right] = "align-right", z);
    ! function(e) {
        e[e.Default = 1] = "Default", e[e.Above = 2] = "Above", e[e.Below = 3] = "Below"
    }(L || (L = {}));
    var R, F, U, P, M, A, j, B, H, V, z, W, q, G = (W = {}, W[L.Default] = "z-default", W[L.Above] = "z-above", W[L.Below] = "z-below", W),
        Q = new Set([0, .5, 1, 2, 3, 4, 5, "auto"]),
        K = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = (m = {}, m["" + this.props.className] = !!this.props.className, m["top-0"] = this.props.attachTop, m["right-0"] = this.props.attachRight, m["bottom-0"] = this.props.attachBottom, m["left-0"] = this.props.attachLeft, m.ellipsis = this.props.ellipsis, m["full-width"] = this.props.fullWidth, m["full-height"] = this.props.fullHeight, m);
                this.props.overflow && (e[N[this.props.overflow]] = !0), this.props.resize && (e[O[T.X]] = !0), this.props.zIndex && (e[G[this.props.zIndex]] = !0);
                var t = this.getBreakpointClasses(this.props),
                    n = this.getBreakpointClasses(this.props.breakpointExtraSmall, "xs"),
                    a = this.getBreakpointClasses(this.props.breakpointSmall, "sm"),
                    r = this.getBreakpointClasses(this.props.breakpointMedium, "md"),
                    o = this.getBreakpointClasses(this.props.breakpointLarge, "lg"),
                    s = this.getBreakpointClasses(this.props.breakpointExtraLarge, "xl"),
                    d = this.getBreakpointClasses(this.props.breakpointExtraExtraLarge, "xxl"),
                    p = u.Children.only(this.props.children);
                return u.cloneElement(p, l.__assign({}, p.props, i(this.props), {
                    className: c(p.props.className, e, t, n, a, r, o, s, d)
                }));
                var m
            }, t.prototype.getBreakpointClasses = function(e, t) {
                if (!e) return "";
                var n = [];
                if (t ? t += "-" : t = "", e.alignContent && n.push(t + p[e.alignContent]), e.alignItems && n.push(t + h[e.alignItems]), e.alignSelf && n.push(t + f[e.alignSelf]), e.display && n.push(t + b[e.display]), e.flexDirection && n.push(t + k[e.flexDirection]), void 0 !== e.flexGrow && n.push(t + "flex-grow-" + e.flexGrow), void 0 !== e.flexOrder && n.push(t + "item-order-" + e.flexOrder), void 0 !== e.flexShrink && n.push(t + "flex-shrink-" + e.flexShrink), e.flexWrap && n.push(t + _[e.flexWrap]), e.justifyContent && n.push(t + E[e.justifyContent]), e.position && n.push(t + D[e.position]), e.textAlign && n.push(t + x[e.textAlign]), void 0 !== e.margin) {
                    var i = this.getSpacingClasses("mg", e.margin);
                    "string" == typeof i ? n.push(t + i) : i.forEach(function(e) {
                        n.push(t + e)
                    })
                }
                if (void 0 !== e.padding) {
                    var i = this.getSpacingClasses("pd", e.padding);
                    "string" == typeof i ? n.push(t + i) : i.forEach(function(e) {
                        n.push(t + e)
                    })
                }
                return n
            }, t.prototype.getSpacingClasses = function(e, t) {
                if (void 0 === t || null === t) return "";
                if ("object" == typeof t) {
                    if (t.x && (t.left || t.right)) throw new Error("Cannot use `x` and `left` or `right` at the same time.");
                    if (t.y && (t.top || t.bottom)) throw new Error("Cannot use `y` and `top` or `bottom` at the same time.");
                    var n = [];
                    return void 0 !== t.top && (.5 === t.top ? n.push(e + "-t-05") : n.push(e + "-t-" + t.top)), void 0 !== t.right && (.5 === t.right ? n.push(e + "-r-05") : n.push(e + "-r-" + t.right)), void 0 !== t.bottom && (.5 === t.bottom ? n.push(e + "-b-05") : n.push(e + "-b-" + t.bottom)), void 0 !== t.left && (.5 === t.left ? n.push(e + "-l-05") : n.push(e + "-l-" + t.left)), void 0 !== t.x && (.5 === t.x ? n.push(e + "-x-05") : n.push(e + "-x-" + t.x)), void 0 !== t.y && (.5 === t.y ? n.push(e + "-y-05") : n.push(e + "-y-" + t.y)), n
                }
                if (!Q.has(t) || "pd" === e && "auto" === t) throw new Error(t + " is not a valid property of either margin or padding");
                return .5 === t ? e + "-05" : "auto" === t ? e + "-auto" : e + "-" + t
            }, t
        }(u.Component),
        $ = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e), t.prototype.render = function() {
                return u.createElement(K, l.__assign({}, this.props), u.createElement("div", {
                    ref: this.props.refDelegate
                }, this.props.children))
            }, t
        }(K);
    n(188);
    ! function(e) {
        e[e.Short = 1] = "Short", e[e.Medium = 2] = "Medium", e[e.Long = 3] = "Long"
    }(q || (q = {}));
    var Y, J = (ne = {}, ne[q.Short] = "tw-animation--delay-short", ne[q.Medium] = "tw-animation--delay-medium", ne[q.Long] = "tw-animation--delay-long", ne);
    ! function(e) {
        e[e.Short = 1] = "Short", e[e.Medium = 2] = "Medium", e[e.Long = 3] = "Long"
    }(Y || (Y = {}));
    var X, Z = (ie = {}, ie[Y.Short] = "tw-animation--duration-short", ie[Y.Medium] = "tw-animation--duration-medium", ie[Y.Long] = "tw-animation--duration-long", ie);
    ! function(e) {
        e[e.Ease = 1] = "Ease", e[e.Linear = 2] = "Linear", e[e.EaseIn = 3] = "EaseIn", e[e.EaseOut = 4] = "EaseOut", e[e.EaseInOut = 5] = "EaseInOut"
    }(X || (X = {}));
    var ee, te = (ae = {}, ae[X.Ease] = "tw-animation--timing-ease", ae[X.Linear] = "tw-animation--timing-linear", ae[X.EaseIn] = "tw-animation--timing-ease-in", ae[X.EaseOut] = "tw-animation--timing-ease-out", ae[X.EaseInOut] = "tw-animation--timing-ease-in-out", ae);
    ! function(e) {
        e[e.Bounce = 1] = "Bounce", e[e.BounceIn = 2] = "BounceIn", e[e.BounceOut = 3] = "BounceOut", e[e.FadeIn = 4] = "FadeIn", e[e.FadeOut = 5] = "FadeOut", e[e.SlideInTop = 6] = "SlideInTop", e[e.SlideInRight = 7] = "SlideInRight", e[e.SlideInBottom = 8] = "SlideInBottom", e[e.SlideInLeft = 9] = "SlideInLeft", e[e.SlideOutTop = 10] = "SlideOutTop", e[e.SlideOutRight = 11] = "SlideOutRight", e[e.SlideOutBottom = 12] = "SlideOutBottom", e[e.SlideOutLeft = 13] = "SlideOutLeft"
    }(ee || (ee = {}));
    var ne, ie, ae, re, oe, se = (re = {}, re[ee.Bounce] = "tw-animation--bounce", re[ee.BounceIn] = "tw-animation--bounce-in", re[ee.BounceOut] = "tw-animation--bounce-out", re[ee.FadeIn] = "tw-animation--fade-in", re[ee.FadeOut] = "tw-animation--fade-out", re[ee.SlideInTop] = "tw-animation--slide-in-top", re[ee.SlideInRight] = "tw-animation--slide-in-right", re[ee.SlideInBottom] = "tw-animation--slide-in-bottom", re[ee.SlideInLeft] = "tw-animation--slide-in-left", re[ee.SlideOutTop] = "tw-animation--slide-out-top", re[ee.SlideOutRight] = "tw-animation--slide-out-right", re[ee.SlideOutBottom] = "tw-animation--slide-out-bottom", re[ee.SlideOutLeft] = "tw-animation--slide-out-left", re),
        le = function(e) {
            var t = {
                "tw-animation": !0,
                "tw-animation--animate": e.enabled,
                "tw-animation--loop": e.loop
            };
            return e.delay && (t[J[e.delay]] = !0), e.duration ? t[Z[e.duration]] = !0 : t[Z[Y.Short]] = !0, e.timing ? t[te[e.timing]] = !0 : t[te[X.Ease]] = !0, e.type && (t[se[e.type]] = !0), u.createElement(K, l.__assign({
                className: c(t)
            }, i(e)), u.createElement("div", {
                onAnimationStart: e.onAnimationStart,
                onAnimationEnd: e.onAnimationEnd,
                "data-a-target": "tw-animation-target"
            }, e.children))
        };
    n(189);
    ! function(e) {
        e[e.Aspect21x9 = 1] = "Aspect21x9", e[e.Aspect16x9 = 2] = "Aspect16x9", e[e.Aspect4x3 = 3] = "Aspect4x3", e[e.Aspect1x1 = 4] = "Aspect1x1", e[e.Aspect3x4 = 5] = "Aspect3x4", e[e.BoxArt = 6] = "BoxArt"
    }(oe || (oe = {}));
    var ce;
    ! function(e) {
        e[e.Top = 1] = "Top", e[e.Center = 2] = "Center", e[e.Bottom = 3] = "Bottom"
    }(ce || (ce = {}));
    var ue, de, pe, me = (ue = {}, ue[oe.Aspect21x9] = "tw-aspect--21x9", ue[oe.Aspect16x9] = "tw-aspect--16x9", ue[oe.Aspect4x3] = "tw-aspect--4x3", ue[oe.Aspect1x1] = "tw-aspect--1x1", ue[oe.Aspect3x4] = "tw-aspect--3x4", ue[oe.BoxArt] = "tw-aspect--boxart", ue),
        he = (de = {}, de[ce.Top] = "tw-aspect--align-top", de[ce.Center] = "tw-aspect--align-center", de[ce.Bottom] = "tw-aspect--align-bottom", de),
        ge = function(e) {
            var t = {
                "tw-aspect--overflow": e.overflow
            };
            return e.ratio ? t[me[e.ratio]] = !0 : t[me[oe.Aspect16x9]] = !0, e.align ? t[he[e.align]] = !0 : t[he[ce.Top]] = !0, u.createElement("figure", l.__assign({
                className: c("tw-aspect", t)
            }, i(e)), e.children)
        };
    n(190);
    ! function(e) {
        e[e.Offline = 1] = "Offline", e[e.Invisible = 2] = "Invisible", e[e.Online = 3] = "Online", e[e.Busy = 4] = "Busy", e[e.Away = 5] = "Away"
    }(pe || (pe = {}));
    var fe, ve, be = (fe = {}, fe[pe.Offline] = "tw-presence__indicator--offline", fe[pe.Invisible] = "tw-presence__indicator--invisible", fe[pe.Online] = "tw-presence__indicator--online", fe[pe.Busy] = "tw-presence__indicator--busy", fe[pe.Away] = "tw-presence__indicator--away", fe),
        ye = function(e) {
            var t = {
                    "tw-presence": !0,
                    "tw-presence--border": e.border
                },
                n = {};
            return e.status ? n[be[e.status]] = !0 : n[be[pe.Offline]] = !0, u.createElement($, l.__assign({
                className: c(t),
                display: g.InlineFlex,
                position: C.Relative
            }, i(e)), u.createElement("div", {
                className: "tw-presence__border"
            }), u.createElement("div", {
                className: "tw-presence__indicator " + c(n)
            }))
        };
    n(191);
    ! function(e) {
        e[e.Base = 1] = "Base", e[e.Alt = 2] = "Alt", e[e.Alt2 = 3] = "Alt2", e[e.Link = 4] = "Link", e[e.Live = 5] = "Live", e[e.Error = 6] = "Error", e[e.Overlay = 7] = "Overlay", e[e.OverlayAlt = 8] = "OverlayAlt"
    }(ve || (ve = {}));
    var ke, Se = (Ie = {}, Ie[ve.Base] = "c-text", Ie[ve.Alt] = "c-text-alt", Ie[ve.Alt2] = "c-text-alt-2", Ie[ve.Link] = "c-text-link", Ie[ve.Live] = "c-text-live", Ie[ve.Error] = "c-text-error", Ie[ve.Overlay] = "c-text-overlay", Ie[ve.OverlayAlt] = "c-text-overlay-alt", Ie);
    ! function(e) {
        e[e.Size1 = 1] = "Size1", e[e.Size2 = 2] = "Size2", e[e.Size3 = 3] = "Size3", e[e.Size4 = 4] = "Size4", e[e.Size5 = 5] = "Size5", e[e.Size6 = 6] = "Size6", e[e.Size7 = 7] = "Size7", e[e.Size8 = 8] = "Size8"
    }(ke || (ke = {}));
    var _e, we = (Oe = {}, Oe[ke.Size1] = "font-size-1", Oe[ke.Size2] = "font-size-2", Oe[ke.Size3] = "font-size-3", Oe[ke.Size4] = "font-size-4", Oe[ke.Size5] = "font-size-5", Oe[ke.Size6] = "font-size-6", Oe[ke.Size7] = "font-size-7", Oe[ke.Size8] = "font-size-8", Oe);
    ! function(e) {
        e[e.Underline = 1] = "Underline", e[e.Strikethrough = 2] = "Strikethrough"
    }(_e || (_e = {}));
    var Ee, Ce = (Le = {}, Le[_e.Underline] = "underline", Le[_e.Strikethrough] = "strikethrough", Le);
    ! function(e) {
        e[e.Capitalize = 1] = "Capitalize", e[e.Uppercase = 2] = "Uppercase"
    }(Ee || (Ee = {}));
    var Ne, Te = (xe = {}, xe[Ee.Capitalize] = "capcase", xe[Ee.Uppercase] = "upcase", xe);
    ! function(e) {
        e[e.P = 1] = "P", e[e.Span = 2] = "Span", e[e.H1 = 3] = "H1", e[e.H2 = 4] = "H2", e[e.H3 = 5] = "H3", e[e.H4 = 6] = "H4", e[e.H5 = 7] = "H5", e[e.H6 = 8] = "H6", e[e.Strong = 9] = "Strong", e[e.Em = 10] = "Em"
    }(Ne || (Ne = {}));
    var De;
    ! function(e) {
        e[e.Top = 1] = "Top", e[e.Middle = 2] = "Middle", e[e.Baseline = 3] = "Baseline", e[e.Bottom = 4] = "Bottom", e[e.TextTop = 5] = "TextTop", e[e.TextBottom = 6] = "TextBottom"
    }(De || (De = {}));
    var Ie, Oe, Le, xe, Re, Fe, Ue = (Re = {}, Re[De.Top] = "align-top", Re[De.Middle] = "align-middle", Re[De.Baseline] = "align-baseline", Re[De.Bottom] = "align-bottom", Re[De.TextTop] = "align-text-top", Re[De.TextBottom] = "align-text-bottom", Re),
        Pe = function(e) {
            var t = (a = {
                ellipsis: e.ellipsis || e.lines && e.lines > 0,
                italic: e.italic,
                nowrap: e.noWrap,
                strong: e.bold
            }, a["line-clamp-2"] = 2 === e.lines, a);
            e.align && (t[Ue[e.align]] = !0), e.color && (t[Se[e.color]] = !0), e.fontSize && (t[we[e.fontSize]] = !0), e.transform && (t[Te[e.transform]] = !0), e.decoration && (t[Ce[e.decoration]] = !0);
            var n;
            return e.title ? n = e.title : e.ellipsis && "string" == typeof e.children && (n = e.children), u.createElement(e.type ? Ne[e.type] : "p", l.__assign({
                className: c(e.className, t)
            }, i(e), {
                title: n
            }), e.children);
            var a
        };
    n(192);
    ! function(e) {
        e[e.Base = 1] = "Base", e[e.Alt = 2] = "Alt", e[e.Alt2 = 3] = "Alt2", e[e.Overlay = 4] = "Overlay", e[e.Accent = 5] = "Accent", e[e.AccentAlt = 6] = "AccentAlt", e[e.AccentAlt2 = 7] = "AccentAlt2"
    }(Fe || (Fe = {}));
    var Me, Ae = (je = {}, je[Fe.Base] = "c-background", je[Fe.Alt] = "c-background-alt", je[Fe.Alt2] = "c-background-alt-2", je[Fe.Overlay] = "c-background-overlay", je[Fe.Accent] = "c-background-accent", je[Fe.AccentAlt] = "c-background-accent-alt", je[Fe.AccentAlt2] = "c-background-accent-alt-2", je);
    ! function(e) {
        e[e.None = 1] = "None", e[e.Small = 2] = "Small", e[e.Medium = 3] = "Medium", e[e.Large = 4] = "Large", e[e.Rounded = 5] = "Rounded"
    }(Me || (Me = {}));
    var je, Be, He, Ve, ze, We, qe = (Be = {}, Be[Me.None] = "border-radius-none", Be[Me.Small] = "border-radius-small", Be[Me.Medium] = "border-radius-medium", Be[Me.Large] = "border-radius-large", Be[Me.Rounded] = "border-radius-rounded", Be),
        Ge = (He = {}, He[ve.Base] = "c-text", He[ve.Alt] = "c-text-alt", He[ve.Alt2] = "c-text-alt-2", He[ve.Link] = "c-text-link", He[ve.Live] = "c-text-live", He[ve.Error] = "c-text-error", He[ve.Overlay] = "c-text-overlay", He[ve.OverlayAlt] = "c-text-overlay-alt", He),
        Qe = (Ve = {}, Ve[ke.Size1] = "font-size-1", Ve[ke.Size2] = "font-size-2", Ve[ke.Size3] = "font-size-3", Ve[ke.Size4] = "font-size-4", Ve[ke.Size5] = "font-size-5", Ve[ke.Size6] = "font-size-6", Ve[ke.Size7] = "font-size-7", Ve[ke.Size8] = "font-size-8", Ve),
        Ke = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = (g = {
                    "border-t": this.props.border || this.props.borderMarked || this.props.borderTop,
                    "border-r": this.props.border || this.props.borderMarked || this.props.borderRight,
                    "border-b": this.props.border || this.props.borderMarked || this.props.borderBottom,
                    "border-l": this.props.border || this.props.borderLeft && !this.props.borderMarked,
                    "border--marked": this.props.borderMarked
                }, g["elevation-" + this.props.elevation] = !!this.props.elevation, g);
                this.props.borderRadius && (e[qe[this.props.borderRadius]] = !0);
                var t = this.getColorClass(),
                    n = this.getBackgroundClass(),
                    a = this.getBreakpointClasses(this.props),
                    r = this.getBreakpointClasses(this.props.breakpointExtraSmall, "xs"),
                    o = this.getBreakpointClasses(this.props.breakpointSmall, "sm"),
                    s = this.getBreakpointClasses(this.props.breakpointMedium, "md"),
                    d = this.getBreakpointClasses(this.props.breakpointLarge, "lg"),
                    p = this.getBreakpointClasses(this.props.breakpointExtraLarge, "xl"),
                    m = this.getBreakpointClasses(this.props.breakpointExtraExtraLarge, "xxl"),
                    h = l.__assign({}, this.props, i(this.props), {
                        className: c(this.props.className, e, n, t, a, r, o, s, d, p, m)
                    });
                return u.createElement($, l.__assign({}, h));
                var g
            }, t.prototype.getBreakpointClasses = function(e, t) {
                if (!e) return "";
                var n = [];
                return t ? t += "-" : t = "", e.fontSize && n.push(t + Qe[e.fontSize]), n
            }, t.prototype.getColorClass = function() {
                return this.props.background !== Fe.Overlay || this.props.color ? this.props.color ? Ge[this.props.color] : "" : Ge[ve.Overlay]
            }, t.prototype.getBackgroundClass = function() {
                return this.props.background ? Ae[this.props.background] : ""
            }, t
        }(u.Component),
        $e = (n(193), ze = {}, ze[Me.None] = "border-radius-none", ze[Me.Small] = "border-radius-small", ze[Me.Medium] = "border-radius-medium", ze[Me.Large] = "border-radius-large", ze[Me.Rounded] = "border-radius-rounded", ze),
        Ye = function(e) {
            var t = (o = {
                    "tw-avatar": !0
                }, o["tw-avatar--size-" + e.size] = !!e.size, o),
                n = {};
            e.borderRadius && (n[$e[e.borderRadius]] = !0);
            var a, r;
            return a = 300 === e.size ? "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_300x300.png" : 96 === e.size || 80 === e.size ? "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_150x150.png" : "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_70x70.png", e.presenceIndicator && (r = u.createElement($, {
                className: "tw-avatar__presence",
                display: g.Flex,
                justifyContent: S.Center,
                alignItems: d.Center,
                position: C.Absolute
            }, u.createElement(ye, {
                border: !0,
                status: e.presenceStatus
            }))), u.createElement("figure", l.__assign({
                className: c(t)
            }, i(e)), u.createElement("img", {
                className: c(n),
                src: e.imageSrc || a,
                alt: e.imageAlt,
                onLoad: e.onImageLoad,
                onError: e.onImageError
            }), r);
            var o
        };
    n(194);
    ! function(e) {
        e[e.Inherit = 0] = "Inherit", e[e.Alt = 1] = "Alt", e[e.Alt2 = 2] = "Alt2", e[e.Brand = 3] = "Brand", e[e.Live = 4] = "Live", e[e.Warn = 5] = "Warn", e[e.Alert = 6] = "Alert", e[e.Success = 7] = "Success", e[e.Prime = 8] = "Prime", e[e.Placeholder = 9] = "Placeholder", e[e.OverlayPlaceholder = 10] = "OverlayPlaceholder"
    }(We || (We = {}));
    var Je, Xe = (Ze = {}, Ze[We.Inherit] = "svg--inherit", Ze[We.Alt] = "svg--alt", Ze[We.Alt2] = "svg--alt-2", Ze[We.Brand] = "svg--brand", Ze[We.Live] = "svg--live", Ze[We.Warn] = "svg--warn", Ze[We.Alert] = "svg--alert", Ze[We.Success] = "svg--success", Ze[We.Prime] = "svg--prime", Ze[We.Placeholder] = "svg--placeholder", Ze[We.OverlayPlaceholder] = "svg--overlay-placeholder", Ze);
    ! function(e) {
        e[e.AddFriend = 1] = "AddFriend", e[e.AddUser = 2] = "AddUser", e[e.AddReaction = 3] = "AddReaction", e[e.AngleLeft = 4] = "AngleLeft", e[e.AngleRight = 5] = "AngleRight", e[e.Ban = 6] = "Ban", e[e.Bits = 7] = "Bits", e[e.ChatRiskFlag = 8] = "ChatRiskFlag", e[e.ChatSettingsBack = 9] = "ChatSettingsBack", e[e.Check = 10] = "Check", e[e.Clip = 11] = "Clip", e[e.Close = 12] = "Close", e[e.Collections = 13] = "Collections", e[e.Communities = 14] = "Communities", e[e.Conversations = 15] = "Conversations", e[e.Copy = 16] = "Copy", e[e.Crate = 17] = "Crate", e[e.Crown = 18] = "Crown", e[e.DeadGlitch = 19] = "DeadGlitch", e[e.Download = 20] = "Download", e[e.Edit = 21] = "Edit", e[e.Emoticons = 22] = "Emoticons", e[e.Extensions = 23] = "Extensions", e[e.Facebook = 24] = "Facebook", e[e.Featured = 25] = "Featured", e[e.Filter = 26] = "Filter", e[e.FollowCheck = 27] = "FollowCheck", e[e.FollowX = 28] = "FollowX", e[e.Friends = 29] = "Friends", e[e.FriendsSC = 30] = "FriendsSC", e[e.Gear = 31] = "Gear", e[e.Global = 32] = "Global", e[e.GlyphArrDown = 33] = "GlyphArrDown", e[e.GlyphArrUp = 34] = "GlyphArrUp", e[e.GlyphFollowers = 35] = "GlyphFollowers", e[e.GlyphLength = 36] = "GlyphLength", e[e.GlyphLive = 37] = "GlyphLive", e[e.GlyphLiveSmall = 38] = "GlyphLiveSmall", e[e.GlyphViews = 39] = "GlyphViews", e[e.GridLayout = 40] = "GridLayout", e[e.Hash = 41] = "Hash", e[e.Heart = 42] = "Heart", e[e.HGCNexus = 43] = "HGCNexus", e[e.Hide = 44] = "Hide", e[e.HourGlass = 45] = "HourGlass", e[e.Ignore = 46] = "Ignore", e[e.Link = 47] = "Link", e[e.Lock = 48] = "Lock", e[e.LogoGlitch = 49] = "LogoGlitch", e[e.LogoTwitch = 50] = "LogoTwitch", e[e.LogoTwitchPrime = 51] = "LogoTwitchPrime", e[e.LogoTwitchPrimeHorizontal = 52] = "LogoTwitchPrimeHorizontal", e[e.Maximize = 53] = "Maximize", e[e.MessagesSC = 54] = "MessagesSC", e[e.Minimize = 55] = "Minimize", e[e.MiniPlayerExpand = 56] = "MiniPlayerExpand", e[e.MiniPlayerPause = 57] = "MiniPlayerPause", e[e.MiniPlayerPlay = 58] = "MiniPlayerPlay", e[e.More = 59] = "More", e[e.Muted = 60] = "Muted", e[e.NavBackpack = 61] = "NavBackpack", e[e.NavChannels = 62] = "NavChannels", e[e.NavCreative = 63] = "NavCreative", e[e.NavDashboard = 64] = "NavDashboard", e[e.NavDiscover = 65] = "NavDiscover", e[e.NavFollowing = 66] = "NavFollowing", e[e.NavGames = 67] = "NavGames", e[e.NavLogout = 68] = "NavLogout", e[e.NavManager = 69] = "NavManager", e[e.NavMessages = 70] = "NavMessages", e[e.NavMore = 71] = "NavMore", e[e.NavMyChannel = 72] = "NavMyChannel", e[e.NavProfile = 73] = "NavProfile", e[e.NavSearch = 74] = "NavSearch", e[e.NavSettings = 75] = "NavSettings", e[e.NavVideos = 76] = "NavVideos", e[e.Neck = 77] = "Neck", e[e.NotificationBell = 78] = "NotificationBell", e[e.OP = 79] = "OP", e[e.PermissionsAdd = 80] = "PermissionsAdd", e[e.PermissionsAdded = 81] = "PermissionsAdded", e[e.PermissionsRemove = 82] = "PermissionsRemove", e[e.Pin = 83] = "Pin", e[e.Pinned = 84] = "Pinned", e[e.Play = 85] = "Play", e[e.Playlist = 86] = "Playlist", e[e.Plus = 87] = "Plus", e[e.Popout = 88] = "Popout", e[e.QuestionMark = 89] = "QuestionMark", e[e.Reddit = 90] = "Reddit", e[e.RemoveTag = 91] = "RemoveTag", e[e.RequestsSC = 92] = "RequestsSC", e[e.Roman1 = 93] = "Roman1", e[e.Roman2 = 94] = "Roman2", e[e.Roman3 = 95] = "Roman3", e[e.Roman4 = 96] = "Roman4", e[e.Roman5 = 97] = "Roman5", e[e.RoomList = 98] = "RoomList", e[e.RoomListOpen = 99] = "RoomListOpen", e[e.SearchNoResults = 100] = "SearchNoResults", e[e.Share = 101] = "Share", e[e.Shirt = 102] = "Shirt", e[e.Star = 103] = "Star", e[e.Steam = 104] = "Steam", e[e.Sword = 105] = "Sword", e[e.Team = 106] = "Team", e[e.Theater = 107] = "Theater", e[e.Timeout = 108] = "Timeout", e[e.Timer = 109] = "Timer", e[e.ToTop = 110] = "ToTop", e[e.Trash = 111] = "Trash", e[e.Trophy = 112] = "Trophy", e[e.Twitter = 113] = "Twitter", e[e.Unheart = 114] = "Unheart", e[e.Unignore = 115] = "Unignore", e[e.Unlock = 116] = "Unlock", e[e.UpArrow = 117] = "UpArrow", e[e.Upload = 118] = "Upload", e[e.VKontakte = 119] = "VKontakte", e[e.Verified = 120] = "Verified", e[e.VideoPremiere = 121] = "VideoPremiere", e[e.VideoRerun = 122] = "VideoRerun", e[e.ViewerList = 123] = "ViewerList", e[e.Warning = 124] = "Warning", e[e.WhisperMuted = 125] = "WhisperMuted"
    }(Je || (Je = {}));
    var Ze, et, tt, nt = (et = {}, et[Je.AddFriend] = {
            path: u.createElement("path", {
                d: "M3,6 L1,6 L1,7 L3,7 L3,9 L4,9 L4,7 L6,7 L6,6 L4,6 L4,4 L3,4 L3,6 Z M9.57142857,3 L12.4285714,3 L13.8571429,4.42857143 L13.8571429,8 L11.7142857,9.42857143 L11.7142857,10.1428571 L14.5714286,10.1428571 L16,11.5714286 L16,13 L6,13 L6,11.5714286 L7.42857143,10.1428571 L10.2857143,10.1428571 L10.2857143,9.42857143 L8.14285714,8 L8.14285714,4.42857143 L9.57142857,3 Z"
            }),
            width: 16,
            height: 16
        }, et[Je.AddUser] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M15,9h-3v3h-2V9H7V7h3V4h2v3h3V9z M9,6H6v4h2h1v3h4l0,0l0,0v1h-3H4H1v-1l3-3h2L4,8V2h6v1H9V6z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.AddReaction] = {
            path: u.createElement("path", {
                d: "M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10zm0 2C5.373 24 0 18.627 0 12S5.373 0 12 0s12 5.373 12 12-5.373 12-12 12zm4-12c0-.776-.223-1-1-1h-2V9c0-.776-.223-1-1-1-.776 0-1 .224-1 1v2H9c-.776 0-1 .224-1 1 0 .777.224 1 1 1h2v2c0 .777.224 1 1 1 .777 0 1-.223 1-1v-2h2c.777 0 1-.223 1-1z"
            }),
            width: 24,
            height: 24
        }, et[Je.AngleLeft] = {
            path: u.createElement("path", {
                d: "M7.11 8l5.446-5.444L11 1 4 8l7 7 1.556-1.556"
            }),
            width: 16,
            height: 16
        }, et[Je.AngleRight] = {
            path: u.createElement("path", {
                d: "M9.444 8L4 2.556 5.556 1l7 7-7 7L4 13.444"
            }),
            width: 16,
            height: 16
        }, et[Je.Ban] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M8,15c-3.866,0-7-3.134-7-7s3.134-7,7-7s7,3.134,7,7S11.866,15,8,15z M3,8c0,1.019,0.309,1.964,0.832,2.754l6.922-6.922C9.964,3.309,9.019,3,8,3C5.238,3,3,5.238,3,8z M12.169,5.246l-6.923,6.923C6.036,12.691,6.98,13,8,13c2.762,0,5-2.238,5-5C13,6.98,12.691,6.036,12.169,5.246z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Bits] = {
            path: u.createElement("path", {
                d: "M16.6,13.2L9,17.4l-7.6-4.2L9,0.5L16.6,13.2z M9.1,9.4l-5,3l5,2.5l5-2.6L9.1,9.4z M6,8.9L9,7l3,1.9L9,4.4L6,8.9z"
            }),
            width: 18,
            height: 18
        }, et[Je.ChatRiskFlag] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M3,14 L1,14 L1,2 L3,2 L3,14 L3,14 Z M4,2 L11,2 L11,4 L15,4 L15,11 L8,11 L8,9 L4,9 L4,2 L4,2 Z"
            }),
            width: 16,
            height: 16
        }, et[Je.Check] = {
            path: u.createElement("path", {
                d: "M16,2.24074074 C16,2.24074074 6.56165287,14.0131532 6.46051168,14 C6.39491888,13.9966933 0,8.44444444 0,8.44444444 L2.13570634,5.74074074 L6.10456062,9.12962963 L13.4905451,0 L16,2.24074074 Z"
            }),
            width: 16,
            height: 16
        }, et[Je.ChatSettingsBack] = {
            path: u.createElement("path", {
                d: "M1 5l6-4v8z",
                fillRule: "evenodd"
            }),
            width: 10,
            height: 10
        }, et[Je.Clip] = {
            path: u.createElement("path", {
                d: "M14.802 7.804l-3.83 1.026 2.928 2.321 3.83-1.026-2.928-2.321zm2.895-.776l3.981-1.067.777 2.898-1.83.49-2.928-2.321zM7.969 9.635l-1.745.467L7 13l3.898-1.044-2.929-2.321zM7 13h16v9H7v-9zm1.969 3h2.785l2.228-3h-2.785l-2.228 3zm7.018 0h2.785L21 13h-2.785l-2.228 3z"
            }),
            width: 30,
            height: 30
        }, et[Je.Close] = {
            path: u.createElement("path", {
                d: "M8 6.586L3.757 2.343 2.343 3.757 6.586 8l-4.243 4.243 1.414 1.414L8 9.414l4.243 4.243 1.414-1.414L9.414 8l4.243-4.243-1.414-1.414",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Collections] = {
            path: u.createElement("path", {
                d: "M1 7h18v12H1V7zm12 6l-5-3v6l5-3zM3 4h14v2H3V4zm2-3h10v2H5V1z"
            }),
            width: 20,
            height: 20
        }, et[Je.Communities] = {
            path: u.createElement("path", {
                d: "M3.25 17L4 14H2l.75 3h.5zm12 0l.75-3h-2l.75 3h.5zm-6.82-1l-1.144-4H6L5 6h8l-1 6h-1.286L9.57 16H8.43zM5 5H4l.5 3H1V4h4v1zm-.333 4l.606 3.636L5 14H1L0 9h4.667zM13.5 8H17V4h-4v1h1l-.5 3zm-.167 1H18l-1 5h-4l-.273-1.364L13.333 9zM7 1h4v4H7V1z"
            }),
            width: 18,
            height: 18
        }, et[Je.Conversations] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M2.57894737,12.1904762 L0,12.1904762 L0,0 L14,0 L14,12.1904762 L7,12.1904762 L2.57894737,16 L2.57894737,12.1904762 Z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Copy] = {
            path: u.createElement("g", {
                fillRule: "evenodd"
            }, u.createElement("path", {
                d: "M9 19.607l4.755-4.755 3.535 3.535-4.754 4.755L9 19.607zm1.44-.025l4.022-4.023 2.12 2.12-4.022 4.024-2.12-2.122zm4.412-5.827L19.607 9l3.535 3.536-4.755 4.754-3.535-3.535zm.707.707l4.022-4.023 2.122 2.12-4.024 4.023-2.12-2.12z"
            }), u.createElement("path", {
                d: "M12.987 17.74l4.754-4.753 1.415 1.414-4.754 4.755z"
            })),
            width: 32,
            height: 32
        }, et[Je.Crate] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M8 8h3v4.3l2-.7V8h3v3l-.4 1L8 15H7V7l1 1zM7 7v8H6L.4 12 0 11V8h1v3l4 2 1-1V8l1-1zM15 6h-2V3.4l-2-.6V6H8L7 7V1h1l7.6 2 .4 1v2h-1zM0 6V4l.4-1L6 1h1v6L6 6V2.1L1 3.9V6H0z"
            }), u.createElement("path", {
                opacity: ".5",
                d: "M13 8h3l-1-1h-2"
            }), u.createElement("path", {
                fillOpacity: ".25",
                d: "M13 7h2l1-1h-3"
            }), u.createElement("path", {
                opacity: ".5",
                d: "M8 8h3V7H7"
            }), u.createElement("path", {
                fillOpacity: ".25",
                d: "M7 7h4V6H8"
            }), u.createElement("path", {
                opacity: ".25",
                d: "M3 8H0l1-1h2M6 8H4V7h3"
            }), u.createElement("path", {
                opacity: ".75",
                d: "M11 5h2V3.4l-2-.6M11 12.3l2-.6V9h-2"
            }), u.createElement("path", {
                d: "M1.5 3.3L.3 1.9l.2-.8L3.8 0l.5.1 1.5 1.6-4.3 1.6zm.1-1.5l.4.6 2.3-.8-.5-.6-2.2.8z"
            }), u.createElement("path", {
                fillOpacity: ".5",
                d: "M4 12.5l2 1V8H4M3 12l-2-1V8h2"
            }), u.createElement("path", {
                opacity: ".3",
                d: "M3 12.1l1 .4V9H3"
            }), u.createElement("path", {
                fillOpacity: ".5",
                d: "M4 2.7l2-.6V6H4M3 6H1V3.9l2-.7"
            }), u.createElement("path", {
                opacity: ".3",
                d: "M3 5h1V2.7l-1 .5"
            })),
            width: 16,
            height: 15
        }, et[Je.Crown] = {
            path: u.createElement("polygon", {
                points: "15.7,5.8 10,0.1 4.3,5.8 0,1.5 0,12.9 20,12.9 20,1.5"
            }),
            width: 20,
            height: 13
        }, et[Je.DeadGlitch] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M26,17.4589613 L26,3 L4,3 L4,22.0601057 L10.0032868,22.0601057 L10.0032868,26 L14.0004537,22.0601057 L21.3322933,22.0601057 L26,17.4589613 L26,17.4589613 Z M21.0896458,26.0850335 L15.1583403,26.0850335 L11.2051771,30 L7.24798611,30 L7.24798611,26.0850335 L0,26.0850335 L0,5.21746493 L1.97773958,0 L29,0 L29,18.2620736 L21.0896458,26.0850335 L21.0896458,26.0850335 Z"
            }), u.createElement("path", {
                d: "M20.8587626,12.1710126 L22.4052753,13.7175252 L23.7175252,12.4052753 L22.1710126,10.8587626 L23.7175252,9.31224999 L22.4052753,8 L20.8587626,9.54651264 L19.31225,8 L18,9.31224999 L19.5465126,10.8587626 L18,12.4052753 L19.31225,13.7175252 L20.8587626,12.1710126 Z M11.8587626,12.1710126 L13.4052753,13.7175252 L14.7175252,12.4052753 L13.1710126,10.8587626 L14.7175252,9.31224999 L13.4052753,8 L11.8587626,9.54651264 L10.31225,8 L9,9.31224999 L10.5465126,10.8587626 L9,12.4052753 L10.31225,13.7175252 L11.8587626,12.1710126 Z"
            })),
            width: 30,
            height: 30
        }, et[Je.Download] = {
            path: u.createElement("path", {
                d: "M30.7,12.6c0.4-0.7,0.6-1.5,0.6-2.4c0-3-2.4-5.4-5.4-5.4c-1,0-2,0.3-2.8,0.8C21.6,2.3,18.2,0,14.3,0   C8.9,0,4.6,4.4,4.6,9.8c0,0.3,0,0.7,0.1,1C1.9,12.2,0,15.1,0,18.4c0,4.8,3.9,8.7,8.7,8.7h19.4c4.1,0,7.5-3.4,7.5-7.5   C35.6,16.4,33.6,13.6,30.7,12.6z M16.5,22.3l-6.7-7.1h4.5V7.9h4.4v7.3h4.6L16.5,22.3z"
            }),
            width: 35.6,
            height: 27.1
        }, et[Je.Edit] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M6.414,12.414L3.586,9.586l8-8l2.828,2.828L6.414,12.414z M4.829,14H2l0,0v-2.828l0.586-0.586l2.828,2.828L4.829,14z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Emoticons] = {
            path: u.createElement("path", {
                d: "M6.714 5.143H5v1.714h1.714V5.143zM12 0H4L0 4v8l4 4h8l4-4V4l-4-4zM5 2L2 5v6l3 3h6l3-3V5l-3-3H5zm4.286 4.857H11V5.143H9.286v1.714zM6 12h4l2-2V9H4v1l2 2z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Extensions] = {
            path: u.createElement("path", {
                "fill-rule": "evenodd",
                d: "M16 3v4h-2l-1 1v1l1 1h2v6h-5v-2l-1-1H9l-1 1v2H3v-6H1L0 9V8l1-1h2V3h5V1l1-1h1l1 1v2"
            }),
            width: 16,
            height: 16
        }, et[Je.Facebook] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M16.842 24v-6.842h2.653l.398-2.667h-3.05v-1.7c0-.772.246-1.298 1.525-1.298L20 11.49V9.105A25.285 25.285 0 0 0 17.623 9c-2.353 0-3.963 1.243-3.963 3.525v1.967H11v2.666h2.66V24h3.182",
                fillRule: "evenodd"
            }),
            width: 32,
            height: 32
        }, et[Je.Featured] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M0 0h20v20"
            }), " ", u.createElement("path", {
                fill: "#FFF",
                d: "M15 5V2h-2v3h-3v2h3v3h2V7h3V5"
            })),
            width: 20,
            height: 20
        }, et[Je.Filter] = {
            path: u.createElement("path", {
                d: "M1 4h6v3H1V4zm0 5h10v3H1V9zm0 5h16v3H1v-3zm10.5-9.914l3 3 3-3L18.914 5.5 14.5 9.914 10.086 5.5 11.5 4.086z"
            }),
            width: 20,
            height: 20
        }, et[Je.FollowCheck] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M6.5,12.75L2,8.25l2-2l2.5,2.5l5.5-5.5l2,2L6.5,12.75z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.FollowX] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M14,11.5L11.5,14L8,10.5L4.5,14L2,11.5L5.5,8L2,4.5L4.5,2L8,5.5L11.5,2L14,4.5L10.5,8L14,11.5z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Friends] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M12.64 0h5.2l1.04 2v4L16.8 8v1h3.12L22 10v2H11l1.64-1.563V9h1.04V8l-1.04-.984v-2.25l-1.038-1.954V2"
            }), u.createElement("path", {
                d: "M4 3h6l1 2v5l-2 2v1h3l2 1v2H0v-2l2-1h3v-1l-2-2V5"
            })),
            width: 21,
            height: 16
        }, et[Je.FriendsSC] = {
            path: u.createElement("path", {
                d: "M17.5 6L19 7.5V12l-2 1v1h3l1 1v1h-5.5v-2.5L13 11V7.5L14.5 6h3zM9 2l2 2v5l-3 2v1h4l2 2v2H0v-2l2-2h4v-1L3 9V4l2-2h4z",
                fillRule: "evenodd"
            }),
            width: 21,
            height: 16
        }, et[Je.Gear] = {
            path: u.createElement("path", {
                d: "M6.359 0h3.282l1.436 2.8h3.282L16 5.2 14.359 8 16 10.8l-1.641 2.4h-3.282L9.64 16H6.359l-1.436-2.8H1.641L0 10.8 1.641 8 0 5.2l1.641-2.4h3.282L6.36 0zM8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"
            }),
            width: 16,
            height: 16
        }, et[Je.Global] = {
            path: u.createElement("path", {
                d: "M9 15A6 6 0 1 0 9 3a6 6 0 0 0 0 12zm1.619-1.8A4.5 4.5 0 0 1 6 5.646V7.5l2 2v1.081l2.619 2.619zm1.881-1.371c.625-.773 1-1.757 1-2.829a4.491 4.491 0 0 0-1.671-3.5H10.5L9.041 6.959 8.5 7.5v1H11l1.5 1.5v1.829z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.GlyphArrDown] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M3 5h10l-5 6z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.GlyphArrDown] = {
            path: u.createElement("path", {
                d: "M3 5h10l-5 6"
            }),
            width: 16,
            height: 16
        }, et[Je.GlyphArrUp] = {
            path: u.createElement("path", {
                d: "M3 11h10L8 5"
            }),
            width: 16,
            height: 16
        }, et[Je.GlyphFollowers] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M8,13.5L1.5,7V4l2-2h3L8,3.5L9.5,2h3l2,2v3L8,13.5z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.GlyphLength] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M8,14c-3.313,0-6-2.687-6-6s2.687-6,6-6s6,2.687,6,6S11.313,14,8,14z M8,3C5.238,3,3,5.238,3,8s2.238,5,5,5s5-2.238,5-5S10.762,3,8,3z M9.646,10.354l-2-2L7.515,7.879l1-4l0.971,0.242L8.554,7.847l1.8,1.8L9.646,10.354z"
            }),
            width: 16,
            height: 16
        }, et[Je.GlyphLive] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M11,14H5H2v-1l3-3h2L5,8V2h6v6l-2,2h2l3,3v1H11z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.GlyphLiveSmall] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M11,14H5H2v-1l3-3h2L5,8V2h6v6l-2,2h2l3,3v1H11z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.GlyphViews] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M11,13H5L1,9V8V7l4-4h6l4,4v1v1L11,13z M8,5C6.344,5,5,6.343,5,8c0,1.656,1.344,3,3,3c1.657,0,3-1.344,3-3C11,6.343,9.657,5,8,5z M8,9C7.447,9,7,8.552,7,8s0.447-1,1-1s1,0.448,1,1S8.553,9,8,9z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.GridLayout] = {
            path: u.createElement("path", {
                d: "M0.8,0h14.5v3.9H0.8V0z M0.8,5h8.9v3.4H0.8V5z M11.4,5h3.8v3.4h-3.8V5z M0.8,9.6h14.5V16H0.8V9.6z"
            }),
            width: 16,
            height: 16
        }, et[Je.Hash] = {
            path: u.createElement("path", {
                "fill-rule": "evenodd",
                d: "M7.714 12l.572-4h4l-.572 4h-4zM17 12h-3.286l.572-4H17c.553 0 1-.447 1-1 0-.553-.447-1-1-1h-2.43L15 3c0-.552-.447-1-1-1-.553 0-1 .448-1 1l-.43 3h-4L9 3c0-.552-.447-1-1-1-.553 0-1 .448-1 1l-.43 3H3c-.552 0-1 .447-1 1 0 .553.448 1 1 1h3.286l-.572 4H3c-.552 0-1 .447-1 1 0 .553.448 1 1 1h2.43L5 17c0 .553.448 1 1 1 .553 0 1-.447 1-1l.43-3h4L11 17c0 .553.447 1 1 1 .553 0 1-.447 1-1l.43-3H17c.553 0 1-.447 1-1 0-.553-.447-1-1-1z"
            }),
            width: 20,
            height: 20
        }, et[Je.Heart] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M8,14L1,7V4l2-2h3l2,2l2-2h3l2,2v3L8,14z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.HGCNexus] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M11,0L9.7,4.4c0,0,7.7-1.4,9.7,8.9c0,0.1,0,0.1,0,0.2c0.4-1.1,0.6-2.3,0.6-3.5C20.1,4.8,16.1,0.5,11,0z"
            }), u.createElement("path", {
                d: "M2.5,16.5c-0.1,0-0.1,0-0.2-0.1C3.1,17.4,4,18.1,5,18.7c4.5,2.6,10.2,1.3,13.2-2.9l-3.1-3.3C15.1,12.6,12.5,19.9,2.5,16.5z"
            }), u.createElement("path", {
                d: "M8.2,0.2c0.1,0,0.1-0.1,0.2-0.1C7.2,0.3,6.1,0.7,5,1.3C0.5,3.9-1.2,9.5,0.9,14.2l4.4-1.1C5.3,13.1,0.3,7.1,8.2,0.2z"
            })),
            width: 20,
            height: 20
        }, et[Je.Hide] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M6,7.10240605 L2.65360907,10.448797 L2.10240605,11 L1,9.89759395 L1.55120302,9.34639093 L4.89759395,6 L1.55120302,2.65360907 L1,2.10240605 L2.10240605,1 L2.65360907,1.55120302 L6,4.89759395 L9.34639093,1.55120302 L9.89759395,1 L11,2.10240605 L10.448797,2.65360907 L7.10240605,6 L10.448797,9.34639093 L11,9.89759395 L9.89759395,11 L9.34639093,10.448797 L6,7.10240605 L6,7.10240605 Z"
            }),
            width: 16,
            height: 16
        }, et[Je.HourGlass] = {
            path: u.createElement("path", {
                d: "M4.79 8.37c-.058-.508-.43-.426-2.76-1.79C-.64 5.018.08 3.134.08 3.134H6v.002l4.98.007s.66 1.88-2.01 3.45c-2.383 1.4-2.76 1.26-2.814 1.806v.048c0 .97.095.574 2.668 2.398 2.572 1.825 2.158 4.023 2.158 4.023H-.03s-.586-2.204 1.987-4.035c2.572-1.83 2.83-1.406 2.83-2.378 0-.03 0-.06.002-.085zM0 15.933h11V17H0zM0 1h11v1.067H0z"
            }),
            width: 11,
            height: 18
        }, et[Je.Ignore] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M13,11.341V16l-3.722-3.102C8.863,12.959,8.438,13,8,13c-3.866,0-7-2.462-7-5.5C1,4.462,4.134,2,8,2s7,2.462,7,5.5C15,8.996,14.234,10.35,13,11.341z M11,7H5v1h6V7z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Link] = {
            path: u.createElement("path", {
                fillRule: "evenodd",
                d: "M9 4h4l2 2v4l-2 2H9v-2h4V6H9V4zm-2 8H3l-2-2V6l2-2h4v2H3v4h4v2zM6 7h4v2H6V7z"
            }),
            width: 16,
            height: 16
        }, et[Je.Lock] = {
            path: u.createElement("path", {
                d: "M7.987 6.599C7.987 5.166 8.685 4 9.997 4c1.311 0 2.009 1.166 2.009 2.599v2.412H7.987V6.599zm7.256 2.412h-1.248V6.599C13.995 4.063 12.411 2 9.997 2S5.998 4.063 5.998 6.599v2.412H4.751c-.415 0-.751.359-.751.8v7.397c0 .442.336.8.751.8h10.492c.414 0 .751-.358.751-.8V9.811c0-.441-.337-.8-.751-.8z",
                "fill-rule": "evenodd"
            }),
            width: 20,
            height: 20
        }, et[Je.LogoGlitch] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M21,9h-2v6h2V9z M5.568,3L4,7v17h5v3h3.886L16,24h5l6-6V3H5.568z M25,16l-4,4h-6l-3,3v-3H8V5h17V16z M16,9h-2v6h2V9z",
                fillRule: "evenodd"
            }),
            width: 30,
            height: 30
        }, et[Je.LogoTwitch] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M88,5h-6V0h-9l-6,5h-5.5L59,7.5V5h-5V0H36v5H16l-5-5H0v22l5,5.25L14,32h6v-1.5l3,1.5h12l2-3l1,3h7v-3l3,3h8l0.5-3l2.5,3h10l3-3v3h4l3-3v3h7l7-6V10L88,5z M13,13H8v6h5v6H6l-4-4V2h6v5h5V13z M36,21.5L32.5,25H15V7h6v12h2V7h6v12h2V7h5V21.5z M44,25h-6V7h6V25z M44,5h-6V2h6V5z M57,13h-5v6h5v6h-7l-4-4V2h6v5h5V13z M72,13h-7v6h7v6h-9l-4-4V11l4-4h9V13z M91,25h-6V13h-5v12h-6V2h6v5h7l4,4V25z",
                fillRule: "evenodd"
            }),
            width: 94,
            height: 32
        }, et[Je.LogoTwitchPrime] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M289.2 110.3c.8-.5 1.2-1.5 1.2-2.4 0-2.1-1.3-3.2-3.8-3.2-3.3 0-5.2 2-5.7 6 1.5.3 3 .4 4.5.4 1.3.1 2.6-.2 3.8-.8z"
            }), u.createElement("path", {
                d: "M287.9 15H269V0h-33.1l-15.6 15H203l-8 9.3V15h-16V0h-59v15H48.5L32.9 0H0v69.4L15.6 85l26 15h22.5v-2.9l8.7 2.9h42l7.4-8.1 1 8.1h27.5l.6-8.1 6.7 5.4v48c-.1.9.6 1.7 1.5 1.7h15.2c.9-.1 1.7-.8 1.8-1.8l1.6-8.2h1.6c3.8 0 7.4-1.9 9.6-5 0 0-.8 2.699976-1.1 3.599976-.2.5 0 .700024.5.900024.133333.333333 5.266667.5 15.4.5 1 .2 1.9-.500024 2.1-1.400024L207.5 132s.7 2.699976.9 3.599976c.1.9.9 1.500024 1.8 1.400024H266c2.5 0 2.7-.799976 3.5-1.599976 2.7.8 5.2 1.399976 7.8 1.599976 16.9.9 23.7-6.6 24-9.9.1-.8 2.2-13.2.8-21.1-1-5.8-6.6-11.4-15.9-11.4L304 83.2v-52L287.9 15zM26 41v18h16v19H19.1L6.9 65.9v-59H26V22h16v19H26zm81.5 37H49V22h19v37h7V22h19v37h7V22h19v44l-12.5 12zm19.5 0V22h19v56h-19zm19-62h-19V6.9h19V16zm7 49.9v-59h19V22h16v19h-16v18h16v19h-23.2L153 65.9zm32.1 59.4c-1.6 1.1-3.6 1.7-5.6 1.7-1.4 0-2.7-.2-4-.7-1.2-.4-2.3-1-3.2-1.8v11.2c.1.6-.2 1.1-.8 1.3h-5.4c-.4 0-.7-.1-1-.3-.2-.3-.3-.6-.3-1v-34.1c0-.4.1-.7.3-1 .3-.2.6-.3 1-.3h3.7c.7-.1 1.3.4 1.4 1.1l.4 1.3c1.1-1 2.3-1.8 3.7-2.4 1.4-.6 2.9-.9 4.4-.9 3-.1 6 1.2 7.8 3.6 1.9 2.4 2.9 5.7 2.9 9.8 0 2.7-.4 5.2-1.4 7.6-.8 1.9-2.2 3.6-3.9 4.9zM206.3 22H236v19h-22v18h22v19h-29.7L195 65.9V34.7L206.3 22zm5.6 84.6c-.3.2-.6.4-1 .3h-2.3c-1 0-1.9.1-2.9.3-1 .2-1.9.5-2.9.8v17.1c0 .4-.1.7-.3 1-.3.2-.6.3-1 .3h-4.9c-.6.1-1.2-.3-1.3-.9v-24c0-.4.1-.7.3-1 .3-.2.6-.3 1-.3h3.7c.7-.1 1.3.4 1.4 1.1l.7 2.8c1.1-1.3 2.4-2.4 3.8-3.2 1.2-.6 2.5-.9 3.8-.9h.7c.4 0 .7.1 1 .3.2.3.4.6.3 1l.2 4.3c0 .4-.1.7-.3 1zm11 19.5c-.3.2-.6.4-1 .3H217c-.6.1-1.2-.3-1.3-.9v-24c0-.4.1-.7.3-1 .3-.2.6-.3 1-.3h4.9c.6-.1 1.1.2 1.3.8v24.1c0 .4-.1.7-.3 1zm-6.5-30.9c-1.6-1.6-1.6-4.2 0-5.8 1.8-1.4 4.4-1.4 6.2 0 1.6 1.6 1.6 4.1 0 5.8-1.8 1.4-4.4 1.4-6.2 0zm52.9 29.9c0 .4-.1.7-.3 1-.3.2-.6.3-1 .3h-4.9c-.6.1-1.2-.3-1.3-.9V108.7c0-2.3-1-3.5-3.1-3.5-1.9 0-3.8.5-5.6 1.3V125c0 .4-.1.7-.3 1-.3.2-.6.4-1 .3H247c-.6.1-1.2-.3-1.3-.9V108.6c0-2.3-1-3.5-3.1-3.5-2 0-3.9.5-5.6 1.4V125c0 .4-.1.7-.3 1-.3.2-.6.3-1 .3h-4.9c-.6.1-1.2-.3-1.3-.9v-24c0-.4.1-.7.3-1 .3-.2.6-.3 1-.3h3.7c.7-.1 1.3.4 1.4 1.1l.4 1.4c1.5-1 3.2-1.9 4.9-2.5 1.4-.5 2.9-.7 4.5-.7 3.1 0 5.2 1.1 6.5 3.3 1.5-1 3.2-1.9 4.9-2.5 1.5-.5 3.1-.8 4.8-.8 2-.1 4 .6 5.5 2 1.4 1.5 2.1 3.5 2 5.6v18l-.1.1zm17.8-25.6c3.2 0 5.6.8 7.4 2.3 1.8 1.5 2.8 3.8 2.7 6.1.1 2.3-1 4.5-2.9 5.8-1.9 1.3-4.8 2-8.5 2-1.7 0-3.4-.2-5.1-.6.2 2.3.9 3.9 2.1 4.9 1.6 1.1 3.4 1.6 5.3 1.5.9 0 1.9-.1 2.8-.2 1.3-.2 2.5-.5 3.8-.8l.3-.1h.3c.6 0 .9.4.9 1.2v2.4c0 .4 0 .8-.2 1.1-.2.3-.5.5-.9.6-2.5 1-5.2 1.4-7.9 1.4-4.2 0-7.5-1.2-9.7-3.5-2.3-2.3-3.4-5.6-3.4-10s1.2-7.9 3.5-10.4c2.2-2.4 5.4-3.7 9.5-3.7zM278 78V41h-16v37h-19V6.9h19V22h22.3L297 34.7V78h-19z"
            }), u.createElement("path", {
                d: "M177.3 105.1c-1.8 0-3.5.5-5 1.4v13.4c1.5.9 3.2 1.4 5 1.4 1.6.1 3.2-.6 4.2-1.9.9-1.3 1.3-3.3 1.3-6.1s-.4-4.9-1.3-6.2c-.9-1.4-2.5-2.1-4.2-2z"
            })),
            width: 304,
            height: 147
        }, et[Je.LogoTwitchPrimeHorizontal] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M537 38c-2.5-4-7.3-8.5-16.6-8.5-9.4 0-23 8.3-24 9a1 1 0 0 1-.8.3 1 1 0 0 1-.7-.6 12.4 12.4 0 0 0-2.6-3.5c-3-3-6.4-4.2-11.3-4.2-3.2 0-9.2 2.4-9.8 2.8a1.3 1.3 0 0 1-1.2 0c-2.5-1.8-9.8-2.8-13.8-2.8a25.3 25.3 0 0 0-9.8 2h-.2a1 1 0 0 1-1 0 6.5 6.5 0 0 0-4.3-1.7 17 17 0 0 0-5 .8 24.6 24.6 0 0 1-3.2.7l-4.4.4a1 1 0 0 1-1-.4 1 1 0 0 1 0-1 14.6 14.6 0 0 0 .6-2 11 11 0 0 0-2-11 12 12 0 0 0-9.3-4 17 17 0 0 0-9.5 3c-.8.4-2.3 1.4-4.2 2.8-5.4 3.8-13.5 9.4-17.5 11.3-1.3.6-1.7-.8-3.7-1s-5 1-7.4 1.4l-3.8.5a1 1 0 0 1-1.2-.8 17 17 0 0 0-2.8-6c-4.8-7-12.8-8.6-18.6-8.8l-12.8-.2c-8 0-19.2.5-19.2.5l-16 14-15.4-15.4h-18.8V0h-32.6l-15.4 15.4h-17L192 24v-8.6h-15.3V0h-58.2v15.4H48L32.6 0H0v68.5L15.4 84 41 99.2h22.4V96l8.6 3.3h41.5l7.4-8.6 1 8.6h27l.6-8.6 9.8 8.6h24l1.7-8.6 8.7 8.6H221l8.7-8.6v8.6H245l12-8.6v8.6h51.2c5-3 10.4-6.3 13.2-8.3a1 1 0 0 1 1.5.3 1 1 0 0 1 0 .8c-.5 3-2 7.3-2 7.3h25.7l5.8-4a1.2 1.2 0 0 1 1.5 0 .4.4 0 0 1 0 .4l1.5 3.6h89.2l6-4.2a2.5 2.5 0 0 1 .8-.3 2 2 0 0 1 .8.2 28.3 28.3 0 0 0 8.6 4.4h.2a27.3 27.3 0 0 0 7.5.8c4.5 0 30.4-9 39-12.4l6.7-2.6a107.5 107.5 0 0 0 16-8 4 4 0 0 0 2-4c0-1-.7-3-1.4-6.6v-.4a1 1 0 0 1 .6-1c2.2-1 5.2-3.2 7-8.3 2.3-7 1.8-13.5-1.6-19zM41.2 41H25.7v17.2H41V77H19L7 65V7h18.7v15.3H41l.2 18.8zm77 24l-12 12H48V22.4h18.8v36h7v-36h18.7v36h7v-36H118V65zM144 77h-19V22.4h18.8V77zm0-61.5h-19V7h18.8v8.5zm41 25.7h-15.4v17H185v19h-22.3l-12-12V6.8h18.8v15.3H185v19zm48 0h-22.3v17H233v19h-29l-12-12V34l12-12h29v19zm60 36h-19v-36h-15.3v36h-19V7h19v15.3H281l12 12v43zm113.5-49.5a9.7 9.7 0 0 1 4-5 10.8 10.8 0 0 1 6-1.8 5.8 5.8 0 0 1 4.6 1.6 4.3 4.3 0 0 1 .7 4.6c-1.5 4.6-4.8 6.8-10 6.8-2.2 0-3.7-.5-4.7-1.6s-1.2-2.7-.5-4.7zm-55.3 33a26.6 26.6 0 0 1-17.7 6.5c-1 0-2.8 0-5-.2s-4 0-5 0a3 3 0 0 0-3 2 53.3 53.3 0 0 0-1.6 5.7l-.7 2.6h-15.8l4-11c2-6.5 3.8-11 4.8-14 3-9 5.7-18.2 8.2-28l.2-.5a1 1 0 0 1 1-.4c2.2-.3 7-.4 14.5-.4 4 0 8 0 12.5.2 6.3.2 10.8 2.2 13.4 6s3 9 1 15.5a38.7 38.7 0 0 1-10.8 16zm36.5-8h-2.3A10.6 10.6 0 0 0 380 54q-2 1-3 4.7-.7 1.6-1.6 4.8l-.2.7-1.8 5.5a34.5 34.5 0 0 0-1 3.6l-1 3.5a1 1 0 0 1-.7.6h-13-.4V77l3.4-10 1.6-4.8L364 57c2.3-6.7 3.5-12.2 3.7-16.5a1 1 0 0 1 0-.5.8.8 0 0 1 .5-.4l7-1c4.2-.8 6.3-1 7-1.3a5.7 5.7 0 0 1-.3 1.8c-.5 1.8-.8 3.3.2 3.6a.8.8 0 0 0 .8-.2 35 35 0 0 1 4-2 19.2 19.2 0 0 1 8-2 3 3 0 0 1 1.4.2A35.4 35.4 0 0 1 395 42l-1.5 3.4-1 3.3-.4 1.4-.5 2a1.5 1.5 0 0 1-1.7 1 4 4 0 0 0-2-.2zm22.4 5.8l-2.8 9.2c-1.5 4.7-2.3 7.3-3 9a.6.6 0 0 1-.5.6h-13.4l.2-.8 3-8.8c1.4-3.6 2.6-6.8 3.2-8.8a188.2 188.2 0 0 0 5.5-19.2l.2-.8s0-.4.7-.4c1.2 0 2.4 0 3.5.2a21.7 21.7 0 0 0 3.6.2c1 0 2.2 0 4-.2l3.5-.2s0 .3-.3.6c-2.3 5.5-4.7 11.8-7 19.3zM489.8 47l-2.4 6.7c-1 3-2 5.2-2.4 6.7-.7 1.7-1.5 4.4-2.6 8l-2.5 8a1.6 1.6 0 0 1-1 1h-13a2 2 0 0 1 0-1 49.6 49.6 0 0 1 1.7-4.8l.4-1c1-2.6 1.8-4.6 2.2-6q2.5-7.4 3.3-10.4c.5-2 .5-3.5-.3-4.5a4.2 4.2 0 0 0-3.5-1.4A8.3 8.3 0 0 0 465 50a9 9 0 0 0-3.8 4l-3.6 10.5-1.8 6-1.8 6a1 1 0 0 1-1 1h-13a1.2 1.2 0 0 1 .2-1l2-5.8c1-2.2 1.8-4.5 2.3-6l1.3-4 .2-.8 1.5-4.8c1-2.6 1-4.4 0-5.6a3.4 3.4 0 0 0-3.2-1.3 10.4 10.4 0 0 0-4.8 1.5 8.3 8.3 0 0 0-3.8 3.6l-3.2 9.7-1.8 5.5c-1 3.3-2 5.8-2.5 7.7a3 3 0 0 1-.5 1 .8.8 0 0 1-.5 0H414a4 4 0 0 1 .3-.6l.3-.8 3.2-9.2.5-1.4 3-8.7a138 138 0 0 0 4.2-15.6v-.3a4.3 4.3 0 0 1 0-.5 1.2 1.2 0 0 1 .6-.5 19.7 19.7 0 0 1 3.6-.6c2.3 0 3.5-.2 4-.3l3.6-1a16 16 0 0 1 3-.5 11.8 11.8 0 0 1-.4 2c-1 2.7-.8 3-.6 3.5a.7.7 0 0 0 .6.3h.2a5.4 5.4 0 0 0 1.3-.7 63 63 0 0 1 7.2-4 18 18 0 0 1 7.2-1.5 10.3 10.3 0 0 1 6 1.6 5.2 5.2 0 0 1 2.2 4.8l-.2 1.8 1.3-1.2a25.7 25.7 0 0 1 7.7-5 20 20 0 0 1 8-2c3.5 0 6 .8 7.7 2.4 2 2 2.3 4.4 1.3 7.8zm42.7 8c-1 2.6-2 4-3.8 4.4l-9 1-15.2 1h-.6v.7a5 5 0 0 0 2.4 5 10.6 10.6 0 0 0 5.5 1.4 22 22 0 0 0 8.5-2l1-.5 2.4-1.3a14 14 0 0 1 1 3.5c.6 3 .6 4.2.5 4.5a4.6 4.6 0 0 1-.6.7C520 77 514 78.7 507 78.7c-6.4 0-11-2-13.6-5.5s-3-8.8-1-15.2a33 33 0 0 1 10.8-15.5 26.6 26.6 0 0 1 17-6.2c5.2 0 9 2 11.2 5.5s2.6 8 1 13.2z"
            }), u.createElement("path", {
                fill: "#FFF",
                d: "M515 45.3a8 8 0 0 0-5.4 2.4 11.8 11.8 0 0 0-3.4 5 1.6 1.6 0 0 0 .6 2 1 1 0 0 0 .8 0c3.3 0 6.7-.3 10-.7 1 0 2-.4 2.2-1a6 6 0 0 0-.3-5.3 5 5 0 0 0-4.4-2.4zM339.2 34.8c-7 0-7.6.7-8 1s-.5.6-3.6 10l-1.2 4-1.2 3.7a1 1 0 0 0 0 .8c.5.5 1.3 1 8 1 6.4 0 10.8-3.3 13-9.7 1.2-3.6 1.2-6.4 0-8.2s-3.6-2.6-7-2.6z"
            })),
            width: 539.99,
            height: 100.22
        }, et[Je.Maximize] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M2,14 L14,14 L14,2 L2,2 L2,14 Z M0,0 L16,0 L16,16 L0,16 L0,0 L0,0 L0,0 Z"
            }), u.createElement("path", {
                d: "M3,3 L13,3 L13,5 L3,5 L3,3 Z"
            })),
            width: 16,
            height: 16
        }, et[Je.MessagesSC] = {
            path: u.createElement("path", {
                d: "M4 12H1V0h14v12H8l-4 4z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Minimize] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M2,14 L14,14 L14,2 L2,2 L2,14 Z M0,0 L16,0 L16,16 L0,16 L0,0 L0,0 L0,0 Z"
            }), u.createElement("path", {
                d: "M3,11 L13,11 L13,13 L3,13 L3,11 Z"
            })),
            width: 16,
            height: 16
        }, et[Je.More] = {
            path: u.createElement("path", {
                d: "M7,3 L9,3 L9,5 L7,5 L7,3 Z M7,7 L9,7 L9,9 L7,9 L7,7 Z M7,11 L9,11 L9,13 L7,13 L7,11 Z"
            }),
            width: 16,
            height: 16
        }, et[Je.Muted] = {
            path: u.createElement("path", {
                d: "M12.08 7.835l-2.02-2.04.904-.912 2.02 2.04 2.113-2.136L16 5.7l-2.114 2.135 2.02 2.04-.904.91-2.02-2.04-1.923 1.945-.904-.912 1.924-1.943zm-8.072 2.812L7.57 13V3L4.367 5.115V5.06H0v5.587h4.008z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.NavBackpack] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M16,15H2l-1-1V8h16v6L16,15z M1,4l1-1h14l1,1v2H1V4z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavChannels] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M15,14l-4-4v4H1V4h10v4l4-4h2v10H15z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavCreative] = {
            path: u.createElement("path", {
                d: "M15.7 13.4l.8 1.5 1.5.8-1.5.8-.8 1.5-.8-1.5-1.5-.8 1.5-.8.8-1.5zM14.5 0l1.2 2.2 2.3 1.3-2.3 1.2-1.2 2.3-1.2-2.3-2.2-1.2 2.2-1.3 1.2-2.2zM8 2l3 5 5 3-5 3-3 5-3-5-5-3 5-3z"
            }),
            width: 18,
            height: 18
        }, et[Je.NavDashboard] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M1,16V2h16v14H1z M5,4H3v1h2V4z M5,7H3v1h2V7z M5,10H3v1h2V10zM5,13H3v1h2V13z M9,7H7v7h2V7z M12,10h-2v4h2V10z M15,4h-2v10h2V4z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavDiscover] = {
            path: u.createElement("path", {
                d: "M4.7 13.29l-1.49-.32-1.74 3.55 3.54-1.74-.31-1.49M12.9 10.55l4.36-4.36L18 0l-6.19.74L7.45 5.1 3.36 4 0 7.36l4.41 1.19v3.23l1.82 1.82h3.22l1.19 4.4L14 14.64zM12.47 7L11 5.53l1.48-1.48 1.48 1.48z"
            }),
            width: 18,
            height: 18
        }, et[Je.NavFollowing] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M1,8V4l2-2h4l2,2l2-2h4l2,2v4l-8,8L1,8z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavGames] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M9,8.293l-3-3V1h6v4.293L9,8.293z M5.293,12H1V6h4.293l3,3L5.293,12z M9,9.707l3,3V17H6v-4.293L9,9.707z M12.707,6H17v6h-4.293l-3-3L12.707,6z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavLogout] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M16,9l-6,6v-4H6V7h4V3L16,9z M4,13h4v2H2v-2V5V3h6v2H4V13z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavManager] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M17,3v11h-2h-4H8.707l-0.5-0.5h-1L7.5,13.207v-1.809l5.583-2.401L7.027,6.399V8.5H2.5v4.707L2.793,13.5h-1l-0.5,0.5H1V3h10\n\th4H17z M7,14H6l1-1V9H6H4H3v4l1,1H3H2l-1,1v2h8v-2l-1-1H7z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavMessages] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M1,15V3h16v12H1z M15.354,5.354l-0.707-0.707L9,10.293L3.354,4.646L2.646,5.354L6.293,9l-3.646,3.646l0.707,0.707L7,9.707l1.646,1.646h0.707L11,9.707l3.646,3.646l0.707-0.707L11.707,9L15.354,5.354z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavMore] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M13,11V7h4v4H13z M7,7h4v4H7V7z M1,7h4v4H1V7z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavMyChannel] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M15,14l-4-4v4H8.707l-0.5-0.5h-1L7.5,13.207V8.5h-5v4.707L2.793,13.5h-1l-0.5,0.5H1V4h10v4l4-4h2v10H15z M3,14h1l-1-1V9h1h2h1v4l-1,1h1h1l1,1v2H1v-2l1-1H3z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavProfile] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M2,16v-1l3-3h3L5,9V2h8v7l-3,3h3l3,3v1H2z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavSearch] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M16.707,15.293l-1.414,1.414l-4.825-4.825C9.487,12.58,8.295,13,7,13c-3.313,0-6-2.687-6-6s2.687-6,6-6s6,2.687,6,6c0,1.295-0.42,2.487-1.118,3.468L16.707,15.293z M7,3C4.791,3,3,4.791,3,7s1.791,4,4,4s4-1.791,4-4S9.209,3,7,3z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavSettings] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M15.03,5.091v4.878l-2,2H8.151l-3.061,3.061L2.97,12.908l3.061-3.06V4.97l2-2h4.879L8.97,6.909l2.121,2.121L15.03,5.091z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.NavVideos] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M1,2v14h16V2H1z M6,12V6l7,3L6,12z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.Neck] = {
            path: u.createElement("path", {
                d: "M9.305 1.877C9.689.84 10.887 0 12 0h6c1.105 0 2.31.838 2.695 1.877L30 27H0L9.305 1.877z",
                fillRule: "evenodd"
            }),
            width: 35,
            height: 25
        }, et[Je.NotificationBell] = {
            path: u.createElement("path", {
                d: "M10 18c1.104 0 2-.896 2-2H8c0 1.104.896 2 2 2m7-4.8v-.8c0-.213.01-.236-.228-.566L15.445 10V7.6C15.445 4.563 12.95 2 10 2S4.556 4.564 4.556 7.6V10l-1.328 1.834c-.24.33-.228.353-.228.566v1.2c0 .22.174.4.39.4h13.22c.214 0 .388-.18.388-.4v-.4z"
            }),
            width: 20,
            height: 20
        }, et[Je.OP] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M15,7L1,16l4.666-7H1l14-9l-4.667,7H15z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.PermissionsAdd] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M17 10h-3v1.9938965L12.9101562 13H17v3l6-4.5L17 7"
            }), " ", u.createElement("path", {
                d: "M1 19v-1l3-3h3l-3-3V5h8v7l-3 3h3l3 3v1"
            })),
            width: 24,
            height: 24
        }, et[Je.PermissionsAdded] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M1 19v-1l3-3h3l-3-3V5h8v7l-3 3h3l3 3v1"
            }), " ", u.createElement("path", {
                d: "M21.3558345 8L23 9.61769336 16.5132525 16 13 12.5433131l1.6441655-1.6176933 1.869087 1.8389935"
            })),
            width: 24,
            height: 24
        }, et[Je.PermissionsRemove] = {
            path: u.createElement("g", null, u.createElement("path", {
                d: "M1 19v-1l3-3h3l-3-3V5h8v7l-3 3h3l3 3v1"
            }), " ", u.createElement("path", {
                d: "M18.01339 10.3400907l-2.3700453-2.3700453-1.6238705 1.62387052 2.3700453 2.3700453-2.3700453 2.3700453 1.6238705 1.6238705 2.3700453-2.3700453 2.37004522 2.37004523 1.62387052-1.6238705-2.37004523-2.37004524 2.37004526-2.37004523-1.6238705-1.6238705"
            })),
            width: 24,
            height: 24
        }, et[Je.Pin] = {
            path: u.createElement("path", {
                d: "M4.154 15.926l3.68-4.313 1.56 1.556-4.314 3.68c-.12.093-.272.15-.428.142-.255 0-.486-.15-.593-.383-.11-.23-.07-.504.09-.7v.01zm9.508-.57l-1.28-1.282-6.723-6.73h4.06l2.37-3.902c.13-.214.33-.374.58-.423.16-.04.33-.03.48.03l.153.054 4.576 4.582.057.15c.15.403-.01.855-.368 1.063l-3.914 2.38v4.07zm-.288-11.14c0 .003-.002.004-.003.006l.01-.005zm3.436 3.4l-.023.015.023-.01zm-6.245 1.227H9.277l2.885 2.89v-1.286l.36-.22.36-.22 3.232-1.966-3.148-3.15-2.4 3.96z"
            }),
            width: 20,
            height: 20
        }, et[Je.Pinned] = {
            path: u.createElement("path", {
                d: "M4.154 15.926l3.68-4.313 1.56 1.556-4.314 3.68c-.12.098-.272.15-.428.147-.255 0-.486-.15-.593-.383-.11-.232-.07-.504.092-.7v.008zm9.508-.57l-1.28-1.282-6.723-6.73h4.06l2.37-3.902c.13-.214.33-.374.58-.423.16-.037.33-.025.482.032l.156.057 4.576 4.582.057.152c.15.402-.01.854-.367 1.062l-3.913 2.38v4.068z"
            }),
            width: 20,
            height: 20
        }, et[Je.Play] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M5,0l20,15L5,30V0z",
                fillRule: "evenodd"
            }),
            width: 30,
            height: 30
        }, et[Je.Playlist] = {
            path: u.createElement("path", {
                d: "M10 5L0 10V0",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.QuestionMark] = {
            path: u.createElement("path", {
                d: "M3 4l3-3h12l3 3v8l-3 3h-4v2H9v-4l3-3h4V6H8v4H3V4zm6 15h5v4H9v-4z",
                fillRule: "evenodd"
            }),
            width: 24,
            height: 24
        }, et[Je.MiniPlayerExpand] = {
            path: u.createElement("path", {
                d: "M4 10V2h14v11h-4v-2h2V4H6v4H4v2h8v8H2v-8h2zm11-1l-1.143-1.143L12.714 9 11 7.286l1.143-1.143L11 5h4v4z"
            }),
            width: 20,
            height: 20
        }, et[Je.MiniPlayerPause] = {
            path: u.createElement("path", {
                d: "M4 17h4V3H4v14zm8-14v14h4V3h-4z"
            }),
            width: 20,
            height: 20
        }, et[Je.MiniPlayerPlay] = {
            path: u.createElement("path", {
                d: "M4 2l12 8-12 8"
            }),
            width: 20,
            height: 20
        }, et[Je.Plus] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M15,9H9v6H7V9H1V7h6V1h2v6h6V9z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Popout] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M12.707,4.707l-4,4L7.293,7.293l4-4L9,1h6v6L12.707,4.707z M4,12h7V9h2v5H2V3h5v2H4V12z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Reddit] = {
            path: u.createElement("path", {
                d: "M21.998 8.692c.545 0 .988.447.988.994a.992.992 0 0 1-.987.995.99.99 0 0 1-.988-.994c0-.547.442-.994.987-.994h-.002zm-.5 5.16c-1.38-.896-3.162-1.42-5.07-1.495l1.047-3.335 2.85.675c.003.923.75 1.67 1.674 1.676a1.683 1.683 0 0 0 1.673-1.687A1.683 1.683 0 0 0 22 8c-.688 0-1.28.42-1.538 1.018l-3.14-.744a.342.342 0 0 0-.405.233L15.71 12.35c-2.006.037-3.888.566-5.33 1.5a2.014 2.014 0 0 0-1.346-.517A2.042 2.042 0 0 0 7 15.38c0 .72.376 1.386.992 1.757-.03.19-.045.386-.045.58 0 1.465.85 2.83 2.396 3.845a8.483 8.483 0 0 0 1.62.822c2.51.964 6.692.602 7.952 0 1.26-.6 1.128-.498 1.62-.822 1.545-1.015 2.396-2.38 2.396-3.844 0-.195-.014-.39-.044-.58a2.05 2.05 0 0 0-1.04-3.806c-.5 0-.98.185-1.348.52zm-5.56 7.326c1.333 0 2.284-.294 2.887-.9a.348.348 0 0 0 0-.49.342.342 0 0 0-.486 0c-.47.47-1.26.698-2.4.698-1.142 0-1.933-.23-2.4-.698a.342.342 0 0 0-.487 0 .347.347 0 0 0 0 .49c.603.606 1.553.9 2.886.9zm2.695-5.688a1.245 1.245 0 0 0-1.238 1.248c0 .686.555 1.246 1.238 1.246a1.245 1.245 0 0 0 1.24-1.247c0-.687-.557-1.246-1.24-1.246zm-5.39 0c-.682 0-1.237.56-1.237 1.248 0 .686.555 1.245 1.238 1.245.682 0 1.237-.56 1.237-1.245 0-.688-.554-1.247-1.236-1.247z",
                fillRule: "evenodd"
            }),
            width: 32,
            height: 32
        }, et[Je.RemoveTag] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M4.10271979,3.43815904 L1.66456075,1 L1,1.66456075 L3.43815904,4.10271979 L1,6.54087884 L1.66456075,7.20543958 L4.10271979,4.76728054 L6.54087884,7.20543958 L7.20543958,6.54087884 L4.76728054,4.10271979 L7.20543958,1.66456075 L6.54087884,1 L4.10271979,3.43815904 Z",
                strokeWidth: "0.4",
                fillRule: "evenodd"
            }),
            width: 8,
            height: 8
        }, et[Je.RequestsSC] = {
            path: u.createElement("path", {
                d: "M11 3L9 1H5L3 3v5l3 2v1H2l-2 2v2h14v-2l-2-2H8v-1l3-2V6H8V3h3zm1 1H9v1h3v3h1V5h3V4h-3V1h-1v3z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Roman1] = {
            path: u.createElement("path", {
                d: "M8 17h4V3H8"
            }),
            width: 20,
            height: 20
        }, et[Je.Roman2] = {
            path: u.createElement("path", {
                d: "M4 17V3h4v14H4zm8 0V3h4v14h-4z"
            }),
            width: 20,
            height: 20
        }, et[Je.Roman3] = {
            path: u.createElement("path", {
                d: "M2 17h4V3H2v14zm6 0h4V3H8v14zm6 0h4V3h-4v14z"
            }),
            width: 20,
            height: 20
        }, et[Je.Roman4] = {
            path: u.createElement("path", {
                d: "M1 17h4V3H1v14zm10 0h4l4-14h-4l-2 10-2-10H7l4 14z"
            }),
            width: 20,
            height: 20
        }, et[Je.Roman5] = {
            path: u.createElement("path", {
                d: "M8 17h4l6-14h-4l-4 10L6 3H2"
            }),
            width: 20,
            height: 20
        }, et[Je.RoomList] = {
            path: u.createElement("path", {
                "fill-rule": "evenodd",
                d: "M9.2 2.527c-.13-.165-.2-.366-.2-.572C9 1.427 9.447 1 10 1h8c.217 0 .427.067.6.19.442.317.53.916.2 1.337l-4 5.09c-.057.074-.124.138-.2.192-.442.313-1.07.23-1.4-.194l-4-5.09zM2 17h11c.552 0 1 .448 1 1s-.448 1-1 1H2c-.552 0-1-.448-1-1s.448-1 1-1zm0-5h11c.552 0 1 .448 1 1s-.448 1-1 1H2c-.552 0-1-.448-1-1s.448-1 1-1zm0-5h7c.553 0 1 .448 1 1s-.447 1-1 1H2c-.552 0-1-.448-1-1s.448-1 1-1zm0-5h3c.552 0 1 .448 1 1s-.448 1-1 1H2c-.552 0-1-.448-1-1s.448-1 1-1z"
            }),
            width: 20,
            height: 20
        }, et[Je.RoomListOpen] = {
            path: u.createElement("path", {
                "fill-rule": "evenodd",
                d: "M13.2 12.382c.33-.422.958-.507 1.4-.19.076.053.143.118.2.19l4 5.09c.33.423.242 1.02-.2 1.338-.173.123-.383.19-.6.19h-8c-.553 0-1-.428-1-.954 0-.207.07-.408.2-.573l4-5.09zM2 3c-.552 0-1-.448-1-1s.448-1 1-1h11c.552 0 1 .448 1 1s-.448 1-1 1H2zm0 5c-.552 0-1-.447-1-1 0-.553.448-1 1-1h11c.552 0 1 .447 1 1 0 .553-.448 1-1 1H2zm0 5c-.552 0-1-.447-1-1 0-.553.448-1 1-1h7c.553 0 1 .447 1 1 0 .553-.447 1-1 1H2zm0 5c-.552 0-1-.447-1-1 0-.553.448-1 1-1h3c.552 0 1 .447 1 1 0 .553-.448 1-1 1H2z"
            }),
            width: 20,
            height: 20
        }, et[Je.SearchNoResults] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M44.7314176,41.7572363 L37.4713285,48 L26.8572017,35.3514358 L19.8203892,37.5166089 L8.56540656,33.764948 L2,24.3857958 L2,13.1308131 L8.56540656,3.75166089 L19.8203892,0 L32.0132871,3.75166089 L38.2660553,12.8181747 L38.2660553,24.6984342 L34.7250756,29.8328548 L44.7314176,41.7572363 Z M25.8441673,26.223711 L20.1169645,28.1374567 L20.0888962,28.1374567 L14.3616933,26.223711 L11.0126384,21.4393468 L11.0126384,15.6981098 L14.3616933,10.9137457 L20.0888962,9 L20.1176024,9 L25.8448053,10.9137457 L29.5121799,15.6981098 L29.5121799,21.4393468 L25.8441673,26.223711 L25.8441673,26.223711 Z",
                fillRule: "evenodd"
            }),
            width: 46,
            height: 48
        }, et[Je.Share] = {
            path: u.createElement("path", {
                d: "M5 4v2H3v8h10V6h-2V4h4v12H1V4h4zm2-1H5l3-3 3 3H9v6H7V3z",
                "fill-rule": "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Shirt] = {
            path: u.createElement("polygon", {
                points: "7.9,5 5.3,0.9 0.4,3.8 2.2,7.6 4.4,7 4.4,15.1 11.6,15.1 11.6,7 13.8,7.6 15.6,3.8 10.9,0.9 "
            }),
            width: 16,
            height: 16
        }, et[Je.Star] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M15,6l-4.041,2.694L13,14l-5-3.333L3,14l2.041-5.306L1,6h5.077L8,1l1.924,5H15z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Steam] = {
            path: u.createElement("path", {
                d: "M10,0C4.7,0,0.4,4.1,0,9.2l5.4,2.2c0.5-0.3,1-0.5,1.6-0.5c0.1,0,0.1,0,0.2,0l2.4-3.5V7.4c0-2.1,1.7-3.8,3.8-3.8 s3.8,1.7,3.8,3.8s-1.7,3.8-3.8,3.8h-0.1l-3.4,2.4c0,0,0,0.1,0,0.1c0,1.6-1.3,2.8-2.8,2.8c-1.4,0-2.5-1-2.8-2.3l-3.8-1.6 C1.5,17,5.4,20,10,20c5.5,0,10-4.5,10-10C20,4.5,15.5,0,10,0z M15.8,7.4c0-1.4-1.1-2.5-2.5-2.5c-1.4,0-2.5,1.1-2.5,2.5 c0,1.4,1.1,2.5,2.5,2.5S15.8,8.8,15.8,7.4L15.8,7.4z M11.4,7.4c0-1,0.8-1.9,1.9-1.9c1,0,1.9,0.8,1.9,1.9c0,1-0.8,1.9-1.9,1.9 C12.2,9.3,11.4,8.5,11.4,7.4L11.4,7.4z M6.3,15.2l-1.2-0.5c0.2,0.5,0.6,0.8,1.1,1c1.1,0.5,2.3-0.1,2.8-1.1c0.2-0.5,0.2-1.1,0-1.6 c-0.2-0.5-0.6-0.9-1.2-1.2c-0.5-0.2-1.1-0.2-1.6,0l1.3,0.5c0.8,0.3,1.2,1.2,0.8,2.1C8,15.2,7.1,15.5,6.3,15.2L6.3,15.2z"
            }),
            width: 20,
            height: 21
        }, et[Je.Sword] = {
            path: u.createElement("path", {
                d: "M8.378 11.879L10 13.5l-2 .563L6.921 13h-.857l-.338.338.532.531L4 16l-1-1-1-1 2.131-2.258.531.531.338-.337v-.828L3.875 10 4.5 8l1.622 1.621L12.812 2H16v3.188z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.Team] = {
            path: u.createElement("path", {
                d: "M15.5,0 L14,0 L14,5 L15.65,7.2 L14,16 L2,16 L0.35,7.2 L2,5 L2,0 L0.5,0 L15.5,0 Z M4,0 L8,3 L12,0 L4,0 Z M6,6 L6,7 L10,7 L9,6 L6,6 Z M9,7 L9,8 L10,8 L10,7 L9,7 Z M7,8 L7,9 L10,9 L10,8 L7,8 Z M9,9 L9,10 L10,10 L10,9 L9,9 Z M6,10 L6,11 L9,11 L10,10 L6,10 Z"
            }),
            width: 16,
            height: 16
        }, et[Je.Theater] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M1,13h9V3H1V13z M11,3v10h4V3H11z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Timeout] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M8,15c-3.866,0-7-3.134-7-7s3.134-7,7-7s7,3.134,7,7S11.866,15,8,15z M8,3C5.238,3,3,5.238,3,8s2.238,5,5,5s5-2.238,5-5S10.762,3,8,3z M7.293,8.707L7,8l1-4l0.902,3.607L11,11L7.293,8.707z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Timer] = {
            path: u.createElement("path", {
                d: "M12.988 5.057C17.488 5.55 21 9.37 21 14c0 4.963-4.038 9-9 9s-9-4.037-9-9c0-4.63 3.513-8.45 8.012-8.943C11.01 5.037 11 5.02 11 5V3h-1c-.552 0-1-.447-1-1 0-.553.448-1 1-1h4c.552 0 1 .447 1 1 0 .553-.448 1-1 1h-1v2c0 .02-.01.037-.012.057zM12 21c3.86 0 7-3.14 7-7s-3.14-7-7-7-7 3.14-7 7 3.14 7 7 7zm0-12c.552 0 1 .447 1 1v4c0 .553-.448 1-1 1s-1-.447-1-1v-4c0-.553.448-1 1-1z"
            }),
            width: 24,
            height: 24
        }, et[Je.ToTop] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M9,11 L12,11 L8,4 L4,11 L7,11 L7,14 L9,14 L9,11 Z M4,2 L12,2 L12,4 L4,4 L4,2 Z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Trash] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M10,14.999H6H3v-11h3h4h3v11H10z M6,5.999v7h1v-7H6z M10,5.999H9v7h1V5.999zM3,1.999h4v-1h2v1h4v1H3V1.999z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Trophy] = {
            path: u.createElement("path", {
                d: "M3.71 2.464C3.7 1.614 3.69 1 3.69 1h10.58l.012 1.464h3.688s.367 2.984-1.465 5.126c-.923 1.33-2.1 1.994-2.866 2.308-.708 1.486-1.918 2.596-3.36 3.008v2.007h1.832v2.196H5.888v-2.197h1.83V12.89c-1.404-.425-2.584-1.512-3.282-2.962-.763-.3-1.988-.965-2.94-2.338C-.338 5.448.03 2.464.03 2.464h3.68zm.014 1.1c.014 1.186.027 2.507.027 3.3 0 .487.05.96.14 1.417-.524-.29-1.174-.75-1.663-1.422-1.258-1.49-1.1-3.295-1.1-3.295h2.597zm10.567 0c.01 1.182.02 2.5.02 3.3 0 .473-.046.935-.132 1.38.51-.294 1.127-.744 1.595-1.386 1.258-1.49 1.1-3.295 1.1-3.295H14.29z",
                fillRule: "evenodd"
            }),
            width: 18,
            height: 18
        }, et[Je.Twitter] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M23.966 11.533c-.55.26-1.142.436-1.763.515a3.252 3.252 0 0 0 1.35-1.81c-.6.38-1.26.65-1.95.794A2.983 2.983 0 0 0 19.363 10c-1.697 0-3.07 1.464-3.07 3.27 0 .256.025.505.078.745-2.55-.136-4.814-1.438-6.33-3.417a3.417 3.417 0 0 0-.414 1.644c0 1.134.543 2.135 1.366 2.722a2.918 2.918 0 0 1-1.39-.41v.042c0 1.584 1.057 2.906 2.463 3.206-.452.13-.928.15-1.388.056.392 1.3 1.526 2.245 2.87 2.27A5.917 5.917 0 0 1 9 21.483a8.31 8.31 0 0 0 4.707 1.47c5.648 0 8.736-4.982 8.736-9.304 0-.14-.003-.283-.008-.422a6.48 6.48 0 0 0 1.53-1.693",
                fillRule: "evenodd"
            }),
            width: 32,
            height: 32
        }, et[Je.Unheart] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M1,9V7h14v2H1z M1,4l2-2h3l2,2l2-2h3l2,2v2H1V4z M8,14l-4.667-4h9.333L8,14z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Unignore] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M13,11.341V16l-3.722-3.102C8.863,12.959,8.438,13,8,13c-3.866,0-7-2.462-7-5.5C1,4.462,4.134,2,8,2s7,2.462,7,5.5C15,8.996,14.234,10.35,13,11.341z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Unlock] = {
            path: u.createElement("path", {
                "fill-rule": "evenodd",
                d: "M15.243 9.002h-6.46l-.6-1.8c-.452-1.36-.16-2.686 1.085-3.1 1.245-.416 2.275.47 2.728 1.83l.128.383-.008.003c.175.525.74.808 1.265.634.524-.175.805-.734.636-1.256v-.01.002l-.13-.385c-.8-2.405-2.957-3.862-5.247-3.1-2.29.764-3.143 3.222-2.34 5.627L6.687 9l-1.936.003c-.414 0-.75.357-.75.8V17.2c0 .44.336.8.75.8h10.493c.414 0 .75-.36.75-.8V9.8c0-.442-.336-.8-.75-.8"
            }),
            width: 20,
            height: 20
        }, et[Je.UpArrow] = {
            path: u.createElement("polygon", {
                clipRule: "evenodd",
                fillRule: "evenodd",
                points: "9 10 12 10 8 3 4 10 7 10 7 13 9 13"
            }),
            width: 16,
            height: 16
        }, et[Je.Upload] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M84.9630996 35.0930707c1.1070111-1.9372694 1.6605166-4.1512915 1.6605166-6.6420664 0-8.302583-6.6420664-14.9446495-14.9446494-14.9446495-2.7675277 0-5.5350554.8302583-7.7490775 2.2140222C59.7785978 6.58753565 50.3690037.222222 39.5756458.222222c-14.9446495 0-26.8450185 12.1771218-26.8450185 27.1217712 0 .8302583 0 1.9372694.2767528 2.7675277C5.25830258 33.9860596 0 42.0118899 0 51.1447312 0 64.4288641 10.7933579 75.222222 24.0774908 75.222222h53.6900369c11.3468634 0 20.7564575-9.4095941 20.7564575-20.7564576 0-8.8560885-5.5350553-16.605166-13.5608856-19.3726937zM45.9409594 22.0856906l18.5424354 19.6494465H52.0295203v20.2029521H39.8523985V41.7351371H27.1217712l18.8191882-19.6494465z",
                fillRule: "evenodd"
            }),
            width: 99,
            height: 76
        }, et[Je.VKontakte] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M16.98 21.362s.362-.04.546-.238c.17-.183.165-.525.165-.525s-.023-1.605.722-1.842c.734-.233 1.676 1.55 2.675 2.236.755.52 1.33.405 1.33.405l2.67-.038s1.397-.086.735-1.185c-.055-.09-.386-.812-1.986-2.297-1.675-1.555-1.45-1.303.567-3.992 1.228-1.638 1.72-2.637 1.566-3.065-.147-.408-1.05-.3-1.05-.3l-3.008.018s-.223-.03-.388.07c-.162.096-.266.322-.266.322s-.476 1.267-1.11 2.345c-1.34 2.274-1.875 2.394-2.094 2.253-.51-.33-.382-1.322-.382-2.028 0-2.203.334-3.122-.65-3.36-.328-.08-.57-.13-1.405-.14-1.073-.01-1.98.004-2.495.256-.342.167-.606.54-.445.562.2.027.65.122.887.446.31.42.298 1.36.298 1.36s.177 2.595-.414 2.917c-.405.22-.96-.23-2.155-2.293-.612-1.057-1.074-2.225-1.074-2.225s-.09-.218-.248-.335c-.193-.14-.462-.186-.462-.186l-2.858.018s-.43.012-.587.2c-.14.165-.01.508-.01.508s2.236 5.234 4.77 7.872c2.323 2.42 4.96 2.26 4.96 2.26h1.196z"
            }),
            width: 32,
            height: 32
        }, et[Je.Verified] = {
            path: u.createElement("path", {
                d: "M2.636 2.636L9 0l6.365 2.636L18 9l-2.635 6.365L9 18l-6.364-2.635L0 9l2.636-6.364zM7.38 13.11l6.097-6.42-1.45-1.378-4.726 4.98-1.613-1.52-1.37 1.458 3.065 2.88z"
            }),
            width: 18,
            height: 18
        }, et[Je.VideoPremiere] = {
            path: u.createElement("path", {
                d: "M10 1c4.9 0 9 4.1 9 9s-4 9-9 9-9-4-9-9 4-9 9-9zm0 1.8c-3.9 0-7.2 3.3-7.2 7.2 0 3.9 3.3 7.2 7.2 7.2 3.9 0 7.2-3.3 7.2-7.2 0-3.9-3.3-7.2-7.2-7.2zm3.668 7.737l-4.8 3.4C8.784 13.98 8.69 14 8.6 14c-.11 0-.22-.03-.316-.09-.177-.107-.284-.3-.284-.51V6.6c0-.208.107-.4.284-.51C8.38 6.03 8.49 6 8.6 6c.09 0 .184.02.268.063l4.8 3.4c.204.102.332.31.332.537 0 .227-.128.435-.332.537z"
            }),
            width: 20,
            height: 20
        }, et[Je.VideoRerun] = {
            path: u.createElement("path", {
                d: "M17.953 4.797c-.004-.404-.25-.766-.626-.917-.12-.05-.247-.073-.373-.073-.264 0-.522.104-.713.3l-1.49 1.526c-.725-.937-1.677-1.684-2.795-2.167-1.745-.754-3.68-.783-5.45-.084-1.766.702-3.154 2.048-3.91 3.795-.753 1.744-.783 3.68-.083 5.446.7 1.767 2.048 3.156 3.794 3.91 1.745.756 3.68.785 5.447.084.563-.222.838-.858.615-1.42-.22-.564-.856-.838-1.42-.615-1.224.485-2.563.464-3.77-.058-1.21-.522-2.143-1.484-2.63-2.707-.483-1.225-.462-2.562.06-3.772.523-1.21 1.484-2.14 2.707-2.626 1.225-.49 2.563-.47 3.773.05.867.375 1.585.983 2.104 1.745L11.3 9.142c-.283.288-.364.718-.206 1.09.155.37.517.608.92.608h.01l4.993-.046c.552-.006.995-.457.99-1.01L17.96 4.79z"
            }),
            width: 20,
            height: 20
        }, et[Je.ViewerList] = {
            path: u.createElement("path", {
                clipRule: "evenodd",
                d: "M6,12.999v-2h8v2H6z M6,6.999h8v2H6V6.999z M6,2.999h8v2H6V2.999z M2,10.999h2v2H2V10.999z M2,6.999h2v2H2V6.999z M2,2.999h2v2H2V2.999z",
                fillRule: "evenodd"
            }),
            width: 16,
            height: 16
        }, et[Je.Warning] = {
            path: u.createElement("path", {
                d: "M6.4,9.5h1.2v1H6.4V9.5z M6.4,5h1.2v4H6.4V5z M0,12h14c0,0-6.7-10-7-10C6.6,2,0,12,0,12z"
            }),
            width: 14,
            height: 14
        }, et[Je.WhisperMuted] = {
            path: u.createElement("path", {
                d: "M14 4.308l-.08-.082-2.02.007.002-1.563-.665-.67h-2.23l-.66.67v1.556h-1.8L4.78 6.012v7.13L3 14.077V15L14 4.308zm1.336 4.226v4.685l1.664.89V16H8l7.336-7.466zM8 16h4v1.405l-1 .562L9.022 18 8 17.405V16zm8-12l1 1L4 18l-1-1"
            }),
            width: 20,
            height: 20
        }, et),
        it = function(e) {
            var t = {};
            return e.type ? t[Xe[e.type]] = !0 : t[Xe[We.Inherit]] = !0, u.createElement("figure", l.__assign({
                className: "svg-figure"
            }, i(e)), u.createElement("svg", {
                className: c("svg", "svg--" + Je[e.asset].toLowerCase(), t),
                width: e.fill ? "100%" : (e.width || 16) + "px",
                height: e.fill ? "100%" : (e.height || 16) + "px",
                version: "1.1",
                viewBox: "0 0 " + nt[e.asset].width + " " + nt[e.asset].height,
                x: "0px",
                y: "0px"
            }, nt[e.asset].path))
        };
    n(195);
    ! function(e) {
        e[e.Notification = 1] = "Notification", e[e.Alt = 2] = "Alt", e[e.Alt2 = 3] = "Alt2", e[e.Brand = 4] = "Brand", e[e.Live = 5] = "Live", e[e.Alert = 6] = "Alert", e[e.Success = 7] = "Success", e[e.Prime = 8] = "Prime", e[e.Dashboard = 9] = "Dashboard"
    }(tt || (tt = {}));
    var at, rt, ot = (at = {}, at[tt.Notification] = "tw-badge--notification", at[tt.Alt] = "tw-badge--alt", at[tt.Alt2] = "tw-badge--alt-2", at[tt.Brand] = "tw-badge--brand", at[tt.Live] = "tw-badge--live", at[tt.Alert] = "tw-badge--alert", at[tt.Success] = "tw-badge--success", at[tt.Prime] = "tw-badge--prime", at[tt.Dashboard] = "tw-badge--dashboard", at),
        st = function(e) {
            var t = {
                "tw-badge": !0
            };
            e.type && (t[ot[e.type]] = !0);
            var n = {
                width: e.size,
                height: e.size
            };
            e.size && e.size;
            var a = u.createElement(K, l.__assign({
                display: g.InlineFlex,
                justifyContent: S.Center,
                alignItems: d.Center,
                className: c(t)
            }, i(e)), u.createElement("div", {
                style: n
            }, u.createElement($, {
                className: "tw-badge__icon",
                display: g.Flex,
                justifyContent: S.Center,
                alignItems: d.Center
            }, u.createElement(it, {
                asset: e.icon,
                fill: !0
            }))));
            return e.border ? u.createElement($, {
                className: "tw-badge__container",
                display: g.InlineFlex,
                position: C.Relative
            }, a) : a
        },
        lt = n(10),
        ct = new Set(["imageAlt", "imageSrc", "onImageError", "onImageLoad"]),
        ut = function(e) {
            var t, n, a;
            return e.row && (t = d.Center), e.elevation && (n = e.elevation), e.background === Fe.Overlay && (a = ve.Overlay), u.createElement($, l.__assign({
                className: "tw-card",
                position: C.Relative
            }, i(e)), u.createElement(Ke, {
                display: g.Flex,
                flexDirection: e.row ? v.Row : v.Column,
                alignItems: t,
                elevation: n,
                background: e.background,
                color: a,
                border: e.border,
                flexWrap: y.NoWrap
            }, e.children))
        },
        dt = function(e) {
            return u.createElement($, l.__assign({
                className: "tw-card-body",
                position: C.Relative
            }, i(e)), e.children)
        };
    n(196);
    ! function(e) {
        e[e.Default = 1] = "Default", e[e.Size2 = 2] = "Size2", e[e.Size3 = 3] = "Size3", e[e.Size4 = 4] = "Size4", e[e.Size6 = 5] = "Size6", e[e.Size8 = 6] = "Size8", e[e.Size16 = 7] = "Size16", e[e.Size24 = 8] = "Size24", e[e.Size32 = 9] = "Size32"
    }(rt || (rt = {}));
    var pt, mt, ht = (pt = {}, pt[rt.Size2] = "tw-card-img--size-2", pt[rt.Size3] = "tw-card-img--size-3", pt[rt.Size4] = "tw-card-img--size-4", pt[rt.Size6] = "tw-card-img--size-6", pt[rt.Size8] = "tw-card-img--size-8", pt[rt.Size16] = "tw-card-img--size-16", pt[rt.Size24] = "tw-card-img--size-24", pt[rt.Size32] = "tw-card-img--size-32", pt),
        gt = function(e) {
            var t = {
                "tw-card-img": !0
            };
            return e.size && (t[ht[e.size]] = !0), u.createElement(K, {
                flexShrink: 0
            }, u.createElement("div", l.__assign({
                className: c(t)
            }, i(e)), u.createElement(ge, {
                ratio: e.aspect ? e.aspect : oe.Aspect16x9,
                overflow: e.overflow
            }, u.createElement("img", {
                src: e.imageSrc,
                alt: e.imageAlt,
                onLoad: e.onImageLoad,
                onError: e.onImageError
            })), e.children))
        },
        ft = (n(197), function(e) {
            var t = {
                    "tw-placeholder": !0,
                    "tw-placeholder--overlay": e.overlay,
                    "tw-placeholder--fill": !e.lineCount,
                    "tw-placeholder--custom-height": !!e.height
                },
                n = {
                    width: e.width ? e.width / 10 + "rem" : "",
                    height: e.height ? e.height / 10 + "rem" : ""
                },
                a = [];
            if (a.push({
                    key: r()
                }), e.lineCount && e.lineCount > 1)
                for (var o = 1; o < e.lineCount; o++) a.push({
                    key: r()
                });
            return u.createElement("span", l.__assign({
                className: "tw-placeholder-wrapper"
            }, i(e)), a.map(function(e) {
                return u.createElement("span", {
                    className: c(t),
                    key: e.key,
                    style: n
                })
            }))
        }),
        vt = (n(198), function(e) {
            var t;
            return t = u.createElement(ut, {
                key: e.title
            }, u.createElement(gt, l.__assign({
                aspect: oe.BoxArt
            }, a(e))), u.createElement(dt, null, u.createElement("h3", {
                className: "tw-box-art-card__title ellipsis"
            }, e.title), u.createElement("p", {
                className: "tw-box-art-card__meta ellipsis"
            }, e.info))), e.placeholder ? u.createElement($, null, u.createElement($, {
                margin: {
                    bottom: .5
                }
            }, u.createElement(ge, {
                ratio: oe.Aspect3x4
            }, u.createElement(ft, null))), u.createElement(Pe, null, u.createElement(ft, {
                width: 150
            })), u.createElement(Pe, {
                fontSize: ke.Size7
            }, u.createElement(ft, {
                width: 100
            }))) : e.linkTo ? u.createElement("div", l.__assign({
                className: "tw-box-art-card"
            }, i(e)), u.createElement(lt.a, {
                to: e.linkTo,
                title: e.title,
                "data-a-target": "tw-box-art-card-link"
            }, t)) : u.createElement("div", l.__assign({
                className: "tw-box-art-card"
            }, i(e)), t)
        });
    n(199);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.Large = 2] = "Large"
    }(mt || (mt = {}));
    var bt, yt, kt = (bt = {}, bt[mt.Small] = "tw-loading-spinner--small", bt[mt.Large] = "tw-loading-spinner--large", bt),
        St = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    showSpinner: 0 === t.props.delay
                }, t
            }
            return l.__extends(t, e), t.prototype.componentDidMount = function() {
                var e = this,
                    t = void 0 !== this.props.delay ? this.props.delay : 300;
                t > 0 && (this.delayTimeout = window.setTimeout(function() {
                    e.setState({
                        showSpinner: !0
                    })
                }, t))
            }, t.prototype.componentWillUnmount = function() {
                clearTimeout(this.delayTimeout)
            }, t.prototype.render = function() {
                if (!this.state.showSpinner) return null;
                var e, t = {
                    "tw-loading-spinner": !0,
                    "tw-loading-spinner--inherit-color": this.props.inheritColor
                };
                return this.props.size && (t[kt[this.props.size]] = !0), e = u.createElement("div", l.__assign({
                    className: c(t)
                }, i(this.props))), this.props.fillContent && (e = u.createElement($, {
                    display: g.Flex,
                    justifyContent: S.Center,
                    alignItems: d.Center,
                    fullWidth: !0,
                    fullHeight: !0
                }, e)), e
            }, t
        }(u.Component);
    n(200);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.Hollow = 1] = "Hollow", e[e.Text = 2] = "Text", e[e.Alert = 3] = "Alert", e[e.Success = 4] = "Success"
    }(yt || (yt = {}));
    var _t, wt = (Nt = {}, Nt[yt.Hollow] = "tw-button--hollow", Nt[yt.Text] = "tw-button--text", Nt[yt.Alert] = "tw-button--alert", Nt[yt.Success] = "tw-button--success", Nt);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.Large = 2] = "Large"
    }(_t || (_t = {}));
    var Et, Ct = (Tt = {}, Tt[_t.Small] = "tw-button--small", Tt[_t.Large] = "tw-button--large", Tt);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.Loading = 1] = "Loading", e[e.Success = 2] = "Success"
    }(Et || (Et = {}));
    var Nt, Tt, Dt, It, Ot, Lt = (Dt = {}, Dt[Et.Loading] = "tw-button--state-loading", Dt[Et.Success] = "tw-button--state-success", Dt),
        xt = (It = {}, It[_t.Small] = {
            width: 12,
            height: 12
        }, It[_t.Large] = {
            width: 20,
            height: 20
        }, It),
        Rt = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.refHandler = function(e) {
                    t.buttonElement = e
                }, t.onClick = function(e) {
                    t.props.onClick && t.props.onClick(e), t.props.blurAfterClick && t.buttonElement && t.buttonElement.blur()
                }, t
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e, t, n, a, r, s, p;
                (this.props.disabled || this.props.state === Et.Loading || this.props.state === Et.Success) && (p = !0);
                var m = {
                    "tw-button": !0,
                    "tw-button--dropmenu": this.props.dropdown,
                    "tw-button--overlay": this.props.overlay,
                    "tw-button--purchase": !!this.props.purchase,
                    "tw-button--status": !!this.props.statusAlertText || !!this.props.statusAlertIcon,
                    "tw-button--disabled": this.props.disabled,
                    "full-width": this.props.fullWidth
                };
                if (this.props.statusAlertText || this.props.statusAlertIcon || this.props.state === Et.Success ? m[wt[yt.Success]] = !0 : this.props.type && (m[wt[this.props.type]] = !0), this.props.size && (m[Ct[this.props.size]] = !0), this.props.state && (m[Lt[this.props.state]] = !0), this.props.purchase && (t = u.createElement("span", {
                        className: "tw-button__num-block",
                        key: "tw-button-purchase"
                    }, this.props.purchase)), this.props.dropdown && (e = u.createElement("span", {
                        className: "tw-button__icon tw-button__icon--right",
                        key: "tw-button-dropdown"
                    }, u.createElement(it, {
                        asset: Je.GlyphArrDown,
                        type: We.Inherit
                    }))), this.props.state === Et.Loading && (r = u.createElement($, {
                        className: "tw-button__loading-spinner",
                        position: C.Absolute,
                        key: "tw-button-loading-spinner"
                    }, u.createElement(St, {
                        delay: 0,
                        size: this.getSpinnerSize(this.props.size),
                        inheritColor: !0
                    }))), this.props.state === Et.Success && (s = u.createElement($, {
                        className: "tw-button__success-icon",
                        position: C.Absolute,
                        display: g.Flex,
                        alignItems: d.Center,
                        justifyContent: S.Center,
                        key: "tw-button-success-icon"
                    }, u.createElement(it, {
                        asset: Je.Check,
                        width: this.successIconSize(this.props.size),
                        height: this.successIconSize(this.props.size)
                    }))), this.props.icon) {
                    var h = {
                        width: 16,
                        height: 16
                    };
                    this.props.size && (h = xt[this.props.size]), n = this.props.statusAlertIcon ? u.createElement($, {
                        className: "tw-button__icon tw-button__icon--status " + (this.props.children ? "tw-button__icon--left" : ""),
                        display: g.Flex,
                        key: "tw-button-icon"
                    }, u.createElement($, {
                        className: "tw-button__primary-icon",
                        display: g.Flex,
                        alignItems: d.Center,
                        justifyContent: S.Center
                    }, u.createElement(it, {
                        width: h.width,
                        height: h.height,
                        type: We.Inherit,
                        asset: this.props.icon
                    })), u.createElement($, {
                        className: "tw-button__alert-icon",
                        display: g.Flex,
                        alignItems: d.Center,
                        justifyContent: S.Center
                    }, u.createElement(it, {
                        width: h.width,
                        height: h.height,
                        type: We.Inherit,
                        asset: this.props.statusAlertIcon
                    }))) : u.createElement("span", {
                        className: "tw-button__icon " + (this.props.children ? "tw-button__icon--left" : ""),
                        key: "tw-button-icon"
                    }, u.createElement(it, {
                        width: h.width,
                        height: h.height,
                        type: We.Inherit,
                        asset: this.props.icon
                    }))
                }
                this.props.children && (a = this.props.statusAlertText ? u.createElement("span", {
                    className: "tw-button__text",
                    key: "tw-button-text"
                }, u.createElement("span", {
                    className: "tw-button__primary-text",
                    "data-a-target": "tw-button-text"
                }, this.props.children), u.createElement("span", {
                    className: "tw-button__alert-text"
                }, this.props.statusAlertText)) : u.createElement("span", {
                    className: "tw-button__text",
                    "data-a-target": "tw-button-text",
                    key: "tw-button-text"
                }, this.props.children));
                var f;
                this.props.tabIndex && (f = this.props.tabIndex);
                var v;
                this.props.targetBlank && (v = "_blank");
                var b = [n, a, r, s, e, t],
                    y = l.__assign({
                        tabIndex: f,
                        onClick: this.onClick,
                        "aria-label": this.props.ariaLabel,
                        className: c(m)
                    }, i(this.props));
                if (this.props.linkTo && !p) {
                    if (o(this.props.linkTo)) {
                        if ("string" == typeof this.props.linkTo) return u.createElement("a", l.__assign({
                            href: this.props.linkTo,
                            target: v,
                            ref: this.refHandler,
                            download: this.props.download
                        }, y), b);
                        throw new Error("External links with Location descriptors are not implemented in core-ui.button! Pass a string as linkTo instead.")
                    }
                    return u.createElement(lt.a, l.__assign({
                        to: this.props.linkTo,
                        target: v,
                        download: this.props.download
                    }, y), b)
                }
                return u.createElement("button", l.__assign({
                    disabled: p,
                    ref: this.refHandler
                }, y), b)
            }, t.prototype.getSpinnerSize = function(e) {
                switch (e) {
                    case _t.Small:
                        return mt.Small;
                    case _t.Large:
                        return mt.Large;
                    case _t.Default:
                    default:
                        return mt.Default
                }
            }, t.prototype.successIconSize = function(e) {
                switch (e) {
                    case _t.Small:
                        return 12;
                    case _t.Large:
                        return 20;
                    case _t.Default:
                    default:
                        return 16
                }
            }, t
        }(u.Component);
    n(201);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.Hollow = 1] = "Hollow", e[e.Primary = 2] = "Primary", e[e.Alert = 3] = "Alert", e[e.Secondary = 4] = "Secondary", e[e.Success = 5] = "Success"
    }(Ot || (Ot = {}));
    var Ft, Ut, Pt, Mt, At = (Ft = {}, Ft[Ot.Primary] = "tw-button-icon--primary", Ft[Ot.Hollow] = "tw-button-icon--hollow", Ft[Ot.Alert] = "tw-button-icon--alert", Ft[Ot.Secondary] = "tw-button-icon--secondary", Ft[Ot.Success] = "tw-button-icon--success", Ft),
        jt = (Ut = {}, Ut[_t.Small] = "tw-button-icon--small", Ut[_t.Large] = "tw-button-icon--large", Ut),
        Bt = (Pt = {}, Pt[_t.Small] = {
            width: 12,
            height: 12
        }, Pt[_t.Large] = {
            width: 20,
            height: 20
        }, Pt),
        Ht = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.refHandler = function(e) {
                    t.buttonElement = e
                }, t.onClick = function(e) {
                    t.props.onClick && t.props.onClick(e), t.props.blurAfterClick && t.buttonElement && t.buttonElement.blur()
                }, t
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e, t, n = {
                    "tw-button-icon": !0,
                    "tw-button-icon--dropmenu": this.props.dropdown,
                    "tw-button-icon--disabled": this.props.disabled,
                    "tw-button-icon--overlay": this.props.overlay,
                    "tw-button-icon--status": !!this.props.statusAlertIcon
                };
                if (this.props.statusAlertIcon ? n[At[Ot.Success]] = !0 : this.props.type && (n[At[this.props.type]] = !0), this.props.size && (n[jt[this.props.size]] = !0), this.props.dropdown && (e = u.createElement("span", {
                        className: "tw-button-icon__icon tw-button-icon__icon--right",
                        key: "tw-button-dropdown"
                    }, u.createElement(it, {
                        asset: Je.GlyphArrDown,
                        type: We.Inherit
                    }))), this.props.icon) {
                    var a = {
                        width: 16,
                        height: 16
                    };
                    this.props.size && (a = Bt[this.props.size]), t = u.createElement("span", {
                        className: "tw-button-icon__icon"
                    }, u.createElement(it, {
                        width: a.width,
                        height: a.height,
                        type: We.Inherit,
                        asset: this.props.icon
                    })), t = this.props.statusAlertIcon ? u.createElement($, {
                        className: "tw-button-icon__icon tw-button-icon__icon--status",
                        display: g.Flex,
                        key: "tw-button-icon"
                    }, u.createElement($, {
                        className: "tw-button-icon__primary-icon",
                        display: g.Flex,
                        alignItems: d.Center,
                        justifyContent: S.Center
                    }, u.createElement(it, {
                        width: a.width,
                        height: a.height,
                        type: We.Inherit,
                        asset: this.props.icon
                    })), u.createElement($, {
                        className: "tw-button-icon__alert-icon",
                        display: g.Flex,
                        alignItems: d.Center,
                        justifyContent: S.Center
                    }, u.createElement(it, {
                        width: a.width,
                        height: a.height,
                        type: We.Inherit,
                        asset: this.props.statusAlertIcon
                    }))) : u.createElement("span", {
                        className: "tw-button-icon__icon",
                        key: "tw-button-icon"
                    }, u.createElement(it, {
                        width: a.width,
                        height: a.height,
                        type: We.Inherit,
                        asset: this.props.icon
                    }))
                }
                var r;
                this.props.tabIndex && (r = this.props.tabIndex);
                var s;
                this.props.targetBlank && (s = "_blank");
                var p = l.__assign({
                        tabIndex: r,
                        onClick: this.onClick,
                        "aria-label": this.props.ariaLabel,
                        className: c(n)
                    }, i(this.props)),
                    m = [t, e];
                if (this.props.linkTo && !this.props.disabled) {
                    if (o(this.props.linkTo)) {
                        if ("string" == typeof this.props.linkTo) return u.createElement("a", l.__assign({
                            href: this.props.linkTo,
                            target: s,
                            download: this.props.download,
                            ref: this.refHandler
                        }, p), m);
                        throw new Error("External links with Location descriptors are not implemented in core-ui.button! Pass a string as linkTo instead.")
                    }
                    return u.createElement(lt.a, l.__assign({
                        to: this.props.linkTo,
                        target: s,
                        download: this.props.download
                    }, p), m)
                }
                return u.createElement("button", l.__assign({
                    disabled: this.props.disabled,
                    tabIndex: r,
                    ref: this.refHandler
                }, p), m)
            }, t
        }(u.Component);
    n(202);
    ! function(e) {
        e[e.ExtraSmall = 1] = "ExtraSmall", e[e.Small = 2] = "Small", e[e.Medium = 3] = "Medium", e[e.Large = 4] = "Large", e[e.ExtraLarge = 5] = "ExtraLarge"
    }(Mt || (Mt = {}));
    var Vt, zt = (Wt = {}, Wt[Mt.ExtraSmall] = "tw-balloon--xs", Wt[Mt.Small] = "tw-balloon--sm", Wt[Mt.Medium] = "tw-balloon--md", Wt[Mt.Large] = "tw-balloon--lg", Wt[Mt.ExtraLarge] = "tw-balloon--xl", Wt);
    ! function(e) {
        e[e.Top = 1] = "Top", e[e.Bottom = 2] = "Bottom", e[e.Left = 3] = "Left", e[e.Right = 4] = "Right", e[e.TopLeft = 5] = "TopLeft", e[e.TopRight = 6] = "TopRight", e[e.BottomRight = 7] = "BottomRight", e[e.BottomLeft = 8] = "BottomLeft", e[e.TopCenter = 9] = "TopCenter", e[e.BottomCenter = 10] = "BottomCenter", e[e.LeftCenter = 11] = "LeftCenter", e[e.RightCenter = 12] = "RightCenter"
    }(Vt || (Vt = {}));
    var Wt, qt, Gt, Qt = (qt = {}, qt[Vt.Top] = "tw-balloon--up", qt[Vt.Bottom] = "tw-balloon--down", qt[Vt.Left] = "tw-balloon--left", qt[Vt.Right] = "tw-balloon--right", qt[Vt.TopLeft] = "tw-balloon--up tw-balloon--left", qt[Vt.TopRight] = "tw-balloon--up tw-balloon--right", qt[Vt.BottomRight] = "tw-balloon--down tw-balloon--right", qt[Vt.BottomLeft] = "tw-balloon--down", qt[Vt.TopCenter] = "tw-balloon--up tw-balloon--center", qt[Vt.BottomCenter] = "tw-balloon--down tw-balloon--center", qt[Vt.LeftCenter] = "tw-balloon--left tw-balloon--center", qt[Vt.RightCenter] = "tw-balloon--right tw-balloon--center", qt),
        Kt = function(e) {
            var t = {
                "tw-balloon": !0,
                block: e.show
            };
            e.size && (t[zt[e.size]] = !0), e.direction ? t[Qt[e.direction]] = !0 : t[Qt[Vt.Bottom]] = !0;
            var n, a, r, o;
            e.offsetX && (e.direction === Vt.Left || e.direction === Vt.TopLeft || e.direction === Vt.BottomLeft || e.direction === Vt.LeftCenter || e.direction === Vt.BottomRight || e.direction === Vt.TopRight ? a = e.offsetX : n = e.offsetX), e.offsetY && (e.direction === Vt.Top || e.direction === Vt.TopLeft || e.direction === Vt.TopRight || e.direction === Vt.TopCenter ? o = e.offsetY : r = e.offsetY);
            var s, d, p, m = {
                marginLeft: n,
                marginRight: a,
                marginTop: r,
                marginBottom: o
            };
            e.tailOffset && (e.direction === Vt.Left || e.direction === Vt.Right || e.direction === Vt.LeftCenter || e.direction === Vt.RightCenter ? s = e.tailOffset + "px" : e.direction === Vt.TopRight || e.direction === Vt.BottomRight ? (d = e.tailOffset + "px", p = "auto") : (d = "auto", p = e.tailOffset + "px"));
            var h, g = {
                top: s,
                left: p,
                right: d
            };
            return e.noTail || (h = u.createElement("div", {
                className: "tw-balloon__tail",
                style: g
            })), u.createElement("div", l.__assign({
                className: c(t)
            }, i(e), {
                style: m
            }), e.children, h)
        },
        $t = (n(203), function(e) {
            var t, n = r(),
                a = {
                    "tw-checkbox": !0,
                    "tw-checkbox--error": e.error
                };
            return e.tabIndex && (t = e.tabIndex), u.createElement("div", l.__assign({
                className: c(a)
            }, i(e)), u.createElement("input", {
                className: "tw-checkbox__input",
                type: "checkbox",
                "data-a-target": "tw-checkbox",
                checked: e.checked,
                defaultChecked: e.defaultChecked,
                disabled: e.disabled,
                id: e.id ? e.id : n,
                name: e.name,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onFocus: e.onFocus,
                ref: e.refDelegate,
                required: e.required,
                tabIndex: t,
                value: e.value
            }), u.createElement("label", {
                className: "tw-checkbox__label",
                htmlFor: e.id ? e.id : n
            }, e.label))
        }),
        Yt = (n(204), function(e) {
            var t = {
                "tw-drop-zone": !0,
                "tw-drop-zone--over": e.dragOver,
                "tw-drop-zone--error": e.error,
                "tw-drop-zone--disabled": e.disabled
            };
            return u.createElement($, l.__assign({
                className: c(t)
            }, i(e), {
                alignItems: d.Center,
                display: g.Flex,
                fullHeight: !0,
                fullWidth: !0,
                justifyContent: S.Center,
                position: C.Absolute
            }), u.createElement("div", {
                className: "tw-drop-zone__content"
            }, e.children))
        });
    n(205);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.Medium = 2] = "Medium", e[e.Large = 3] = "Large", e[e.None = 4] = "None"
    }(Gt || (Gt = {}));
    var Jt, Xt, Zt = (Jt = {}, Jt[Gt.Small] = "tw-grid--gutter-sm", Jt[Gt.Medium] = "tw-grid--gutter-md", Jt[Gt.Large] = "tw-grid--gutter-lg", Jt[Gt.None] = "tw-grid--gutter-none", Jt),
        en = function(e) {
            var t = {
                "tw-grid": !0
            };
            return e.gutterSize && (t[Zt[e.gutterSize]] = !0), u.createElement("div", l.__assign({
                className: c(t)
            }, i(e)), e.children)
        },
        tn = (n(206), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = (a = {}, a["tw-col-offset-" + this.props.offset] = this.props.offset && "number" == typeof this.props.offset, a),
                    t = this.getColumnCount("", this.props.cols),
                    n = this.getColumnCount("offset-", this.props.offset);
                return u.createElement("div", l.__assign({
                    className: c(e, [t, n])
                }, i(this.props)), this.props.children);
                var a
            }, t.prototype.getColumnCount = function(e, t) {
                if (!t) return "";
                var n = [];
                return "object" != typeof t ? "tw-col-" + t : (n.push("tw-col-" + e + t.default), t.xs && n.push("xs-tw-col-" + e + t.xs), t.sm && n.push("sm-tw-col-" + e + t.sm), t.md && n.push("md-tw-col-" + e + t.md), t.lg && n.push("lg-tw-col-" + e + t.lg), t.xl && n.push("xl-tw-col-" + e + t.xl), t.xxl && n.push("xxl-tw-col-" + e + t.xxl), n)
            }, t
        }(u.Component));
    n(207);
    ! function(e) {
        e[e.Text = 0] = "Text", e[e.Email = 1] = "Email", e[e.Password = 2] = "Password", e[e.Search = 3] = "Search"
    }(Xt || (Xt = {}));
    var nn, an = function(e) {
            var t, n;
            e.tabIndex && (n = e.tabIndex);
            var a = {
                "tw-input": !0,
                "tw-input--error": e.error,
                "tw-input--icon-left": e.icon && !e.iconRight,
                "tw-input--icon-right": e.iconRight
            };
            return e.icon && (t = u.createElement("div", {
                className: "tw-input__icon-group " + (e.iconRight ? "tw-input__icon-group--right" : "")
            }, u.createElement("div", {
                className: "tw-input__icon"
            }, u.createElement(it, {
                asset: e.icon,
                type: We.Inherit
            })))), u.createElement($, l.__assign({
                position: C.Relative
            }, i(e)), t, u.createElement("input", {
                type: Xt[e.type].toLowerCase(),
                className: c(a),
                placeholder: e.placeholder,
                "aria-label": e.ariaLabel,
                autoCapitalize: e.autoCapitalize ? "on" : "off",
                autoCorrect: e.autoCorrect ? "on" : "off",
                autoComplete: e.autoComplete,
                autoFocus: e.autoFocus,
                "data-a-target": "tw-input",
                defaultValue: e.defaultValue,
                disabled: e.disabled,
                id: e.id,
                name: e.name,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onClick: e.onClick,
                onFocus: e.onFocus,
                onKeyDown: e.onKeyDown,
                maxLength: e.maxLength,
                readOnly: e.readOnly,
                ref: e.refDelegate,
                required: e.required,
                spellCheck: e.spellCheck,
                tabIndex: n,
                value: e.value
            }))
        },
        rn = (n(208), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.refHandler = function(e) {
                    t.buttonElement = e
                }, t.onClick = function(e) {
                    t.props.onClick && t.props.onClick(e), t.props.blurAfterClick && t.buttonElement && t.buttonElement.blur()
                }, t
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e, t = {
                    "tw-interactable": !0,
                    "tw-interactable--alpha": this.props.alpha,
                    "tw-interactable--selected": this.props.selected,
                    "tw-interactable--hover": this.props.hover,
                    "tw-interactable--disabled": this.props.disabled,
                    "tw-interactable--alert": this.props.alert
                };
                this.props.tabIndex && (e = this.props.tabIndex);
                var n;
                this.props.targetBlank && (n = "_blank");
                var a = l.__assign({
                    tabIndex: e,
                    onClick: this.onClick,
                    "aria-label": this.props.ariaLabel,
                    className: c(t)
                }, i(this.props));
                if (this.props.linkTo) {
                    if (o(this.props.linkTo)) {
                        if ("string" == typeof this.props.linkTo) return u.createElement("a", l.__assign({
                            href: this.props.linkTo,
                            target: n,
                            ref: this.refHandler
                        }, a), this.props.children);
                        throw new Error("External links with Location descriptors are not implemented in core-ui.interactable! Pass a string as linkTo instead.")
                    }
                    return u.createElement(lt.a, l.__assign({
                        to: this.props.linkTo,
                        target: n
                    }, a), this.props.children)
                }
                return u.createElement("button", l.__assign({
                    disabled: this.props.disabled,
                    ref: this.refHandler
                }, a), this.props.children)
            }, t
        }(u.Component)),
        on = (n(209), function(e) {
            var t, n, a = {
                    "tw-group": !0,
                    "tw-group--error": e.error
                },
                r = {
                    "tw-group__label": !0
                };
            return e.labelOptional && (t = u.createElement("span", {
                className: "tw-group__optional"
            }, "(", e.labelOptional, ")")), e.hint && !e.error ? n = u.createElement("p", {
                className: "tw-group__hint"
            }, e.hint) : e.errorMessage && e.error && (n = u.createElement("p", {
                className: "tw-group__hint"
            }, e.errorMessage)), u.createElement("div", l.__assign({
                className: c(a)
            }, i(e)), u.createElement("label", {
                className: c(r),
                htmlFor: e.id
            }, e.label, t), e.children, n)
        });
    n(210);
    ! function(e) {
        e[e.Small = 1] = "Small", e[e.Medium = 2] = "Medium", e[e.Large = 3] = "Large"
    }(nn || (nn = {}));
    var sn, ln, cn = (sn = {}, sn[nn.Small] = "tw-live-indicator--small", sn[nn.Medium] = "tw-live-indicator--medium", sn[nn.Large] = "tw-live-indicator--large", sn),
        un = function(e) {
            var t = {
                "tw-live-indicator": !0,
                "tw-live-indicator--pulse": e.pulse
            };
            return e.size ? t[cn[e.size]] = !0 : t[cn[nn.Small]] = !0, u.createElement($, l.__assign({
                display: g.InlineBlock,
                position: C.Relative,
                className: c(t)
            }, i(e)))
        };
    n(211);
    ! function(e) {
        e[e.Top = 1] = "Top", e[e.Bottom = 2] = "Bottom", e[e.Left = 3] = "Left", e[e.Right = 4] = "Right"
    }(ln || (ln = {}));
    var dn, pn = (mn = {}, mn[ln.Top] = "tw-tooltip--up", mn[ln.Bottom] = "tw-tooltip--down", mn[ln.Left] = "tw-tooltip--left", mn[ln.Right] = "tw-tooltip--right", mn);
    ! function(e) {
        e[e.Left = 1] = "Left", e[e.Center = 2] = "Center", e[e.Right = 3] = "Right"
    }(dn || (dn = {}));
    var mn, hn, gn, fn = (hn = {}, hn[dn.Left] = "tw-tooltip--align-left", hn[dn.Center] = "tw-tooltip--align-center", hn[dn.Right] = "tw-tooltip--align-right", hn),
        vn = function(e) {
            var t = {
                    "tw-tooltip": !0,
                    "tw-tooltip--wrap": !!e.width
                },
                n = {
                    "tw-tooltip-wrapper": !0,
                    "tw-tooltip-wrapper--show": e.show
                };
            e.direction ? t[pn[e.direction]] = !0 : t[pn[ln.Top]] = !0, e.align && e.align !== dn.Center && e.direction !== ln.Left && e.direction !== ln.Right ? t[fn[e.align]] = !0 : t[fn[dn.Center]] = !0;
            var a, r, o, s;
            e.offsetX && (e.align === dn.Right ? r = e.offsetX : a = e.offsetX), e.offsetY && (e.direction && e.direction !== ln.Top ? o = e.offsetY : s = e.offsetY);
            var d = {
                marginLeft: a,
                marginRight: r,
                marginTop: o,
                marginBottom: s,
                width: e.width
            };
            return u.createElement(K, l.__assign({
                display: e.display ? e.display : g.InlineFlex
            }, i(e)), u.createElement("div", {
                className: c(n)
            }, e.children, u.createElement("div", {
                className: c(t),
                style: d,
                "data-a-target": "tw-tooltip-label"
            }, e.label)))
        },
        bn = (n(212), function(e) {
            var t, n = {
                "tw-stat": !0
            };
            e.icon && (t = u.createElement(it, {
                type: We.Inherit,
                asset: e.icon
            }));
            var a = u.createElement("div", l.__assign({
                className: c(n)
            }, i(e)), u.createElement("span", {
                className: "tw-stat__icon"
            }, t), u.createElement("span", {
                className: "tw-stat__value",
                "data-a-target": "tw-stat-value"
            }, e.value));
            return e.label ? u.createElement(vn, {
                direction: e.tooltipDirection ? e.tooltipDirection : ln.Bottom,
                align: e.tooltipAlign ? e.tooltipAlign : dn.Center,
                label: e.label
            }, a) : a
        }),
        yn = (n(213), function(e) {
            var t, n = {
                "tw-tag": !0
            };
            e.tabIndex && (t = e.tabIndex);
            var a;
            return a = e.icon ? u.createElement("span", {
                className: "tw-tag__icon"
            }, u.createElement(it, {
                width: 12,
                height: 12,
                type: We.Inherit,
                asset: e.icon
            })) : u.createElement("span", {
                className: "tw-tag__label"
            }, e.label), u.createElement("button", l.__assign({
                onClick: e.onClose,
                disabled: e.disabled,
                tabIndex: t,
                className: c(n)
            }, i(e)), a, u.createElement("span", {
                className: "tw-tag__close"
            }, u.createElement(it, {
                width: 8,
                height: 8,
                type: We.Inherit,
                asset: Je.Close
            })))
        });
    n(214);
    ! function(e) {
        e[e.Notification = 1] = "Notification", e[e.Brand = 2] = "Brand", e[e.Live = 3] = "Live", e[e.Alert = 4] = "Alert", e[e.Success = 5] = "Success", e[e.Prime = 6] = "Prime", e[e.Overlay = 7] = "Overlay"
    }(gn || (gn = {}));
    var kn, Sn, _n = (kn = {}, kn[gn.Notification] = "tw-pill--notification", kn[gn.Brand] = "tw-pill--brand", kn[gn.Live] = "tw-pill--live", kn[gn.Alert] = "tw-pill--alert", kn[gn.Success] = "tw-pill--success", kn[gn.Prime] = "tw-pill--prime", kn[gn.Overlay] = "tw-pill--overlay", kn),
        wn = function(e) {
            var t = {
                "tw-pill": !0
            };
            return e.type && (t[_n[e.type]] = !0), u.createElement("span", l.__assign({
                className: c(t)
            }, i(e)), e.label)
        };
    n(215);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.Small = 1] = "Small", e[e.ExtraSmall = 2] = "ExtraSmall"
    }(Sn || (Sn = {}));
    var En, Cn = (Nn = {}, Nn[Sn.Small] = "tw-progress-bar--sm", Nn[Sn.ExtraSmall] = "tw-progress-bar--xs", Nn);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.Caution = 1] = "Caution", e[e.Error = 2] = "Error", e[e.Success = 3] = "Success"
    }(En || (En = {}));
    var Nn, Tn, Dn, In = (Tn = {}, Tn[En.Caution] = "tw-progress-bar--caution", Tn[En.Error] = "tw-progress-bar--error", Tn[En.Success] = "tw-progress-bar--success", Tn),
        On = function(e) {
            var t = {
                "tw-progress-bar": !0,
                "tw-progress-bar--countdown": !!e.countdown,
                "tw-progress-bar--inherit": e.inherit,
                "tw-progress-bar--mask": e.mask
            };
            return e.size && (t[Cn[e.size]] = !0), e.status && (t[In[e.status]] = !0), u.createElement("div", l.__assign({
                className: c(t)
            }, i(e)), u.createElement("div", {
                onAnimationEnd: e.onCountdownEnd,
                className: "tw-progress-bar__fill",
                style: {
                    width: e.value + "%",
                    animationDuration: e.countdown ? e.countdown + "s" : ""
                },
                "data-a-target": "tw-progress-bar-animation"
            }))
        },
        Ln = (n(216), function(e) {
            var t, n = "tw-" + r(),
                a = {
                    "tw-radio": !0,
                    "tw-radio--error": e.error
                };
            return e.tabIndex && (t = e.tabIndex), u.createElement("div", l.__assign({
                className: c(a)
            }, i(e)), u.createElement("input", {
                type: "radio",
                className: "tw-radio__input",
                "data-a-target": "tw-radio",
                autoFocus: e.autoFocus,
                checked: e.checked,
                defaultChecked: e.defaultChecked,
                disabled: e.disabled,
                id: e.id ? e.id : n,
                name: e.name,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onFocus: e.onFocus,
                required: e.required,
                ref: e.refDelegate,
                tabIndex: t,
                value: e.value
            }), u.createElement("label", {
                className: "tw-radio__label",
                htmlFor: e.id ? e.id : n
            }, e.label))
        }),
        xn = (n(217), function(e) {
            var t, n = r(),
                a = {
                    "tw-toggle": !0,
                    "tw-toggle--error": e.error
                };
            return e.tabIndex && (t = e.tabIndex), u.createElement("div", l.__assign({
                className: c(a)
            }, i(e)), u.createElement("input", {
                className: "tw-toggle__input",
                autoFocus: e.autoFocus,
                checked: e.checked,
                defaultValue: e.defaultValue,
                disabled: e.disabled,
                id: e.id ? e.id : n,
                name: e.name,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onFocus: e.onFocus,
                tabIndex: t,
                type: "checkbox",
                ref: e.refDelegate,
                value: e.value,
                "data-a-target": "tw-toggle"
            }), u.createElement("label", {
                htmlFor: e.id ? e.id : n,
                className: "tw-toggle__button"
            }))
        }),
        Rn = (n(218), function(e) {
            var t, n = {
                "tw-range": !0,
                "tw-range--error": e.error
            };
            return e.tabIndex && (t = e.tabIndex), u.createElement("input", l.__assign({
                className: c(n),
                id: e.id,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onFocus: e.onFocus,
                tabIndex: t,
                disabled: e.disabled,
                type: "range",
                min: e.min,
                max: e.max,
                name: e.name,
                ref: e.refDelegate,
                step: e.step,
                value: e.value
            }, i(e)))
        }),
        Fn = (n(219), function(e) {
            var t, n = "tw-" + r();
            return e.tabIndex && (t = e.tabIndex), u.createElement("div", l.__assign({
                className: c("tw-search-input")
            }, i(e)), u.createElement(K, {
                display: g.HideAccessible
            }, u.createElement("label", {
                htmlFor: e.id ? e.id : n
            }, "Search")), u.createElement(an, {
                autoCapitalize: e.autoCapitalize,
                autoFocus: e.autoFocus,
                autoComplete: "off",
                disabled: e.disabled,
                error: e.error,
                icon: Je.NavSearch,
                id: e.id ? e.id : n,
                maxLength: e.maxLength,
                name: e.name,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onFocus: e.onFocus,
                onKeyDown: e.onKeyDown,
                placeholder: e.placeholder,
                refDelegate: e.refDelegate,
                spellCheck: e.spellCheck,
                tabIndex: t,
                type: Xt.Search,
                value: e.value
            }))
        }),
        Un = (n(220), function(e) {
            return u.createElement("div", l.__assign({
                className: c("tw-segmented-button")
            }, i(e)), e.children)
        }),
        Pn = (n(221), function(e) {
            var t, n = {
                "tw-segmented-button-option": !0
            };
            return e.tabIndex && (t = e.tabIndex), u.createElement("label", l.__assign({
                className: c(n),
                htmlFor: e.id
            }, i(e)), u.createElement("input", {
                type: e.type || "radio",
                className: "tw-segmented-button-option__input",
                checked: e.checked,
                defaultChecked: e.defaultChecked,
                defaultValue: e.defaultValue,
                disabled: e.disabled,
                id: e.id,
                name: e.name,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onFocus: e.onFocus,
                tabIndex: t,
                ref: e.refDelegate,
                value: e.value,
                "data-a-target": "tw-segmented-button-option"
            }), u.createElement("span", {
                className: "tw-segmented-button-option__label"
            }, e.label))
        }),
        Mn = (n(222), function(e) {
            var t, n = {
                "tw-select": !0,
                "tw-select--disabled": e.disabled,
                "tw-select--error": e.error
            };
            return e.tabIndex && (t = e.tabIndex), u.createElement("select", l.__assign({
                className: c(n),
                defaultValue: e.defaultValue,
                disabled: e.disabled,
                id: e.id,
                name: e.name,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onFocus: e.onFocus,
                required: e.required,
                tabIndex: t,
                value: e.value,
                ref: e.refDelegate
            }, i(e)), e.children)
        }),
        An = (n(223), function(e) {
            var t, n, a = {
                "tw-tab-nav__item": !0,
                "mg-l-auto": e.pullRight,
                "tw-tab-nav__item--disabled": e.disabled
            };
            e.targetBlank && (n = "_blank");
            var r;
            if (e.active && (r = "active"), e.linkTo && !e.disabled)
                if (o(e.linkTo)) {
                    if ("string" != typeof e.linkTo) throw new Error("External links with Location descriptors are not implemented in core-ui.button! Pass a string as linkTo instead.");
                    t = u.createElement("a", {
                        disabled: e.disabled,
                        target: n,
                        className: r,
                        onClick: e.onClick,
                        href: e.linkTo,
                        role: "tab",
                        "data-a-target": "tw-tab-link"
                    }, e.children)
                } else t = u.createElement(lt.a, {
                    disabled: e.disabled,
                    target: n,
                    className: r,
                    onClick: e.onClick,
                    to: e.linkTo,
                    role: "tab",
                    "data-a-target": "tw-tab-link"
                }, e.children);
            else t = u.createElement("button", {
                disabled: e.disabled,
                className: r,
                onClick: e.onClick,
                role: "tab",
                "data-a-target": "tw-tab-link"
            }, e.children);
            return u.createElement("li", l.__assign({
                className: c(a),
                role: "presentation"
            }, i(e)), t)
        }),
        jn = (n(224), function(e) {
            return u.createElement("div", l.__assign({
                className: e.alignRight ? "flex" : ""
            }, i(e)), u.createElement("ul", {
                className: "tw-tab-nav " + (e.alignRight ? "mg-l-auto" : ""),
                role: "tablist"
            }, e.children))
        }),
        Bn = (n(225), function(e) {
            var t, n = {
                "tw-textarea": !0,
                "tw-textarea--no-resize": e.noResize,
                "tw-textarea--error": e.error
            };
            e.tabIndex && (t = e.tabIndex);
            var a = {
                paddingRight: e.paddingRight ? e.paddingRight / 10 + "rem" : null
            };
            return u.createElement(K, {
                overflow: e.overflow
            }, u.createElement("textarea", l.__assign({
                className: c(n),
                autoFocus: e.autoFocus,
                cols: e.cols,
                disabled: e.disabled,
                id: e.id,
                maxLength: e.maxLength,
                name: e.name,
                onBlur: e.onBlur,
                onChange: e.onChange,
                onFocus: e.onFocus,
                onKeyDown: e.onKeyDown,
                style: a,
                placeholder: e.placeholder,
                rows: e.rows,
                tabIndex: t,
                value: e.value,
                defaultValue: e.defaultValue,
                ref: e.refDelegate
            }, i(e))))
        }),
        Hn = (n(226), function(e) {
            var t;
            return t = u.createElement(ut, {
                key: e.title
            }, u.createElement(gt, l.__assign({
                aspect: oe.Aspect16x9
            }, a(e))), u.createElement(dt, null, u.createElement("h3", {
                className: "tw-thumbnail-card__title ellipsis"
            }, e.title), u.createElement("p", {
                className: "tw-thumbnail-card__meta ellipsis"
            }, e.info))), e.placeholder ? u.createElement($, null, u.createElement($, {
                margin: {
                    bottom: .5
                }
            }, u.createElement(ge, {
                ratio: oe.Aspect16x9
            }, u.createElement(ft, null))), u.createElement(Pe, null, u.createElement(ft, {
                width: 150
            })), u.createElement(Pe, {
                fontSize: ke.Size7
            }, u.createElement(ft, {
                width: 100
            }))) : e.linkTo ? u.createElement("div", l.__assign({
                className: "tw-thumbnail-card"
            }, i(e)), u.createElement(lt.a, {
                to: e.linkTo,
                title: e.title,
                "data-a-target": "tw-thumbnail-card-link"
            }, t)) : u.createElement("div", l.__assign({
                className: "tw-thumbnail-card"
            }, i(e)), t)
        }),
        Vn = (n(227), function(e) {
            var t = {
                "tw-toast": !0
            };
            return u.createElement($, {
                fullWidth: !0
            }, u.createElement(Ke, {
                display: g.Flex,
                flexWrap: y.NoWrap,
                className: c(t),
                elevation: 3,
                background: Fe.Base,
                border: !0
            }, u.createElement($, {
                flexGrow: 1
            }, e.children), u.createElement(Ke, {
                display: g.Flex,
                flexShrink: 0,
                borderLeft: !0
            }, u.createElement(rn, {
                onClick: e.onClose,
                ariaLabel: "Dismiss This",
                tabIndex: e.tabIndex,
                alpha: !0,
                "data-a-target": "tw-toast-close"
            }, u.createElement($, {
                padding: 1,
                display: g.Flex,
                alignItems: d.Center,
                justifyContent: S.Center,
                className: "tw-toast__dismiss-target"
            }, u.createElement(it, {
                asset: Je.Close
            }))))))
        });
    n(228);
    ! function(e) {
        e[e.Default = 0] = "Default", e[e.ExtraSmall = 1] = "ExtraSmall", e[e.Small = 2] = "Small", e[e.Large = 3] = "Large", e[e.None = 4] = "None"
    }(Dn || (Dn = {}));
    var zn, Wn = (qn = {}, qn[Dn.ExtraSmall] = "tw-tower--gutter-xs", qn[Dn.Small] = "tw-tower--gutter-sm", qn[Dn.Large] = "tw-tower--gutter-lg", qn[Dn.None] = "tw-tower--gutter-none", qn);
    ! function(e) {
        e[e.ExtraSmall = 1] = "ExtraSmall", e[e.Small = 2] = "Small", e[e.Medium = 3] = "Medium", e[e.Large = 4] = "Large"
    }(zn || (zn = {}));
    var qn, Gn, Qn = (Gn = {}, Gn[zn.ExtraSmall] = "tw-tower--120", Gn[zn.Small] = "tw-tower--180", Gn[zn.Medium] = "tw-tower--240", Gn[zn.Large] = "tw-tower--300", Gn),
        Kn = function(e) {
            var t = {
                "tw-tower": !0,
                "tw-tower--nogrow": e.noGrow,
                "tw-tower--nowrap": e.noWrap,
                "justify-content-center": e.center
            };
            e.gutterSize && (t[Wn[e.gutterSize]] = !0), e.childWidth && (t[Qn[e.childWidth]] = !0);
            var n = new Array;
            if (e.placeholderItems)
                for (var a = 0; a < e.placeholderItems; ++a) n.push(u.createElement("div", {
                    className: "tw-tower__placeholder",
                    key: a
                }));
            return u.createElement("div", l.__assign({
                className: c(t)
            }, i(e)), e.children, n)
        },
        $n = (n(229), function(e) {
            var t = {
                "tw-typeset": !0
            };
            return u.createElement("div", l.__assign({
                className: c(t)
            }, i(e)), e.children)
        });
    n.d(t, "e", function() {
        return le
    }), n.d(t, "f", function() {
        return q
    }), n.d(t, "g", function() {
        return Y
    }), n.d(t, "h", function() {
        return X
    }), n.d(t, "i", function() {
        return ee
    }), n.d(t, "j", function() {
        return ge
    }), n.d(t, "k", function() {
        return oe
    }), n.d(t, "a", function() {
        return ce
    }), n.d(t, "l", function() {
        return Ye
    }), n.d(t, !1, function() {}), n.d(t, "n", function() {
        return st
    }), n.d(t, "o", function() {
        return tt
    }), n.d(t, "t", function() {
        return vt
    }), n.d(t, "u", function() {
        return Rt
    }), n.d(t, "x", function() {
        return _t
    }), n.d(t, "z", function() {
        return yt
    }), n.d(t, "y", function() {
        return Et
    }), n.d(t, "v", function() {
        return Ht
    }), n.d(t, "w", function() {
        return Ot
    }), n.d(t, "p", function() {
        return Kt
    }), n.d(t, "r", function() {
        return Mt
    }), n.d(t, "q", function() {
        return Vt
    }), n.d(t, "B", function() {
        return dt
    }), n.d(t, "C", function() {
        return gt
    }), n.d(t, "D", function() {
        return rt
    }), n.d(t, "A", function() {
        return ut
    }), n.d(t, "E", function() {
        return $t
    }), n.d(t, "I", function() {
        return Yt
    }), n.d(t, "N", function() {
        return en
    }), n.d(t, "O", function() {
        return Gt
    }), n.d(t, "G", function() {
        return tn
    }), n.d(t, "_8", function() {
        return it
    }), n.d(t, "_9", function() {
        return Je
    }), n.d(t, "_10", function() {
        return We
    }), n.d(t, "Q", function() {
        return an
    }), n.d(t, "R", function() {
        return Xt
    }), n.d(t, "S", function() {
        return rn
    }), n.d(t, "M", function() {
        return on
    }), n.d(t, "_17", function() {
        return Ke
    }), n.d(t, "m", function() {
        return Fe
    }), n.d(t, "s", function() {
        return Me
    }), n.d(t, "b", function() {
        return s
    }), n.d(t, "c", function() {
        return d
    }), n.d(t, "d", function() {
        return m
    }), n.d(t, "P", function() {
        return K
    }), n.d(t, "U", function() {
        return $
    }), n.d(t, "H", function() {
        return g
    }), n.d(t, "J", function() {
        return v
    }), n.d(t, "K", function() {
        return y
    }), n.d(t, "T", function() {
        return S
    }), n.d(t, !1, function() {
        return T
    }), n.d(t, "Y", function() {
        return w
    }), n.d(t, "_2", function() {
        return C
    }), n.d(t, "_22", function() {
        return I
    }), n.d(t, "_38", function() {
        return L
    }), n.d(t, "V", function() {
        return un
    }), n.d(t, "W", function() {
        return nn
    }), n.d(t, "X", function() {
        return St
    }), n.d(t, "_15", function() {
        return mt
    }), n.d(t, "_16", function() {
        return bn
    }), n.d(t, "_20", function() {
        return yn
    }), n.d(t, "Z", function() {
        return wn
    }), n.d(t, "_0", function() {
        return gn
    }), n.d(t, "_1", function() {
        return ft
    }), n.d(t, "_3", function() {
        return ye
    }), n.d(t, "_4", function() {
        return pe
    }), n.d(t, "_5", function() {
        return On
    }), n.d(t, "_6", function() {
        return Sn
    }), n.d(t, !1, function() {
        return En
    }), n.d(t, "_7", function() {
        return Ln
    }), n.d(t, "_21", function() {
        return Pe
    }), n.d(t, "F", function() {
        return ve
    }), n.d(t, "L", function() {
        return ke
    }), n.d(t, "_24", function() {
        return _e
    }), n.d(t, "_25", function() {
        return Ee
    }), n.d(t, "_26", function() {
        return Ne
    }), n.d(t, "_37", function() {
        return De
    }), n.d(t, "_29", function() {
        return xn
    }), n.d(t, !1, function() {
        return Rn
    }), n.d(t, "_11", function() {
        return Fn
    }), n.d(t, "_12", function() {
        return Un
    }), n.d(t, "_13", function() {
        return Pn
    }), n.d(t, "_14", function() {
        return Mn
    }), n.d(t, "_18", function() {
        return An
    }), n.d(t, "_19", function() {
        return jn
    }), n.d(t, "_23", function() {
        return Bn
    }), n.d(t, "_27", function() {
        return Hn
    }), n.d(t, "_28", function() {
        return Vn
    }), n.d(t, "_30", function() {
        return vn
    }), n.d(t, "_32", function() {
        return ln
    }), n.d(t, "_31", function() {
        return dn
    }), n.d(t, "_33", function() {
        return Kn
    }), n.d(t, "_35", function() {
        return Dn
    }), n.d(t, "_34", function() {
        return zn
    }), n.d(t, "_36", function() {
        return $n
    }), n.d(t, "_39", function() {
        return i
    })
}, , function(e, t, n) {
    "use strict";

    function i(e, t) {
        return function(n) {
            return function(i) {
                function o(n, a) {
                    var r = i.call(this, n) || this;
                    return r.logger = l.i.withCategory("latency-tracking"), r.getChildContext = function() {
                        return {
                            latencyTracking: r.tracker
                        }
                    }, t && t.isRoot ? r.tracker = l.n.benchmarking.getRootLatencyTracker() : a.latencyTracking ? r.tracker = a.latencyTracking.createChild(e, t && t.destination) : (r.tracker = new u(e, t && t.destination), r.tracker.root = new u("Root", t && t.destination)), r
                }
                return a.__extends(o, i), o.prototype.componentDidMount = function() {
                    t && t.autoReportInteractive && (this.logger.debug("Using default implementation of reportInteractive", {
                        componentID: e
                    }), this.tracker.reportInteractive())
                }, o.prototype.render = function() {
                    var e = {
                        latencyTracking: this.tracker,
                        rootLatencyTracker: t && t.isRoot ? this.tracker : this.tracker.root
                    };
                    return r.createElement(n, a.__assign({}, this.props, e))
                }, o.contextTypes = {
                    latencyTracking: s.object
                }, o.childContextTypes = {
                    latencyTracking: s.object
                }, o
            }(r.Component)
        }
    }
    var a = n(0),
        r = n(1),
        o = n(3),
        s = n(14),
        l = n(2),
        c = n(23),
        u = function() {
            function e(e, t) {
                var n = this;
                this.getLocation = function() {
                    return n.location
                }, this.name = e, this.destination = t
            }
            return e.prototype.reportInteractive = function(e) {
                return e
            }, e.prototype.createChild = function(t, n) {
                return new e(t, n)
            }, e.prototype.setLocation = function(e) {
                this.location = e
            }, e.prototype.reset = function() {}, e.prototype.registerCustomEvent = function(e, t, n, i) {
                return {
                    key: t,
                    label: n,
                    benchmark: i,
                    duration: {
                        latencyStatus: c.a.Unknown,
                        group: e
                    }
                }
            }, e.prototype.reportCustomEvent = function(e) {}, e.prototype.resetCustomEvents = function(e) {}, e
        }(),
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleLoad = function() {
                    t.props.latencyTracking.reportInteractive()
                }, t
            }
            return a.__extends(t, e), t.prototype.render = function() {
                return r.createElement(o.l, a.__assign({
                    size: this.props.size,
                    imageSrc: this.props.imageSrc,
                    imageAlt: this.props.imageAlt,
                    onImageLoad: this.handleLoad
                }, Object(o._39)(this.props)))
            }, t = a.__decorate([i("CriticalAvatar")], t)
        }(r.Component),
        p = d,
        m = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleLoad = function() {
                    t.props.latencyTracking.reportInteractive()
                }, t
            }
            return a.__extends(t, e), t.prototype.render = function() {
                return r.createElement("img", a.__assign({
                    alt: this.props.alt,
                    className: this.props.className,
                    src: this.props.src,
                    onLoad: this.handleLoad
                }, Object(o._39)(this.props)))
            }, t = a.__decorate([i("CriticalImage")], t)
        }(r.Component),
        h = m,
        g = n(28),
        f = n(40),
        v = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return a.__extends(t, e), t.prototype.render = function() {
                return r.createElement("span", null, this.bytesToSize(this.props.totalSize))
            }, t.prototype.bytesToSize = function(e) {
                var t = ["Bytes", "KB", "MB", "GB", "TB"];
                if (0 === e) return "0 Bytes";
                var n = Math.floor(Math.log(e) / Math.log(1024));
                return Math.round(e / Math.pow(1024, n)) + " " + t[n]
            }, t
        }(r.Component),
        b = n(4),
        y = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return a.__extends(t, e), t.prototype.render = function() {
                if (this.props.metric.latencyStatus === c.a.Unknown || void 0 === this.props.metric.value) return r.createElement("span", {
                    className: "latency-metrics__dot-animation"
                }, " ");
                var e = this.props.metric.latencyStatus === c.a.Fail ? "red" : "green";
                return r.createElement("span", {
                    className: "latency-metrics__item-number latency-metrics__item-" + e
                }, Math.round(this.props.metric.value), " ms")
            }, t
        }(r.Component),
        k = y,
        S = (n(238), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.onClickExpand = function() {
                    n.setState({
                        isExpanded: !n.state.isExpanded
                    })
                };
                var i = t.tracker.depth < 2;
                return n.state = {
                    isExpanded: i
                }, n
            }
            return a.__extends(t, e), t.prototype.render = function() {
                return this.props.tracker.isRoot ? r.createElement("div", {
                    className: "latency-metrics-component"
                }, r.createElement("div", {
                    className: "request-latency-metrics__header"
                }, r.createElement("div", {
                    className: "request-latency-metrics__header-url"
                }, "Component"), r.createElement("div", {
                    className: "request-latency-metrics__header-time"
                }, "Started"), r.createElement("div", {
                    className: "request-latency-metrics__header-size"
                }, "Duration")), r.createElement("ul", null, this.renderItem())) : this.renderItem()
            }, t.prototype.renderItem = function() {
                var e = this.props.tracker,
                    t = e.children.length > 0,
                    n = {
                        "latency-metrics-component__metrics": !0,
                        "latency-metrics-component__metrics-with-children": t
                    };
                return r.createElement("li", null, r.createElement("div", {
                    className: b(n),
                    onClick: this.onClickExpand
                }, r.createElement("div", {
                    className: "latency-metrics-component__left"
                }, r.createElement("span", {
                    className: "latency-metrics-component__name"
                }, e.componentName), " ", t && r.createElement("span", null, "(", e.children.length, ")")), r.createElement("div", {
                    className: "latency-metrics-component__time"
                }, Math.round(e.relativeStartTime), " ms"), r.createElement("div", {
                    className: "latency-metrics-component__duration"
                }, r.createElement(k, {
                    metric: e.componentDuration
                }))), r.createElement("ul", null, this.state.isExpanded && e.children.map(function(e) {
                    return r.createElement(_, {
                        tracker: e,
                        key: e.id
                    })
                })))
            }, t
        }(r.Component)),
        _ = S,
        w = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return a.__extends(t, e), t.prototype.render = function() {
                if (this.props.metric.latencyStatus === c.a.Unknown || void 0 === this.props.metric.value) return r.createElement("span", {
                    className: "latency-metrics__dot-animation"
                }, " ");
                var e = this.props.metric.latencyStatus === c.a.Fail ? "red" : "green";
                return r.createElement("span", {
                    className: "latency-metrics__item-number latency-metrics__item-" + e
                }, this.props.metric.value)
            }, t
        }(r.Component),
        E = w,
        C = (n(239), function(e) {
            function t(t) {
                return e.call(this, t) || this
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this;
                return r.createElement("div", {
                    className: "query-metrics"
                }, r.createElement("div", {
                    className: "query-metrics__header"
                }, r.createElement("div", {
                    className: "query-metrics__header-batch"
                }, "Batch"), r.createElement("div", {
                    className: "query-metrics__header-name"
                }, "Name"), r.createElement("div", {
                    className: "query-metrics__header-time"
                }, "Started"), r.createElement("div", {
                    className: "query-metrics__header-time"
                }, "Request"), r.createElement("div", {
                    className: "query-metrics__header-time"
                }, "Query")), this.props.queryMetrics.map(function(t) {
                    return e.renderItem(t)
                }))
            }, t.prototype.renderItem = function(e) {
                var t = e.queryID;
                return r.createElement("div", {
                    className: "query-metrics__item",
                    key: t
                }, r.createElement("div", {
                    className: "query-metrics__item-batch"
                }, e.batchID), r.createElement("div", {
                    className: "query-metrics__item-name"
                }, this.renderQueryTitle(e)), r.createElement("div", {
                    className: "query-metrics__item-time"
                }, Math.round(e.relativeStartTime), " ms"), r.createElement("div", {
                    className: "query-metrics__item-time"
                }, e.requestDuration && e.requestDuration.latencyStatus && r.createElement(k, {
                    metric: e.requestDuration
                })), r.createElement("div", {
                    className: "query-metrics__item-time"
                }, r.createElement(k, {
                    metric: e.queryDuration
                })))
            }, t.prototype.renderQueryTitle = function(e) {
                var t = e.variables && e.variables;
                return t && t.id ? r.createElement("span", null, e.operationName, " (id: ", t.id, ")") : r.createElement("span", null, e.operationName)
            }, t
        }(r.Component)),
        N = C,
        T = (n(240), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this;
                return r.createElement("div", {
                    className: "request-latency-metrics"
                }, r.createElement("div", {
                    className: "request-latency-metrics__header"
                }, r.createElement("div", {
                    className: "request-latency-metrics__header-url"
                }, "Url"), r.createElement("div", {
                    className: "request-latency-metrics__header-time"
                }, "Started"), r.createElement("div", {
                    className: "request-latency-metrics__header-size"
                }, "Size"), r.createElement("div", {
                    className: "request-latency-metrics__header-time"
                }, "Time")), this.props.metricsGroup.metrics.map(function(t) {
                    return e.renderItem(t)
                }))
            }, t.prototype.getDisplayLink = function(e) {
                var t = new URL(e),
                    n = t.hostname + t.pathname;
                if (n.length < 24) return n;
                var i = t.pathname.substring(t.pathname.lastIndexOf("/"));
                i || l.i.warn("Failed to parse url", {
                    url: t,
                    fileName: i
                });
                var a = i.split(".");
                return 3 === a.length && (i = a[0] + "." + a[2]), i.length > 24 && (i = i.substring(0, 16) + "..." + i.substring(i.lastIndexOf(".") - 4)), t.hostname + i
            }, t.prototype.renderItem = function(e) {
                var t = e.networkEvent,
                    n = t.request_url + ":" + t.duration + ":" + t.start_time;
                return r.createElement("div", {
                    className: "request-latency-metrics__item",
                    key: n
                }, r.createElement("div", {
                    className: "request-latency-metrics__item-url",
                    title: t.request_url
                }, r.createElement("div", null, this.getDisplayLink(t.request_url))), r.createElement("div", {
                    className: "request-latency-metrics__item-time"
                }, Math.round(e.relativeStartTime), " ms"), r.createElement("div", {
                    className: "request-latency-metrics__item-size"
                }, t.transfer_size && t.transfer_size > 0 ? r.createElement(v, {
                    totalSize: t.transfer_size
                }) : r.createElement("span", null)), r.createElement("div", {
                    className: "request-latency-metrics__item-time"
                }, r.createElement(k, {
                    metric: e.duration
                })))
            }, t
        }(r.Component)),
        D = T,
        I = function() {
            function e() {}
            return e.getComponentStats = function(t) {
                var n = 0,
                    i = 0,
                    a = 0,
                    r = 0;
                e.updateLatencyStatus(t.rootInitDuration, 800), e.updateLatencyStatus(t.pageLoadDuration, 2e3), e.updateLatencyStatus(t.componentDuration, 2e3);
                var o = e.flattenTrackers(t);
                o.forEach(function(t) {
                    e.updateLatencyStatus(t.componentDuration, 400)
                });
                var s = o.map(function(e) {
                    return e.componentDuration.value || 0
                });
                s.length > 0 && (n = s.reduce(function(e, t) {
                    return e + t
                }), i = Math.max.apply(Math, s), r = Math.min.apply(Math, s), a = n / s.length);
                var l = {};
                return o.forEach(function(e) {
                    l[e.componentDuration.latencyStatus] || (l[e.componentDuration.latencyStatus] = 0), l[e.componentDuration.latencyStatus]++
                }), {
                    rootTracker: t,
                    average: e.getLatencyStatus(a, 400),
                    count: e.getLatencyStatus(o.length, 200),
                    max: e.getLatencyStatus(i, 400),
                    min: e.getLatencyStatus(r, 400),
                    countByStatus: l
                }
            }, e.getNetworkStats = function(t) {
                var n = t.networkEvents.filter(function(e) {
                    return e.isPrePageload
                });
                n.forEach(function(t) {
                    e.updateLatencyStatus(t.duration, 150)
                });
                var i = n.map(function(e) {
                        return e.networkEvent.duration
                    }),
                    a = n.map(function(e) {
                        return e.networkEvent.transfer_size || 0
                    }),
                    r = 0,
                    o = 0,
                    s = 0,
                    l = 0,
                    c = 0;
                i.length && (r = i.reduce(function(e, t) {
                    return e + t
                }), o = a.reduce(function(e, t) {
                    return e + t
                }), s = Math.max.apply(Math, i), l = Math.min.apply(Math, i), c = r / i.length), n.sort(function(e, t) {
                    return (t.duration.value || 0) - (e.duration.value || 0)
                });
                var u = {};
                return n.forEach(function(e) {
                    u[e.duration.latencyStatus] || (u[e.duration.latencyStatus] = 0), u[e.duration.latencyStatus]++
                }), {
                    metrics: n,
                    average: e.getLatencyStatus(c, 150),
                    count: e.getLatencyStatus(n.length, 200),
                    max: e.getLatencyStatus(s, 150),
                    min: e.getLatencyStatus(l, 150),
                    totalSize: o,
                    countByStatus: u
                }
            }, e.getQueryBatchStats = function(t) {
                var n = t.queryBatchMetrics,
                    i = n.map(function(e) {
                        return e.slowestQueryInBatch || 0
                    }),
                    a = Math.max.apply(Math, i),
                    r = {
                        batchCount: {
                            value: n.length,
                            latencyStatus: c.a.Unknown
                        },
                        slowestQuery: {
                            value: a,
                            latencyStatus: c.a.Unknown
                        }
                    };
                return e.updateLatencyStatus(r.batchCount, 3), e.updateLatencyStatus(r.slowestQuery, 150), r
            }, e.getQueryStats = function(t) {
                var n = 0,
                    i = 0,
                    a = 0,
                    r = t.queryEvents;
                r.forEach(function(t) {
                    e.updateLatencyStatus(t.requestDuration, 150), e.updateLatencyStatus(t.queryDuration, 150)
                });
                var o = r.map(function(e) {
                    return e.queryDuration.value || 0
                });
                o.length > 0 && (n = o.reduce(function(e, t) {
                    return e + t
                }), i = Math.max.apply(Math, o), a = n / o.length), r.sort(function(e, t) {
                    return (t.queryDuration.value || 0) - (e.queryDuration.value || 0)
                });
                var s = {};
                return r.forEach(function(e) {
                    s[e.queryDuration.latencyStatus] || (s[e.queryDuration.latencyStatus] = 0), s[e.queryDuration.latencyStatus]++
                }), {
                    metrics: r,
                    count: e.getLatencyStatus(r.length, 200),
                    max: e.getLatencyStatus(i, 150),
                    average: e.getLatencyStatus(a, 150),
                    min: e.getLatencyStatus(0, 150),
                    countByStatus: s
                }
            }, e.getLatencyStatus = function(e, t) {
                return void 0 === e ? {
                    value: e,
                    latencyStatus: c.a.Unknown
                } : {
                    value: e,
                    latencyStatus: e > t ? c.a.Fail : c.a.Pass
                }
            }, e.updateLatencyStatus = function(e, t) {
                e && void 0 !== e.value && (e.latencyStatus = e.value > t ? c.a.Fail : c.a.Pass)
            }, e.flattenTrackers = function(t, n) {
                return n || (n = []), t.isRoot || n.push(t), t.children.forEach(function(t) {
                    e.flattenTrackers(t, n)
                }), n
            }, e
        }(),
        O = (n(241), "twilight.perf-hide"),
        L = "twilight.perf-size",
        x = "twilight.perf-tab",
        R = 3,
        F = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.renderTab = function(e, t, i) {
                    var a = n.state.selectedTab === e,
                        s = function() {
                            return n.onClickTab(e)
                        };
                    return r.createElement(o.P, {
                        display: o.H.Flex,
                        alignItems: o.c.Center,
                        padding: .5,
                        margin: {
                            right: 1
                        }
                    }, r.createElement("button", {
                        onClick: s,
                        className: "latency-metrics__button" + (a ? " latency-metrics__button--selected" : "")
                    }, t, i && n.renderTabBubble(i)))
                }, n.renderTabBubble = function(e) {
                    return r.createElement(o.U, {
                        margin: {
                            left: .5
                        }
                    }, r.createElement(o.Z, {
                        label: e.toString(),
                        type: o._0.Notification
                    }))
                }, n.onClickTab = function(e) {
                    l.k.set(x, e), n.setState({
                        selectedTab: e
                    })
                }, n.onLatencyUpdate = function() {
                    var e = I.getComponentStats(n.tracker),
                        t = I.getNetworkStats(n.tracker),
                        i = I.getQueryStats(n.tracker),
                        a = I.getQueryBatchStats(n.tracker),
                        r = n.tracker.getCustomEvents();
                    n.setState({
                        componentStats: e,
                        networkStats: t,
                        queryStats: i,
                        queryBatchStats: a,
                        customEvents: r
                    })
                }, n.onClickWindowSize = function() {
                    var e = n.state.size + 1;
                    e > R && (e = 0), l.k.set(L, e.toString()), n.setState({
                        size: e
                    })
                }, n.onClickClose = function() {
                    n.setState({
                        hidden: !0
                    })
                }, n.tracker = t.benchmarking.getRootLatencyTracker(), n.state = {
                    hidden: l.k.get(O, !1),
                    selectedTab: l.k.get(x, "overview"),
                    size: l.k.get(L, 0),
                    componentStats: I.getComponentStats(n.tracker),
                    networkStats: I.getNetworkStats(n.tracker),
                    queryStats: I.getQueryStats(n.tracker),
                    queryBatchStats: I.getQueryBatchStats(n.tracker),
                    customEvents: n.tracker.getCustomEvents()
                }, n.tracker.subscribeToUpdates(n.onLatencyUpdate), n
            }
            return a.__extends(t, e), t.prototype.componentWillMount = function() {
                var e = this;
                window.addEventListener("keydown", function(t) {
                    t.keyCode === f.a.P && t.shiftKey && e.state.hidden ? (l.k.remove(O), e.setState({
                        hidden: !1
                    })) : t.keyCode === f.a.P && t.shiftKey && !e.state.hidden && (l.k.set(O, !0), e.setState({
                        hidden: !0
                    }))
                })
            }, t.prototype.componentWillUnmount = function() {
                window.removeEventListener("keydown")
            }, t.prototype.render = function() {
                return this.state.hidden ? null : r.createElement(o.U, {
                    className: "latency-metrics theme--dark latency-metrics__size-" + this.state.size,
                    position: o._2.Fixed,
                    padding: {
                        y: 1
                    }
                }, r.createElement(o.U, {
                    className: "latency-metrics__header-container",
                    display: o.H.Flex,
                    flexWrap: o.K.NoWrap,
                    alignItems: o.c.Center,
                    padding: {
                        bottom: 1
                    },
                    margin: {
                        x: 1
                    }
                }, this.renderTab("overview", "Overview"), this.renderTab("components", "Components", this.state.componentStats.countByStatus[c.a.Fail]), this.renderTab("queries", "Queries", this.state.queryStats.countByStatus[c.a.Fail]), this.renderTab("requests", "Requests", this.state.networkStats.countByStatus[c.a.Fail]), r.createElement("div", {
                    className: "latency-metrics__controls"
                }, r.createElement(o.v, {
                    onClick: this.onClickWindowSize,
                    icon: o._9.Maximize,
                    size: o.x.Small,
                    overlay: !0,
                    ariaLabel: "Change Size"
                }), r.createElement(o.v, {
                    onClick: this.onClickClose,
                    icon: o._9.Close,
                    size: o.x.Small,
                    overlay: !0,
                    ariaLabel: "Close"
                }))), r.createElement(o.U, {
                    className: "latency-metrics__body",
                    display: o.H.Flex,
                    flexDirection: o.J.Column,
                    flexGrow: 1,
                    fullHeight: !0,
                    overflow: o.Y.Hidden
                }, "overview" === this.state.selectedTab && this.renderOverviewTab(), "components" === this.state.selectedTab && this.renderComponentsTab(), "queries" === this.state.selectedTab && this.renderQueriesTab(), "requests" === this.state.selectedTab && this.renderRequestsTab()), r.createElement("div", {
                    className: "latency-metrics__footer"
                }, r.createElement("span", {
                    className: "latency-metrics__hint-text"
                }, 'Press "Shift + P" to toggle latency metrics')))
            }, t.prototype.renderOverviewTab = function() {
                var e = this,
                    t = this.state.networkStats,
                    n = this.state.queryStats,
                    i = this.state.queryBatchStats,
                    a = this.state.componentStats;
                return r.createElement(g.b, {
                    className: "latency-metrics__scroller"
                }, r.createElement(o.U, null, r.createElement("div", {
                    className: "latency-metrics__item flex justify-content-between flex-nowrap "
                }, r.createElement("div", {
                    className: "latency-metrics__item-left ellipsis latency-metrics__item-name"
                }, r.createElement("span", null, "Initialize")), r.createElement("div", {
                    className: "latency-metrics__item-right flex-shrink-0 flex flex-nowrap"
                }, r.createElement("div", {
                    className: "latency-metrics__item-number"
                }, this.tracker.isFirstLoad ? r.createElement(k, {
                    metric: this.tracker.rootInitDuration
                }) : r.createElement("span", null, "n/a")))), r.createElement("div", {
                    className: "latency-metrics__item flex justify-content-between flex-nowrap "
                }, r.createElement("div", {
                    className: "latency-metrics__item-left ellipsis latency-metrics__item-name"
                }, r.createElement("span", null, this.tracker.isFirstLoad ? "Page Load" : "App Transition")), r.createElement("div", {
                    className: "latency-metrics__item-number"
                }, r.createElement(k, {
                    metric: this.tracker.pageLoadDuration
                }))), r.createElement("div", {
                    className: "latency-metrics__item flex justify-content-between flex-nowrap "
                }, r.createElement("div", {
                    className: "latency-metrics__item-left ellipsis latency-metrics__item-name"
                }, r.createElement("span", null, "Components (", a.count.value, ")")), r.createElement("div", {
                    className: "latency-metrics__item-number"
                }, r.createElement("span", {
                    className: "latency-metrics__item-stats"
                }, r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, "Slowest:"), r.createElement(k, {
                    metric: a.max
                }), r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, "Average:"), r.createElement(k, {
                    metric: a.average
                })))), r.createElement("div", {
                    className: "latency-metrics__item flex justify-content-between flex-nowrap "
                }, r.createElement("div", {
                    className: "latency-metrics__item-left ellipsis latency-metrics__item-name"
                }, r.createElement("span", null, "Queries (", n.count.value, ")")), r.createElement("div", {
                    className: "latency-metrics__item-number"
                }, r.createElement("span", {
                    className: "latency-metrics__item-stats"
                }, r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, "Batches:"), r.createElement(E, {
                    metric: i.batchCount
                }), r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, "Slowest:"), r.createElement(k, {
                    metric: n.max
                }), r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, "Average:"), r.createElement(k, {
                    metric: n.average
                })))), r.createElement("div", {
                    className: "latency-metrics__item flex justify-content-between flex-nowrap "
                }, r.createElement("div", {
                    className: "latency-metrics__item-left ellipsis latency-metrics__item-name"
                }, r.createElement("span", null, "Requests (", t.count.value, ")")), r.createElement("div", {
                    className: "latency-metrics__item-number"
                }, r.createElement("span", {
                    className: "latency-metrics__item-stats"
                }, r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, "Slowest:"), r.createElement(k, {
                    metric: t.max
                }), r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, "Average:"), r.createElement(k, {
                    metric: t.average
                }), r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, "Size:"), " ", r.createElement(v, {
                    totalSize: t.totalSize
                })))), Object.keys(this.state.customEvents).map(function(t) {
                    return e.renderCustomEventGroup(t, e.state.customEvents[t])
                })))
            }, t.prototype.renderCustomEventGroup = function(e, t) {
                var n = this;
                return r.createElement("div", {
                    key: e,
                    className: "latency-metrics__item flex justify-content-between flex-nowrap "
                }, r.createElement("div", {
                    className: "latency-metrics__item-left ellipsis latency-metrics__item-name"
                }, r.createElement("span", null, e)), r.createElement("div", {
                    className: "latency-metrics__item-number"
                }, t.map(function(e) {
                    return n.renderCustomEvent(e)
                })))
            }, t.prototype.renderCustomEvent = function(e) {
                return r.createElement("span", {
                    key: e.key
                }, r.createElement("span", {
                    className: "latency-metrics__item-stats-label"
                }, e.label, ":"), " ", r.createElement(k, {
                    metric: e.duration
                }))
            }, t.prototype.renderComponentsTab = function() {
                return r.createElement(g.b, {
                    className: "latency-metrics__scroller"
                }, r.createElement(_, {
                    tracker: this.tracker
                }))
            }, t.prototype.renderRequestsTab = function() {
                return r.createElement(g.b, {
                    className: "latency-metrics__scroller"
                }, r.createElement(D, {
                    metricsGroup: this.state.networkStats
                }))
            }, t.prototype.renderQueriesTab = function() {
                return r.createElement(g.b, {
                    className: "latency-metrics__scroller"
                }, r.createElement(N, {
                    queryMetrics: this.tracker.queryEvents
                }))
            }, t
        }(r.Component),
        U = F;
    n.d(t, "a", function() {
        return p
    }), n.d(t, !1, function() {
        return h
    }), n.d(t, "b", function() {
        return U
    }), n.d(t, "c", function() {
        return i
    })
}, , function(e, t, n) {
    "use strict";

    function i(e, t) {
        return function(n) {
            return Object(a.graphql)(e, t)(n)
        }
    }
    var a = n(31);
    n.d(t, "a", function() {
        return i
    })
}, , , , , function(e, t, n) {
    "use strict";
    var i = n(174);
    n.d(t, "Spade", function() {
        return i.a
    });
    var a = n(59);
    n.o(a, "PageviewContent") && n.d(t, "PageviewContent", function() {
        return a.PageviewContent
    }), n.o(a, "PageviewDirectoryContentType") && n.d(t, "PageviewDirectoryContentType", function() {
        return a.PageviewDirectoryContentType
    }), n.o(a, "PageviewFollowingTab") && n.d(t, "PageviewFollowingTab", function() {
        return a.PageviewFollowingTab
    }), n.o(a, "PageviewLocation") && n.d(t, "PageviewLocation", function() {
        return a.PageviewLocation
    }), n.o(a, "PageviewMedium") && n.d(t, "PageviewMedium", function() {
        return a.PageviewMedium
    }), n.o(a, "ShareItemContext") && n.d(t, "ShareItemContext", function() {
        return a.ShareItemContext
    }), n.o(a, "ShareItemSourceItemType") && n.d(t, "ShareItemSourceItemType", function() {
        return a.ShareItemSourceItemType
    }), n.o(a, "ShareItemType") && n.d(t, "ShareItemType", function() {
        return a.ShareItemType
    }), n.o(a, "SpadeEventType") && n.d(t, "SpadeEventType", function() {
        return a.SpadeEventType
    }), n.o(a, "SpadeFollowingCategory") && n.d(t, "SpadeFollowingCategory", function() {
        return a.SpadeFollowingCategory
    }), n.o(a, "SpadeVideoBroadcastType") && n.d(t, "SpadeVideoBroadcastType", function() {
        return a.SpadeVideoBroadcastType
    }), n.o(a, "TwitchDataType") && n.d(t, "TwitchDataType", function() {
        return a.TwitchDataType
    })
}, , , , function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e[e.Dev = 1] = "Dev", e[e.Production = 2] = "Production"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        switch (void 0 === e && (e = p()), t.type) {
            case d.a:
                return c.__assign({}, e, {
                    authInitialized: !0,
                    user: t.user
                });
            case d.d:
                return c.__assign({}, e, {
                    languageInitialized: !0,
                    languageCode: t.languageCode,
                    locale: t.locale
                });
            case d.b:
                return c.__assign({}, e, {
                    firstPageLoaded: !0
                });
            case d.c:
                return c.__assign({}, e, {
                    initialUserAvailabilityIsSet: !0
                });
            default:
                return e
        }
    }

    function a(e) {
        return e.session.authInitialized && e.session.languageInitialized
    }

    function r(e) {
        return !!e.session.user
    }

    function o(e) {
        return e.session.user
    }

    function s(e) {
        return e.session.user && e.session.user.authToken
    }

    function l(e) {
        return e.session.user && e.session.user.legacyCSRFToken
    }
    t.e = a, t.d = r, t.c = o, t.a = s, t.b = l;
    var c = n(0),
        u = n(2),
        d = n(53),
        p = function() {
            return {
                authInitialized: !1,
                initialUserAvailabilityIsSet: !1,
                languageCode: "en",
                locale: "en-US",
                languageInitialized: !1,
                firstPageLoaded: !!u.a.embedded
            }
        };
    u.n.store.registerReducer("session", i)
}, function(e, t, n) {
    "use strict";

    function i() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
            var t = 16 * Math.random() | 0;
            return ("x" === e ? t : 3 & t | 8).toString(16)
        })
    }

    function a() {
        return "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".replace(/[xy]/g, function(e) {
            var t = 16 * Math.random() | 0;
            return ("x" === e ? t : 3 & t | 8).toString(16)
        })
    }
    t.a = i, t.b = a
}, , , function(e, t, n) {
    "use strict";

    function i(e, t) {
        var n = new Set(e.map(function(e) {
            return e.node.id
        }));
        return e.concat(t.filter(function(e) {
            return !n.has(e.node.id)
        }))
    }

    function a(e) {
        return {
            variables: {
                input: e
            }
        }
    }

    function r(e, t, n, i) {
        void 0 === t && (t = {});
        try {
            var a = l.n.apollo.client.readQuery({
                query: e,
                variables: t
            });
            if (i && i(a)) return;
            var r = s(a, function(e) {
                return e
            }, function(e) {
                return n(e)
            });
            l.n.apollo.client.writeQuery({
                query: e,
                variables: t,
                data: r
            })
        } catch (e) {
            l.i.warn("Failed writing updated query to Apollo", e)
        }
    }

    function o(e) {
        try {
            var t = e.id,
                n = e.fragment,
                i = e.mutator,
                a = l.n.apollo.client.readFragment({
                    id: t,
                    fragment: n
                }),
                r = s(a, function(e) {
                    return e
                }, function(e) {
                    return i(e)
                });
            l.n.apollo.client.writeFragment({
                fragment: n,
                id: t,
                data: r
            })
        } catch (e) {
            l.i.warn("Failed writing updated query to Apollo", e)
        }
    }
    t.b = i, t.a = a, t.d = r, t.c = o;
    var s = n(137),
        l = (n.n(s), n(2))
}, , function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e[e.Unknown = 0] = "Unknown", e[e.Pass = 1] = "Pass", e[e.Fail = 2] = "Fail"
    }(i || (i = {}))
}, , , , , function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            sideNavExpanded: e.ui.sideNavExpanded
        }
    }
    var a = n(69),
        r = n(113),
        o = n(6),
        s = n(0),
        l = n(14),
        c = n(1),
        u = n(2),
        d = n(3),
        p = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.getStyles = function() {
                    var e = n.state,
                        t = e.anchoredBottom,
                        i = e.anchoredTop,
                        a = e.top,
                        r = e.width,
                        o = t || i,
                        s = "absolute";
                    return window.outerWidth < (n.props.disableStickinessBelowWidth || 0) ? (s = "inherit", o = !1) : o && (s = "fixed"), {
                        position: s,
                        top: i ? "inherit" : a,
                        width: o ? r : "inherit"
                    }
                }, n.lockBottom = function(e) {
                    n.setState({
                        anchoredBottom: !0,
                        top: window.innerHeight - e,
                        width: n.element.getBoundingClientRect().width
                    })
                }, n.lockTop = function() {
                    n.setState({
                        anchoredTop: !0,
                        width: n.element.getBoundingClientRect().width
                    })
                }, n.resizeStickyColumn = function() {
                    n.unlock(n.state.lastOffset || 0), n.checkBounding(!0, 0)
                }, n.setRef = function(e) {
                    return n.element = e
                }, n.state = {
                    anchoredBottom: !1,
                    anchoredTop: !1,
                    lastOffset: void 0,
                    offsetTop: void 0,
                    top: void 0,
                    width: void 0
                }, n
            }
            return s.__extends(t, e), t.prototype.componentDidMount = function() {
                var e = this.element.getBoundingClientRect();
                this.setState({
                    offsetTop: e.top
                });
                var t = this.context.registerReceiver;
                if (!t) return void u.i.warn("<StickyContainer /> initialized missing a <ScrollableArea /> provider");
                this.unregister = t(this)
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.props.sideNavExpanded !== e.sideNavExpanded && this.resizeStickyColumn()
            }, t.prototype.componentWillUnmount = function() {
                this.unregister && this.unregister()
            }, t.prototype.render = function() {
                return c.createElement(d.U, {
                    position: d._2.Relative,
                    fullWidth: !0
                }, c.createElement("div", {
                    className: "sticky-container",
                    ref: this.setRef,
                    style: this.getStyles()
                }, this.props.children))
            }, t.prototype.checkVisible = function(e, t) {
                return s.__awaiter(this, void 0, void 0, function() {
                    var e, n, i, r, o;
                    return s.__generator(this, function(s) {
                        return !t || t.type !== a.a.Resize && t.type !== a.a.Wheel && t.type !== a.a.Scroll || (e = this.state.anchoredBottom || this.state.anchoredTop, n = t.offset >= (this.state.lastOffset || 0), t.type === a.a.Resize ? (this.unlock(t.offset), this.checkBounding(n, t.offset)) : t.wheelEvent && t.type === a.a.Wheel && e ? (i = t.wheelEvent, r = void 0, r = 0 === i.deltaMode ? i.deltaY || i.wheelDelta : 16 * i.deltaY, o = r + t.offset, this.context.yScrollTo(o), this.checkBounding(r > 0, t.offset)) : t.type !== a.a.Scroll || t.offset === this.state.lastOffset || e || this.checkBounding(n, t.offset)), [2]
                    })
                })
            }, t.prototype.checkBounding = function(e, t) {
                e && this.state.anchoredTop && this.unlock(t), !e && this.state.anchoredBottom && this.unlock(t), this.state.anchoredBottom || this.state.anchoredTop || this.shouldLock(e), this.setState({
                    lastOffset: t
                })
            }, t.prototype.shouldLock = function(e) {
                var t = this.element.getBoundingClientRect(),
                    n = this.state.offsetTop || 0;
                if (t.height < window.innerHeight - n) return void this.lockTop();
                var i = t.top < n,
                    a = t.top >= window.innerHeight,
                    r = t.bottom < n,
                    o = t.bottom + (this.props.bottomPixelThreshold || 0) >= window.innerHeight,
                    s = !a && !i,
                    l = !o && !r;
                !s && !l || s && l || (!e && s && this.lockTop(), e && l && this.lockBottom(t.height + (this.props.bottomPixelThreshold || 0))), i && r && this.lockBottom(t.height + (this.props.bottomPixelThreshold || 0)), a && o && this.lockTop()
            }, t.prototype.unlock = function(e) {
                var t, n = this.state,
                    i = n.offsetTop,
                    a = n.width,
                    r = this.element.getBoundingClientRect(),
                    o = window.innerHeight - (i || 0),
                    s = a;
                t = "inherit", r.height <= o ? s = "inherit" : this.state.anchoredTop ? t = e : this.state.anchoredBottom && (t = e - r.height + o - (this.props.bottomPixelThreshold || 0)), this.setState({
                    top: t,
                    width: s,
                    anchoredBottom: !1,
                    anchoredTop: !1
                })
            }, t.contextTypes = {
                registerReceiver: l.func,
                yScrollTo: l.func
            }, t
        }(c.Component),
        m = Object(o.a)(i)(p);
    n.d(t, "b", function() {
        return a.b
    }), n.d(t, "a", function() {
        return r.a
    }), n.d(t, "c", function() {
        return m
    })
}, , function(e, t, n) {
    "use strict";

    function i(e) {
        return k.d.ImageUpload + "." + e
    }

    function a(e) {
        return k.d.UploadService + "." + e
    }

    function r(e) {
        return k.d.VideoPlaybackById + "." + e
    }

    function o(e) {
        return k.d.Presence + "." + e
    }

    function s(e, t) {
        return k.d.ModerationActionsByUserAndChannel + "." + e + "." + t
    }

    function l(e) {
        return k.d.Raid + "." + e
    }

    function c(e) {
        return k.d.Friendship + "." + e
    }

    function u(e) {
        return k.d.ChannelBitsPinEvents + "." + e
    }

    function d(e) {
        return k.d.UserSubscribeEvents + "." + e
    }

    function p(e) {
        return k.d.UserCrateEvents + "." + e
    }

    function m(e) {
        return k.d.UserCommerceEvents + "." + e
    }

    function h(e) {
        return k.d.Whispers + "." + e
    }

    function g(e) {
        return k.d.OnsiteNotifications + "." + e
    }

    function f(e) {
        return k.d.StreamChatRoom + "." + e
    }

    function v(e) {
        return y.j.subscribe({
            topic: e.topic,
            onMessage: function(t) {
                t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(S.d)(e.query, e.variables, function(n) {
                    return e.mutator(t, n)
                }, function(n) {
                    return !!e.skipMessage && e.skipMessage(t, n)
                })
            }
        })
    }

    function b(e) {
        return y.j.subscribe({
            topic: e.topic,
            onMessage: function(t) {
                t.type && t.type !== e.type || Object(S.c)({
                    fragment: e.fragment,
                    id: e.id,
                    mutator: function(n) {
                        return e.mutator(t, n)
                    }
                })
            }
        })
    }
    t.c = i, t.k = a, t.o = r, t.f = o, t.d = s, t.g = l, t.b = c, t.a = u, t.n = d, t.m = p, t.l = m, t.p = h, t.e = g, t.h = f, t.j = v, t.i = b;
    var y = n(2),
        k = n(39),
        S = n(21)
}, , function(e, t, n) {
    "use strict";

    function i(e) {
        var t = {
                next: window.location.href,
                nonce: Object(S.b)()
            },
            n = {
                client_id: f.a.authClientID,
                embed: "true",
                force_login: "true",
                lang: f.n.intl.getLanguageCode() || "en",
                login_type: e,
                redirect_uri: f.a.passportRedirectURI,
                response_type: "token",
                scope: f.a.passportScopes.join(" "),
                state: JSON.stringify(t)
            };
        return Object(w.g)(t), Object(_.a)(f.a.passportAuthURL, n)
    }

    function a(e) {
        return Object(I.d)(D, {
            action: e,
            initialTab: h.Login
        })
    }

    function r(e) {
        return Object(I.d)(D, {
            action: e,
            initialTab: h.Signup
        })
    }

    function o() {
        var e = this;
        return function(t, n) {
            return g.__awaiter(e, void 0, void 0, function() {
                var e, t, i, a, r, o, s, l;
                return g.__generator(this, function(c) {
                    switch (c.label) {
                        case 0:
                            if (e = f.n.logger.withCategory("auth.logout"), t = n(), !(i = Object(L.a)(t))) return e.warn("Attempted to log out without being logged in."), [2];
                            if (a = Object(L.b)(t)) return [3, 4];
                            c.label = 1;
                        case 1:
                            return c.trys.push([1, 3, , 4]), e.debug("No legacy CSRF token found, making blank request to get one."), [4, fetch("https://passport.twitch.tv/logout/new", {
                                credentials: "include",
                                method: "POST",
                                mode: "no-cors"
                            })];
                        case 2:
                            return c.sent(), a = Object(w.b)(), [3, 4];
                        case 3:
                            return r = c.sent(), e.warn("Failed to acquire legacy CSRF token.", {
                                err: r
                            }), [3, 4];
                        case 4:
                            return a ? [4, m(a, e)] : [3, 11];
                        case 5:
                            return o = c.sent(), o && o.authToken !== i ? [4, p(o.authToken, e)] : [3, 7];
                        case 6:
                            c.sent(), c.label = 7;
                        case 7:
                            return c.trys.push([7, 9, , 10]), e.debug("Invalidating passport session."), s = new FormData, s.append("api_token", a), [4, fetch("https://passport.twitch.tv/logout/new", {
                                body: s,
                                credentials: "include",
                                method: "POST",
                                mode: "no-cors"
                            })];
                        case 8:
                            return c.sent(), [3, 10];
                        case 9:
                            return l = c.sent(), e.error(l, "Failed to invalidate passport session."), [3, 10];
                        case 10:
                            return [3, 12];
                        case 11:
                            e.debug("Skipping legacy OAuth token revocation and passport session invalidation: No legacy CSRF token found."), c.label = 12;
                        case 12:
                            return [4, p(i, e)];
                        case 13:
                            return c.sent(), e.debug("Clearing auth cookies and reloading."), Object(w.e)(), window.location.reload(), [2]
                    }
                })
            })
        }
    }

    function s() {
        return function(e) {
            f.n.apollo.authToken = null, e(Object(O.e)(null))
        }
    }

    function l(e) {
        return function(t) {
            f.n.apollo.authToken = e.authToken, t(Object(O.e)(e))
        }
    }

    function c(e, t, n) {
        var i = this;
        return void 0 === n && (n = !0),
            function(a) {
                return g.__awaiter(i, void 0, void 0, function() {
                    var i, r, o, l;
                    return g.__generator(this, function(c) {
                        switch (c.label) {
                            case 0:
                                i = f.n.logger.withCategory("auth.init.token"), i.debug("Getting user data from GraphQL."), f.n.apollo.authToken = e, c.label = 1;
                            case 1:
                                return c.trys.push([1, 3, , 4]), [4, f.n.apollo.client.query({
                                    fetchPolicy: "network-only",
                                    query: R
                                })];
                            case 2:
                                return r = c.sent(), r.data.currentUser ? (o = {
                                    authToken: e,
                                    displayName: r.data.currentUser.displayName,
                                    id: r.data.currentUser.id,
                                    legacyCSRFToken: t,
                                    login: r.data.currentUser.login,
                                    roles: {
                                        isStaff: !!r.data.currentUser.roles && r.data.currentUser.roles.isStaff
                                    }
                                }, n && Object(w.h)(o), a(Object(O.e)(o)), [3, 4]) : (i.error(new Error("Failed to get user data from GraphQL, but there was no client error."), "Failed to get user data from GraphQL, but there was no client error."), a(s()), [2]);
                            case 3:
                                return l = c.sent(), i.error(l, "Failed to get user data from GraphQL."), a(s()), [3, 4];
                            case 4:
                                return [2]
                        }
                    })
                })
            }
    }

    function u(e) {
        var t = this;
        return function(n) {
            return g.__awaiter(t, void 0, void 0, function() {
                var t;
                return g.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, m(e, f.n.logger.withCategory("auth.init.legacy"))];
                        case 1:
                            return t = i.sent(), t ? (f.n.apollo.authToken = t.authToken, Object(w.h)(t), n(Object(O.e)(t))) : n(s()), [2]
                    }
                })
            })
        }
    }

    function d(e) {
        var t = this;
        return function(n) {
            return g.__awaiter(t, void 0, void 0, function() {
                var t, i;
                return g.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            return [4, f.n.intl.loadLocale(e ? [e].concat(Object(x.b)({
                                includeChosenLanguage: !1
                            })) : Object(x.b)())];
                        case 1:
                            return a.sent(), t = f.n.intl.getLanguageCode() || "en", i = f.a.locales.find(function(e) {
                                return e.languageCode === t
                            }), i || (f.n.logger.warn("Tried to use invalid language code, using default.", t), i = f.a.locales.find(function(e) {
                                return !!e.default
                            })), n(Object(O.h)(i.languageCode, i.locale)), [2]
                    }
                })
            })
        }
    }

    function p(e, t) {
        return g.__awaiter(this, void 0, void 0, function() {
            var n, i, a, r, o, s, l, c, u, d, p, m;
            return g.__generator(this, function(h) {
                switch (h.label) {
                    case 0:
                        return h.trys.push([0, 8, , 9]), t.debug("Getting OAuth client ID for token."), [4, fetch(f.a.apiBaseURL + "/kraken", {
                            method: "GET",
                            headers: {
                                authorization: "OAuth " + e
                            }
                        })];
                    case 1:
                        return n = h.sent(), 200 === n.status ? [3, 3] : (a = (i = t).warn, r = ["Got a " + n.status + " status response while getting OAuth client ID."], o = {}, [4, n.text()]);
                    case 2:
                        throw a.apply(i, r.concat([(o.body = h.sent(), o.status = n.status, o)])), new Error("Failed to get OAuth client ID: " + n.status + " status response.");
                    case 3:
                        return [4, n.json()];
                    case 4:
                        return (s = h.sent()) && s.token && s.token.client_id ? [3, 6] : (c = (l = t).warn, u = ["Received a malformed response while getting OAuth client ID."], d = {}, [4, n.text()]);
                    case 5:
                        throw c.apply(l, u.concat([(d.body = h.sent(), d)])), new Error("Failed to get OAuth client ID: Malformed response.");
                    case 6:
                        return t.debug("Revoking OAuth token.", {
                            clientID: s.token.client_id
                        }), p = new FormData, p.append("client_id", s.token.client_id), p.append("token", e), [4, fetch(f.a.apiBaseURL + "/kraken/oauth2/revoke", {
                            body: p,
                            method: "POST",
                            mode: "no-cors"
                        })];
                    case 7:
                        return h.sent(), [3, 9];
                    case 8:
                        return m = h.sent(), t.error(m, "Failed to revoke OAuth token."), [3, 9];
                    case 9:
                        return [2]
                }
            })
        })
    }

    function m(e, t) {
        return g.__awaiter(this, void 0, void 0, function() {
            var n, i, a, r;
            return g.__generator(this, function(o) {
                switch (o.label) {
                    case 0:
                        t.debug("Getting user data from legacy API.", {
                            legacyCSRFToken: e
                        }), o.label = 1;
                    case 1:
                        return o.trys.push([1, 4, , 5]), [4, fetch("https://api.twitch.tv/api/me?on_site=1", {
                            method: "GET",
                            headers: {
                                "client-id": f.a.authClientID,
                                "twitch-api-token": e
                            },
                            credentials: "include"
                        })];
                    case 2:
                        return n = o.sent(), [4, n.json()];
                    case 3:
                        return i = o.sent(), 200 !== n.status || i.error ? (t.error(new Error("Error getting user data from legacy API."), "Error getting user data from legacy API.", {
                            body: i,
                            legacyCSRFToken: e,
                            status: n.status
                        }), [2]) : (a = {
                            authToken: i.chat_oauth_token,
                            displayName: i.name,
                            id: i.id.toString(),
                            legacyCSRFToken: e,
                            login: i.login,
                            roles: {
                                isStaff: i.is_staff
                            }
                        }, [2, a]);
                    case 4:
                        return r = o.sent(), t.error(r, "Error getting user data from legacy API.", {
                            legacyCSRFToken: e
                        }), [3, 5];
                    case 5:
                        return [2]
                }
            })
        })
    }
    var h, g = n(0),
        f = n(2),
        v = n(1),
        b = n(104),
        y = n(67);
    ! function(e) {
        e.Login = "login", e.Signup = "signup"
    }(h || (h = {}));
    var k;
    ! function(e) {
        e.Height = "height", e.Loaded = "loaded", e.KrakenCallback = "krakenCallback", e.PassportCallback = "passportCallback", e.Heartbeat = "heartbeat"
    }(k || (k = {}));
    var S = n(18),
        _ = n(88),
        w = n(45),
        E = n(48),
        C = n(12),
        N = n(3),
        T = (n(232), 5e3),
        D = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.frameLoadStart = 0, n.lastHeartbeart = 0, n.heartBeatCheckInterval = 0, n.logger = f.n.logger.withCategory("passport-modal"), n.nonce = Object(E.b)(), n.passportHosts = f.b.get("passport_hosts", []), n.handleMessage = function(e) {
                    if (n.logger.debug("Received a Passport frame message", e), window && document && n.passportHosts.includes(e.origin) && e.data) {
                        var t = {
                            messageType: null
                        };
                        if ("string" == typeof e.data && e.data.startsWith("{")) try {
                            t = JSON.parse(e.data)
                        } catch (e) {
                            return void n.logger.warn("Unable to parse Passport IFrame message", e)
                        } else {
                            if ("object" != typeof e.data) return void n.logger.warn("The Passport IFrame message was not a string or an object");
                            t = e.data
                        }
                        if (!t.messageType) return void n.logger.warn("The Passport IFrame message did not have a messageType");
                        switch (t.messageType) {
                            case k.Loaded:
                                return n.frameRef ? void n.frameRef.contentWindow.postMessage(JSON.stringify({
                                    width: "100%"
                                }), "*") : (n.logger.error(new Error("Passport IFrame Ref Missing"), "Received a loaded message from Passport but had no ref to the IFrame"), void n.setState({
                                    hasError: !0
                                }));
                            case k.Height:
                                var i = t;
                                return i.height ? void n.setState({
                                    height: i.height
                                }) : (n.logger.error(new Error("Invalid Passport Height Message"), "The Passport IFrame height message type had an invalid height"), void n.setState({
                                    hasError: !0
                                }));
                            case k.KrakenCallback:
                            case k.PassportCallback:
                                var a = t;
                                return a.redirectURI ? void window.location.assign(a.redirectURI) : (n.setState({
                                    hasError: !0
                                }), void n.logger.error(new Error("Invalid Passport Redirect Message"), "The Passport IFrame redirect message type had an invalid redirectURI"));
                            case k.Heartbeat:
                                return void(n.lastHeartbeart = Date.now());
                            default:
                                return
                        }
                    }
                }, n.onClickTryAgain = function() {
                    n.setState({
                        isLoading: !0,
                        hasError: !1,
                        height: 0
                    }, function() {
                        return n.frameLoadStart = Date.now()
                    })
                }, n.onFrameError = function() {
                    n.logger.error(new Error("Unable to load Passport IFrame"), "The IFrame called its onError handler."), n.state.hasError || n.setState({
                        hasError: !0,
                        isLoading: !1
                    })
                }, n.onFrameLoad = function() {
                    n.state.isLoading && n.setState({
                        isLoading: !1
                    }, function() {
                        var e = Date.now() - n.frameLoadStart;
                        e > T && n.logger.warn("The Passport IFrame took a long time to load.", {
                            duration: e
                        })
                    })
                }, n.renderContent = function() {
                    if (n.state.hasError) {
                        var e = Object(f.d)("Try Again", "PassportModal");
                        return v.createElement(N.U, {
                            fullHeight: !0,
                            flexDirection: N.J.Column,
                            display: N.H.Flex,
                            alignItems: N.c.Center,
                            justifyContent: N.T.Center
                        }, v.createElement(y.a, {
                            inline: !0,
                            key: "error",
                            message: Object(f.d)("Something went wrong", "PassportModal")
                        }), v.createElement(N.u, {
                            key: "try-again",
                            ariaLabel: e,
                            onClick: n.onClickTryAgain
                        }, e))
                    }
                    return v.createElement("iframe", {
                        height: n.state.height,
                        ref: n.setFrameRef,
                        onLoad: n.onFrameLoad,
                        onError: n.onFrameError,
                        scrolling: "no",
                        src: n.state.url,
                        width: "100%",
                        name: "passport"
                    })
                }, n.setFrameRef = function(e) {
                    return n.frameRef = e
                }, n.state = {
                    height: 0,
                    hasError: !1,
                    isLoading: !0,
                    url: i(n.props.initialTab)
                }, n
            }
            return g.__extends(t, e), t.prototype.componentWillMount = function() {
                window.addEventListener("message", this.handleMessage)
            }, t.prototype.componentDidMount = function() {
                var e = this;
                this.frameLoadStart = Date.now(), this.heartBeatCheckInterval = setInterval(function() {
                    e.lastHeartbeart && Date.now() - e.lastHeartbeart > 15e3 && (e.logger.error(new Error("Passport Heartbeat Timeout"), "Client did not receive a Passport heartbeat within the timeout.", {
                        heartbeatTimeout: 15e3
                    }), clearInterval(e.heartBeatCheckInterval))
                }, 1e3), Object(E.c)(C.SpadeEventType.PassportShow, {
                    action: this.props.action,
                    nonce: this.nonce,
                    type: this.props.initialTab
                })
            }, t.prototype.componentWillUnmount = function() {
                window.removeEventListener("message", this.handleMessage), clearInterval(this.heartBeatCheckInterval), Object(E.c)(C.SpadeEventType.PassportHide, {
                    action: this.props.action,
                    nonce: this.nonce,
                    type: this.props.initialTab
                })
            }, t.prototype.render = function() {
                return v.createElement(N.U, {
                    padding: {
                        top: 4,
                        bottom: 2,
                        x: 2
                    },
                    className: "passport-modal",
                    position: N._2.Relative
                }, this.renderContent(), this.state.isLoading && !this.state.hasError && v.createElement(N._17, {
                    background: N.m.Base,
                    position: N._2.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    attachRight: !0,
                    attachTop: !0
                }, v.createElement(N.X, {
                    fillContent: !0
                })), v.createElement(b.a, {
                    closeOnBackdropClick: !0
                }))
            }, t
        }(v.Component),
        I = n(38),
        O = n(53),
        L = n(17),
        x = n(72),
        R = n(233);
    t.f = a, t.h = r, t.g = o, t.a = s, t.d = l, t.c = c, t.b = u, t.e = d
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e[e.Light = 0] = "Light", e[e.Dark = 1] = "Dark"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";

    function i() {
        return l.k.get(u, r())
    }

    function a(e) {
        l.k.set(u, e)
    }

    function r() {
        var e = l.k.get(d, {
            activeTheme: ""
        });
        return e && "theme--dark" === e.activeTheme ? c.a.Dark : c.a.Light
    }

    function o(e) {
        switch (e) {
            case c.a.Dark:
                return "theme--dark";
            default:
                return ""
        }
    }

    function s(e) {
        return e === c.a.Light ? "theme--light" : o(e)
    }
    t.b = i, t.d = a, t.c = o, t.a = s;
    var l = n(2),
        c = n(33),
        u = "twilight.theme",
        d = "storage:theme"
}, , , , function(e, t, n) {
    "use strict";

    function i(e, t) {
        return {
            type: r,
            modalComponent: e,
            modalProps: t
        }
    }

    function a() {
        return {
            type: o
        }
    }
    n.d(t, "b", function() {
        return r
    }), t.d = i, n.d(t, "a", function() {
        return o
    }), t.c = a;
    var r = "core.modal.MODAL_SHOWN",
        o = "core.ui.MODAL_CLOSED"
}, function(e, t, n) {
    "use strict";
    n.d(t, "d", function() {
        return a
    }), n.d(t, "c", function() {
        return r
    }), n.d(t, "a", function() {
        return o
    }), n.d(t, "b", function() {
        return i
    }), n.d(t, "e", function() {
        return s
    });
    var i, a = {
            ChannelBitsEvents: "channel-bits-events-v1",
            ChannelBitsPinEvents: "channel-bit-events-public",
            ChannelSubscribeEvents: "channel-subscribe-events-v1",
            Friendship: "friendship",
            ImageUpload: "user-image-update",
            ModerationActionsByUserAndChannel: "chat_moderator_actions",
            OnsiteNotifications: "onsite-notifications",
            Presence: "presence",
            Raid: "raid",
            StreamChange: "stream-change-v1",
            StreamChatRoom: "stream-chat-room-v1",
            UploadService: "upload",
            UserCommerceEvents: "user-commerce-events",
            UserCrateEvents: "user-crate-events-v1",
            UserSubscribeEvents: "user-subscribe-events-v1",
            VideoPlayback: "video-playback",
            VideoPlaybackById: "video-playback-by-id",
            Whispers: "whispers"
        },
        r = {
            BitsPinEvent: "bits-pin-event",
            ChatNotification: "chat-notification",
            ImageUploadSuccess: "imageuploadsuccess",
            ModerationAction: "moderation_action",
            OnsiteNotificationCreate: "create-notification",
            OnsiteNotificationDelete: "delete-notification",
            OnsiteNotificationsRead: "read-notifications",
            OnsiteNotificationSummaryUpdate: "update-summary",
            OnsiteNotificationUpdate: "update-notification",
            Presence: "presence",
            PresenceSettings: "settings",
            RaidCancel: "raid_cancel",
            RaidUpdate: "raid_update",
            StreamChatRoomChatRichEmbed: "chat_rich_embed",
            StreamDown: "stream_down",
            StreamUp: "stream_up",
            UploadService: "upload",
            UserCrateEvent: "crate-event",
            ViewCount: "viewcount",
            Vodcast: "watchparty-vod",
            WhisperAllThreadsUpdate: "threads",
            WhisperDeleted: "whisper_deleted",
            WhisperEdited: "whisper_edited",
            WhisperReceived: "whisper_received",
            WhisperSent: "whisper_sent",
            WhisperThreadUpdate: "thread"
        },
        o = {
            Accepted: "accepted",
            Requested: "requested",
            Removed: "removed",
            SelfAccepted: "self_accepted",
            SelfRemoved: "self_removed",
            SelfRequested: "self_requested"
        };
    ! function(e) {
        e.Affiliate = "affiliate", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.Ban = "ban", e.Clear = "clear", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Untimeout = "untimeout"
    }(i || (i = {}));
    var s;
    ! function(e) {
        e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied"
    }(s || (s = {}));
    var l;
    ! function(e) {
        e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
    }(l || (l = {}));
    var c;
    ! function(e) {
        e.Private = "private", e.Public = "public"
    }(c || (c = {}))
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e[e.Backspace = 8] = "Backspace", e[e.Tab = 9] = "Tab", e[e.Enter = 13] = "Enter", e[e.Esc = 27] = "Esc", e[e.Space = 32] = "Space", e[e.Left = 37] = "Left", e[e.Up = 38] = "Up", e[e.Right = 39] = "Right", e[e.Down = 40] = "Down", e[e.Colon = 58] = "Colon", e[e.At = 64] = "At", e[e.P = 80] = "P"
    }(i || (i = {}))
}, , , , function(e, t, n) {
    "use strict";

    function i() {
        return "twitch.tv" === window.location.hostname || window.location.hostname.endsWith(".twitch.tv")
    }

    function a() {
        if (i()) return ".twitch.tv"
    }
    t.b = i, t.a = a
}, function(e, t, n) {
    "use strict";

    function i() {
        for (var e = 0, t = f; e < t.length; e++) {
            var n = t[e];
            d.remove(n, y)
        }
    }

    function a(e) {
        var t = {
            authToken: e.authToken,
            displayName: e.displayName,
            id: e.id,
            login: e.login,
            roles: e.roles,
            version: v
        };
        d.set(g, JSON.stringify(t), y)
    }

    function r(e) {
        var t = d.get(g);
        if (t) try {
            var n = JSON.parse(t);
            if (e.debug("Found user cookie.", n), !n.authToken || "string" != typeof n.authToken) throw new Error('Missing or invalid "authToken" value stored in user cookie.');
            if (!n.displayName || "string" != typeof n.displayName) throw new Error('Missing or invalid "displayName" value stored in user cookie.');
            if (!n.id) throw new Error('Missing "id" value in user cookie.');
            if ("number" == typeof n.id) e.debug('Converting numerical user cookie "id" value to string.'), n.id = String(n.id);
            else if ("string" != typeof n.id) throw new Error('Invalid "id" value stored in user cookie.');
            if (!n.login || "string" != typeof n.login) throw new Error('Missing or invalid "login" value stored in user cookie.');
            if (n.version) {
                if ("number" != typeof n.version) throw new Error('Invalid "version" value stored in user cookie.')
            } else e.debug("Unversioned user cookie, using default."), n.version = 1;
            return e.debug("Successfully loaded user data.", n), n
        } catch (n) {
            e.error(n, "Failed to load data from user cookie.", {
                data: t
            }), d.remove(g)
        }
    }

    function o() {
        return d.get(h)
    }

    function s(e) {
        var t = d.get(m);
        if (t) try {
            return JSON.parse(t)
        } catch (n) {
            e.withCategory("auth").error(n, "Failed to load login state from cookie.", {
                state: t
            }), d.remove(m)
        }
    }

    function l(e) {
        d.set(m, JSON.stringify(e), b)
    }

    function c() {
        d.remove(m, b)
    }
    n.d(t, "a", function() {
        return v
    }), t.e = i, t.h = a, t.d = r, t.b = o, t.c = s, t.g = l, t.f = c;
    var u = n(0),
        d = n(36),
        p = (n.n(d), n(44)),
        m = "twilight-login-state",
        h = "api_token",
        g = "twilight-user",
        f = [m, g, "persistent", h, "_twitch_session_id", "login", "name", "twilight-auth"],
        v = 2,
        b = {
            domain: Object(p.a)(),
            secure: "https:" === window.location.protocol
        },
        y = u.__assign({}, b, {
            expires: 365
        })
}, , function(e, t, n) {
    "use strict";
    var i = n(382);
    n.d(t, "a", function() {
        return i.a
    })
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        var n = {
            action: t.action,
            auth_ux: "modal",
            type: t.type,
            nonce: t.nonce
        };
        o.n.tracking.track(e, n)
    }

    function a() {
        for (var e = "", t = 0; t < s; t++) {
            var n = Math.floor(Math.random() * l.length);
            e += l.charAt(n)
        }
        return e
    }
    n.d(t, "a", function() {
        return r
    }), t.c = i, t.b = a;
    var r, o = n(2),
        s = 30,
        l = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    ! function(e) {
        e.BitsLandingPage = "bits_landing_page", e.ChatLoginButton = "chat_login_button", e.ChatSignupButton = "chat_signup_button", e.Chat = "chat", e.ChannelUpsellLogin = "channel_upsell_login", e.ChannelUpsellSignup = "channel_upsell_signup", e.ClipsManager = "clips_manager", e.DashboardPage = "dashboard_page", e.DirectoryFollowButton = "directory-follow-button", e.EventFollowButton = "event_follow_button", e.FeedReactionToggle = "feed_reaction_toggle", e.FollowButton = "follow-button", e.FollowGameButton = "follow-game-button", e.FollowingPage = "following_page", e.FriendAdd = "friend_add", e.HCGSignupButton = "hgc_signup_button", e.RaidJoin = "raid_join", e.ReportHoster = "report_hoster", e.ReportChannel = "report_channel", e.SubsLandingPage = "subs_landing_Page", e.TopNavLoginButton = "topnav_login_button", e.TopNavSignupButton = "topnav_signup_button", e.TrendingEmotesLogin = "trending-emotes-login", e.TrendingEmotesSignup = "trending-emotes-signup", e.VODComment = "vod_comment", e.VODOptions = "vod_options"
    }(r || (r = {}))
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return r.test(e)
    }
    n.d(t, "a", function() {
        return o
    });
    var a = n(1),
        r = (n.n(a), /^[\x00-\x7F]*$/),
        o = function(e, t, n) {
            return void 0 === n && (n = !1), t && e && !i(t) ? n ? t + " (" + e + ")" : a.createElement("span", null, t, " ", a.createElement("span", {
                className: "intl-login"
            }, "(" + e + ")")) : t || (e || "")
        }
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return a.__awaiter(this, void 0, void 0, function() {
            var t, n, i, c, u, d, p, m, h, g, f, v, b;
            return a.__generator(this, function(a) {
                switch (a.label) {
                    case 0:
                        t = r.m.getVideoPlayerTrackingData().vodID, n = !!t, i = {
                            channelID: e.channelID,
                            withVideo: !1
                        }, n && (i.withVideo = !0, i.videoID = t), c = null, a.label = 1;
                    case 1:
                        return a.trys.push([1, 3, , 4]), [4, r.n.apollo.client.query({
                            query: l,
                            variables: i
                        })];
                    case 2:
                        return c = a.sent(), [3, 4];
                    case 3:
                        return u = a.sent(), r.i.error(u, "Failed to make query for channel info in FollowEvent reporting.", {
                            channelID: e.channelID
                        }), [3, 4];
                    case 4:
                        return d = c && c.data && c.data.user || null, c && !d && r.i.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                            channelID: e.channelID
                        }), p = null, c && n && (m = c && c.data && c.data.video, m ? p = Object(s.a)(m.broadcastType) : r.i.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                            currentVideoID: t
                        })), h = d && d.self, g = h ? !!h.subscriptionBenefit : null, f = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                            action: e.action,
                            can_subscribe: v,
                            channel: e.channelLogin,
                            channel_id: e.channelID,
                            checkout_button_tier: e.checkoutButtonTier,
                            has_sub_credit: e.hasSubCredit,
                            host_channel: e.hostChannelLogin,
                            host_channel_id: e.hostChannelID,
                            is_menu_open: e.isMenuOpen,
                            is_subscribed: g,
                            is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                            sub_location: e.sub_location,
                            sub_recipient: e.giftRecipient,
                            modal: e.modal,
                            modal_level: e.modalLevel || "",
                            show_prime_content: e.showPrimeContent,
                            show_resub: d ? v && f : null,
                            vod_id: t,
                            vod_type: p,
                            viewport_height: window.innerHeight,
                            viewport_width: window.innerWidth
                        }, r.m.track(o.SpadeEventType.Subscription, b), [2]
                }
            })
        })
    }
    n.d(t, "a", function() {
        return c
    }), t.b = i;
    var a = n(0),
        r = n(2),
        o = n(12),
        s = n(136),
        l = n(454),
        c = (n.n(l), {
            BuyGiftSub: "buy_gift_sub",
            ClickCheckout: "click_checkout_button",
            ClickMoreSubOptions: "more_options_click",
            ClickGiftSubOptions: "gift_options_click",
            ClickPrimeFAQ: "click_prime_faq",
            ClickSignupForPrime: "click_signup_for_prime",
            ClickBack: "back_top_level",
            CloseSubMenu: "close_subscribe_menu",
            GiftASub: "gift_a_sub",
            OpenSubMenu: "open_subscribe_menu",
            SubWithPrime: "samus_spend_credit"
        })
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i = {
        Away: "AWAY",
        Busy: "BUSY",
        Idle: "IDLE",
        Invisible: "INVISIBLE",
        Offline: "OFFLINE",
        Online: "ONLINE"
    }
}, function(e, t, n) {
    "use strict";

    function i() {
        var e = s.k.get(s.n.config.layoutCacheKey, {
                resource: {
                    isSocialColumnClosedByUserAction: !1,
                    isRightColumnClosedByUserAction: !1
                },
                time: Date.now()
            }),
            t = Object(c.b)();
        return {
            persistentPlayerEnabled: s.k.get(s.n.config.persistentPlayerEnabledKey, !0),
            rightColumnExpanded: !e.resource.isRightColumnClosedByUserAction,
            sideNavExpanded: !e.resource.isSocialColumnClosedByUserAction,
            theatreModeEnabled: !1,
            theme: t
        }
    }

    function a(e, t) {
        switch (void 0 === e && (e = i()), t.type) {
            case u.c:
                return o.__assign({}, e, {
                    rightColumnExpanded: !0
                });
            case u.b:
                return o.__assign({}, e, {
                    rightColumnExpanded: !1
                });
            case u.e:
                return o.__assign({}, e, {
                    sideNavExpanded: !0
                });
            case u.d:
                return o.__assign({}, e, {
                    sideNavExpanded: !1
                });
            case u.g:
                return o.__assign({}, e, {
                    theatreModeEnabled: !0
                });
            case u.f:
                return o.__assign({}, e, {
                    theatreModeEnabled: !1
                });
            case u.h:
                return o.__assign({}, e, {
                    theme: t.theme
                });
            case u.a:
                return o.__assign({}, e, {
                    persistentPlayerEnabled: !e.persistentPlayerEnabled
                });
            default:
                return e
        }
    }

    function r(e) {
        return e.ui.theatreModeEnabled ? l.a.Dark : e.ui.theme
    }
    t.a = r;
    var o = n(0),
        s = n(2),
        l = n(33),
        c = n(34),
        u = n(58);
    s.n.store.registerReducer("ui", a)
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            type: s,
            user: e || void 0
        }
    }

    function a(e, t) {
        return {
            type: l,
            languageCode: e,
            locale: t
        }
    }

    function r() {
        return {
            type: c
        }
    }

    function o() {
        return {
            type: u
        }
    }
    n.d(t, "a", function() {
        return s
    }), n.d(t, "d", function() {
        return l
    }), n.d(t, "b", function() {
        return c
    }), n.d(t, "c", function() {
        return u
    }), t.e = i, t.h = a, t.f = r, t.g = o;
    var s = "core.session.AUTH_INITIALIZED",
        l = "core.session.LANGUAGE_INITIALIZED",
        c = "core.session.FIRST_PAGE_LOADED",
        u = "core.session.INITIAL_AVAILABILITY_SET"
}, , function(e, t, n) {
    "use strict";

    function i(e, t) {
        return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
    }

    function a(e, t) {
        return e.split("_").find(function(e) {
            return e !== t
        }) || null
    }
    t.a = i, t.b = a
}, function(e, t, n) {
    "use strict";

    function i(e) {
        for (var t = {}, n = 0, i = Object.keys(e).filter(function(e) {
                return e.startsWith("data-")
            }); n < i.length; n++) {
            var a = i[n];
            t[a] = e[a]
        }
        return t
    }
    t.a = i
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        return {
            type: u,
            data: e,
            contentWidth: t
        }
    }

    function a(e, t) {
        return {
            type: d,
            threadID: e,
            contentWidth: t
        }
    }

    function r(e, t) {
        return {
            type: p,
            threadID: e,
            contentWidth: t
        }
    }

    function o(e, t) {
        return {
            type: m,
            threadID: e,
            contentWidth: t
        }
    }

    function s(e) {
        return {
            type: f,
            contentWidth: e
        }
    }

    function l(e, t) {
        return {
            type: h,
            threadID: e,
            contentWidth: t
        }
    }

    function c(e, t) {
        return {
            type: g,
            threadID: e,
            contentWidth: t
        }
    }
    n.d(t, "f", function() {
        return u
    }), n.d(t, "b", function() {
        return d
    }), n.d(t, "c", function() {
        return p
    }), n.d(t, "d", function() {
        return m
    }), n.d(t, "e", function() {
        return h
    }), n.d(t, "g", function() {
        return g
    }), n.d(t, "a", function() {
        return f
    }), t.l = i, t.h = a, t.i = r, t.j = o, t.m = s, t.k = l, t.n = c;
    var u = "whispers.THREAD_OPENED",
        d = "whispers.THREAD_CLOSED",
        p = "whispers.THREAD_COLLAPSED",
        m = "whispers.THREAD_EXPANDED",
        h = "whispers.THREAD_FOCUSED",
        g = "whispers.THREAD_UNFOCUSED",
        f = "whispers.CONTENT_RESIZED"
}, function(e, t, n) {
    "use strict";

    function i() {
        return {
            type: p
        }
    }

    function a() {
        return {
            type: m
        }
    }

    function r() {
        return {
            type: f
        }
    }

    function o() {
        return {
            type: v
        }
    }

    function s() {
        return {
            type: h
        }
    }

    function l() {
        return {
            type: g
        }
    }

    function c(e) {
        return {
            type: b,
            theme: e
        }
    }

    function u() {
        return {
            type: d
        }
    }
    n.d(t, "a", function() {
        return d
    }), n.d(t, "b", function() {
        return p
    }), n.d(t, "c", function() {
        return m
    }), n.d(t, "g", function() {
        return h
    }), n.d(t, "f", function() {
        return g
    }), n.d(t, "d", function() {
        return f
    }), n.d(t, "e", function() {
        return v
    }), n.d(t, "h", function() {
        return b
    }), t.i = i, t.m = a, t.j = r, t.n = o, t.l = s, t.k = l, t.o = c, t.p = u;
    var d = "core.ui.PERSISTENT_PLAYER_TOGGLED",
        p = "core.ui.RIGHT_COLUMN_COLLAPSED",
        m = "core.ui.RIGHT_COLUMN_EXPANDED",
        h = "core.ui.THEATRE_ENABLED",
        g = "core.ui.THEATRE_DISABLED",
        f = "core.ui.SIDE_NAV_COLLAPSED",
        v = "core.ui.SIDE_NAV_EXPANDED",
        b = "core.ui.THEME_CHANGED"
}, function(e, t, n) {
    "use strict";
    var i = n(175);
    n.d(t, "SpadeFollowingCategory", function() {
        return i.a
    }), n.d(t, "SpadePlatform", function() {
        return i.b
    }), n.d(t, "SpadeVideoBroadcastType", function() {
        return i.c
    }), n.d(t, "TwitchDataType", function() {
        return i.d
    });
    var a = n(176);
    n.d(t, "SpadeEventType", function() {
        return a.a
    });
    var r = n(177);
    n.d(t, "PageviewContent", function() {
        return r.a
    }), n.d(t, "PageviewDirectoryContentType", function() {
        return r.b
    }), n.d(t, "PageviewFollowingTab", function() {
        return r.c
    }), n.d(t, "PageviewLocation", function() {
        return r.d
    }), n.d(t, "PageviewMedium", function() {
        return r.e
    });
    var o = n(178);
    n.n(o);
    n.o(o, "ShareItemContext") && n.d(t, "ShareItemContext", function() {
        return o.ShareItemContext
    }), n.o(o, "ShareItemSourceItemType") && n.d(t, "ShareItemSourceItemType", function() {
        return o.ShareItemSourceItemType
    }), n.o(o, "ShareItemType") && n.d(t, "ShareItemType", function() {
        return o.ShareItemType
    });
    var s = n(179);
    n.d(t, "ShareItemContext", function() {
        return s.a
    }), n.d(t, "ShareItemSourceItemType", function() {
        return s.b
    }), n.d(t, "ShareItemType", function() {
        return s.c
    })
}, , , , , function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.setContainerRef = function(e) {
                    t.container = e
                }, t.handleGlobalClick = function(e) {
                    var n = e.target;
                    t.isParentOf(n) || t.props.onClickOut(e)
                }, t
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                document.addEventListener("click", this.handleGlobalClick, !0)
            }, t.prototype.componentWillUnmount = function() {
                document.removeEventListener("click", this.handleGlobalClick, !0)
            }, t.prototype.render = function() {
                var e = this.props,
                    t = (e.onClickOut, i.__rest(e, ["onClickOut"]));
                return a.createElement("div", i.__assign({}, t, {
                    ref: this.setContainerRef
                }), this.props.children)
            }, t.prototype.isParentOf = function(e) {
                for (var t = e; t;) {
                    if (t === this.container) return !0;
                    t = t.parentElement
                }
                return !1
            }, t
        }(a.Component);
    n.d(t, "a", function() {
        return r
    })
}, , function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e.Games = "game", e.Videos = "vod", e.VideosNewest = "vod_by_created_at", e.Users = "user", e.Channels = "live_channel", e.Communities = "community"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";
    var i = n(1),
        a = n(3),
        r = (n(231), function(e) {
            return i.createElement(a._17, {
                className: "core-error",
                color: a.F.Alt2,
                display: a.H.Flex,
                justifyContent: a.T.Center,
                alignItems: a.c.Center,
                fullWidth: !e.inline,
                fullHeight: !e.inline
            }, i.createElement(a.U, {
                className: "core-error__container",
                display: a.H.InlineFlex,
                alignItems: a.c.Center,
                flexWrap: a.K.NoWrap
            }, i.createElement(a._17, {
                margin: {
                    right: 2
                },
                flexShrink: 0,
                color: a.F.Alt2
            }, i.createElement(a._8, {
                asset: a._9.DeadGlitch,
                width: 92,
                height: 96
            })), i.createElement(a.U, {
                className: "core-error__message-container",
                display: a.H.Flex,
                flexDirection: a.J.Column
            }, i.createElement(a._21, {
                fontSize: a.L.Size4,
                "data-a-target": "core-error-message"
            }, e.message), e.children)))
        });
    n.d(t, "a", function() {
        return r
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = "", i = 0; i < e; i++) n += t.charAt(Math.floor(Math.random() * t.length));
        return n
    }

    function a() {
        return "" + p + i(5) + "/" + i(10) + "/" + i(6) + "'/;ord='" + Date.now()
    }

    function r(e) {
        return !!(e && e.timing && e.getEntriesByType && e.setResourceTimingBufferSize && e.clearResourceTimings)
    }

    function o(e) {
        var t = e ? oe()() : ae()(),
            n = t.push.bind(t),
            i = /^([^#?]+)?(\?[^#]+)?(\#.+)?$/i;
        return t.push = function(e, a) {
            var r = t.location.pathname,
                o = "",
                s = "";
            if ("string" == typeof e) {
                var l = i.exec(e);
                if (!l) return void n(e, a);
                l[1] && (r = l[1]), l[2] && (o = l[2]), l[3] && (s = l[3])
            } else e.pathname && (r = e.pathname), e.search && (o = e.search, o.startsWith("?") || (o = "?" + o)), e.hash && (s = e.hash, s.startsWith("#") || (s = "#" + s));
            (r === t.location.pathname || !r.startsWith("/") && t.location.pathname.endsWith("/" + r)) && o === t.location.search && s === t.location.hash ? t.replace(e, a) : n(e, a)
        }, t
    }

    function s(e) {
        me = new Te(e), he = me.config, ge = me.dynamicSettings, fe = me.intl.formatDate, ve = me.intl.formatMessage, be = me.intl.formatNumber, ye = me.intl.formatNumberShort, ke = me.intl.formatRelativeDate, Se = me.intl.formatTime, _e = me.logger, we = me.pubsub, Ee = me.storage, Ce = me.tempStorage, Ne = me.tracking
    }
    var l = n(1),
        c = n(31),
        u = n(114),
        d = n(16),
        p = "https://ad.doubleclick.net/ddm/ad/",
        m = n(95),
        h = function() {
            function e(e) {
                this.detect = !1, this.logger = e.logger.withCategory("ad-block-detector"), this.logger.debug("Created.")
            }
            return e.prototype.detectAdBlock = function() {
                this.logger.debug("Start ad block tests."), this.detectEasyList(), this.detectEasyListPrivacy()
            }, e.prototype.detectEasyList = function() {
                var e = this,
                    t = {
                        method: "GET",
                        mode: "no-cors"
                    };
                fetch(a(), t).then(function() {
                    e.logger.debug("DoubleClick is reachable.")
                }).catch(function(t) {
                    e.logger.debug("DoubleClick is unreachable.", {
                        err: t
                    }), e.detect = !0
                })
            }, e.prototype.detectEasyListPrivacy = function() {
                var e = this,
                    t = {
                        event: "dummy-event",
                        properties: {
                            time: Date.now(),
                            random1: i(256),
                            random2: i(256),
                            random3: i(256),
                            random4: i(256)
                        }
                    },
                    n = {
                        method: "POST",
                        body: new Blob([Object(m.a)([t])], {
                            type: "application/x-www-form-urlencoded; charset=UTF-8"
                        })
                    };
                fetch("https://spade.twitch.tv", n).then(function(t) {
                    e.logger.debug("Spade is reachable.", {
                        status: t.status
                    })
                }).catch(function(t) {
                    e.logger.debug("Spade unreachable: ", {
                        err: t
                    }), e.detect = !0
                })
            }, e.prototype.addTwitchGlobal = function() {
                if (window.Twitch || (window.Twitch = {}), window.Twitch.sentinel) return void this.logger.debug("Sentinel global already exists.", {
                    sentinel: window.Twitch.sentinel
                });
                window.Twitch.sentinel = this, this.logger.debug("Setting global sentinel.")
            }, e
        }();
    window._sp_ = window._sp_ || {}, window._sp_.config = window._sp_.config || {};
    var g, f = function() {
            function e(e) {
                var t = this;
                this.detect = !1, this.logger = e.logger.withCategory("AdBlockSentinel"), window.sp_cid = e.cid, window._sp_.config.account_id = e.accountID, document.addEventListener("sp.blocking", function() {
                    t.logger.debug("Ad blocker detected"), t.detect = !0
                }), document.addEventListener("sp.not_blocking", function() {
                    t.logger.debug("Ad blocker not detected"), t.detect = !1
                }), this.logger.debug("Created")
            }
            return e.prototype.addTwitchGlobal = function() {
                if (window.Twitch || (window.Twitch = {}), window.Twitch.sentinel) return void this.logger.debug("Sentinel global already exists");
                window.Twitch.sentinel = this, this.logger.debug("Setting global sentinel")
            }, e.prototype.pageTransition = function() {
                window._sp_ && window._sp_.pageChange ? (window._sp_.pageChange(), this.logger.debug("Called pageChange method")) : this.logger.debug("window._sp_ or window._sp_.pageChange does not exist.")
            }, e
        }(),
        v = n(0),
        b = n(36),
        y = n(338),
        k = n(20),
        S = n(2),
        _ = {
            "59c5198b-ea6d-423d-b337-ea93d0dc8d66": "no",
            "298a5f39-228a-487a-ad06-422c18458403": "off",
            "32099615-3609-4658-9f6b-5c1c1daa3510": "no",
            "4d3d19a7-38c5-4328-9730-7d99565d5edd": "no",
            "ef25ca44-13bd-4e89-99d2-f9939c013fec": "off",
            "f7249378-b153-4612-bd09-972fbb0b0b7e": "no",
            "a9667563-723a-4cf7-b253-674d9eef0a53": "control",
            "e2969271-bad4-4088-a56d-9582b5e35a8f": "control",
            "74156eb2-ed95-482c-b006-60c1428e8846": "control",
            "9452d9e2-6588-408c-b8aa-1e54ff1e2f4a": "control",
            "011d1499-61b3-49b2-92b2-b2ffd353ef00": "no",
            "afc307f3-4011-40ba-9406-56c474b5922b": "control",
            "1318509a-bf97-475d-acdc-df6a24ef6e3e": "none",
            "d6bb4aa4-efae-4031-96be-f08950d6c8f4": "shown",
            "db2180db-bc89-4f97-8bef-208b1782e18f": "off",
            "f866f89d-85de-4a5b-9b00-d97c791bc16d": "no"
        },
        w = {
            TWILIGHT_LEEROY_JENKINS: "59c5198b-ea6d-423d-b337-ea93d0dc8d66",
            MERCH_STORE_LAUNCH: "298a5f39-228a-487a-ad06-422c18458403",
            TWILIGHT_STREAM_SUMMARY: "32099615-3609-4658-9f6b-5c1c1daa3510",
            TWILIGHT_PREMIERE_UPLOAD_FLOW: "4d3d19a7-38c5-4328-9730-7d99565d5edd",
            STREAMER_TRAILERS: "ef25ca44-13bd-4e89-99d2-f9939c013fec",
            TWILIGHT_ACHIEVE: "f7249378-b153-4612-bd09-972fbb0b0b7e",
            TWILIGHT_WEB_ONBOARDING: "a9667563-723a-4cf7-b253-674d9eef0a53",
            TWILIGHT_WEB_ONBOARDING_FOR_YOU: "e2969271-bad4-4088-a56d-9582b5e35a8f",
            TWILIGHT_WEB_ONBOARDING_CHANNEL_RANKING: "74156eb2-ed95-482c-b006-60c1428e8846",
            TWILIGHT_EXPANDO_FEATURO: "9452d9e2-6588-408c-b8aa-1e54ff1e2f4a",
            TWILIGHT_SUB_GIFTING: "011d1499-61b3-49b2-92b2-b2ffd353ef00",
            TWILIGHT_VIDEO_FEATURO_EN: "afc307f3-4011-40ba-9406-56c474b5922b",
            TWILIGHT_VIDEOS_IN_SIDENAV: "1318509a-bf97-475d-acdc-df6a24ef6e3e",
            TWILIGHT_EVENT_GAME_DIRECTORY: "d6bb4aa4-efae-4031-96be-f08950d6c8f4",
            TWILIGHT_LEADERBOARDS: "db2180db-bc89-4f97-8bef-208b1782e18f",
            TWILIGHT_RAID_AUTO_JOIN: "f866f89d-85de-4a5b-9b00-d97c791bc16d"
        },
        E = {
            MERCH_STORE_LAUNCH: "on",
            TWILIGHT_STREAM_SUMMARY: "yes",
            TWILIGHT_ACHIEVE: "yes",
            TWILIGHT_PREMIERE_UPLOAD_FLOW: "yes"
        };
    ! function(e) {
        e.Channel = "channel_id", e.Device = "device_id", e.User = "user_id"
    }(g || (g = {}));
    var C, N = function() {
            function e(e) {
                this.logger = e.logger.withCategory("Experiment"), this.session = e.session, this.store = e.store, this.tracking = e.tracking
            }
            return e.prototype.getAssignment = function(e, t) {
                return void 0 === t && (t = {}), v.__awaiter(this, void 0, void 0, function() {
                    var n, i, a, r, o;
                    return v.__generator(this, function(s) {
                        switch (s.label) {
                            case 0:
                                return [4, this.initialize()];
                            case 1:
                                if (s.sent(), !w[e]) return this.logger.warn("Experiment name not in mapping", e), [2, null];
                                if (n = w[e], !this.experiments[n]) return this.logger.warn("Unable to find experiment configuration", {
                                    name: e,
                                    id: n
                                }), [2, null];
                                if (i = this.experiments[n], !this.assignments[n]) return this.logger.warn("Unable to determine default assignment", {
                                    name: e,
                                    id: n,
                                    experiment: i
                                }), [2, null];
                                switch (a = this.assignments[n], this.overrides[n] ? r = this.overrides[n] : 3 === i.t ? t.channel ? r = Object(y.selectTreatment)(n, i, t.channel) : (this.logger.warn("Called getAssignment() for channel experiment with no channel", i), r = a) : r = a, i.t) {
                                    case 1:
                                        o = g.Device;
                                        break;
                                    case 2:
                                        o = g.User;
                                        break;
                                    case 3:
                                        o = g.Channel;
                                        break;
                                    default:
                                        o = void 0
                                }
                                return this.trackExperiment({
                                    assignment: r,
                                    channel: t.channel,
                                    id: n,
                                    name: i.name,
                                    version: i.v,
                                    type: o
                                }), [2, r]
                        }
                    })
                })
            }, e.prototype.trackExperiment = function(e) {
                this.tracking.trackExperiment({
                    channel: e.channel || void 0,
                    device_id: this.session.deviceID,
                    login: this.login,
                    experiment_id: e.id,
                    experiment_group: e.assignment,
                    experiment_name: e.name,
                    experiment_version: e.version,
                    experiment_type: e.type
                })
            }, e.prototype.initialize = function() {
                return v.__awaiter(this, void 0, void 0, function() {
                    var e, t, n = this;
                    return v.__generator(this, function(i) {
                        return this.initializing ? [2, this.initializing] : (this.initializing = new Promise(function(e) {
                            return n.initializeComplete = e
                        }), window.__twilightSettings && window.__twilightSettings.experiments ? (this.experiments = window.__twilightSettings && window.__twilightSettings.experiments, (e = Object(y.validate)(this.experiments)) && (this.logger.error(e, "Invalid experiment configuration. Experiments will be default"), this.experiments = {})) : (this.logger.warn("Unable to get experiment data from dynamic settings. Experiments will be default."), this.experiments = {}), t = this.store.getState().session.user, this.overrides = this.determineOverrides(!(!t || !t.roles) && t.roles.isStaff), this.login = t ? t.login : void 0, this.assignments = this.determineAssignments(this.experiments, this.session.deviceID, this.login), this.logger.debug("Experiment settings determined", {
                            overrides: this.overrides,
                            assignments: this.assignments,
                            experiments: this.experiments
                        }), this.initializeComplete(), [2, this.initializing])
                    })
                })
            }, e.prototype.determineOverrides = function(e) {
                var t = this,
                    n = {};
                e && Object.keys(E).forEach(function(e) {
                    w[e] ? E[e] && (n[w[e]] = E[e]) : t.logger.warn("Staff experiment name is not in mapping", e)
                });
                var i = {};
                try {
                    var a = b.get(S.a.experimentsOverrideCookie);
                    if (a) {
                        var r = JSON.parse(a);
                        Object.keys(r).forEach(function(e) {
                            _[e] ? i[e] = r[e] : t.logger.warn("Cookie experiment ID is not in DEFAULT_ASSIGNMENTS mapping", e)
                        })
                    }
                } catch (e) {
                    this.logger.warn("Unable to parse cookie overrides", e)
                }
                var o = {},
                    s = k.parse(window.location.search);
                if (s.experiments) try {
                    var l = JSON.parse(s.experiments);
                    Object.keys(l).forEach(function(e) {
                        w[e] ? o[w[e]] = l[e] : t.logger.warn("URL override experiment name is not in mapping", e)
                    })
                } catch (e) {
                    this.logger.warn("Unable to parse URL overrides", e)
                }
                return v.__assign({}, n, i, o)
            }, e.prototype.determineAssignments = function(e, t, n) {
                var i = this,
                    a = {};
                return Object.keys(_).forEach(function(r) {
                    if (!e[r]) return void i.logger.warn("Experiment is deprecated", r);
                    var o = e[r];
                    1 === o.t ? a[r] = Object(y.selectTreatment)(r, o, t) : 2 === o.t && n ? a[r] = Object(y.selectTreatment)(r, o, n) : a[r] = _[r]
                }), a
            }, e
        }(),
        T = n(173),
        D = n.n(T),
        I = function() {
            function e(e, t) {
                this.store = e, this.logger = t.withCategory("pubsub")
            }
            return e.prototype.subscribe = function(e) {
                var t = this;
                this.driver || (this.driver = D.a.getInstance("production"));
                var n = this.wrapMessageCallback(e.onMessage),
                    i = this.store.getState();
                return this.driver.Listen({
                        topic: e.topic,
                        auth: i.session && i.session.user && i.session.user.authToken,
                        success: function() {
                            t.logger.debug("Subscribed to topic.", {
                                opts: e
                            }), e.success && e.success()
                        },
                        failure: function(n) {
                            t.logger.error(new Error("Failed to subscribe to topic."), "Failed to subscribe to topic.", {
                                opts: e,
                                err: n
                            }), e.failure && e.failure(n)
                        },
                        message: n
                    }),
                    function() {
                        return t.unsubscribe(e, n)
                    }
            }, e.prototype.unsubscribe = function(e, t) {
                var n = this;
                this.driver.Unlisten({
                    topic: e.topic,
                    success: function() {
                        n.logger.debug("Unsubscribed from topic.", {
                            opts: e
                        })
                    },
                    failure: function(t) {
                        n.logger.error(new Error("Failed to unsubscribe from topic."), "Failed to unsubscribe from topic.", {
                            opts: e,
                            err: t
                        })
                    },
                    message: t
                })
            }, e.prototype.wrapMessageCallback = function(e) {
                var t = this;
                return function(n) {
                    var i;
                    try {
                        i = JSON.parse(n)
                    } catch (e) {
                        return void t.logger.error(e, "Failed to parse message.", {
                            msg: n
                        })
                    }
                    e(i)
                }
            }, e
        }(),
        O = function() {
            function e(e) {
                this.currentPageComponentName = "", this.buildID = e.buildID, this.endpoint = e.endpoint, this.logger = e.logger.withCategory("sentinel"), this.session = e.session, this.store = e.store, this.logger.debug("Creating instance.", {
                    buildID: e.buildID,
                    endpoint: e.endpoint
                })
            }
            return e.prototype.report = function(e) {
                return v.__awaiter(this, void 0, void 0, function() {
                    var t, n, i, a;
                    return v.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                t = {
                                    buildId: this.buildID,
                                    clientTime: Date.now(),
                                    deviceId: this.session.deviceID,
                                    pageComponentName: this.currentPageComponentName,
                                    pageSessionId: this.session.pageviewID,
                                    logEntries: e,
                                    platform: "web",
                                    product: "twilight",
                                    userAgent: navigator.userAgent,
                                    userId: 0,
                                    username: ""
                                };
                                try {
                                    n = this.store && this.store.getState().session.user, t.userId = n ? Number(n.id) : 0, t.username = n ? n.login : ""
                                } catch (e) {
                                    this.logger.warn("Failed to get user data from the global store.", e)
                                }
                                this.logger.debug("Reporting error.", t), i = 1, r.label = 1;
                            case 1:
                                if (!(i <= 3)) return [3, 6];
                                r.label = 2;
                            case 2:
                                return r.trys.push([2, 4, , 5]), [4, fetch(this.endpoint, {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json; charset=UTF-8",
                                        Accept: "application/json; charset=UTF-8"
                                    },
                                    body: JSON.stringify(t)
                                })];
                            case 3:
                                return r.sent(), this.logger.debug("Report sent."), [2];
                            case 4:
                                return a = r.sent(), this.logger.warn("Failed to submit error report.", {
                                    attempt: i,
                                    maxAttempts: 3
                                }, a), [3, 5];
                            case 5:
                                return ++i, [3, 1];
                            case 6:
                                return [2]
                        }
                    })
                })
            }, e.prototype.setPageComponentName = function(e) {
                this.currentPageComponentName = e
            }, e
        }(),
        L = n(12),
        x = n(341),
        R = function() {
            function e(e, t) {
                this.logger = e.withCategory("tmi");
                var n = this.getConnectionOptions(t);
                this.disabled = n.disabled, this.logger.debug("Creating TMI client", n), this.client = new x.a({
                    connection: n,
                    logger: this.logger
                })
            }
            return e.prototype.setIdentity = function(e, t) {
                this.logger.debug("Setting identity", {
                    username: e,
                    authToken: t
                }), this.client.updateIdentity({
                    username: e,
                    authToken: t
                })
            }, e.prototype.connect = function() {
                return v.__awaiter(this, void 0, void 0, function() {
                    var e, t;
                    return v.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                if (this.disabled) return [2];
                                n.label = 1;
                            case 1:
                                return n.trys.push([1, 3, 4, 5]), this.pendingConnection ? this.logger.debug("Waiting on the pending connection...") : (this.logger.debug("Establishing a new connection to TMI..."), this.pendingConnection = this.client.connect()), [4, this.pendingConnection];
                            case 2:
                                return e = n.sent(), this.logger.debug("Connection completed", e), [3, 5];
                            case 3:
                                return t = n.sent(), this.logger.warn("Failed to connect, due to error", t), [3, 5];
                            case 4:
                                return this.pendingConnection = null, [7];
                            case 5:
                                return [2]
                        }
                    })
                })
            }, e.prototype.join = function(e) {
                return v.__awaiter(this, void 0, void 0, function() {
                    var t, n;
                    return v.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                if (this.disabled) return [2];
                                i.label = 1;
                            case 1:
                                return i.trys.push([1, 4, , 5]), [4, this.ensureConnected()];
                            case 2:
                                return i.sent(), this.logger.debug("Joining channel..."), [4, this.client.joinChannel(e)];
                            case 3:
                                return t = i.sent(), t.response.succeeded ? this.logger.debug("Joined channel", {
                                    duration: t.response.duration,
                                    channel: t.response.channel
                                }) : this.logger.warn("Failed to join channel", {
                                    channel: t.response.channel
                                }), [3, 5];
                            case 4:
                                return n = i.sent(), this.logger.warn("Failed to join channel.", n), [3, 5];
                            case 5:
                                return [2]
                        }
                    })
                })
            }, e.prototype.part = function(e) {
                return v.__awaiter(this, void 0, void 0, function() {
                    var t, n;
                    return v.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                if (!this.client.isConnected()) return this.logger.warn("Attempt to part channel, but not connected."), [2];
                                this.logger.debug("Parting channel..."), i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, 4, 5]), this.pendingPart = this.client.partChannel(e), [4, this.pendingPart];
                            case 2:
                                return t = i.sent(), t.response.succeeded ? this.logger.debug("Parted channel", {
                                    channel: t.response.channel
                                }) : this.logger.warn("Failed to part channel, due to response.", {
                                    channel: t.response.channel
                                }), [3, 5];
                            case 3:
                                return n = i.sent(), this.logger.warn("Failed to part channel, due to error.", n), [3, 5];
                            case 4:
                                return this.logger.debug("Setting pending part to null"), this.pendingPart = null, [7];
                            case 5:
                                return [2]
                        }
                    })
                })
            }, e.prototype.awaitParted = function() {
                return v.__awaiter(this, void 0, void 0, function() {
                    var e;
                    return v.__generator(this, function(t) {
                        switch (t.label) {
                            case 0:
                                return t.trys.push([0, 3, , 4]), this.pendingPart ? (this.logger.debug("Waiting for pending part operation..."), [4, this.pendingPart]) : [3, 2];
                            case 1:
                                t.sent(), this.logger.debug("Pending part operation completed"), t.label = 2;
                            case 2:
                                return [3, 4];
                            case 3:
                                return e = t.sent(), this.logger.warn("Failed to ensure channel had parted before joining.", e), [3, 4];
                            case 4:
                                return [2]
                        }
                    })
                })
            }, e.prototype.disconnect = function() {
                try {
                    this.client.disconnect()
                } catch (e) {
                    this.logger.warn("Failed to disconnect client!", e)
                }
            }, e.prototype.ensureConnected = function() {
                return v.__awaiter(this, void 0, void 0, function() {
                    return v.__generator(this, function(e) {
                        switch (e.label) {
                            case 0:
                                return this.client.isConnected() ? [3, 2] : (this.logger.debug("Connection not yet established. Waiting on connect to complete..."), [4, this.connect()]);
                            case 1:
                                e.sent(), e.label = 2;
                            case 2:
                                if (!this.client.isConnected()) throw new Error("Failed to connect");
                                return [2]
                        }
                    })
                })
            }, e.prototype.getConnectionOptions = function(e) {
                var t = {
                        disabled: !1,
                        secure: !0,
                        port: 443,
                        server: e.tmiHost
                    },
                    n = this.getQueryStringOptions();
                return null === n ? (this.logger.debug("Using options from configuration"), t) : "false" === n.server ? v.__assign({}, t, {
                    disabled: !0
                }) : e.buildType !== d.a.Dev ? t : {
                    disabled: !1,
                    secure: null !== n.secure ? n.secure : t.secure,
                    port: null !== n.port ? n.port : t.port,
                    server: null !== n.server ? n.server : t.server
                }
            }, e.prototype.getQueryStringOptions = function() {
                try {
                    var e = k.parse(window.location.search),
                        t = {
                            server: void 0 !== e.tmi_host ? e.tmi_host : null,
                            port: void 0 !== e.tmi_port ? +e.tmi_port : null,
                            secure: void 0 !== e.tmi_secure ? "false" !== e.tmi_secure : null
                        };
                    if (null !== t.server || null !== t.port || null !== t.secure) return this.logger.debug("Using options from query string", t), t
                } catch (e) {
                    this.logger.warn("Failed to parse connection options from query string. Default options will be used.", e)
                }
                return null
            }, e
        }(),
        F = n(24),
        U = n(9),
        P = new c.IntrospectionFragmentMatcher({
            introspectionQueryResultData: {
                __schema: {
                    types: [{
                        kind: "UNION",
                        name: "BitsOffer",
                        possibleTypes: [{
                            name: "BitsAdOffer"
                        }, {
                            name: "BitsBundleOffer"
                        }]
                    }, {
                        kind: "UNION",
                        name: "Activity",
                        possibleTypes: [{
                            name: "PlayingActivity"
                        }, {
                            name: "StreamingActivity"
                        }, {
                            name: "WatchingActivity"
                        }]
                    }, {
                        kind: "UNION",
                        name: "FeedItem",
                        possibleTypes: [{
                            name: "Post"
                        }, {
                            name: "Video"
                        }, {
                            name: "Stream"
                        }, {
                            name: "Clip"
                        }]
                    }, {
                        kind: "UNION",
                        name: "PostEmbed",
                        possibleTypes: [{
                            name: "Video"
                        }, {
                            name: "Clip"
                        }, {
                            name: "Stream"
                        }, {
                            name: "PhotoOEmbed"
                        }, {
                            name: "VideoOEmbed"
                        }]
                    }, {
                        kind: "INTERFACE",
                        name: "Panel",
                        possibleTypes: [{
                            name: "DefaultPanel"
                        }, {
                            name: "ExtensionPanel"
                        }]
                    }]
                }
            }
        }),
        M = n(45),
        A = "apollo_excluded_errors",
        j = "apollo_log_errors",
        B = function() {
            function e(e) {
                this.authToken = null, this.batchID = 0, this.excludedErrors = [], this.eventEmitter = new F.EventEmitter, this.logErrors = !1, this.queryID = 0, this.config = e.config, this.logger = e.logger.withCategory("apollo"), this.store = e.store, this.session = e.session, this.excludedErrors = e.dynamicSettings.get(A, []), this.logErrors = e.dynamicSettings.get(j, !1), this.client = this.createApolloClient(), this.reduxStore = Object(U.createStore)(Object(U.combineReducers)({
                    apollo: this.client.reducer()
                }), (e.config.buildType !== d.a.Production && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || U.compose)(Object(U.applyMiddleware)(this.client.middleware())))
            }
            return e.prototype.addQueryMetricsListener = function(e) {
                this.eventEmitter.addListener("query-metrics", e)
            }, e.prototype.removeQueryMetricsListener = function(e) {
                this.eventEmitter.removeListener("query-metrics", e)
            }, e.prototype.createApolloClient = function() {
                return new c.ApolloClient({
                    networkInterface: this.createNetworkInterface(),
                    queryDeduplication: !0,
                    fragmentMatcher: P
                })
            }, e.prototype.createNetworkInterface = function() {
                var e = this,
                    t = Object(c.createBatchingNetworkInterface)({
                        uri: this.config.graphqlEndpoint,
                        batchInterval: 10
                    });
                return t.use([{
                    applyBatchMiddleware: function(t, n) {
                        var i = t.options;
                        i.twilight = {
                            batchID: ++e.batchID,
                            batchTimestamp: performance.timing.navigationStart + performance.now(),
                            requests: t.requests
                        }, i.headers || (i.headers = {}), i.headers["Client-Id"] = e.config.authClientID, i.headers["X-Device-Id"] = e.session.deviceID;
                        var a = e.store.getState();
                        a.session && (i.headers["Accept-Language"] = a.session.locale), e.authToken && (i.headers.Authorization = "OAuth " + e.authToken), n()
                    }
                }]), t.useAfter([{
                    applyBatchAfterware: function(t, n) {
                        return v.__awaiter(e, void 0, void 0, function() {
                            var e, i, a, r, o, s, l, c, u, d = this;
                            return v.__generator(this, function(p) {
                                switch (p.label) {
                                    case 0:
                                        e = 0, i = t.responses, p.label = 1;
                                    case 1:
                                        return e < i.length ? (a = i[e], a.status ? 401 !== a.status ? [3, 2] : this.config.embedded ? (this.logger.warn("Received 401 response from GraphQL."), [3, 4]) : (this.logger.warn("Received 401 response from GraphQL, logging user out."), Object(M.e)(), window.location.reload(!0), [2]) : [3, 5]) : [3, 6];
                                    case 2:
                                        return o = (r = this.logger).error, s = [new Error("Received non-200 response from GraphQL."), "Received non-200 response from GraphQL."], l = {
                                            status: a.status
                                        }, [4, a.text()];
                                    case 3:
                                        o.apply(r, s.concat([(l.body = p.sent(), l)])), p.label = 4;
                                    case 4:
                                        return n(), [2];
                                    case 5:
                                        return e++, [3, 1];
                                    case 6:
                                        return c = t.options, u = t.responses.map(function(e, t) {
                                            var n, i = e,
                                                a = c.twilight.requests[t];
                                            if (n = i.extensions && !i.status ? {
                                                    queryID: ++d.queryID,
                                                    durationMs: i.extensions.durationMilliseconds,
                                                    operationName: i.extensions.operationName,
                                                    variables: a.variables
                                                } : {
                                                    queryID: ++d.queryID,
                                                    operationName: "<extensions field missing>",
                                                    durationMs: 0
                                                }, d.logErrors && i.errors && Array.isArray(i.errors)) {
                                                var r = i.errors.filter(function(e) {
                                                    return !(!e || !e.message) && d.excludedErrors.every(function(t) {
                                                        return !e.message.startsWith(t)
                                                    })
                                                });
                                                i.errors.length !== r.length && d.logger.debug("Some errors were filtered and not submitted to sentinel", {
                                                    originalCount: i.errors.length,
                                                    filteredCount: r.length
                                                }), r.length && d.logger.error(new Error("A GraphQL error occurred with " + n.operationName), "The GraphQL response returned with a non-empty errors array. The entire query will be discarded by Apollo.", {
                                                    info: n,
                                                    errors: r
                                                })
                                            }
                                            return n
                                        }), this.eventEmitter.listeners("query-metrics", !0) && this.eventEmitter.emit("query-metrics", {
                                            batchID: c.twilight.batchID,
                                            batchTimestamp: c.twilight.batchTimestamp,
                                            queries: u
                                        }), n(), [2]
                                }
                            })
                        })
                    }
                }]), t
            }, e
        }(),
        H = n(342),
        V = n.n(H),
        z = function() {
            function e(e) {
                var t = this;
                this.reducers = {}, this.rootReducer = function(e, n) {
                    e || (e = {});
                    var i = {},
                        a = !1;
                    switch (n.type) {
                        case "twilight.registerReducer":
                            var r = t.reducers[n.name](e[n.name], {
                                type: "@@INIT"
                            });
                            if (void 0 === r) throw new Error("Reducer for key " + n.name + " returned undefined!");
                            i = v.__assign({}, e, (s = {}, s[n.name] = r, s)), a = !0;
                            break;
                        default:
                            for (var o in t.reducers)
                                if (t.reducers[o]) {
                                    var r = t.reducers[o](e[o], n);
                                    if (void 0 === r) throw new Error("Reducer for key " + o + " returned undefined!");
                                    i[o] = r, a = a || r !== e[o]
                                }
                    }
                    return a ? i : e;
                    var s
                }, this.reduxStore = Object(U.createStore)(this.rootReducer, (e.buildType !== d.a.Production && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || U.compose)(Object(U.applyMiddleware)(V.a)))
            }
            return e.prototype.getReduxStore = function() {
                return this.reduxStore
            }, e.prototype.getState = function() {
                return this.reduxStore.getState()
            }, e.prototype.dispatch = function(e) {
                return this.reduxStore.dispatch(e)
            }, e.prototype.registerReducer = function(e, t) {
                if (this.reducers[e]) throw Error("Reducer already registered: " + e);
                this.reducers[e] = t, this.dispatch({
                    type: "twilight.registerReducer",
                    name: e
                })
            }, e
        }(),
        W = function() {
            function e(e, t, n) {
                this.sniffers = e, this.trackFunc = t, this.filterFunc = n, this.startCalled = !1
            }
            return e.prototype.start = function() {
                return !this.startCalled && (this.startCalled = !0, this.sniffers.forEach(this.processSniffer.bind(this)), !0)
            }, e.prototype.flush = function() {
                this.sniffers.forEach(function(e) {
                    return e.getAvailableResourceTimings()
                })
            }, e.prototype.processSniffer = function(e) {
                var t = e.frameURL,
                    n = e.getFrameTiming(),
                    i = n.navigationStart;
                this.processFrameTiming(t, n), e.addResourceListener(this.processResourceTiming.bind(this, i)), e.getAvailableResourceTimings().forEach(this.processResourceTiming.bind(this, i))
            }, e.prototype.processFrameTiming = function(e, t) {
                if (this.shouldSend(e)) {
                    var n = this.createFrameNetworkEventData(e, t);
                    this.trackFunc(n)
                }
            }, e.prototype.processResourceTiming = function(e, t) {
                if (this.shouldSend(t.name)) {
                    var n = this.createResourceNetworkEventData(e, t);
                    this.trackFunc(n)
                }
            }, e.prototype.shouldSend = function(e) {
                return !this.filterFunc || this.filterFunc(e)
            }, e.prototype.createFrameNetworkEventData = function(e, t) {
                return {
                    type: "frame",
                    request_url: e,
                    start_time: t.navigationStart,
                    duration: Math.round(t.responseEnd - t.fetchStart),
                    dns_duration: this.computeDuration(t.domainLookupStart, t.domainLookupEnd),
                    connect_duration: this.computeDuration(t.connectStart, t.connectEnd),
                    request_duration: this.computeDuration(t.requestStart, t.responseStart),
                    response_duration: this.computeDuration(t.responseStart, t.responseEnd),
                    redirect_duration: this.computeDuration(t.redirectStart, t.redirectEnd)
                }
            }, e.prototype.createResourceNetworkEventData = function(e, t) {
                return {
                    type: "resource",
                    request_url: t.name,
                    start_time: e + t.startTime,
                    duration: Math.round(t.duration),
                    dns_duration: this.computeDuration(t.domainLookupStart, t.domainLookupEnd),
                    connect_duration: this.computeDuration(t.connectStart, t.connectEnd),
                    request_duration: this.computeDuration(t.requestStart, t.responseStart),
                    response_duration: this.computeDuration(t.responseStart, t.responseEnd),
                    redirect_duration: this.computeDuration(t.redirectStart, t.redirectEnd),
                    transfer_size: t.transferSize
                }
            }, e.prototype.computeDuration = function(e, t) {
                return e > 0 && t > 0 ? t - e : void 0
            }, e
        }(),
        q = "resource",
        G = function() {
            function e(e, t, n) {
                var i = this;
                this.performance = t, this.frameURL = n, this.startCalled = !1, this.eventEmitter = new F.EventEmitter, this.emitterName = "network-sniffer", this.processNewResourceTimings = function() {
                    var e = i.performance.getEntriesByType(q);
                    if (0 !== e.length) {
                        for (var t = 0, n = e; t < n.length; t++) {
                            var a = n[t];
                            i.fireResourceListeners(a)
                        }
                        i.clearResourceBuffer()
                    }
                }, this.logger = e.withCategory("network-sniffer"), r(t) ? this.logger.debug("Created") : this.logger.warn("No sniffing allowed!")
            }
            return e.prototype.start = function() {
                return !this.startCalled && (this.startCalled = !0, this.setResourceBufferSize(), setInterval(this.processNewResourceTimings, 500), !0)
            }, e.prototype.getFrameTiming = function() {
                return this.performance.timing
            }, e.prototype.getAvailableResourceTimings = function() {
                return this.processNewResourceTimings(), this.performance.getEntriesByType(q)
            }, e.prototype.addResourceListener = function(e) {
                this.eventEmitter.addListener(this.emitterName, e)
            }, e.prototype.removeResourceListener = function(e) {
                this.eventEmitter.removeListener(this.emitterName, e)
            }, e.prototype.setResourceBufferSize = function() {
                this.performance.setResourceTimingBufferSize(1e3)
            }, e.prototype.clearResourceBuffer = function() {
                this.performance.clearResourceTimings(), this.setResourceBufferSize()
            }, e.prototype.fireResourceListeners = function(e) {
                this.eventEmitter.emit(this.emitterName, e)
            }, e
        }(),
        Q = function() {
            function e(e) {
                var t = this;
                this.buffer = [], this.eventEmitter = new F.EventEmitter, this.emitterName = "network-metrics", this.loggedHostWarnings = {}, this.shouldLogHosts = function(e) {
                    return function(n) {
                        var i = new URL(n),
                            a = i.hostname,
                            r = a.split(".");
                        r.length > 2 && (a = r[r.length - 2] + "." + r[r.length - 1]);
                        var o = e.some(function(e) {
                            return 0 === a.indexOf(e)
                        });
                        return o || t.loggedHostWarnings[a] || (t.loggedHostWarnings[a] = !0, t.logger.debug("Request not in whitelist", {
                            urlHost: a,
                            url: i
                        })), o
                    }
                }, this.onRequestCompleted = function(e) {
                    if (!t.eventEmitter.listeners(t.emitterName, !0)) return void t.buffer.push(e);
                    if (t.buffer.length > 0) {
                        for (var n = 0, i = t.buffer; n < i.length; n++) {
                            var a = i[n];
                            t.eventEmitter.emit(t.emitterName, a)
                        }
                        t.buffer = []
                    }
                    t.eventEmitter.emit(t.emitterName, e)
                }, this.config = e.config, this.logger = e.logger.withCategory("network monitoring"), this.window = e.window, this.session = e.session;
                var n = this.createSniffers();
                n.map(function(e) {
                    t.logger.debug("Starting network sniffer"), e.start()
                }), this.networkLogger = new W(n, this.onRequestCompleted, this.shouldLogHosts(e.config.networkLoggingHostNames)), this.logger.debug("Starting network logger"), this.networkLogger.start()
            }
            return e.prototype.flush = function() {
                this.networkLogger.flush()
            }, e.prototype.subscribeToUpdates = function(e) {
                this.eventEmitter.addListener(this.emitterName, e)
            }, e.prototype.removeQueryMetricsListener = function(e) {
                this.eventEmitter.removeListener(this.emitterName, e)
            }, e.prototype.createSniffers = function() {
                var e = [];
                if (this.canAccessPerformance(this.window)) {
                    var t = this.createSniffer(this.window);
                    t && (this.logger.debug("Creating network sniffer for main window"), e.push(t))
                }
                for (var n = 0; n < this.window.frames.length; n++)
                    if (this.canAccessFrame(n) && this.canAccessPerformance(this.window.frames[n].window)) {
                        var t = this.createSniffer(this.window.frames[n].window);
                        t && (this.logger.debug("Creating network sniffer for frame", n), e.push(t))
                    }
                return e
            }, e.prototype.canAccessFrame = function(e) {
                try {
                    return !!this.window.frames[e].window
                } catch (t) {
                    return this.logger.warn("Can't access frame", {
                        index: e,
                        err: t
                    }), !1
                }
            }, e.prototype.canAccessPerformance = function(e) {
                try {
                    return r(e.performance)
                } catch (e) {
                    return this.logger.warn("Unable to determine if network sniffing is allowed", e), !1
                }
            }, e.prototype.createSniffer = function(e) {
                try {
                    return new G(this.logger, e.performance, e.location.href)
                } catch (e) {
                    this.logger.warn("Unable to create network sniffer", e)
                }
            }, e
        }(),
        K = n(53),
        $ = n(23),
        Y = function() {
            function e(t, n) {
                var i = this;
                if (this.componentDuration = {
                        latencyStatus: $.a.Unknown
                    }, this.isRoot = !1, this.hasReportedInteractive = !1, this.customEvents = {}, this.hasSentInitializing = !1, this.hasSentInteractive = !1, this.setLocation = function(e) {
                        i.root.setLocation(e)
                    }, this.sendInitializingEvent = function(e, t, n) {
                        i.hasSentInitializing || (i.tracker.trackInitialize(e, t, n, i.componentName, i.relativeStartTime, i.id.toString(), i.startTimestamp, i.isPrePageLoad, i.root && i.root.hasLostVisibility, i.parent && i.parent.id.toString()), i.hasSentInitializing = !0)
                    }, this.sendInteractiveEvent = function(e, t, n) {
                        !i.hasSentInteractive && i.componentDuration.value && (i.tracker.trackInteractive(e, t, n, i.componentName, i.relativeStartTime, i.id.toString(), i.completedTimestamp, i.componentDuration.value, i.isPrePageLoad, i.root && i.root.hasLostVisibility, i.parent && i.parent.id.toString(), i.parent && i.parent.componentName), i.hasSentInteractive = !0)
                    }, this.shouldWarnChild = function() {
                        return i.getCurrentTimestamp() - i.completedTimestamp < 500
                    }, this.id = e.counter++, this.componentName = t, this.parent = n && n.parent, this.children = [], this.parent ? (this.tracker = this.parent.tracker, this.root = this.parent.root || this.parent, this.depth = this.parent.depth + 1, this.parent.registerChild(this)) : this.depth = 0, this.logger = n.logger, this.isPageComponent = this.componentName.endsWith("Page"), this.isPrePageLoad = this.isRoot || this.root && !this.root.completedTimestamp, this.isPageComponent) {
                    var a = n && n.destination;
                    a || (this.logger.error(new Error("The " + this.componentName + " component must supply a canonical destination, ex: directory.index"), "Invalid withLatencyTracking options"), a = this.componentName), this.logger.debug("Set root page to: " + a), this.root && this.root.setPage(this, a)
                }
                this.resetStartTime(), this.raiseUpdate(), this.logger.debug("Latency tracker created")
            }
            return e.prototype.reset = function(e) {
                void 0 === e && (e = !0), this.completedTimestamp && (e && (this.children = [], this.hasReportedInteractive = !1), this.resetStartTime(), this.parent && this.parent.childReset(this), this.logger.debug(this.componentName + " reset", {
                    children: this.children
                }), this.raiseUpdate())
            }, e.prototype.resetChildren = function() {
                if (this.children && this.children.length)
                    for (var e = 0, t = this.children; e < t.length; e++) {
                        var n = t[e];
                        n.resetChildren()
                    }
                this.children = []
            }, e.prototype.reportInteractive = function(e) {
                if (this.hasReportedInteractive) return void this.logger.debug("Already reported interactive");
                this.hasReportedInteractive = !0, this.logger.debug(this.componentName + " reported interactive", {
                    expectedChildCount: e,
                    children: this.getChildNames()
                }), e && (this.expectedChildCount = e), this.checkChildCompleted()
            }, e.prototype.resetCustomEvents = function(e) {
                this.root.customEvents[e] = []
            }, e.prototype.registerCustomEvent = function(e, t, n, i) {
                var a = {
                    key: t,
                    label: n,
                    benchmark: i,
                    duration: {
                        latencyStatus: $.a.Unknown
                    }
                };
                return this.root.customEvents[e] || (this.root.customEvents[e] = []), this.root.customEvents[e].push(a), this.raiseUpdate(), a
            }, e.prototype.reportCustomEvent = function(e) {
                if (!e.duration || !e.duration.value) {
                    var t = this.getCurrentTimestamp() - this.getRootInitTimestamp(),
                        n = t <= e.benchmark ? $.a.Pass : $.a.Fail;
                    e.duration.value = t, e.duration.latencyStatus = n, this.raiseUpdate()
                }
            }, e.prototype.createChild = function(t, n) {
                return new e(t, {
                    destination: n,
                    parent: this,
                    logger: this.logger.withCategory(t)
                })
            }, e.prototype.sendBenchmarkEventsToSpade = function() {
                if (this.root) {
                    var e = this.root.getLocation(),
                        t = this.root.getDestination(),
                        n = this.root.getPageComponentName();
                    if (t && e && n) {
                        this.sendInitializingEvent(t, e, n), this.sendInteractiveEvent(t, e, n);
                        for (var i = 0, a = this.children; i < a.length; i++) {
                            a[i].sendBenchmarkEventsToSpade()
                        }
                    }
                }
            }, e.prototype.raiseUpdate = function() {
                this.root && this.root.raiseUpdate()
            }, e.prototype.markCompleted = function() {
                if (!this.completedTimestamp) {
                    this.completedTimestamp = this.getCurrentTimestamp();
                    var e = Math.round(this.completedTimestamp - this.startTimestamp);
                    this.componentDuration = {
                        value: e,
                        latencyStatus: $.a.Unknown
                    }, this.logger.debug("Done", {
                        componantName: this.componentName,
                        durationMs: this.componentDuration.value
                    }), this.parent && this.parent.childCompleted(this), this.raiseUpdate()
                }
            }, e.prototype.checkChildCompleted = function() {
                var e = this.expectedChildCount ? this.expectedChildCount : this.children.length;
                this.children.filter(function(e) {
                    return e.completedTimestamp
                }).length >= e && (this.logger.debug("All children completed", {
                    componentName: this.componentName,
                    expectedChildCount: e,
                    children: this.getChildNames()
                }), this.markCompleted())
            }, e.prototype.registerChild = function(e) {
                if (this.completedTimestamp) {
                    if (this.root && this.root.completedTimestamp) return void(this.shouldWarnChild() && this.logger.warn("Child attempted to register itself, but parent is already completed", {
                        child: e.componentName,
                        parent: this.componentName
                    }));
                    this.reset(!1)
                }
                this.children.push(e)
            }, e.prototype.getChildNames = function() {
                return this.children.map(function(e) {
                    return e.componentName
                })
            }, e.prototype.getRootInitTimestamp = function() {
                return this.root.startTimestamp
            }, e.prototype.getNavigationStartTimestamp = function() {
                return this.root ? this.root.navigationStart : Date.now()
            }, e.prototype.getCurrentTimestamp = function() {
                return performance.timing.navigationStart + performance.now()
            }, e.prototype.getRelativeStartTimestamp = function() {
                return Math.round(this.startTimestamp - this.getNavigationStartTimestamp())
            }, e.prototype.resetStartTime = function() {
                var e = this.getCurrentTimestamp();
                this.startTimestamp = e, this.relativeStartTime = this.getRelativeStartTimestamp(), this.completedTimestamp = 0, this.componentDuration = {
                    value: void 0,
                    latencyStatus: $.a.Unknown
                }
            }, e.prototype.childReset = function(e) {
                this.children.includes(e) || this.children.push(e), this.completedTimestamp ? this.logger.warn("Child component reset after this one completed", {
                    child: e.componentName
                }) : this.logger.debug("Child component reset", {
                    child: e.componentName
                })
            }, e.prototype.childCompleted = function(e) {
                if (this.completedTimestamp) return void(this.shouldWarnChild() && this.logger.warn("Child attempted to report completed, but parent is already completed", {
                    child: e.componentName,
                    parent: this.componentName
                }));
                this.logger.debug(this.componentName + " child " + e.componentName + " completed", {
                    children: this.getChildNames()
                }), this.hasReportedInteractive && this.checkChildCompleted()
            }, e.counter = 1, e
        }(),
        J = function() {
            function e(e, t) {
                this.tracking = e, this.logger = t.withCategory("tracker"), this.logger.debug("Created")
            }
            return e.prototype.trackNetworkRequestEvent = function(e, t, n, i, a, r) {
                if (r.request_url === this.tracking.getEndpoint()) return void this.logger.debug("Skipping Spade network request.");
                this.tracking.trackBenchmark(L.SpadeEventType.NetworkRequest, v.__assign({
                    is_pre_pageload: i,
                    destination: e,
                    location: t,
                    page_component_name: n,
                    client_time: r.start_time / 1e3,
                    relative_start_time: a
                }, r))
            }, e.prototype.trackCompleteTransition = function(e, t, n, i, a, r, o) {
                this.tracking.trackBenchmark(L.SpadeEventType.CompleteTransition, {
                    client_time: i / 1e3,
                    lost_visibility: o,
                    destination: e,
                    location: t,
                    page_component_name: n,
                    is_app_launch: r,
                    time_from_fetch: a
                })
            }, e.prototype.trackAppBooted = function(e, t, n, i, a, r) {
                this.tracking.trackBenchmark(L.SpadeEventType.AppBooted, {
                    client_time: i / 1e3,
                    lost_visibility: r,
                    destination: e,
                    location: t,
                    page_component_name: n,
                    time_from_fetch: a
                })
            }, e.prototype.trackInitialize = function(e, t, n, i, a, r, o, s, l, c) {
                this.tracking.trackBenchmark(L.SpadeEventType.ComponentInitializing, {
                    destination: e,
                    location: t,
                    page_component_name: n,
                    component: i,
                    component_id: r,
                    parent_component_id: c,
                    client_time: o / 1e3,
                    lost_visibility: l,
                    is_pre_pageload: s,
                    relative_start_time: a
                })
            }, e.prototype.trackInteractive = function(e, t, n, i, a, r, o, s, l, c, u, d) {
                this.tracking.trackBenchmark(L.SpadeEventType.ComponentInteractive, {
                    destination: e,
                    location: t,
                    page_component_name: n,
                    component: i,
                    component_id: r,
                    parent_component_id: u,
                    parent_component: d,
                    client_time: o / 1e3,
                    time_from_initializing: s / 1e3,
                    duration: s,
                    lost_visibility: c,
                    relative_start_time: a,
                    is_pre_pageload: l
                })
            }, e.prototype.trackFetchStart = function(e, t, n, i, a) {
                this.tracking.trackBenchmark(L.SpadeEventType.FetchStart, {
                    destination: e,
                    location: t,
                    page_component_name: n,
                    client_time: i / 1e3,
                    lost_visibility: a
                })
            }, e.prototype.trackApiQuery = function(e, t, n, i, a, r, o, s, l) {
                this.tracking.trackApiQueryBenchmark({
                    destination: e,
                    location: t,
                    client_time: i / 1e3,
                    page_component_name: a,
                    query_name: r,
                    is_pre_pageload: l,
                    execution_time: o,
                    request_time: s,
                    relative_start_time: n
                })
            }, e
        }(),
        X = function(e) {
            function t(t) {
                var n = e.call(this, "Root", {
                    logger: t.logger.withCategory("latency-tracker")
                }) || this;
                if (n.rootInitDuration = {
                        latencyStatus: $.a.Unknown
                    }, n.pageLoadDuration = {
                        latencyStatus: $.a.Unknown
                    }, n.networkEvents = [], n.queryBatchMetrics = [], n.queryEvents = [], n.isFirstLoad = !0, n.isRoot = !0, n.hasLostVisibility = !1, n.emitter = new F.EventEmitter, n.getLocation = function() {
                        return n.location
                    }, n.setLocation = function(e) {
                        n.logger.debug("Updating location", {
                            location: e
                        }), n.location = e, n.sendBenchmarkEventsToSpade()
                    }, n.getDestination = function() {
                        return n.destination
                    }, n.getPageComponentName = function() {
                        return n.page && n.page.componentName
                    }, n.setPage = function(e, t) {
                        n.page = e, n.destination = t, n.sentinel.setPageComponentName(e.componentName)
                    }, n.sendAllEvents = function() {
                        n.networkMonitor && (n.networkMonitor.flush(), n.doReconcileQueries(!0)), n.sendBenchmarkEventsToSpade(), n.sendNetworkRequestsToSpade()
                    }, n.sendFetchStartEvent = function(e, t, i) {
                        n.isFirstLoad && !n.hasSentFetchStart && (n.tracker.trackFetchStart(e, t, i, performance.timing.fetchStart, n.hasLostVisibility), n.hasSentFetchStart = !0)
                    }, n.sendCompleteTransitionEvent = function(e, t, i) {
                        !n.hasSentCompleteTransition && n.pageLoadDuration.value && (n.tracker.trackCompleteTransition(e, t, i, n.completedTimestamp, n.pageLoadDuration.value, n.isFirstLoad, n.hasLostVisibility), n.hasSentCompleteTransition = !0)
                    }, n.sendAppBootedEvent = function(e, t, i) {
                        n.isFirstLoad && !n.hasSentAppBooted && n.rootInitDuration.value && (n.tracker.trackAppBooted(e, t, i, n.startTimestamp, n.rootInitDuration.value, n.hasLostVisibility), n.hasSentAppBooted = !0)
                    }, n.onNetworkRequest = function(e) {
                        var t = e.request_url.startsWith(n.graphqlEndpoint),
                            i = !n.completedTimestamp || e.start_time <= n.completedTimestamp,
                            a = Math.round(e.start_time - n.getNavigationStartTimestamp());
                        n.networkEvents.push({
                            networkEvent: e,
                            latencyStatus: $.a.Unknown,
                            relativeStartTime: a,
                            isPendingSpade: !0,
                            isApiRequest: t,
                            isPrePageload: i,
                            duration: {
                                value: e.duration,
                                latencyStatus: $.a.Unknown
                            }
                        }), n.reconcileQueries()
                    }, n.reconcileQueries = function() {
                        n.queryReconciliationTimer || (n.queryReconciliationTimer = setTimeout(function() {
                            n.queryReconciliationTimer = null, n.doReconcileQueries(!1), n.sendNetworkRequestsToSpade()
                        }, 250))
                    }, n.doReconcileQueries = function(e) {
                        for (var t = n.networkEvents.filter(function(e) {
                                return e.isApiRequest
                            }), i = n.queryEvents.filter(function(e) {
                                return !e.relatedNetworkEvent
                            }), a = 0, r = i; a < r.length; a++) {
                            var o = r[a];
                            ! function(i) {
                                var a = t.find(function(e) {
                                    return e.networkEvent.duration >= i.slowestQueryInBatch && e.networkEvent.start_time >= i.batchTimestamp && e.networkEvent.start_time - i.batchTimestamp < 10
                                });
                                !a && e && (a = t.find(function(e) {
                                    return e.networkEvent.duration >= i.slowestQueryInBatch && e.networkEvent.start_time >= i.batchTimestamp
                                })), a ? (i.relatedNetworkEvent = a.networkEvent, i.isPrePageload = a.isPrePageload, i.requestDuration = {
                                    value: Math.round(a.networkEvent.duration),
                                    latencyStatus: $.a.Unknown
                                }) : e && n.logger.warn("Unable to find a related network event for query", {
                                    queryEvent: i,
                                    filteredApiRequests: t,
                                    allNetworkRequests: n.networkEvents.slice()
                                })
                            }(o)
                        }
                        n.raiseUpdate()
                    }, n.onQuery = function(e) {
                        if (n.completedTimestamp && e.batchTimestamp > n.completedTimestamp) return void n.logger.debug("Query event data skipped, it is post page load.", e);
                        var t = Math.max.apply(Math, e.queries.map(function(e) {
                            return e.durationMs
                        }));
                        n.queryBatchMetrics.push({
                            batchID: e.batchID,
                            batchTimestamp: e.batchTimestamp,
                            latencyStatus: $.a.Unknown,
                            slowestQueryInBatch: t
                        });
                        for (var i = 0, a = e.queries; i < a.length; i++) {
                            var r = a[i];
                            n.queryEvents.push({
                                batchID: e.batchID,
                                batchTimestamp: e.batchTimestamp,
                                relativeStartTime: Math.round(e.batchTimestamp - n.getNavigationStartTimestamp()),
                                queryDuration: {
                                    value: r.durationMs,
                                    latencyStatus: $.a.Unknown
                                },
                                requestDuration: {
                                    latencyStatus: $.a.Unknown
                                },
                                operationName: r.operationName,
                                queryID: r.queryID,
                                slowestQueryInBatch: t,
                                variables: r.variables,
                                latencyStatus: $.a.Unknown,
                                isPendingSpade: !0,
                                isPrePageload: !1
                            })
                        }
                        n.logger.debug("GraphQL query completed: ", {
                            latestQueryData: e,
                            allBatches: n.queryBatchMetrics
                        }), n.reconcileQueries()
                    }, n.sendNetworkRequestsToSpade = function() {
                        if (n.networkEventsEnabled && n.destination && n.location && n.page) {
                            n.logger.debug("Sending ready network and query events to Spade");
                            var e = n.networkEvents.filter(function(e) {
                                return e.isPendingSpade
                            });
                            if (e.length) {
                                for (var t = 0, i = e; t < i.length; t++) {
                                    var a = i[t];
                                    a.isPendingSpade = !1, n.tracker.trackNetworkRequestEvent(n.destination, n.location, n.page.componentName, a.isPrePageload, a.relativeStartTime, a.networkEvent)
                                }
                                n.logger.debug("Sent network events to spade:", {
                                    count: e.length
                                })
                            }
                            var r = n.queryEvents.filter(function(e) {
                                return e.isPendingSpade && e.isPrePageload
                            });
                            if (r.length > 0) {
                                for (var o = 0, s = 0, l = r; s < l.length; s++) {
                                    var c = l[s];
                                    void 0 !== c.requestDuration.value && void 0 !== c.queryDuration.value && (c.isPendingSpade = !1, n.tracker.trackApiQuery(n.destination, n.location, c.relativeStartTime, c.batchTimestamp, n.page.componentName, c.operationName, c.queryDuration.value, c.requestDuration.value, c.isPrePageload), o += 1)
                                }
                                n.logger.debug("Sent " + o + " query events to Spade, " + (r.length - o) + " events skipped because they are not yet ready.")
                            }
                        }
                    }, n.checkLostVisibility = function() {
                        n.hasLostVisibility || (n.hasLostVisibility = document.hidden)
                    }, n.root = n, n.store = t.store, n.networkEventsEnabled = t.networkEventsEnabled, n.componentEventsEnabled = t.componentEventsEnabled, n.toolsEnabled = t.toolsEnabled, n.graphqlEndpoint = t.config.graphqlEndpoint, n.tracker = new J(t.tracking, n.logger), n.navigationStart = performance.timing.navigationStart, n.rootInitDuration = {
                        value: Math.round(n.startTimestamp - n.navigationStart),
                        latencyStatus: $.a.Unknown
                    }, n.networkMonitor = t.networkMonitor, n.sentinel = t.sentinel, n.networkEventsEnabled && n.networkMonitor && n.networkMonitor.subscribeToUpdates(n.onNetworkRequest), n.networkEventsEnabled && t.apollo && t.apollo.addQueryMetricsListener(n.onQuery), t.trackVisibility) try {
                    n.checkLostVisibility(), document.addEventListener("visibilitychange", n.checkLostVisibility)
                } catch (e) {
                    n.logger.warn("Failed to attach event listener for document visibility change, assuming visibility has been lost.", e), n.hasLostVisibility = !0
                }
                return n.raiseUpdate(), n
            }
            return v.__extends(t, e), t.prototype.subscribeToUpdates = function(e) {
                this.emitter.addListener("root-latency-tracker", e)
            }, t.prototype.getCustomEvents = function() {
                return this.customEvents
            }, t.prototype.reset = function() {
                var e = this.getCurrentTimestamp();
                this.customEvents = {}, this.resetChildren(), this.children = [], this.startTimestamp = e, this.navigationStart = e, this.relativeStartTime = 0, this.rootInitDuration = {
                    latencyStatus: $.a.Unknown
                }, this.completedTimestamp = 0, this.componentDuration = {
                    latencyStatus: $.a.Unknown
                }, this.hasReportedInteractive = !1, this.page = void 0, this.isFirstLoad = !1, this.pageLoadDuration = {
                    latencyStatus: $.a.Unknown
                }, this.networkEvents = [], this.queryEvents = [], this.queryBatchMetrics = [], this.hasSentInitializing = !1, this.hasSentInteractive = !1, this.hasSentAppBooted = !1, this.hasSentCompleteTransition = !1, this.hasReportedInteractive = !1, this.hasLostVisibility = !1, this.raiseUpdate(), this.logger.debug("Reset Root")
            }, t.prototype.raiseUpdate = function() {
                var e = this;
                this.toolsEnabled && !this.dispatchTimer && (this.dispatchTimer = setTimeout(function() {
                    e.dispatchTimer = null, e.emitter.emit("root-latency-tracker")
                }, 100))
            }, t.prototype.sendBenchmarkEventsToSpade = function() {
                if (!this.destination || !this.location || !this.page) return void this.logger.debug("Unable to send events to spade. destination or location is not set");
                if (this.sendFetchStartEvent(this.destination, this.location, this.page.componentName), this.sendAppBootedEvent(this.destination, this.location, this.page.componentName), this.componentEventsEnabled && (this.sendInitializingEvent(this.destination, this.location, this.page.componentName), this.sendInteractiveEvent(this.destination, this.location, this.page.componentName)), this.sendCompleteTransitionEvent(this.destination, this.location, this.page.componentName), this.componentEventsEnabled)
                    for (var e = 0, t = this.children; e < t.length; e++) {
                        var n = t[e];
                        n.sendBenchmarkEventsToSpade()
                    }
            }, t.prototype.registerChild = function(t) {
                e.prototype.registerChild.call(this, t), this.logger.debug("Root page got a new child", {
                    newChild: t.componentName,
                    allChildren: this.getChildNames()
                })
            }, t.prototype.checkChildCompleted = function() {
                if (!this.page) return void this.logger.debug("Root page incomplete, pending a page to register.");
                e.prototype.checkChildCompleted.call(this)
            }, t.prototype.markCompleted = function() {
                if (!this.completedTimestamp) {
                    if (!this.page) return void this.logger.warn("Root page attemped to complete without a registered page component.");
                    if (this.completedTimestamp = this.getCurrentTimestamp(), this.componentDuration = {
                            value: Math.round(this.completedTimestamp - this.startTimestamp),
                            latencyStatus: $.a.Unknown
                        }, this.logger.debug("Root tracker done", {
                            durationMs: this.componentDuration
                        }), this.pageLoadDuration = {
                            value: (this.componentDuration.value || 0) + (this.rootInitDuration.value || 0),
                            latencyStatus: $.a.Unknown
                        }, this.logger.debug("Root page completed", {
                            pageLoadDuration: this.pageLoadDuration,
                            rootInitDuration: this.rootInitDuration,
                            componentDuration: this.componentDuration,
                            children: this.getChildNames()
                        }), this.raiseUpdate(), this.sendAllEvents(), this.isFirstLoad) {
                        this.store.dispatch(Object(K.f)());
                        var e = document.getElementById("root");
                        e && e.setAttribute("data-a-page-loaded", Date.now().toString())
                    }
                }
            }, t.prototype.getNavigationStartTimestamp = function() {
                return this.navigationStart > 0 ? this.navigationStart : performance.timing.navigationStart
            }, t
        }(Y),
        Z = {
            forceNetworkLoggingStorageKey: "twilight.force-component-benchmarking",
            forceComponentBenchmarkingStorageKey: "twilight.force-network-monitoring",
            forceToolsStorageKey: "twilight.force-benchmarking-tools"
        },
        ee = {
            networkingThreshold: "benchmark_networking_threshold",
            componentThreshold: "benchmark_component_threshold"
        },
        te = function() {
            function e(e) {
                var t = this;
                this.getRootLatencyTracker = function() {
                    return t.latencyTracker
                }, this.logger = e.logger.withCategory("Benchmarking"), this.seed = Math.round(100 * Math.random()) / 100, this.storage = e.storage;
                var n = e.dynamicSettings.get(ee.networkingThreshold, e.config.defaultNetworkLoggingThreshold),
                    i = e.dynamicSettings.get(ee.componentThreshold, e.config.defaultComponentBenchmarkingThreshold);
                this.toolsEnabled = this.shouldEnableTools(e.config), this.componentsEnabled = this.shouldEnableComponentBenchmarking(e.config, i, this.toolsEnabled), this.networkingEnabled = this.shouldEnableNetworkBenchmarking(e.config, n, this.componentsEnabled, this.toolsEnabled), this.networkingEnabled && (this.networkMonitoring = new Q(e)), this.latencyTracker = new X({
                    componentEventsEnabled: this.componentsEnabled,
                    networkEventsEnabled: this.networkingEnabled,
                    toolsEnabled: this.toolsEnabled,
                    config: e.config,
                    logger: e.logger,
                    apollo: e.apollo,
                    networkMonitor: this.networkMonitoring,
                    sentinel: e.sentinel,
                    tracking: e.tracking,
                    store: e.store,
                    trackVisibility: !0
                }), this.logger.debug("Initialized", {
                    seed: this.seed,
                    toolsEnabled: this.toolsEnabled,
                    componentsEnabled: this.componentsEnabled,
                    componentThreshold: i,
                    networkingEnabled: this.networkingEnabled,
                    networkingThreshold: n
                })
            }
            return e.prototype.shouldEnableTools = function(e) {
                return e.forceComponentBenchmarking ? (this.logger.debug("Tools enabled, due to config."), !0) : !!this.storage.get(Z.forceToolsStorageKey, !1) && (this.logger.debug("Tools enabled, due to local storage."), !0)
            }, e.prototype.shouldEnableComponentBenchmarking = function(e, t, n) {
                return n ? (this.logger.debug("Components enabled, due to Tools being enabled"), !0) : e.forceComponentBenchmarking ? (this.logger.debug("Components enabled, due to config."), !0) : this.storage.get(Z.forceComponentBenchmarkingStorageKey, !1) ? (this.logger.debug("Components enabled, due to local storage."), !0) : this.seed <= t && (this.logger.debug("Components enabled, due to random selection"), !0)
            }, e.prototype.shouldEnableNetworkBenchmarking = function(e, t, n, i) {
                return n || i ? (this.logger.debug("Networking enabled, due to Components or Tools being enabled"), !0) : e.forceNetworkLogging ? (this.logger.debug("Networking enabled, due to config."), !0) : this.storage.get(Z.forceNetworkLoggingStorageKey, !1) ? (this.logger.debug("Networking enabled, due to local storage."), !0) : this.seed <= t && (this.logger.debug("Networking enabled, due to random selection"), !0)
            }, e
        }(),
        ne = n(96),
        ie = n(181),
        ae = n.n(ie),
        re = n(184),
        oe = n.n(re);
    ! function(e) {
        e[e.Debug = 1] = "Debug", e[e.Info = 2] = "Info", e[e.Warn = 3] = "Warn", e[e.Error = 4] = "Error", e[e.Fatal = 5] = "Fatal"
    }(C || (C = {}));
    var se = function() {
            function e(e, t) {
                var n = this;
                if (this.eventEmitter = new F.EventEmitter, this.addMessageListener = function(e) {
                        n.eventEmitter.addListener("message", e)
                    }, this.removeMessageListener = function(e) {
                        n.eventEmitter.removeListener("message", e)
                    }, this.onWindowError = function(e) {
                        e.error ? (e.preventDefault(), n.write(C.Error, "Uncaught error.", void 0, e.error, "uncaught")) : n.write(C.Warn, "Uncaught error, but the error object is null. This is usually caused by a browser permission issue. Please check the browser console.", [{
                            event: e
                        }], new Error("Uncaught error, but the error object is null."), "uncaught")
                    }, e && t) throw new Error("Cannot pass both `options` and `childOptions` arguments.");
                e ? (this.buildType = e.buildType, this.buffer = [], this.minConsoleLogLevel = e.minConsoleLogLevel, this.maxBufferSize = e.maxBufferSize || 1e3) : t && (this.category = t.category, this.rootLogger = t.rootLogger)
            }
            return e.prototype.addWindowErrorListener = function() {
                if (this.rootLogger) throw new Error("Attempted to add child logger to window error listeners.");
                if (this.windowErrorListenerAdded) return void this.warn("Attempted to add window error listener multiple times.");
                this.windowErrorListenerAdded = !0, window.addEventListener("error", this.onWindowError), this.debug("Window error listener added.")
            }, e.prototype.withCategory = function(t) {
                return new e(null, {
                    rootLogger: this.rootLogger || this,
                    category: (this.category ? this.category + "." : "") + t
                })
            }, e.prototype.debug = function(e) {
                for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
                this.write(C.Debug, e, t)
            }, e.prototype.info = function(e) {
                for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
                this.write(C.Info, e, t)
            }, e.prototype.warn = function(e) {
                for (var t = [], n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
                this.write(C.Warn, e, t)
            }, e.prototype.error = function(e, t) {
                for (var n = [], i = 2; i < arguments.length; i++) n[i - 2] = arguments[i];
                this.write(C.Error, t, n, e, "caught")
            }, e.prototype.fatal = function(e, t) {
                for (var n = [], i = 2; i < arguments.length; i++) n[i - 2] = arguments[i];
                this.write(C.Fatal, t, n, e, "fatal")
            }, e.prototype.flush = function() {
                if (this.rootLogger) throw new Error("Cannot flush a child logger.");
                var e = this.buffer;
                return this.buffer = [], this.messagesTruncated && e.unshift({
                    time: e[0].time - 1,
                    level: C[C.Info].toLowerCase(),
                    message: "Log truncated.",
                    args: [{
                        firstMessageTime: this.firstMessageTime,
                        messagesTruncated: this.messagesTruncated,
                        truncationEvents: this.truncationEvents
                    }]
                }), e
            }, e.prototype.write = function(e, t, n, i, a, r, o) {
                if (void 0 === n && (n = []), void 0 === o && (o = !1), this.rootLogger) return void this.rootLogger.write(e, t, n, i, a, this.category, o);
                this.buffer.length === this.maxBufferSize && (this.firstMessageTime || (this.firstMessageTime = this.buffer[0].time), this.truncationEvents = (this.truncationEvents || 0) + 1, this.messagesTruncated = (this.messagesTruncated || 0) + this.buffer.splice(0, Math.ceil(this.maxBufferSize / 10)).length), r = r || this.category, e >= this.minConsoleLogLevel && this.writeToConsole(e, r, t, n, i), e !== C.Debug && this.writeToBuffer(e, r, t, n, i, a, o), !this.onError || e !== C.Error && e !== C.Fatal || this.onError(this)
            }, e.prototype.writeToBuffer = function(e, t, n, i, a, r, o) {
                void 0 === o && (o = !1);
                var s = [],
                    l = {
                        time: Date.now(),
                        level: C[e].toLowerCase(),
                        message: n
                    };
                if (i && i.length > 0 && (l.args = i.map(function(e, t) {
                        if (e instanceof Error) return {
                            name: e.name,
                            message: e.message,
                            stack: e.stack || null
                        };
                        if ("object" == typeof e) try {
                            return JSON.parse(JSON.stringify(e))
                        } catch (e) {
                            return s.push({
                                message: n,
                                argIndex: t,
                                err: e
                            }), "<unserializable>"
                        } else if ("function" == typeof e) return e.name ? "<function " + e.name + ">" : "<anonymous function>";
                        return e
                    })), t && (l.category = t), a && (l.errors = [{
                        name: a.name,
                        message: a.message,
                        stack: a.stack || null,
                        type: r || "caught"
                    }]), this.buffer.push(l), !o)
                    for (var c = 0, u = s; c < u.length; c++) {
                        var p = u[c];
                        this.buildType === d.a.Production ? this.write(C.Warn, "Failed to serialize argument for log message.", [{
                            message: p.message,
                            argIndex: p.argIndex,
                            err: p.err
                        }], void 0, void 0, void 0, !0) : this.write(C.Error, "Failed to serialize argument for log message.", [{
                            message: p.message,
                            argIndex: p.argIndex
                        }], p.err, "caught", t, !0)
                    }
                this.eventEmitter.emit("message", l)
            }, e.prototype.writeToConsole = function(e, t, n, i, a) {
                var r = (new Date).toLocaleTimeString();
                t = t ? "[" + t + "] " : "", n = r + " [" + C[e].toUpperCase() + "] " + t + n, e === C.Fatal && (e = C.Error);
                var o = (console[C[e].toLowerCase()] || console.log).bind(console);
                a ? o.apply(void 0, [n, a].concat(i)) : o.apply(void 0, [n].concat(i))
            }, e
        }(),
        le = n(18),
        ce = n(44),
        ue = function() {
            function e(e) {
                var t = this;
                this.onHistoryChange = function() {
                    t.pageviewID = t.getUniqueID()
                }, this.storage = e.storage, this.tempStorage = e.tempStorage, this.benchmarkID = this.getOrCreateBenchmarkSessionID(), this.deviceID = this.getOrCreateDeviceID(), this.localStorageDeviceID = this.getOrCreateLocalStorageDeviceID(), this.pageviewID = this.getUniqueID(), this.tabID = this.getOrCreateSessionStorageUniqueID(), e.history.listen(this.onHistoryChange)
            }
            return e.prototype.getUniqueID = function() {
                return Object(le.b)().substring(0, 16)
            }, e.prototype.getOrCreateDeviceID = function() {
                var e = b.get("unique_id");
                return e || (e = Object(le.b)().substring(0, 16), b.set("unique_id", e, {
                    expires: 3650,
                    domain: Object(ce.a)(),
                    secure: "https:" === window.location.protocol
                }), e)
            }, e.prototype.getOrCreateBenchmarkSessionID = function() {
                return b.get("twilight.automation_session_id") || Object(le.b)().substring(0, 16)
            }, e.prototype.getOrCreateSessionStorageUniqueID = function() {
                var e = this.tempStorage.get("session_storage_unique_id", "");
                return e || (e = Object(le.b)().substring(0, 16), this.tempStorage.set("session_storage_unique_id", e), e)
            }, e.prototype.getOrCreateLocalStorageDeviceID = function() {
                var e = this.storage.get("local_storage_device_id", "");
                return e || (e = Object(le.b)().substring(0, 16), this.storage.set("local_storage_device_id", e), e)
            }, e
        }(),
        de = function() {
            function e(e, t) {
                this.cache = {}, this.storage = e, this.logger = t
            }
            return e.prototype.get = function(e, t) {
                var n = null;
                try {
                    n = this.storage.getItem(e)
                } catch (t) {
                    this.logger.warn("Failed to load stored value.", t, {
                        key: e
                    }), n = this.cache[e] || null
                }
                if (null === n || "undefined" === n) return t;
                try {
                    return JSON.parse(n)
                } catch (i) {
                    return this.logger.warn("Failed to deserialize stored value, removing from storage.", i, {
                        key: e,
                        value: n
                    }), this.remove(e), t
                }
            }, e.prototype.getOptional = function(e) {
                return this.get(e, null)
            }, e.prototype.set = function(e, t) {
                var n;
                try {
                    n = JSON.stringify(t)
                } catch (n) {
                    throw this.logger.warn("Failed to serialize value.", n, {
                        key: e,
                        value: t
                    }), n
                }
                this.cache[e] = n;
                try {
                    this.storage.setItem(e, n)
                } catch (i) {
                    this.logger.warn("Failed to save value.", i, {
                        key: e,
                        value: t,
                        serializedValue: n
                    })
                }
            }, e.prototype.remove = function(e) {
                delete this.cache[e];
                try {
                    this.storage.removeItem(e)
                } catch (t) {
                    this.logger.warn("Failed to remove key from storage.", t, {
                        key: e
                    })
                }
            }, e.prototype.clear = function() {
                this.cache = {};
                try {
                    this.storage.clear()
                } catch (e) {
                    this.logger.warn("Failed to clear storage.", e)
                }
            }, e
        }(),
        pe = n(344);
    n.d(t, "o", function() {
        return me
    }), n.d(t, "a", function() {
        return he
    }), n.d(t, "b", function() {
        return ge
    }), n.d(t, "c", function() {
        return fe
    }), n.d(t, "d", function() {
        return ve
    }), n.d(t, "e", function() {
        return be
    }), n.d(t, "f", function() {
        return ye
    }), n.d(t, "g", function() {
        return ke
    }), n.d(t, "h", function() {
        return Se
    }), n.d(t, "j", function() {
        return _e
    }), n.d(t, "k", function() {
        return we
    }), n.d(t, "l", function() {
        return Ee
    }), n.d(t, "m", function() {
        return Ce
    }), n.d(t, "n", function() {
        return Ne
    }), t.i = s;
    var me, he, ge, fe, ve, be, ye, ke, Se, _e, we, Ee, Ce, Ne, Te = function() {
        function e(e) {
            var t = this;
            this.dynamicSettings = new ne.a, this.history = o(), this.pageTitle = "Twitch", this.config = e, this.store = new z(this.config);
            var n = this.config.buildType === d.a.Production ? C.Error : C.Debug;
            try {
                var i = localStorage.getItem(this.config.forceMinConsoleLogLevelKey);
                null !== i && (n = Number(i))
            } catch (e) {
                console.error("Failed to get log level override from local storage.", {
                    err: e,
                    key: this.config.forceMinConsoleLogLevelKey
                })
            }
            this.logger = new se({
                minConsoleLogLevel: n,
                maxBufferSize: 1e3,
                buildType: this.config.buildType
            }), this.logger.addWindowErrorListener(), this.storage = new de(localStorage, this.logger.withCategory("storage")), this.tempStorage = new de(sessionStorage, this.logger.withCategory("tempStorage")), this.session = new ue({
                history: this.history,
                storage: this.storage,
                tempStorage: this.tempStorage
            }), this.config.embedded || (this.sentinel = new O({
                buildID: e.buildID,
                endpoint: e.sentinelEndpoint,
                logger: this.logger,
                session: this.session,
                store: this.store
            }), this.logger.onError = function(e) {
                t.sentinel.report(e.flush())
            }), this.adBlockSentinel = new f({
                accountID: e.adblockAccount,
                cid: e.adblockID,
                logger: this.logger
            }), this.adBlockDetector = new h({
                logger: this.logger
            }), this.adBlockDetector.addTwitchGlobal(), this.adBlockDetector.detectAdBlock(), this.apollo = new B({
                config: this.config,
                dynamicSettings: this.dynamicSettings,
                logger: this.logger,
                session: this.session,
                store: this.store
            }), this.tracking = new L.Spade({
                apollo: this.apollo,
                config: this.config,
                endpoint: this.dynamicSettings.get("spade_url", e.defaultSpadeEndpoint),
                logger: this.logger,
                session: this.session,
                store: this.store,
                adBlockSentinel: this.adBlockSentinel,
                adBlockDetector: this.adBlockDetector
            }), this.pubsub = new I(this.store, this.logger), this.intl = new pe.TwilightIntl(e.locales), this.config.embedded || (this.benchmarking = new te({
                apollo: this.apollo,
                config: this.config,
                dynamicSettings: this.dynamicSettings,
                logger: this.logger,
                sentinel: this.sentinel,
                session: this.session,
                storage: this.storage,
                store: this.store,
                tracking: this.tracking,
                window: window
            })), this.experiments = new N({
                logger: this.logger,
                session: this.session,
                store: this.store,
                tracking: this.tracking
            }), this.tmi = new R(this.logger, this.config)
        }
        return e.prototype.mount = function(e, t) {
            u.render(this.wrap(e), t)
        }, e.prototype.wrap = function(e) {
            return l.createElement(c.ApolloProvider, {
                store: this.store.getReduxStore(),
                client: this.apollo.client
            }, e)
        }, e.prototype.setPageTitle = function(e) {
            this.pageTitle = e ? e + " - Twitch" : "Twitch", this.updateDocumentTitle()
        }, e.prototype.setBadgeCount = function(e) {
            this.badgeCount = e, this.updateDocumentTitle()
        }, e.prototype.updateDocumentTitle = function() {
            if (this.badgeCount > 0) {
                var e = this.badgeCount > 99 ? "99+" : "" + this.badgeCount;
                document.title = "(" + e + ") " + this.pageTitle
            } else document.title = this.pageTitle
        }, e
    }()
}, function(e, t, n) {
    "use strict";
    var i, a = n(0),
        r = n(4),
        o = n(14),
        s = n(1),
        l = n(347),
        c = n(56),
        u = (n(236), 100);
    ! function(e) {
        e[e.Resize = 0] = "Resize", e[e.Scroll = 1] = "Scroll", e[e.Wheel = 2] = "Wheel"
    }(i || (i = {}));
    var d = function(e) {
        function t(t) {
            var n = e.call(this, t) || this;
            return n.resizeTimeout = 0, n.receivers = [], n.scrollTimeout = 0, n.wheelTimeout = 0, n.getChildContext = function() {
                return {
                    registerReceiver: n.registerReceiver,
                    requestVisibilityCheck: n.requestVisibilityCheck,
                    getScrollContent: n.getScrollContent,
                    scrollToTop: n.scrollToTop,
                    yScrollTo: n.yScrollTo
                }
            }, n.scrollToTop = function() {
                n.scrollContent && (n.scrollContent.scrollTop = 0), n.onScroll()
            }, n.notifyReceivers = function(e) {
                requestAnimationFrame(function() {
                    if (n.scrollContent) {
                        var t = n.scrollContent.getBoundingClientRect();
                        e && (e.offset = n.scrollContent.scrollTop), n.receivers.forEach(function(n) {
                            n.checkVisible(t, e)
                        })
                    }
                })
            }, n.onResize = function() {
                if (!n.resizeTimeout) {
                    var e = {
                        type: i.Resize,
                        offset: n.scrollContent.scrollTop
                    };
                    n.props.disableDebounce ? n.notifyReceivers(e) : n.resizeTimeout = setTimeout(function() {
                        n.resizeTimeout = 0, n.notifyReceivers(e)
                    }, u)
                }
            }, n.onScroll = function() {
                if (!n.scrollTimeout && n.scrollContent) {
                    var e = {
                        type: i.Scroll,
                        offset: n.scrollContent.scrollTop
                    };
                    n.props.disableDebounce ? n.notifyReceivers(e) : n.scrollTimeout = setTimeout(function() {
                        n.scrollTimeout = 0, n.notifyReceivers(e)
                    }, u)
                }
            }, n.onWheel = function(e) {
                if (!n.wheelTimeout && n.scrollContent) {
                    var t = {
                        type: i.Wheel,
                        offset: n.scrollContent.scrollTop,
                        wheelEvent: e
                    };
                    n.props.disableDebounce ? n.notifyReceivers(t) : n.wheelTimeout = setTimeout(function() {
                        n.wheelTimeout = 0, n.notifyReceivers(t)
                    }, u)
                }
            }, n.registerReceiver = function(e) {
                return n.receivers.push(e), n.requestVisibilityCheck(e),
                    function() {
                        var t = n.receivers.indexOf(e);
                        n.receivers.splice(t, 1)
                    }
            }, n.requestVisibilityCheck = function(e) {
                requestAnimationFrame(function() {
                    var t = n.scrollContent;
                    if (t) {
                        var i = t.getBoundingClientRect();
                        e.checkVisible(i)
                    }
                })
            }, n.setRef = function(e) {
                return n.root = e
            }, n.yScrollTo = function(e) {
                n.scrollContent && (n.scrollContent.scrollTop = e), n.onScroll()
            }, n.getScrollContent = function() {
                return n.scrollContent
            }, n.adjustScrollbarOffset = function(e) {
                if (n.root) {
                    var t = n.root.querySelector(".simplebar-track.vertical");
                    t && e ? t.style.marginTop = e : t && delete t.style.marginTop
                }
            }, t.scrollRef && t.scrollRef(n), n
        }
        return a.__extends(t, e), t.prototype.componentDidMount = function() {
            if (this.root) {
                if (this.simplebarRef = new l(this.root), this.scrollContent = this.simplebarRef.getScrollElement(), this.props.contentClassName) {
                    var e = this.scrollContent.querySelector(".simplebar-content");
                    e && e.classList.add(this.props.contentClassName)
                }
                this.props.scrollContentClassName && this.scrollContent.classList.add(this.props.scrollContentClassName), this.adjustScrollbarOffset(this.props.scrollbarVerticalOffset), window.addEventListener("resize", this.onResize), this.scrollContent.addEventListener("scroll", this.onScroll), this.scrollContent.addEventListener("wheel", this.onWheel), this.notifyReceivers()
            }
        }, t.prototype.componentWillReceiveProps = function(e) {
            this.adjustScrollbarOffset(e.scrollbarVerticalOffset)
        }, t.prototype.componentWillUnmount = function() {
            this.root && (delete this.simplebarRef, this.scrollContent.removeEventListener("scroll", this.onScroll), window.removeEventListener("resize", this.onResize))
        }, t.prototype.render = function() {
            var e = this.props,
                t = (e.disableDebounce, e.suppressScrollX, e.suppressScrollY, e.scrollRef, e.scrollContentClassName, e.contentClassName, a.__rest(e, ["disableDebounce", "suppressScrollX", "suppressScrollY", "scrollRef", "scrollContentClassName", "contentClassName"])),
                n = {
                    "scrollable-area": !0,
                    "scrollable-area--suppress-scroll-x": this.props.suppressScrollX,
                    "scrollable-area--suppress-scroll-y": this.props.suppressScrollY
                };
            return s.createElement("div", a.__assign({
                className: r(t.className, n),
                "data-test-selector": "scrollable-area-wrapper",
                ref: this.setRef
            }, Object(c.a)(this.props), {
                style: this.props.style
            }), s.Children.only(this.props.children))
        }, t.childContextTypes = {
            registerReceiver: o.func,
            requestVisibilityCheck: o.func,
            getScrollContent: o.func,
            scrollToTop: o.func,
            yScrollTo: o.func
        }, t
    }(s.Component);
    n.d(t, !1, function() {
        return "scrollable-area-wrapper"
    }), n.d(t, "a", function() {
        return i
    }), n.d(t, "b", function() {
        return d
    })
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        if (!e) return null;
        switch (e.type) {
            case u.a.Playing:
                return e.game && e.game.name ? Object(c.d)("playing {game}", {
                    game: e.game.name
                }, "PresenceActivity") : Object(c.d)("playing", "PresenceActivity");
            case u.a.Watching:
                if (!t && e.user.hosting && e.user.hosting.displayName) return Object(c.d)("watching {user} with the {community} community", {
                    user: e.user.hosting.displayName,
                    community: e.user.displayName
                }, "PresenceActivity");
                if (!t && e.user.stream && e.user.stream.game && e.user.stream.game.name) return Object(c.d)("watching {user} stream {game}", {
                    user: e.user.displayName,
                    game: e.user.stream.game.name
                }, "PresenceActivity");
                var n = e.user.hosting && e.user.hosting.displayName ? e.user.hosting.displayName : e.user.displayName;
                return Object(c.d)("watching {user}", {
                    user: n
                }, "PresenceActivity");
            case u.a.Streaming:
                return e.stream && e.stream.game && e.stream.game.name ? Object(c.d)("streaming {game}", {
                    game: e.stream.game.name
                }, "PresenceActivity") : Object(c.d)("streaming", "PresenceActivity");
            default:
                return null
        }
    }

    function a(e, t) {
        if (!t) return null;
        switch (t.type) {
            case u.a.Streaming:
                return "/" + e;
            case u.a.Watching:
                return "/" + t.user.login;
            default:
                return null
        }
    }

    function r(e) {
        var t = Object(c.d)("Online", "PresenceAvailability");
        switch (e) {
            case d.a.Away:
                return Object(c.d)("Away", "PresenceAvailability");
            case d.a.Busy:
                return Object(c.d)("Busy", "PresenceAvailability");
            case d.a.Idle:
                return Object(c.d)("Idle", "PresenceAvailability");
            case d.a.Offline:
                return Object(c.d)("Offline", "PresenceAvailability");
            case d.a.Invisible:
                return Object(c.d)("Invisible", "PresenceAvailability");
            case d.a.Online:
            default:
                return t
        }
    }

    function o(e) {
        return function(t) {
            return function(n) {
                function i(t) {
                    var i = n.call(this, t) || this;
                    return i.options = e(t), i
                }
                return g.__extends(i, n), i.prototype.componentDidMount = function() {
                    this.options.skip || this.subscribe(this.options)
                }, i.prototype.componentWillReceiveProps = function(t) {
                    var n = e(t);
                    n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                }, i.prototype.componentWillUnmount = function() {
                    this.unsubscribe()
                }, i.prototype.render = function() {
                    return l.createElement(t, g.__assign({}, this.props))
                }, i.prototype.subscribe = function(e) {
                    this.unsubscriber = Object(f.i)({
                        fragment: e.fragment,
                        id: e.id,
                        topic: e.topic,
                        type: e.type,
                        mutator: e.mutator
                    })
                }, i.prototype.unsubscribe = function() {
                    this.unsubscriber && this.unsubscriber()
                }, i
            }(l.Component)
        }
    }

    function s(e) {
        return function(t) {
            return o(function(t) {
                var n = e(t);
                return {
                    id: "User:" + n.id,
                    skip: n.skip,
                    fragment: y,
                    topic: Object(f.f)(n.currentUserID),
                    type: v.c.Presence,
                    mutator: function(e, t) {
                        if (!t) return null;
                        var i = n.id;
                        if (e.data.user_id !== +i) return t;
                        var a = "$User:" + i + ".activity";
                        return t.availability = e.data.availability.toUpperCase(), t.activity = Object(b.a)(e.data.activity, a), t
                    }
                }
            })(t)
        }
    }
    var l = n(1),
        c = n(2),
        u = n(109),
        d = n(51),
        p = function(e) {
            return l.createElement("span", {
                "data-a-target": "presence-text"
            }, i(e.activity, e.condensed) || r(e.availability))
        },
        m = n(3),
        h = function(e) {
            var t = m._4.Online;
            switch (e.availability) {
                case d.a.Idle:
                case d.a.Away:
                    t = m._4.Away;
                    break;
                case d.a.Busy:
                    t = m._4.Busy;
                    break;
                case d.a.Invisible:
                    t = m._4.Invisible;
                    break;
                case d.a.Offline:
                    t = m._4.Offline;
                    break;
                case d.a.Online:
                    t = m._4.Online;
                    break;
                default:
                    t = m._4.Online
            }
            return l.createElement(m._3, {
                status: t
            })
        },
        g = n(0),
        f = n(30),
        v = n(39),
        b = n(280),
        y = n(450);
    n.d(t, "b", function() {
        return p
    }), n.d(t, "a", function() {
        return h
    }), n.d(t, !1, function() {
        return s
    }), n.d(t, "c", function() {
        return i
    }), n.d(t, "d", function() {
        return a
    }), n.d(t, !1, function() {
        return r
    })
}, function(e, t, n) {
    "use strict";

    function i() {
        if (a.b) {
            return +window.getComputedStyle(a.b).getPropertyValue("width").replace("px", "")
        }
        return 0
    }
    t.a = i;
    var a = n(281)
}, function(e, t, n) {
    "use strict";

    function i() {
        return void 0 === o && (o = s.get(c) || null), o
    }

    function a(e) {
        var t = [];
        if (!e || e.includeChosenLanguage) {
            var n = i();
            n && t.push(n)
        }
        return navigator.languages ? t = t.concat(navigator.languages.slice()) : navigator.language ? t.push(navigator.language) : navigator.userLanguage && t.push(navigator.userLanguage), t
    }

    function r(e) {
        o = e, s.set(c, e, {
            expires: 365,
            domain: Object(l.a)(),
            secure: "https:" === window.location.protocol
        })
    }
    t.a = i, t.b = a, t.c = r;
    var o, s = n(36),
        l = (n.n(s), n(44)),
        c = "language"
}, , , , , , , , , , , , , , function(e, t, n) {
    "use strict";

    function i(e) {
        return function(t) {
            return function(n) {
                function i(t) {
                    var i = n.call(this, t) || this;
                    i.unsubscribers = {};
                    var a = {};
                    return e.map(function(e) {
                        e.skip && e.skip(t) || (a[i.getTopic(e.topic, t)] = {
                            isSubscribing: !0
                        })
                    }), i.state = {
                        status: a,
                        messages: {}
                    }, i
                }
                return a.__extends(i, n), i.prototype.componentDidMount = function() {
                    var t = this;
                    e.map(function(e) {
                        if (!e.skip || !e.skip(t.props)) {
                            var n = t.getTopic(e.topic, t.props);
                            t.unsubscribers[n] = o.j.subscribe({
                                topic: n,
                                success: function() {
                                    t.setState(function(e) {
                                        return {
                                            status: a.__assign({}, e.status, (t = {}, t[n] = {
                                                isSubscribing: !1
                                            }, t))
                                        };
                                        var t
                                    })
                                },
                                failure: function(e) {
                                    t.setState(function(t) {
                                        return {
                                            status: a.__assign({}, t.status, (i = {}, i[n] = {
                                                error: e,
                                                isSubscribing: !1
                                            }, i))
                                        };
                                        var i
                                    })
                                },
                                onMessage: function(n) {
                                    e.mapMessageTypesToProps[n.type || ""] ? t.setState(function(t) {
                                        return {
                                            messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps[n.type || ""]] = n, i))
                                        };
                                        var i
                                    }) : e.mapMessageTypesToProps["*"] && t.setState(function(t) {
                                        return {
                                            messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = n, i))
                                        };
                                        var i
                                    })
                                }
                            })
                        }
                    })
                }, i.prototype.componentWillReceiveProps = function(t) {
                    var n = this,
                        i = {},
                        r = {};
                    e.forEach(function(e) {
                        if (!e.skip || !e.skip(t)) {
                            var s = n.getTopic(e.topic, t);
                            i[s] || (i[s] = {
                                isSubscribing: !0
                            }), n.unsubscribers[s] ? r[s] = n.unsubscribers[s] : r[s] = o.j.subscribe({
                                topic: s,
                                success: function() {
                                    n.setState(function(e) {
                                        return {
                                            status: a.__assign({}, e.status, (t = {}, t[s] = {
                                                isSubscribing: !1
                                            }, t))
                                        };
                                        var t
                                    })
                                },
                                failure: function(e) {
                                    n.setState(function(t) {
                                        return {
                                            status: a.__assign({}, t.status, (n = {}, n[s] = {
                                                error: e,
                                                isSubscribing: !1
                                            }, n))
                                        };
                                        var n
                                    })
                                },
                                onMessage: function(t) {
                                    e.mapMessageTypesToProps[t.type || ""] ? n.setState(function(n) {
                                        return {
                                            messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps[t.type || ""]] = t, i))
                                        };
                                        var i
                                    }) : e.mapMessageTypesToProps["*"] && n.setState(function(n) {
                                        return {
                                            messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = t, i))
                                        };
                                        var i
                                    })
                                }
                            })
                        }
                    }), Object.keys(this.unsubscribers).forEach(function(e) {
                        r[e] || n.unsubscribers[e]()
                    }), this.unsubscribers = r, this.setState(function(e) {
                        return {
                            status: a.__assign({}, e.status, i)
                        }
                    })
                }, i.prototype.componentWillUnmount = function() {
                    var e = this;
                    Object.keys(this.unsubscribers).map(function(t) {
                        return e.unsubscribers[t]()
                    })
                }, i.prototype.render = function() {
                    var e = {
                        pubsub: {
                            messages: this.state.messages,
                            status: this.state.status
                        }
                    };
                    return r.createElement(t, a.__assign({}, this.props, e))
                }, i.prototype.getTopic = function(e, t) {
                    return "string" == typeof e ? e : e(t)
                }, i
            }(r.Component)
        }
    }
    var a = n(0),
        r = n(1),
        o = n(2);
    n.d(t, "a", function() {
        return i
    })
}, function(e, t, n) {
    "use strict";
    n.d(t, "b", function() {
        return l
    }), n.d(t, "c", function() {
        return c
    }), n.d(t, "a", function() {
        return d
    }), n.d(t, "e", function() {
        return h
    }), n.d(t, "d", function() {
        return g
    });
    var i = n(0),
        a = n(267),
        r = {
            "^B-?\\)$": "B)",
            "^:-?[z|Z|\\|]$": ":|",
            "^:-?\\)$": ":)",
            "^:-?\\($": ":(",
            "^:-?(p|P)$": ":P",
            "^;-?(p|P)$": ";P",
            "^:-?[\\\\/]$": ":/",
            "^;-?\\)$": ";)",
            "^R-?\\)$": "R)",
            "^:>$": ":>",
            "^[oO](_|\\.)[oO]$": "O_o",
            "^:-?D$": ":D",
            "^:-?(o|O)$": ":O",
            "^>\\($": ">(",
            "^:-?(?:7|L)$": ":7",
            "^:-?(S|s)$": ":S",
            "^#-?[\\\\/]$": "#/",
            "^<\\]$": "<]",
            "^<3$": "<3",
            "^&lt;3$": "<3",
            "^&lt;\\]$": "<]",
            "^&gt;\\($": ">("
        },
        o = ["1.0", "2.0", "3.0"],
        s = new Set([457, 33, 42, 0]),
        l = function(e) {
            return e.map(function(e) {
                var t = m(e.token),
                    n = r[t] || t,
                    a = o.reduce(function(t, n) {
                        var i = t.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x");
                        return "3.0" !== n && (i = i.concat(", ")), i
                    }, "");
                return i.__assign({
                    displayName: n,
                    srcSet: a
                }, e)
            })
        },
        c = function(e) {
            var t = m(e);
            return r[t] || t
        },
        u = function(e) {
            return e.slice().sort(function(e, t) {
                return parseInt(e.id, 10) - parseInt(t.id, 10)
            })
        },
        d = function(e) {
            for (var t = [], n = [], i = 0, a = e; i < a.length; i++) {
                var r = a[i];
                s.has(parseInt(r.id, 10)) ? t.push({
                    id: r.id,
                    emotes: l(u(r.emotes))
                }) : n.push({
                    id: r.id,
                    emotes: l(u(r.emotes))
                })
            }
            return n.concat(t)
        },
        p = function(e) {
            return /[\|\\\^\$\*\+\?\:\#]/.test(e)
        },
        m = function(e) {
            return p(e) ? "^" + e.replace(/\\(?=[&;:])/g, "") + "$" : e
        },
        h = function(e, t) {
            var n = a.b,
                i = [],
                r = [],
                o = [],
                s = new RegExp("^" + t, "i");
            return e.forEach(function(e) {
                n[e.token] ? o.push(e) : e.token.match(s) ? i.push(e) : r.push(e)
            }), i.sort(function(e, t) {
                return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
            }), r.sort(function(e, t) {
                return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
            }), o.sort(function(e, t) {
                return n[t.token].count - n[e.token].count
            }), o.concat(i).concat(r)
        },
        g = function(e) {
            var t = {};
            return e.filter(function(e) {
                return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
            })
        }
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        if (void 0 === t && (t = {}), 0 === Object.keys(t).length) return e;
        var n = new URL(e),
            i = r.stringify(a.__assign({}, r.parse(n.search), t));
        return "" + n.origin + n.pathname + "?" + i + n.hash
    }
    t.a = i;
    var a = n(0),
        r = n(20);
    n.n(r)
}, function(e, t, n) {
    "use strict";
    var i = n(277);
    n.d(t, "a", function() {
        return i.b
    }), n.d(t, "b", function() {
        return i.c
    }), n.d(t, "c", function() {
        return i.d
    }), n.d(t, "d", function() {
        return i.e
    }), n.d(t, "e", function() {
        return i.f
    }), n.d(t, "f", function() {
        return i.g
    }), n.d(t, "g", function() {
        return i.h
    }), n.d(t, "h", function() {
        return i.i
    }), n.d(t, "i", function() {
        return i.j
    }), n.d(t, "j", function() {
        return i.k
    }), n.d(t, "k", function() {
        return i.m
    }), n.d(t, "l", function() {
        return i.p
    }), n.d(t, "m", function() {
        return i.q
    })
}, function(e, t, n) {
    "use strict";

    function i() {
        return {
            show: !1,
            modalID: null,
            modalProps: null
        }
    }

    function a(e) {
        var t = p.get(e);
        return t || (t = e.name + ":" + Object(c.a)(), p.set(e, t), d[t] = e), t
    }

    function r(e, t) {
        switch (void 0 === e && (e = i()), t.type) {
            case u.b:
                return {
                    show: !0,
                    modalID: a(t.modalComponent),
                    modalProps: t.modalProps
                };
            case u.a:
                return {
                    show: !1,
                    modalID: null,
                    modalProps: null
                };
            default:
                return e
        }
    }

    function o(e) {
        return e.modal.modalID ? d[e.modal.modalID] : null
    }

    function s(e, t) {
        return e.modal.show && e.modal.modalID === a(t)
    }
    t.a = o, t.b = s;
    var l = n(2),
        c = n(18),
        u = n(38),
        d = {},
        p = new Map;
    l.n.store.registerReducer("modal", r)
}, , , , , function(e, t, n) {
    "use strict";

    function i(e) {
        var t = encodeURIComponent(JSON.stringify(e)),
            n = t.replace(/%([0-9A-F]{2})/g, function(e, t) {
                return String.fromCharCode(Number("0x" + t))
            }),
            i = btoa(n);
        return "data=" + encodeURIComponent(i)
    }
    t.a = i
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i = function() {
        function e() {}
        return e.prototype.get = function(e, t) {
            if ("experiments" === e) return t;
            var n = window.__twilightSettings && window.__twilightSettings[e];
            return void 0 !== n ? n : t
        }, e
    }()
}, , , , , , , , function(e, t, n) {
    "use strict";

    function i(e) {
        return Object(r.bindActionCreators)({
            onClose: o.c
        }, e)
    }
    var a = n(6),
        r = n(9),
        o = n(38),
        s = n(0),
        l = n(1),
        c = n(2),
        u = n(112),
        d = n(3),
        p = (n(230), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleHistoryChange = function() {
                    t.handleClose()
                }, t.handleGlobalKeypress = function(e) {
                    t.props.ignoreEscKey || 27 !== e.which || t.handleClose()
                }, t.handleGlobalClick = function(e) {
                    var n = e.target;
                    t.props.closeOnBackdropClick && n.matches("." + u.b) && t.handleClose()
                }, t.handleClose = function() {
                    t.props.onClose()
                }, t
            }
            return s.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.ignoreEscKey || document.addEventListener("keydown", this.handleGlobalKeypress), this.props.closeOnBackdropClick && document.addEventListener("click", this.handleGlobalClick), this.props.closeOnPageNavigation && (this.historyUnlisten = c.n.history.listen(this.handleHistoryChange))
            }, t.prototype.componentWillUnmount = function() {
                document.removeEventListener("keydown", this.handleGlobalKeypress), document.removeEventListener("click", this.handleGlobalKeypress), this.historyUnlisten && this.historyUnlisten()
            }, t.prototype.render = function() {
                return l.createElement("div", {
                    className: "modal__close-button"
                }, l.createElement(d.v, {
                    overlay: !0,
                    onClick: this.handleClose,
                    ariaLabel: Object(c.d)("Close modal", "ModalCloser"),
                    icon: d._9.Close,
                    "data-a-target": "modalClose"
                }))
            }, t
        }(l.PureComponent)),
        m = Object(a.a)(null, i)(p);
    n.d(t, "a", function() {
        return m
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        var t = r.b.get("prime_blocked_regions", []);
        return !!e && !t.includes(e.toUpperCase())
    }

    function a(e) {
        var t = ["US"];
        return !e || !t.includes(e.toUpperCase())
    }
    t.b = i, t.a = a;
    var r = n(2)
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return function(t) {
            return function(n) {
                function i(t) {
                    var i = n.call(this, t) || this;
                    return i.options = e(t), i
                }
                return a.__extends(i, n), i.prototype.componentDidMount = function() {
                    this.options.skip || this.subscribe(this.options)
                }, i.prototype.componentWillReceiveProps = function(t) {
                    var n = e(t);
                    n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                }, i.prototype.componentWillUnmount = function() {
                    this.unsubscribe()
                }, i.prototype.render = function() {
                    return r.createElement(t, a.__assign({}, this.props))
                }, i.prototype.subscribe = function(e) {
                    this.unsubscriber = Object(o.j)({
                        query: e.query,
                        variables: e.variables,
                        topic: e.topic,
                        type: e.type,
                        types: e.types,
                        mutator: e.mutator,
                        skipMessage: e.skipMessage
                    })
                }, i.prototype.unsubscribe = function() {
                    this.unsubscriber && this.unsubscriber()
                }, i
            }(r.Component)
        }
    }
    var a = n(0),
        r = n(1),
        o = n(30);
    n.d(t, "a", function() {
        return i
    })
}, function(e, t, n) {
    "use strict";

    function i() {
        return Math.floor(((new Date).getTime() - 6e5) / 1e3)
    }

    function a() {
        var e = new Date;
        return e.setMonth(e.getMonth() - 1), Math.floor(e.getTime() / 1e3)
    }
    n.d(t, "a", function() {
        return u
    });
    var r = n(0),
        o = n(500),
        s = (n.n(o), n(66)),
        l = n(269),
        c = {
            games: {
                indexName: s.a.Games,
                hitsPerPage: 2,
                topNumericFilters: ["popularity>1"],
                singleTypeNumericFilters: [],
                optionalFacetFilters: ""
            },
            videos: {
                indexName: s.a.Videos,
                hitsPerPage: 6,
                get topNumericFilters() {
                    return ["created_at>" + a()]
                },
                singleTypeNumericFilters: [],
                optionalFacetFilters: ""
            },
            users: {
                indexName: s.a.Users,
                hitsPerPage: 2,
                topNumericFilters: ["followers>50"],
                singleTypeNumericFilters: [],
                optionalFacetFilters: ""
            },
            channels: {
                indexName: s.a.Channels,
                hitsPerPage: 6,
                get topNumericFilters() {
                    return ["channel_count>10", "updated_on>" + i()]
                },
                get singleTypeNumericFilters() {
                    return ["updated_on>" + i()]
                },
                optionalFacetFilters: ""
            },
            communities: {
                indexName: s.a.Communities,
                hitsPerPage: 2,
                topNumericFilters: ["channels>9"],
                singleTypeNumericFilters: [],
                optionalFacetFilters: ""
            }
        },
        u = function() {
            function e(e, t) {
                this.client = o(e, t)
            }
            return e.prototype.queryTopResults = function(e, t) {
                return r.__awaiter(this, void 0, void 0, function() {
                    var n, i, a, o, s;
                    return r.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                return n = [], i = [], n.push(this.getTopResult(c.games, e)), n.push(this.getTopResult(c.videos, e)), n.push(this.getTopResult(c.users, e)), n.push(this.getTopResult(c.channels, e)), n.push(this.getTopResult(c.communities, e)), i.push(this.getTotalResult(c.games, e)), i.push(this.getTotalResult(c.videos, e)), i.push(this.getTotalResult(c.users, e)), i.push(this.getTotalResult(c.channels, e)), i.push(this.getTotalResult(c.communities, e)), [4, this.client.search(n.concat(i))];
                            case 1:
                                return a = r.sent(), o = a.results, s = {
                                    id: t,
                                    games: {
                                        totalHits: o[5].nbHits,
                                        hits: o[0].hits
                                    },
                                    videos: {
                                        totalHits: o[6].nbHits,
                                        hits: o[1].hits
                                    },
                                    users: {
                                        totalHits: o[7].nbHits,
                                        hits: o[2].hits
                                    },
                                    channels: {
                                        totalHits: o[8].nbHits,
                                        hits: o[3].hits
                                    },
                                    communities: {
                                        totalHits: o[9].nbHits,
                                        hits: o[4].hits
                                    }
                                }, [2, s]
                        }
                    })
                })
            }, e.prototype.queryForType = function(e, t, n, i) {
                var a = void 0 === i ? {} : i,
                    o = a.page,
                    l = void 0 === o ? 0 : o,
                    u = a.hitsPerPage,
                    d = void 0 === u ? 50 : u,
                    p = a.facetFilters,
                    m = void 0 === p ? "" : p,
                    h = a.numericFilters;
                return r.__awaiter(this, void 0, void 0, function() {
                    var i, a, o, u, p, g, f, v, b = this;
                    return r.__generator(this, function(y) {
                        switch (y.label) {
                            case 0:
                                switch (i = {
                                    id: n,
                                    currentPage: l
                                }, a = function(e) {
                                    return r.__awaiter(b, void 0, void 0, function() {
                                        var n, a;
                                        return r.__generator(this, function(r) {
                                            switch (r.label) {
                                                case 0:
                                                    return n = {
                                                        indexName: e.indexName,
                                                        query: t,
                                                        params: {
                                                            page: l,
                                                            hitsPerPage: d,
                                                            numericFilters: h || e.singleTypeNumericFilters,
                                                            facets: "*",
                                                            facetFilters: m
                                                        }
                                                    }, [4, this.client.search([n])];
                                                case 1:
                                                    return a = r.sent(), i.exhaustedHits = !a.results[0].nbHits || a.results[0].hits.length < d, [2, {
                                                        totalHits: a.results[0].nbHits,
                                                        hits: a.results[0].hits
                                                    }]
                                            }
                                        })
                                    })
                                }, o = e) {
                                    case s.a.Games:
                                        return [3, 1];
                                    case s.a.Users:
                                        return [3, 3];
                                    case s.a.Channels:
                                        return [3, 5];
                                    case s.a.Videos:
                                        return [3, 7];
                                    case s.a.Communities:
                                        return [3, 9]
                                }
                                return [3, 11];
                            case 1:
                                return u = i, [4, a(c.games)];
                            case 2:
                                return u.games = y.sent(), [3, 12];
                            case 3:
                                return p = i, [4, a(c.users)];
                            case 4:
                                return p.users = y.sent(), [3, 12];
                            case 5:
                                return g = i, [4, a(c.channels)];
                            case 6:
                                return g.channels = y.sent(), [3, 12];
                            case 7:
                                return f = i, [4, a(c.videos)];
                            case 8:
                                return f.videos = y.sent(), [3, 12];
                            case 9:
                                return v = i, [4, a(c.communities)];
                            case 10:
                                return v.communities = y.sent(), [3, 12];
                            case 11:
                                return [2, null];
                            case 12:
                                return [2, i]
                        }
                    })
                })
            }, e.prototype.queryVideos = function(e, t, n) {
                return r.__awaiter(this, void 0, void 0, function() {
                    var i, a, o, u;
                    return r.__generator(this, function(r) {
                        switch (r.label) {
                            case 0:
                                switch (n.sort) {
                                    case l.b.Newest:
                                        i = s.a.VideosNewest;
                                        break;
                                    case l.b.Popular:
                                    default:
                                        i = s.a.Videos
                                }
                                switch (a = [], n.length) {
                                    case l.a.Short:
                                        a.push("length<=900");
                                        break;
                                    case l.a.Long:
                                        a.push("length>900")
                                }
                                switch (o = {
                                    indexName: i,
                                    query: e,
                                    params: {
                                        page: 0,
                                        hitsPerPage: c.videos.hitsPerPage,
                                        numericFilters: a,
                                        facets: "*",
                                        facetFilters: ""
                                    }
                                }, n.type) {
                                    case l.c.PastBroadcasts:
                                        o.params.facetFilters = "broadcast_type:archive";
                                        break;
                                    case l.c.Uploads:
                                        o.params.facetFilters = "broadcast_type:upload";
                                        break;
                                    case l.c.Highlights:
                                        o.params.facetFilters = "broadcast_type:highlight"
                                }
                                return [4, this.client.search([o])];
                            case 1:
                                return u = r.sent(), [2, {
                                    id: t,
                                    totalHits: u.results[0].nbHits,
                                    hits: u.results[0].hits
                                }]
                        }
                    })
                })
            }, e.prototype.getTopResult = function(e, t) {
                return {
                    indexName: e.indexName,
                    query: t,
                    params: {
                        page: 0,
                        hitsPerPage: e.hitsPerPage,
                        numericFilters: e.topNumericFilters
                    }
                }
            }, e.prototype.getTotalResult = function(e, t) {
                return {
                    indexName: e.indexName,
                    query: t,
                    params: {
                        hitsPerPage: 0,
                        numericFilters: e.singleTypeNumericFilters
                    }
                }
            }, e
        }()
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return "subscribe-button-modal-tab-" + e
    }
    var a, r = n(0),
        o = n(1),
        s = n(2),
        l = n(140),
        c = n(88),
        u = n(87),
        d = n(5),
        p = n(139),
        m = n(273),
        h = n(279),
        g = n(141),
        f = n(50),
        v = n(3),
        b = (n(487), "gift-subscription-button"),
        y = "subscribe-button";
    ! function(e) {
        e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
    }(a || (a = {}));
    var k = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.toggleActiveTab = function(e) {
                    if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-a-target")) {
                        case "subscribe-button-modal-tab-" + a.Prime:
                            n.setState({
                                activeTab: a.Prime,
                                currentPurchasePrice: n.messages.tier1Price
                            }), n.props.onSelectTierTab(a.Prime);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier1:
                            n.setState({
                                activeTab: a.Tier1,
                                currentPurchasePrice: n.messages.tier1Price
                            }), n.props.onSelectTierTab(a.Tier1);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier2:
                            n.setState({
                                activeTab: a.Tier2,
                                currentPurchasePrice: n.messages.tier2Price
                            }), n.props.onSelectTierTab(a.Tier2);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier3:
                            n.setState({
                                activeTab: a.Tier3,
                                currentPurchasePrice: n.messages.tier3Price
                            }), n.props.onSelectTierTab(a.Tier3);
                            break;
                        default:
                            n.setState({
                                activeTab: a.Prime,
                                currentPurchasePrice: n.messages.tier1Price
                            }), n.props.onSelectTierTab(a.Prime)
                    }
                }, n.getTabTitle = function() {
                    switch (n.state.activeTab) {
                        case a.Prime:
                            return n.messages.freeSubWithPrime;
                        case a.Tier1:
                            return n.messages.tier1Sub;
                        case a.Tier2:
                            return n.messages.tier2Sub;
                        case a.Tier3:
                            return n.messages.tier3Sub;
                        default:
                            return n.messages.tier1Sub
                    }
                }, n.getTierSubscribeButton = function() {
                    var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                    return n.props.isGift ? n.props.giftRecipient ? o.createElement(v.u, {
                        ariaLabel: n.messages.giftSubscription + " " + n.state.currentPurchasePrice,
                        "data-test-selector": b,
                        onClick: n.reportGiftCheckoutAction,
                        targetBlank: !0,
                        purchase: n.state.currentPurchasePrice,
                        linkTo: Object(c.a)(e.url, {
                            recipient: n.props.giftRecipient
                        })
                    }, n.messages.giftSubscription) : o.createElement(v.u, {
                        ariaLabel: n.messages.giftSubscription + " " + n.state.currentPurchasePrice,
                        "data-test-selector": b,
                        onClick: n.onGiftSelect,
                        purchase: n.state.currentPurchasePrice
                    }, n.messages.giftSubscription) : n.state.subbedTier === n.state.activeTab && n.state.activeTab === a.Prime ? o.createElement(h.a, {
                        authToken: n.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: n.props.isSubscribed,
                        isSubscribedWithPrime: n.props.subbedTier === p.a,
                        onSubscribedWithPrime: n.onSubscribedWithPrime,
                        reportSubMenuAction: n.props.reportSubMenuAction,
                        subLogin: n.props.subLogin,
                        userHasPrime: n.props.userHasPrime,
                        canPrimeSubscribe: n.props.canPrimeSubscribe
                    }) : o.createElement(m.a, {
                        isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                        tierPrice: n.state.currentPurchasePrice,
                        reportSubAction: n.props.reportSubMenuAction,
                        url: e.url,
                        "data-a-target": "subscribe-now-button",
                        "data-test-selector": y
                    })
                }, n.onSubscribedWithPrime = function() {
                    n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                }, n.reportGiftCheckoutAction = function() {
                    n.props.reportSubMenuAction({
                        action: f.a.BuyGiftSub,
                        checkoutButtonTier: n.state.currentPurchasePrice,
                        giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                    })
                }, n.onGiftSelect = function() {
                    n.props.reportSubMenuAction({
                        action: f.a.GiftASub,
                        checkoutButtonTier: n.state.currentPurchasePrice
                    }), n.props.onGiftSelect && n.props.onGiftSelect()
                }, n.mapSubbedTierToTabs = function(e) {
                    e.subbedTier === l.a.Prime ? (n.setState({
                        activeTab: a.Prime,
                        subbedTier: a.Prime
                    }), e.onSelectTierTab(a.Prime)) : e.subbedTier === l.a.Tier1 ? (n.setState({
                        activeTab: a.Tier1,
                        subbedTier: a.Tier1
                    }), e.onSelectTierTab(a.Tier1)) : e.subbedTier === l.a.Tier2 ? (n.setState({
                        activeTab: a.Tier2,
                        subbedTier: a.Tier2
                    }), e.onSelectTierTab(a.Tier2)) : e.subbedTier === l.a.Tier3 ? (n.setState({
                        activeTab: a.Tier3,
                        subbedTier: a.Tier3
                    }), e.onSelectTierTab(a.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(a.Prime)
                }, n.getExtraEmotes = function(e) {
                    return (e === a.Tier2 ? Object(u.b)(n.props.subscriptionProducts[1].emotes) : Object(u.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                        return o.createElement(v.U, {
                            display: v.H.InlineFlex,
                            margin: {
                                right: .5
                            },
                            key: e.id
                        }, o.createElement("img", {
                            srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                        }))
                    })
                }, n.state = {
                    activeTab: a.Tier1,
                    currentPurchasePrice: n.props.subscriptionProducts[0].price,
                    subbedTier: null
                }, n
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.setMessages(this.props), this.mapSubbedTierToTabs(this.props)
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.setMessages(e)
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = null;
                this.state.subbedTier && (e = o.createElement(v.U, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: .5
                    },
                    className: "subscription-balloon-options__subbed-star"
                }, o.createElement(v._8, {
                    asset: v._9.Star
                })));
                var t = o.createElement(v._21, null),
                    n = null,
                    r = null,
                    c = null,
                    u = o.createElement(v.U, {
                        display: v.H.InlineFlex
                    }, this.state.subbedTier === a.Tier3 && e, o.createElement(v._18, {
                        active: this.state.activeTab === a.Tier3,
                        "data-a-target": i(a.Tier3),
                        onClick: this.toggleActiveTab
                    }, this.messages.tier3TabName));
                this.hasDiscount(this.props) && this.state.activeTab !== a.Prime && (t = o.createElement(v.U, null, o.createElement(v._21, {
                    className: "tw-subscription-modal__old-price"
                }, o.createElement("s", null, Object(g.a)(this.props.subscriptionProducts[this.state.activeTab - 1].self.oldPrice), " / Month")), o.createElement(v._21, {
                    className: "tw-subscription-modal__new-price",
                    type: v._26.H5,
                    bold: !0
                }, Object(g.a)(this.props.subscriptionProducts[this.state.activeTab - 1].self.newPrice), " for the first month (Save 50%)"))), this.props.subbedTier !== l.a.Prime || this.props.isGift || (n = o.createElement(v.U, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: 2
                    }
                }, o.createElement(v.U, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: 1
                    },
                    className: "subscription-balloon-options__prime-crown"
                }, o.createElement(v._8, {
                    asset: v._9.Crown
                })), o.createElement(v._18, {
                    active: this.state.activeTab === a.Prime,
                    "data-a-target": i(a.Prime),
                    onClick: this.toggleActiveTab
                }, this.messages.prime))), this.props.subbedTier && this.props.subbedTier !== l.a.Tier1 || (r = o.createElement(v.U, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: 2
                    }
                }, this.state.subbedTier === a.Tier1 && e, o.createElement(v._18, {
                    active: this.state.activeTab === a.Tier1,
                    "data-a-target": i(a.Tier1),
                    onClick: this.toggleActiveTab
                }, this.messages.tier1TabName))), this.props.subbedTier && this.props.subbedTier !== l.a.Prime && this.props.subbedTier !== l.a.Tier1 && this.props.subbedTier !== l.a.Tier2 || (c = o.createElement(v.U, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: 2
                    }
                }, this.state.subbedTier === a.Tier2 && e, o.createElement(v._18, {
                    active: this.state.activeTab === a.Tier2,
                    "data-a-target": i(a.Tier2),
                    onClick: this.toggleActiveTab
                }, this.messages.tier2TabName)));
                var d = null;
                return (this.messages.tier2EmoteCount > 0 && this.state.activeTab === a.Tier2 || this.messages.tier3EmoteCount > 0 && this.state.activeTab === a.Tier3) && (d = o.createElement(v.U, {
                    display: v.H.InlineFlex,
                    alignItems: v.c.Center
                }, this.getExtraEmotes(this.state.activeTab), o.createElement(v._21, {
                    bold: !0
                }, Object(s.d)("Plus {extraEmoteCount, number} extra channel emote(s)", {
                    extraEmoteCount: this.state.activeTab === a.Tier2 ? this.messages.tier2EmoteCount : this.messages.tier3EmoteCount
                }, "SubTierTabs")))), o.createElement(v.U, {
                    className: "channel-header__subscription-balloon-options"
                }, o.createElement(v.U, {
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(v._19, null, n, r, c, u)), o.createElement(v.U, null, o.createElement(v.U, {
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(v._21, {
                    type: v._26.H5,
                    bold: !0
                }, this.getTabTitle())), o.createElement(v.U, {
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(v._21, null, this.messages.subTierBenefits)), d, t, o.createElement(v.U, {
                    margin: {
                        top: 1,
                        right: 1
                    }
                }, this.getTierSubscribeButton())))
            }, t.prototype.setMessages = function(e) {
                var t = e.subscriptionProducts[1].emotes.length,
                    n = t + e.subscriptionProducts[2].emotes.length;
                this.messages = {
                    tier2EmoteCount: t,
                    tier3EmoteCount: n,
                    prime: Object(s.d)("Prime", "SubTierTabs"),
                    subscribed: Object(s.d)("Subscribed", "SubTierTabs"),
                    subTierBenefits: Object(s.d)("Includes {availableEmoteCount, number} emoticon(s), subscriber badge, customizable messages upon subscribing, and ad-free viewing", {
                        availableEmoteCount: e.subscriptionProducts[0].emotes.length
                    }, "SubTierTabs"),
                    tier1Price: e.subscriptionProducts[0].price,
                    tier2Price: e.subscriptionProducts[1].price,
                    tier3Price: e.subscriptionProducts[2].price,
                    tier1TabName: e.subscriptionProducts[0].price,
                    tier2TabName: e.subscriptionProducts[1].price,
                    tier3TabName: e.subscriptionProducts[2].price,
                    subscribeNow: Object(s.d)("Subscribe Now", "SubTierTabs"),
                    freeSubWithPrime: Object(s.d)("Free Channel Sub with Twitch Prime", "SubTierTabs"),
                    giftSubscription: Object(s.d)("Gift A Subscription", "SubTierTabs"),
                    tier1Sub: e.subscriptionProducts[0].displayName,
                    tier2Sub: e.subscriptionProducts[1].displayName,
                    tier3Sub: e.subscriptionProducts[2].displayName
                }, this.hasDiscount(e) && (this.messages.tier1Price = Object(g.a)(e.subscriptionProducts[0].self.newPrice), this.messages.tier2Price = Object(g.a)(e.subscriptionProducts[1].self.newPrice), this.messages.tier3Price = Object(g.a)(e.subscriptionProducts[2].self.newPrice))
            }, t.prototype.isSubscriptionDiscountReady = function(e) {
                return void 0 !== e.subscriptionProducts[0].self
            }, t.prototype.hasDiscount = function(e) {
                return !!this.isSubscriptionDiscountReady(e) && Object(g.b)(e.subscriptionProducts)
            }, t = r.__decorate([Object(d.c)("SubTierTabs")], t)
        }(o.Component),
        S = k;
    n.d(t, !1, function() {
        return b
    }), n.d(t, !1, function() {
        return y
    }), n.d(t, "b", function() {
        return a
    }), n.d(t, !1, function() {
        return i
    }), n.d(t, "a", function() {
        return S
    })
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    }), n.d(t, "b", function() {
        return a
    });
    var i;
    ! function(e) {
        e.Playing = "PLAYING", e.Streaming = "BROADCASTING", e.Watching = "WATCHING"
    }(i || (i = {}));
    var a;
    ! function(e) {
        e.Playing = "playing", e.Streaming = "broadcasting", e.Watching = "watching"
    }(a || (a = {}))
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return o
    });
    var i = n(2),
        a = /[^A-Za-z0-9]+/g,
        r = i.n.logger.withCategory("McGill"),
        o = function() {
            function e() {}
            return e.polyfillGoogletag = function() {
                window.googletag = window.googletag || {}, window.googletag.cmd = window.googletag.cmd || []
            }, e.setAppWideTracking = function(e, t) {
                var n = this;
                this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                    window.googletag.pubads().setTargeting(e, n.normalizeTargetingValue(t))
                })
            }, e.clearAppWideTracking = function(e) {
                this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                    window.googletag.pubads().clearTargeting(e)
                })
            }, e.createSlot = function(e, t, n, i, a) {
                var o = this;
                return r.debug("Creating slot", {
                    div: e,
                    adUnitPath: t,
                    size: n,
                    targeting: i
                }), this.polyfillGoogletag(), new Promise(function(r, s) {
                    window.googletag.cmd.push(function() {
                        var l = window.googletag.defineSlot(t, n, e);
                        if (!l) return void s();
                        l.addService(window.googletag.companionAds()), l.addService(window.googletag.pubads()), Object.keys(i).forEach(function(e) {
                            l.setTargeting(e, o.normalizeTargetingValue(i[e]))
                        }), a && window.googletag.enableServices(), r(l)
                    })
                })
            }, e.display = function(e) {
                this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                    window.googletag.enableServices(), window.googletag.display(e)
                })
            }, e.destroySlot = function(e) {
                this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                    window.googletag.destroySlots([e])
                })
            }, e.initialize = function(e) {
                this.polyfillGoogletag(), window.googletag.cmd.push(function() {
                    window.googletag.pubads().enableSingleRequest(), window.googletag.companionAds().addEventListener("slotRenderEnded", e), window.googletag.pubads().addEventListener("slotRenderEnded", e)
                })
            }, e.normalizeTargetingValue = function(e) {
                var t = function(e) {
                    return e.replace(a, "_")
                };
                return "string" == typeof e ? t(e) : e.map(t)
            }, e
        }()
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(2),
        o = n(67),
        s = n(3),
        l = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.state = {
                    showLoader: !1,
                    error: !1
                }, n
            }
            return i.__extends(t, e), t.wrap = function(e, n, i) {
                return function(r) {
                    return a.createElement(t, {
                        loader: e,
                        component: n,
                        componentProps: r,
                        failSilently: !(!i || !i.failSilently),
                        onRendered: i && i.onRendered
                    })
                }
            }, t.prototype.componentDidUpdate = function(e, t) {
                !t.Component && this.state.Component && this.props.onRendered && this.props.onRendered()
            }, t.prototype.componentDidMount = function() {
                return i.__awaiter(this, void 0, void 0, function() {
                    var e, t, n;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return i.trys.push([0, 2, , 3]), [4, this.props.loader()];
                            case 1:
                                return e = i.sent(), t = e[this.props.component], t || r.i.fatal(new Error("Component not found."), "Component not found.", {
                                    component: this.props.component
                                }), this.setState({
                                    Component: t,
                                    showLoader: !1,
                                    error: !t
                                }), [3, 3];
                            case 2:
                                return n = i.sent(), r.i.fatal(n, "Error loading module.", {
                                    component: this.props.component
                                }), this.setState({
                                    Component: void 0,
                                    showLoader: !1,
                                    error: !0
                                }), [3, 3];
                            case 3:
                                return [2]
                        }
                    })
                })
            }, t.prototype.render = function() {
                return this.state.Component ? a.createElement(this.state.Component, i.__assign({}, this.props.componentProps)) : this.state.error ? this.props.failSilently ? null : a.createElement(o.a, {
                    message: Object(r.d)("Failed to load module.", "Loadable")
                }) : a.createElement(s.X, {
                    fillContent: !0
                })
            }, t
        }(a.Component);
    n.d(t, "a", function() {
        return l
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return c.createElement(u, {
            isOpen: e.showModal,
            contentLabel: "Modal",
            className: "modal__content",
            overlayClassName: "modal__backdrop " + p + " " + Object(d.c)(e.theme),
            shouldCloseOnOverlayClick: !1
        }, e.component && c.createElement(e.component, l.__assign({}, e.componentProps)))
    }

    function a(e) {
        return {
            showModal: e.modal.show,
            component: e.modal.modalID ? Object(o.a)(e) : null,
            componentProps: e.modal.modalProps,
            theme: Object(s.a)(e)
        }
    }
    var r = n(6),
        o = n(90),
        s = n(52),
        l = n(0),
        c = n(1),
        u = n(345),
        d = n(34),
        p = (n(186), "js-modal-backdrop"),
        m = Object(r.a)(a)(i);
    n.d(t, "a", function() {
        return m
    }), n.d(t, "b", function() {
        return p
    })
}, function(e, t, n) {
    "use strict";
    var i, a = n(0),
        r = n(4),
        o = n(14),
        s = n(1),
        l = n(2);
    n(237);
    ! function(e) {
        e[e.Up = 0] = "Up", e[e.Down = 1] = "Down"
    }(i || (i = {}));
    var c = function(e) {
        function t() {
            var t = null !== e && e.apply(this, arguments) || this;
            return t.state = {
                hasPendingLoadMoreRequest: !1,
                loadedMore: !0
            }, t.isTriggerVisible = function(e, t) {
                var n = t.top,
                    i = t.top + t.height;
                return !(e.bottom < n || e.top > i)
            }, t.getOrientation = function() {
                return void 0 === t.props.orientation ? i.Up : t.props.orientation
            }, t.setWrapRef = function(e) {
                return t.wrapElement = e
            }, t.setRef = function(e) {
                return t.element = e
            }, t
        }
        return a.__extends(t, e), t.prototype.render = function() {
            var e = this.getOrientation(),
                t = r({
                    "scrollable-trigger__trigger-area": !0,
                    "scrollable-trigger__trigger-area--up": e === i.Up,
                    "scrollable-trigger__trigger-area--down": e === i.Down
                }),
                n = {
                    height: this.props.pixelThreshold || 100
                };
            return s.createElement("div", {
                className: "scrollable-trigger__wrapper",
                ref: this.setWrapRef
            }, s.createElement("div", {
                className: t,
                ref: this.setRef,
                style: n
            }))
        }, t.prototype.componentDidMount = function() {
            var e = this.context.registerReceiver;
            if (!e) return void l.i.warn("<InfiniteScrollTrigger /> initialized missing a <ScrollableArea /> provider");
            this.unregister = e(this)
        }, t.prototype.componentWillUnmount = function() {
            this.unregister && this.unregister()
        }, t.prototype.componentWillReceiveProps = function(e) {
            !this.props.enabled && e.enabled && this.context.requestVisibilityCheck(this)
        }, t.prototype.checkVisible = function(e, t, n) {
            return a.__awaiter(this, void 0, void 0, function() {
                var t, i, r, o, s = this;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            if (void 0 === n && (n = this.props.requestCap || 5), !(this.element && this.state.loadedMore && !this.state.hasPendingLoadMoreRequest && this.props.enabled && n > 0)) return [3, 4];
                            if (t = this.element.getBoundingClientRect(), i = this.props.contentLength, r = this.wrapElement.offsetTop, !this.isTriggerVisible(t, e)) return [3, 4];
                            this.setState({
                                hasPendingLoadMoreRequest: !0
                            }), a.label = 1;
                        case 1:
                            return a.trys.push([1, 3, , 4]), [4, this.props.loadMore()];
                        case 2:
                            return a.sent(), this.setState({
                                hasPendingLoadMoreRequest: !1
                            }), requestAnimationFrame(function() {
                                if (s.element) {
                                    var t;
                                    t = void 0 !== s.props.contentLength && void 0 !== i ? s.props.contentLength > i : s.wrapElement.offsetTop > r, s.setState({
                                        loadedMore: t
                                    }), n && t && s.checkVisible(e, void 0, n - 1)
                                }
                            }), [3, 4];
                        case 3:
                            throw o = a.sent(), this.element && this.setState({
                                hasPendingLoadMoreRequest: !1
                            }), o;
                        case 4:
                            return [2]
                    }
                })
            })
        }, t.contextTypes = {
            registerReceiver: o.func,
            requestVisibilityCheck: o.func
        }, t
    }(s.Component);
    n.d(t, "b", function() {
        return i
    }), n.d(t, "a", function() {
        return c
    })
}, , function(e, t) {
    function n(e, t, n) {
        switch (n.length) {
            case 0:
                return e.call(t);
            case 1:
                return e.call(t, n[0]);
            case 2:
                return e.call(t, n[0], n[1]);
            case 3:
                return e.call(t, n[0], n[1], n[2])
        }
        return e.apply(t, n)
    }

    function i(e, t) {
        for (var n = -1, i = Array(e); ++n < e;) i[n] = t(n);
        return i
    }

    function a(e, t) {
        var n = R(e) || m(e) ? i(e.length, String) : [],
            a = n.length,
            r = !!a;
        for (var o in e) !t && !T.call(e, o) || r && ("length" == o || c(o, a)) || n.push(o);
        return n
    }

    function r(e, t, n) {
        var i = e[t];
        T.call(e, t) && p(i, n) && (void 0 !== n || t in e) || (e[t] = n)
    }

    function o(e) {
        if (!d(e)) return O(e);
        var t = [];
        for (var n in Object(e)) T.call(e, n) && "constructor" != n && t.push(n);
        return t
    }

    function s(e, t) {
        return t = L(void 0 === t ? e.length - 1 : t, 0),
            function() {
                for (var i = arguments, a = -1, r = L(i.length - t, 0), o = Array(r); ++a < r;) o[a] = i[t + a];
                a = -1;
                for (var s = Array(t + 1); ++a < t;) s[a] = i[a];
                return s[t] = o, n(e, this, s)
            }
    }

    function l(e, t, n, i) {
        n || (n = {});
        for (var a = -1, o = t.length; ++a < o;) {
            var s = t[a],
                l = i ? i(n[s], e[s], s, n, e) : void 0;
            r(n, s, void 0 === l ? e[s] : l)
        }
        return n
    }

    function c(e, t) {
        return !!(t = null == t ? S : t) && ("number" == typeof e || C.test(e)) && e > -1 && e % 1 == 0 && e < t
    }

    function u(e, t, n) {
        if (!b(n)) return !1;
        var i = typeof t;
        return !!("number" == i ? h(n) && c(t, n.length) : "string" == i && t in n) && p(n[t], e)
    }

    function d(e) {
        var t = e && e.constructor;
        return e === ("function" == typeof t && t.prototype || N)
    }

    function p(e, t) {
        return e === t || e !== e && t !== t
    }

    function m(e) {
        return g(e) && T.call(e, "callee") && (!I.call(e, "callee") || D.call(e) == _)
    }

    function h(e) {
        return null != e && v(e.length) && !f(e)
    }

    function g(e) {
        return y(e) && h(e)
    }

    function f(e) {
        var t = b(e) ? D.call(e) : "";
        return t == w || t == E
    }

    function v(e) {
        return "number" == typeof e && e > -1 && e % 1 == 0 && e <= S
    }

    function b(e) {
        var t = typeof e;
        return !!e && ("object" == t || "function" == t)
    }

    function y(e) {
        return !!e && "object" == typeof e
    }

    function k(e) {
        return h(e) ? a(e) : o(e)
    }
    var S = 9007199254740991,
        _ = "[object Arguments]",
        w = "[object Function]",
        E = "[object GeneratorFunction]",
        C = /^(?:0|[1-9]\d*)$/,
        N = Object.prototype,
        T = N.hasOwnProperty,
        D = N.toString,
        I = N.propertyIsEnumerable,
        O = function(e, t) {
            return function(n) {
                return e(t(n))
            }
        }(Object.keys, Object),
        L = Math.max,
        x = !I.call({
            valueOf: 1
        }, "valueOf"),
        R = Array.isArray,
        F = function(e) {
            return s(function(t, n) {
                var i = -1,
                    a = n.length,
                    r = a > 1 ? n[a - 1] : void 0,
                    o = a > 2 ? n[2] : void 0;
                for (r = e.length > 3 && "function" == typeof r ? (a--, r) : void 0, o && u(n[0], n[1], o) && (r = a < 3 ? void 0 : r, a = 1), t = Object(t); ++i < a;) {
                    var s = n[i];
                    s && e(t, s, i, r)
                }
                return t
            })
        }(function(e, t) {
            if (x || d(t) || h(t)) return void l(t, k(t), e);
            for (var n in t) T.call(t, n) && r(e, n, t[n])
        });
    e.exports = F
}, function(e, t, n) {
    "use strict";

    function i(e) {
        var t = f.call(e, b),
            n = e[b];
        try {
            e[b] = void 0;
            var i = !0
        } catch (e) {}
        var a = v.call(e);
        return i && (t ? e[b] = n : delete e[b]), a
    }

    function a(e) {
        return S.call(e)
    }

    function r(e) {
        return null == e ? void 0 === e ? E : w : C && C in Object(e) ? y(e) : _(e)
    }

    function o(e, t) {
        return function(n) {
            return e(t(n))
        }
    }

    function s(e) {
        return null != e && "object" == typeof e
    }

    function l(e) {
        if (!O(e) || N(e) != L) return !1;
        var t = I(e);
        if (null === t) return !0;
        var n = U.call(t, "constructor") && t.constructor;
        return "function" == typeof n && n instanceof n && F.call(n) == P
    }
    var c = n(153),
        u = "object" == typeof self && self && self.Object === Object && self,
        d = c.a || u || Function("return this")(),
        p = d,
        m = p.Symbol,
        h = m,
        g = Object.prototype,
        f = g.hasOwnProperty,
        v = g.toString,
        b = h ? h.toStringTag : void 0,
        y = i,
        k = Object.prototype,
        S = k.toString,
        _ = a,
        w = "[object Null]",
        E = "[object Undefined]",
        C = h ? h.toStringTag : void 0,
        N = r,
        T = o,
        D = T(Object.getPrototypeOf, Object),
        I = D,
        O = s,
        L = "[object Object]",
        x = Function.prototype,
        R = Object.prototype,
        F = x.toString,
        U = R.hasOwnProperty,
        P = F.call(Object);
    t.a = l
}, , , , , , , , function(e, t, n) {
    "use strict";

    function i() {
        return {
            type: a
        }
    }
    n.d(t, "a", function() {
        return a
    }), t.b = i;
    var a = "features.ads.TRACKING_SET"
}, , , , function(e, t, n) {
    "use strict";

    function i(e) {
        return r.b.get(s.a, !1) || r.a.buildType !== o.a.Production ? "string" == typeof e ? e : e.pathname || "" : "string" == typeof e ? l + e : l + e.pathname
    }

    function a() {
        return !r.b.get(s.a, !1) && r.a.buildType === o.a.Production
    }
    var r = n(2),
        o = n(16),
        s = n(262);
    t.a = i, t.b = a;
    var l = "https://www.twitch.tv"
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return void 0 === e && (e = ""), y.test(e)
    }

    function a(e) {
        void 0 === e && (e = "");
        var t = e.match(y);
        if (null === t) return "";
        if (t && t.length > 0 && void 0 !== t.index) {
            return t[1]
        }
        return ""
    }

    function r(e) {
        return void 0 === e && (e = ""), S.test(e)
    }

    function o(e) {
        void 0 === e && (e = "");
        var t = e.match(S);
        if (null === t) return "";
        if (t && t.length > 0 && void 0 !== t.index) {
            return t[1]
        }
        return ""
    }

    function s(e, t, n, i, a, r) {
        void 0 === r && (r = !1);
        var o;
        o = a ? Object(k.b)(e, a) : c(t.emotes);
        var s = Object(_.a)(t.displayName, t.username);
        return {
            badges: t.badges || {},
            bits: t.bits,
            user: g.__assign({}, s, {
                userLogin: t.username,
                userID: t.userID,
                userType: t.userType,
                color: t.color || l(t.userID)
            }),
            messageParts: e ? u(e, o, t.bits, n, i, s.userDisplayName) : [],
            deleted: r,
            timestamp: Date.now()
        }
    }

    function l(e, t) {
        return void 0 === t && (t = 15), "number" != typeof E[e] && (E[e] = Math.floor(Math.random() * t)), w[E[e]]
    }

    function c(e) {
        var t = [];
        return e && Object.keys(e).forEach(function(n) {
            e[n].forEach(function(e) {
                t[e.startIndex] = {
                    startIndex: e.startIndex,
                    endIndex: e.endIndex + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": h(n, 1),
                                "2x": h(n, 2),
                                "4x": h(n, 4)
                            }
                        }
                    }
                }
            })
        }), t
    }

    function u(e, t, n, i, a, r) {
        void 0 === t && (t = []);
        var o = [],
            s = 0,
            l = d(e);
        t.forEach(function(t) {
            var c = l ? l.slice(s, t.startIndex).join("") : e.slice(s, t.startIndex);
            c && (o = n ? o.concat(p(c, r, a, i)) : o.concat(m(c, r, a))), o.push({
                type: b.a.Emote,
                content: g.__assign({
                    alt: l ? l.slice(t.startIndex, t.endIndex).join("") : e.slice(t.startIndex, t.endIndex)
                }, t.data)
            }), s = t.endIndex
        });
        var c = l ? l.slice(s).join("") : e.slice(s);
        return c && (o = n ? o.concat(p(c, r, a, i)) : o.concat(m(c, r, a))), o
    }

    function d(e) {
        var t = /[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g;
        return e.match(t)
    }

    function p(e, t, n, i) {
        if (!i) return m(e, t, n);
        var a = Object(v.c)(e, i).map(function(e) {
            return e.type === b.a.Text ? m(e.content, t, n) : e
        });
        return [].concat.apply([], a)
    }

    function m(e, t, n) {
        var s = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w.\/@#%&()\-+=:?~]*)?)([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
            l = /([^\w@#%\-+=:~])?(@)([^\u0000-\u007F]+|\w+)+([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
            c = [],
            u = e.split(/\s+/);
        return u.forEach(function(e, d) {
            s.lastIndex = 0;
            var p = s.exec(e);
            l.lastIndex = 0;
            var m = l.exec(e);
            if (p) {
                var h = p.index,
                    g = !1,
                    v = !1,
                    y = p[1];
                y && (h += 1, /\s/.test(y) || (g = !0)), 0 !== h && c.push({
                    type: b.a.Text,
                    content: (v ? " " : "") + e.slice(0, h) + (g ? " " : "")
                }), v = !1;
                var k = s.lastIndex,
                    S = p[3];
                if (S && (k -= 1, /\s/.test(S) || (v = !0)), n) c.push({
                    type: b.a.Text,
                    content: " <" + Object(f.d)("deleted link", "CreateMessageData") + "> "
                });
                else {
                    var _ = p[2],
                        w = (_ ? "" : "https://") + e.slice(h, k);
                    if (i(w)) {
                        var E = a(w);
                        c.push({
                            type: b.a.ClipLink,
                            content: {
                                slug: E,
                                url: w,
                                displayText: e.slice(h, k)
                            }
                        })
                    } else if (r(w)) {
                        var C = o(w);
                        c.push({
                            type: b.a.VideoLink,
                            content: {
                                id: C,
                                url: w,
                                displayText: e.slice(h, k)
                            }
                        })
                    } else c.push({
                        type: b.a.Link,
                        content: {
                            displayText: e.slice(h, k),
                            url: w
                        }
                    })
                }
                var N = e.slice(k),
                    T = "";
                d < u.length - 1 && (T = " "), N && c.push({
                    type: b.a.Text,
                    content: (v ? " " : "") + N + T
                })
            } else {
                if (!m) {
                    var D = c.length && c[c.length - 1],
                        T = "";
                    if (d < u.length - 1 && (T = " "), D && D.type === b.a.Text) D.content += e + T;
                    else {
                        var I = "";
                        d && (I = " "), c.push({
                            type: b.a.Text,
                            content: I + e + T
                        })
                    }
                    return
                }
                var O = m[3];
                c.push({
                    type: b.a.Mention,
                    content: {
                        sender: t,
                        recipient: O
                    }
                })
            }
        }), c
    }

    function h(e, t) {
        return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
    }
    var g = n(0),
        f = n(2),
        v = n(370),
        b = n(260),
        y = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
        k = n(266),
        S = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?"),
        _ = n(379);
    t.a = s, t.b = l, t.f = u, t.d = d, t.c = m, t.e = h;
    var w = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
        E = {}
}, function(e, t, n) {
    "use strict";

    function i(e, t, n) {
        return void 0 === n && (n = !0),
            function(i) {
                i(Object(o.o)(e)), n && Object(r.d)(e), t && Object(s.b)(e, t)
            }
    }
    n.d(t, "a", function() {
        return a
    }), t.b = i;
    var a, r = n(34),
        o = n(58),
        s = n(136);
    ! function(e) {
        e[e.UserMenu = 1] = "UserMenu", e[e.TypedCommand = 2] = "TypedCommand"
    }(a || (a = {}))
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        var n = a.b.get(l, "https://twitch.amazon.com/prime"),
            i = "";
        try {
            i = btoa(t)
        } catch (e) {
            c.error(e, "Could not decode location pathname substring for redirect")
        }
        return i ? n + "?ref_=" + e + "&redirectRoute=" + i : n + "?ref_=" + e
    }
    n.d(t, "b", function() {
        return r
    }), n.d(t, "a", function() {
        return o
    }), n.d(t, "c", function() {
        return s
    }), t.d = i;
    var a = n(2),
        r = "sm_tw_tup_ntp_t_all",
        o = "sm_tw_thp_blue_t_all",
        s = "sm_w_tup_ntp_t_c",
        l = "prime_landing_page_base_url",
        c = a.i.withCategory("PrimeUtilsLogger")
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return _.debug("Updating activity", e), E = h.__assign({}, E, {
            activity: e
        }), p()
    }

    function a(e) {
        _.debug("Updating visibility", e), m(e)
    }

    function r(e) {
        _.debug("Saving current availability", e), E = h.__assign({}, E, {
            availability: e
        })
    }

    function o() {
        r(f.a.Online)
    }

    function s() {
        r(f.a.Idle)
    }

    function l() {
        _.debug("Clearing activity"), E = h.__assign({}, E, {
            activity: null
        }), p()
    }

    function c() {
        return h.__awaiter(this, void 0, void 0, function() {
            var e;
            return h.__generator(this, function(t) {
                switch (t.label) {
                    case 0:
                        _.debug("Clearing previous session"), E = {
                            sessionID: u(),
                            availability: f.a.Online,
                            activity: null
                        }, t.label = 1;
                    case 1:
                        return t.trys.push([1, 4, , 5]), [4, p()];
                    case 2:
                        return t.sent(), _.debug("Setting new session"), E = h.__assign({}, E, {
                            sessionID: g.n.session.tabID
                        }), d(g.n.session.tabID), [4, p()];
                    case 3:
                        return [2, t.sent()];
                    case 4:
                        return e = t.sent(), [2, e];
                    case 5:
                        return [2]
                }
            })
        })
    }

    function u() {
        return g.k.get(k, "")
    }

    function d(e) {
        g.k.set(k, e)
    }

    function p() {
        return h.__awaiter(this, void 0, void 0, function() {
            return h.__generator(this, function(e) {
                return Object(v.d)(g.n.store.getState()) ? (_.debug("Setting status on server", {
                    state: E
                }), S && clearTimeout(S), [2, g.n.apollo.client.mutate({
                    mutation: b,
                    variables: {
                        input: E
                    }
                }).then(function(e) {
                    _.debug("Status scheduled to be set again", {
                        seconds: e.data.setSessionStatus.setAgainInSeconds
                    }), S = setTimeout(p, 1e3 * e.data.setSessionStatus.setAgainInSeconds)
                }, function(e) {
                    _.warn("Failed to update status. Trying again in 60 seconds.", e), S = setTimeout(p, 6e4)
                })]) : [2]
            })
        })
    }

    function m(e) {
        Object(v.d)(g.n.store.getState()) && (_.debug("Setting visibility on server", {
            visibility: e
        }), g.n.apollo.client.mutate({
            mutation: y,
            variables: {
                input: {
                    visibility: e
                }
            }
        }).then(function(e) {
            _.debug("Visibility set", {
                visibility: e.data.updateVisibility.user.availability
            })
        }, function(e) {
            _.warn("Failed to update visibility.", e)
        }))
    }
    t.f = i, t.e = a, t.c = r, t.b = o, t.d = s, t.a = l, t.g = c;
    var h = n(0),
        g = n(2),
        f = n(51),
        v = n(17),
        b = n(413),
        y = (n.n(b), n(414)),
        k = (n.n(y), "twilight.sessionID"),
        S = 0,
        _ = g.i.withCategory("Session Status"),
        w = {
            sessionID: g.n.session.tabID,
            availability: "",
            activity: null
        },
        E = w
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e.Emote = "emote", e.Mention = "mention", e.None = "none"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(4),
        r = n(1),
        o = n(9),
        s = n(2),
        l = n(7),
        c = n(5),
        u = n(278),
        d = n(3),
        p = n(482),
        m = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleChange = function(e) {
                    t.props.onChange(e.target.value)
                }, t
            }
            return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = null,
                    t = Object(s.d)("Select One...", "ReportUserModal");
                return e = this.props.data.loading ? [r.createElement("option", {
                    key: "Loading"
                }, Object(s.d)("Loading...", "ReportReasonsSelect"))] : Object(u.b)(this.props.data.reportReasons).map(function(e) {
                    return r.createElement("option", {
                        key: e.canonical,
                        value: e.canonical
                    }, e.localized)
                }), r.createElement(d.U, {
                    margin: {
                        bottom: 2
                    }
                }, r.createElement(d.M, {
                    id: "reporting-modal__select",
                    label: Object(s.d)("Select Reason (required)", "ReportUserModal")
                }, r.createElement(d._14, {
                    id: "reporting-modal__select",
                    "data-test-selector": "reporting-modal.select",
                    disabled: this.props.data.loading || !!this.props.data.error,
                    onChange: this.handleChange,
                    defaultValue: t
                }, r.createElement("option", {
                    disabled: !0,
                    key: "default"
                }, t), e)))
            }, t = i.__decorate([Object(c.c)("ReportReasonSelect")], t)
        }(r.Component),
        h = Object(l.a)(p, {
            options: function(e) {
                return {
                    variables: {
                        content: e.reportContentType
                    }
                }
            }
        })(m),
        g = (n(483), n(484));
    n.d(t, "a", function() {
        return v
    }), n.d(t, "b", function() {
        return f
    }), n.d(t, "c", function() {
        return y
    });
    var f, v = "community_rules_violation";
    ! function(e) {
        e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError"
    }(f || (f = {}));
    var b = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    community: null,
                    description: "",
                    reason: null,
                    isCommunityReason: !1,
                    selectedCommunityID: null,
                    selectedCommunityName: null
                }, t.headerMessage = Object(s.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                    br: r.createElement("br", null),
                    tosLink: r.createElement("a", {
                        href: "https://www.twitch.tv/p/terms-of-service",
                        target: "_blank"
                    }, Object(s.d)("terms of service", "ReportUser"))
                }, "ReportUser"), t.selectCommunity = function(e) {
                    t.setState({
                        selectedCommunityID: e.target.value,
                        selectedCommunityName: e.target.name
                    })
                }, t.handleSubmit = function(e) {
                    e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName) : t.props.onError(f.FormError)
                }, t.handleTextAreaChange = function(e) {
                    t.setState({
                        description: e.target.value
                    })
                }, t.handleReasonChange = function(e) {
                    if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                    var n = t.props.data.user.directories.nodes.filter(function(e) {
                        return "COMMUNITY" === e.directoryType
                    });
                    n.length && e === v ? t.setState({
                        reason: e,
                        selectedCommunityID: n[0].id,
                        selectedCommunityName: n[0].name,
                        isCommunityReason: !0
                    }) : t.setState({
                        reason: e,
                        isCommunityReason: !1
                    })
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                return r.createElement(d.U, {
                    display: d.H.Flex,
                    flexDirection: d.J.Column,
                    alignItems: d.c.Center,
                    justifyContent: d.T.Center
                }, this.renderStatusMessage(), this.renderBody())
            }, t.prototype.renderBody = function() {
                return this.props.submitStatus === f.Success ? r.createElement("div", null, r.createElement(d.u, {
                    onClick: this.props.onClose
                }, r.createElement(d.U, {
                    padding: {
                        x: 2
                    }
                }, Object(s.d)("Close", "ReportUser")))) : r.createElement("div", null, r.createElement(d.U, {
                    "data-test-selector": "reporting.title",
                    margin: {
                        bottom: 1
                    },
                    "data-a-target": "reporting-channel-name"
                }, r.createElement(d._21, {
                    type: d._26.H4
                }, this.props.title), r.createElement(d._17, {
                    color: d.F.Alt2,
                    margin: {
                        top: 1
                    }
                }, this.headerMessage)), r.createElement("form", null, r.createElement(d._17, {
                    borderTop: !0,
                    borderBottom: !0,
                    margin: {
                        y: 2
                    },
                    padding: {
                        y: 2
                    }
                }, r.createElement(h, {
                    reportContentType: this.props.reportContentType,
                    onChange: this.handleReasonChange
                }), this.renderCommunitiesSelector(), r.createElement(d.M, {
                    id: "reporting__text-area",
                    label: Object(s.d)("Description (required)", "ReportUser")
                }, r.createElement(d._23, {
                    defaultValue: this.props.defaultDescription,
                    onChange: this.handleTextAreaChange
                }))), r.createElement(d._17, {
                    display: d.H.Flex,
                    justifyContent: d.T.Center
                }, r.createElement(d.u, {
                    onClick: this.handleSubmit
                }, r.createElement(d.U, {
                    padding: {
                        x: 2
                    }
                }, Object(s.d)("Send", "ReportUser"))))))
            }, t.prototype.renderCommunitiesSelector = function() {
                if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                if (this.state.isCommunityReason) {
                    var e = this.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        }),
                        t = e.map(function(e) {
                            return r.createElement("option", {
                                key: e.id,
                                value: e.id,
                                name: e.name
                            }, e.displayName)
                        });
                    return r.createElement(d.U, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(d.M, {
                        id: "reporting__select-community",
                        label: Object(s.d)("Community", "ReportUser")
                    }, r.createElement(d._14, {
                        id: "reporting__select-community",
                        "data-test-selector": "reporting.select-community",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.selectCommunity
                    }, t)))
                }
            }, t.prototype.renderStatusMessage = function() {
                var e = null;
                switch (this.props.submitStatus) {
                    case f.FormError:
                        e = Object(s.d)("Reason and Description are required.", "ReportUser");
                        break;
                    case f.MutationError:
                        e = Object(s.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                        break;
                    case f.Success:
                        e = Object(s.d)("Thank you for your report.", "ReportUser");
                        break;
                    default:
                        return null
                }
                var t = a({
                    "reporting__error-container": this.props.submitStatus !== f.Success,
                    "reporting__success-container": this.props.submitStatus === f.Success
                });
                return r.createElement(d._17, {
                    className: t,
                    fullWidth: this.props.submitStatus !== f.Success,
                    "data-test-selector": "reporting.error",
                    margin: {
                        bottom: 2
                    },
                    padding: 1
                }, e)
            }, t
        }(r.Component),
        y = Object(o.compose)(Object(l.a)(g, {
            options: function(e) {
                return {
                    fetchPolicy: "network-only",
                    variables: {
                        userId: e.targetUserID
                    }
                }
            }
        }))(b)
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            authToken: Object(s.a)(e)
        }
    }
    var a = n(0),
        r = n(1),
        o = n(6),
        s = n(17),
        l = n(5),
        c = n(139),
        u = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.reportInteractive = function() {
                    t.props.latencyTracking.reportInteractive()
                }, t
            }
            return a.__extends(t, e), t.prototype.render = function() {
                return r.createElement(c.b, {
                    authToken: this.props.authToken,
                    hostChannelID: this.props.hostChannelID,
                    hostChannelLogin: this.props.hostChannelLogin,
                    channelLogin: this.props.channelLogin,
                    updateContainerWidth: this.props.updateContainerWidth,
                    reportInteractive: this.reportInteractive
                })
            }, t = a.__decorate([Object(l.c)("SubscribeButton")], t)
        }(r.Component),
        d = Object(o.a)(i)(u);
    n.d(t, !1, function() {
        return u
    }), n.d(t, "b", function() {
        return d
    }), n.d(t, !1, function() {}), n.d(t, "a", function() {
        return c.a
    }), n.d(t, !1, function() {
        return c.b
    })
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        var n = "";
        switch (t) {
            case l.a.TypedCommand:
                n = "typed_command";
                break;
            case l.a.UserMenu:
                n = "user_menu";
                break;
            default:
                n = "user_menu"
        }
        var i = "";
        switch (e) {
            case o.a.Dark:
                i = "dark";
                break;
            case o.a.Light:
                i = "light";
                break;
            default:
                i = "light"
        }
        r.m.track(c.SpadeEventType.ThemeChange, {
            source: n,
            mode: i
        })
    }

    function a(e) {
        switch (e) {
            case s.a.Archive:
                return c.SpadeVideoBroadcastType.Archive;
            case s.a.Highlight:
                return c.SpadeVideoBroadcastType.Highlight;
            case s.a.Upload:
                return c.SpadeVideoBroadcastType.Upload;
            case s.a.WatchParty:
                return c.SpadeVideoBroadcastType.WatchParty;
            case s.a.PastPremiere:
                return c.SpadeVideoBroadcastType.PastPremiere;
            case s.a.PremiereUpload:
                return c.SpadeVideoBroadcastType.PremiereUpload;
            default:
                return e
        }
    }
    t.b = i, t.a = a;
    var r = n(2),
        o = n(33),
        s = n(263),
        l = n(130),
        c = n(12)
}, , function(e, t, n) {
    "use strict";

    function i(e, t) {
        return d.__awaiter(this, void 0, void 0, function() {
            var n, i, a, r, o, s, l, c, u, p;
            return d.__generator(this, function(d) {
                switch (d.label) {
                    case 0:
                        if (n = null, i = null, a = null, r = null, o = null, !t.channelID) return [3, 5];
                        d.label = 1;
                    case 1:
                        return d.trys.push([1, 3, , 4]), [4, m.n.apollo.client.query({
                            query: y,
                            variables: {
                                id: t.channelID
                            }
                        })];
                    case 2:
                        return r = d.sent(), [3, 4];
                    case 3:
                        return l = d.sent(), m.i.error(l, "Failed to make query for channel info in FollowEvent reporting.", {
                            channelID: t.channelID
                        }), [3, 4];
                    case 4:
                        a = r && r.data && r.data.user, a ? o = a.hosting.stream && a.hosting.stream.game ? a.hosting.stream.game.name : a.stream && a.stream.game && a.stream.game.name : m.i.error(new Error("GraphQL empty response"), "Query for channel info in FollowEvent reporting return no data.", {
                            channelID: t.channelID
                        }), d.label = 5;
                    case 5:
                        if (!(c = m.m.getVideoPlayerTrackingData().vodID)) return [3, 10];
                        d.label = 6;
                    case 6:
                        return d.trys.push([6, 8, , 9]), [4, m.n.apollo.client.query({
                            query: v,
                            variables: {
                                id: c
                            }
                        })];
                    case 7:
                        return n = d.sent(), [3, 9];
                    case 8:
                        return u = d.sent(), m.i.error(u, "Failed to make query for VOd info in FollowEvent reporting.", {
                            currentVODID: c
                        }), [3, 9];
                    case 9:
                        i = n && n.data && n.data.video, i ? s = Object(b.a)(i.broadcastType) : (s = null, m.i.error(new Error("GraphQL empty response"), "Query for video info in FollowEvent reporting return no data.", {
                            currentVODID: c
                        })), d.label = 10;
                    case 10:
                        return p = {
                            channel: t.channelLogin,
                            channel_id: t.channelID,
                            channel_game: o,
                            cta_visible: m.m.getVideoPlayerTrackingData().followCTAVisible,
                            host_channel: t.hostChannelLogin,
                            host_channel_id: t.hostChannelID,
                            game: t.game,
                            partner: a ? a.isPartner : null,
                            src: t.src,
                            vod_id: c,
                            vod_type: s
                        }, m.m.track(e, p), [2]
                }
            })
        })
    }

    function a(e) {
        return {
            isLoggedIn: Object(u.d)(e)
        }
    }

    function r(e) {
        return Object(s.bindActionCreators)({
            login: function() {
                return Object(c.f)(l.a.FollowButton)
            }
        }, e)
    }
    var o = n(6),
        s = n(9),
        l = n(48),
        c = n(32),
        u = n(17),
        d = n(0),
        p = n(1),
        m = n(2),
        h = n(47),
        g = n(7),
        f = n(21),
        v = n(503),
        b = n(136),
        y = n(504),
        k = {
            Channel: "channel"
        },
        S = n(12),
        _ = n(5),
        w = n(3),
        E = n(505),
        C = (n(506), n(507)),
        N = n(508),
        T = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isFollowing: !1,
                    showDropdown: !1,
                    disableNotifications: !0
                }, t.userDataLoaded = function() {
                    return t.props.data && !t.props.data.loading && !t.props.data.error && t.props.data.user
                }, t.toggleFollowing = function() {
                    var e;
                    t.state.isFollowing ? (t.unfollowUser(), e = S.SpadeEventType.Unfollow) : (t.followUser(), e = S.SpadeEventType.Follow), t.props.data && i(e, {
                        channelLogin: t.props.data.user.login,
                        channelID: t.props.data.user.id,
                        hostChannelLogin: t.props.hostChannelLogin,
                        hostChannelID: t.props.hostChannelID,
                        src: k.Channel
                    }), t.setState(function(e) {
                        return {
                            isFollowing: !e.isFollowing,
                            disableNotifications: !1
                        }
                    })
                }, t.followUser = function() {
                    if (t.props.followUser && t.props.data) {
                        t.setState({
                            showDropdown: !0
                        });
                        var e = d.__assign({}, Object(f.a)({
                            disableNotifications: !1,
                            targetID: t.props.data.user.id
                        }), {
                            optimisticResponse: {
                                followUser: {
                                    __typename: "FollowUserPayload",
                                    follow: {
                                        disableNotifications: !1,
                                        __typename: "Follow"
                                    }
                                }
                            }
                        });
                        t.props.followUser(e).then(function(e) {
                            var n = function(t) {
                                return t.user.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications, t
                            };
                            Object(f.d)(N, {
                                login: t.props.channelLogin
                            }, n)
                        })
                    }
                }, t.unfollowUser = function() {
                    if (t.props.unfollowUser && t.props.data) {
                        var e = d.__assign({}, Object(f.a)({
                            targetID: t.props.data.user.id
                        }), {
                            optimisticResponse: {
                                unfollowUser: {
                                    __typename: "UnfollowUserPayload",
                                    follow: {
                                        disableNotifications: null,
                                        __typename: "Follow"
                                    }
                                }
                            }
                        });
                        t.props.unfollowUser(e).then(function() {
                            var e = function(e) {
                                return e.user.self.follower.disableNotifications = null, e
                            };
                            Object(f.d)(N, {
                                login: t.props.channelLogin
                            }, e)
                        })
                    }
                }, t.toggleNotificationsEnabled = function() {
                    if (t.props.followUser && t.props.data) {
                        var e = d.__assign({}, Object(f.a)({
                            disableNotifications: !t.state.disableNotifications,
                            targetID: t.props.data.user.id
                        }), {
                            optimisticResponse: {
                                followUser: {
                                    __typename: "FollowUserPayload",
                                    follow: {
                                        disableNotifications: !t.state.disableNotifications,
                                        __typename: "Follow"
                                    }
                                }
                            }
                        });
                        t.props.followUser(e).then(function(e) {
                            var n = function(t) {
                                return t.user.self.follower.disableNotifications = e.data.followUser.follow.disableNotifications, t
                            };
                            Object(f.d)(N, {
                                login: t.props.channelLogin
                            }, n)
                        }), t.setState(function(e) {
                            return {
                                disableNotifications: !e.disableNotifications
                            }
                        })
                    }
                }, t
            }
            return d.__extends(t, e), t.prototype.componentDidMount = function() {
                this.reportInteractive()
            }, t.prototype.componentDidUpdate = function() {
                this.props.channelLogin && !this.userDataLoaded() || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                !e.data || e.data.loading || e.data.error || this.setState({
                    isFollowing: e.data.user.self && null !== e.data.user.self.follower.disableNotifications,
                    disableNotifications: e.data.user.self && e.data.user.self.follower.disableNotifications
                })
            }, t.prototype.render = function() {
                var e = this.props.isHostedFollow && this.props.channelName ? Object(m.d)("Follow {username}", {
                    username: this.props.channelName
                }, "FollowButton") : Object(m.d)("Follow", "FollowButton");
                if (!this.props.isLoggedIn) return p.createElement(w.u, {
                    tabIndex: this.props.tabIndex,
                    ariaLabel: e,
                    icon: w._9.Heart,
                    onClick: this.props.login,
                    "data-a-target": "follow-button",
                    size: this.props.size
                }, e);
                if (this.props.showLoadingPlaceholder && (!this.props.data || this.props.data.loading)) return p.createElement(w._1, {
                    width: 70,
                    height: 30
                });
                if (!this.props.followUser || !this.props.unfollowUser || !this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user || this.props.data.user.id === this.props.data.currentUser.id) return null;
                var t = this.state.disableNotifications ? Object(m.d)("Opt in to notifications to receive updates on this channel's activity, including when they go live.", "FollowButton") : Object(m.d)("You will be notified on this channel's activity, including when they go live.", "FollowButton");
                if (!this.state.isFollowing) return p.createElement(w.u, d.__assign({
                    ariaLabel: e,
                    size: this.props.size,
                    "data-a-target": "follow-button",
                    "data-test-selector": "follow-button",
                    icon: this.props.hideIcon ? void 0 : w._9.Heart,
                    onClick: this.toggleFollowing
                }, Object(w._39)(this.props), {
                    tabIndex: this.props.tabIndex
                }), e);
                if (this.props.hideWhenFollowing) return null;
                var n = this.props.balloonDirection ? this.props.balloonDirection : w.q.BottomRight;
                return p.createElement(w.U, {
                    display: w.H.Flex,
                    className: "follow-btn"
                }, p.createElement(w.U, null, p.createElement(w.v, {
                    ariaLabel: Object(m.d)("Unfollow", "FollowButton"),
                    "data-a-target": "unfollow-button",
                    "data-test-selector": "unfollow-button",
                    icon: w._9.Heart,
                    onClick: this.toggleFollowing,
                    statusAlertIcon: w._9.Unheart
                })), p.createElement(h.a, {
                    display: w.H.InlineFlex,
                    openByDefault: this.state.showDropdown
                }, p.createElement("button", {
                    tabIndex: this.props.tabIndex,
                    "aria-label": Object(m.d)("Dropdown", "FollowButton"),
                    className: "follow-btn__dropdown-toggle",
                    "data-a-target": "follow-dropdown-toggle"
                }, p.createElement(w.U, {
                    justifyContent: w.T.Center,
                    display: w.H.Flex,
                    alignItems: w.c.Stretch,
                    fullHeight: !0
                }, p.createElement(w._8, {
                    asset: w._9.GlyphArrDown
                }))), p.createElement(w.p, {
                    size: w.r.Small,
                    direction: n,
                    "data-a-target": "follow-notifications-balloon"
                }, p.createElement(w.U, {
                    display: w.H.Flex,
                    padding: 1
                }, p.createElement(w.U, {
                    display: w.H.Flex,
                    margin: {
                        bottom: 1
                    }
                }, p.createElement(w._21, {
                    type: w._26.H6
                }, Object(m.d)("You are following {followingName}", {
                    followingName: this.props.data.user.displayName
                }, "FollowButton"))), p.createElement(w.U, {
                    display: w.H.Flex,
                    flexWrap: w.K.NoWrap,
                    padding: {
                        bottom: 1
                    }
                }, p.createElement(w.U, {
                    display: w.H.Flex,
                    padding: {
                        right: 2
                    }
                }, p.createElement("span", null, p.createElement(w._21, {
                    type: w._26.H6
                }, Object(m.d)("Notifications", "FollowButton")))), p.createElement(w.U, {
                    display: w.H.Flex,
                    flexShrink: 0
                }, p.createElement(w._29, {
                    onChange: this.toggleNotificationsEnabled,
                    checked: !this.state.disableNotifications,
                    "data-a-target": "notifications-toggle"
                }))), p.createElement(w.U, {
                    display: w.H.InlineFlex,
                    padding: {
                        bottom: 1
                    }
                }, p.createElement(w._21, {
                    type: w._26.Span,
                    color: w.F.Alt2
                }, t))))))
            }, t.prototype.reportInteractive = function() {
                this.props.isLoggedIn ? this.props.channelLogin && !this.userDataLoaded() || this.props.latencyTracking.reportInteractive() : this.props.latencyTracking.reportInteractive()
            }, t = d.__decorate([Object(g.a)(N, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.isLoggedIn || !e.channelLogin
                }
            }), Object(g.a)(E, {
                name: "followUser"
            }), Object(g.a)(C, {
                name: "unfollowUser"
            }), Object(_.c)("FollowButton")], t)
        }(p.Component),
        D = T,
        I = Object(o.a)(a, r)(D);
    n.d(t, "a", function() {
        return I
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        var t = new Map;
        return t.set(F.b.Prime, null), e.forEach(function(e, n) {
            t.set(n + 1, e)
        }), t
    }
    var a, r = n(0),
        o = n(1),
        s = n(2),
        l = n(47),
        c = n(7),
        u = n(86),
        d = n(140),
        p = n(105),
        m = n(21),
        h = n(30),
        g = n(18),
        f = n(5),
        v = n(40),
        b = n(66),
        y = n(107),
        k = n(265),
        S = n(28),
        _ = n(49),
        w = n(88),
        E = n(439),
        C = n(50),
        N = n(3),
        T = (n(486), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    selectedUser: null
                }, t.messages = {
                    noResults: Object(s.d)("No Results", "GiftRecipientSearchResult"),
                    buyGift: Object(s.d)("Buy Gift Subscription", "GiftRecipientSearchResult"),
                    searchHint: Object(s.d)("Start typing to see a list of suggestions here.", "GiftRecipientSearchResult")
                }, t.reportGiftCheckoutAction = function() {
                    t.props.reportSubMenuAction({
                        action: C.a.BuyGiftSub,
                        checkoutButtonTier: t.props.selectedProductPrice,
                        giftRecipient: t.state.selectedUser ? t.state.selectedUser.login : null
                    })
                }, t.onUserClick = function(e) {
                    for (var n = e.target; n.parentElement && !n.dataset.user_id;) n = n.parentElement;
                    n.dataset.user_id && n.dataset.user_login && n.dataset.user_name ? t.setState({
                        selectedUser: {
                            id: n.dataset.userId || "",
                            login: n.dataset.user_login || "",
                            name: n.dataset.user_name || ""
                        }
                    }) : t.setState({
                        selectedUser: null
                    })
                }, t
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                (e.isWaiting || e.isErrored || !e.hasInput) && this.setState({
                    selectedUser: null
                })
            }, t.prototype.render = function() {
                var e;
                return e = this.props.isWaiting ? o.createElement(N.U, {
                    fullHeight: !0
                }, o.createElement(N.X, {
                    fillContent: !0
                })) : this.props.hasInput ? this.props.isErrored ? this.getErrorMessage() : this.props.userResults && this.props.userResults.totalHits > 0 ? this.getUserResultContent() : this.getNoResultsMessage() : o.createElement(N.U, {
                    margin: 1
                }, o.createElement(N._21, {
                    color: N.F.Alt2
                }, this.messages.searchHint)), o.createElement("div", {
                    onKeyDown: this.props.onKeyDown
                }, o.createElement(N._17, {
                    className: "gift-recipient-search-result-view",
                    background: N.m.Alt,
                    position: N._2.Relative,
                    overflow: N.Y.Hidden,
                    display: N.H.Block,
                    margin: {
                        bottom: 2
                    },
                    borderLeft: !0,
                    borderBottom: !0,
                    borderRight: !0
                }, o.createElement(N.P, {
                    overflow: N.Y.Hidden,
                    position: N._2.Relative
                }, o.createElement(S.b, {
                    suppressScrollX: !0
                }, o.createElement(N.U, null, e, o.createElement(S.a, {
                    enabled: !this.props.isWaiting && this.props.hasInput,
                    loadMore: this.props.loadMore
                }))))), this.getBuyGiftButton())
            }, t.prototype.getBuyGiftButton = function() {
                var e = Object(w.a)(this.props.selectedProductURL, {
                        recipient: this.state.selectedUser ? this.state.selectedUser.login : ""
                    }),
                    t = o.createElement(E.a, {
                        subProductId: this.props.selectedProductId,
                        giftRecipient: this.state.selectedUser ? this.state.selectedUser.login : null,
                        onClick: this.reportGiftCheckoutAction,
                        checkoutURL: e
                    }),
                    n = null;
                if (this.state.selectedUser) {
                    var i = Object(_.a)(this.state.selectedUser.login || "", this.state.selectedUser.name || "");
                    n = o.createElement(N.P, {
                        margin: {
                            x: 1
                        }
                    }, o.createElement(N._21, null, Object(s.d)("for {displayName}", {
                        displayName: o.createElement(N._21, {
                            bold: !0,
                            type: N._26.Span
                        }, i)
                    }, "GiftRecipientSearchResult")))
                }
                return o.createElement(N.U, {
                    display: N.H.Flex,
                    alignItems: N.c.Center,
                    fullWidth: !0
                }, t, n)
            }, t.prototype.getErrorMessage = function() {
                return o.createElement(N.U, {
                    fullWidth: !0,
                    textAlign: N._22.Center,
                    justifyContent: N.T.Center
                }, o.createElement(N._21, null, Object(s.d)("Something went wrong", "GiftRecipientSearchResult")))
            }, t.prototype.getUserResultContent = function() {
                var e = this;
                return this.props.userResults ? this.props.userResults.results.map(function(t) {
                    var n = Object(_.a)(t.login || "", t.name || "");
                    return o.createElement(N.S, {
                        tabIndex: -1,
                        "data-ts_selectable": !0,
                        "data-tt_content": !0,
                        key: "git-recipient-result__" + t.id,
                        "data-user_id": t.id,
                        "data-user_login": t.login,
                        "data-user_name": t.name,
                        onClick: e.onUserClick,
                        "data-test-selector": "subscribe-button__gift_search_result"
                    }, o.createElement(N.U, {
                        padding: .5
                    }, o.createElement(N.A, {
                        row: !0
                    }, o.createElement(N.C, {
                        imageAlt: t.thumbnailAltText,
                        imageSrc: t.thumbnail ? t.thumbnail : "",
                        size: N.D.Size4,
                        aspect: N.k.Aspect1x1
                    }), o.createElement(N.B, null, o.createElement(N.P, {
                        padding: {
                            x: 1
                        }
                    }, o.createElement(N._21, {
                        type: N._26.H5,
                        ellipsis: !0
                    }, n))))))
                }) : o.createElement(N._1, null)
            }, t.prototype.getNoResultsMessage = function() {
                return o.createElement(N.U, {
                    margin: 1
                }, o.createElement(N._21, {
                    color: N.F.Alt2
                }, this.messages.noResults))
            }, t = r.__decorate([Object(f.c)("GiftRecipientSearchResultPanel")], t)
        }(o.Component)),
        D = T,
        I = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleChange = function(e) {
                    t.props.onChange(e.target.value)
                }, t
            }
            return r.__extends(t, e), t.prototype.render = function() {
                return this.props.selectedSubProduct ? (this.formatMessages(), o.createElement(N.U, {
                    padding: 2
                }, o.createElement(N.U, null, o.createElement(N.U, {
                    display: N.H.Flex,
                    justifyContent: N.T.Between,
                    alignItems: N.c.Center,
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(N._21, {
                    type: N._26.H4,
                    bold: !0
                }, this.messages.giftSubscription), o.createElement(N.u, {
                    type: N.z.Text,
                    "data-a-target": "subscribe-back-button",
                    icon: N._9.AngleLeft,
                    onClick: this.props.onBack
                }, o.createElement(N.U, {
                    alignItems: N.c.Center,
                    display: N.H.InlineFlex
                }, o.createElement(N._21, null, this.messages.back)))), o.createElement(N.U, null, o.createElement(N._21, null, this.messages.giftSingleMonth), o.createElement(N.U, {
                    display: N.H.Flex,
                    justifyContent: N.T.Center,
                    fullWidth: !0
                }, o.createElement(N.P, {
                    fullWidth: !0
                }, o.createElement("div", null, o.createElement(N._11, {
                    onChange: this.handleChange,
                    onKeyDown: this.props.onKeyDown,
                    id: "gift-recipient-search",
                    placeholder: this.messages.searchPlaceholder
                }), o.createElement(D, {
                    hasInput: this.props.hasInput,
                    userResults: this.props.userResults,
                    isErrored: this.props.isErrored,
                    isWaiting: this.props.isWaiting,
                    loadMore: this.props.loadMore,
                    onKeyDown: this.props.onKeyDown,
                    selectedProductId: this.props.selectedSubProduct.id,
                    selectedProductURL: this.props.selectedSubProduct.url,
                    selectedProductPrice: this.props.selectedSubProduct.price,
                    reportSubMenuAction: this.props.reportSubMenuAction
                })))))))) : o.createElement(N._1, null)
            }, t.prototype.formatMessages = function() {
                this.messages = {
                    giftSubscription: Object(s.d)("Choose a Gift Recipient", "GiftRecipientSearch"),
                    giftSingleMonth: Object(s.d)("{subDisplayName}: {giftPrice} Gift Subscription (Single Month)", {
                        subDisplayName: this.props.selectedSubProduct ? this.props.selectedSubProduct.displayName : "",
                        giftPrice: this.props.selectedSubProduct ? this.props.selectedSubProduct.price : ""
                    }, "GiftRecipientSearch"),
                    back: Object(s.d)("Back", "GiftRecipientSearch"),
                    searchPlaceholder: Object(s.d)("Search for a Twitch ID", "GiftRecipientSearch")
                }
            }, t
        }(o.Component),
        O = 50,
        L = function(e) {
            function t() {
                var t = e.call(this) || this;
                return t.onChange = function(e) {
                    if (t.inputTimer && (clearTimeout(t.inputTimer), t.inputTimer = 0), !e) return void t.setState(t.getEmptyState());
                    t.setState({
                        isWaiting: !0
                    }), t.inputTimer = setTimeout(function() {
                        return t.doSearch(e)
                    }, O)
                }, t.loadMore = function() {
                    return r.__awaiter(t, void 0, void 0, function() {
                        var e, t, n, i;
                        return r.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    if (this.state.queryID || !0 === this.state.exhaustedHits) return [2];
                                    e = this.state.currentPage + 1, a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(b.a.Users, this.state.term, "", {
                                        page: e
                                    })];
                                case 2:
                                    return t = a.sent(), [3, 4];
                                case 3:
                                    return n = a.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0
                                    })), [2];
                                case 4:
                                    return t ? (i = Object(k.b)({
                                        searchResults: t,
                                        append: e > 0,
                                        currentUserResults: this.state.currentUserResults
                                    }), this.setState({
                                        currentUserResults: i.currentUserResults,
                                        term: this.state.term,
                                        hasInput: !0,
                                        isWaiting: !1,
                                        currentPage: e,
                                        exhaustedHits: i.exhaustedHits
                                    }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0
                                    })), [2])
                            }
                        })
                    })
                }, t.onKeyDown = function(e) {
                    t.state.term && (e.keyCode === v.a.Esc ? t.setState({
                        hasInput: !1
                    }) : e.keyCode === v.a.Up ? t.focusNext(-1) : e.keyCode === v.a.Down && t.focusNext(1))
                }, t.state = t.getEmptyState(), t.searchClient = new y.a(s.a.algoliaApplicationID, s.a.algoliaAPIKey), t
            }
            return r.__extends(t, e), t.prototype.render = function() {
                return o.createElement(I, {
                    onChange: this.onChange,
                    loadMore: this.loadMore,
                    onKeyDown: this.onKeyDown,
                    userResults: this.state.currentUserResults,
                    hasInput: this.state.hasInput,
                    isErrored: this.state.isErrored,
                    isWaiting: this.state.isWaiting,
                    onBack: this.props.onBack,
                    selectedSubProduct: this.props.selectedSubProduct,
                    reportSubMenuAction: this.props.reportSubMenuAction
                })
            }, t.prototype.getEmptyState = function() {
                return {
                    currentUserResults: {
                        totalHits: 0,
                        results: []
                    },
                    term: "",
                    hasInput: !1,
                    isErrored: !1,
                    queryID: "",
                    isWaiting: !1,
                    currentPage: -1,
                    focusSelectable: !1,
                    exhaustedHits: !1
                }
            }, t.prototype.doSearch = function(e) {
                return r.__awaiter(this, void 0, void 0, function() {
                    var t, n, i, a, o, s;
                    return r.__generator(this, function(l) {
                        switch (l.label) {
                            case 0:
                                this.inputTimer = 0, t = -1, n = g.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                    queryID: n,
                                    focusSelectable: !i && !!this.state.currentFocus
                                }), l.label = 1;
                            case 1:
                                return l.trys.push([1, 3, , 4]), t = 0, [4, this.searchClient.queryForType(b.a.Users, e, n)];
                            case 2:
                                return a = l.sent(), [3, 4];
                            case 3:
                                return o = l.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                    isErrored: !0,
                                    hasInput: !0,
                                    term: e
                                })), [2];
                            case 4:
                                return a ? this.state.queryID !== a.id ? [2] : (s = Object(k.b)({
                                    searchResults: a,
                                    append: !1
                                }), this.setState(function(n) {
                                    return r.__assign({}, n, s, {
                                        queryID: "",
                                        term: e,
                                        hasInput: !0,
                                        isWaiting: !1,
                                        currentPage: t
                                    })
                                }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                    isErrored: !0,
                                    hasInput: !0,
                                    term: e
                                })), [2])
                        }
                    })
                })
            }, t.prototype.focusNext = function(e) {
                var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                    i = document.activeElement,
                    a = Array.prototype.indexOf.call(n, i);
                if (t = a < 0 ? e > 0 ? 0 : n.length - 1 : a + e, t < 0 && (t = 0), !(t >= n.length)) {
                    var r = n.item(t);
                    r.focus(), r.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                        currentFocus: r
                    })
                }
            }, t = r.__decorate([Object(f.c)("GiftRecipientSearch")], t)
        }(o.Component),
        x = L,
        R = n(268),
        F = n(108),
        U = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.setMessages()
            }, t.prototype.render = function() {
                return o.createElement(N.U, {
                    padding: 2
                }, o.createElement(N.U, null, o.createElement(N.U, {
                    display: N.H.Flex,
                    justifyContent: N.T.Between,
                    alignItems: N.c.Center,
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(N._21, {
                    type: N._26.H4,
                    bold: !0
                }, this.messages.allSubscriptions), o.createElement(N.u, {
                    type: N.z.Text,
                    "data-a-target": "subscribe-back-button",
                    "data-test-selector": "subscribe-button__back-button",
                    icon: N._9.AngleLeft,
                    onClick: this.props.onBack
                }, o.createElement(N.U, {
                    alignItems: N.c.Center,
                    display: N.H.InlineFlex
                }, o.createElement(N._21, null, this.messages.back)))), o.createElement(F.a, {
                    channelDisplayName: this.props.channelDisplayName,
                    onSelectTierTab: this.props.onSelectTierTab,
                    reportSubMenuAction: this.props.reportSubMenuAction,
                    subscriptionProducts: this.props.subscriptionProducts,
                    userHasPrime: !1,
                    canPrimeSubscribe: !1,
                    isSubscribed: this.props.isSubscribed
                })))
            }, t.prototype.setMessages = function() {
                this.messages = {
                    back: Object(s.d)("Back", "PaidSubOptions"),
                    allSubscriptions: Object(s.d)("All Paid Subscriptions", "PaidSubOptions")
                }
            }, t
        }(o.Component),
        P = U,
        M = n(135),
        A = n(279);
    ! function(e) {
        e[e.Top = 0] = "Top", e[e.SubOptions = 1] = "SubOptions", e[e.GiftOptions = 2] = "GiftOptions", e[e.RecipientSelect = 3] = "RecipientSelect"
    }(a || (a = {}));
    var j = n(141),
        B = n(488),
        H = (n(489), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.handleTopPageSubButtonClick = function() {
                    n.props.reportSubMenuAction({
                        action: C.a.ClickCheckout,
                        checkoutButtonTier: n.messages.tier1Price
                    })
                }, n.showGiftOptions = function() {
                    n.props.reportSubMenuAction({
                        action: C.a.ClickGiftSubOptions,
                        modalLevel: "second_page"
                    }), n.setState(function() {
                        return {
                            currentPage: a.GiftOptions
                        }
                    })
                }, n.showSubOptions = function() {
                    n.props.reportSubMenuAction({
                        action: C.a.ClickMoreSubOptions,
                        modalLevel: "second_page"
                    }), n.setState(function() {
                        return {
                            currentPage: a.SubOptions
                        }
                    })
                }, n.showRecipientSelect = function() {
                    n.setState(function() {
                        return {
                            currentPage: a.RecipientSelect
                        }
                    })
                }, n.showTop = function() {
                    n.setState(function() {
                        return {
                            currentPage: a.Top
                        }
                    })
                }, n.goToPreviousPage = function() {
                    return n.props.reportSubMenuAction({
                        action: C.a.ClickBack,
                        modalLevel: n.state.currentPage === a.SubOptions || n.state.currentPage === a.GiftOptions ? "top_page" : "second_page"
                    }), n.state.currentPage === a.SubOptions || n.state.currentPage === a.GiftOptions ? void n.showTop() : n.state.currentPage === a.RecipientSelect ? void n.showGiftOptions() : void 0
                }, n.onSelectTierTab = function(e) {
                    var t = n.tabToSubProduct.get(e);
                    if (t) {
                        var i = n.props.subscriptionProducts.findIndex(function(e) {
                            return e.price === t.price
                        });
                        i !== n.state.selectedSubProductIndex && n.setState({
                            selectedSubProductIndex: i
                        }), n.props.onSelectTierTab(t.price)
                    } else n.props.onSelectTierTab(M.a)
                }, n.state = {
                    currentPage: a.Top,
                    selectedSubProductIndex: 0,
                    giftingEnabled: !1
                }, n.tabToSubProduct = i(t.subscriptionProducts), n
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.getGiftingExperimentAssignment()
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                if (!this.isSubscriptionDiscountReady(e) && this.isDiscountDataReady(e)) {
                    if (e.data.error) return;
                    var t = Object.assign({}, e.data.user.subscriptionProducts);
                    this.props.setPromotionData(t)
                }
            }, t.prototype.render = function() {
                return this.setMessages(), this.state.currentPage === a.Top ? this.getTopPage() : this.state.currentPage === a.SubOptions ? this.getPaidOptionsPage() : this.state.currentPage === a.GiftOptions ? this.getGiftOptionsPage() : this.state.currentPage === a.RecipientSelect ? this.getGiftRecipientSearchPage() : this.getTopPage()
            }, t.prototype.getGiftingExperimentAssignment = function() {
                return r.__awaiter(this, void 0, void 0, function() {
                    var e;
                    return r.__generator(this, function(t) {
                        switch (t.label) {
                            case 0:
                                return [4, s.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                            case 1:
                                return e = t.sent(), this.setState({
                                    giftingEnabled: "yes" === e
                                }), [2]
                        }
                    })
                })
            }, t.prototype.getPaidOptionsPage = function() {
                return o.createElement(P, {
                    onBack: this.goToPreviousPage,
                    channelDisplayName: this.props.channelDisplayName,
                    onSelectTierTab: this.onSelectTierTab,
                    reportSubMenuAction: this.props.reportSubMenuAction,
                    subscriptionProducts: this.props.subscriptionProducts,
                    isSubscribed: !1,
                    hasDiscount: this.hasDiscount(this.props)
                })
            }, t.prototype.getGiftOptionsPage = function() {
                return o.createElement(N.U, {
                    padding: 2
                }, o.createElement(R.a, {
                    onBack: this.goToPreviousPage,
                    channelDisplayName: this.props.channelDisplayName,
                    onSelectTierTab: this.onSelectTierTab,
                    reportSubMenuAction: this.props.reportSubMenuAction,
                    subscriptionProducts: this.props.subscriptionProducts,
                    onGiftSelect: this.showRecipientSelect
                }))
            }, t.prototype.getGiftRecipientSearchPage = function() {
                return o.createElement(x, {
                    onBack: this.goToPreviousPage,
                    selectedSubProduct: this.props.subscriptionProducts[this.state.selectedSubProductIndex],
                    reportSubMenuAction: this.props.reportSubMenuAction
                })
            }, t.prototype.getTopPage = function() {
                var e = null,
                    t = null,
                    n = null,
                    i = o.createElement(N._21, null, this.messages.tier1PricePerMonth),
                    a = this.messages.tier1Price;
                return this.hasDiscount(this.props) && (i = o.createElement(N.U, null, o.createElement(N._21, {
                    className: "tw-subscription-modal__old-price"
                }, o.createElement("s", null, this.messages.tier1PricePerMonth)), o.createElement(N._21, {
                    className: "tw-subscription-modal__new-price",
                    type: N._26.H5,
                    bold: !0
                }, this.messages.discountMessage, " ")), a = Object(j.a)(this.props.subscriptionProducts[0].self.newPrice)), (this.props.inPrimeRegion || this.props.userHasPrime) && (n = this.renderPrimeSection()), this.props.isNonStandardSub || (e = o.createElement(N.U, {
                    margin: {
                        right: 1
                    },
                    display: N.H.Inline
                }, o.createElement(N.u, {
                    ariaLabel: this.messages.seeMoreSubOptions,
                    onClick: this.showSubOptions,
                    type: N.z.Hollow,
                    "data-test-selector": "subscribe-button__more-sub-options-button",
                    "data-a-target": "see-more-sub-options-button"
                }, this.messages.seeMoreSubOptions))), this.state.giftingEnabled && (t = o.createElement(N.U, {
                    display: N.H.Inline
                }, o.createElement(N.u, {
                    ariaLabel: this.messages.giftSubscription,
                    onClick: this.showGiftOptions,
                    type: N.z.Hollow,
                    "data-test-selector": "subscribe-button__gift"
                }, this.messages.giftSubscription))), o.createElement(N.U, {
                    padding: 2
                }, n, o.createElement(N.U, null, o.createElement(N._21, {
                    type: N._26.H4,
                    bold: !0
                }, this.messages.paidSubscription), i, o.createElement(N.U, {
                    display: N.H.Flex
                }, o.createElement(N.U, {
                    margin: {
                        right: 1,
                        top: 1
                    }
                }, o.createElement(N.u, {
                    ariaLabel: this.messages.subscribeTier1,
                    "data-a-target": "tier1-subscribe-button",
                    "data-test-selector": "subscribe-button__top-page-sub-button",
                    linkTo: this.props.subscriptionProducts[0].url,
                    onClick: this.handleTopPageSubButtonClick,
                    purchase: a,
                    targetBlank: !0
                }, this.messages.subscribe)))), o.createElement(N.U, {
                    margin: {
                        right: 1,
                        top: 2
                    }
                }, e, t))
            }, t.prototype.renderPrimeSection = function() {
                var e = this.props.userHasPrime ? this.messages.useFreeChannelSub : this.messages.primeUpsell;
                return o.createElement(N.U, {
                    margin: {
                        bottom: 2
                    }
                }, o.createElement(N.U, {
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(N._21, {
                    type: N._26.H4,
                    bold: !0
                }, this.messages.freeSubWithPrime)), o.createElement(N.U, null, o.createElement(N.U, {
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(N._21, null, e)), o.createElement(A.a, {
                    authToken: this.props.authToken,
                    "data-a-target": "subscribe-with-prime-button",
                    isSubscribed: !1,
                    isSubscribedWithPrime: !1,
                    onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                    reportSubMenuAction: this.props.reportSubMenuAction,
                    subLogin: this.props.subLogin,
                    userHasPrime: this.props.userHasPrime,
                    canPrimeSubscribe: this.props.canPrimeSubscribe
                })))
            }, t.prototype.setMessages = function() {
                var e = this.props.subscriptionProducts[0].price;
                this.hasDiscount(this.props) && this.props.subscriptionProducts[0].self.isEligibleForDiscount && (e = Object(j.a)(this.props.subscriptionProducts[0].self.newPrice)), this.messages = {
                    useFreeChannelSub: Object(s.d)("Use your free channel subscription to directly support your favorite streamer. {upsellTextLink}", {
                        upsellTextLink: o.createElement("a", {
                            href: "https://help.twitch.tv/customer/en/portal/articles/2572060-twitch-prime-guide",
                            target: "_blank"
                        }, Object(s.d)("Learn more about your free sub", "BalloonNonSubbedUser"))
                    }, "BalloonNonSubbedUser"),
                    primeUpsell: Object(s.d)("{upsellTextBold}, plus get free game loot every month, ad-free viewing, and loads more with Twitch Prime.", {
                        upsellTextBold: o.createElement("strong", null, Object(s.d)("Support your favorite streamer", "BalloonNonSubbedUser"))
                    }, "BalloonNonSubbedUser"),
                    freeSubWithPrime: Object(s.d)("Free Channel Sub with Twitch Prime", "BalloonNonSubbedUser"),
                    changeSubscription: Object(s.d)("Change Your Subscription", "BalloonNonSubbedUser"),
                    seeMoreSubOptions: Object(s.d)("More Paid Subscription Options", "BalloonNonSubbedUser"),
                    tier1Price: Object(s.d)("{tier1Price}", {
                        tier1Price: e
                    }, "BalloonNonSubbedUser"),
                    paidSubscription: Object(s.d)("Paid Subscription", "BalloonNonSubbedUser"),
                    tier1PricePerMonth: Object(s.d)("{price} / Month", {
                        price: this.props.subscriptionProducts[0].price
                    }, "BalloonNonSubbedUser"),
                    subscribeTier1: Object(s.d)("Subscribe {tier1Price}", {
                        tier1Price: e
                    }, "BalloonNonSubbedUser"),
                    subscribeToUser: Object(s.d)("Subscribe to {username}", {
                        username: this.props.channelDisplayName
                    }, "BalloonNonSubbedUser"),
                    subscribe: Object(s.d)("Subscribe", "BalloonNonSubbedUser"),
                    back: Object(s.d)("Back", "BalloonNonSubbedUser"),
                    allSubscriptions: Object(s.d)("All Paid Subscriptions", "BalloonNonSubbedUser"),
                    chooseGiftSubscription: Object(s.d)("Choose A Gift Subscription", "BalloonNonSubbedUser"),
                    discountMessage: Object(s.d)("{price} for the first month (Save 50%)", {
                        price: e
                    }, "BalloonNonSubbedUser"),
                    giftSubscription: Object(s.d)("Gift a Subscription", "BalloonNonSubbedUser"),
                    giftDiscountDisclaimer: Object(s.d)("Promotions do not apply to Gift Subscriptions", "BalloonNonSubbedUser")
                }
            }, t.prototype.isDiscountDataReady = function(e) {
                return e.data.user && e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0 && e.data.user.subscriptionProducts[0] && e.data.user.subscriptionProducts[0].self && void 0 !== e.data.user.subscriptionProducts[0].self.isEligibleForDiscount
            }, t.prototype.isSubscriptionDiscountReady = function(e) {
                return void 0 !== e.subscriptionProducts[0].self
            }, t.prototype.hasDiscount = function(e) {
                return !!this.isDiscountDataReady(e) && Object(j.b)(e.subscriptionProducts)
            }, t = r.__decorate([Object(c.a)(B, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.channelLogin
                }
            }), Object(f.c)("BalloonNonSubbedUser")], t)
        }(o.Component)),
        V = H,
        z = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.showTop = function() {
                    n.setState(function() {
                        return {
                            currentPage: a.Top
                        }
                    })
                }, n.showRecipientSelect = function() {
                    n.setState(function() {
                        return {
                            currentPage: a.RecipientSelect
                        }
                    })
                }, n.showGiftOptions = function() {
                    n.props.reportSubMenuAction({
                        action: C.a.ClickGiftSubOptions
                    }), n.setState(function() {
                        return {
                            currentPage: a.GiftOptions
                        }
                    })
                }, n.showSubOptions = function() {
                    n.setState(function() {
                        return {
                            currentPage: a.SubOptions
                        }
                    })
                }, n.goToPreviousPage = function() {
                    return n.state.currentPage === a.GiftOptions || n.state.currentPage === a.SubOptions || n.state.giftShortcut ? (n.showTop(), void n.setState({
                        giftShortcut: !1
                    })) : n.state.currentPage === a.RecipientSelect ? void n.showGiftOptions() : void 0
                }, n.onGiftSelect = function() {
                    n.props.reportSubMenuAction({
                        action: C.a.GiftASub,
                        checkoutButtonTier: n.props.subscriptionProducts[0].price
                    }), n.setState({
                        selectedSubProductIndex: 0,
                        giftShortcut: !0
                    }), n.showRecipientSelect()
                }, n.handleTopPageSubButtonClick = function() {
                    n.props.reportSubMenuAction({
                        action: C.a.ClickCheckout,
                        checkoutButtonTier: n.props.subscriptionProducts[0].price
                    })
                }, n.onSelectTierTab = function(e) {
                    var t = n.tabToSubProduct.get(e);
                    if (t) {
                        var i = n.props.subscriptionProducts.findIndex(function(e) {
                            return e.price === t.price
                        });
                        i !== n.state.selectedSubProductIndex && n.setState({
                            selectedSubProductIndex: i
                        }), n.props.onSelectTierTab(t.price)
                    } else n.props.onSelectTierTab(M.a)
                }, n.state = {
                    currentPage: a.Top,
                    selectedSubProductIndex: 0,
                    giftShortcut: !1,
                    giftingEnabled: !1
                }, n.tabToSubProduct = i(t.subscriptionProducts), n
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.getGiftingExperimentAssignment()
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.setMessages(), this.state.currentPage === a.Top ? this.getTopPage() : this.state.currentPage === a.SubOptions ? this.getSubOptionsPage() : this.state.currentPage === a.GiftOptions ? this.getGiftOptionsPage() : this.state.currentPage === a.RecipientSelect ? this.getGiftRecipientSearchPage() : this.getTopPage()
            }, t.prototype.getGiftingExperimentAssignment = function() {
                return r.__awaiter(this, void 0, void 0, function() {
                    var e;
                    return r.__generator(this, function(t) {
                        switch (t.label) {
                            case 0:
                                return [4, s.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                            case 1:
                                return e = t.sent(), this.setState({
                                    giftingEnabled: "yes" === e
                                }), [2]
                        }
                    })
                })
            }, t.prototype.getGiftRecipientSearchPage = function() {
                return o.createElement(x, {
                    onBack: this.goToPreviousPage,
                    selectedSubProduct: this.props.subscriptionProducts[this.state.selectedSubProductIndex],
                    reportSubMenuAction: this.props.reportSubMenuAction
                })
            }, t.prototype.getGiftOptionsPage = function() {
                return o.createElement(N.U, {
                    padding: 2
                }, o.createElement(R.a, {
                    onBack: this.goToPreviousPage,
                    channelDisplayName: this.props.channelDisplayName,
                    subscriptionProducts: this.props.subscriptionProducts,
                    onGiftSelect: this.showRecipientSelect,
                    onSelectTierTab: this.onSelectTierTab,
                    reportSubMenuAction: this.props.reportSubMenuAction
                }))
            }, t.prototype.getSubOptionsPage = function() {
                return o.createElement(P, {
                    onBack: this.goToPreviousPage,
                    channelDisplayName: this.props.channelDisplayName,
                    onSelectTierTab: this.onSelectTierTab,
                    reportSubMenuAction: this.props.reportSubMenuAction,
                    subscriptionProducts: this.props.subscriptionProducts,
                    hasDiscount: !1,
                    isSubscribed: !0
                })
            }, t.prototype.getTopPageGiftSection = function() {
                return o.createElement(N.U, null, o.createElement(N._21, {
                    type: N._26.H4,
                    bold: !0
                }, this.messages.helpGrow), o.createElement(N.U, {
                    margin: {
                        top: 1,
                        bottom: 1
                    },
                    display: N.H.Flex
                }, o.createElement(N.u, {
                    ariaLabel: this.messages.giftSubscription + " " + this.props.subscriptionProducts[0].price,
                    onClick: this.onGiftSelect,
                    purchase: this.props.subscriptionProducts[0].price
                }, this.messages.giftSubscription), o.createElement(N.U, {
                    margin: {
                        left: 1
                    }
                }, o.createElement(N.u, {
                    ariaLabel: this.messages.giftOptions,
                    onClick: this.showGiftOptions,
                    type: N.z.Hollow
                }, this.messages.giftOptions))))
            }, t.prototype.getTopPageUpgradeSection = function() {
                return o.createElement(N.U, null, o.createElement(N._21, {
                    type: N._26.H4,
                    bold: !0
                }, this.messages.upgradeSubscription), o.createElement(F.a, {
                    authToken: this.props.authToken,
                    onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                    subLogin: this.props.subLogin,
                    userHasPrime: this.props.userHasPrime,
                    canPrimeSubscribe: this.props.canPrimeSubscribe,
                    channelDisplayName: this.props.channelDisplayName,
                    onSelectTierTab: this.onSelectTierTab,
                    subbedTier: this.props.subbedTier,
                    subscriptionProducts: this.props.subscriptionProducts,
                    reportSubMenuAction: this.props.reportSubMenuAction,
                    onGiftSelect: this.showRecipientSelect,
                    isSubscribed: !0
                }))
            }, t.prototype.getGiftInfoSection = function() {
                var e, t, n = null;
                return this.props.giftPaidUpgrade ? (e = this.messages.yourSubscription, t = this.messages.giftInfo, n = this.messages.giftUpgradeInfo) : (e = this.messages.yourGiftSub, t = this.messages.giftInfoWithExpiration), o.createElement(N.U, null, o.createElement(N._21, {
                    bold: !0,
                    type: N._26.H4
                }, e), o.createElement(N.P, {
                    margin: {
                        y: 1
                    }
                }, o.createElement(N._21, null, t)), n)
            }, t.prototype.getGiftExtendSection = function() {
                var e = null,
                    t = null;
                return this.props.isNonStandardSub || (e = o.createElement(N.U, {
                    margin: {
                        right: 1
                    },
                    display: N.H.Inline
                }, o.createElement(N.u, {
                    ariaLabel: this.messages.seeMoreSubOptions,
                    onClick: this.showSubOptions,
                    type: N.z.Hollow,
                    "data-a-target": "see-more-sub-options-button"
                }, this.messages.seeMoreSubOptions))), t = o.createElement(N.U, {
                    display: N.H.Inline
                }, o.createElement(N.u, {
                    ariaLabel: this.messages.giftSubscription,
                    onClick: this.showGiftOptions,
                    type: N.z.Hollow
                }, this.messages.giftSubscription)), o.createElement(N.U, null, o.createElement(N.U, {
                    margin: {
                        top: 1
                    }
                }, o.createElement(N._21, {
                    type: N._26.H4,
                    bold: !0
                }, this.messages.extendSubscription), o.createElement(N.P, {
                    margin: {
                        top: 1
                    }
                }, o.createElement(N._21, null, this.messages.tier1PricePerMonth)), o.createElement(N.U, {
                    margin: {
                        right: 1,
                        top: 1
                    }
                }, o.createElement(N.u, {
                    ariaLabel: this.props.subscriptionProducts[0].price,
                    "data-a-target": "tier1-subscribe-button",
                    linkTo: this.props.subscriptionProducts[0].url,
                    onClick: this.handleTopPageSubButtonClick,
                    purchase: this.props.subscriptionProducts[0].price,
                    targetBlank: !0
                }, this.messages.subscribe))), o.createElement(N.U, {
                    margin: {
                        right: 1,
                        top: 2
                    }
                }, e, t))
            }, t.prototype.getTopPage = function() {
                return this.state.giftingEnabled ? this.props.userHasGiftSub ? this.props.userHasGiftSub && !this.props.giftPaidUpgrade ? o.createElement(N.U, {
                    className: "channel-header__subscription-modal-main",
                    padding: 2
                }, o.createElement(N.U, {
                    margin: {
                        bottom: 2
                    }
                }, this.getGiftInfoSection()), this.getGiftExtendSection()) : o.createElement(N.U, {
                    className: "channel-header__subscription-modal-main",
                    padding: 2
                }, o.createElement(N.U, {
                    margin: {
                        bottom: 2
                    }
                }, this.getGiftInfoSection()), this.getTopPageGiftSection()) : o.createElement(N.U, {
                    className: "channel-header__subscription-modal-main",
                    padding: 2
                }, o.createElement(N.U, {
                    margin: {
                        bottom: 2
                    }
                }, this.getTopPageGiftSection()), this.getTopPageUpgradeSection()) : o.createElement(N.U, {
                    className: "channel-header__subscription-modal-main",
                    padding: 2
                }, this.getTopPageUpgradeSection())
            }, t.prototype.setMessages = function() {
                switch (this.props.subbedTier) {
                    case d.a.Tier1:
                        this.props.subscriptionProducts[0].price;
                        break;
                    case d.a.Tier2:
                        this.props.subscriptionProducts[1].price;
                        break;
                    case d.a.Tier3:
                        this.props.subscriptionProducts[2].price;
                        break;
                    default:
                        this.props.subscriptionProducts[0].price
                }
                this.messages = {
                    upgradeSubscription: Object(s.d)("Upgrade Your Subscription", "BalloonSubbedUser"),
                    helpGrow: Object(s.d)("Help Grow {streamer}'s Community", {
                        streamer: this.props.channelDisplayName
                    }, "BalloonSubbedUser"),
                    giftSubscription: Object(s.d)("Gift A Subscription", "BalloonSubbedUser"),
                    giftOptions: Object(s.d)("More Gift Options", "BalloonSubbedUser"),
                    chooseGiftSubscription: Object(s.d)("Choose A Gift Subscription", "BalloonSubbedUser"),
                    back: Object(s.d)("Back", "BalloonSubbedUser"),
                    yourSubscription: Object(s.d)("Your Subscription", "BalloonSubbedUser"),
                    extendSubscription: Object(s.d)("Extend Your Subscription", "BalloonSubbedUser"),
                    yourGiftSub: Object(s.d)("Your Gift Subscription", "BalloonSubbedUser"),
                    seeMoreSubOptions: Object(s.d)("More Paid Subscription Options", "BalloonSubbedUser"),
                    subscribe: Object(s.d)("Subscribe", "BalloonSubbedUser"),
                    giftInfo: Object(s.d)("{giftPrice} Gift Subscription from {giftSender}", {
                        giftPrice: this.getCurrentSubPrice(),
                        giftSender: o.createElement(N._21, {
                            bold: !0,
                            type: N._26.Span
                        }, this.props.giftSender || "")
                    }, "BalloonSubbedUser"),
                    giftUpgradeInfo: Object(s.d)("Your new {upgradePrice} Paid Subscription will begin on {subStartDate}", {
                        upgradePrice: this.props.giftPaidUpgrade ? this.props.giftPaidUpgrade.price : "",
                        subStartDate: this.getFormattedGiftUpgradeStartDate()
                    }, "BalloonSubbedUser"),
                    giftInfoWithExpiration: Object(s.d)("{giftPrice} Subscription from {giftSender} - Benefits expire on {giftEndDate}", {
                        giftPrice: this.getCurrentSubPrice(),
                        giftSender: o.createElement(N._21, {
                            bold: !0,
                            type: N._26.Span
                        }, this.props.giftSender || ""),
                        giftEndDate: this.getFormattedGiftEndDate()
                    }, "BalloonSubbedUser"),
                    tier1PricePerMonth: Object(s.d)("{price} / Month", {
                        price: this.props.subscriptionProducts[0].price
                    }, "BalloonSubbedUser"),
                    allSubscriptions: Object(s.d)("All Paid Subscriptions", "BalloonSubbedUser")
                }
            }, t.prototype.getFormattedGiftUpgradeStartDate = function() {
                var e = "";
                if (this.props.giftPaidUpgrade && this.props.giftPaidUpgrade.startsAt) try {
                    e = Object(s.c)(new Date(this.props.giftPaidUpgrade.startsAt), {
                        month: "long",
                        day: "numeric"
                    })
                } catch (t) {
                    s.i.debug(t, "There was an error formatting gift upgrade start date."), e = ""
                }
                return e
            }, t.prototype.getFormattedGiftEndDate = function() {
                var e = "";
                if (this.props.giftSubEndDate) try {
                    e = Object(s.c)(new Date(this.props.giftSubEndDate), {
                        month: "long",
                        day: "numeric"
                    })
                } catch (t) {
                    s.i.debug(t, "There was an error formatting gift end date."), e = ""
                }
                return e
            }, t.prototype.getCurrentSubPrice = function() {
                switch (this.props.subbedTier) {
                    case "1000":
                        return this.props.subscriptionProducts[0].price;
                    case "2000":
                        return this.props.subscriptionProducts[1].price;
                    case "3000":
                        return this.props.subscriptionProducts[2].price;
                    default:
                        return this.props.subscriptionProducts[0].price
                }
            }, t = r.__decorate([Object(f.c)("BalloonSubbedUser")], t)
        }(o.Component),
        W = z,
        q = (n(490), n(491));
    n.d(t, "a", function() {
        return G
    }), n.d(t, "b", function() {
        return K
    });
    var G = "prime",
        Q = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isSubscribed: !1,
                    activeTierPrice: G,
                    subbedTier: null,
                    subData: null,
                    inPrimeRegion: !1,
                    isNonStandardSub: !1,
                    isGiftSub: !1,
                    hasReconciledUser: !1,
                    subGiftingEnabled: !1
                }, t.modalLevel = "top_page", t.reportSubMenuAction = function(e) {
                    Object(C.b)({
                        action: e.action || "",
                        channelLogin: t.props.channelLogin || "",
                        channelID: t.props.data && t.props.data.user.id,
                        checkoutButtonTier: e.checkoutButtonTier || t.state.activeTierPrice.slice(),
                        hasSubCredit: !!t.props.data.user.self && t.props.data.user.self.canPrimeSubscribe,
                        hostChannelID: t.props.hostChannelID,
                        hostChannelLogin: t.props.hostChannelLogin,
                        isMenuOpen: !(e.action === C.a.OpenSubMenu),
                        sub_location: "channel_page",
                        modal: !t.state.isSubscribed,
                        modalLevel: t.state.isSubscribed ? "" : t.modalLevel.slice(),
                        showPrimeContent: t.state.inPrimeRegion,
                        giftRecipient: e.giftRecipient || null
                    }), !e.modalLevel || e.action !== C.a.ClickMoreSubOptions && e.action !== C.a.ClickBack || (t.modalLevel = e.modalLevel, t.setState({
                        activeTierPrice: G
                    }))
                }, t.handleMenuToggle = function(e) {
                    t.reportSubMenuAction({
                        action: e ? C.a.CloseSubMenu : C.a.OpenSubMenu
                    })
                }, t.onSelectTierTab = function(e) {
                    t.state.activeTierPrice !== e && t.setState({
                        activeTierPrice: e
                    })
                }, t.onSubscribedWithPrime = function() {
                    t.reportSubMenuAction({
                        action: C.a.SubWithPrime
                    }), t.modalLevel = "", t.setState({
                        isSubscribed: !0,
                        subbedTier: d.a.Prime
                    }), Object(m.d)(q, {
                        login: t.props.channelLogin
                    }, function(e) {
                        return e.user && e.user.self && (e.user.self.canPrimeSubscribe = !1, e.user.self.subscriptionBenefit = {
                            id: Object(g.a)(),
                            purchasedWithPrime: !0,
                            tier: G,
                            endsAt: null,
                            paidUpgrade: null,
                            gift: {
                                isGift: !1,
                                gifter: null,
                                __typename: "SubscriptionGift"
                            },
                            __typename: "SubscriptionBenefit"
                        }), e
                    })
                }, t.setMessages = function() {
                    var e;
                    e = t.state.subGiftingEnabled ? Object(s.d)("Gift A Sub", "SubscribeButton") : Object(s.d)("Subscribed", "SubscribeButton"), t.messages = {
                        subscribe: t.props.hostChannelID ? Object(s.d)("Subscribe to {username}", {
                            username: t.props.data.user.displayName
                        }, "SubscribeButton") : Object(s.d)("Subscribe", "SubscribeButton"),
                        subscribed: t.props.hostChannelID ? Object(s.d)("Subscribed to {username}", {
                            username: t.props.data.user.displayName
                        }, "SubscribeButton") : e,
                        discountMessage: Object(s.d)("Get 50% off the first month of any paid Subscription", "SubscribeButton")
                    }
                }, t.setPromotionData = function(e) {
                    if (t.state) {
                        var n = Object.assign({}, t.state.subData);
                        if (null !== n) {
                            for (var i = [], a = 0; a < 3; a++) {
                                var r = Object.assign({}, n.subscriptionProducts[a]);
                                r.self = e[a].self, i.push(r)
                            }
                            n.subscriptionProducts = i, t.setState({
                                subData: n
                            })
                        }
                    }
                }, t
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.getGiftingExperimentAssignment()
            }, t.prototype.componentDidMount = function() {
                this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive()
            }, t.prototype.componentDidUpdate = function() {
                this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                if (this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch(), this.props.channelLogin !== e.channelLogin && this.setState({
                        subData: null,
                        isSubscribed: !1,
                        hasReconciledUser: !1
                    }), this.isUserDataReady(e) && this.hasSubscriptionProducts(e)) {
                    if (!this.state.inPrimeRegion && e.data.requestInfo && Object(p.b)(e.data.requestInfo.countryCode) && this.setState({
                            inPrimeRegion: !0
                        }), e.data.currentUser && this.isOwnChannel(e)) return void this.setState({
                        hasReconciledUser: !0
                    });
                    if (this.setState({
                            subData: e.data.user,
                            isNonStandardSub: 1 === e.data.user.subscriptionProducts.length
                        }), e.data.user.subscriptionProducts.some(this.isSubscriptionProductInvalid) && this.setState({
                            isNonStandardSub: !0
                        }), e.data.currentUser && e.data.user.self)
                        if (e.data.user.self.subscriptionBenefit) {
                            var t = e.data.user.self.subscriptionBenefit.purchasedWithPrime ? G : e.data.user.self.subscriptionBenefit.tier;
                            this.modalLevel = "";
                            var n = e.data.user.self.subscriptionBenefit.gift.isGift;
                            this.setState({
                                isSubscribed: !0,
                                subbedTier: t,
                                hasReconciledUser: !0,
                                isGiftSub: n
                            })
                        } else this.setState({
                            isSubscribed: !1,
                            hasReconciledUser: !0
                        });
                    else this.setState({
                        hasReconciledUser: !0
                    })
                }
            }, t.prototype.render = function() {
                if (!this.shouldRender() || !this.hasSubscriptionProducts(this.props)) return null;
                if (this.setMessages(), this.props.data.currentUser && this.state.isSubscribed && this.state.isNonStandardSub) return o.createElement(N.u, {
                    disabled: !0,
                    ariaLabel: this.messages.subscribed,
                    icon: N._9.Star
                }, this.messages.subscribed);
                var e = this.state.subbedTier === d.a.Prime ? N._9.Crown : N._9.Star,
                    t = this.state.isSubscribed ? this.messages.subscribed : this.messages.subscribe,
                    n = this.state.isSubscribed ? "subscribed-button" : "subscribe-button",
                    i = o.createElement(N.u, {
                        "data-a-target": n,
                        "data-test-selector": "subscribe-button__dropdown",
                        ariaLabel: t,
                        type: this.state.isSubscribed ? N.z.Success : N.z.Default,
                        dropdown: !0,
                        icon: this.state.isSubscribed ? e : void 0
                    }, t),
                    a = this.props.hostChannelID ? N.q.TopLeft : N.q.BottomRight;
                return o.createElement(l.a, {
                    onToggle: this.handleMenuToggle
                }, i, o.createElement(N.p, {
                    size: N.r.Large,
                    direction: a,
                    "data-a-target": "sub-balloon"
                }, this.renderBalloonContent()))
            }, t.prototype.renderBalloonContent = function() {
                if (!this.state.subData) return s.i.debug("NOT rendering sub balloon; sub data not yet ready", {
                    state: this.state
                }), null;
                if (s.i.debug("rendering sub balloon", {
                        state: this.state
                    }), this.props.data.currentUser) {
                    if (this.state.isSubscribed) return o.createElement(W, {
                        authToken: this.props.authToken,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        channelDisplayName: this.state.subData.displayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subbedTier: this.state.subbedTier,
                        isNonStandardSub: this.state.isNonStandardSub,
                        subscriptionProducts: this.state.subData.subscriptionProducts,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        userHasPrime: this.props.data.currentUser.hasPrime,
                        userHasGiftSub: this.state.isGiftSub,
                        subLogin: this.state.subData.login,
                        giftSubEndDate: this.props.data.user.self && this.props.data.user.self.subscriptionBenefit ? this.props.data.user.self.subscriptionBenefit.endsAt : void 0,
                        giftPaidUpgrade: this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.paidUpgrade ? this.props.data.user.self.subscriptionBenefit.paidUpgrade : void 0,
                        giftSender: this.getGiftSender()
                    });
                    var e = null;
                    return this.hasDiscount() && (e = o.createElement(N.U, {
                        className: "tw-subscription-modal__discount-bar"
                    }, o.createElement(N._21, null, this.messages.discountMessage))), o.createElement(N.U, null, e, o.createElement(V, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.state.subData.displayName,
                        channelLogin: this.props.channelLogin,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        inPrimeRegion: this.state.inPrimeRegion,
                        isNonStandardSub: this.state.isNonStandardSub,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subLogin: this.state.subData.login,
                        subscriptionProducts: this.state.subData.subscriptionProducts,
                        userHasPrime: this.props.data.currentUser.hasPrime,
                        setPromotionData: this.setPromotionData
                    }))
                }
                return o.createElement(V, {
                    authToken: this.props.authToken,
                    channelDisplayName: this.state.subData.displayName,
                    channelLogin: this.props.channelLogin,
                    canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                    inPrimeRegion: this.state.inPrimeRegion,
                    isNonStandardSub: this.state.isNonStandardSub,
                    onSelectTierTab: this.onSelectTierTab,
                    onSubscribedWithPrime: this.onSubscribedWithPrime,
                    reportSubMenuAction: this.reportSubMenuAction,
                    subLogin: this.state.subData.login,
                    subscriptionProducts: this.state.subData.subscriptionProducts,
                    userHasPrime: !1,
                    setPromotionData: this.setPromotionData
                })
            }, t.prototype.hasSubscriptionProducts = function(e) {
                return e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0
            }, t.prototype.shouldRender = function() {
                return !!this.isUserDataReady(this.props) && (!this.hasSubscriptionProducts(this.props) || !!this.isSubscriptionReady())
            }, t.prototype.isUserDataReady = function(e) {
                return e.data && e.data.user && !e.data.loading && !e.data.error
            }, t.prototype.isOwnChannel = function(e) {
                return e.data.user.id === (e.data.currentUser && e.data.currentUser.id)
            }, t.prototype.isSubscriptionReady = function() {
                return this.state.subData && this.state.hasReconciledUser
            }, t.prototype.getGiftSender = function() {
                return this.state.isGiftSub && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.gift.isGift ? this.props.data.user.self.subscriptionBenefit.gift.gifter.displayName : null
            }, t.prototype.getGiftingExperimentAssignment = function() {
                return r.__awaiter(this, void 0, void 0, function() {
                    var e, t;
                    return r.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                e = "no", n.label = 1;
                            case 1:
                                return n.trys.push([1, 3, , 4]), [4, s.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                            case 2:
                                return e = n.sent(), [3, 4];
                            case 3:
                                return t = n.sent(), e = "no", [3, 4];
                            case 4:
                                return this.setState({
                                    subGiftingEnabled: "yes" === e
                                }), [2]
                        }
                    })
                })
            }, t.prototype.isSubscriptionProductInvalid = function(e) {
                return !e.emoteSetID
            }, t.prototype.isSubscriptionDiscountReady = function(e) {
                return !(!e || !e.subData) && void 0 !== e.subData.subscriptionProducts[0].self
            }, t.prototype.hasDiscount = function() {
                var e = this.state;
                return !!this.isSubscriptionDiscountReady(e) && (!(!e || !e.subData) && Object(j.b)(e.subData.subscriptionProducts))
            }, t = r.__decorate([Object(c.a)(q, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.channelLogin
                }
            }), Object(u.a)([{
                topic: function(e) {
                    return Object(h.n)(e.data.currentUser && e.data.currentUser.id || "")
                },
                mapMessageTypesToProps: {
                    "*": "subscriptionInfo"
                },
                skip: function(e) {
                    return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                }
            }])], t)
        }(o.Component),
        K = Q
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i = {
        Prime: "prime",
        Tier1: "1000",
        Tier2: "2000",
        Tier3: "3000"
    }
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return "$" + (e / 100).toFixed(2).toString()
    }

    function a(e) {
        if (e[0].self && e[1].self && e[2].self) {
            if (e[0].self.isEligibleForDiscount) return !0;
            if (e[1].self.isEligibleForDiscount) return !0;
            if (e[2].self.isEligibleForDiscount) return !0
        }
        return !1
    }
    t.a = i, t.b = a
}, function(e, t, n) {
    "use strict";
    n.d(t, "b", function() {
        return h
    }), n.d(t, "a", function() {
        return g
    }), n.d(t, "d", function() {
        return i
    }), n.d(t, "c", function() {
        return f
    });
    var i, a = n(0),
        r = n(4),
        o = (n.n(r), n(287)),
        s = (n.n(o), n(1)),
        l = (n.n(s), n(2)),
        c = n(288),
        u = n(289),
        d = n(5),
        p = n(3),
        m = n(511),
        h = (n.n(m), 920),
        g = "34rem",
        f = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.logger = l.i.withCategory("RightColumn"), n.handleToggleVisibility = function() {
                    var e = n.getLayoutCache();
                    n.props.isExpanded ? (n.props.collapse(), e.resource.isRightColumnClosedByUserAction = !0) : (n.props.expand(), e.resource.isRightColumnClosedByUserAction = !1), l.k.set(l.n.config.layoutCacheKey, e), Object(c.c)({
                        element: c.a.Chat,
                        action: n.props.isExpanded ? c.b.Close : c.b.Open
                    })
                }, n.hideOnBreakpoint = function() {
                    if (n.containerRef) {
                        var e = h;
                        window.innerWidth < e && !n.props.theatreModeEnabled ? "none" !== n.containerRef.style.display && (n.containerRef.style.display = "none") : "none" === n.containerRef.style.display && (n.containerRef.style.display = "")
                    }
                }, n.setContainerRef = function(e) {
                    return n.containerRef = e
                }, n.state = {
                    content: null,
                    contentID: null
                }, i && n.logger.warn("RightColumn should only ever be used in the Root. Use <RightColumnContent> instead to wrap components that should display in the right column."), i = n, n
            }
            return a.__extends(t, e), t.prototype.componentDidMount = function() {
                window.addEventListener("resize", this.hideOnBreakpoint), this.hideOnBreakpoint(), this.reportInteractive(), o.bind("alt+r", this.handleToggleVisibility)
            }, t.prototype.componentDidUpdate = function() {
                this.hideOnBreakpoint(), this.state.content && this.reportInteractive()
            }, t.prototype.componentWillUnmount = function() {
                window.removeEventListener("resize", this.hideOnBreakpoint), o.unbind("alt+r")
            }, t.prototype.render = function() {
                if (!this.state.content) return null;
                var e = r("right-column", {
                    "right-column--collapsed": !this.props.isExpanded,
                    "right-column--theatre": this.props.theatreModeEnabled
                });
                return s.createElement(p.U, {
                    className: e,
                    refDelegate: this.setContainerRef,
                    flexShrink: 0,
                    fullHeight: !0,
                    position: this.props.theatreModeEnabled ? p._2.Fixed : p._2.Relative,
                    attachTop: this.props.theatreModeEnabled,
                    attachRight: this.props.theatreModeEnabled
                }, s.createElement(p.U, {
                    position: p._2.Relative,
                    flexGrow: 0,
                    flexShrink: 0,
                    fullHeight: !0,
                    display: this.props.isExpanded ? p.H.Block : p.H.Hide
                }, this.state.content), s.createElement(p.P, {
                    className: "right-column__toggle-visibility",
                    position: p._2.Absolute,
                    flexGrow: 0,
                    flexShrink: 0,
                    display: p.H.Block,
                    zIndex: p._38.Above
                }, s.createElement("button", {
                    onClick: this.handleToggleVisibility,
                    "data-a-target": "right-column__toggle-collapse-btn"
                }, s.createElement(p.P, {
                    className: "right-column__toggle-visibility-icon",
                    position: p._2.Absolute
                }, s.createElement(p._21, {
                    type: p._26.Span
                }, s.createElement(p._8, {
                    asset: p._9.GlyphArrDown
                }))))))
            }, t.prototype.provideContent = function(e, t) {
                this.state.content && this.state.contentID !== t && this.logger.warn("Displaying another component already. Only one component can be displayed at a time using <RightColumnContent>. Check the page or other subcomponents to find the other instance and determine which one should be showing."), this.setState({
                    content: e,
                    contentID: t
                })
            }, t.prototype.removeContent = function() {
                this.setState({
                    content: null,
                    contentID: null
                })
            }, t.prototype.reportInteractive = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.getLayoutCache = function() {
                return l.k.get(l.n.config.layoutCacheKey, u.a)
            }, t = a.__decorate([Object(d.c)("RightColumn")], t)
        }(s.Component)
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return Object(U.bindActionCreators)({
            login: function() {
                return Object(M.f)(P.a.FollowButton)
            }
        }, e)
    }

    function a(e) {
        return e ? e.slice().filter(function(e) {
            return (null !== e.activity || null !== e.availability) && (e.availability === de.a.Online || e.availability === de.a.Idle || e.availability === de.a.Busy)
        }).sort(function(e, t) {
            if (!e.activity && !t.activity) return r(e, t);
            if (e.activity && !t.activity) return -1;
            if (!e.activity && t.activity) return 1;
            if (e.activity && t.activity) {
                if (e.activity.type === ue.a.Watching && t.activity.type !== ue.a.Watching) return -1;
                if (e.activity.type !== ue.a.Watching && t.activity.type === ue.a.Watching) return 1;
                if (e.activity.type === ue.a.Watching && t.activity.type === ue.a.Watching) return r(e, t);
                if (e.activity.type === ue.a.Streaming && t.activity.type !== ue.a.Streaming) return -1;
                if (e.activity.type !== ue.a.Streaming && t.activity.type === ue.a.Streaming) return 1;
                if (e.activity.type === ue.a.Streaming && t.activity.type === ue.a.Streaming) return r(e, t);
                if (e.activity.type === ue.a.Playing && t.activity.type !== ue.a.Playing) return -1;
                if (e.activity.type !== ue.a.Playing && t.activity.type === ue.a.Playing) return 1;
                if (e.activity.type === ue.a.Playing && t.activity.type === ue.a.Playing) return r(e, t)
            }
            return c(e, t)
        }) : []
    }

    function r(e, t) {
        return e.availability || t.availability ? e.availability && !t.availability ? -1 : !e.availability && t.availability ? 1 : e.availability === de.a.Online && t.availability !== de.a.Online ? -1 : e.availability !== de.a.Online && t.availability === de.a.Online ? 1 : e.availability === de.a.Online && t.availability === de.a.Online ? c(e, t) : e.availability === de.a.Idle && t.availability !== de.a.Idle ? -1 : e.availability !== de.a.Idle && t.availability === de.a.Idle ? 1 : e.availability === de.a.Idle && t.availability === de.a.Idle ? c(e, t) : e.availability === de.a.Busy && t.availability !== de.a.Busy ? -1 : e.availability !== de.a.Busy && t.availability === de.a.Busy ? 1 : (e.availability === de.a.Busy && (t.availability, de.a.Busy), c(e, t)) : -1
    }

    function o(e, t, n) {
        var i = e.slice(),
            a = new Set,
            r = i.filter(function(e) {
                return e.stream && e.stream.id
            });
        1 === r.length && a.add(r[0].id);
        var o = r.sort(function(e, t) {
                if (a.add(e.id), a.add(t.id), !e.stream || !t.stream) return 0;
                if (e.stream.type === ie.a.Premiere && t.stream.type === ie.a.Live) return 1;
                if (t.stream.type === ie.a.Premiere && e.stream.type === ie.a.Live) return -1;
                if (e.stream.type === ie.a.Rerun || e.stream.type === ie.a.WatchParty) {
                    if (t.stream.type !== ie.a.Rerun && t.stream.type !== ie.a.WatchParty) return 1
                } else if (t.stream.type === ie.a.Rerun || t.stream.type === ie.a.WatchParty) return -1;
                return null !== e.stream.viewersCount && null === t.stream.viewersCount ? -1 : null !== t.stream.viewersCount && null === e.stream.viewersCount ? 1 : null === e.stream.viewersCount || null === t.stream.viewersCount ? 0 : e.stream.viewersCount > t.stream.viewersCount ? -1 : e.stream.viewersCount < t.stream.viewersCount ? 1 : u(e, t)
            }),
            s = t.filter(function(e) {
                return !a.has(e.id)
            });
        s.reverse();
        var c = l(s, n);
        return o.concat(c)
    }

    function s(e) {
        var t = {},
            n = {};
        if (!e.length) return t;
        var i = Date.now() - 6048e5;
        return e.forEach(function(e) {
            var a = e.owner && e.owner.id;
            if (a && !n[e.owner.id]) {
                if (e.self && e.self.viewingHistory && e.self.viewingHistory.position) return void(n[e.owner.id] = !0);
                var r = new Date(e.publishedAt).getTime();
                if (r && !(r < i)) {
                    var o = t[a] || [];
                    o.push(e), t[a] = o
                }
            }
        }), t
    }

    function l(e, t) {
        if (!t) return e;
        var n = e.filter(function(e) {
                return !!t[e.id]
            }),
            i = e.filter(function(e) {
                return !t[e.id]
            });
        return n.sort(function(e, n) {
            var i = t[e.id],
                a = t[n.id],
                r = i && i.length || 0;
            return (a && a.length || 0) - r
        }), n.concat(i)
    }

    function c(e, t) {
        if (!e.node && !t.node) return 0;
        if (e.node && !t.node) return -1;
        if (t.node && !e.node) return 1;
        var n = e.node.displayName || e.node.login || "",
            i = t.node.displayName || t.node.login || "";
        return n.localeCompare(i)
    }

    function u(e, t) {
        var n = e.displayName || e.login || "",
            i = t.displayName || t.login || "";
        return n.localeCompare(i)
    }

    function d(e, t, n) {
        var i = N.b.get("sidenav_follow_data_sample_rate", 1e4);
        if (!Math.floor(Math.random() * i)) {
            var a = {
                is_collapsed: n,
                followed_channels_total: 0
            };
            if (!t && (a.followed_channels_total = e.follows.edges ? e.follows.edges.length : 0, e.followedLiveUsers && e.followedLiveUsers.nodes)) {
                var r = e.followedLiveUsers.nodes.reduce(function(e, t) {
                    return h(t) === me ? e + 1 : e
                }, 0);
                a.followed_channels_live_stream = e.followedLiveUsers.nodes.length - r, a.followed_channels_rerun = r
            }
            N.n.tracking.track(ae.SpadeEventType.SideNavDetails, a)
        }
    }

    function p(e) {
        N.n.tracking.track(ae.SpadeEventType.SideNavLoadMore, {
            displayed_channel_count: e
        })
    }

    function m(e, t) {
        N.n.tracking.track(ae.SpadeEventType.SideNavChannelClick, {
            click_target_state: h(t),
            click_target_index: e
        })
    }

    function h(e) {
        return e.stream && e.stream.id ? "watch_party" === e.stream.type ? me : pe : he
    }

    function g(e) {
        return {
            currentUserID: e.session.user && "" + e.session.user.id || ""
        }
    }

    function f(e) {
        return Object(U.bindActionCreators)({
            openThread: function(e) {
                return Object(we.l)({
                    collapsed: !1,
                    threadID: e,
                    ignoreCollapseIfOpen: !0
                }, Object(Ee.a)())
            }
        }, e)
    }

    function v(e) {
        return {
            firstPageLoaded: e.session.firstPageLoaded
        }
    }

    function b(e) {
        return {
            currentUserID: e.session.user && "" + e.session.user.id || ""
        }
    }

    function y(e) {
        return Object(U.bindActionCreators)({
            openThread: function(e) {
                return Object(we.l)({
                    collapsed: !1,
                    threadID: e,
                    ignoreCollapseIfOpen: !0
                }, Object(Ee.a)())
            }
        }, e)
    }

    function k(e) {
        return {
            currentUserID: e.session.user && "" + e.session.user.id || ""
        }
    }

    function S(e) {
        return Object(U.bindActionCreators)({
            openThread: function(e) {
                return Object(we.l)({
                    collapsed: !1,
                    threadID: e,
                    ignoreCollapseIfOpen: !0
                }, Object(Ee.a)())
            }
        }, e)
    }
    var _ = n(0),
        w = n(4),
        E = n(1),
        C = n(10),
        N = n(2),
        T = n(28),
        D = n(7),
        I = n(33),
        O = n(34),
        L = n(288),
        x = n(289),
        R = n(5),
        F = n(6),
        U = n(9),
        P = n(48),
        M = n(32),
        A = n(56),
        j = n(49),
        B = n(146),
        H = n(3),
        V = (n(512), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.setContainerRef = function(e) {
                    return t.containerRef = e
                }, t.onMouseEnter = function() {
                    t.props.tooltipLabel ? t.props.tooltipLayer.show({
                        label: t.props.tooltipLabel,
                        from: t.containerRef,
                        align: H._31.Center,
                        direction: H._32.Right
                    }) : t.props.tooltipContent && t.props.tooltipLayer.showRich({
                        from: t.containerRef,
                        richContent: t.props.tooltipContent,
                        allowHover: t.props.offline,
                        delayOpenMS: 1e3,
                        forceDarkTheme: !0,
                        balloonDirection: t.props.offline ? H.q.Right : H.q.RightCenter
                    })
                }, t.onMouseLeave = function() {
                    t.props.tooltipLayer.hide()
                }, t.addEventListeners = function() {
                    t.containerRef && (t.containerRef.addEventListener("mouseenter", t.onMouseEnter), t.containerRef.addEventListener("mouseleave", t.onMouseLeave))
                }, t.removeEventListeners = function() {
                    t.containerRef && (t.containerRef.removeEventListener("mouseenter", t.onMouseEnter), t.containerRef.removeEventListener("mouseleave", t.onMouseLeave))
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive(), this.addEventListeners()
            }, t.prototype.componentWillUnmount = function() {
                this.removeEventListeners()
            }, t.prototype.render = function() {
                return this.props.collapsed ? E.createElement("div", {
                    ref: this.setContainerRef,
                    "data-test-selector": "side-nav-card-collapsed"
                }, E.createElement(H.P, {
                    padding: {
                        y: .5,
                        x: 1
                    },
                    display: H.H.Flex,
                    alignItems: H.c.Center,
                    flexWrap: H.K.NoWrap
                }, E.createElement(C.a, {
                    to: this.props.linkTo,
                    className: "side-nav-card",
                    onClick: this.props.onClick
                }, E.createElement(H.U, {
                    className: w("side-nav-card__avatar", {
                        "side-nav-card__avatar--offline": this.props.offline
                    }),
                    flexShrink: 0
                }, E.createElement(H.l, {
                    imageSrc: this.props.avatarSrc,
                    imageAlt: this.props.avatarAlt,
                    size: 30,
                    presenceIndicator: this.props.avatarPresence,
                    presenceStatus: this.props.presenceStatus
                }))))) : E.createElement("div", {
                    ref: this.setContainerRef
                }, E.createElement(H.U, {
                    className: "side-nav-card",
                    position: H._2.Relative,
                    display: H.H.Flex,
                    alignItems: H.c.Center
                }, E.createElement(H.P, {
                    padding: {
                        y: .5,
                        x: 1
                    },
                    display: H.H.Flex,
                    alignItems: H.c.Center,
                    flexWrap: H.K.NoWrap,
                    fullWidth: !0
                }, E.createElement(C.a, _.__assign({
                    to: this.props.linkTo,
                    className: "side-nav-card__link",
                    onClick: this.props.onClick
                }, Object(H._39)(this.props)), E.createElement(H.U, {
                    className: w("side-nav-card__avatar", {
                        "side-nav-card__avatar--offline": this.props.offline
                    }),
                    flexShrink: 0,
                    alignItems: H.c.Center
                }, E.createElement(H.l, {
                    imageSrc: this.props.avatarSrc,
                    imageAlt: this.props.avatarAlt,
                    size: 30,
                    presenceIndicator: this.props.avatarPresence,
                    presenceStatus: this.props.presenceStatus
                })), E.createElement(H.U, {
                    fullWidth: !0,
                    flexDirection: H.J.Column,
                    flexGrow: 1,
                    margin: {
                        left: 1
                    },
                    display: H.H.Flex,
                    "data-a-target": "side-nav-card-metadata"
                }, E.createElement("div", {
                    className: "side-nav-card__title",
                    title: this.props.title,
                    "data-a-target": "side-nav-title"
                }, E.createElement(H._21, {
                    ellipsis: !0,
                    fontSize: H.L.Size5
                }, this.props.titleElement || this.props.title)), E.createElement(H._17, {
                    className: "side-nav-card__metadata",
                    fontSize: H.L.Size6,
                    display: H.H.Flex,
                    justifyContent: H.T.Between,
                    flexWrap: H.K.NoWrap,
                    ellipsis: !0
                }, E.createElement(H.P, {
                    flexGrow: 1,
                    "data-a-target": "side-nav-game-title"
                }, E.createElement(H._21, {
                    type: H._26.Span,
                    ellipsis: !0
                }, this.props.metadataLeft)), E.createElement(H.U, {
                    flexShrink: 0,
                    margin: {
                        left: .5
                    },
                    "data-a-target": "side-nav-live-status"
                }, this.props.metadataRight))))), this.getCardSlideInContent()))
            }, t.prototype.getCardSlideInContent = function() {
                return this.props.slideInContent ? E.createElement(H.U, {
                    className: "side-nav-card__hover-content",
                    position: H._2.Absolute,
                    display: H.H.Flex,
                    alignItems: H.c.Center,
                    attachRight: !0,
                    padding: {
                        right: 1
                    },
                    "data-a-target": "side-nav-card-hover"
                }, this.props.slideInContent) : null
            }, t = _.__decorate([Object(R.c)("SideNavCard"), Object(B.c)()], t)
        }(E.Component)),
        z = V,
        W = function(e) {
            function t() {
                var t = e.call(this) || this;
                return t.onClickFollow = function() {
                    return t.props.login()
                }, t.renderGame = function() {
                    return t.props.gameName ? E.createElement(H.P, {
                        flexGrow: 1,
                        display: H.H.Flex,
                        flexDirection: H.J.Row
                    }, E.createElement("div", {
                        className: "recommended-channel__game",
                        title: t.props.gameName,
                        "data-a-target": "featured-channel-game-title"
                    }, E.createElement(H.U, {
                        ellipsis: !0,
                        flexGrow: 1
                    }, t.props.gameName))) : null
                }, t.state = {
                    hovered: !1
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = E.createElement(H.u, {
                    size: H.x.Small,
                    onClick: this.onClickFollow,
                    tabIndex: -1,
                    blurAfterClick: !0,
                    "data-a-target": "featured-channel-follow-button"
                }, Object(N.d)("Follow", "FeaturedChannel"));
                return E.createElement(z, _.__assign({
                    collapsed: this.props.collapsed,
                    title: this.props.displayName,
                    titleElement: Object(j.a)(this.props.channelLogin, this.props.displayName),
                    avatarAlt: this.props.displayName,
                    avatarSrc: this.props.profileImageURL,
                    linkTo: {
                        pathname: "/" + this.props.channelLogin,
                        state: {
                            content: "featured_channels",
                            medium: "twitch_socialcolumn"
                        }
                    },
                    metadataLeft: this.renderGame(),
                    slideInContent: e
                }, Object(A.a)(this.props)))
            }, t = _.__decorate([Object(R.c)("Featured Channel")], t)
        }(E.Component),
        q = W,
        G = Object(F.a)(null, i)(q),
        Q = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.setRef = function(e) {
                    return t.ref = e
                }, t.onMouseEnter = function() {
                    t.props.tooltipLayer.show({
                        from: t.ref,
                        label: t.props.title,
                        align: H._31.Center,
                        direction: H._32.Right
                    })
                }, t.onMouseLeave = function() {
                    t.props.tooltipLayer.hide()
                }, t.addEventListeners = function() {
                    t.ref && (t.ref.addEventListener("mouseenter", t.onMouseEnter), t.ref.addEventListener("mouseleave", t.onMouseLeave))
                }, t.removeEventListeners = function() {
                    t.ref && (t.ref.removeEventListener("mouseenter", t.onMouseEnter), t.ref.removeEventListener("mouseleave", t.onMouseLeave))
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidMount = function() {
                this.addEventListeners()
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.props.collapsed && !e.collapsed && this.removeEventListeners()
            }, t.prototype.componentDidUpdate = function(e) {
                this.props.collapsed && !e.collapsed && this.addEventListeners()
            }, t.prototype.componentWillUnmount = function() {
                this.removeEventListeners()
            }, t.prototype.render = function() {
                var e, t = {
                        "side-nav-header": !0
                    },
                    n = this.props,
                    i = n.collapsed,
                    a = n.collapsedIcon,
                    r = n.title;
                return e = a ? E.createElement(H._8, {
                    asset: a,
                    width: 20,
                    height: 20
                }) : E.createElement(H._8, {
                    asset: H._9.FriendsSC,
                    width: 20,
                    height: 20
                }), i ? E.createElement(H._17, {
                    className: w(t),
                    color: H.F.Alt2,
                    display: H.H.Flex,
                    justifyContent: H.T.Center,
                    alignItems: H.c.Center,
                    margin: {
                        top: 1
                    },
                    padding: {
                        top: 1,
                        bottom: .5
                    },
                    "data-a-target": "side-nav-header-collapsed",
                    refDelegate: this.setRef
                }, e, E.createElement(H._17, {
                    borderTop: !0,
                    fullWidth: !0,
                    margin: {
                        top: 1
                    }
                })) : E.createElement(H.U, {
                    className: w(t),
                    margin: {
                        top: 1,
                        x: 1
                    },
                    padding: {
                        top: 1,
                        bottom: .5
                    },
                    "data-a-target": "side-nav-header-expanded"
                }, E.createElement(H._21, {
                    type: H._26.H5,
                    color: H.F.Alt
                }, r), E.createElement(H._17, {
                    borderTop: !0,
                    fullWidth: !0,
                    margin: {
                        top: 1
                    }
                }))
            }, t
        }(E.Component),
        K = Object(R.c)("Side Nav Header", {
            autoReportInteractive: !0
        })(Object(B.c)()(Q)),
        $ = n(513),
        Y = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.getFeaturedChannels = function() {
                    return !t.props.data.loading && !t.props.data.error && t.props.data.featuredStreams && t.props.data.featuredStreams.length - 1 ? t.props.data.featuredStreams.filter(function(e) {
                        return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName
                    }).slice(0, 5).map(function(e, n) {
                        return e.stream && e.stream.broadcaster && e.stream.broadcaster.displayName ? E.createElement(G, {
                            key: "featured-channels-" + e.stream.id,
                            id: e.stream.id,
                            displayName: e.stream.broadcaster.displayName,
                            gameName: e.stream.game ? e.stream.game.name : "",
                            profileImageURL: e.stream.broadcaster.profileImageURL,
                            collapsed: t.props.collapsed,
                            channelLogin: e.stream.broadcaster.login,
                            "data-a-id": "featured-channel-" + n,
                            "data-a-target": "featured-channel"
                        }) : null
                    }) : []
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidUpdate = function() {
                this.props.data.loading || this.props.data.error || !this.props.data.featuredStreams || this.props.latencyTracking.reportInteractive(Math.min(this.props.data.featuredStreams.length, 4))
            }, t.prototype.render = function() {
                var e = Object(N.d)("Featured Channels", "FeaturedChannels");
                return this.props.collapsed ? E.createElement(H.U, {
                    margin: {
                        bottom: 2
                    }
                }, E.createElement(K, {
                    title: e,
                    collapsed: this.props.collapsed,
                    collapsedIcon: H._9.NavChannels
                }), this.getFeaturedChannels()) : E.createElement(H.U, {
                    margin: {
                        bottom: 2
                    }
                }, E.createElement(K, {
                    title: e
                }), E.createElement(H.P, {
                    fullWidth: !0
                }, E.createElement("figure", null, E.createElement("svg", {
                    width: "240",
                    height: "100",
                    viewBox: "0 0 240 108"
                }, E.createElement("g", {
                    fill: "none",
                    fillRule: "evenodd"
                }, E.createElement("path", {
                    fill: "#D7CCEB",
                    d: "M123 56v8h-20V44h20v8l8-8h4v20h-4"
                }), E.createElement("path", {
                    fill: "#4B367C",
                    d: "M158 30v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm-86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm0 46v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm86 0v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm17-23v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zM57 53v-2l1-1h2l1 1 1-1h2l1 1v2l-4 4-4-4zm37 27l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8v-4zm0-57v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm34 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm0 61v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm19-31v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8zm-72 0v-4l2-2h4l2 2 2-2h4l2 2v4l-8 8-8-8z"
                }))))), E.createElement(H.U, {
                    padding: {
                        x: 1
                    },
                    margin: {
                        bottom: 2
                    },
                    textAlign: H._22.Center
                }, E.createElement(H._21, {
                    color: H.F.Alt2,
                    fontSize: H.L.Size6
                }, Object(N.d)("Follow channels and easily access your favorites here. Here are a few you might like!", "FeaturedChannels"))), this.getFeaturedChannels())
            }, t = _.__decorate([Object(D.a)($, {
                options: function() {
                    return {
                        variables: {
                            language: N.n.intl.getLanguageCode()
                        }
                    }
                }
            }), Object(R.c)("Featured Channels")], t)
        }(E.Component),
        J = Y,
        X = function(e) {
            var t = Object(N.d)("Online Friends", "NoOnlineFriends"),
                n = Object(N.d)("Twitch is better together. Add some Friends to see who's online and chat!", "NoOnlineFriends"),
                i = Object(N.d)("None of your Friends are online. Get out there and add more!", "NoOnlineFriends"),
                a = e.hasOfflineFriends ? "online-friends-no-friends-online" : "online-friends-no-friends";
            return E.createElement(H.U, {
                margin: {
                    bottom: 2
                }
            }, E.createElement(K, {
                title: t
            }), E.createElement(H.P, {
                margin: {
                    y: 1
                },
                fullWidth: !0
            }, E.createElement("figure", null, E.createElement("svg", {
                width: "240",
                height: "100",
                viewBox: "0 0 240 108"
            }, E.createElement("defs", null, E.createElement("linearGradient", {
                x1: "100%",
                x2: "0%",
                y1: "50%",
                y2: "50%"
            }, E.createElement("stop", {
                stopColor: "#4B367C",
                stopOpacity: "0",
                offset: "0%"
            }), E.createElement("stop", {
                stopColor: "#4B367C",
                stopOpacity: "0",
                offset: "3.947%"
            }), E.createElement("stop", {
                stopColor: "#4B367C",
                offset: "12.281%"
            }), E.createElement("stop", {
                stopColor: "#4B367C",
                offset: "87.719%"
            }), E.createElement("stop", {
                stopColor: "#4B367C",
                stopOpacity: "0",
                offset: "96.053%"
            }), E.createElement("stop", {
                stopColor: "#4B367C",
                stopOpacity: "0",
                offset: "100%"
            }))), E.createElement("g", {
                fill: "none",
                fillRule: "evenodd"
            }, E.createElement("path", {
                fill: "#4B367C",
                d: "M174.606 56h-13.21l-11.154 26.932c-.212.51-.806 1.1-1.31 1.31L127 93.326V87l-4-4h-6l-4 4v6.326L99.9 87.9 97 85v-7l-4-4h-6l-.666.666L78.604 56h-13.21L57.75 74.452c-.21.507-.787 1.087-1.298 1.3L44 80.908V78l-4-4h-6l-4 4v3.737L15.548 75.75c-.507-.21-1.087-.787-1.3-1.298L6.16 54.918c-.21-.507-.21-1.326 0-1.836l8.09-19.534c.21-.507.79-1.087 1.3-1.3l19.534-8.09c.507-.21 1.326-.21 1.836 0L48 28.748V41h12.838l4.556 11h13.21l7.454-18H100v-6l-3-3v-3.7l22.074-9.142c.51-.212 1.348-.21 1.852 0L143 21.3V25l-3 3v6h13.942l7.455 18h13.21l7.642-18.452c.21-.507.784-1.087 1.295-1.3l10.59-4.385L194 34h20v-6l10.452 4.25c.507.21 1.087.787 1.3 1.298l8.09 19.534c.21.507.21 1.326 0 1.836l-8.09 19.534c-.21.507-.79 1.087-1.3 1.3l-19.534 8.09c-.507.21-1.326.21-1.836 0L193 79.666V67h-13.838l-4.556-11zM119.08 28.16l-16.702 6.917c-.498.206-1.09.793-1.3 1.3l-6.92 16.704c-.205.5-.21 1.335 0 1.84l6.92 16.705c.205.498.792 1.09 1.3 1.3l16.703 6.92c.5.205 1.335.21 1.84 0l16.705-6.92c.498-.205 1.09-.792 1.3-1.3l6.92-16.703c.205-.497.21-1.33 0-1.84l-6.92-16.7c-.205-.5-.792-1.09-1.3-1.3l-16.703-6.92c-.497-.206-1.33-.21-1.84 0zm-83.12 10l-9.53 3.948c-.528.22-1.106.804-1.32 1.32l-3.948 9.53c-.218.528-.213 1.352 0 1.867l3.948 9.532c.22.526.804 1.105 1.32 1.318l9.53 3.948c.528.22 1.352.214 1.867 0l9.532-3.948c.523-.218 1.102-.804 1.315-1.32l3.948-9.53c.22-.528.214-1.35 0-1.867l-3.948-9.53c-.218-.528-.804-1.106-1.32-1.32l-9.53-3.948c-.528-.218-1.35-.213-1.867 0zm167.107.106l-9.532 3.948c-.527.218-1.106.804-1.32 1.32l-3.947 9.53c-.22.528-.214 1.352 0 1.867l3.948 9.535c.218.527.804 1.106 1.32 1.32l9.53 3.947c.528.22 1.352.215 1.867 0l9.532-3.947c.527-.218 1.106-.804 1.32-1.32l3.947-9.53c.22-.528.214-1.352 0-1.867l-3.948-9.532c-.218-.527-.804-1.106-1.32-1.32l-9.53-3.947c-.528-.22-1.352-.215-1.867 0z"
            }), E.createElement("path", {
                fill: "#D7CCEB",
                d: "M92 17l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm0 60l2 2v5l-3 2v1h4l2 2v2H83v-2l2-2h4v-1l-3-2v-5l2-2h4zm30 9l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm30-69l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zm54 0l2 2v5l-3 2v1h4l2 2v2h-14v-2l2-2h4v-1l-3-2v-5l2-2h4zM39 77l2 2v5l-3 2v1h4l2 2v2H30v-2l2-2h4v-1l-3-2v-5l2-2h4zm137-7h14v10h-14V70zm5 2v6l5-3-5-3zM51 28h14v10H51V28zm5 2v6l5-3-5-3zm154 29l-4-4v4h-10V49h10v4l4-4h2v10h-2zM29 55l3-6h2l3 1 3-1h2l3 6v2l-2 2h-2l-2-2h-4l-2 2h-2l-2-2v-2zm10-2v1h1v-1h-1zm1 1v1h1v-1h-1zm1-1v1h1v-1h-1zm-1-1v1h1v-1h-1zm-7 1h-1v1h1v1h1v-1h1v-1h-1v-1h-1v1zm91-14l4 4v10l-6 4v2h8l4 4v4h-28v-4l4-4h8v-2l-6-4V43l4-4h8z"
            }))))), E.createElement(H.U, {
                padding: {
                    x: 1
                },
                textAlign: H._22.Center
            }, E.createElement(H._21, {
                color: H.F.Alt2,
                fontSize: H.L.Size6,
                "data-a-target": a
            }, e.hasOfflineFriends ? i : n)))
        },
        Z = Object(R.c)("No Online Friends", {
            autoReportInteractive: !0
        })(X),
        ee = function(e) {
            return e.collapsed ? E.createElement(H.U, {
                className: "anon-side-nav",
                fullWidth: !0
            }, E.createElement(J, {
                collapsed: e.collapsed
            })) : E.createElement(H.U, {
                className: "anon-side-nav",
                fullWidth: !0
            }, E.createElement(J, {
                collapsed: e.collapsed
            }), !e.collapsed && E.createElement(Z, null))
        },
        te = Object(R.c)("Anon Side Nav", {
            autoReportInteractive: !0
        })(ee),
        ne = n(263),
        ie = n(144),
        ae = n(12),
        re = (n(514), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return _.__extends(t, e), t.prototype.render = function() {
                var e = [];
                if (this.props.videos)
                    for (var t = 0; t < 3 && t < this.props.videos.length; t++) e.push(this.getVideoSummary(this.props.videos[t]));
                return E.createElement(H.U, null, e, this.getAllRecentVideosLabel())
            }, t.prototype.getAllRecentVideosLabel = function() {
                return E.createElement(H.S, {
                    linkTo: "/" + this.props.creatorLogin + "/videos/all",
                    key: "recentVideoLabel",
                    alpha: !0,
                    blurAfterClick: !0
                }, E.createElement(H.U, {
                    textAlign: H._22.Center,
                    padding: .5
                }, E.createElement(H._21, {
                    transform: H._25.Capitalize
                }, Object(N.d)("See all recent videos", "OfflineFollowedChannelTooltip"))))
            }, t.prototype.getVideoSummary = function(e) {
                return E.createElement(H.S, {
                    linkTo: "/videos/" + e.id,
                    key: "videoSumm-" + e.id,
                    alpha: !0,
                    blurAfterClick: !0
                }, E.createElement(H.U, {
                    padding: {
                        top: .5,
                        bottom: .5
                    }
                }, E.createElement(H.A, {
                    row: !0
                }, E.createElement(H.C, {
                    imageSrc: e.previewThumbnailURL,
                    imageAlt: e.title,
                    size: H.D.Size8,
                    aspect: H.k.Aspect16x9
                }), E.createElement(H.B, null, E.createElement(H.U, {
                    padding: {
                        left: 1,
                        right: 1
                    },
                    className: "offline-followed-channel-tooltip__video-body"
                }, E.createElement(H._21, {
                    color: H.F.Base,
                    title: e.title,
                    lines: 2
                }, e.title), E.createElement(H._21, {
                    color: H.F.Alt2,
                    "data-test-selector": "offline-followed-channel-tooltip-text"
                }, Object(N.d)("{views, plural, one {{formattedViews} view} other {{formattedViews} views}}", {
                    views: e.viewCount,
                    formattedViews: Object(N.e)(e.viewCount)
                }, "OnlineFollowedChannelTooltip")))))))
            }, t
        }(E.Component)),
        oe = (n(515), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return _.__extends(t, e), t.prototype.render = function() {
                var e = null,
                    t = null;
                switch (this.props.streamType) {
                    case ie.a.Premiere:
                        e = E.createElement(H._8, {
                            asset: H._9.VideoPremiere,
                            type: H._10.Live,
                            width: 12,
                            height: 12
                        }), t = Object(N.d)("Video Premiere", "OnlineFollowedChannelTooltip");
                        break;
                    case ie.a.WatchParty:
                    case ie.a.Rerun:
                        e = E.createElement(H._8, {
                            asset: H._9.VideoRerun,
                            type: H._10.Alt2,
                            width: 12,
                            height: 12
                        }), t = Object(N.d)("Rerun", "OnlineFollowedChannelTooltip");
                        break;
                    default:
                        if (!this.props.collapsed) break;
                        e = E.createElement(H.V, {
                            size: H.W.Small
                        }), t = Object(N.d)("Live", "OnlineFollowedChannelTooltip")
                }
                return E.createElement(H.U, {
                    className: "online-followed-channel-tooltip__body"
                }, this.props.collapsed && E.createElement(H._21, {
                    color: H.F.Link,
                    ellipsis: !0
                }, this.props.gameName ? this.props.channelDisplayName + " · " + this.props.gameName : this.props.channelDisplayName), E.createElement(H._21, {
                    color: H.F.Base,
                    lines: 2
                }, this.props.streamTitle), e && E.createElement(H.U, {
                    display: H.H.Flex,
                    alignItems: H.c.Center
                }, e, E.createElement(H.P, {
                    padding: {
                        left: .5
                    }
                }, E.createElement(H._21, {
                    color: H.F.Alt2,
                    type: H._26.Span
                }, t, this.props.collapsed && this.props.viewership ? " | " + Object(N.d)("{viewers} viewers", {
                    viewers: Object(N.e)(this.props.viewership)
                }, "OnlineFollowedChannelTooltip") : null))))
            }, t
        }(E.Component)),
        se = (n(516), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return _.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e, t = this.getMetadataLeft(),
                    n = this.getTooltipContent(),
                    i = this.isChannelOffline();
                return !n && this.props.collapsed && (e = t.length > 0 && !i ? this.props.user.displayName + " - " + t : this.props.user.displayName), E.createElement(z, _.__assign({
                    avatarAlt: this.props.user.displayName,
                    avatarSrc: this.props.user.profileImageURL,
                    collapsed: this.props.collapsed,
                    linkTo: {
                        pathname: this.getChannelLink(),
                        state: {
                            content: ae.PageviewContent.FollowedChannels,
                            medium: ae.PageviewMedium.SideNav
                        }
                    },
                    metadataLeft: t,
                    metadataRight: this.getMetadataRight(),
                    onClick: this.props.onChannelClick,
                    offline: i,
                    title: this.props.user.displayName,
                    titleElement: Object(j.a)(this.props.user.login, this.props.user.displayName),
                    tooltipLabel: e,
                    tooltipContent: n
                }, Object(H._39)(this.props)))
            }, t.prototype.getMetadataLeft = function() {
                return this.props.user.stream && this.props.user.stream.game ? this.props.user.stream.game.name : this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 && this.props.videoExperimentAssignment !== dt ? Object(N.d)("{numVideos, plural, one {{numVideos} new video} other {{numVideos} new videos}}", {
                    numVideos: this.props.recentChannelVideos.length
                }, "FollowedChannel") : this.props.user.lastBroadcast && this.props.user.lastBroadcast.game && this.props.user.lastBroadcast.game.name && this.props.videoExperimentAssignment === dt ? this.props.user.lastBroadcast.game.name : ""
            }, t.prototype.getMetadataRight = function() {
                return this.props.user.stream && this.props.user.stream.id ? E.createElement(H.U, {
                    display: H.H.Flex,
                    alignItems: H.c.Center
                }, this.getLiveIndicator(), E.createElement(H.U, {
                    margin: {
                        left: .5
                    }
                }, Object(N.e)(this.props.user.stream.viewersCount || 0))) : E.createElement(H._21, {
                    type: H._26.Span
                }, Object(N.d)("Offline", "FollowedChannel"))
            }, t.prototype.getLiveIndicator = function() {
                if (!this.props.user.stream || !this.props.user.stream.id) return null;
                switch (this.props.user.stream.type) {
                    case ie.a.Premiere:
                        return this.props.premieresEnabled ? E.createElement(H._8, {
                            asset: H._9.VideoPremiere,
                            type: H._10.Live,
                            width: 12,
                            height: 12
                        }) : E.createElement(H.V, {
                            size: H.W.Small
                        });
                    case ie.a.WatchParty:
                    case ie.a.Rerun:
                        return this.props.premieresEnabled ? E.createElement(H._8, {
                            asset: H._9.VideoRerun,
                            type: H._10.Alt2,
                            width: 12,
                            height: 12
                        }) : E.createElement("span", {
                            className: "followed-channel__vodcast-live-indicator"
                        }, E.createElement(H.V, {
                            size: H.W.Small
                        }));
                    default:
                        return E.createElement(H.V, {
                            size: H.W.Small
                        })
                }
            }, t.prototype.getTooltipContent = function() {
                if (this.isChannelOffline()) {
                    if (this.props.videoExperimentAssignment === dt) return;
                    return E.createElement(re, {
                        creatorLogin: this.props.user.login,
                        videos: this.props.recentChannelVideos
                    })
                }
                if (this.props.premieresEnabled) return E.createElement(oe, {
                    streamType: this.props.user.stream && this.props.user.stream.type || ie.a.Live,
                    streamTitle: this.props.user.stream && this.props.user.stream.title || "",
                    collapsed: this.props.collapsed,
                    channelDisplayName: this.props.user.displayName || "",
                    gameName: this.props.user.stream && this.props.user.stream.game && this.props.user.stream.game.name || void 0,
                    viewership: this.props.user.stream && this.props.user.stream.viewersCount || 0
                })
            }, t.prototype.isChannelOffline = function() {
                return !(this.props.user.stream && this.props.user.stream.id.length > 0)
            }, t.prototype.getChannelLink = function() {
                return this.isChannelOffline() ? this.props.recentChannelVideos && this.props.recentChannelVideos.length > 0 && this.props.videoExperimentAssignment !== dt ? "/videos/" + this.props.recentChannelVideos[0].id : "/" + this.props.user.login + "/videos/all" : "/" + this.props.user.login
            }, t = _.__decorate([Object(R.c)("FollowedChannel")], t)
        }(E.Component)),
        le = se,
        ce = (n(517), function(e) {
            var t = e.automationTarget || "side-nav-load-more-button";
            return E.createElement(H.P, {
                padding: 1,
                fullWidth: !0,
                overflow: H.Y.Hidden,
                textAlign: H._22.Left
            }, E.createElement("button", {
                className: "side-nav-load-more__button",
                onClick: e.onClick,
                "data-a-target": t
            }, Object(N.d)("Load More", "SideNavLoadMoreButton")))
        }),
        ue = n(109),
        de = n(51),
        pe = "live",
        me = "rerun",
        he = "offline",
        ge = n(518),
        fe = n(519),
        ve = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    sortedFollows: [],
                    displayAmount: 5
                }, t.fetchInterval = 0, t.hasRequestedTracking = !1, t.followedVideoDict = {}, t.sortFollowedChannels = function(e) {
                    if (e.data.loading || e.data.error || !e.data.currentUser || !e.data.currentUser.followedLiveUsers) return [];
                    var n = e.data.currentUser.followedLiveUsers.nodes.slice(),
                        i = (e.data.currentUser.follows.edges || []).map(function(e) {
                            return e.node
                        }),
                        a = (e.videoData && e.videoData.currentUser && e.videoData.currentUser.followedVideos && e.videoData.currentUser.followedVideos.edges || []).map(function(e) {
                            return e.node
                        });
                    t.followedVideoDict = s(a);
                    var r = o(n, i, t.followedVideoDict);
                    t.setState({
                        sortedFollows: r
                    })
                }, t.getFollowedChannels = function() {
                    return t.props.data.loading || t.props.data.error ? [] : t.state.sortedFollows.slice(0, t.state.displayAmount).map(function(e, n) {
                        var i = t.onChannelClick.bind(t, n, e);
                        return E.createElement(le, {
                            key: "followed-channels-" + e.id,
                            user: e,
                            recentChannelVideos: t.followedVideoDict[e.id],
                            collapsed: t.props.collapsed,
                            "data-a-id": "followed-channel-" + n,
                            "data-a-target": "followed-channel",
                            onChannelClick: i,
                            premieresEnabled: t.props.premieresEnabled,
                            videoExperimentAssignment: t.props.videoExperimentAssignment
                        })
                    })
                }, t.getLoadMore = function() {
                    return t.props.data.loading || t.props.data.error || t.props.collapsed || t.state.displayAmount >= t.state.sortedFollows.length ? null : E.createElement(ce, {
                        onClick: t.onClickLoadMore,
                        automationTarget: "followed-channels-load-more-button"
                    })
                }, t.onClickLoadMore = function() {
                    var e = Math.min(t.state.displayAmount + 20, t.state.sortedFollows.length);
                    t.setState({
                        displayAmount: e
                    }), p(e)
                }, t.onChannelClick = function(e, t) {
                    m(e, t)
                }, t.isRenderReady = function() {
                    return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser) && (!t.props.data.currentUser.follows.edges || 0 === t.props.data.currentUser.follows.edges.length || t.props.data.currentUser.follows.edges.length > 0 && t.state.sortedFollows.length > 0)
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidUpdate = function() {
                this.isRenderReady() && this.props.latencyTracking.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.sortFollowedChannels(e)
            }, t.prototype.componentWillUnmount = function() {
                clearInterval(this.fetchInterval)
            }, t.prototype.render = function() {
                var e = !this.props.data.loading && !this.props.data.error && this.props.data.currentUser && (!this.props.data.currentUser.follows.edges || 0 === this.props.data.currentUser.follows.edges.length);
                return this.props.data.loading || this.props.data.error || !this.props.data.currentUser || this.hasRequestedTracking || (this.hasRequestedTracking = !0, d(this.props.data.currentUser, e || !1, this.props.collapsed)), e ? E.createElement(J, {
                    collapsed: this.props.collapsed
                }) : E.createElement(H.U, {
                    className: "followed-channels"
                }, E.createElement(K, {
                    title: Object(N.d)("Followed Channels", "FollowedChannels"),
                    collapsed: this.props.collapsed,
                    collapsedIcon: H._9.Heart
                }), this.getFollowedChannels(), this.getLoadMore())
            }, t = _.__decorate([Object(D.a)(fe, {
                options: function() {
                    return {
                        pollInterval: 6e5,
                        variables: {
                            limit: 100,
                            cursor: ""
                        }
                    }
                }
            }), Object(D.a)(ge, {
                options: function(e) {
                    return {
                        variables: {
                            videoTypes: e.videoExperimentAssignment === pt ? [ne.a.Archive, ne.a.Highlight, ne.a.Upload] : [ne.a.Highlight, ne.a.Upload]
                        }
                    }
                },
                name: "videoData",
                skip: function(e) {
                    return e.videoExperimentAssignment === dt
                }
            }), Object(R.c)("Followed Channels")], t)
        }(E.Component),
        be = ve,
        ye = n(106),
        ke = n(39),
        Se = n(280),
        _e = n(30),
        we = n(57),
        Ee = n(71),
        Ce = n(282),
        Ne = n(147),
        Te = n(70),
        De = n(283),
        Ie = n(55),
        Oe = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderJoinButton = function() {
                    var e = null,
                        n = Object(Te.d)(t.props.user.login, t.props.activity);
                    return n && (e = {
                        pathname: n,
                        state: {
                            content: ae.PageviewContent.Presence,
                            medium: ae.PageviewMedium.SideNav
                        }
                    }), E.createElement(De.a, {
                        link: e,
                        onClick: t.handleJoinClick,
                        "data-a-target": "friend-join-button"
                    })
                }, t.handleClick = function(e) {
                    e.preventDefault();
                    var n = Object(Ie.a)(t.props.user.id, t.props.currentUserID);
                    t.props.openThread(n), Object(Ne.c)({
                        force: !0,
                        timeout: 0
                    })
                }, t.handleJoinClick = function() {
                    Object(Ce.b)({
                        context: Ce.a.FriendsListButton,
                        friendActivity: t.props.activity,
                        friendLogin: t.props.user.login
                    })
                }, t.getPresenceStatus = function() {
                    switch (t.props.availability) {
                        case de.a.Online:
                            return 3;
                        case de.a.Idle:
                            return 5;
                        case de.a.Busy:
                            return 4;
                        default:
                            return
                    }
                }, t.onMouseEnter = function() {
                    Object(Ne.d)({
                        id: t.props.user.id,
                        direction: H.q.Right,
                        ref: t.ref
                    })
                }, t.onMouseLeave = function() {
                    return Object(Ne.c)()
                }, t.setRefDelegate = function(e) {
                    t.ref = e
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return E.createElement("div", {
                    ref: this.setRefDelegate,
                    onMouseEnter: this.onMouseEnter,
                    onMouseLeave: this.onMouseLeave
                }, E.createElement(z, _.__assign({
                    title: this.props.user.displayName,
                    titleElement: Object(j.a)(this.props.user.login, this.props.user.displayName),
                    avatarAlt: this.props.user.displayName,
                    avatarSrc: this.props.user.profileImageURL,
                    avatarPresence: !0,
                    presenceStatus: this.getPresenceStatus(),
                    onClick: this.handleClick,
                    linkTo: "#",
                    metadataLeft: E.createElement(Te.b, {
                        availability: this.props.availability,
                        activity: this.props.activity,
                        condensed: !0
                    }),
                    slideInContent: this.renderJoinButton(),
                    collapsed: this.props.collapsed
                }, Object(H._39)(this.props))))
            }, t = _.__decorate([Object(R.c)("OnlineFriend")], t)
        }(E.Component),
        Le = Oe,
        xe = Object(F.a)(g, f)(Le),
        Re = n(290),
        Fe = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.defaultInitialRenderCount = 15, n.sortTimeout = 0, n.onMouseEnter = function() {
                    n.state.hasInteracted || n.setState({
                        hasInteracted: !0
                    })
                }, n.renderOnlineFriends = function() {
                    return n.state.sortedFriends.length ? (n.state.hasInteracted ? n.state.sortedFriends : n.state.sortedFriends.slice(0, n.getDisplayCount())).map(function(e, t) {
                        return E.createElement(xe, {
                            activity: e.activity,
                            availability: e.availability,
                            key: "online-friends-" + e.node.id,
                            collapsed: n.props.collapsed,
                            user: e.node,
                            "data-a-id": "online-friend-" + t,
                            "data-a-target": "online-friend",
                            "data-a-name": "online-friend-" + e.node.login
                        })
                    }) : []
                }, n.getDisplayCount = function() {
                    return n.state.hasInteracted ? n.state.sortedFriends.length : Math.min(n.defaultInitialRenderCount, n.state.sortedFriends.length)
                }, n.state = {
                    sortedFriends: [],
                    hasSorted: !1,
                    initialRenderCount: n.defaultInitialRenderCount,
                    hasInteracted: !1
                }, n
            }
            return _.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                var t = this;
                this.sortTimeout && (clearTimeout(this.sortTimeout), this.sortTimeout = 0), this.sortTimeout = setTimeout(function() {
                    var n = !!e.friends && e.friends.length > 0;
                    t.setState({
                        sortedFriends: a(e.friends),
                        hasSorted: n
                    }), t.props.latencyTracking.reportInteractive(t.getDisplayCount())
                }, 100)
            }, t.prototype.componentDidMount = function() {
                this.props.loading || this.props.errored || !this.props.friends || this.setState({
                    sortedFriends: a(this.props.friends),
                    hasSorted: !0
                })
            }, t.prototype.render = function() {
                return this.props.friends && 0 !== this.props.friends.length || this.props.errored || this.props.loading || this.props.collapsed ? !this.props.errored && !this.props.loading && this.props.friends && this.state.hasSorted && this.props.friends.length > 0 && 0 === this.state.sortedFriends.length && !this.props.collapsed ? E.createElement(Z, {
                    hasOfflineFriends: !0
                }) : E.createElement("div", {
                    className: "online-friends",
                    onMouseEnter: this.onMouseEnter,
                    "data-a-target": "online-friends-list"
                }, E.createElement(K, {
                    title: Object(N.d)("Online Friends", "OnlineFriends"),
                    collapsed: this.props.collapsed,
                    collapsedIcon: H._9.FriendsSC
                }), this.renderOnlineFriends()) : E.createElement(Z, null)
            }, t = _.__decorate([Object(ye.a)(function(e) {
                return {
                    query: Re,
                    skip: !e.friends || 0 === e.friends.length,
                    topic: Object(_e.f)(e.selfID || ""),
                    type: ke.c.Presence,
                    mutator: function(t, n) {
                        if (!n.currentUser || !n.currentUser.friends) return n;
                        for (var i = -1, a = 0; a < n.currentUser.friends.edges.length; a++) {
                            if (+n.currentUser.friends.edges[a].node.id === t.data.user_id) {
                                i = a;
                                break
                            }
                        }
                        if (i >= 0) {
                            var r = n.currentUser.friends.edges[i];
                            r.availability = t.data.availability.toUpperCase();
                            var o = "$User:" + e.selfID + ".friends.edges." + i + ".activity";
                            r.activity = Object(Se.a)(t.data.activity, o)
                        }
                        return n
                    }
                }
            }), Object(ye.a)(function(e) {
                return {
                    query: Re,
                    skip: !e.friends || 0 === e.friends.length,
                    topic: Object(_e.b)(e.selfID || ""),
                    mutator: function(t, n) {
                        if (!n.currentUser || !n.currentUser.friends) return n;
                        var i = t.change === ke.a.Removed || t.change === ke.a.SelfRemoved;
                        if ((t.change === ke.a.Accepted || t.change === ke.a.SelfAccepted) && setTimeout(function() {
                                e && e.refetch && e.refetch()
                            }), !i) return n;
                        for (var a = -1, r = t.change === ke.a.SelfRemoved, o = 0; o < n.currentUser.friends.edges.length; o++) {
                            if (n.currentUser.friends.edges[o].node.id === (r ? t.target_user_id : t.user_id)) {
                                a = o;
                                break
                            }
                        }
                        return a >= 0 && n.currentUser.friends.edges.splice(a, 1), n
                    }
                }
            }), Object(R.c)("OnlineFriends")], t)
        }(E.Component),
        Ue = Fe,
        Pe = n(18),
        Me = n(138),
        Ae = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.getSlideInContent = function() {
                    if (t.props.firstPageLoaded) return E.createElement(Me.a, {
                        tabIndex: -1,
                        hideIcon: !0,
                        hideWhenFollowing: !0,
                        size: H.x.Small,
                        channelLogin: t.props.login,
                        "data-a-target": "recommended-channel-follow-button"
                    })
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = this.props.gameName.length > 0 ? this.props.displayName + " - " + this.props.gameName : this.props.displayName;
                return E.createElement(z, _.__assign({
                    title: this.props.displayName,
                    titleElement: Object(j.a)(this.props.login, this.props.displayName),
                    avatarAlt: this.props.displayName,
                    avatarSrc: this.props.profileImageURL,
                    linkTo: {
                        pathname: "/" + this.props.login,
                        state: {
                            content: ae.PageviewContent.RecommendedChannels,
                            medium: ae.PageviewMedium.SideNav,
                            content_index: this.props.contentIndex
                        }
                    },
                    metadataLeft: this.props.gameName,
                    slideInContent: this.getSlideInContent(),
                    collapsed: this.props.collapsed,
                    tooltipLabel: e
                }, Object(H._39)(this.props)))
            }, t = _.__decorate([Object(R.c)("RecommendedChannel")], t)
        }(E.Component),
        je = Ae,
        Be = Object(F.a)(v)(je),
        He = n(520),
        Ve = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    hasLoadedMore: !1
                }, t.getRecommendedChannels = function() {
                    return t.props.data.currentUser.recommendations.liveRecommendations.nodes.slice(0, t.getNodesToDisplayCount()).map(function(e, n) {
                        return e.broadcaster && e.broadcaster.id ? E.createElement(Be, {
                            id: e.broadcaster.id,
                            key: "recommended-channels-" + e.id,
                            collapsed: t.props.collapsed,
                            "data-a-id": "recommended-channel-" + n,
                            "data-a-target": "recommended-channel",
                            displayName: e.broadcaster.displayName,
                            contentIndex: n,
                            gameName: e.game && e.game.name || "",
                            login: e.broadcaster.login,
                            profileImageURL: e.broadcaster.profileImageURL
                        }) : null
                    })
                }, t.hasDataToDisplay = function() {
                    return !(t.props.data.loading || t.props.data.error || !t.props.data.currentUser || 0 === t.props.data.currentUser.recommendations.liveRecommendations.nodes.length)
                }, t.getNodesToDisplayCount = function() {
                    return t.hasDataToDisplay ? t.state.hasLoadedMore ? t.props.data.currentUser.recommendations.liveRecommendations.nodes.length : Math.min(t.props.data.currentUser.recommendations.liveRecommendations.nodes.length, 3) : 0
                }, t.onClickLoadMore = function() {
                    t.setState({
                        hasLoadedMore: !0
                    })
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidUpdate = function() {
                this.props.data.loading || this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                if (!this.hasDataToDisplay()) return null;
                var e = null;
                return !this.state.hasLoadedMore && !this.props.collapsed && this.props.data.currentUser.recommendations.liveRecommendations.nodes.length > 3 && (e = E.createElement(ce, {
                    onClick: this.onClickLoadMore,
                    automationTarget: "recommended-channels-load-more-button"
                })), E.createElement("div", {
                    className: "recommended-channels"
                }, E.createElement(K, {
                    title: Object(N.d)("Recommended Channels", "RecommendedChannels"),
                    collapsed: this.props.collapsed,
                    collapsedIcon: H._9.NavChannels
                }), this.getRecommendedChannels(), e)
            }, t = _.__decorate([Object(D.a)(He, {
                options: function() {
                    return {
                        variables: {
                            first: 10,
                            recID: Object(Pe.a)(),
                            language: ""
                        }
                    }
                }
            }), Object(R.c)("RecommendedChannels")], t)
        }(E.Component),
        ze = Ve,
        We = n(21),
        qe = n(521),
        Ge = n(522),
        Qe = function(e) {
            function t() {
                var t = e.call(this) || this;
                return t.getSlideInContent = function() {
                    if (!t.state.working) {
                        var e = Object(N.d)("Add Friend", "RecommendedFriend");
                        return E.createElement(H.v, {
                            tabIndex: -1,
                            ariaLabel: e,
                            type: H.w.Primary,
                            icon: H._9.AddFriend,
                            size: H.x.Small,
                            onClick: t.onClickAddFriend,
                            "data-a-target": "recommended-friend-add-button"
                        })
                    }
                }, t.handleClick = function(e) {
                    e.preventDefault();
                    var n = Object(Ie.a)(t.props.user.id, t.props.currentUserID);
                    t.props.openThread(n), Object(Ne.c)({
                        force: !0,
                        timeout: 0
                    })
                }, t.onClickAddFriend = function() {
                    t.setState({
                        working: !0
                    }, function() {
                        var e = Object(We.a)({
                            targetID: t.props.user.id
                        });
                        t.props.createFriendRequest(e).then(t.props.onRecommendationChanged).catch(function() {
                            return t.setState({
                                working: !1
                            })
                        })
                    })
                }, t.onMouseEnter = function() {
                    Object(Ne.d)({
                        id: t.props.user.id,
                        direction: H.q.Right,
                        ref: t.ref
                    })
                }, t.onMouseLeave = function() {
                    return Object(Ne.c)()
                }, t.setRefDelegate = function(e) {
                    t.ref = e
                }, t.state = {
                    working: !1
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return E.createElement("div", {
                    ref: this.setRefDelegate,
                    onMouseEnter: this.onMouseEnter,
                    onMouseLeave: this.onMouseLeave
                }, E.createElement(z, _.__assign({
                    title: this.props.user.displayName,
                    titleElement: Object(j.a)(this.props.user.login, this.props.user.displayName),
                    avatarAlt: this.props.user.displayName,
                    avatarSrc: this.props.user.profileImageURL,
                    onClick: this.handleClick,
                    linkTo: "#",
                    metadataLeft: "",
                    collapsed: this.props.collapsed,
                    slideInContent: this.getSlideInContent()
                }, Object(H._39)(this.props))))
            }, t = _.__decorate([Object(D.a)(qe, {
                name: "createFriendRequest"
            }), Object(D.a)(Ge, {
                name: "dismissFriendRecommendation"
            }), Object(R.c)("RecommendedFriend")], t)
        }(E.Component),
        Ke = Qe,
        $e = Object(F.a)(b, y)(Ke),
        Ye = n(523),
        Je = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.getRecommendedFriends = function() {
                    return t.props.data.currentUser.recommendations.friends.slice(0, t.getDisplayCount(t.props)).map(function(e, n) {
                        return E.createElement($e, {
                            key: "recommended-friends-" + e.user.id,
                            user: e.user,
                            collapsed: t.props.collapsed,
                            onRecommendationChanged: t.onRecommendationDataChanged,
                            "data-a-id": "recommended-friend-" + n,
                            "data-a-target": "recommended-friend"
                        })
                    })
                }, t.getDisplayCount = function(e) {
                    return Math.min(5, e.data.currentUser.recommendations.friends.length)
                }, t.onRecommendationDataChanged = function() {
                    t.props.data.refetch()
                }, t
            }
            return _.__extends(t, e), t.prototype.componentDidUpdate = function() {
                this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.props.collapsed || this.props.data.loading || this.props.data.error || 0 === this.props.data.currentUser.recommendations.friends.length ? null : E.createElement("div", {
                    className: "recommended-friends"
                }, E.createElement(K, {
                    title: Object(N.d)("Recommended Friends", "RecommendedFriends")
                }), this.getRecommendedFriends())
            }, t = _.__decorate([Object(D.a)(Ye), Object(R.c)("RecommendedFriends")], t)
        }(E.Component),
        Xe = Je,
        Ze = n(66),
        et = n(107),
        tt = n(524),
        nt = n(525),
        it = function(e) {
            function t() {
                var t = e.call(this) || this;
                return t.handleClick = function(e) {
                    e.preventDefault();
                    var n = Object(Ie.a)(t.props.id, t.props.currentUserID);
                    t.props.openThread(n)
                }, t.getSlideInContent = function() {
                    if (!t.state.working) {
                        if (t.state.requested) {
                            var e = Object(N.d)("Cancel Request", "SearchFriendResult");
                            return E.createElement(H.v, {
                                ariaLabel: e,
                                type: H.w.Primary,
                                icon: H._9.Close,
                                size: H.x.Small,
                                onClick: t.onClickCancelRequest,
                                "data-a-target": "search-result-cancel-button"
                            })
                        }
                        var n = Object(N.d)("Add Friend", "SearchFriendResult");
                        return E.createElement(H.v, {
                            ariaLabel: n,
                            type: H.w.Primary,
                            icon: H._9.AddFriend,
                            size: H.x.Small,
                            onClick: t.onClickAddFriend,
                            "data-a-target": "search-result-add-button"
                        })
                    }
                }, t.onClickAddFriend = function() {
                    t.setState({
                        working: !0
                    }, function() {
                        t.props.createFriendRequest(Object(We.a)({
                            targetID: t.props.id
                        })).then(function() {
                            t.setState({
                                working: !1,
                                requested: !0
                            })
                        }).catch(function() {
                            t.setState({
                                working: !1
                            })
                        })
                    })
                }, t.onClickCancelRequest = function() {
                    t.setState({
                        working: !0
                    }, function() {
                        t.props.cancelFriendRequest(Object(We.a)({
                            targetID: t.props.id
                        })).then(function() {
                            t.setState({
                                working: !1,
                                requested: !1
                            })
                        }).catch(function() {
                            t.setState({
                                working: !1
                            })
                        })
                    })
                }, t.state = {
                    working: !1,
                    requested: !1
                }, t
            }
            return _.__extends(t, e), t.prototype.render = function() {
                return E.createElement(z, _.__assign({
                    title: this.props.displayName,
                    titleElement: Object(j.a)(this.props.login, this.props.displayName),
                    avatarAlt: this.props.displayName,
                    avatarSrc: this.props.profileImageURL,
                    linkTo: "#",
                    onClick: this.handleClick,
                    slideInContent: this.getSlideInContent(),
                    collapsed: this.props.collapsed
                }, Object(A.a)(this.props)))
            }, t = _.__decorate([Object(D.a)(nt, {
                name: "createFriendRequest"
            }), Object(D.a)(tt, {
                name: "cancelFriendRequest"
            }), Object(R.c)("Search Friend Result")], t)
        }(E.Component),
        at = it,
        rt = Object(F.a)(k, S)(at),
        ot = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.inputTimeout = 0, n.renderFilteredFriends = function() {
                    return n.state.filteredFriends && 0 !== n.state.filteredFriends.length ? n.state.filteredFriends.map(function(e, t) {
                        return E.createElement(xe, {
                            activity: e.activity,
                            availability: e.availability,
                            key: "friend-search-results-" + e.node.id,
                            collapsed: n.props.collapsed,
                            user: e.node,
                            "data-a-id": "friend-search-result-" + t,
                            "data-a-target": "friend-search-result"
                        })
                    }) : []
                }, n.renderSearchResults = function() {
                    var e = n.state.searchResults;
                    return e && e.users && 0 !== e.users.totalHits ? e.users.hits.map(function(e, t) {
                        return E.createElement(rt, {
                            id: e.objectID,
                            displayName: e.name,
                            login: e.login,
                            profileImageURL: e.profile_image,
                            key: "search-results-" + e.objectID,
                            collapsed: n.props.collapsed,
                            "data-a-id": "search-result-" + t,
                            "data-a-target": "search-result"
                        })
                    }) : []
                }, n.renderNoResults = function() {
                    return E.createElement(H.U, {
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, E.createElement(H._21, {
                        color: H.F.Alt2
                    }, Object(N.d)('Sorry, we couldn\'t find anyone named "{user}"', {
                        user: n.props.searchInput
                    }, "SearchFriendResult")))
                }, n.trySearchAndFilter = function(e) {
                    if (e.searchInput && 0 === e.searchInput.length) return clearTimeout(n.inputTimeout), void(n.inputTimeout = 0);
                    clearTimeout(n.inputTimeout), n.inputTimeout = setTimeout(function() {
                        if (n.search(e.searchInput), e.friends && e.searchInput) {
                            var t = e.searchInput || "",
                                i = {},
                                a = e.friends.filter(function(e) {
                                    var n = e.node.displayName || e.node.login || "",
                                        a = n.toLowerCase().includes(t.toLowerCase());
                                    return a && (i[e.node.login] = !0), a
                                });
                            n.setState({
                                filteredFriends: a,
                                filterFriendsByLogin: i
                            })
                        }
                    }, 200)
                }, n.state = {
                    searching: !0
                }, n.searchClient = new et.a(N.a.algoliaApplicationID, N.a.algoliaAPIKey), n
            }
            return _.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                this.props.searchInput !== e.searchInput && this.trySearchAndFilter(e)
            }, t.prototype.componentDidMount = function() {
                this.trySearchAndFilter(this.props)
            }, t.prototype.componentWillUnmount = function() {
                clearTimeout(this.inputTimeout), this.inputTimeout = 0
            }, t.prototype.render = function() {
                var e = null,
                    t = !this.state.filteredFriends || 0 === this.state.filteredFriends.length,
                    n = !this.state.searchResults || !this.state.searchResults.users || 0 === this.state.searchResults.users.hits.length;
                return e = !this.state.searching && t && n ? this.renderNoResults() : [this.renderFilteredFriends(), this.renderSearchResults()], E.createElement("div", {
                    className: "recommended-friends"
                }, E.createElement(K, {
                    title: Object(N.d)("Results", "SearchFriendResults")
                }), e)
            }, t.prototype.search = function(e) {
                return _.__awaiter(this, void 0, void 0, function() {
                    var t, n = this;
                    return _.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return e ? (this.setState({
                                    searching: !0
                                }), [4, this.searchClient.queryForType(Ze.a.Users, e, Object(Pe.a)(), {
                                    hitsPerPage: 10
                                })]) : [2];
                            case 1:
                                return t = i.sent(), this.inputTimeout && e === this.props.searchInput && (t && t.users && (t.users.hits = t.users.hits.filter(function(e) {
                                    return n.state.filterFriendsByLogin && !n.state.filterFriendsByLogin[e.login]
                                })), this.setState({
                                    searchResults: t,
                                    searching: !1
                                })), [2]
                        }
                    })
                })
            }, t = _.__decorate([Object(R.c)("Search Friend Results")], t)
        }(E.Component),
        st = ot,
        lt = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleInputChange = function(e) {
                    t.props.onInputChange(e.target.value)
                }, t
            }
            return _.__extends(t, e), t.prototype.render = function() {
                return this.props.collapsed ? null : E.createElement(H._17, {
                    borderTop: !0,
                    padding: 1
                }, E.createElement(H._11, {
                    id: "side-nav.find-friends",
                    placeholder: Object(N.d)("Search to Add Friends", "SearchFriendsInput"),
                    onChange: this.handleInputChange,
                    "data-a-target": "side-nav-search-input"
                }))
            }, t
        }(E.Component),
        ct = n(291);
    n(526);
    n.d(t, "d", function() {
        return ut
    }), n.d(t, "b", function() {
        return dt
    }), n.d(t, "a", function() {
        return pt
    }), n.d(t, "c", function() {
        return gt
    });
    var ut = 1200,
        dt = "none",
        pt = "all_content",
        mt = "no_archives",
        ht = function(e) {
            function t(t) {
                var n = e.call(this) || this;
                n.handleToggleVisibility = function() {
                    var e = n.getLayoutCache();
                    n.props.collapsed ? (n.props.expandSideNav(), e.resource.isSocialColumnClosedByUserAction = !1) : (n.props.collapseSideNav(), e.resource.isSocialColumnClosedByUserAction = !0), N.k.set(N.n.config.layoutCacheKey, e), Object(L.c)({
                        element: L.a.SocialColumn,
                        action: n.props.collapsed ? L.b.Open : L.b.Close
                    })
                }, n.collapseOnBreakpoint = function() {
                    var e = window.innerWidth;
                    e < ut && !n.state.forceCollapsed ? n.setState({
                        forceCollapsed: !0
                    }) : e >= ut && n.state.forceCollapsed && n.setState({
                        forceCollapsed: !1
                    }), n.resetAnimationState()
                }, n.handleWindowResize = function() {
                    n.resizeAnimationFrame || (n.resizeAnimationFrame = requestAnimationFrame(n.collapseOnBreakpoint))
                }, n.resetAnimationState = function() {
                    n.resizeAnimationFrame = null
                }, n.onHistoryChange = function(e) {
                    var t = n.props.isLoggedIn,
                        i = Object(ct.a)({
                            isLoggedIn: t,
                            location: e
                        });
                    i !== n.state.hideSideNav && n.setState({
                        hideSideNav: i
                    })
                }, n.onSearchInputChange = function(e) {
                    n.setState({
                        searchInput: e
                    })
                }, n.reportInteractive = function() {
                    n.props.isLoggedIn && (n.props.data.loading || n.props.data.error) || n.props.latencyTracking.reportInteractive()
                }, n.getVideoAssignment = function(e) {
                    switch (e) {
                        case dt:
                        case pt:
                        case mt:
                            return e;
                        default:
                            return dt
                    }
                };
                var i = t.isLoggedIn,
                    a = t.location;
                return n.state = {
                    hideSideNav: Object(ct.a)({
                        isLoggedIn: i,
                        location: a
                    }),
                    forceCollapsed: !1,
                    videoExperimentAssignment: dt,
                    premieresEnabled: !1
                }, n
            }
            return _.__extends(t, e), t.prototype.componentWillMount = function() {
                return _.__awaiter(this, void 0, void 0, function() {
                    var e, t;
                    return _.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, N.n.experiments.getAssignment("TWILIGHT_VIDEOS_IN_SIDENAV")];
                            case 1:
                                return e = n.sent(), [4, N.n.experiments.getAssignment("TWILIGHT_PREMIERE_UPLOAD_FLOW")];
                            case 2:
                                return t = n.sent(), this.setState({
                                    videoExperimentAssignment: this.getVideoAssignment(e),
                                    premieresEnabled: "yes" === t
                                }), [2]
                        }
                    })
                })
            }, t.prototype.componentDidMount = function() {
                this.reportInteractive(), this.historyUnlisten = N.n.history.listen(this.onHistoryChange), window.addEventListener("resize", this.handleWindowResize), this.collapseOnBreakpoint()
            }, t.prototype.componentDidUpdate = function() {
                this.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                !this.props.collapsed && e.collapsed && this.state.searchInput && this.state.searchInput.length > 0 && this.setState({
                    searchInput: ""
                })
            }, t.prototype.componentWillUnmount = function() {
                this.historyUnlisten(), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame), window.removeEventListener("resize", this.handleWindowResize)
            }, t.prototype.render = function() {
                var e = this.props.collapsed || this.state.forceCollapsed,
                    t = w("side-nav", {
                        "side-nav--collapsed": e
                    }),
                    n = {
                        "side-nav__toggle-visibility": !0,
                        "side-nav__toggle-visibility--open": e
                    },
                    i = E.createElement(H.P, {
                        position: H._2.Absolute,
                        flexGrow: 0,
                        flexShrink: 0,
                        display: this.state.forceCollapsed ? H.H.Hide : H.H.Block,
                        className: w(n)
                    }, E.createElement("button", {
                        onClick: this.handleToggleVisibility
                    }, E.createElement(H.P, {
                        className: "side-nav__toggle-visibility-icon",
                        position: H._2.Absolute
                    }, E.createElement(H._21, {
                        type: H._26.Span
                    }, E.createElement(H._8, {
                        asset: H._9.GlyphArrDown
                    })))));
                if (!this.props.isLoggedIn) return this.state.hideSideNav ? null : E.createElement(H.U, {
                    className: t,
                    flexShrink: 0,
                    flexGrow: 0,
                    fullHeight: !0,
                    position: H._2.Relative
                }, E.createElement(H.U, {
                    className: Object(O.c)(I.a.Dark),
                    flexShrink: 0,
                    fullWidth: !0,
                    fullHeight: !0
                }, E.createElement(H._17, {
                    borderRight: !0,
                    className: "side-nav__theme-wrapper",
                    flexShrink: 0,
                    flexGrow: 1,
                    flexDirection: H.J.Column,
                    flexWrap: H.K.NoWrap,
                    fullWidth: !0,
                    fullHeight: !0,
                    display: H.H.Flex,
                    position: H._2.Relative
                }, E.createElement(H.U, {
                    flexWrap: H.K.NoWrap,
                    fullHeight: !0,
                    display: H.H.Flex,
                    position: H._2.Relative,
                    fullWidth: !0
                }, E.createElement(H.P, {
                    flexGrow: 1,
                    fullWidth: !0
                }, E.createElement(T.b, {
                    suppressScrollX: !0
                }, E.createElement(te, {
                    collapsed: e
                })))))), i);
                var a = this.state.searchInput && this.state.searchInput.length > 0 && !e,
                    r = null,
                    o = this.props.data && !this.props.data.error && !this.props.data.loading,
                    s = o && this.props.data.currentUser,
                    l = s && s.friends ? s.friends.edges : [];
                a && (r = E.createElement(H.P, {
                    position: H._2.Absolute,
                    attachLeft: !0,
                    attachRight: !0,
                    attachTop: !0
                }, E.createElement(T.b, {
                    className: "side-nav__overlay-wrapper",
                    suppressScrollX: !0
                }, E.createElement(st, {
                    searchInput: this.state.searchInput,
                    friends: l,
                    key: "search-friend-results",
                    collapsed: e
                }))));
                var c = s ? s.id : "";
                return E.createElement(H.U, {
                    className: t,
                    flexShrink: 0,
                    fullHeight: !0,
                    position: H._2.Relative
                }, E.createElement(H.U, {
                    className: Object(O.c)(I.a.Dark),
                    flexShrink: 0,
                    fullWidth: !0,
                    fullHeight: !0
                }, E.createElement(H._17, {
                    className: "side-nav__theme-wrapper",
                    borderRight: !0,
                    flexShrink: 0,
                    flexGrow: 1,
                    flexDirection: H.J.Column,
                    flexWrap: H.K.NoWrap,
                    fullWidth: !0,
                    fullHeight: !0,
                    display: H.H.Flex,
                    position: H._2.Relative
                }, E.createElement(H.U, {
                    className: "side-nav__overlay-wrapper",
                    flexWrap: H.K.NoWrap,
                    fullHeight: !0,
                    display: H.H.Flex,
                    position: H._2.Relative,
                    overflow: H.Y.Hidden,
                    fullWidth: !0
                }, E.createElement(H.P, {
                    flexGrow: 1,
                    fullWidth: !0,
                    overflow: H.Y.Hidden
                }, E.createElement(T.b, {
                    suppressScrollX: !0
                }, E.createElement(H.U, {
                    flexGrow: 1,
                    fullWidth: !0
                }, E.createElement(be, {
                    collapsed: e,
                    premieresEnabled: this.state.premieresEnabled,
                    videoExperimentAssignment: this.state.videoExperimentAssignment
                }), E.createElement(Ue, {
                    collapsed: e,
                    friends: l,
                    selfID: c,
                    loading: this.props.data.loading,
                    errored: !!this.props.data.error,
                    refetch: this.props.data.refetch
                }), this.props.firstPageLoaded && E.createElement(ze, {
                    collapsed: e
                }), this.props.firstPageLoaded && E.createElement(Xe, {
                    collapsed: e
                })))), r), E.createElement(lt, {
                    collapsed: e,
                    onInputChange: this.onSearchInputChange
                }))), i)
            }, t.prototype.getLayoutCache = function() {
                return N.k.get(N.n.config.layoutCacheKey, x.a)
            }, t = _.__decorate([Object(R.c)("SideNav"), Object(D.a)(Re, {
                skip: function(e) {
                    return !e.isLoggedIn
                }
            })], t)
        }(E.Component),
        gt = Object(C.f)(ht)
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e.Live = "live", e.WatchParty = "watch_party", e.Premiere = "premiere", e.Rerun = "rerun"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";

    function i() {
        return {
            byID: {},
            orderedIDs: [],
            openedIDs: [],
            focusedID: ""
        }
    }

    function a(e, t) {
        switch (void 0 === e && (e = i()), t.type) {
            case b.f:
                var n = f.__assign({}, e),
                    a = n.byID[t.data.threadID],
                    u = n.openedIDs.includes(t.data.threadID);
                return a || (n = v(n, function(e) {
                    return e.orderedIDs
                }, function(e) {
                    return e.push(t.data.threadID), e
                }), n = v(n, function(e) {
                    return e.byID
                }, function(e) {
                    return e[t.data.threadID] = t.data, e
                })), n.openedIDs.includes(t.data.threadID) && !n.byID[t.data.threadID].hidden || (n.byID[t.data.threadID].hidden = t.data.hidden), n.focusedID = t.data.threadID, n = l(n, t.data.threadID, t.contentWidth), (!u || u && !t.data.ignoreCollapseIfOpen) && (t.data.collapsed || (n = c(n, t.data.threadID, t.contentWidth))), n;
            case b.b:
                if (!e.byID[t.threadID]) return e;
                var n = v(e, function(e) {
                    return e.byID
                }, function(e) {
                    return delete e[t.threadID], e
                });
                return n = v(n, function(e) {
                    return e.orderedIDs
                }, function(e) {
                    return e.filter(function(e) {
                        return e !== t.threadID
                    })
                }), n = v(n, function(e) {
                    return e.openedIDs
                }, function(e) {
                    return e.filter(function(e) {
                        return e !== t.threadID
                    })
                }), e.focusedID === t.threadID && (n.focusedID = n.openedIDs[0]), s(n, t.contentWidth);
            case b.c:
                return e.byID[t.threadID] ? v(e, function(e) {
                    return e.byID
                }, function(e) {
                    return e[t.threadID].collapsed = !0, e
                }) : e;
            case b.d:
                return c(e, t.threadID, t.contentWidth);
            case b.e:
                return v(e, function(e) {
                    return e.focusedID
                }, function() {
                    return t.threadID
                });
            case b.g:
                return v(e, function(e) {
                    return e.focusedID
                }, function(e) {
                    return e === t.threadID ? "" : e
                });
            case b.a:
                var d = r(e);
                if (d > t.contentWidth) {
                    if (e.openedIDs.length <= 1) return e;
                    for (var p = f.__assign({}, e); d > t.contentWidth && p.openedIDs.length > 1;) p = o(p), d = r(p);
                    return p
                }
                if (t.contentWidth - d >= k) {
                    var m = Math.floor((t.contentWidth - d) / k),
                        h = Math.min(m, e.orderedIDs.length - e.openedIDs.length);
                    if (0 === h) return e;
                    for (var p = f.__assign({}, e), g = 0; g < h; g++)
                        if (p = s(p, t.contentWidth), p.openedIDs.length > 1)
                            for (var y = p.openedIDs, S = y.length, _ = 0, w = p.orderedIDs; _ < w.length; _++) {
                                var E = w[_];
                                if (y[S - 1] === E) {
                                    var C = y.splice(S - 2, 1);
                                    y.push(C[0]);
                                    break
                                }
                                if (y[S - 2] === E) break
                            }
                        return p
                }
                return e;
            default:
                return e
        }
    }

    function r(e) {
        if (0 === e.openedIDs.length) return 0;
        for (var t = 0, n = 0, i = e.openedIDs; n < i.length; n++) {
            var a = i[n],
                r = e.byID[a];
            r.hidden || (t += r.collapsed ? y : k)
        }
        return t
    }

    function o(e) {
        var t = e.openedIDs.slice(),
            n = t.pop();
        return n && e.focusedID === n && t.length > 0 && (t.pop(), t.push(n)), v(e, function(e) {
            return e.openedIDs
        }, function() {
            return t
        })
    }

    function s(e, t) {
        var n = e.orderedIDs.filter(function(t) {
            return !e.openedIDs.includes(t)
        });
        return n.length > 0 ? l(e, n[0], t, e.focusedID) : e
    }

    function l(e, t, n, i) {
        var a = n - r(e),
            s = f.__assign({}, e);
        return s.openedIDs.includes(t) || (a < k && (s = o(s)), s = v(s, function(e) {
            return e.openedIDs
        }, function(e) {
            return e.push(t), e
        })), s.focusedID = i || t, s
    }

    function c(e, t, n) {
        if (!e.byID[t]) return e;
        var i = v(e, function(e) {
            return e.byID
        }, function(e) {
            return e[t].collapsed = !1, e
        });
        return i.focusedID = t, r(e) > n && (i = o(i)), i
    }

    function u() {
        return {
            byThreadID: {}
        }
    }

    function d(e, t) {
        switch (void 0 === e && (e = u()), t.type) {
            case S.a:
                return e.byThreadID[t.threadID] ? v(e, function(e) {
                    return e.byThreadID[t.threadID]
                }, function(e) {
                    return [{
                        threadID: t.threadID,
                        afterMessageID: t.afterMessageID,
                        content: t.content
                    }].concat(e)
                }) : v(e, function(e) {
                    return e.byThreadID
                }, function(e) {
                    return f.__assign((n = {}, n[t.threadID] = [{
                        threadID: t.threadID,
                        afterMessageID: t.afterMessageID,
                        content: t.content
                    }], n), e);
                    var n
                });
            default:
                return e
        }
    }

    function p(e, t) {
        return e.whispers ? e.whispers.display.byID[t] : null
    }

    function m(e, t) {
        return e.whispers.notifications.byThreadID[t] || []
    }
    var h = n(9),
        g = n(2),
        f = n(0),
        v = n(137),
        b = n(57),
        y = 234,
        k = 310,
        S = n(275);
    t.b = p, t.a = m;
    var _ = Object(h.combineReducers)({
        display: a,
        notifications: d
    });
    g.n.store.registerReducer("whispers", _)
}, function(e, t, n) {
    "use strict";

    function i() {
        return function(e) {
            return function(t) {
                function n() {
                    var e = null !== t && t.apply(this, arguments) || this;
                    return e.logger = p.i.withCategory("TooltipLayer"), e.show = function(t) {
                        a ? a.showTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                    }, e.showRich = function(t) {
                        a ? a.showRichTooltip(t) : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                    }, e.hide = function() {
                        a ? a.hideTooltip() : e.logger.error(new Error, "Attempted to show a tooltip in the global layer, but the global layer was not mounted.")
                    }, e
                }
                return r.__extends(n, t), n.prototype.render = function() {
                    var t = {
                        tooltipLayer: {
                            show: this.show,
                            showRich: this.showRich,
                            hide: this.hide
                        }
                    };
                    return s.createElement(e, r.__assign({}, this.props, t))
                }, n
            }(s.Component)
        }
    }
    var a, r = n(0),
        o = n(4),
        s = n(1),
        l = n(33),
        c = n(34),
        u = n(3),
        d = (n(498), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.render = function() {
                var e = (t = {}, t[Object(c.c)(l.a.Dark)] = this.props.forceDarkTheme, t);
                return s.createElement(u.U, {
                    className: o("rich-content-tooltip", e)
                }, this.props.children, s.createElement(u.p, {
                    show: this.props.show,
                    direction: this.props.balloonDirection || u.q.Right,
                    tailOffset: this.props.balloonDirection !== u.q.RightCenter ? 16 : 0
                }, s.createElement("div", {
                    ref: this.props.refCallback,
                    className: "rich-content-tooltip__pointer-target"
                }, s.createElement(u.U, {
                    padding: .5
                }, this.props.content))));
                var t
            }, t
        }(s.Component)),
        p = n(2),
        m = (n(499), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.state = {
                    options: null,
                    richOptions: null,
                    hovering: !1
                }, n.clearTimeoutAndRun = function(e, t) {
                    void 0 === t && (t = 0), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                        e(), n.displayTimeout = 0
                    }, t)
                }, n.setRef = function(e) {
                    n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                }, n.addEventListeners = function(e) {
                    e && (e.addEventListener("mouseenter", n.handleMouseEnter), e.addEventListener("mouseleave", n.handleMouseLeave), e.addEventListener("click", n.handleMouseClick))
                }, n.removeEventListeners = function() {
                    n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave), n.ref.removeEventListener("click", n.handleMouseClick))
                }, n.handleMouseEnter = function() {
                    n.setState({
                        hovering: !0
                    })
                }, n.handleMouseLeave = function() {
                    n.setState({
                        hovering: !1
                    }, function() {
                        n.displayTimeout || n.hideTooltip()
                    })
                }, n.handleMouseClick = function() {
                    n.setState({
                        hovering: !1
                    }, function() {
                        n.hideTooltip(!0)
                    })
                }, a = n, n
            }
            return r.__extends(t, e), t.prototype.render = function() {
                var e = this.state.options && this.state.options.from || this.state.richOptions && this.state.richOptions.from;
                if (!e) return null;
                var t = this.state.richOptions ? 2 : 0,
                    n = e.getBoundingClientRect(),
                    i = {
                        left: n.left,
                        top: n.top,
                        width: n.width + t,
                        height: n.height
                    },
                    a = s.createElement("div", {
                        style: {
                            width: i.width,
                            height: i.height
                        }
                    }),
                    r = null;
                return this.state.options ? r = s.createElement(u._30, {
                    direction: this.state.options.direction,
                    align: this.state.options.align,
                    label: this.state.options.label,
                    show: !0
                }, a) : this.state.richOptions && (r = s.createElement(d, {
                    content: this.state.richOptions.richContent,
                    refCallback: this.state.richOptions.allowHover && this.setRef || void 0,
                    forceDarkTheme: this.state.richOptions.forceDarkTheme,
                    balloonDirection: this.state.richOptions.balloonDirection,
                    show: !0
                }, a)), s.createElement("div", {
                    className: "tooltip-layer",
                    style: i
                }, r)
            }, t.prototype.showTooltip = function(e) {
                var t = this;
                this.clearTimeoutAndRun(function() {
                    t.setState({
                        options: e,
                        richOptions: null
                    })
                }), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
            }, t.prototype.showRichTooltip = function(e) {
                var t = this;
                this.clearTimeoutAndRun(function() {
                    t.setState({
                        richOptions: e,
                        options: null
                    })
                }, e && e.delayOpenMS && !this.hoverTimeout ? e.delayOpenMS : 0), this.hoverTimeout && (clearTimeout(this.hoverTimeout), this.hoverTimeout = 0)
            }, t.prototype.hideTooltip = function(e) {
                var t = this;
                e || this.state.hovering || this.displayTimeout || (this.hoverTimeout = setTimeout(function() {
                    clearTimeout(t.hoverTimeout), t.hoverTimeout = 0
                }, 1e3)), this.clearTimeoutAndRun(function() {
                    t.state.hovering || t.setState({
                        options: null,
                        richOptions: null
                    })
                }, !e && this.state.richOptions && this.state.richOptions.allowHover ? 400 : 0)
            }, t
        }(s.Component));
    n.d(t, "a", function() {
        return d
    }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
        return i
    }), n.d(t, "b", function() {
        return m
    }), n.d(t, !1, function() {})
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            currentUserID: e.session.user && "" + e.session.user.id
        }
    }

    function a(e) {
        if (l && e.ref) {
            var t = o(e.direction, e.ref),
                n = s(t);
            l.showUserCard({
                id: e.id,
                direction: e.direction,
                from: {
                    x: n.coords.x,
                    y: n.coords.y
                },
                tailOffset: n.offset
            })
        }
    }

    function r(e) {
        void 0 === e && (e = {}), l && l.hideUserCard(e)
    }

    function o(e, t) {
        var n = t.getBoundingClientRect();
        switch (e) {
            case d.q.Bottom:
            case d.q.BottomLeft:
                return {
                    x: n.left,
                    y: n.bottom
                };
            case d.q.BottomCenter:
                return {
                    x: n.left + n.width / 2,
                    y: n.bottom
                };
            case d.q.BottomRight:
                return {
                    x: n.right,
                    y: n.bottom
                };
            case d.q.Left:
            case d.q.Top:
            case d.q.TopLeft:
                return {
                    x: n.left,
                    y: n.top
                };
            case d.q.LeftCenter:
                return {
                    x: n.left,
                    y: n.top + n.height / 2
                };
            case d.q.TopCenter:
                return {
                    x: n.left + n.width / 2,
                    y: n.top
                };
            case d.q.TopRight:
            case d.q.Right:
                return {
                    x: n.right,
                    y: n.top
                };
            case d.q.RightCenter:
                return {
                    x: n.right,
                    y: n.top + n.height / 2
                };
            default:
                return {
                    x: n.left,
                    y: n.bottom
                }
        }
    }

    function s(e) {
        var t = c.__assign({}, e),
            n = 0;
        return e.y + N + 20 > window.innerHeight && (t.y = window.innerHeight - N - 20, n = e.y - t.y), {
            coords: t,
            offset: n
        }
    }
    var l, c = n(0),
        u = n(1),
        d = n(3),
        p = (n(502), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.state = {
                    options: null,
                    hovering: !1
                }, n.clearTimeoutAndRun = function(e, t) {
                    void 0 === t && (t = 400), n.displayTimeout && (clearTimeout(n.displayTimeout), n.displayTimeout = 0), n.displayTimeout = setTimeout(function() {
                        e(), n.displayTimeout = 0
                    }, t)
                }, n.setRef = function(e) {
                    n.removeEventListeners(), n.addEventListeners(e), n.ref = e
                }, n.addEventListeners = function(e) {
                    e && (e.addEventListener("mouseenter", n.handleMouseEnter, !0), e.addEventListener("mouseleave", n.handleMouseLeave))
                }, n.removeEventListeners = function() {
                    n.ref && (n.ref.removeEventListener("mouseenter", n.handleMouseEnter), n.ref.removeEventListener("mouseleave", n.handleMouseLeave))
                }, n.handleMouseEnter = function() {
                    n.setState({
                        hovering: !0
                    })
                }, n.handleMouseLeave = function() {
                    n.setState({
                        hovering: !1
                    }, function() {
                        n.displayTimeout || n.hideUserCard()
                    })
                }, l = n, n
            }
            return c.__extends(t, e), t.prototype.componentDidUpdate = function() {
                this.state.options || this.removeEventListeners()
            }, t.prototype.render = function() {
                var e = null;
                if (this.state.options) {
                    var t = {
                        left: this.state.options.from.x,
                        top: this.state.options.from.y
                    };
                    e = u.createElement("div", {
                        className: "user-card-layer__balloon",
                        style: t,
                        ref: this.setRef
                    }, u.createElement(C, {
                        id: this.state.options.id,
                        direction: this.state.options.direction ? this.state.options.direction : d.q.Right,
                        tailOffset: this.state.options.tailOffset
                    }))
                }
                return e
            }, t.prototype.showUserCard = function(e) {
                var t = this;
                this.clearTimeoutAndRun(function() {
                    t.setState({
                        options: e
                    })
                })
            }, t.prototype.hideUserCard = function(e) {
                var t = this;
                void 0 === e && (e = {}), this.clearTimeoutAndRun(function() {
                    t.state.hovering && !e.force || t.setState({
                        options: null
                    })
                }, e.timeout)
            }, t
        }(u.Component)),
        m = n(6),
        h = n(2),
        g = n(443),
        f = n(138),
        v = n(444),
        b = n(7),
        y = n(445),
        k = n(70),
        S = n(55),
        _ = (n(509), n(510)),
        w = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.getContent = function() {
                    if (t.props.data.loading) return u.createElement("div", {
                        className: "user-card"
                    }, u.createElement(d.X, {
                        fillContent: !0
                    }));
                    var e = {
                        backgroundImage: "url(" + (t.props.data.user.bannerImageURL || g),
                        backgroundPosition: "center",
                        backgroundSize: "auto 100%",
                        backgroundRepeat: "repeat"
                    };
                    return u.createElement(d.U, {
                        padding: 1
                    }, u.createElement("div", {
                        className: "user-card theme--dark",
                        style: t.props.data.loading ? {} : e
                    }, u.createElement(d.U, {
                        padding: 1,
                        display: d.H.Flex,
                        flexDirection: d.J.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        className: "user-card__overlay",
                        "data-a-target": "user-card-modal"
                    }, u.createElement(d.U, {
                        alignItems: d.c.Center,
                        justifyContent: d.T.Center,
                        display: d.H.Flex,
                        flexDirection: d.J.Column,
                        textAlign: d._22.Center,
                        fullWidth: !0,
                        flexGrow: 1
                    }, u.createElement(d.l, {
                        imageSrc: t.props.data.user.profileImageURL,
                        size: 50,
                        imageAlt: t.props.data.user.displayName
                    }), u.createElement(d.U, {
                        padding: {
                            top: .5
                        },
                        ellipsis: !0,
                        className: "user-card__display-name"
                    }, t.props.data.user.displayName), t.getBio()), t.getButtons())))
                }, t.getBio = function() {
                    if (t.props.data.loading || t.props.data.error) return null;
                    if (!t.props.data.user.description) return u.createElement(d.U, {
                        ellipsis: !0,
                        className: "user-card__bio",
                        padding: {
                            top: .5
                        }
                    }, Object(h.d)("This user has no bio.", "UserCard"));
                    var e = null;
                    return t.props.data.user && (t.props.data.user.activity || t.props.data.user.availability) && (e = u.createElement(k.b, {
                        availability: t.props.data.user.availability,
                        activity: t.props.data.user.activity
                    })), u.createElement(d.U, {
                        ellipsis: !0,
                        className: "user-card__bio",
                        padding: {
                            top: .5
                        }
                    }, e && u.createElement(d._21, {
                        color: d.F.Alt
                    }, e), t.props.data.user.description)
                }, t.getButtons = function() {
                    return u.createElement(d.U, {
                        display: d.H.Flex,
                        flexDirection: d.J.Row,
                        justifyContent: d.T.Between,
                        fullWidth: !0,
                        flexGrow: 0
                    }, u.createElement(d.U, {
                        display: d.H.InlineFlex,
                        flexDirection: d.J.Row
                    }, u.createElement(d.U, {
                        padding: {
                            right: 1
                        }
                    }, u.createElement(y.a, {
                        channelID: t.props.id
                    })), u.createElement(f.a, {
                        channelLogin: t.props.data.user.login
                    })), u.createElement(v.a, {
                        threadID: t.getThreadID(),
                        onClick: t.onWhisperButtonClick
                    }))
                }, t.onWhisperButtonClick = function() {
                    r({
                        force: !0,
                        timeout: 0
                    })
                }, t.getThreadID = function() {
                    return t.props.currentUserID ? Object(S.a)(t.props.data.user.id, t.props.currentUserID) : ""
                }, t
            }
            return c.__extends(t, e), t.prototype.render = function() {
                return this.props.data.error ? null : u.createElement(d.p, {
                    direction: this.props.direction,
                    size: d.r.Large,
                    show: !0,
                    tailOffset: this.props.tailOffset
                }, this.getContent())
            }, t = c.__decorate([Object(b.a)(_, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.id
                        }
                    }
                }
            })], t)
        }(u.Component),
        E = w,
        C = Object(m.a)(i)(E),
        N = 214;
    n.d(t, "b", function() {
        return p
    }), n.d(t, "a", function() {
        return C
    }), n.d(t, "d", function() {
        return a
    }), n.d(t, "c", function() {
        return r
    })
}, function(e, t, n) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = n(0),
        a = n(16),
        r = n(297),
        o = n(149),
        s = n(150);
    window.IntlMessageFormat = o, window.IntlRelativeFormat = s;
    var l = function() {
            function e() {
                this.optimizedBuild = !0, this.embedded = void 0, this.buildID = "ad0b34cd-46ef-41da-9235-615d699232f6", this.spadeBatchWindow = 1e3, this.locales = [{
                    name: "English",
                    languageCode: "en",
                    locale: "en-US",
                    loader: function() {
                        return Promise.resolve({
                            formatData: {
                                numberShort: r,
                                intlMessageFormatKey: "en"
                            }
                        })
                    },
                    default: !0
                }, {
                    name: "Dansk",
                    languageCode: "da",
                    locale: "da-DK",
                    loader: function() {
                        return n.e(27).then(n.bind(null, 2021))
                    }
                }, {
                    name: "Deutsch",
                    languageCode: "de",
                    locale: "de-DE",
                    loader: function() {
                        return n.e(26).then(n.bind(null, 2022))
                    }
                }, {
                    name: "English - UK",
                    languageCode: "en-gb",
                    locale: "en-GB",
                    loader: function() {
                        return n.e(31).then(n.bind(null, 2023))
                    }
                }, {
                    name: "Español - España",
                    languageCode: "es",
                    locale: "es-ES",
                    loader: function() {
                        return n.e(23).then(n.bind(null, 2024))
                    }
                }, {
                    name: "Español - Latinoamérica",
                    languageCode: "es-mx",
                    locale: "es-MX",
                    loader: function() {
                        return n.e(24).then(n.bind(null, 2025))
                    }
                }, {
                    name: "Français",
                    languageCode: "fr",
                    locale: "fr-FR",
                    loader: function() {
                        return n.e(21).then(n.bind(null, 2026))
                    }
                }, {
                    name: "Italiano",
                    languageCode: "it",
                    locale: "it-IT",
                    loader: function() {
                        return n.e(18).then(n.bind(null, 2027))
                    }
                }, {
                    name: "Magyar",
                    languageCode: "hu",
                    locale: "hu-HU",
                    loader: function() {
                        return n.e(19).then(n.bind(null, 2028))
                    }
                }, {
                    name: "Nederlands",
                    languageCode: "nl",
                    locale: "nl-NL",
                    loader: function() {
                        return n.e(15).then(n.bind(null, 2029))
                    }
                }, {
                    name: "Norsk",
                    languageCode: "no",
                    locale: "no-NO",
                    loader: function() {
                        return n.e(14).then(n.bind(null, 2030))
                    },
                    cldrLocale: "nn"
                }, {
                    name: "Polski",
                    languageCode: "pl",
                    locale: "pl-PL",
                    loader: function() {
                        return n.e(13).then(n.bind(null, 2031))
                    }
                }, {
                    name: "Português",
                    languageCode: "pt",
                    locale: "pt-PT",
                    loader: function() {
                        return n.e(11).then(n.bind(null, 2032))
                    },
                    cldrLocale: "pt-pt"
                }, {
                    name: "Português - Brasil",
                    languageCode: "pt-br",
                    locale: "pt-BR",
                    loader: function() {
                        return n.e(12).then(n.bind(null, 2033))
                    },
                    cldrLocale: "pt"
                }, {
                    name: "Slovenčina",
                    languageCode: "sk",
                    locale: "sk-SK",
                    loader: function() {
                        return n.e(8).then(n.bind(null, 2034))
                    }
                }, {
                    name: "Suomi",
                    languageCode: "fi",
                    locale: "fi-FI",
                    loader: function() {
                        return n.e(22).then(n.bind(null, 2035))
                    }
                }, {
                    name: "Svenska",
                    languageCode: "sv",
                    locale: "sv-SE",
                    loader: function() {
                        return n.e(7).then(n.bind(null, 2036))
                    }
                }, {
                    name: "Tiếng Việt",
                    languageCode: "vi",
                    locale: "vi-VN",
                    loader: function() {
                        return n.e(4).then(n.bind(null, 2037))
                    }
                }, {
                    name: "Türkçe",
                    languageCode: "tr",
                    locale: "tr-TR",
                    loader: function() {
                        return n.e(5).then(n.bind(null, 2038))
                    }
                }, {
                    name: "Čeština",
                    languageCode: "cs",
                    locale: "cs-CZ",
                    loader: function() {
                        return n.e(28).then(n.bind(null, 2039))
                    }
                }, {
                    name: "Ελληνικά",
                    languageCode: "el",
                    locale: "el-GR",
                    loader: function() {
                        return n.e(25).then(n.bind(null, 2040))
                    }
                }, {
                    name: "Български",
                    languageCode: "bg",
                    locale: "bg-BG",
                    loader: function() {
                        return n.e(29).then(n.bind(null, 2041))
                    }
                }, {
                    name: "Русский",
                    languageCode: "ru",
                    locale: "ru-RU",
                    loader: function() {
                        return n.e(9).then(n.bind(null, 2042))
                    }
                }, {
                    name: "العربية",
                    languageCode: "ar",
                    locale: "ar-SA",
                    loader: function() {
                        return n.e(30).then(n.bind(null, 2043))
                    }
                }, {
                    name: "ภาษาไทย",
                    languageCode: "th",
                    locale: "th-TH",
                    loader: function() {
                        return n.e(6).then(n.bind(null, 2044))
                    }
                }, {
                    name: "中文 简体",
                    languageCode: "zh-cn",
                    locale: "zh-CN",
                    loader: function() {
                        return n.e(3).then(n.bind(null, 2045))
                    },
                    cldrLocale: "zh-hans"
                }, {
                    name: "中文 繁體",
                    languageCode: "zh-tw",
                    locale: "zh-TW",
                    loader: function() {
                        return n.e(2).then(n.bind(null, 2046))
                    },
                    cldrLocale: "zh-hant"
                }, {
                    name: "日本語",
                    languageCode: "ja",
                    locale: "ja-JP",
                    loader: function() {
                        return n.e(17).then(n.bind(null, 2047))
                    }
                }, {
                    name: "한국어",
                    languageCode: "ko",
                    locale: "ko-KR",
                    loader: function() {
                        return n.e(16).then(n.bind(null, 2048))
                    }
                }, {
                    name: "हिंदी",
                    languageCode: "hi",
                    locale: "hi-IN",
                    loader: function() {
                        return n.e(20).then(n.bind(null, 2049))
                    }
                }, {
                    name: "Română",
                    languageCode: "ro",
                    locale: "ro-RO",
                    loader: function() {
                        return n.e(10).then(n.bind(null, 2050))
                    }
                }], this.passportAuthURL = "https://api.twitch.tv/kraken/oauth2/authorize", this.passportScopes = ["chat_login", "user_read", "user_subscriptions", "user_presence_friends_read"], this.defaultAvatarURL = "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_70x70.png", this.defaultStreamPreviewURL = "https://static-cdn.jtvnw.net/ttv-static/404_preview-160x90.jpg", this.defaultBoxArtURL = "https://static-cdn.jtvnw.net/ttv-boxart/404_boxart.png", this.defaultCollectionPreviewURL = "https://static-cdn.jtvnw.net/ttv-playlists-thumbnails-prod/missing-video-thumb-320x180.png", this.hostingCacheDelay = 2001, this.legacyClientID = "jzkbprff40iqj646a697cyrvl0zt2m6", this.algoliaApplicationID = "XLUO134HOR", this.algoliaAPIKey = "d157112f6fc2cab93ce4b01227c80a6d", this.forceNetworkLogging = !1, this.networkLoggingHostNames = ["twitch.tv", "localhost", "jtvnw.net", "twitchcdn.net", "twitchcdn.tech", "twitchcdn-shadow.net", "twitchsvc.net", "twitchsvc.tech", "twitchsvc-shadow.net"], this.defaultNetworkLoggingThreshold = .2, this.layoutCacheKey = "TwitchCache:Layout", this.forceComponentBenchmarking = !1, this.defaultComponentBenchmarkingThreshold = .1, this.forceBenchmarkingTools = !1, this.dfpNetworkCode = "3576121", this.krakenEndpoint = "https://api.twitch.tv/kraken", this.defaultAPIVersion = "5", this.adblockAccount = 58, this.adblockID = "qFEaZsFQnwEdUIs", this.forceMinConsoleLogLevelKey = "twilight.minConsoleLogLevel", this.tryPrimeURI = "https://twitch.amazon.com/prime", this.experimentsOverrideCookie = "experiment_overrides", this.tmiHost = "irc-ws.chat.twitch.tv", this.persistentPlayerEnabledKey = "persistenceEnabled"
            }
            return e
        }(),
        c = "https://api.twitch.tv",
        u = "https://gql.twitch.tv",
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.buildType = a.a.Production, t.apiBaseURL = c, t.graphqlEndpoint = u + "/gql", t.sentinelEndpoint = "https://sentinel.twitchsvc.net/error-report", t.defaultSpadeEndpoint = "https://spade.twitch.tv/track", t.authClientID = "kimne78kx3ncx6brgo4mv6wki5h1ko", t.passportRedirectURI = "https://go.twitch.tv/passport-callback", t.pubsubTopicUploadPrefix = "pubsub.upload", t.mixpanelToken = "809576468572134f909dffa6bd0dcfcf", t
            }
            return i.__extends(t, e), t
        }(l),
        p = n(68);
    Object(p.i)(new d)
}, , , , , function(e, t, n) {
    "use strict";
    (function(e) {
        var n = "object" == typeof e && e && e.Object === Object && e;
        t.a = n
    }).call(t, n(35))
}, , , , , , , , , , , , , , , , , , , , , function(e, t, n) {
    "use strict";

    function i(e) {
        return a.__assign({}, e, {
            rendered_item_list: e.rendered_item_list.join(","),
            rendered_item_types: e.rendered_item_types.join(","),
            rendered_items_viewcounts: e.rendered_items_viewcounts.join(",")
        })
    }
    var a = n(0),
        r = n(24),
        o = n(340),
        s = n(59),
        l = n(95),
        c = n(72),
        u = n(180);
    n.d(t, "a", function() {
        return p
    });
    var d = new Set([s.SpadeEventType.Chat, s.SpadeEventType.Follow, s.SpadeEventType.Unfollow]),
        p = function() {
            function e(e) {
                var t = this;
                this.eventEmitter = new r.EventEmitter, this.eventQueue = new Array, this.hasCheckedInitialReferrer = !1, this.mixpanelEventQueue = new Array, this.trackingDataCache = {
                    platform: s.SpadePlatform.Web,
                    videoPlayerData: {
                        followCTAVisible: !1
                    }
                }, this.referrerURL = "", this.firstBatchSubmitted = !1, this.getEventQueue = function() {
                    return t.eventQueue
                }, this.getEndpoint = function() {
                    return t.endpoint
                }, this.getLastPageview = function() {
                    return t.trackingDataCache.lastPageView
                }, this.getPlatform = function() {
                    return t.trackingDataCache.platform
                }, this.getVideoPlayerTrackingData = function() {
                    return t.trackingDataCache.videoPlayerData
                }, this.getOrQueryDeviceFingerprint = function() {
                    return a.__awaiter(t, void 0, void 0, function() {
                        var e = this;
                        return a.__generator(this, function(t) {
                            return this.trackingDataCache.deviceFingerprint ? (this.logger.debug("Using cached device fingerprint"), [2, this.trackingDataCache.deviceFingerprint]) : this.deviceFingerprintPromise ? (this.logger.debug("Awaiting existing device fingerprint promise"), [2, this.deviceFingerprintPromise]) : (this.deviceFingerprintPromise = new Promise(function(t) {
                                e.logger.debug("Querying device fingerprint");
                                try {
                                    (new o.Fingerprint2).get(function(n, i) {
                                        e.trackingDataCache.deviceFingerprint = n, e.logger.debug("Identified device fingerprint", {
                                            fingerprint: n
                                        }), t(n);
                                        var a = {};
                                        i.forEach(function(e) {
                                            a["fp_" + e.key] = e.valueHash
                                        }), e.track(s.SpadeEventType.BrowserFingerprint, a)
                                    })
                                } catch (n) {
                                    e.logger.debug("Error identifying fingerprint:", n), t(null)
                                }
                            }), [2, this.deviceFingerprintPromise])
                        })
                    })
                }, this.getOrQueryEventData = function() {
                    return a.__awaiter(t, void 0, void 0, function() {
                        var e, t, e;
                        return a.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return this.trackingDataCache.eventData ? (this.logger.debug("Using cached event data"), [2, this.trackingDataCache.eventData]) : [3, 1];
                                case 1:
                                    return this.eventDataPromise ? (this.logger.debug("Awaiting existing promise"), [4, this.eventDataPromise]) : [3, 3];
                                case 2:
                                    return e = n.sent(), [2, e.data];
                                case 3:
                                    return t = this.store.getState(), this.isLoggedIn(t) ? (this.logger.debug("Querying event data to submit events..."), this.eventDataPromise = this.apollo.client.query({
                                        query: u
                                    }), [4, this.eventDataPromise]) : [3, 5];
                                case 4:
                                    e = n.sent(), e.data && !e.loading && (this.logger.debug("Event data query completed."), this.trackingDataCache.eventData = e.data), n.label = 5;
                                case 5:
                                    return this.trackingDataCache.eventData || (this.trackingDataCache.eventData = {
                                        currentUser: {
                                            id: null,
                                            hasTurbo: !1,
                                            hasPrime: !1,
                                            language: null,
                                            login: null
                                        }
                                    }), [2, this.trackingDataCache.eventData]
                            }
                        })
                    })
                }, this.processEvents = function(e) {
                    return a.__awaiter(t, void 0, void 0, function() {
                        var t, n, i, r, o, l, c;
                        return a.__generator(this, function(u) {
                            switch (u.label) {
                                case 0:
                                    return t = this.getOrQueryEventData(), n = this.getOrQueryDeviceFingerprint(), [4, t];
                                case 1:
                                    return i = u.sent(), [4, n];
                                case 2:
                                    for (r = u.sent(), o = 0, l = e; o < l.length; o++) c = l[o], c.properties.login = i.currentUser.login, c.properties.logged_in = !!i.currentUser.id, c.properties.user_id = i.currentUser.id ? +i.currentUser.id : null, c.properties.device_fingerprint = r, c.event === s.SpadeEventType.Pageview ? (c.properties.is_turbo = i.currentUser.hasTurbo, c.properties.language = i.currentUser.language || navigator.language) : c.event === s.SpadeEventType.Subscription && (c.properties.has_prime = i.currentUser.hasPrime), d.has(c.event) && this.mixpanelEventQueue.push({
                                        event: c.event,
                                        properties: a.__assign({
                                            token: this.config.mixpanelToken
                                        }, c.properties)
                                    });
                                    return [2]
                            }
                        })
                    })
                }, this.onWindowUnload = function() {
                    t.logger.debug("Unload triggered."), t.sendEvents(!0)
                }, this.logger = e.logger.withCategory("spade"), this.transmitLogger = this.logger.withCategory("transmitter"), this.endpoint = e.endpoint, this.session = e.session, this.apollo = e.apollo, this.config = e.config, this.store = e.store, this.adBlockSentinel = e.adBlockSentinel, this.adBlockDetector = e.adBlockDetector, this.logger.debug("Creating instance.", {
                    endpoint: this.endpoint,
                    sessionID: this.session.benchmarkID
                }), window.addEventListener("unload", this.onWindowUnload)
            }
            return e.prototype.setPlatform = function(e) {
                this.trackingDataCache.platform = e
            }, e.prototype.reportFollowCTAVisibility = function(e) {
                this.trackingDataCache.videoPlayerData.followCTAVisible = e
            }, e.prototype.setVideoPlayerTrackingData = function(e) {
                this.trackingDataCache.videoPlayerData = a.__assign({}, this.trackingDataCache.videoPlayerData, e)
            }, e.prototype.track = function(e, t) {
                return this.trackEvent(e, t)
            }, e.prototype.trackExperiment = function(e) {
                return this.track(s.SpadeEventType.ExperimentBranch, e)
            }, e.prototype.trackPageview = function(e) {
                void 0 === e && (e = {});
                var t = this.store.getState(),
                    n = a.__assign({
                        browser: navigator.userAgent,
                        collapse_right: t.ui && !t.ui.rightColumnExpanded,
                        collapse_left: t.ui && !t.ui.sideNavExpanded,
                        localstorage_device_id: this.session.localStorageDeviceID,
                        location: e.location || s.PageviewLocation.None,
                        page_session_id: this.session.pageviewID,
                        referrer: this.lastLocationURL ? this.lastLocationURL.href : document.referrer,
                        referrer_domain: this.lastLocationURL ? this.lastLocationURL.hostname : this.getCurrentReferrerURL().hostname,
                        sentinel_ab: this.adBlockSentinel.detect,
                        session_device_id: this.session.deviceID,
                        tab_session_id: this.session.tabID,
                        viewport_height: window.innerHeight,
                        viewport_width: window.innerWidth
                    }, e);
                this.track(s.SpadeEventType.Pageview, n), this.trackingDataCache.lastPageView = n, this.eventEmitter.emit(s.SpadeEventType.Pageview), this.lastLocationURL = new URL(location.href)
            }, e.prototype.trackBenchmark = function(e, t) {
                this.track(e, a.__assign({
                    benchmark_session_id: this.session.benchmarkID,
                    page_session_id: this.session.pageviewID
                }, t))
            }, e.prototype.trackApiQueryBenchmark = function(e) {
                this.track(s.SpadeEventType.APIQuery, a.__assign({
                    benchmark_session_id: this.session.benchmarkID,
                    page_session_id: this.session.pageviewID
                }, e))
            }, e.prototype.trackItemSectionLoad = function(e) {
                this.track(s.SpadeEventType.ItemSectionLoad, i(e))
            }, e.prototype.trackItemSectionClick = function(e) {
                this.track(s.SpadeEventType.ItemSectionClick, e)
            }, e.prototype.trackEvent = function(e, t) {
                this.hasCheckedInitialReferrer || this.setSpadeReferrerURL();
                var n = a.__assign({
                        adblock: this.adBlockDetector.detect,
                        app_version: this.config.buildID,
                        client_app: "twilight",
                        device_id: this.session.deviceID,
                        domain: window.document.domain,
                        host: window.location.host,
                        platform: this.trackingDataCache.platform,
                        preferred_language: Object(c.b)({
                            includeChosenLanguage: !1
                        })[0],
                        referrer_host: this.lastLocationURL ? this.lastLocationURL.host : this.getCurrentReferrerURL().host,
                        referrer_url: this.referrerURL || "",
                        received_language: Object(c.a)() || "en",
                        tab_session_id: this.session.tabID,
                        batch_time: (new Date).getTime() / 1e3,
                        url: window.location.href
                    }, t),
                    i = {
                        event: e,
                        properties: n
                    };
                this.logger.debug("Tracking event", i), this.eventQueue.push(i), this.scheduleEvents()
            }, e.prototype.sendEvents = function(e) {
                return void 0 === e && (e = !1), a.__awaiter(this, void 0, void 0, function() {
                    var t, n, i, r, o;
                    return a.__generator(this, function(a) {
                        switch (a.label) {
                            case 0:
                                return 0 === this.eventQueue.length ? [2] : [4, this.processEvents(this.eventQueue)];
                            case 1:
                                return a.sent(), (this.sendMixpanelEvents(e), t = this.eventQueue, this.eventQueue = [], Date.now() < this.squelchUntil) ? (this.logger.debug("Skipped Spade transmission. Client event tracking is squelched due to failure to sumbit to Spade service."), [2]) : (n = new Blob([Object(l.a)(t)], {
                                    type: "application/x-www-form-urlencoded; charset=UTF-8"
                                }), e && navigator.sendBeacon ? (navigator.sendBeacon(this.endpoint, n) ? this.transmitLogger.debug("Events sent using beacon.", {
                                    size: n.size,
                                    transmitBatch: t
                                }) : this.transmitLogger.warn("Events failed to send using beacon.", {
                                    size: n.size,
                                    transmitBatch: t
                                }), [3, 8]) : [3, 2]);
                            case 2:
                                i = 1, a.label = 3;
                            case 3:
                                if (!(i <= 3)) return [3, 8];
                                a.label = 4;
                            case 4:
                                return a.trys.push([4, 6, , 7]), [4, fetch(this.endpoint, {
                                    method: "POST",
                                    body: n
                                })];
                            case 5:
                                return a.sent(), this.firstBatchSubmitted || (this.firstBatchSubmitted = !0, (r = document.getElementById("root")) && r.setAttribute("data-a-page-events-submitted", Date.now().toString())), this.transmitLogger.debug("Events sent using fetch.", {
                                    size: n.size,
                                    transmitBatch: t
                                }), [2];
                            case 6:
                                return o = a.sent(), i < 3 ? this.transmitLogger.warn("Events send attempt failed with fetch.", {
                                    attempt: i,
                                    size: n.size,
                                    transmitBatch: t
                                }, o) : (this.squelchUntil = Date.now() + 6e4, this.transmitLogger.error(o, "Events failed to send using fetch. Maximum attemps tried, so events will be discarded, and further tracking will be temporarily squelched.", {
                                    attempt: i,
                                    size: n.size,
                                    maxAttempts: 3,
                                    squelch: this.squelchUntil,
                                    squelchDuration: 6e4
                                })), [3, 7];
                            case 7:
                                return ++i, [3, 3];
                            case 8:
                                return [2]
                        }
                    })
                })
            }, e.prototype.scheduleEvents = function() {
                var e = this;
                this.eventQueueTimeout || (this.eventQueueTimeout = setTimeout(function() {
                    try {
                        if (!e.store.getState().session.firstPageLoaded) return e.eventQueueTimeout = 0, void e.scheduleEvents();
                        e.sendEvents()
                    } catch (t) {
                        e.transmitLogger.error(t, "Failed to send events.")
                    }
                    e.eventQueueTimeout = 0
                }, this.config.spadeBatchWindow))
            }, e.prototype.sendMixpanelEvents = function(e) {
                return a.__awaiter(this, void 0, void 0, function() {
                    var t, n, i, r;
                    return a.__generator(this, function(a) {
                        switch (a.label) {
                            case 0:
                                return 0 === this.mixpanelEventQueue.length ? [2] : (t = this.mixpanelEventQueue, this.mixpanelEventQueue = [], Date.now() < this.squelchUntil ? (this.logger.debug("Skipped Mixpanel transmission. Client event tracking is squelched due to failure to submit to Spade service."), [2]) : (n = new Blob([Object(l.a)(t)], {
                                    type: "application/x-www-form-urlencoded; charset=UTF-8"
                                }), e && navigator.sendBeacon ? (navigator.sendBeacon(this.endpoint, n) ? this.transmitLogger.debug("Mixpanel events sent using beacon.", {
                                    size: n.size,
                                    transmitBatch: t
                                }) : this.transmitLogger.warn("Mixpanel events failed to send using beacon.", {
                                    size: n.size,
                                    transmitBatch: t
                                }), [3, 7]) : [3, 1]));
                            case 1:
                                i = 1, a.label = 2;
                            case 2:
                                if (!(i <= 3)) return [3, 7];
                                a.label = 3;
                            case 3:
                                return a.trys.push([3, 5, , 6]), [4, fetch("https://api.mixpanel.com/track", {
                                    method: "POST",
                                    body: n
                                })];
                            case 4:
                                return a.sent(), this.transmitLogger.debug("Mixpanel events sent using fetch.", {
                                    size: n.size,
                                    transmitBatch: t
                                }), [2];
                            case 5:
                                return r = a.sent(), i < 3 ? this.transmitLogger.warn("Mixpanel events send attempt failed with fetch.", {
                                    attempt: i,
                                    size: n.size,
                                    transmitBatch: t
                                }, r) : this.transmitLogger.error(r, "Mixpanel events failed to send using fetch. Maximum attemps tried, so events will be discarded.", {
                                    attempt: i,
                                    size: n.size,
                                    maxAttempts: 3
                                }), [3, 6];
                            case 6:
                                return ++i, [3, 2];
                            case 7:
                                return [2]
                        }
                    })
                })
            }, e.prototype.isLoggedIn = function(e) {
                return !(!e.session || !e.session.user)
            }, e.prototype.getCurrentReferrerURL = function() {
                return document.referrer.length ? new URL(document.referrer) : {
                    host: "",
                    hostname: "",
                    href: ""
                }
            }, e.prototype.setSpadeReferrerURL = function() {
                var e;
                try {
                    e = new URL(document.referrer)
                } catch (e) {}
                e && "go.twitch.tv" !== e.hostname && "www.twitch.tv" !== e.hostname && (this.referrerURL = e.href), this.hasCheckedInitialReferrer = !0
            }, e
        }()
}, function(e, t, n) {
    "use strict";
    n.d(t, "b", function() {
        return i
    }), n.d(t, "a", function() {
        return a
    }), n.d(t, "c", function() {
        return r
    }), n.d(t, "d", function() {
        return o
    });
    var i;
    ! function(e) {
        e.Web = "web", e.Desktop = "desktop"
    }(i || (i = {}));
    var a;
    ! function(e) {
        e.Live = "live", e.Communities = "communities", e.Games = "games", e.Hosts = "hosts"
    }(a || (a = {}));
    var r;
    ! function(e) {
        e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.WatchParty = "watch_party", e.PastPremiere = "past_premiere", e.PremiereUpload = "premiere_upload"
    }(r || (r = {}));
    var o;
    ! function(e) {
        e.Clip = "clip", e.Channel = " channel", e.Chomment = "chomment", e.Collection = "collection", e.Event = "event", e.Game = "game", e.Stream = "stream", e.Video = "vod", e.User = "user"
    }(o || (o = {}))
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e.AchievementSpotlightImpression = "achievement_spotlight_impression", e.AchievementQuestBannerClick = "achievement_quest_banner_click", e.APIQuery = "benchmark_api_query", e.AppBooted = "benchmark_app_booted", e.AutohostChatImpression = "autohost_chat_impression", e.AutohostChatYes = "autohost_chat_yes", e.AutohostChatDismiss = "autohost_chat_dismiss", e.AutohostChatSettings = "autohost_chat_settings", e.BitsAdsAvailability = "bits_ads_availability", e.BitsAdsImpression = "bits_ads_impression", e.BitsAdsRequest = "bits_ads_request", e.BitsCardInteraction = "bits_card_interaction", e.BrowseForYou = "browse_for_you", e.BrowserFingerprint = "browser_fingerprint", e.BTTV = "bttv_check", e.Chat = "chat", e.ChatMentionUsed = "chat_mention_used", e.ChatRoomJoined = "chat_room_join", e.ChatSettingsChanged = "chat_client_setting_changed", e.ChatSettingsOpened = "chat_client_settings_open", e.ChatSuggestion = "chat-suggestions", e.ChatSuggestionComplete = "chat-completed-suggestion", e.ChommentCreated = "chomment_create", e.ChommentDeleted = "chomment_delete", e.ChommentUIAction = "chomment_ui_action", e.CommunityEdit = "community_client_edit", e.CommunityFollow = "community_client_follow", e.CommunityModeration = "community_client_channel_moderation", e.CommunityReport = "community_client_report", e.CommunityUnfollow = "community_client_unfollow", e.CompleteTransition = "benchmark_complete_transition", e.ComponentInitializing = "benchmark_component_initializing", e.ComponentInteractive = "benchmark_component_interactive", e.CrateNotificationAction = "crate_notification_action", e.EventFollowing = "oracle_user_notification_client", e.EventShare = "oracle_event_share", e.ExperimentBranch = "experiment_branch", e.FeaturedEventPresentation = "event_suggestions_shown", e.FeedCardImpression = "feed_client_card_impression", e.FeedCardEmbedImpression = "feed_client_card_embed_impression", e.FeedCardEmbedPlay = "feed_client_card_embed_play", e.FeedPost = "feed_client_post", e.FeedReaction = "feed_client_reaction", e.FetchStart = "benchmark_fetch_start", e.FFZ = "ffz_check", e.Follow = "follow", e.FrontPageCarouselClick = "frontpage_carousel_click", e.FrontPageCarouselDisplay = "carousel_display", e.FrontPageCarouselPromotionCardClick = "promotion_card_click", e.FrontPageCarouselPromotionCardView = "promotion_card_view", e.FrontPageCarouselNavButtonClick = "carousel_nav_button_click", e.FuelBuyButton = "fuel_buy_button", e.FuelGetGameClick = "fuel_get_game_click", e.GameFollow = "follow-game", e.GameUnfollow = "unfollow-game", e.ItemSectionClick = "item_section_click", e.ItemSectionLoad = "item_section_load", e.OnboardingEvent = "onboarding_web", e.NetworkRequest = "network_request", e.NotificationCenterInteraction = "notification_center_interaction", e.NotificationImpression = "notification_impression", e.NotificationInteraction = "notification_interaction", e.Pageview = "pageview", e.PassportHide = "auth_exit", e.PassportShow = "auth_show", e.PresenceClick = "friend_presence_click", e.RaidPromptJoin = "raid_prompt_join", e.RaidPromptLeave = "raid_prompt_leave", e.RaidPromptImpression = "raid_prompt_impression", e.ShareItem = "share_item", e.SideNavChannelClick = "sidenav_channel_click", e.SideNavDetails = "sidenav_details", e.SideNavLoadMore = "sidenav_load_more", e.SiteLayoutMod = "site_layout_mod", e.SiteToggle = "twilight_site_toggle", e.StreamSummarySpotlightImpression = "summary_spotlight_impression", e.StreamSummarySpotlightClick = "summary_spotlight_click", e.StoreMerchClick = "store_item_select", e.StoreMerchView = "store_item_view", e.Subscription = "subscribe_button", e.SubsLandingStreamerClick = "subs_landing_streamer_click", e.ThemeChange = "dark_mode_toggle", e.Unfollow = "unfollow", e.VideoChatSettingChanged = "video_chat_setting_changed", e.VideoShare = "video_share", e.WhisperAllThreadsMod = "chat_convo_mod_global", e.WhisperIgnoreUser = "chat_ignore_client", e.WhisperReceived = "whisper_received", e.WhisperSearchClick = "search_click", e.WhisperSent = "whisper", e.WhisperThreadCreate = "chat_convo_create", e.WhisperThreadMod = "chat_convo_mod"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";
    n.d(t, "d", function() {
        return i
    }), n.d(t, "b", function() {
        return a
    }), n.d(t, "a", function() {
        return r
    }), n.d(t, "e", function() {
        return o
    }), n.d(t, "c", function() {
        return s
    });
    var i;
    ! function(e) {
        e.BitsLandingPage = "bits_landing", e.BrowseCommunities = "browse_communities", e.BrowseCreative = "browse_creative", e.BrowseForYou = "browse_for_you", e.Channel = "channel", e.ChannelClips = "channel_clips", e.ChannelClipsManager = "my_clips_channel", e.ChannelEvents = "channel_events", e.ChannelVideos = "channel_vods", e.ChannelCollections = "channel_collections", e.Chat = "chat", e.ClipsGame = "clips_game", e.Dashboard = "dashboard", e.DashboardAchievements = "dashboard/achievements", e.DashboardExtensions = "dashboard/extensions", e.DashboardStreamSummary = "dashboard/stream-summary", e.Directory = "directory", e.DirectoryPopular = "directory.popular", e.EmailVerification = "email_verification", e.EventDetails = "event_details", e.FrontPage = "home", e.GameDetail = "game_detail", e.MyClipsManager = "my_clips", e.None = "", e.OnboardingCommunitySelection = "onboarding/community-selection", e.StoreMerch = "store-merch", e.VideoWatchPage = "vod", e.SubsLandingPage = "subs-landing", e.SettingsPage = "settings", e.SubsBroadcasterPage = "subs-broadcaster"
    }(i || (i = {}));
    var a;
    ! function(e) {
        e.Channels = "channels", e.Communities = "communities", e.Games = "games", e.Hosts = "hosts", e.Mixed = "mixed", e.Videos = "vods"
    }(a || (a = {}));
    var r;
    ! function(e) {
        e.ChatCard = "chat_card", e.Community = "community", e.EventLive = "event_suggestion_live", e.EventPast = "event_suggestion_past", e.EventUpcoming = "event_suggestion_upcoming", e.Following = "directory_following", e.FollowedChannels = "followed_channels", e.Game = "game", e.Games = "directory_games", e.Host = "host_channel", e.Live = "live_channel", e.LiveHost = "live_host", e.Logo = "twitch_logo", e.Popular = "popular_games", e.PopularVideos = "popular_videos", e.Presence = "friend_presence", e.RecentVideos = "recent_videos", e.LatestCollection = "latest_collection", e.RecommendedChannels = "recommended_channels", e.RecommendedVideos = "recommended_videos", e.SuggestedVideos = "suggested_videos", e.TextLink = "text_link", e.User = "user", e.Video = "video"
    }(r || (r = {}));
    var o;
    ! function(e) {
        e.Browse = "twitch_browse_directory", e.BrowseForYou = "twitch_browse_for_you", e.Channel = "twitch_channel", e.ChannelVideos = "channel_videos", e.Chat = "twitch_chat", e.ChatNotification = "chat_bar_notification", e.Community = "twitch_community_directory", e.Game = "twitch_game_directory", e.GameVideos = "twitch_video_game_directory", e.EventDetails = "event_details", e.Following = "following_directory", e.NavSearch = "header_search", e.NotificationCenter = "notification_center", e.NotificationToast = "notification_toast", e.SideNav = "twitch_socialcolumn", e.TopNav = "twitch_topnav", e.VideoEmbed = "vod_embed", e.VideoWatchPage = "vod", e.Whispers = "conversations"
    }(o || (o = {}));
    var s;
    ! function(e) {
        e.Channels = "channels", e.Communities = "communities", e.Games = "games", e.Hosts = "hosts", e.Overview = "overview", e.Videos = "videos"
    }(s || (s = {}))
}, function(e, t) {}, function(e, t, n) {
    "use strict";
    n.d(t, "c", function() {
        return i
    }), n.d(t, "b", function() {
        return a
    }), n.d(t, "a", function() {
        return r
    });
    var i;
    ! function(e) {
        e.Collection = "collection"
    }(i || (i = {}));
    var a;
    ! function(e) {
        e.Chomment = "chomment"
    }(a || (a = {}));
    var r;
    ! function(e) {
        e.Collection = "collection", e.Chomment = "chomment"
    }(r || (r = {}))
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Core_Services_Spade_CurrentUser"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasTurbo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "language"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 118
        }
    };
    n.loc.source = {
        body: "query Core_Services_Spade_CurrentUser {\n  currentUser {\n    id\n    login\n    hasTurbo\n    hasPrime\n    language\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, , , , , function(e, t, n) {
    "use strict";

    function i() {
        return {
            trackingSet: !1
        }
    }

    function a(e, t) {
        switch (void 0 === e && (e = i()), t.type) {
            case s.a:
                return r.__assign({}, e, {
                    trackingSet: !0
                });
            default:
                return e
        }
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var r = n(0),
        o = n(2),
        s = n(124);
    o.n.store.registerReducer("ads", a);
    n(90), n(17), n(52)
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Core_Actions_CurrentUser"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "roles"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "isStaff"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 120
        }
    };
    n.loc.source = {
        body: "query Core_Actions_CurrentUser {\n  currentUser {\n    displayName\n    id\n    login\n    roles {\n      isStaff\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t, n) {
    "use strict";

    function i() {
        var e = s.n.logger.withCategory("auth"),
            t = Object(u.b)();
        if ("/passport-callback" === window.location.pathname) return void a(t, e);
        if (!t && Object(d.b)()) return e.debug("No legacy CSRF token found."), void s.n.store.dispatch(Object(c.a)());
        var n = Object(u.d)(e);
        return n ? void(n.version === u.a ? (e.debug("Using existing user cookie."), s.n.store.dispatch(Object(c.d)({
            authToken: n.authToken,
            displayName: n.displayName,
            id: n.id,
            legacyCSRFToken: t,
            login: n.login,
            roles: n.roles
        }))) : (e.debug("User cookie version mismatch. Refreshing with auth token."), s.n.store.dispatch(Object(c.c)(n.authToken, t)))) : t ? (e.debug("Using legacy API token."), void s.n.store.dispatch(Object(c.b)(t))) : (e.debug("No user data found."), void s.n.store.dispatch(Object(c.a)()))
    }

    function a(e, t) {
        t.debug("Handling passport callback.");
        var n = r(window.location.hash, t);
        if (!n) return t.debug("Got invalid data from passport, removing existing auth data and reloading."), Object(u.e)(), s.n.store.dispatch(Object(c.a)()), void s.n.history.replace("/");
        var i = document.createElement("a");
        if (i.href = n.next, i.hostname !== window.location.hostname) return void(s.a.buildType !== l.a.Production || "twitch.tv" === i.hostname || i.hostname.endsWith(".twitch.tv") ? window.location.assign(i.protocol + "//" + i.host + window.location.pathname + window.location.search + window.location.hash) : (t.error(new Error("Attempted to redirect away from site."), "Attempted to redirect away from site."), s.n.store.dispatch(Object(c.a)()), s.n.history.replace("/")));
        var a = Object(u.c)(t);
        if (!a) return t.debug("No passport state cookie found, aborting."), s.n.store.dispatch(Object(c.a)()), void s.n.history.replace("/");
        Object(u.f)();
        try {
            if (a.nonce !== n.nonce) return t.error(new Error("Login nonce mismatch."), "Login nonce mismatch."), s.n.store.dispatch(Object(c.a)()), void s.n.history.replace("/")
        } catch (e) {
            return t.error(e, "Failed to parse session storage state."), s.n.store.dispatch(Object(c.a)()), void s.n.history.replace("/")
        }
        s.n.store.dispatch(Object(c.c)(n.token, e)), s.n.history.replace(i.pathname + i.search)
    }

    function r(e, t) {
        var n = o.parse(e);
        if (n) try {
            var i = JSON.parse(n.state);
            return {
                next: i.next,
                nonce: i.nonce,
                token: n.access_token
            }
        } catch (e) {
            t.error(e, "Failed to parse incoming state.")
        }
    }
    t.a = i;
    var o = n(20),
        s = (n.n(o), n(2)),
        l = n(16),
        c = n(32),
        u = n(45),
        d = n(44)
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            authToken: e.session.user && e.session.user.authToken,
            username: e.session.user && e.session.user.login
        }
    }
    var a = n(6),
        r = n(0),
        o = n(1),
        s = n(2),
        l = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                return r.__awaiter(this, void 0, void 0, function() {
                    var e;
                    return r.__generator(this, function(t) {
                        switch (t.label) {
                            case 0:
                                this.props.username && this.props.authToken && s.n.tmi.setIdentity(this.props.username, this.props.authToken), t.label = 1;
                            case 1:
                                return t.trys.push([1, 3, , 4]), [4, s.n.tmi.connect()];
                            case 2:
                                return t.sent(), [3, 4];
                            case 3:
                                return e = t.sent(), s.i.warn("Failed to connect to TMI from chat manager. It will be retried as needed.", e), [3, 4];
                            case 4:
                                return [2]
                        }
                    })
                })
            }, t.prototype.componentWillUnmount = function() {
                s.n.tmi.disconnect()
            }, t.prototype.componentWillReceiveProps = function(e) {
                e.username && e.authToken && (e.username !== this.props.username || e.authToken !== this.props.authToken) && s.n.tmi.setIdentity(e.username, e.authToken)
            }, t.prototype.render = function() {
                return null
            }, t
        }(o.Component);
    n.d(t, "a", function() {
        return c
    });
    var c = Object(a.a)(i)(l)
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(2),
        o = n(7),
        s = n(3),
        l = n(243),
        c = (n(244), "euCookieDismiss"),
        u = "eu-cookie-notification__link",
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.content = Object(r.d)("This site uses cookies. By continuing to browse the site, you are agreeing to our use of cookies. Review our {CookiePolicyLink} for more details.", {
                    CookiePolicyLink: a.createElement("a", {
                        "data-a-target": u,
                        className: "eu-cookie-alert__link",
                        href: "https://www.twitch.tv/p/cookie-policy",
                        target: "_blank"
                    }, "Cookie Policy")
                }, "EUCookieAlert"), t.dismiss = function() {
                    r.k.set(c, !0), t.props.remove()
                }, t
            }
            return i.__extends(t, e), t.prototype.componentWillMount = function() {
                this.checkForDismissedKey() && this.dismiss()
            }, t.prototype.componentWillReceiveProps = function(e) {
                !e.data.loading && e.data.requestInfo && !1 === e.data.requestInfo.fromEU && this.dismiss()
            }, t.prototype.render = function() {
                return this.props.data.requestInfo && this.props.data.requestInfo.fromEU || this.props.data.error ? a.createElement(s._28, {
                    onClose: this.dismiss
                }, a.createElement(s.U, {
                    className: "eu-cookie-alert__body",
                    display: s.H.Flex,
                    alignItems: s.c.Center
                }, a.createElement(s._17, {
                    textAlign: s._22.Center,
                    background: s.m.Base,
                    margin: {
                        x: "auto"
                    }
                }, a.createElement(s._21, {
                    type: s._26.Span,
                    color: s.F.Base,
                    fontSize: s.L.Size5
                }, this.content)))) : null
            }, t.prototype.checkForDismissedKey = function() {
                return r.k.get(c, !1)
            }, t = i.__decorate([Object(o.a)(l)], t)
        }(a.Component),
        p = d,
        m = (n(245), [p]),
        h = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.state = {
                    toastsToShow: m.map(function(e, t) {
                        return {
                            Component: e,
                            props: {
                                remove: function() {
                                    return n.removeToastAtIndex(t)
                                }
                            }
                        }
                    })
                }, n
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this.state.toastsToShow.map(function(e, t) {
                    var n = e.Component,
                        r = e.props;
                    return a.createElement(s.U, {
                        key: "" + n.name + t,
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(n, i.__assign({}, r)))
                });
                return 0 === e.length ? null : a.createElement(s.U, {
                    className: "toast-manager__container",
                    position: s._2.Fixed,
                    flexDirection: s.J.Column,
                    alignItems: s.c.Center,
                    justifyContent: s.T.Center
                }, e)
            }, t.prototype.removeToastAtIndex = function(e) {
                var t = this.state.toastsToShow.slice();
                t.splice(e, 1), this.setState({
                    toastsToShow: t
                })
            }, t
        }(a.Component);
    n.d(t, "a", function() {
        return h
    })
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "FooterNotificationPopup_EUCookieAlert"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "requestInfo"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "fromEU"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 79
        }
    };
    n.loc.source = {
        body: "query FooterNotificationPopup_EUCookieAlert {\n  requestInfo {\n    fromEU\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, , , , function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(20),
        r = n(1),
        o = n(2),
        s = n(7),
        l = n(16),
        c = n(12),
        u = n(5),
        d = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.logger = o.i.withCategory("Tracking/AmazonAds");
                var i = o.b.get("amazon_ads_url", ""),
                    a = o.b.get("amazon_ads_countries", ["US"]),
                    r = t.countryCode,
                    s = r && a.includes(r);
                return s && i ? (n.imageSrc = i, n.logger.debug("Created", {
                    imageSrc: n.imageSrc,
                    userCountry: r,
                    isSupportedCountry: s,
                    supportedCountries: a
                })) : n.logger.debug("Skipping", {
                    isSupportedCountry: s,
                    userCountry: r,
                    supportedCountries: a
                }), n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.imageSrc ? r.createElement("img", {
                    src: this.imageSrc,
                    style: {
                        display: "none"
                    }
                }) : null
            }, t = i.__decorate([Object(u.c)("AmazonAds")], t)
        }(r.Component),
        p = d,
        m = n(10),
        h = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.renderBinding = function(e) {
                    n.containerRef = e
                }, n.onScriptLoaded = function() {
                    n.logger.debug("Script loaded"), n.sendBeacon()
                }, n.sendBeacon = function() {
                    if (!window.COMSCORE || !window.COMSCORE.beacon) return void n.logger.debug("Could not send beacon; COMSCORE not available.", {
                        data: n.data
                    });
                    n.logger.debug("Sent", {
                        data: n.data
                    }), window.COMSCORE.beacon(n.data)
                }, n.onHistoryChange = function() {
                    window.COMSCORE && window.COMSCORE.beacon && n.sendBeacon()
                }, n.scriptSrc = o.b.get("comscore_url", ""), n.logger = o.i.withCategory("Tracking/Comscore"), n.data = {
                    c1: o.b.get("comscore_config_c1", 0),
                    c2: o.b.get("comscore_config_c2", 0),
                    c3: o.b.get("comscore_config_c3", 0),
                    c5: o.b.get("comscore_config_c5", "")
                }, n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                if (this.scriptSrc) {
                    if (document.querySelector('[data-name="comscore"]')) return;
                    this.logger.debug("Loading", {
                        url: this.scriptSrc
                    });
                    var e = document.createElement("script");
                    e.async = !0, e.src = this.scriptSrc, e.dataset && (e.dataset.name = "comscore"), e.onload = this.onScriptLoaded, this.containerRef.appendChild(e)
                } else this.logger.warn("Skipping");
                this.props.history.listen(this.onHistoryChange), this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.scriptSrc ? r.createElement("div", {
                    ref: this.renderBinding
                }) : null
            }, t = i.__decorate([Object(u.c)("Comscore")], t)
        }(r.Component),
        g = Object(m.f)(h),
        f = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.renderBinding = function(e) {
                    n.containerRef = e
                }, n.logger = o.i.withCategory("Tracking/GoogleAnalytics"), n.scriptSrc = o.b.get("google_analytics_url", ""), n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                if (this.scriptSrc) {
                    if (document.querySelector('[data-name="google-analytics"]')) return;
                    var e = document.createElement("script");
                    e.async = !0, e.src = this.scriptSrc, e.dataset && (e.dataset.name = "google-analytics"), this.containerRef.appendChild(e), this.logger.debug("Created", {
                        url: this.scriptSrc
                    })
                } else this.logger.debug("Skipped");
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.scriptSrc ? r.createElement("div", {
                    ref: this.renderBinding
                }) : null
            }, t = i.__decorate([Object(u.c)("GoogleAnalytics")], t)
        }(r.Component),
        v = f,
        b = n(59),
        y = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.getPageCode = function(e) {
                    switch (e) {
                        case "directory-game":
                            return "1148gameVIDE";
                        case "directory-creative":
                            return "1148directory_misc";
                        case "directory":
                            return "1148directory";
                        case "search":
                            return "4201search";
                        case "home":
                            return "1101homepage";
                        case "pages":
                            return "1148text";
                        case "channel":
                        case "video":
                            return "1148publVIDE";
                        case "video_list":
                            return "1148publcont";
                        default:
                            return null
                    }
                }, n.onScriptLoad = function() {
                    n.trackPageView()
                }, n.trackPageView = function() {
                    var e = o.m.getLastPageview();
                    if (!window.iom || !window.iom.c || !o.m.getLastPageview()) return void n.logger.debug("Unable to track pageview. IOM is missing.");
                    if (!e || !e.location) return void n.logger.debug("Pageview data unavailable or incomplete, skipping pageview.", e);
                    var t = n.getPageCode(e.location);
                    if (!t) return void n.logger.debug("Skipping pageview. No page code.", {
                        pageName: e.location
                    });
                    n.isMultiLingual && (t += "_multilanguage");
                    var i = "home" === e.location ? "ke" : "in",
                        a = {
                            st: "twitchtv",
                            cp: t,
                            mg: "yes",
                            sv: i
                        };
                    n.logger.debug("Tracking pageview", {
                        data: a
                    }), window.iom.c(a, 1)
                }, n.renderBinding = function(e) {
                    n.containerRef = e
                }, n.logger = o.i.withCategory("Tracking/IVW"), n.languageCode = o.n.intl.getLanguageCode() || "en";
                var i = o.b.get("ivw_url", ""),
                    a = o.b.get("ivw_countries", [""]),
                    r = o.b.get("ivw_languages", ["de"]),
                    s = t.countryCode,
                    l = s && a.includes(t.countryCode),
                    c = n.languageCode && r.includes(n.languageCode);
                return i && (l || c) ? (n.scriptSrc = i, n.isMultiLingual = !c, n.logger.debug("Created", {
                    url: i,
                    supportedCountries: a,
                    supportedLanguages: r,
                    languageCode: n.languageCode,
                    userCountry: s
                })) : n.logger.debug("Skipping", {
                    url: i,
                    supportedCountries: a,
                    supportedLanguages: r,
                    languageCode: n.languageCode,
                    userCountry: s
                }), n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                if (this.scriptSrc) {
                    if (document.querySelector('[data-name="ivw"]')) return;
                    var e = document.createElement("script");
                    e.async = !0, e.src = this.scriptSrc, e.dataset && (e.dataset.name = "ivw"), this.containerRef.appendChild(e), e.onload = this.onScriptLoad
                }
                o.m.eventEmitter.addListener(b.SpadeEventType.Pageview, this.trackPageView), this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.scriptSrc ? r.createElement("div", {
                    ref: this.renderBinding
                }) : null
            }, t = i.__decorate([Object(u.c)("IVW")], t)
        }(r.Component),
        k = Object(m.f)(y),
        S = n(36),
        _ = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.renderBinding = function(e) {
                    n.containerRef = e
                }, n.onScriptLoad = function() {
                    n.logger.debug("Script loaded"), n.checkForKrux(0)
                }, n.checkForKrux = function(e) {
                    if (void 0 === window.Krux) return e > 50 && n.logger.warn("Failed to load", {
                        attempt: e
                    }), void setTimeout(function() {
                        return n.checkForKrux(++e)
                    }, 100);
                    n.logger.debug("Krux loaded", {
                        attempt: e
                    });
                    var t = n.retrieve("segs");
                    window.Krux.user = n.retrieve("user"), window.Krux.segments = t && t.split(",") || [], n.trackPageload()
                }, n.trackPageload = function() {
                    n.logger.debug("Tracking pageload"), window.Krux("page:load", n.onTrackError, {
                        pageView: !0
                    })
                }, n.onTrackError = function(e) {
                    e ? n.logger.warn("Failed to track pageview.", e) : n.logger.debug("Tracked pageview")
                }, n.onHistoryChange = function() {
                    window.Krux ? n.trackPageload() : o.i.debug("Failed to track pageview; Krux not available.")
                }, n.retrieve = function(e) {
                    var t = "kx" + e;
                    if (window.localStorage) return window.localStorage[t] || "";
                    if (navigator.cookieEnabled) {
                        var n = S.get(t);
                        return n && decodeURI(n[1]) || ""
                    }
                    return ""
                }, n.logger = o.i.withCategory("Tracking/Krux");
                var i = t.countryCode,
                    a = o.b.get("krux_countries", [""]);
                if (i && a.includes(i)) {
                    var r = /\bkxsrc=([^&]+)/,
                        s = /^https?:\/\/([a-z0-9_\-\.]+\.)?krxd\.net(:\d{1,5})?\//i,
                        l = location.href.match(r),
                        c = l && decodeURIComponent(l[1]),
                        u = o.b.get("krux_url", "");
                    c && (s.test(c) ? u = c : "disable" === c && (u = "")), n.scriptSrc = u, n.logger.debug("Created", {
                        userCountry: i,
                        supportedCountries: a,
                        src: n.scriptSrc
                    })
                } else n.logger.debug("Skipping", {
                    userCountry: i,
                    supportedCountries: a
                });
                return n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                if (this.scriptSrc) {
                    if (document.querySelector('[data-name="krux"]')) return;
                    var e = document.createElement("script");
                    e.async = !0, e.src = this.scriptSrc, e.dataset && (e.dataset.name = "krux"), e.onload = this.onScriptLoad, this.containerRef.appendChild(e)
                }
                this.props.history.listen(this.onHistoryChange), this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.scriptSrc ? r.createElement("div", {
                    ref: this.renderBinding
                }) : null
            }, t = i.__decorate([Object(u.c)("Krux")], t)
        }(r.Component),
        w = Object(m.f)(_),
        E = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.renderBinding = function(e) {
                    n.containerRef = e
                }, n.logger = o.i.withCategory("Tracking/Quantcast"), n.scriptSrc = o.b.get("quantcast_url", ""), n.qacct = o.b.get("quantcast_account", ""), n.labels = o.b.get("quantcast_labels", ""), n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                if (this.scriptSrc && this.qacct && this.labels) {
                    if (document.querySelector('[data-name="quantcast"]')) return;
                    var e = {
                        qacct: this.qacct,
                        labels: this.labels
                    };
                    window._qoptions = e;
                    var t = document.createElement("script");
                    t.async = !0, t.src = this.scriptSrc, t.dataset && (t.dataset.name = "quantcast"), this.containerRef.appendChild(t), this.logger.debug("Created", {
                        url: this.scriptSrc,
                        options: e
                    })
                } else this.logger.debug("Skipped");
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.scriptSrc ? r.createElement("div", {
                    ref: this.renderBinding
                }) : null
            }, t = i.__decorate([Object(u.c)("Quantcast")], t)
        }(r.Component),
        C = E,
        N = n(250);
    n.d(t, "a", function() {
        return D
    });
    var T = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.logger = o.i.withCategory("Tracking/Manager"), n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.reportInteractive(), o.m.track(c.SpadeEventType.BTTV, {
                    is_bttv: !!window.BetterTTV
                }), o.m.track(c.SpadeEventType.FFZ, {
                    is_ffz: !!window.FrankerFaceZ
                })
            }, t.prototype.componentDidUpdate = function() {
                this.reportInteractive()
            }, t.prototype.render = function() {
                if (!this.props.data || this.props.data.loading || this.props.data.error) return null;
                var e = this.props.data.requestInfo.countryCode;
                if (!e && o.a.buildType !== l.a.Production) {
                    var t = a.parse(this.props.history.location.search || "");
                    t.country ? (e = t.country, this.logger.debug("Using supplied country code", {
                        countryCode: e
                    })) : (e = "US", this.logger.debug("Using default country code", {
                        countryCode: e
                    }))
                }
                return r.createElement("div", null, r.createElement(p, {
                    countryCode: e
                }), r.createElement(C, null), r.createElement(v, null), r.createElement(w, {
                    countryCode: e
                }), r.createElement(g, null), r.createElement(k, {
                    countryCode: e
                }))
            }, t.prototype.reportInteractive = function() {
                !this.props.data || this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
            }, t = i.__decorate([Object(s.a)(N), Object(u.c)("TrackingManager")], t)
        }(r.Component),
        D = T
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "TrackingManager_RequestInfo"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "requestInfo"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "countryCode"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "ipAddress"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 88
        }
    };
    n.loc.source = {
        body: "query TrackingManager_RequestInfo {\n  requestInfo {\n    countryCode\n    ipAddress\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, , , , , , , , , function(e, t, n) {
    "use strict";
    n.d(t, "m", function() {
        return r
    }), n.d(t, "a", function() {
        return o
    }), n.d(t, "i", function() {
        return s
    }), n.d(t, "k", function() {
        return l
    }), n.d(t, "j", function() {
        return c
    }), n.d(t, "l", function() {
        return u
    }), n.d(t, "e", function() {
        return d
    }), n.d(t, "f", function() {
        return p
    }), n.d(t, "b", function() {
        return m
    }), n.d(t, "c", function() {
        return h
    }), n.d(t, "d", function() {
        return g
    }), n.d(t, "h", function() {
        return f
    }), n.d(t, "g", function() {
        return v
    });
    var i, a = n(270),
        r = {
            ERROR_DISPLAY_TIMEOUT: 5e3,
            GET_BALANCE_RATE_LIMIT: 5e3,
            UNDO_PROMPT_DURATION: 5e3
        },
        o = "https://d3aqoihi2n8ty8.cloudfront.net/cheer",
        s = 8e5,
        l = 1e4,
        c = 500,
        u = 1e3,
        d = "cheer",
        p = a.a.Purple,
        m = "FIRST_PARTY",
        h = "THIRD_PARTY",
        g = (i = {}, i[a.a.Gray] = "#979797", i[a.a.Purple] = "#9c3ee8", i[a.a.Green] = "#1db2a5", i[a.a.Blue] = "#0099fe", i[a.a.Red] = "#f43021", i),
        f = "hgc-2017",
        v = "https://d3aqoihi2n8ty8.cloudfront.net/hgc2017"
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e[e.Text = 0] = "Text", e[e.Mention = 1] = "Mention", e[e.Link = 2] = "Link", e[e.Emote = 3] = "Emote", e[e.ClipLink = 4] = "ClipLink", e[e.VideoLink = 5] = "VideoLink"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(20),
        r = n(1),
        o = n(2),
        s = n(16),
        l = "legacy_routes_enabled",
        c = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.isEnabled = !1, n.onHistoryChange = function(e, t) {
                    return n.isEnabled ? "REPLACE" === t ? void n.logger.debug("Skipping legacy route processing, due to history replace.") : e && e.pathname ? (n.logger.debug("Location changed", {
                        path: e.pathname
                    }), void n.legacyRoutes.forEach(function(t) {
                        try {
                            if (e.pathname.match(t)) {
                                n.logger.debug("Found legacy route. Reloading...");
                                var i = "" !== e.search ? a.parse(e.search) : {};
                                i["from-redirect"] = "true";
                                var r = a.stringify(i),
                                    l = o.a.buildType === s.a.Dev ? window.location.host : window.location.hostname,
                                    c = window.location.protocol + "//" + l + e.pathname + "?" + r;
                                return n.logger.debug("Redirecting to legacy route", {
                                    newUrl: c
                                }), void window.location.replace(c)
                            }
                        } catch (e) {
                            o.i.withCategory("legacy").error(e, "Unable to determine legacy reload match", {
                                regex: t
                            })
                        }
                    })) : void n.logger.debug("Unable to process history change. Path is null or empty.") : void n.logger.debug("Legacy routing not enabled.")
                }, n.processRedirectParam = function(e) {
                    if (e && e.pathname && e.search) {
                        var t = "" !== e.search ? a.parse(e.search) : {};
                        if (t["from-redirect"]) {
                            delete t["from-redirect"];
                            var i = a.stringify(t),
                                r = "";
                            i.length > 0 && (r = "?" + i), n.props.history.replace({
                                pathname: e.pathname,
                                hash: e.hash,
                                search: r
                            })
                        }
                    }
                }, n.isEnabled = o.b.get(l, !1), n.logger = o.i.withCategory("legacy-routes"), n.legacyRoutes = n.buildRoutes(), n.props.history.listen(n.onHistoryChange), n
            }
            return i.__extends(t, e), t.prototype.render = function() {
                return null
            }, t.prototype.componentDidMount = function() {
                this.processRedirectParam(this.props.history.location)
            }, t.prototype.buildRoutes = function() {
                if (!this.isEnabled) return [];
                this.logger.debug("Building legacy routes...");
                var e = o.b.get("legacy_routes", []),
                    t = [];
                if (!e || 0 === e.length) return this.logger.debug("No legacy routes found in settings."), t;
                for (var n = 0, i = e; n < i.length; n++) {
                    var a = i[n];
                    try {
                        var r = new RegExp(a, "i");
                        t.push(r)
                    } catch (e) {
                        this.logger.debug("Failed to parse route!", {
                            val: a,
                            err: e
                        })
                    }
                }
                return this.logger.debug("Done building legacy routes!", {
                    count: t.length
                }), t
            }, t
        }(r.Component),
        u = c;
    n.d(t, "a", function() {
        return l
    }), n.d(t, !1, function() {
        return "legacy_routes"
    }), n.d(t, "b", function() {
        return u
    })
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e.Archive = "ARCHIVE", e.Highlight = "HIGHLIGHT", e.Upload = "UPLOAD", e.WatchParty = "WATCH_PARTY", e.PastPremiere = "PAST_PREMIERE", e.PremiereUpload = "PREMIERE_UPLOAD"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";
    n.d(t, "c", function() {
        return i
    }), n.d(t, "b", function() {
        return a
    }), n.d(t, "a", function() {
        return r
    });
    var i;
    ! function(e) {
        e.Spam = "Spam", e.Harassment = "Harassment"
    }(i || (i = {}));
    var a;
    ! function(e) {
        e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
    }(a || (a = {}));
    var r;
    ! function(e) {
        e.Whisper = "WHISPER", e.Chat = "CHAT"
    }(r || (r = {}))
}, function(e, t, n) {
    "use strict";

    function i(e) {
        var t, n, i, r, c, u = e.append,
            d = void 0 !== u && u,
            p = e.searchResults,
            m = e.currentGameResults,
            h = e.currentUserResults,
            g = e.currentCommunityResults,
            f = e.currentVideoResults,
            v = e.currentLiveResults;
        if (p.games && (t = {
                totalHits: p.games.totalHits,
                results: d && m ? m.results : []
            }, d && p.exhaustedHits && m && !p.games.totalHits && (t.totalHits = m.totalHits), t.results = t.results.concat(p.games.hits.map(function(e, t) {
                var n, i = o.n.intl.getLanguageCode();
                return n = i && void 0 !== e.localizations && i in e.localizations ? e.localizations[i] : e.name, {
                    title: n,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: Object(s.d)(e.name),
                        state: {
                            content: l.PageviewContent.Game,
                            content_index: t,
                            medium: l.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    popularity: e.popularity
                }
            }))), p.videos) {
            var b = d && f ? f.results : [],
                y = p.videos.totalHits;
            d && p.exhaustedHits && f && !p.videos.totalHits && (y = f.totalHits), r = a(b, p.videos, y)
        }
        return p.users && (n = {
            totalHits: d && h ? h.totalHits : p.users.totalHits,
            results: d && h ? h.results : []
        }, d && p.exhaustedHits && h && !p.users.totalHits && (n.totalHits = h.totalHits), n.results = n.results.concat(p.users.hits.map(function(e, t) {
            return {
                login: e.login,
                name: e.name,
                thumbnail: e.profile_image || o.a.defaultAvatarURL,
                thumbnailAltText: e.name,
                linkTo: {
                    pathname: "/" + e.login,
                    state: {
                        content: l.PageviewContent.User,
                        content_index: t,
                        medium: l.PageviewMedium.NavSearch
                    }
                },
                id: e.objectID,
                followers: e.followers
            }
        }))), p.channels && (c = {
            totalHits: d && v ? v.totalHits : p.channels.totalHits,
            results: d && v ? v.results : []
        }, c.results = c.results.concat(p.channels.hits.map(function(e, t) {
            return {
                viewerCount: e.channel_count,
                login: e.login,
                name: e.name,
                thumbnailAltText: e.status,
                linkTo: {
                    pathname: "/" + e.login,
                    state: {
                        content: l.PageviewContent.Live,
                        content_index: t,
                        medium: l.PageviewMedium.NavSearch
                    }
                },
                id: e.objectID,
                status: e.status
            }
        }))), p.communities && (i = {
            totalHits: p.communities.totalHits,
            results: d && g ? g.results : []
        }, d && p.exhaustedHits && g && !p.communities.totalHits && (i.totalHits = g.totalHits), i.results = i.results.concat(p.communities.hits.map(function(e, t) {
            return {
                name: e.name,
                thumbnail: e.avatar_image_url,
                thumbnailAltText: e.name,
                linkTo: {
                    pathname: "/communities/" + e.name,
                    state: {
                        content: l.PageviewContent.Community,
                        content_index: t,
                        medium: l.PageviewMedium.NavSearch
                    }
                },
                viewerCount: e.viewers,
                id: e.objectID
            }
        }))), {
            currentGameResults: t,
            currentUserResults: n,
            currentLiveResults: c,
            currentCommunityResults: i,
            currentVideoResults: r,
            exhaustedHits: p.exhaustedHits
        }
    }

    function a(e, t, n) {
        return {
            results: e.concat(t.hits.map(r)),
            totalHits: t.totalHits || n
        }
    }

    function r(e, t) {
        return {
            title: e.title,
            thumbnail: e.thumbnail,
            thumbnailAltText: e.title,
            linkTo: {
                pathname: "/videos/" + e.objectID,
                state: {
                    content: l.PageviewContent.Video,
                    content_index: t,
                    medium: l.PageviewMedium.NavSearch
                }
            },
            login: e.broadcaster_login,
            name: e.broadcaster_name,
            createdAt: e.created_at,
            length: e.length,
            id: e.objectID
        }
    }
    t.b = i, t.a = r;
    var o = n(2),
        s = n(372),
        l = n(12)
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        var n = [];
        if (!e || !t) return n;
        for (var i = /\S+/g, a = i.exec(e); a;) {
            var o = a[0],
                s = t[o];
            if (s && "function" != typeof s) {
                var l = Object(r.d)(e.slice(0, a.index)),
                    c = l ? l.length : a.index;
                n[c] = {
                    startIndex: c,
                    endIndex: c + o.length,
                    data: {
                        alt: o,
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(r.e)(s.id, 1),
                                "2x": Object(r.e)(s.id, 2),
                                "4x": Object(r.e)(s.id, 4)
                            }
                        }
                    }
                }
            }
            a = i.exec(e)
        }
        return n
    }

    function a(e) {
        for (var t = {}, n = 0, i = e; n < i.length; n++)
            for (var a = i[n], r = 0, l = a.emotes; r < l.length; r++)
                for (var c = l[r], u = o[c.token] || [c.token], d = 0, p = u; d < p.length; d++) {
                    var m = p[d];
                    t[m] && a.id === s || (t[m] = {
                        id: c.id,
                        token: m
                    })
                }
        return t
    }
    t.b = i, t.a = a;
    var r = n(129),
        o = {
            "\\:\\&gt\\;": [":>"],
            "\\&gt\\;\\(": [">("],
            "\\&lt\\;\\]": ["<]"],
            "\\&lt\\;3": ["<3"],
            ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
            "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
            "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
            "\\;-?\\)": [";-)", ";)"],
            "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
            "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
            "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
            "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
            "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
            "\\:-?\\(": [":-(", ":("],
            "\\:-?\\)": [":-)", ":)"],
            "\\:-?D": [":-D", ":D"],
            "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
            "B-?\\)": ["B-)", "B)"],
            "R-?\\)": ["R-)", "R)"]
        },
        s = "0"
}, function(e, t, n) {
    "use strict";
    n.d(t, "b", function() {
        return i
    }), n.d(t, "a", function() {
        return a
    });
    var i = {
            TriHard: {
                count: 196568036
            },
            Kappa: {
                count: 192158118
            },
            "4Head": {
                count: 155758710
            },
            PogChamp: {
                count: 151485090
            },
            cmonBruh: {
                count: 146352878
            },
            BibleThump: {
                count: 56472964
            },
            WutFace: {
                count: 45069031
            },
            Kreygasm: {
                count: 41387580
            },
            DansGame: {
                count: 38097659
            },
            hi5F: {
                count: 34986404
            },
            SMOrc: {
                count: 34734484
            },
            KappaPride: {
                count: 34262839
            },
            VoHiYo: {
                count: 27886434
            },
            SwiftRage: {
                count: 24561900
            },
            ResidentSleeper: {
                count: 24438298
            },
            EleGiggle: {
                count: 19891526
            },
            FailFish: {
                count: 19118343
            },
            NotLikeThis: {
                count: 18802905
            },
            Keepo: {
                count: 18351415
            },
            BabyRage: {
                count: 18220906
            },
            MingLee: {
                count: 18026207
            },
            pbfSSH: {
                count: 16911241
            },
            forsenE: {
                count: 14960299
            },
            HeyGuys: {
                count: 14851569
            },
            ANELE: {
                count: 14648986
            },
            PJSalt: {
                count: 14438861
            }
        },
        a = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"]
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(2),
        o = n(108),
        s = n(3),
        l = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.onGiftSelect = function() {
                    t.props.onGiftSelect && t.props.onGiftSelect()
                }, t.onSelectTierTab = function(e) {
                    t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                }, t.reportSubMenuAction = function(e) {
                    t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                return a.createElement(s.U, null, a.createElement(s.U, {
                    display: s.H.Flex,
                    justifyContent: s.T.Between,
                    alignItems: s.c.Center,
                    fullWidth: !0
                }, a.createElement(s._21, {
                    bold: !0,
                    type: s._26.H5
                }, Object(r.d)("Choose A Gift Subscription", "GiftTierTabs")), a.createElement(s.u, {
                    type: s.z.Text,
                    icon: s._9.AngleLeft,
                    onClick: this.props.onBack,
                    "data-test-selector": "sub-gift-select-back-button"
                }, a.createElement(s.U, {
                    alignItems: s.c.Center,
                    display: s.H.InlineFlex
                }, a.createElement(s._21, null, Object(r.d)("Back", "GiftTierTabs"))))), a.createElement(o.a, {
                    isGift: !0,
                    giftRecipient: this.props.giftRecipient,
                    onGiftSelect: this.onGiftSelect,
                    channelDisplayName: this.props.channelDisplayName,
                    subscriptionProducts: this.props.subscriptionProducts,
                    onSelectTierTab: this.onSelectTierTab,
                    reportSubMenuAction: this.reportSubMenuAction,
                    userHasPrime: !1,
                    canPrimeSubscribe: !1,
                    isSubscribed: !1
                }))
            }, t
        }(a.Component),
        c = l;
    n.d(t, !1, function() {
        return "sub-gift-select-back-button"
    }), n.d(t, "a", function() {
        return c
    })
}, function(e, t, n) {
    "use strict";
    n.d(t, "c", function() {
        return i
    }), n.d(t, "a", function() {
        return a
    }), n.d(t, "b", function() {
        return r
    });
    var i;
    ! function(e) {
        e[e.AllVideos = 0] = "AllVideos", e[e.PastBroadcasts = 1] = "PastBroadcasts", e[e.Uploads = 2] = "Uploads", e[e.Highlights = 3] = "Highlights"
    }(i || (i = {}));
    var a;
    ! function(e) {
        e[e.AnyLength = 0] = "AnyLength", e[e.Short = 1] = "Short", e[e.Long = 2] = "Long"
    }(a || (a = {}));
    var r;
    ! function(e) {
        e[e.Popular = 0] = "Popular", e[e.Newest = 1] = "Newest"
    }(r || (r = {}))
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i;
    ! function(e) {
        e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red"
    }(i || (i = {}))
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            authToken: Object(d.a)(e)
        }
    }

    function a(e) {
        return Object(l.bindActionCreators)({
            updateEmoteSets: p.H
        }, e)
    }
    var r = n(0),
        o = n(1),
        s = n(6),
        l = n(9),
        c = n(7),
        u = n(86),
        d = n(17),
        p = n(376),
        m = n(87),
        h = n(2),
        g = ["4.99", "9.99", "24.99"],
        f = function(e, t) {
            var n = [];
            return t.forEach(function(t, i) {
                t.emotes.length && t.emoteSetID && !e.has(parseInt(t.emoteSetID, 10)) && n.push(r.__assign({}, t, {
                    emotes: Object(m.b)(t.emotes),
                    level: i,
                    price: g[i]
                }))
            }), n
        },
        v = function(e, t) {
            for (var n = [{
                    id: "0",
                    emotes: []
                }], i = 0, a = t; i < a.length; i++) {
                var r = a[i];
                r.emoteSetID && e.has(parseInt(r.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(m.b)(r.emotes)))
            }
            return n[0].emotes.length ? n : []
        },
        b = function(e) {
            for (var t = [], n = 0; n < e.length; n++) {
                var i = e[n];
                0 === n && i.emotes.length > 1 ? t[n] = Object(h.d)("Unlock {numEmotes, number} Sub Emotes", {
                    numEmotes: i.emotes.length
                }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(h.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes.length > 1 ? t[n] = Object(h.d)("{numEmotes, number} Extra {price} Sub Emotes", {
                    numEmotes: i.emotes.length,
                    price: g[n]
                }, "assembleSubscribeTexts") : i.emotes.length && (t[n] = Object(h.d)("1 Extra ${price, number} Sub Emote", {
                    price: g[n]
                }, "assembleSubscribeTexts"))
            }
            return t
        },
        y = n(5),
        k = n(50),
        S = n(4),
        _ = n(28),
        w = n(40),
        E = n(272),
        C = n(68),
        N = n(3),
        T = (n(456), function(e) {
            var t = {
                    "emote-picker__tab": !0,
                    "pd-x-1": !0
                },
                n = null,
                i = null;
            if (e.channelTabVisible) {
                var a = S(r.__assign({}, t, {
                    "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                    "emote-picker__tab--disabled": !e.channelTabEnabled
                }));
                n = o.createElement("div", {
                    key: "ChannelTabLink",
                    id: "emote-picker__channel",
                    className: a,
                    onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                    "data-a-target": "emote-channel-tab"
                }, o.createElement("span", null, Object(C.d)("Channel", "EmotePicker")))
            }
            if (e.allTabVisible) {
                var s = S(r.__assign({}, t, {
                    "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                }));
                i = o.createElement("div", {
                    key: "allTabLink",
                    id: "emote-picker__all",
                    className: s,
                    onClick: e.selectAllTab,
                    "data-a-target": "emote-all-tab"
                }, o.createElement("span", null, Object(C.d)("All", "EmotePicker")))
            }
            return o.createElement(N._17, {
                background: N.m.Base,
                borderTop: !0,
                className: "emote-picker__tabs-container"
            }, n, i)
        }),
        D = n(273),
        I = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.render = function() {
                var e = [];
                if (this.props.subscribeTexts)
                    for (var t = 0; t <= this.props.plan.level; t++) {
                        var n = this.props.subscribeTexts[t];
                        n && (t < this.props.plan.level ? (e.push(o.createElement("span", {
                            key: "upsell-predicate:" + t
                        }, n)), e.push(o.createElement("span", {
                            key: "upsell-plus:" + t
                        }, " + "))) : this.props.plan.level > 0 ? e.push(o.createElement("strong", {
                            key: "upsell-strong-end:" + this.props.plan.level
                        }, n)) : e.push(o.createElement("span", {
                            key: "upsell-end:" + t
                        }, n)))
                    }
                if (!this.props.plan.emoteSetID) return null;
                var i = {
                        id: this.props.plan.emoteSetID,
                        emotes: this.props.plan.emotes
                    },
                    a = {};
                return this.props.plan.price && (a.purchase = Object(h.d)("${price}", {
                    price: this.props.plan.price
                }, "PlanUpsell")), o.createElement(N.U, {
                    className: "emote-picker-plan-upsell",
                    display: N.H.Flex,
                    flexDirection: N.J.Column,
                    alignItems: N.c.Center,
                    margin: {
                        bottom: 1
                    }
                }, o.createElement(E.a, {
                    emoteSet: i,
                    locked: !0
                }), o.createElement(N.U, {
                    margin: 1,
                    alignItems: N.c.Center
                }, e), o.createElement(D.a, {
                    isSubbedToTier: !1,
                    tierPrice: a.purchase || "",
                    reportSubAction: this.props.reportSubAction,
                    url: this.props.plan.url
                }))
            }, t
        }(o.Component),
        O = (n(457), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.closeOnEsc = function(e) {
                    e.keyCode === w.a.Esc && n.props.toggleVisibility()
                }, n.handleFilterChange = function(e) {
                    var t = e.target.value,
                        i = t.toLowerCase(),
                        a = n.filterAvailableUpsells(n.props.availableUpsells, i),
                        r = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                    n.setState({
                        filter: i,
                        filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                        filteredAvailableUpsells: a,
                        filteredOwnedChannelEmoteSets: r,
                        inputValue: t,
                        channelTabEnabled: r.length > 0 || a.length > 0
                    })
                }, n.state = {
                    filter: "",
                    filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                    filteredAvailableUpsells: t.availableUpsells,
                    filteredAllEmoteSets: t.allEmoteSets,
                    inputValue: "",
                    channelTabSelected: !0,
                    channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                }, n.selectAllTab = function() {
                    return n.setChannelTabSelected(!1)
                }, n.selectChannelTab = function() {
                    return n.setChannelTabSelected(!0)
                }, n
            }
            return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                if (!e.gqlError)
                    if (this.state.filter.length > 0) {
                        var t = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                            n = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                        this.setState({
                            filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                            filteredAvailableUpsells: t,
                            filteredOwnedChannelEmoteSets: n,
                            channelTabEnabled: n.length > 0 || t.length > 0
                        })
                    } else this.setState({
                        filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                        filteredAvailableUpsells: e.availableUpsells,
                        filteredAllEmoteSets: e.allEmoteSets,
                        channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                    })
            }, t.prototype.render = function() {
                return o.createElement(N.p, {
                    "data-a-target": "emote-picker",
                    direction: this.props.direction ? this.props.direction : N.q.TopRight,
                    size: this.props.size ? this.props.size : N.r.Medium,
                    noTail: !0,
                    show: !0
                }, o.createElement(N.U, {
                    className: S("emote-picker")
                }, this.renderTabContent(), o.createElement(N.U, {
                    className: "emote-picker__controls-container",
                    position: N._2.Relative
                }, o.createElement(N._17, {
                    padding: 1,
                    borderTop: !0
                }, o.createElement(N.Q, {
                    autoFocus: !0,
                    onChange: this.handleFilterChange,
                    onKeyDown: this.closeOnEsc,
                    placeholder: Object(h.d)("Search for Emotes", "EmotePicker"),
                    type: N.R.Text,
                    value: this.state.inputValue
                })), o.createElement(T, {
                    allTabVisible: this.props.allEmoteSets.length > 0,
                    channelTabEnabled: this.state.channelTabEnabled,
                    channelTabSelected: this.state.channelTabSelected,
                    channelTabVisible: !!this.props.channelTabVisible,
                    selectAllTab: this.selectAllTab,
                    selectChannelTab: this.selectChannelTab
                }))))
            }, t.prototype.renderTabContent = function() {
                var e = this,
                    t = [];
                return this.props.gqlError ? t.push(o.createElement(N.U, {
                    key: "emotePicker-error"
                }, o.createElement(N._21, {
                    color: N.F.Error
                }, Object(h.d)("Unable to load available emotes.", "EmotePicker")))) : this.props.loading ? t.push(o.createElement(N.U, {
                    alignItems: N.c.Center,
                    display: N.H.Flex,
                    key: "loading",
                    fullHeight: !0,
                    fullWidth: !0,
                    justifyContent: N.T.Center
                }, o.createElement(N.X, {
                    key: "LoadingSpinner"
                }))) : this.state.channelTabEnabled && this.state.channelTabSelected ? (this.state.filteredOwnedChannelEmoteSets.length > 0 && t.push(o.createElement(N.U, {
                    className: "emote-picker__content-block",
                    key: "ownedChannelEmoteSets",
                    padding: 1,
                    position: N._2.Relative
                }, o.createElement(E.a, {
                    emoteSet: this.state.filteredOwnedChannelEmoteSets[0],
                    onClickEmote: this.props.onClickEmote,
                    locked: !1
                }))), t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                    return o.createElement(N.U, {
                        className: "emote-picker__content-block",
                        key: "planUpsell:" + t.level,
                        padding: 1,
                        position: N._2.Relative
                    }, o.createElement(I, {
                        plan: t,
                        subscribeTexts: e.props.subscribeTexts,
                        reportSubAction: e.props.reportSubAction
                    }))
                }))) : t = this.state.filteredAllEmoteSets.map(function(t) {
                    return o.createElement(N.U, {
                        key: "emoteGrid" + t.id,
                        position: N._2.Relative,
                        padding: {
                            top: 1,
                            bottom: 2
                        },
                        className: "emote-picker__content-block"
                    }, o.createElement(E.a, {
                        emoteSet: t,
                        onClickEmote: e.props.onClickEmote,
                        locked: !1
                    }))
                }), t.length > 0 ? o.createElement(_.b, {
                    className: "emote-picker__tab-content"
                }, o.createElement(N.U, {
                    padding: 1
                }, t)) : null
            }, t.prototype.filterEmoteSet = function(e, t) {
                return e.filter(function(e) {
                    return e.token.toLowerCase().includes(t)
                })
            }, t.prototype.setChannelTabSelected = function(e) {
                this.setState({
                    channelTabSelected: e
                })
            }, t.prototype.filterEmoteSets = function(e, t) {
                for (var n = [], i = 0, a = e; i < a.length; i++) {
                    var r = a[i],
                        o = this.filterEmoteSet(r.emotes, t);
                    o.length > 0 && n.push({
                        id: r.id,
                        emotes: o
                    })
                }
                return n
            }, t.prototype.filterAvailableUpsells = function(e, t) {
                for (var n = [], i = 0, a = e; i < a.length; i++) {
                    var o = a[i],
                        s = this.filterEmoteSet(o.emotes, t);
                    s.length > 0 && n.push(r.__assign({}, o, {
                        emotes: s
                    }))
                }
                return n
            }, t
        }(o.Component)),
        L = n(458),
        x = n(459),
        R = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.trackSubEvent = function(e) {
                    Object(k.b)(r.__assign({}, e, {
                        action: k.a.ClickCheckout,
                        channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                        channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                        isMenuOpen: null,
                        hasSubCredit: null,
                        sub_location: "emote_picker",
                        modal: !1,
                        showPrimeContent: !0,
                        giftRecipient: null
                    }))
                };
                var i = {
                    allEmoteSets: [],
                    availableUpsells: [],
                    channelTabVisible: !1,
                    gqlError: t.userData && !!t.userData.error || t.channelData && !!t.channelData.error || !1,
                    gqlLoading: t.userData && !!t.userData.loading || t.channelData && !!t.channelData.loading || !1,
                    subscribeTexts: [],
                    ownedChannelEmoteSets: [],
                    ownedSetIDs: new Set([])
                };
                return i = n.applyDataPropsToState(t, i), n.state = r.__assign({}, i), n
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
            }, t.prototype.componentWillReceiveProps = function(e) {
                if (e.userData && e.userData.error || e.channelData && e.channelData.error) this.setState({
                    gqlError: !0
                });
                else {
                    var t = this.applyDataPropsToState(e, this.state);
                    this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.userData && this.props.userData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.state.allEmoteSets !== t.allEmoteSets && this.props.updateEmoteSets(t.allEmoteSets), this.setState(r.__assign({}, t, {
                        gqlError: !1
                    }))
                }
            }, t.prototype.render = function() {
                return this.props.visible ? o.createElement(O, {
                    allEmoteSets: this.state.allEmoteSets,
                    availableUpsells: this.state.availableUpsells,
                    channelTabVisible: this.state.channelTabVisible,
                    gqlError: this.state.gqlError,
                    loading: this.state.gqlLoading,
                    onClickEmote: this.props.onClickEmote,
                    ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                    toggleVisibility: this.props.toggleVisibility,
                    subscribeTexts: this.state.subscribeTexts,
                    reportSubAction: this.trackSubEvent,
                    direction: this.props.direction,
                    size: this.props.size
                }) : null
            }, t.prototype.checkDataLoaded = function(e) {
                var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                    n = !e.authToken || e.userData && !e.userData.loading;
                return t && n
            }, t.prototype.checkForContent = function(e) {
                var t = e.userData && e.userData.user && e.userData.user.emoteSets.length > 0 || !1,
                    n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                return t || n
            }, t.prototype.applyDataPropsToState = function(e, t) {
                var n = r.__assign({}, t);
                return e.userData && e.userData.user && (n.ownedSetIDs = new Set(e.userData.user.emoteSets.map(function(e) {
                    return parseInt(e.id, 10)
                })), n.allEmoteSets = Object(m.a)(e.userData.user.emoteSets)), e.channelData && e.channelData.user && (n.availableUpsells = f(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.subscribeTexts = b(e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = v(n.ownedSetIDs, e.channelData.user.subscriptionProducts)), n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
            }, t.prototype.subscriptionProductHasEmotes = function(e) {
                return void 0 !== e.emoteSetID && e.emotes.length > 0
            }, t = r.__decorate([Object(c.a)(L, {
                name: "userData",
                skip: function(e) {
                    return !e.authToken
                }
            }), Object(c.a)(x, {
                name: "channelData",
                skip: function(e) {
                    return !e.channelOwnerID
                },
                options: function(e) {
                    return {
                        variables: {
                            channelOwnerID: e.channelOwnerID
                        }
                    }
                }
            }), Object(u.a)([{
                topic: function(e) {
                    return "user-subscribe-events-v1." + (e.userData && e.userData.user && e.userData.user.id)
                },
                mapMessageTypesToProps: {
                    "*": "subscriptionInfo"
                },
                skip: function(e) {
                    return !(e.userData && !e.userData.loading && !e.userData.error)
                }
            }]), Object(y.c)("EmotePicker")], t)
        }(o.Component),
        F = Object(s.a)(i, a)(R);
    n.d(t, "a", function() {
        return F
    })
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(4),
        r = n(1),
        o = n(2),
        s = n(3),
        l = (n(455), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = a("emote-picker__emote-link", {
                        "emote-picker__emote-link--locked": this.props.locked
                    }),
                    n = r.createElement(s._17, {
                        alignItems: s.c.Center,
                        background: s.m.Overlay,
                        borderRadius: s.s.Small,
                        className: "emote-picker__emote-lock",
                        color: s.F.Overlay,
                        display: s.H.InlineFlex,
                        justifyContent: s.T.Center,
                        position: s._2.Absolute,
                        zIndex: s._38.Above
                    }, r.createElement(s._8, {
                        asset: s._9.Lock,
                        height: 10,
                        width: 10
                    })),
                    i = this.props.emoteSet.emotes.map(function(i) {
                        return r.createElement("div", {
                            key: i.id,
                            className: "emote-picker__emote"
                        }, r.createElement(s._30, {
                            label: i.displayName || Object(o.d)("Emote", "EmoteGrid"),
                            direction: s._32.Bottom
                        }, r.createElement(s.P, {
                            display: s.H.Flex,
                            alignItems: s.c.Center,
                            justifyContent: s.T.Center
                        }, r.createElement("button", {
                            className: t,
                            name: i.displayName,
                            onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, i.id),
                            "data-a-target": i.displayName
                        }, r.createElement("figure", {
                            className: "emote-picker__emote-figure"
                        }, e.props.locked ? n : null, r.createElement("img", {
                            srcSet: i.srcSet,
                            alt: i.displayName
                        }))))))
                    });
                return r.createElement(s.U, {
                    display: s.H.Flex,
                    justifyContent: s.T.Center
                }, i)
            }, t.prototype.handleClickEmote = function(e, t) {
                this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e)
            }, t
        }(r.Component));
    n.d(t, "a", function() {
        return l
    })
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(2),
        o = n(5),
        s = n(50),
        l = n(3),
        c = "subscribe-button__subscribe-tier-button",
        u = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.messages = {
                    subscribed: Object(r.d)("Subscribed", "SubTierButton"),
                    subscribeNow: Object(r.d)("Subscribe Now", "SubTierButton")
                }, t.handleClick = function() {
                    t.props.reportSubAction({
                        action: s.a.ClickCheckout,
                        checkoutButtonTier: t.props.tierPrice
                    })
                }, t
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.props.isSubbedToTier ? a.createElement(l.u, {
                    ariaLabel: this.messages.subscribed,
                    "data-test-selector": c,
                    disabled: !0,
                    icon: l._9.Star
                }, this.messages.subscribed) : a.createElement(l.u, i.__assign({
                    ariaLabel: this.messages.subscribeNow + " " + this.props.tierPrice,
                    "data-test-selector": c,
                    linkTo: this.props.url,
                    onClick: this.handleClick,
                    purchase: this.props.tierPrice
                }, Object(l._39)(this.props), {
                    targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                }), this.messages.subscribeNow)
            }, t = i.__decorate([Object(o.c)("SubTierButton")], t)
        }(a.Component),
        d = u;
    n.d(t, !1, function() {
        return c
    }), n.d(t, "a", function() {
        return d
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            sessionUser: e.session.user
        }
    }
    n.d(t, "a", function() {
        return k
    });
    var a = n(0),
        r = n(1),
        o = (n.n(r), n(6)),
        s = n(9),
        l = n(2),
        c = n(7),
        u = n(21),
        d = n(12),
        p = n(5),
        m = n(134),
        h = n(261),
        g = n(278),
        f = n(134),
        v = n(492),
        b = (n.n(v), n(493)),
        y = (n.n(b), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    submitStatus: f.b.Unsubmitted
                }, t.handleSubmit = function(e, n, i, r) {
                    return a.__awaiter(t, void 0, void 0, function() {
                        var t, o, t, s;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    if (e !== m.a) return [3, 5];
                                    t = {
                                        userID: this.props.reportContext.targetUserID,
                                        communityID: i || "",
                                        reason: n
                                    }, a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(u.a)(t))];
                                case 2:
                                    return a.sent(), l.n.tracking.track(d.SpadeEventType.CommunityModeration, {
                                        community_id: i,
                                        name: r,
                                        is_official: !1,
                                        user_id: this.props.sessionUser && this.props.sessionUser.id,
                                        target_id: this.props.reportContext.targetUserID,
                                        action: "report",
                                        reason: e
                                    }), this.setState({
                                        submitStatus: f.b.Success
                                    }), [3, 4];
                                case 3:
                                    return o = a.sent(), l.i.error(o, "ReportUserInCommunity Mutation failed."), this.setState({
                                        submitStatus: f.b.MutationError
                                    }), [3, 4];
                                case 4:
                                    return [3, 9];
                                case 5:
                                    t = {
                                        description: n,
                                        reason: e,
                                        content: this.props.reportContext.contentType,
                                        contentID: this.props.reportContext.contentID,
                                        extra: this.props.reportContext.extra,
                                        targetID: this.props.reportContext.targetUserID
                                    }, this.props.reportContext.contentType === h.a.Community && this.props.reportContext.extra && (t.description = Object(g.a)(this.props.reportContext.extra, n)), a.label = 6;
                                case 6:
                                    return a.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(u.a)(t))];
                                case 7:
                                    return a.sent(), this.props.reportContext.contentType === h.a.Community && l.n.tracking.track(d.SpadeEventType.CommunityReport, {
                                        community_id: this.props.reportContext.contentID,
                                        name: this.props.reportContext.extra,
                                        is_official: !1,
                                        user_id: this.props.sessionUser && this.props.sessionUser.id,
                                        reason: e
                                    }), this.setState({
                                        submitStatus: f.b.Success
                                    }), [3, 9];
                                case 8:
                                    return s = a.sent(), l.i.error(s, "ReportUser Mutation failed."), this.setState({
                                        submitStatus: f.b.MutationError
                                    }), [3, 9];
                                case 9:
                                    return [2]
                            }
                        })
                    })
                }, t.handleChildError = function(e) {
                    return t.setState({
                        submitStatus: e
                    })
                }, t.handleClose = function() {
                    t.props.onClose && t.props.onClose(t.state.submitStatus)
                }, t
            }
            return a.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.componentWillUnmount = function() {
                this.handleClose()
            }, t.prototype.render = function() {
                return r.createElement(f.c, {
                    onClose: this.handleClose,
                    onError: this.handleChildError,
                    onSubmit: this.handleSubmit,
                    reportContentType: this.props.reportContext.contentType,
                    submitStatus: this.state.submitStatus,
                    targetUserID: this.props.reportContext.targetUserID,
                    title: this.props.title,
                    defaultDescription: this.props.defaultDescription
                })
            }, t
        }(r.Component)),
        k = Object(s.compose)(Object(c.a)(v, {
            name: "reportUserInCommunity"
        }), Object(c.a)(b, {
            name: "reportUser"
        }), Object(p.c)("ReportUser"), Object(o.a)(i, null))(y)
}, function(e, t, n) {
    "use strict";

    function i(e, t, n) {
        return {
            type: a,
            threadID: e,
            afterMessageID: n,
            content: t
        }
    }
    n.d(t, "a", function() {
        return a
    }), t.b = i;
    var a = "whisperNotifications.WHISPER_THREAD_NOTIFIED"
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "FragmentDefinition",
            name: {
                kind: "Name",
                value: "blockedUsers"
            },
            typeCondition: {
                kind: "NamedType",
                name: {
                    kind: "Name",
                    value: "User"
                }
            },
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "id"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: null
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "blockedUsers"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 67
        }
    };
    n.loc.source = {
        body: "fragment blockedUsers on User {\n  id\n  blockedUsers {\n    id\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t, n) {
    "use strict";

    function i(e) {
        N.n.tracking.track(T.SpadeEventType.WhisperThreadMod, {
            conversation_id: e.threadID,
            action: e.action
        })
    }

    function a(e) {
        return C.__awaiter(this, void 0, void 0, function() {
            var t;
            return C.__generator(this, function(n) {
                switch (n.label) {
                    case 0:
                        return [4, S()];
                    case 1:
                        return t = n.sent(), N.n.tracking.track(T.SpadeEventType.WhisperIgnoreUser, {
                            ui_context: e.context,
                            from_login: t && t.login,
                            ignored_login: e.targetUserLogin,
                            reason: e.reason || E.Other,
                            source: e.source
                        }), [2]
                }
            })
        })
    }

    function r(e, t) {
        return C.__awaiter(this, void 0, void 0, function() {
            var n;
            return C.__generator(this, function(i) {
                switch (i.label) {
                    case 0:
                        return [4, S()];
                    case 1:
                        return n = i.sent(), N.n.tracking.track(T.SpadeEventType.WhisperThreadMod, {
                            conversation_id: e,
                            action: t,
                            login: n && n.login
                        }), [2]
                }
            })
        })
    }

    function o(e) {
        N.n.tracking.track(T.SpadeEventType.WhisperAllThreadsMod, {
            action: e
        })
    }

    function s() {
        o(I.MarkAllRead)
    }

    function l() {
        o(I.EnableDoNotDisturb)
    }

    function c() {
        o(I.DisableDoNotDisturb)
    }

    function u(e, t) {
        a({
            context: t,
            targetUserLogin: e,
            reason: E.Spam,
            source: "conversations_button"
        })
    }

    function d(e) {
        r(e, x.MarkNotSpam)
    }

    function p(e) {
        r(e, x.Archive)
    }

    function m(e) {
        i({
            threadID: e,
            action: O.Mute
        })
    }

    function h(e) {
        i({
            threadID: e,
            action: O.Unmute
        })
    }

    function g(e) {
        i({
            threadID: e,
            action: O.Expand
        })
    }

    function f(e) {
        i({
            threadID: e,
            action: O.Collapse
        })
    }

    function v(e) {
        i({
            threadID: e,
            action: O.Close
        })
    }

    function b(e) {
        i({
            threadID: e,
            action: O.Archive
        })
    }

    function y(e) {
        N.n.tracking.track(T.SpadeEventType.WhisperThreadCreate, {
            conversation_id: e.threadID,
            target_login: e.targetUserlogin,
            source: "search_target_result",
            search_result_rank: e.searchResultRank
        })
    }

    function k(e) {
        N.n.tracking.track(T.SpadeEventType.WhisperSearchClick, {
            query: e.searchQuery,
            source: "conversation_list",
            rank: e.searchResultRank,
            is_conversation: e.isConversation
        })
    }

    function S() {
        return C.__awaiter(this, void 0, void 0, function() {
            var e, t, n;
            return C.__generator(this, function(i) {
                switch (i.label) {
                    case 0:
                        e = null, i.label = 1;
                    case 1:
                        return i.trys.push([1, 3, , 4]), [4, N.n.apollo.client.query({
                            query: D
                        })];
                    case 2:
                        return e = i.sent(), [3, 4];
                    case 3:
                        return t = i.sent(), N.i.error(t, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                    case 4:
                        return n = e && e.data && e.data.currentUser, [2, n]
                }
            })
        })
    }

    function _(e) {
        return C.__awaiter(this, void 0, void 0, function() {
            var t;
            return C.__generator(this, function(n) {
                switch (n.label) {
                    case 0:
                        return [4, S()];
                    case 1:
                        return t = n.sent(), N.n.tracking.track(T.SpadeEventType.WhisperSent, {
                            to: e.targetUserLogin,
                            from: t && t.login,
                            player: "web",
                            is_turbo: t && t.hasTurbo,
                            conversation_id: e.threadID,
                            availability: t && t.availability
                        }), [2]
                }
            })
        })
    }

    function w(e) {
        return C.__awaiter(this, void 0, void 0, function() {
            var t;
            return C.__generator(this, function(n) {
                switch (n.label) {
                    case 0:
                        return [4, S()];
                    case 1:
                        return t = n.sent(), N.n.tracking.track(T.SpadeEventType.WhisperReceived, {
                            to: t && t.login,
                            from: e.targetUserLogin,
                            player: "web",
                            is_turbo: t && t.hasTurbo,
                            conversation_id: e.threadID
                        }), [2]
                }
            })
        })
    }
    n.d(t, "a", function() {
        return L
    }), t.j = s, t.h = l, t.g = c, t.l = u, t.o = d, t.n = p, t.k = m, t.m = h, t.i = g, t.e = f, t.d = v, t.b = b, t.f = y, t.c = k, t.q = _, t.p = w;
    var E, C = n(0),
        N = n(2),
        T = n(12),
        D = n(462);
    n.n(D);
    ! function(e) {
        e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
    }(E || (E = {}));
    var I;
    ! function(e) {
        e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
    }(I || (I = {}));
    var O;
    ! function(e) {
        e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
    }(O || (O = {}));
    var L;
    ! function(e) {
        e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
    }(L || (L = {}));
    var x;
    ! function(e) {
        e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
    }(x || (x = {}))
}, function(e, t, n) {
    "use strict";

    function i(e) {
        if (e) {
            var t = e.map(function(e) {
                return e.id
            });
            return o().filter(function(e) {
                return t.includes(e.canonical)
            })
        }
        return o()
    }
    var a = function(e, t) {
            return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e)).replace(/{description}/, t)
        },
        r = n(2),
        o = function() {
            return [{
                localized: Object(r.d)("Site Suspension Evasion", "ReportUserModal"),
                canonical: "tos_ban_evasion"
            }, {
                localized: Object(r.d)("Chat Ban Evasion", "ReportUserModal"),
                canonical: "chat_ban_evasion"
            }, {
                localized: Object(r.d)("Self-Harm", "ReportUserModal"),
                canonical: "selfharm"
            }, {
                localized: Object(r.d)("Attempts or Threats to Harm", "ReportUserModal"),
                canonical: "harm"
            }, {
                localized: Object(r.d)("Harassment", "ReportUserModal"),
                canonical: "harassment"
            }, {
                localized: Object(r.d)("Hate Speech", "ReportUserModal"),
                canonical: "hate_speech"
            }, {
                localized: Object(r.d)("Offensive Username", "ReportUserModal"),
                canonical: "offensive_username"
            }, {
                localized: Object(r.d)("Impersonation", "ReportUserModal"),
                canonical: "impersonation"
            }, {
                localized: Object(r.d)("Spam, Scams, or Other Malicious Content", "ReportUserModal"),
                canonical: "spam"
            }, {
                localized: Object(r.d)("Porn or Other Sexually Explicit Content", "ReportUserModal"),
                canonical: "porn"
            }, {
                localized: Object(r.d)("Nudity or Sexual Behavior/Attire", "ReportUserModal"),
                canonical: "nudity"
            }, {
                localized: Object(r.d)("Extreme Violence, Gore, or Other Obscene Content", "ReportUserModal"),
                canonical: "gore"
            }, {
                localized: Object(r.d)("Underaged User", "ReportUserModal"),
                canonical: "underaged"
            }, {
                localized: Object(r.d)("Cheating in Online Game", "ReportUserModal"),
                canonical: "cheating"
            }, {
                localized: Object(r.d)("Prohibited Game", "ReportUserModal"),
                canonical: "prohibited"
            }, {
                localized: Object(r.d)("Miscategorized Content or Other Category Violation", "ReportUserModal"),
                canonical: "miscategorized"
            }, {
                localized: Object(r.d)("Community Rules Violation", "ReportUserModal"),
                canonical: "community_rules_violation"
            }, {
                localized: Object(r.d)("Community is Violating Terms of Service", "ReportUserModal"),
                canonical: "community_tos_violation"
            }, {
                localized: Object(r.d)("Bits Acceptable Use Policy Violation", "ReportUserModal"),
                canonical: "bits_violation"
            }, {
                localized: Object(r.d)("Other Terms of Service Violation", "ReportUserModal"),
                canonical: "other"
            }]
        };
    n.d(t, "a", function() {
        return a
    }), n.d(t, "b", function() {
        return i
    })
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        return a.__awaiter(this, void 0, void 0, function() {
            var n, i, r, l, c;
            return a.__generator(this, function(a) {
                switch (a.label) {
                    case 0:
                        n = "https://api.twitch.tv/api/premium/credit/spend_token?channel_id=" + e, i = 1, a.label = 1;
                    case 1:
                        if (!(i <= s)) return [3, 7];
                        a.label = 2;
                    case 2:
                        return a.trys.push([2, 5, , 6]), [4, fetch(n, {
                            method: "POST",
                            headers: {
                                "Client-ID": o.n.config.legacyClientID,
                                Accept: "application/json; charset=UTF-8",
                                "content-type": "application/json; charset=UTF-8",
                                Authorization: "OAuth " + t
                            }
                        })];
                    case 3:
                        return r = a.sent(), [4, r.body];
                    case 4:
                        return l = a.sent(), [2, l];
                    case 5:
                        if (c = a.sent(), i === s) throw c;
                        return [3, 6];
                    case 6:
                        return ++i, [3, 1];
                    case 7:
                        return [2]
                }
            })
        })
    }
    var a = n(0),
        r = n(1),
        o = n(2),
        s = 3,
        l = n(50),
        c = n(3),
        u = "subscribe-button__subscribe-with-prime",
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isSubscribing: !1,
                    primeSubFailure: !0
                }, t.handleStartPrimeTrialClick = function() {
                    t.props.reportSubMenuAction({
                        action: l.a.ClickSignupForPrime
                    })
                }, t.handleSubWithPrimeClick = function() {
                    t.setState({
                        isSubscribing: !0
                    }, function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return a.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return t.trys.push([0, 3, 4, 5]), this.props.authToken && this.props.userHasPrime && this.props.subLogin ? [4, i(this.props.subLogin, this.props.authToken)] : [3, 2];
                                    case 1:
                                        t.sent(), this.props.onSubscribedWithPrime(), t.label = 2;
                                    case 2:
                                        return [3, 5];
                                    case 3:
                                        return e = t.sent(), o.i.error(e, "Failed to subscribe with Prime", {
                                            subLogin: this.props.subLogin
                                        }), this.setState({
                                            isSubscribing: !1,
                                            primeSubFailure: !0
                                        }), [3, 5];
                                    case 4:
                                        return this.setState({
                                            isSubscribing: !1
                                        }), [7];
                                    case 5:
                                        return [2]
                                }
                            })
                        })
                    })
                }, t
            }
            return a.__extends(t, e), t.prototype.componentWillMount = function() {
                this.setMessages()
            }, t.prototype.render = function() {
                var e = this.props.isSubscribedWithPrime && this.props.canPrimeSubscribe;
                return this.props.userHasPrime ? this.props.isSubscribed && !e ? r.createElement(c.u, a.__assign({
                    ariaLabel: this.messages.subscribed,
                    "data-test-selector": u,
                    disabled: !0,
                    icon: c._9.Crown
                }, Object(c._39)(this.props)), this.messages.subscribed) : this.props.canPrimeSubscribe ? r.createElement(c.u, a.__assign({
                    ariaLabel: this.messages.subscribeFree,
                    "data-test-selector": u,
                    disabled: this.state.isSubscribing,
                    icon: c._9.Crown,
                    state: this.state.isSubscribing ? c.y.Loading : c.y.Default,
                    onClick: this.handleSubWithPrimeClick
                }, Object(c._39)(this.props)), e ? this.messages.resubscribeFree : this.messages.subscribeFree) : r.createElement(c.u, a.__assign({
                    ariaLabel: this.messages.primeSubNotAvailable,
                    "data-test-selector": u,
                    disabled: !0,
                    icon: c._9.Crown
                }, Object(c._39)(this.props)), this.messages.primeSubNotAvailable) : r.createElement(c.u, a.__assign({
                    ariaLabel: this.messages.startPrimeTrial,
                    "data-test-selector": u,
                    icon: c._9.Crown,
                    linkTo: o.a.tryPrimeURI,
                    onClick: this.handleStartPrimeTrialClick
                }, Object(c._39)(this.props), {
                    targetBlank: !0
                }), this.messages.startPrimeTrial)
            }, t.prototype.setMessages = function() {
                this.messages = {
                    subscribed: Object(o.d)("Subscribed", "SubscribeWithPrime"),
                    startPrimeTrial: Object(o.d)("Start Your Free Trial", "SubscribeWithPrime"),
                    primeSubNotAvailable: Object(o.d)("Not yet!", "SubscribeWithPrime"),
                    subscribeFree: Object(o.d)("Subscribe Free", "SubscribeWithPrime"),
                    resubscribeFree: Object(o.d)("Resubscribe Free", "SubscribeWithPrime")
                }
            }, t
        }(r.Component),
        p = d;
    n.d(t, !1, function() {
        return u
    }), n.d(t, "a", function() {
        return p
    })
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        switch (e.type) {
            case a.b.Playing:
                return {
                    type: a.a.Playing,
                    "Symbol(id)": t,
                    __typename: "Playing",
                    game: {
                        id: e.game_id,
                        name: e.game,
                        "Symbol(id)": t + ".game",
                        __typename: "Game"
                    }
                };
            case a.b.Streaming:
                var n = {
                    type: a.a.Streaming,
                    "Symbol(id)": t,
                    __typename: "Streaming",
                    stream: {
                        id: e.channel_id,
                        game: null,
                        "Symbol(id)": t + ".stream",
                        __typename: "Stream"
                    }
                };
                return e.game && e.game_id && (n.stream.game = {
                    id: e.game_id,
                    name: e.game,
                    "Symbol(id)": t + ".stream.game",
                    __typename: "Game"
                }), n;
            case a.b.Watching:
                return {
                    type: a.a.Watching,
                    "Symbol(id)": t,
                    __typename: "Watching",
                    user: {
                        id: e.channel_id,
                        login: e.channel_login,
                        displayName: e.channel_display_name,
                        "Symbol(id)": t + ".user",
                        __typename: "User",
                        hosting: {
                            id: e.hosted_channel_id || null,
                            displayName: e.hosted_channel_display_name || null,
                            login: e.hosted_channel_login || null,
                            "Symbol(id)": t + ".user.hosting",
                            __typename: "User"
                        }
                    }
                };
            default:
                return null
        }
    }
    t.a = i;
    var a = n(109)
}, function(e, t, n) {
    "use strict";

    function i(e) {
        switch (e) {
            case $.a.Online:
                return M._4.Online;
            case $.a.Away:
            case $.a.Idle:
                return M._4.Away;
            case $.a.Busy:
                return M._4.Busy;
            case $.a.Offline:
            case $.a.Invisible:
            default:
                return M._4.Offline
        }
    }

    function a(e, t) {
        return {
            notifications: Object(re.a)(e, t.thread.id)
        }
    }

    function r(e, t) {
        return {
            messages: {
                edges: e.map(function(e, n) {
                    return {
                        cursor: "" + n,
                        node: {
                            content: {
                                content: e.content,
                                emotes: []
                            },
                            deletedAt: null,
                            editedAt: null,
                            from: {
                                id: t
                            },
                            id: e.id,
                            sentAt: (new Date).toISOString()
                        }
                    }
                })
            },
            isMuted: !1,
            unreadMessagesCount: 0,
            participants: [],
            id: Object(w.b)(),
            spamInfo: {
                lastMarkedNotSpamAt: null,
                likelihood: "low"
            },
            userLastMessageRead: {
                sentAt: (new Date).toISOString()
            }
        }
    }

    function o(e) {
        return Object(p.bindActionCreators)({
            notifyWhisperThread: m.b
        }, e)
    }
    var s, l = n(0),
        c = n(1),
        u = n(377),
        d = n(6),
        p = n(9),
        m = n(275),
        h = n(4),
        g = n(2),
        f = n(64),
        v = n(67),
        b = n(7),
        y = n(86),
        k = n(40),
        S = n(21),
        _ = n(30),
        w = n(18),
        E = n(436),
        C = n(380),
        N = n(87),
        T = n(10),
        D = n(47),
        I = n(437),
        O = n(282),
        L = n(264),
        x = n(12),
        R = n(70),
        F = n(283),
        U = n(31),
        P = n(89),
        M = n(3),
        A = n(276),
        j = n(463),
        B = n(464),
        H = n(465),
        V = n(466),
        z = "whispers-report-harassment-button",
        W = "whispers-report-spam-button",
        q = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderReportSpamButton = function() {
                    if (t.isBlocked) return null;
                    var e = Object(g.d)("Report Spam", "ThreadSettings");
                    return c.createElement(M.S, {
                        "data-test-selector": W,
                        ariaLabel: e,
                        onClick: t.reportUserSpam
                    }, c.createElement(M.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, t.renderReportHarassmentButton = function() {
                    if (t.isBlocked) return null;
                    var e = Object(g.d)("Report Harrasment", "ThreadSettings");
                    return c.createElement(M.S, {
                        "data-test-selector": z,
                        ariaLabel: e,
                        onClick: t.reportUserHarassment
                    }, c.createElement(M.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, t.onChannelRedirect = function() {
                    t.props.collapseThread && t.props.collapseThread()
                }, t.toggleMutethread = function() {
                    var e = !t.props.isMuted,
                        n = l.__assign({}, Object(S.a)({
                            threadID: t.props.threadID,
                            isMuted: !t.props.isMuted
                        }), {
                            optimisticResponse: {
                                updateWhisperThread: {
                                    thread: {
                                        id: t.props.threadID,
                                        isMuted: e,
                                        __typename: "WhisperThread"
                                    },
                                    __typename: "UpdateWhisperThreadPayload"
                                }
                            }
                        });
                    t.props.setMuteThread && (e ? Object(P.j)(t.props.threadID) : Object(P.k)(t.props.threadID), t.props.setMuteThread(n))
                }, t.reportUserHarassment = function() {
                    return l.__awaiter(t, void 0, void 0, function() {
                        var e, t;
                        return l.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    e = Object(S.a)({
                                        targetUserID: this.props.userID,
                                        reason: L.c.Harassment,
                                        threadID: this.props.threadID
                                    }), n.label = 1;
                                case 1:
                                    return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                case 2:
                                    return n.sent(), this.blockUser(), [3, 4];
                                case 3:
                                    return t = n.sent(), g.i.error(t, "Failed to report whisper thread for harassment.", {
                                        threadID: this.props.threadID
                                    }), [3, 4];
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, t.reportUserSpam = function() {
                    return l.__awaiter(t, void 0, void 0, function() {
                        var e, t;
                        return l.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    e = Object(S.a)({
                                        targetUserID: this.props.userID,
                                        reason: L.c.Spam,
                                        threadID: this.props.threadID
                                    }), n.label = 1;
                                case 1:
                                    return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                case 2:
                                    return n.sent(), this.blockUser(), [3, 4];
                                case 3:
                                    return t = n.sent(), g.i.error(t, "Failed to report whisper thread for spam.", {
                                        threadID: this.props.threadID
                                    }), [3, 4];
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, t.blockUser = function() {
                    var e = l.__assign({}, Object(S.a)({
                        targetUserID: t.props.userID,
                        reason: L.b.Other,
                        sourceContext: L.a.Whisper
                    }), {
                        optimisticResponse: {
                            blockUser: {
                                __typename: "BlockUserPayload",
                                targetUser: {
                                    __typename: "User",
                                    id: t.props.userID
                                }
                            }
                        },
                        update: function(e) {
                            var n = e.readFragment({
                                id: t.currentUserDataID,
                                fragment: A
                            });
                            n && (n.blockedUsers.push({
                                id: t.props.userID,
                                __typename: "User"
                            }), e.writeFragment({
                                id: t.currentUserDataID,
                                fragment: A,
                                data: n
                            }))
                        }
                    });
                    t.props.blockUser(e), t.props.onBlock && t.props.onBlock(t.props.threadID)
                }, t.unblockUser = function() {
                    var e = l.__assign({}, Object(S.a)({
                        targetUserID: t.props.userID
                    }), {
                        optimisticResponse: {
                            unblockUser: {
                                __typename: "UnblockUserPayload",
                                targetUser: {
                                    id: t.props.userID,
                                    __typename: "User"
                                }
                            }
                        },
                        update: function(e) {
                            var n = e.readFragment({
                                id: t.currentUserDataID,
                                fragment: A
                            });
                            n && (n.blockedUsers = n.blockedUsers.filter(function(e) {
                                return e.id !== t.props.userID
                            }), e.writeFragment({
                                id: t.currentUserDataID,
                                fragment: A,
                                data: n
                            }))
                        }
                    });
                    t.props.unblockUser(e), t.props.onUnblock && t.props.onUnblock(t.props.threadID)
                }, t
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = this.props.displayName || this.props.login,
                    t = this.props.isMuted ? Object(g.d)("Turn Notifications On", "ThreadSettings") : Object(g.d)("Turn Notifications Off", "ThreadSettings"),
                    n = Object(g.d)("Go to {displayName}'s Channel", {
                        displayName: e
                    }, "ThreadSettings");
                return c.createElement(M.U, {
                    display: M.H.Flex,
                    flexDirection: M.J.Column,
                    margin: 1
                }, c.createElement(M.S, {
                    ariaLabel: t,
                    onClick: this.toggleMutethread
                }, c.createElement(M.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, t)), c.createElement(M._17, {
                    borderBottom: !0,
                    margin: {
                        y: 1,
                        left: .5
                    }
                }), this.renderBlockButton(), this.renderReportHarassmentButton(), this.renderReportSpamButton(), c.createElement(M.S, {
                    linkTo: "/" + this.props.login,
                    onClick: this.onChannelRedirect,
                    ariaLabel: n
                }, c.createElement(M.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, n)))
            }, t.prototype.renderBlockButton = function() {
                var e, t, n = this.props.displayName || this.props.login;
                return this.isBlocked ? (e = Object(g.d)("Unblock {displayName}...", {
                    displayName: n
                }, "ThreadSettings"), t = this.unblockUser) : (e = Object(g.d)("Block {displayName}...", {
                    displayName: n
                }, "ThreadSettings"), t = this.blockUser), c.createElement(M.S, {
                    "data-test-selector": "whispers-block-user-button",
                    ariaLabel: e,
                    onClick: t
                }, c.createElement(M.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, e))
            }, Object.defineProperty(t.prototype, "isBlocked", {
                get: function() {
                    var e = this;
                    return !(!this.props.currentUser.blockedUsers || !this.props.currentUser.blockedUsers.find(function(t) {
                        return t.id === e.props.userID
                    }))
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(t.prototype, "currentUserDataID", {
                get: function() {
                    return g.n.apollo.client.dataIdFromObject ? g.n.apollo.client.dataIdFromObject(this.props.currentUser) || "" : ""
                },
                enumerable: !0,
                configurable: !0
            }), t
        }(c.Component),
        G = Object(U.compose)(Object(b.a)(H, {
            name: "setMuteThread"
        }), Object(b.a)(j, {
            name: "blockUser"
        }), Object(b.a)(V, {
            name: "unblockUser"
        }), Object(b.a)(B, {
            name: "reportWhisperThread"
        }))(q),
        Q = n(467),
        K = n(468),
        $ = n(51),
        Y = n(277),
        J = (n(469), "report-as-spam-button"),
        X = "mark-not-spam-button",
        Z = "dismiss-prompt-button",
        ee = "spam-prompt-pending-target",
        te = "spam-prompt-reported-target",
        ne = {
            displayName: "???",
            login: "???",
            displayBadges: [],
            id: ""
        },
        ie = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    potentialSpamResolution: "pending"
                }, t.renderPotentialSpamPrompt = function() {
                    if (t.props.spamInfo && "low" !== t.props.spamInfo.likelihood && null === t.props.spamInfo.lastMarkedNotSpamAt) {
                        if ("pending" === t.state.potentialSpamResolution) return c.createElement(M.U, {
                            "data-a-target": ee,
                            className: "thread-header__potential-spam-prompt",
                            attachRight: !0,
                            attachLeft: !0,
                            attachTop: !0
                        }, c.createElement(M._17, {
                            background: M.m.Alt2,
                            padding: .5,
                            elevation: 2
                        }, c.createElement(M.U, {
                            display: M.H.InlineBlock,
                            margin: .5
                        }, c.createElement(M._21, {
                            type: M._26.Span,
                            fontSize: M.L.Size6,
                            color: M.F.Alt2
                        }, Object(g.d)("It looks like this conversation triggered our spam detector. If it is spam, please report it!", "ThreadHeader"))), c.createElement(M.U, {
                            display: M.H.InlineBlock,
                            margin: .5
                        }, c.createElement(M.u, {
                            "data-a-target": J,
                            type: M.z.Alert,
                            onClick: t.reportSpam,
                            size: M.x.Small
                        }, Object(g.d)("Report spam", "ThreadHeader"))), c.createElement(M.U, {
                            display: M.H.InlineBlock,
                            margin: .5
                        }, c.createElement(M.u, {
                            "data-a-target": X,
                            onClick: t.markNotSpam,
                            size: M.x.Small
                        }, Object(g.d)("This is not spam", "ThreadHeader")))));
                        if ("reported" === t.state.potentialSpamResolution && t.interlocutor.displayName) return c.createElement(M.U, {
                            "data-a-target": te,
                            className: "thread-header__potential-spam-prompt",
                            attachRight: !0,
                            attachLeft: !0,
                            attachTop: !0
                        }, c.createElement(M._17, {
                            background: M.m.Alt2,
                            padding: .5,
                            elevation: 2
                        }, c.createElement(M.U, {
                            display: M.H.InlineBlock,
                            margin: .5
                        }, c.createElement(M._21, {
                            type: M._26.Span,
                            fontSize: M.L.Size6,
                            color: M.F.Alt2
                        }, Object(g.d)("Thank you for helping us fight spam. We've blocked {user} from sending you further whispers. You can undo this from the Whisper Settings Menu.", {
                            user: t.interlocutor.displayName
                        }, "ThreadHeader"))), c.createElement(M.U, {
                            display: M.H.InlineBlock,
                            margin: .5
                        }, c.createElement(M.u, {
                            "data-a-target": Z,
                            type: M.z.Text,
                            onClick: t.dismissSpamPrompt,
                            size: M.x.Small
                        }, Object(g.d)("Dismiss", "ThreadHeader")))))
                    }
                    return null
                }, t.reportSpam = function() {
                    t.props.reportUserMutation(t.interlocutor.id, L.c.Spam, t.props.threadID), t.props.blockUserMutation(t.interlocutor.id, L.b.Other, L.a.Whisper, t.props.participants.currentUser), t.props.setThreadSpamStatusMutation(t.props.threadID, !0), Object(Y.l)(t.interlocutor.login, Y.a.SpamPropmt), t.setState({
                        potentialSpamResolution: "reported"
                    })
                }, t.markNotSpam = function() {
                    t.props.setThreadSpamStatusMutation(t.props.threadID, !1), Object(Y.o)(t.props.threadID), t.setState({
                        potentialSpamResolution: "dismissed"
                    })
                }, t.dismissSpamPrompt = function() {
                    t.props.onBlock && t.props.onBlock(t.props.threadID), Object(Y.n)(t.props.threadID), t.setState({
                        potentialSpamResolution: "dismissed"
                    })
                }, t.onSettingsClick = function(e) {
                    e.stopPropagation()
                }, t.onPresenceClick = function(e, n) {
                    n.stopPropagation();
                    var i = t.props.participants.currentUser && t.props.participants.currentUser.friends.edges.find(function(e) {
                        return e.node.id === t.interlocutor.id
                    });
                    t.props.participants.user && i && i.activity ? Object(O.b)({
                        context: e,
                        friendActivity: i.activity,
                        friendLogin: t.props.participants.user.login
                    }) : g.i.warn("[ThreadHeader] Attempted to track presence click without required data.")
                }, t
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = h({
                        "thread-header__title-bar-container": !0,
                        "thread-header__title-bar-container--highlighted": this.props.isHighlighted,
                        "thread-header__title-bar-container--focused": this.props.isFocused
                    }),
                    n = h({
                        "thread-header": !0,
                        "thread-header--collapsed": this.props.isCollapsed
                    }),
                    a = Object(g.d)("Close", "WhisperThreadHeader"),
                    r = Object(g.d)("Settings", "WhisperThreadHeader");
                if (this.props.isLoading || !this.props.participants.currentUser || !this.props.participants.user) return c.createElement(M.U, {
                    className: t,
                    display: M.H.Flex,
                    justifyContent: M.T.Between,
                    fullWidth: !0,
                    alignItems: M.c.Center,
                    padding: {
                        y: .5,
                        x: 1
                    },
                    flexShrink: 0,
                    flexGrow: 0,
                    flexWrap: M.K.NoWrap
                }, c.createElement(M._1, {
                    height: 20,
                    width: 80
                }), c.createElement(M.U, {
                    display: M.H.Flex
                }, c.createElement(M.v, {
                    ariaLabel: a,
                    icon: M._9.RemoveTag,
                    "data-a-target": "whispers-thread__close-button-" + this.props.threadID,
                    onClick: this.props.onClose
                })));
                var o = null,
                    s = null,
                    l = null,
                    u = null,
                    d = this.props.participants.currentUser && this.props.participants.currentUser.friends.edges.find(function(t) {
                        return t.node.id === e.interlocutor.id
                    });
                if (d && (s = c.createElement(M.U, {
                        margin: {
                            left: 1
                        },
                        display: M.H.Flex,
                        alignItems: M.c.Center
                    }, c.createElement(M._3, {
                        status: i(d.availability)
                    })), d.activity)) {
                    var p = Object(R.c)(d.activity, !0),
                        m = null,
                        f = Object(R.d)(this.props.participants.user.login, d.activity);
                    if (f && (m = {
                            pathname: f,
                            state: {
                                content: x.PageviewContent.Presence,
                                medium: x.PageviewMedium.Whispers
                            }
                        }), m) {
                        var v = h({
                            "thread-header__activity-link--highlighted": this.props.isHighlighted
                        });
                        l = c.createElement(T.a, {
                            className: v,
                            title: Object(R.c)(d.activity) || "",
                            onClick: this.onPresenceClick.bind(this, O.a.WhisperHeaderLink),
                            to: m,
                            "data-test-selector": "whispers-thread__presence-link"
                        }, p)
                    } else l = p;
                    this.props.isCollapsed || (u = c.createElement(M.U, {
                        padding: {
                            right: .5
                        }
                    }, c.createElement(F.a, {
                        link: m,
                        onClick: this.onPresenceClick.bind(this, O.a.WhisperHeaderButton),
                        shouldHollowOverlay: this.props.isHighlighted
                    })))
                }!this.props.isCollapsed && this.props.participants.currentUser && (o = c.createElement(D.a, null, c.createElement(M.v, {
                    ariaLabel: r,
                    icon: M._9.Gear,
                    overlay: this.props.isHighlighted
                }), c.createElement(M.p, {
                    direction: M.q.BottomRight,
                    offsetX: "0.5rem"
                }, c.createElement(G, {
                    login: this.interlocutor.login,
                    displayName: this.interlocutor.displayName,
                    currentUser: this.props.participants.currentUser,
                    userID: this.interlocutor.id,
                    isMuted: this.props.isMuted,
                    threadID: this.props.threadID,
                    collapseThread: this.props.collapse,
                    onBlock: this.props.onBlock,
                    onUnblock: this.props.onUnblock
                }))));
                var b = this.interlocutor.displayBadges.map(function(e) {
                    return c.createElement(M.P, {
                        key: e.id,
                        flexShrink: 0,
                        margin: {
                            right: .5
                        }
                    }, c.createElement("img", {
                        alt: e.title,
                        title: e.title,
                        className: "thread-header__badge",
                        src: e.imageURL
                    }))
                });
                return c.createElement(M.U, {
                    className: n,
                    position: M._2.Relative,
                    fullWidth: !0
                }, c.createElement("div", {
                    className: "thread-header__click-area",
                    onClick: this.props.onHeaderClick,
                    "data-a-target": "thread-header__click-area"
                }, c.createElement(M.U, {
                    className: t,
                    fullWidth: !0,
                    padding: {
                        x: 1,
                        y: .5
                    },
                    alignItems: M.c.Center,
                    flexGrow: 1,
                    display: M.H.Flex,
                    "data-a-target": "whisper-thread__title-bar-" + this.props.threadID,
                    "data-click-out-id": "thread-expand-close",
                    flexWrap: M.K.NoWrap
                }, c.createElement(M.U, {
                    fullHeight: !0,
                    flexGrow: 1,
                    display: M.H.Flex,
                    flexDirection: M.J.Column
                }, c.createElement(M.U, {
                    display: M.H.Flex,
                    flexGrow: 1,
                    alignItems: M.c.Center,
                    flexWrap: M.K.NoWrap,
                    padding: {
                        right: 1
                    }
                }, b, c.createElement(M._21, {
                    color: this.props.isHighlighted ? M.F.Overlay : M.F.Base,
                    type: M._26.Span,
                    bold: !0,
                    ellipsis: !0
                }, this.interlocutor.displayName), s), c.createElement(M._17, {
                    className: "thread-header__activity",
                    color: this.props.isHighlighted ? M.F.Overlay : M.F.Base,
                    padding: {
                        right: 1
                    },
                    overflow: M.Y.Hidden
                }, l)), c.createElement(M.U, {
                    display: M.H.Flex,
                    flexShrink: 0,
                    flexDirection: M.J.Row,
                    alignItems: M.c.Center
                }, u, c.createElement("div", {
                    onClick: this.onSettingsClick
                }, o), c.createElement(M.v, {
                    ariaLabel: a,
                    icon: M._9.RemoveTag,
                    "data-a-target": "thread-header__close-button-" + this.props.threadID,
                    onClick: this.props.onClose,
                    overlay: this.props.isHighlighted
                })))), this.renderPotentialSpamPrompt())
            }, Object.defineProperty(t.prototype, "interlocutor", {
                get: function() {
                    return this.props.participants.user || ne
                },
                enumerable: !0,
                configurable: !0
            }), t
        }(c.Component),
        ae = Object(p.compose)(Object(I.a)(), function() {
            var e = this;
            return Object(b.a)(Q, {
                props: function(t) {
                    return {
                        reportUserMutation: function(n, i, a) {
                            return l.__awaiter(e, void 0, void 0, function() {
                                var e;
                                return l.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            if (!t.mutate) return [3, 4];
                                            r.label = 1;
                                        case 1:
                                            return r.trys.push([1, 3, , 4]), [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n,
                                                        reason: i,
                                                        threadID: a
                                                    }
                                                }
                                            })];
                                        case 2:
                                            return r.sent(), [3, 4];
                                        case 3:
                                            return e = r.sent(), g.i.error(e, "Unable to report user"), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        }(), function() {
            var e = this;
            return Object(b.a)(K, {
                props: function(t) {
                    return {
                        setThreadSpamStatusMutation: function(n, i) {
                            return l.__awaiter(e, void 0, void 0, function() {
                                var e;
                                return l.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            if (!t.mutate) return [3, 4];
                                            a.label = 1;
                                        case 1:
                                            return a.trys.push([1, 3, , 4]), [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        threadID: n,
                                                        isSpam: i
                                                    }
                                                }
                                            })];
                                        case 2:
                                            return a.sent(), [3, 4];
                                        case 3:
                                            return e = a.sent(), g.i.error(e, "Unable to modify threads spam status user"), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        }())(ie),
        re = n(145),
        oe = n(28),
        se = n(113);
    ! function(e) {
        e[e.Timestamp = 0] = "Timestamp", e[e.Whisper = 1] = "Whisper", e[e.Warning = 2] = "Warning", e[e.NewMessages = 3] = "NewMessages", e[e.Notification = 4] = "Notification"
    }(s || (s = {}));
    var le = (n(470), n(284)),
        ce = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = this.props.message;
                switch (e.type) {
                    case s.Timestamp:
                        return c.createElement(M._17, {
                            className: "thread-message__timestamp",
                            color: M.F.Alt2,
                            fontSize: M.L.Size7
                        }, Object(le.d)(e));
                    case s.Warning:
                        return c.createElement(M._17, {
                            className: "thread-message__warning",
                            color: M.F.Alt2
                        }, Object(le.e)());
                    case s.Whisper:
                        return c.createElement(M.U, {
                            className: "thread-message__message"
                        }, Object(le.f)(e));
                    case s.NewMessages:
                        return c.createElement(M._17, {
                            className: "thread-message__new-messages",
                            color: M.F.OverlayAlt,
                            fontSize: M.L.Size7
                        }, Object(le.b)());
                    case s.Notification:
                        return c.createElement(M.U, {
                            className: "thread-message__notification"
                        }, Object(le.c)(e));
                    default:
                        return null
                }
            }, t
        }(c.Component),
        ue = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    disableInfiniteTrigger: !0
                }, t.loadMore = function() {
                    var e = t.scroll.scrollContent.scrollHeight;
                    return t.setState({
                        prevScrollHeight: e
                    }), t.props.loadMore()
                }, t.renderMessages = function(e) {
                    return e.map(function(e, n) {
                        return c.createElement(ce, {
                            message: e,
                            key: t.generateMessageKey(e, n.toString())
                        })
                    })
                }, t.getMessages = function() {
                    var e = t.props.unreadMessagesCount;
                    return t.props.thread.messages.edges.map(function(e) {
                        return {
                            type: s.Whisper,
                            content: e.node.content.content,
                            from: t.props.participantsByID[+e.node.from.id],
                            emotes: e.node.content.emotes,
                            id: e.node.id,
                            sentAt: new Date(e.node.sentAt),
                            editedAt: e.node.editedAt,
                            deletedAt: e.node.deletedAt
                        }
                    }).reduce(function(n, i, a, r) {
                        if (t.notificationsFor(i).forEach(function(e) {
                                n.push(e)
                            }), n.push(i), 0 == --e && n.push(t.createNewMessagesIndicator()), 0 === a);
                        else if (a < r.length - 1) {
                            var o = r[a + 1];
                            !i.deletedAt && t.shouldAddTimestamp(i, o) && n.push(t.createTimestampMessage(i))
                        }
                        return a === r.length - 1 && (i.deletedAt || n.push(t.createTimestampMessage(i)), n.push(t.createWarningMessage())), n
                    }, []).reverse()
                }, t.shouldAddTimestamp = function(e, t) {
                    return e.sentAt.valueOf() - t.sentAt.valueOf() > 6e5
                }, t.createTimestampMessage = function(e) {
                    return {
                        type: s.Timestamp,
                        timestamp: new Date(e.sentAt)
                    }
                }, t.notificationsFor = function(e) {
                    return t.props.notifications.filter(function(t) {
                        return t.afterMessageID === e.id
                    }).map(t.createNotificationLine)
                }, t.createNotificationLine = function(e) {
                    return {
                        type: s.Notification,
                        content: e.content
                    }
                }, t.createNewMessagesIndicator = function() {
                    return {
                        type: s.NewMessages
                    }
                }, t.createWarningMessage = function() {
                    return {
                        type: s.Warning
                    }
                }, t.saveScrollRef = function(e) {
                    return t.scroll = e
                }, t.scrollToBottom = function() {
                    t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight
                }, t
            }
            return l.__extends(t, e), t.prototype.componentDidMount = function() {
                this.scrollToBottom(), this.setState({
                    disableInfiniteTrigger: !1
                })
            }, t.prototype.componentWillReceiveProps = function(e) {
                (this.props.thread.messages.edges.length > 0 || e.thread.messages.edges.length > 0) && (0 === this.props.thread.messages.edges.length && e.thread.messages.edges.length > 0 || this.props.thread.messages.edges[0].cursor !== e.thread.messages.edges[0].cursor) && this.setState({
                    prevScrollHeight: this.scroll.scrollContent.scrollHeight
                })
            }, t.prototype.componentDidUpdate = function(e) {
                if (this.props.thread.messages.edges.length > e.thread.messages.edges.length)
                    if (this.props.thread.messages.edges[0] && e.thread.messages.edges[0] && this.props.thread.messages.edges[0].cursor === e.thread.messages.edges[0].cursor && this.props.thread.messages.edges[0].node.id === e.thread.messages.edges[0].node.id) {
                        if (this.state.prevScrollHeight && this.state.prevScrollHeight !== this.scroll.scrollContent.scrollHeight) {
                            var t = this.scroll.scrollContent.scrollHeight - this.state.prevScrollHeight;
                            this.scroll.scrollContent.scrollTop = t
                        }
                    } else this.scrollToBottom();
                this.props.notifications.length > e.notifications.length && this.scrollToBottom()
            }, t.prototype.render = function() {
                var e = this.getMessages();
                return c.createElement(M.U, {
                    fullHeight: !0
                }, c.createElement(oe.b, {
                    scrollRef: this.saveScrollRef,
                    suppressScrollX: !0
                }, c.createElement(M.U, null, c.createElement(oe.a, {
                    enabled: !this.state.disableInfiniteTrigger,
                    loadMore: this.loadMore,
                    pixelThreshold: 200,
                    orientation: se.b.Down,
                    contentLength: e.length
                }), this.renderMessages(e))))
            }, t.prototype.generateMessageKey = function(e, t) {
                switch (e.type) {
                    case s.NewMessages:
                    case s.Warning:
                        return "" + e.type;
                    case s.Timestamp:
                        return e.type + "-" + e.timestamp.getTime();
                    case s.Whisper:
                        return e.type + "-" + e.id;
                    default:
                        return g.i.warn("[ThreadMessages] Encountered an unknown message type."), t
                }
            }, t
        }(c.Component),
        de = ue,
        pe = Object(d.a)(a)(de),
        me = n(438),
        he = n(55),
        ge = n(474),
        fe = (n(475), n(476)),
        ve = n(477),
        be = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.refetchTimeout = 0, n.getEmotes = function() {
                    return Object.keys(n.props.emotes).map(function(e) {
                        return {
                            id: e,
                            emotes: Object(N.b)([n.props.emotes[e]])
                        }
                    })
                }, n.onEmoticonClick = function(e) {
                    var t = n.autocompleteInput.getValue();
                    t && t.length > 0 && !t.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInput.setValue(t)
                }, n.onBlock = function(e) {
                    n.addNotification(Object(g.d)("User successfully blocked", "whispers")), n.props.onBlock && n.props.onBlock(e)
                }, n.onUnblock = function() {
                    n.addNotification(Object(g.d)("User successfully unblocked", "whispers"))
                }, n.loadMore = function() {
                    return l.__awaiter(n, void 0, void 0, function() {
                        return l.__generator(this, function(e) {
                            return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                        })
                    })
                }, n.addNewThreadSendWhisper = function(e) {
                    var t = n.state.newThreadMessages;
                    t.unshift({
                        content: e,
                        id: Object(w.b)()
                    }), n.setState({
                        newThreadMessages: t
                    })
                }, n.addNotification = function(e) {
                    n.props.notifyWhisperThread(n.props.threadID, e, n.getLastMessageID())
                }, n.getLastMessageID = function() {
                    if (n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0]) return n.props.data.whisperThread.messages.edges[0].node.id
                }, n.getPlaceholderThreadFromLocalState = function() {
                    return r(n.state.newThreadMessages, n.props.currentUserID)
                }, n.handleHeaderClick = function() {
                    n.props.collapsed ? n.expand() : n.collapse()
                }, n.expand = function() {
                    n.props.participants.currentUser && Object(P.h)(n.props.threadID), n.props.onExpand(n.props.threadID)
                }, n.onClickOut = function() {
                    n.props.focused && n.props.onUnfocus(n.props.threadID)
                }, n.handleClose = function() {
                    n.props.participants.currentUser && Object(P.c)(n.props.threadID), n.props.onClose(n.props.threadID)
                }, n.collapse = function() {
                    n.props.participants.currentUser && Object(P.d)(n.props.threadID), n.props.onCollapse(n.props.threadID)
                }, n.handleKeydown = function(e) {
                    if ((e.charCode || e.keyCode) === k.a.Enter) {
                        var t = n.autocompleteInput.getValue();
                        n.autocompleteInput.setValue(""), n.sendWhisper(t)
                    }
                }, n.handleClick = function() {
                    n.props.onFocus(n.props.threadID), n.markThreadMessagesAsRead()
                }, n.markThreadMessagesAsRead = function() {
                    if (!(n.props.data.loading || n.props.data.error || n.props.data.whisperThread && 0 === n.props.data.whisperThread.unreadMessagesCount)) {
                        var e = l.__assign({}, Object(S.a)({
                            threadID: n.props.threadID,
                            lastReadMessageID: n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id || ""
                        }), {
                            optimisticResponse: {
                                updateWhisperThread: {
                                    thread: {
                                        __typename: "WhisperThread",
                                        id: n.props.threadID,
                                        unreadMessagesCount: 0
                                    },
                                    __typename: "UpdateWhisperThreadPayload"
                                }
                            }
                        });
                        n.props.updateThread && n.props.updateThread(e)
                    }
                }, n.sendWhisper = function(e) {
                    if ("" !== e) {
                        n.props.data.error && n.addNewThreadSendWhisper(e);
                        var t = Object(he.b)(n.props.threadID, n.props.currentUserID);
                        if (!t) return void g.i.warn("Unable to parse whisper recipient ID.");
                        n.props.participants.currentUser && n.props.participants.user && Object(P.m)({
                            threadID: n.props.threadID,
                            targetUserLogin: n.props.participants.user.login
                        }), Object(me.a)({
                            currentUserID: n.props.currentUserID,
                            emotes: n.props.emotes,
                            message: e,
                            recipientUserID: t
                        }).catch(function() {
                            var e = Object(g.d)("Your whisper was not delivered.", "Thread"),
                                t = n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id;
                            n.props.notifyWhisperThread(n.props.threadID, e, t)
                        })
                    }
                }, n.setAutocompleteInnerComponentRef = function(e) {
                    n.textInput = e
                }, n.setAutocompleteInputRef = function(e) {
                    return n.autocompleteInput = e
                }, n.handleContentClick = function() {
                    document.getSelection().toString() || n.textInput.focus()
                }, n.state = {
                    newThreadMessages: []
                }, n
            }
            return l.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                var t = this;
                if (e.data.error || e.data.loading || !e.data.whisperThread || this.props.reportThreadData(e.threadID, e.data.whisperThread), this.props.data.error) {
                    var n = !1;
                    this.props.pubsub.messages.whisperReceived !== e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived.data_object.thread_id === this.props.threadID && (n = !0), this.props.pubsub.messages.whisperSent !== e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent.data_object.thread_id === this.props.threadID && (n = !0), n && (clearTimeout(this.refetchTimeout), this.refetchTimeout = setTimeout(function() {
                        t.props.data.refetch()
                    }, 200))
                }
            }, t.prototype.componentDidUpdate = function(e) {
                e.data.whisperThread && this.props.data.whisperThread && (this.props.data.whisperThread.messages.edges.length, e.data.whisperThread.messages.edges.length)
            }, t.prototype.render = function() {
                var e = h({
                    "whispers-thread": !0,
                    "whispers-thread--collapsed": this.props.collapsed,
                    "whispers-thread--focused": this.props.focused
                });
                return this.props.hidden ? null : c.createElement(f.a, {
                    onClickOut: this.onClickOut
                }, c.createElement(M._17, {
                    className: e,
                    display: M.H.Flex,
                    flexShrink: 0,
                    flexGrow: 0,
                    position: M._2.Relative,
                    background: M.m.Base,
                    margin: {
                        left: 1
                    },
                    alignItems: M.c.Center,
                    justifyContent: M.T.Center,
                    "data-a-target": "whisper-thread-" + this.props.threadID + (this.props.collapsed ? "-collapsed" : ""),
                    elevation: 3
                }, c.createElement(M.U, {
                    className: "whisper-thread__input",
                    position: M._2.Absolute,
                    fullWidth: !0,
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    attachBottom: !0
                }, c.createElement(E.b, {
                    componentType: E.a.Input,
                    suggestionSource: E.c.Whisper,
                    iconRight: !0,
                    onFocus: this.handleClick,
                    onClick: this.handleClick,
                    onKeyDown: this.handleKeydown,
                    componentRefDelegate: this.setAutocompleteInnerComponentRef,
                    refDelegate: this.setAutocompleteInputRef
                }, c.createElement(E.d, {
                    emotes: this.getEmotes()
                })), c.createElement(C.a, {
                    attachBottom: !0,
                    attachRight: !0,
                    inputRef: this.textInput,
                    onClickEmote: this.onEmoticonClick,
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    position: M._2.Absolute,
                    shouldCloseOnClickOut: !0
                })), c.createElement(M.P, {
                    fullWidth: !0
                }, c.createElement("div", {
                    className: "whispers-thread__content",
                    onClick: this.handleContentClick
                }, this.renderContent())), c.createElement(M.U, {
                    position: M._2.Absolute,
                    fullWidth: !0,
                    flexShrink: 0,
                    display: M.H.Flex,
                    alignItems: M.c.Center,
                    attachTop: !0
                }, c.createElement(ae, {
                    isHighlighted: !!(this.props.data.whisperThread && this.props.data.whisperThread.unreadMessagesCount > 0),
                    isFocused: !!this.props.focused,
                    isMuted: !!this.props.data.whisperThread && this.props.data.whisperThread.isMuted,
                    isCollapsed: this.props.collapsed,
                    isLoading: this.props.data.loading || this.props.participants.loading || !this.props.participants.user || !this.props.participants.currentUser,
                    participants: this.props.participants,
                    spamInfo: this.props.data.whisperThread && this.props.data.whisperThread.spamInfo,
                    threadID: this.props.threadID,
                    collapse: this.collapse,
                    onHeaderClick: this.handleHeaderClick,
                    onBlock: this.onBlock,
                    onUnblock: this.onUnblock,
                    onClose: this.handleClose
                }))))
            }, t.prototype.renderContent = function() {
                var e;
                return this.props.data.error ? (e = c.createElement(v.a, {
                    message: Object(g.d)("Sorry, something went wrong loading this conversation.", "WhisperThread")
                }), e = c.createElement(M.U, null), this.props.participants.currentUser && this.props.participants.user && (e = c.createElement(pe, {
                    thread: this.getPlaceholderThreadFromLocalState(),
                    unreadMessagesCount: 0,
                    participantsByID: this.getUsersByID([this.props.participants.currentUser, this.props.participants.user]),
                    loadMore: this.loadMore
                }))) : e = this.props.data.loading || this.props.participants.loading || !this.props.data.whisperThread ? c.createElement(M.U, {
                    display: M.H.Flex,
                    justifyContent: M.T.Center,
                    alignItems: M.c.Center,
                    margin: 2,
                    fullHeight: !0,
                    flexGrow: 1
                }, c.createElement(M.X, null)) : c.createElement(pe, {
                    thread: this.props.data.whisperThread,
                    participantsByID: this.getUsersByID(this.props.data.whisperThread.participants),
                    unreadMessagesCount: this.props.data.whisperThread.unreadMessagesCount,
                    loadMore: this.loadMore
                }), e
            }, t.prototype.getUsersByID = function(e) {
                for (var t = {}, n = 0, i = e; n < i.length; n++) {
                    var a = i[n];
                    t[a.id] = a
                }
                return t
            }, t = l.__decorate([Object(b.a)(ge, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: Object(he.b)(e.threadID, e.currentUserID) || ""
                        },
                        skip: !e.currentUserID || !e.threadID
                    }
                },
                name: "participants"
            }), Object(b.a)(fe, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.threadID
                        }
                    }
                },
                props: function(e) {
                    return l.__assign({}, e, {
                        loadMore: function() {
                            return e.data.fetchMore({
                                query: fe,
                                variables: l.__assign({}, e.data.variables, {
                                    cursor: e.data.whisperThread && e.data.whisperThread.messages.edges[e.data.whisperThread.messages.edges.length - 1].cursor
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult,
                                        i = n;
                                    if (!i.whisperThread) return {
                                        whisperThread: null
                                    };
                                    if (!e.whisperThread) return {
                                        whisperThread: i.whisperThread
                                    };
                                    var a = l.__assign({}, i.whisperThread.messages, {
                                        edges: Object(S.b)(e.whisperThread.messages.edges, i.whisperThread.messages.edges)
                                    });
                                    return {
                                        whisperThread: l.__assign({}, i.whisperThread, {
                                            messages: a
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            }), Object(y.a)([{
                topic: function(e) {
                    return Object(_.p)(e.currentUserID)
                },
                mapMessageTypesToProps: {
                    whisper_received: "whisperReceived",
                    whisper_sent: "whisperSent"
                }
            }]), Object(b.a)(ve, {
                name: "updateThread"
            })], t)
        }(c.Component),
        ye = be,
        ke = Object(d.a)(null, o)(ye);
    n(478);
    n.d(t, "b", function() {
        return Se
    }), n.d(t, "a", function() {
        return _e
    });
    var Se, _e = function(e) {
        function t() {
            var t = null !== e && e.apply(this, arguments) || this;
            return t.resizeAnimationHandle = null, t.renderThread = function(e) {
                return e ? c.createElement(ke, {
                    key: e.threadID,
                    currentUserID: t.props.currentUserID,
                    collapsed: e.collapsed,
                    hidden: e.hidden,
                    threadID: e.threadID,
                    onBlock: t.onBlock,
                    onCollapse: t.props.onCollapseThread,
                    emotes: t.props.emotes,
                    onClose: t.props.onCloseThread,
                    onExpand: t.props.onExpandThread,
                    onFocus: t.props.onFocusThread,
                    onUnfocus: t.props.onUnfocusThread,
                    focused: t.props.focusedThreadID === e.threadID,
                    reportThreadData: t.props.reportThreadData
                }) : null
            }, t.onBlock = function(e) {
                t.props.archiveThread(e), t.props.onBlockThread(e)
            }, t.setOpenThreadsRef = function(e) {
                return Se = e
            }, t.handleContentResize = function() {
                t.resizeAnimationHandle || (t.resizeAnimationHandle = requestAnimationFrame(function() {
                    t.props.onResizeContent(), t.resizeAnimationHandle = null
                }))
            }, t
        }
        return l.__extends(t, e), t.prototype.render = function() {
            var e = this,
                t = this.props.openedThreads.map(function(t) {
                    return e.renderThread(t)
                });
            return c.createElement(M.U, {
                className: "whispers-open-threads",
                display: M.H.Flex,
                flexDirection: M.J.RowReverse,
                alignItems: M.c.End,
                position: M._2.Absolute,
                attachBottom: !0,
                attachLeft: !0,
                refDelegate: this.setOpenThreadsRef
            }, t, c.createElement(u.a, {
                onResize: this.handleContentResize
            }))
        }, t
    }(c.Component)
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return r.__awaiter(this, void 0, void 0, function() {
            var t, n, i, a, p, m, h, g;
            return r.__generator(this, function(r) {
                switch (r.label) {
                    case 0:
                        return (t = e.friendActivity) ? (n = Object(c.d)(e.friendLogin, t)) ? (i = "/" === n[0] ? n.slice(1) : n, t.type !== s.a.Streaming ? [3, 1] : (a = {
                            target_action: d.Streaming,
                            target_channel: e.friendLogin,
                            target_game: t.stream.game && t.stream.game.name || void 0,
                            target_login: e.friendLogin,
                            target_url: i,
                            ui_context: e.context
                        }, [3, 7])) : (o.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2]) : (o.i.warn("[trackPresenceClick] Attempted to track a click with no activity."), [2]);
                    case 1:
                        if (t.type !== s.a.Watching) return [3, 6];
                        p = void 0, m = null, r.label = 2;
                    case 2:
                        return r.trys.push([2, 4, , 5]), [4, o.n.apollo.client.query({
                            query: u,
                            variables: {
                                login: t.user.login
                            }
                        })];
                    case 3:
                        return m = r.sent(), [3, 5];
                    case 4:
                        return h = r.sent(), o.i.error(h, "[trackPresenceClick] Failed to query watched user data.", {
                            watchedUser: t.user.login
                        }), [3, 5];
                    case 5:
                        return g = m && m.data && m.data.user, g ? p = g.hosting.stream ? g.hosting.stream.game && g.hosting.stream.game.name || void 0 : g.stream && g.stream.game && g.stream.game.name || void 0 : o.i.error(new Error("GraphQL empty response"), "[trackPresenceClick] Query for watched user info returned no data.", {
                            watchedUser: t.user.login
                        }), a = {
                            target_action: d.Watching,
                            target_channel: t.user.login,
                            target_game: p,
                            target_hosted_channel: t.user.hosting && t.user.hosting.login || void 0,
                            target_login: e.friendLogin,
                            target_url: i,
                            ui_context: e.context
                        }, [3, 7];
                    case 6:
                        return o.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2];
                    case 7:
                        return o.m.track(l.SpadeEventType.PresenceClick, a), [2]
                }
            })
        })
    }
    n.d(t, "a", function() {
        return a
    }), t.b = i;
    var a, r = n(0),
        o = n(2),
        s = n(109),
        l = n(12),
        c = n(70),
        u = n(461);
    n.n(u);
    ! function(e) {
        e.FriendsListButton = "friends", e.WhisperHeaderButton = "convo_join", e.WhisperHeaderLink = "convo_link"
    }(a || (a = {}));
    var d;
    ! function(e) {
        e.Streaming = "streaming", e.Watching = "watching"
    }(d || (d = {}))
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(2),
        o = n(3),
        s = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.onHistoryChange = function(e) {
                    n.setState({
                        currentPathname: e.pathname
                    })
                }, n.shouldShow = function() {
                    return n.props.link && n.state.currentPathname !== n.props.link.pathname
                }, n.state = {
                    currentPathname: location.pathname
                }, n
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.historyUnlisten = r.n.history.listen(this.onHistoryChange)
            }, t.prototype.componentWillUnmount = function() {
                this.historyUnlisten()
            }, t.prototype.render = function() {
                return this.props.link && this.shouldShow() ? a.createElement(o.u, {
                    linkTo: this.props.link,
                    onClick: this.props.onClick,
                    overlay: this.props.shouldHollowOverlay,
                    size: o.x.Small,
                    tabIndex: -1,
                    type: this.props.shouldHollowOverlay ? o.z.Hollow : o.z.Default
                }, Object(r.d)("Join", "JoinButton")) : null
            }, t
        }(a.Component);
    n.d(t, "a", function() {
        return s
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        var t = e.split(/\s+/),
            n = [];
        return t.forEach(function(e, i) {
            var a = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w.\/@#%&()\-+=:?~]*)?)([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
                r = a.exec(e);
            if (r) {
                var s = r.index,
                    l = !1,
                    c = !1,
                    u = r[1];
                u && (s += 1, /\s/.test(u) || (l = !0)), 0 !== s && n.push({
                    type: o.Text,
                    content: (c ? " " : "") + e.slice(0, s) + (l ? " " : "")
                }), c = !1;
                var d = a.lastIndex,
                    p = r[3];
                p && (d -= 1, /\s/.test(p) || (c = !0));
                var m = e.slice(s, d);
                if (m.indexOf("@") > -1 && (-1 === m.indexOf("/") || m.indexOf("@") < m.indexOf("/"))) n.push({
                    type: o.Link,
                    content: {
                        displayText: m,
                        url: "mailto:" + m,
                        shouldOpenInNewTab: !1
                    }
                });
                else {
                    var h = r[2],
                        g = (h ? "" : "https://") + e.slice(s, d);
                    n.push({
                        type: o.Link,
                        content: {
                            displayText: e.slice(s, d),
                            shouldOpenInNewTab: !0,
                            url: g
                        }
                    })
                }
                var f = e.slice(d),
                    v = "";
                i < t.length - 1 && (v = " "), f && n.push({
                    type: o.Text,
                    content: (c ? " " : "") + f + v
                })
            } else {
                var b = n.length && n[n.length - 1],
                    v = "";
                if (i < t.length - 1 && (v = " "), b && b.type === o.Text) b.content += e + v;
                else {
                    var y = "";
                    i && (y = " "), n.push({
                        type: o.Text,
                        content: y + e + v
                    })
                }
            }
        }), n
    }

    function a(e) {
        var t = i(e);
        return t.reduce(function(e, n, i) {
            if (n.type === o.Text) e.push(n.content);
            else if (n.type === o.Link) {
                var a = t[i - 1] && t[i - 1].type === o.Link;
                a && e.push(" "), e.push(s.createElement("a", {
                    key: i,
                    href: n.content.url,
                    target: "__blank"
                }, n.content.displayText))
            }
            return e
        }, [])
    }

    function r(e, t, n) {
        var i = [],
            r = 0,
            o = Object(u.d)(e);
        if (t.forEach(function(t) {
                var n = t.from,
                    l = t.to,
                    p = {
                        themed: !1,
                        sources: {
                            "1x": Object(u.e)("" + t.emoteID, 1),
                            "2x": Object(u.e)("" + t.emoteID, 2),
                            "4x": Object(u.e)("" + t.emoteID, 4)
                        }
                    };
                if (n > r) {
                    var m = o ? o.slice(r, n).join("") : e.slice(r, n);
                    i.push(s.createElement("span", {
                        key: "str-" + r,
                        className: "thread-message__message--part"
                    }, a(m)))
                }
                var h = o ? o.slice(n, l + 1).join("") : e.slice(n, l + 1);
                i.push(s.createElement(c.a, {
                    key: "emote-" + r,
                    tooltipDirection: d._32.Top,
                    className: "thread-message__message--emote",
                    srcSet: p,
                    srcKey: "1x",
                    alt: h
                })), r = l + 1
            }), r < e.length) {
            var p = o ? o.slice(r, o.length).join("") : e.slice(r, e.length);
            i.push(s.createElement("span", {
                key: "str-" + r,
                className: "thread-message__message--part"
            }, a(p)))
        }
        if (n) {
            var m = Object(l.d)("edited", "ThreadMessage"),
                h = Object(l.d)("{timestamp, date, full} {timestamp, time, long}", {
                    timestamp: new Date(n)
                }, "ThreadMessage");
            i.push(s.createElement(d.P, {
                key: "editedAt",
                margin: {
                    left: 1
                }
            }, s.createElement(d._21, {
                type: d._26.Span,
                className: "thread-message__message--edited",
                title: h,
                color: d.F.Alt2
            }, "(" + m + ")")))
        }
        return i
    }
    var o, s = n(1),
        l = n(2),
        c = n(385),
        u = n(129);
    ! function(e) {
        e[e.Text = 0] = "Text", e[e.Link = 1] = "Link"
    }(o || (o = {}));
    var d = n(3);
    t.a = r, n.d(t, "f", function() {
        return p
    }), n.d(t, "e", function() {
        return m
    }), n.d(t, "d", function() {
        return h
    }), n.d(t, "c", function() {
        return g
    }), n.d(t, "b", function() {
        return f
    });
    var p = function(e) {
            var t = r(e.content, e.emotes, e.editedAt);
            if (e.deletedAt) return null;
            var n = e.from && e.from.chatColor || "",
                i = e.from && e.from.displayName || s.createElement(d._21, {
                    type: d._26.Span,
                    italic: !0
                }, Object(l.d)("Unknown", "ThreadMessage"));
            return s.createElement(d.U, {
                padding: {
                    x: 1,
                    y: .5
                }
            }, s.createElement("span", {
                className: "thread-message__message--user-name",
                style: {
                    color: n
                }
            }, i), s.createElement("span", null, ": "), t)
        },
        m = function() {
            return s.createElement(d.U, {
                padding: {
                    y: .5,
                    x: 1
                }
            }, Object(l.d)("Please don't share passwords or personal information.", "whispers"))
        },
        h = function(e) {
            var t = new Date,
                n = Object(l.d)("Today, {timestamp, time, medium}", {
                    timestamp: e.timestamp
                }, "ThreadMessage"),
                i = Object(l.d)("{timestamp, time, medium}", {
                    timestamp: e.timestamp
                }, "ThreadMessage"),
                a = e.timestamp.toDateString() === t.toDateString() ? n : i;
            return s.createElement(d.U, {
                padding: {
                    y: 1
                },
                textAlign: d._22.Center
            }, "" + a)
        },
        g = function(e) {
            return s.createElement(d.U, {
                padding: {
                    y: .5,
                    x: 1
                }
            }, s.createElement(d._21, {
                type: d._26.Span,
                color: d.F.Alt2
            }, e.content))
        },
        f = function() {
            return s.createElement(d.U, {
                textAlign: d._22.Center,
                padding: {
                    y: .5
                }
            }, Object(l.d)("New Whispers", "whispers"))
        }
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            id: "" + e.id,
            start: e.start,
            end: e.end
        }
    }

    function a(e) {
        return {
            __typename: "WhisperMessageEdge",
            cursor: "" + e.data_object.id,
            node: {
                __typename: "WhisperMessage",
                id: e.data_object.message_id,
                sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                editedAt: null,
                deletedAt: null,
                content: {
                    __typename: "MessageBody",
                    content: e.data_object.body,
                    emotes: e.data_object.tags.emotes.map(function(e) {
                        return o(i(e))
                    })
                },
                from: {
                    __typename: "User",
                    id: "" + e.data_object.from_id
                }
            }
        }
    }

    function r(e) {
        return e.map(function(e) {
            return o(i(e))
        })
    }

    function o(e) {
        return {
            from: e.start,
            to: e.end,
            emoteID: e.id,
            id: e.id + ";" + e.start + ";" + e.end,
            setID: "0",
            __typename: "EmbeddedEmote"
        }
    }
    t.c = a, t.b = r, t.a = o
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            isExpanded: e.ui.rightColumnExpanded,
            theatreModeEnabled: e.ui.theatreModeEnabled,
            sideNavExpanded: e.ui.sideNavExpanded
        }
    }

    function a(e) {
        return {
            collapse: function() {
                return e(o.i())
            },
            expand: function() {
                return e(o.m())
            }
        }
    }
    var r = n(6),
        o = n(58),
        s = n(142),
        l = Object(r.a)(i, a)(s.c);
    n.d(t, "b", function() {
        return l
    }), n.d(t, "a", function() {
        return s.a
    })
}, , function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    }), n.d(t, "b", function() {
        return s
    }), n.d(t, "c", function() {
        return l
    });
    var i, a = n(0),
        r = n(2),
        o = n(12);
    ! function(e) {
        e.Chat = "chat", e.SocialColumn = "socialcolumn"
    }(i || (i = {}));
    var s;
    ! function(e) {
        e.Close = "close", e.Open = "open"
    }(s || (s = {}));
    var l = function(e) {
        var t = a.__assign({
            action_type: "click"
        }, e);
        r.m.track(o.SpadeEventType.SiteLayoutMod, t)
    }
}, function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return i
    });
    var i = {
        resource: {
            isSocialColumnClosedByUserAction: !1,
            isRightColumnClosedByUserAction: !1
        },
        time: Date.now()
    }
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "OnlineFriends"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "friends"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "activity"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "InlineFragment",
                                                    typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Playing"
                                                        }
                                                    },
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "game"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "name"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "InlineFragment",
                                                    typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Streaming"
                                                        }
                                                    },
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "stream"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "game"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "name"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "InlineFragment",
                                                    typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Watching"
                                                        }
                                                    },
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "user"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "displayName"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "login"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "hosting"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "displayName"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "login"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "availability"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "profileImageURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "70"
                                                        }
                                                    }],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "hosting"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 841
        }
    };
    n.loc.source = {
        body: "query OnlineFriends {\n  currentUser {\n    id\n    friends {\n      edges {\n        activity {\n          type\n          ... on Playing {\n            game {\n              id\n              name\n            }\n          }\n          ... on Streaming {\n            stream {\n              id\n              game {\n                id\n                name\n              }\n            }\n          }\n          ... on Watching {\n            user {\n              id\n              displayName\n              login\n              hosting {\n                id\n                displayName\n                login\n              }\n            }\n          }\n        }\n        availability\n        node {\n          id\n          displayName\n          login\n          profileImageURL(width: 70)\n          hosting {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return !e.isLoggedIn && e.location.pathname === a
    }
    t.a = i;
    var a = "/"
}, , , , , , , , function(e, t) {}, , function(e, t) {}, function(e, t) {}, , , , , , , , , , , function(e, t, n) {
    (function(t) {
        function n(e, t, n) {
            switch (n.length) {
                case 0:
                    return e.call(t);
                case 1:
                    return e.call(t, n[0]);
                case 2:
                    return e.call(t, n[0], n[1]);
                case 3:
                    return e.call(t, n[0], n[1], n[2])
            }
            return e.apply(t, n)
        }

        function i(e, t) {
            for (var n = -1, i = e ? e.length : 0, a = Array(i); ++n < i;) a[n] = t(e[n], n, e);
            return a
        }

        function a(e, t) {
            for (var n = -1, i = t.length, a = e.length; ++n < i;) e[a + n] = t[n];
            return e
        }

        function r(e, t, n, i, o) {
            var s = -1,
                c = e.length;
            for (n || (n = l), o || (o = []); ++s < c;) {
                var u = e[s];
                t > 0 && n(u) ? t > 1 ? r(u, t - 1, n, i, o) : a(o, u) : i || (o[o.length] = u)
            }
            return o
        }

        function o(e, t) {
            return e = Object(e), s(e, t, function(t, n) {
                return n in e
            })
        }

        function s(e, t, n) {
            for (var i = -1, a = t.length, r = {}; ++i < a;) {
                var o = t[i],
                    s = e[o];
                n(s, o) && (r[o] = s)
            }
            return r
        }

        function l(e) {
            return F(e) || u(e) || !!(x && e && e[x])
        }

        function c(e) {
            if ("string" == typeof e || v(e)) return e;
            var t = e + "";
            return "0" == t && 1 / e == -b ? "-0" : t
        }

        function u(e) {
            return p(e) && D.call(e, "callee") && (!L.call(e, "callee") || I.call(e) == k)
        }

        function d(e) {
            return null != e && h(e.length) && !m(e)
        }

        function p(e) {
            return f(e) && d(e)
        }

        function m(e) {
            var t = g(e) ? I.call(e) : "";
            return t == S || t == _
        }

        function h(e) {
            return "number" == typeof e && e > -1 && e % 1 == 0 && e <= y
        }

        function g(e) {
            var t = typeof e;
            return !!e && ("object" == t || "function" == t)
        }

        function f(e) {
            return !!e && "object" == typeof e
        }

        function v(e) {
            return "symbol" == typeof e || f(e) && I.call(e) == w
        }
        var b = 1 / 0,
            y = 9007199254740991,
            k = "[object Arguments]",
            S = "[object Function]",
            _ = "[object GeneratorFunction]",
            w = "[object Symbol]",
            E = "object" == typeof t && t && t.Object === Object && t,
            C = "object" == typeof self && self && self.Object === Object && self,
            N = E || C || Function("return this")(),
            T = Object.prototype,
            D = T.hasOwnProperty,
            I = T.toString,
            O = N.Symbol,
            L = T.propertyIsEnumerable,
            x = O ? O.isConcatSpreadable : void 0,
            R = Math.max,
            F = Array.isArray,
            U = function(e, t) {
                return t = R(void 0 === t ? e.length - 1 : t, 0),
                    function() {
                        for (var i = arguments, a = -1, r = R(i.length - t, 0), o = Array(r); ++a < r;) o[a] = i[t + a];
                        a = -1;
                        for (var s = Array(t + 1); ++a < t;) s[a] = i[a];
                        return s[t] = o, n(e, this, s)
                    }
            }(function(e, t) {
                return null == e ? {} : o(e, i(r(t, 1), c))
            });
        e.exports = U
    }).call(t, n(35))
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, n) {
    "use strict";

    function i(e, t) {
        var n = [],
            i = t.indexedActions,
            l = new RegExp("^(" + Object.keys(i).join("|") + ")(\\d+)$", "i"),
            c = e.split(/\s+/);
        return c.forEach(function(e, t) {
            var u = l.exec(e);
            if (u) {
                var d = u[1].toLowerCase(),
                    p = +u[2],
                    m = i[d];
                if (m || d !== r.e || (m = Object(o.b)()), m) {
                    var h = m.orderedTiers.find(function(e) {
                        return e.bits <= p
                    });
                    !h && p && (h = m.orderedTiers[0]), h && n.push({
                        type: s.a.Emote,
                        content: {
                            images: a(h),
                            alt: m.prefix,
                            cheerAmount: p,
                            cheerColor: h.color
                        }
                    })
                }
            } else {
                var g = n.length && n[n.length - 1],
                    f = "";
                if (t < c.length - 1 && (f = " "), g && g.type === s.a.Text) g.content += e + f;
                else {
                    var v = "";
                    t && (v = " "), n.push({
                        type: s.a.Text,
                        content: v + e + f
                    })
                }
            }
        }), n
    }

    function a(e, t, n) {
        void 0 === n && (n = !0);
        var i = n ? "animated" : "static";
        return t ? {
            themed: !0,
            dark: (a = {}, a[t + "x"] = e.indexedImages.DARK[i].get(t), a),
            light: (r = {}, r[t + "x"] = e.indexedImages.LIGHT[i].get(t), r)
        } : {
            themed: !0,
            dark: {
                "1x": e.indexedImages.DARK[i].get(1),
                "1.5x": e.indexedImages.DARK[i].get(1.5),
                "2x": e.indexedImages.DARK[i].get(2),
                "3x": e.indexedImages.DARK[i].get(3),
                "4x": e.indexedImages.DARK[i].get(4)
            },
            light: {
                "1x": e.indexedImages.LIGHT[i].get(1),
                "1.5x": e.indexedImages.LIGHT[i].get(1.5),
                "2x": e.indexedImages.LIGHT[i].get(2),
                "3x": e.indexedImages.LIGHT[i].get(3),
                "4x": e.indexedImages.LIGHT[i].get(4)
            }
        };
        var a, r
    }
    n.d(t, "a", function() {
        return l
    }), t.c = i, t.b = a;
    var r = n(259),
        o = n(373),
        s = n(260),
        l = {
            indexedActions: {},
            orderedActions: []
        }
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            darkModeEnabled: Object(l.a)(e) === s.a.Dark
        }
    }
    var a = n(0),
        r = n(1),
        o = n(6),
        s = n(33),
        l = n(52),
        c = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this.props,
                    t = (e.defaultRes, e.sources),
                    n = (e.darkModeEnabled, a.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                    i = this.props.darkModeEnabled ? t.dark : t.light,
                    o = Object.keys(i);
                delete n.dispatch;
                var s = a.__assign({}, n, {
                    src: i[this.props.defaultRes || o[0]],
                    srcSet: o.map(function(e) {
                        return i[e] + " " + e
                    }).join(",")
                });
                return r.createElement("img", a.__assign({}, s, {
                    onLoad: this.props.onLoad
                }))
            }, t
        }(r.Component),
        u = Object(o.a)(i)(c);
    n.d(t, "a", function() {
        return u
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return e ? "/directory/" + e : "/directory"
    }

    function a(e) {
        return "/directory/game/" + encodeURIComponent(e)
    }

    function r(e) {
        return "/communities/" + encodeURIComponent(e)
    }

    function o(e) {
        return "/settings/" + encodeURIComponent(e)
    }

    function s(e) {
        return "/events/" + encodeURIComponent(e)
    }
    t.b = i, t.d = a, t.a = r, t.e = o, t.c = s
}, function(e, t, n) {
    "use strict";

    function i() {
        if (!h) {
            var e = [],
                t = {};
            Object.keys(d).forEach(function(n) {
                var i = o(n, d[n]);
                e.push(i), t[n.toLowerCase()] = i
            }), h = {
                orderedActions: e,
                indexedActions: t
            }
        }
        return h
    }

    function a() {
        return g || (g = r("Cheer")), g
    }

    function r(e) {
        return h ? h.indexedActions[e] : o(e, d[e])
    }

    function o(e, t) {
        var n = [c.a.Red, c.a.Blue, c.a.Green, c.a.Purple, c.a.Gray],
            i = new Map,
            a = n.map(function(t) {
                var n = s(e, t);
                return i.set(t, n), n
            });
        return {
            prefix: e,
            type: t,
            tiers: a,
            orderedTiers: a,
            indexedTiers: i
        }
    }

    function s(e, t) {
        for (var n = [], i = {}, a = 0, r = p; a < r.length; a++)
            for (var o = r[a], s = 0, c = m; s < c.length; s++) {
                var d = c[s];
                i[o] || (i[o] = {
                    animated: new Map,
                    static: new Map
                });
                var h = l(e, o, !0, t, d);
                n.push(h), i[o].animated.set(d, h.url);
                var g = l(e, o, !1, t, d);
                n.push(g), i[o].static.set(d, g.url)
            }
        return {
            id: e + ";" + t,
            bits: t,
            color: u.d[t],
            images: n,
            indexedImages: i
        }
    }

    function l(e, t, n, i, a) {
        var r = n ? "gif" : "png";
        return {
            theme: t,
            isAnimated: n,
            dpiScale: a,
            url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + a + "." + r
        }
    }
    t.a = i, t.b = a;
    var c = n(270),
        u = n(259),
        d = {
            Cheer: u.b,
            Kreygasm: u.b,
            Kappa: u.b,
            Muxy: u.c,
            Streamlabs: u.c,
            SwiftRage: u.b,
            VoHiYo: u.b
        },
        p = ["LIGHT", "DARK"],
        m = [1, 1.5, 2, 3, 4],
        h = null,
        g = null
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return Object(l.bindActionCreators)({
            closeModal: u.c
        }, e)
    }
    var a = n(274),
        r = n(0),
        o = n(1),
        s = n(6),
        l = n(9),
        c = n(104),
        u = n(38),
        d = n(5),
        p = n(3),
        m = (n(494), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleClose = function(e) {
                    t.props.closeModal(), t.props.onClose && t.props.onClose(e)
                }, t
            }
            return r.__extends(t, e), t.prototype.render = function() {
                return o.createElement(p._17, {
                    className: "reporting-modal__container",
                    background: p.m.Base,
                    padding: {
                        x: 2,
                        y: 3
                    }
                }, o.createElement(a.a, {
                    onClose: this.handleClose,
                    reportContext: this.props.reportContext,
                    title: this.props.title,
                    defaultDescription: this.props.defaultDescription
                }), o.createElement(c.a, null))
            }, t
        }(o.Component)),
        h = Object(l.compose)(Object(d.c)("ReportUserModal"), Object(s.a)(null, i))(m);
    n.d(t, !1, function() {}), n.d(t, !1, function() {
        return a.a
    }), n.d(t, !1, function() {
        return m
    }), n.d(t, "a", function() {
        return h
    })
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        var n = Math.floor(e % 60),
            i = Math.floor(e % 3600 / 60),
            r = Math.floor(e / 3600);
        return t && t.zeroPadAll ? a(r, 2) + ":" + a(i, 2) + ":" + a(n, 2) : r ? r + ":" + a(i, 2) + ":" + a(n, 2) : i + ":" + a(n, 2)
    }

    function a(e, t) {
        return t -= e.toString().length, t > 0 ? new Array(t + (/\./.test(e.toString()) ? 2 : 1)).join("0") + e : e.toString()
    }
    t.a = i
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        return {
            type: D,
            channel: e,
            messages: t
        }
    }

    function a() {
        return {
            type: S
        }
    }

    function r() {
        return {
            type: U
        }
    }

    function o() {
        return {
            type: P
        }
    }

    function s() {
        return {
            type: _
        }
    }

    function l() {
        return {
            type: k
        }
    }

    function c() {
        return {
            type: I
        }
    }

    function u() {
        return {
            type: O
        }
    }

    function d() {
        return {
            type: E
        }
    }

    function p(e, t) {
        return {
            type: T,
            channelLogin: e,
            duration: t
        }
    }

    function m(e) {
        return {
            type: N,
            duration: e
        }
    }

    function h() {
        return {
            type: C
        }
    }

    function g() {
        return {
            type: L
        }
    }

    function f() {
        return {
            type: x
        }
    }

    function v() {
        return {
            type: R
        }
    }

    function b() {
        return {
            type: F
        }
    }

    function y(e) {
        return {
            type: w,
            emoteSets: e
        }
    }
    n.d(t, "a", function() {
        return k
    }), n.d(t, "b", function() {
        return S
    }), n.d(t, "c", function() {
        return _
    }), n.d(t, "d", function() {
        return w
    }), n.d(t, "h", function() {
        return E
    }), n.d(t, "e", function() {
        return C
    }), n.d(t, "f", function() {
        return N
    }), n.d(t, "g", function() {
        return T
    }), n.d(t, "i", function() {
        return D
    }), n.d(t, "k", function() {
        return I
    }), n.d(t, "j", function() {
        return O
    }), n.d(t, "m", function() {
        return L
    }), n.d(t, "l", function() {
        return x
    }), n.d(t, "o", function() {
        return R
    }), n.d(t, "n", function() {
        return F
    }), n.d(t, "q", function() {
        return U
    }), n.d(t, "p", function() {
        return P
    }), t.F = i, t.t = a, t.D = r, t.y = o, t.G = s, t.E = l, t.A = c, t.v = u, t.z = d, t.s = p, t.r = m, t.u = h, t.B = g, t.w = f, t.C = v, t.x = b, t.H = y;
    var k = "chat.CHAT_HIDDEN",
        S = "chat.CHAT_RESET",
        _ = "chat.CHAT_SHOWN",
        w = "chat.EMOTE_SETS_UPDATED",
        E = "chat.FOLLOWER_MODE_ENABLED",
        C = "chat.FOLLOWER_MODE_DISABLED",
        N = "chat.FOLLOWER_MODE_DURATION_CHANGED",
        T = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
        D = "chat.MESSAGES_UPDATED",
        I = "chat.MODICONS_ENABLED",
        O = "chat.MOD_ICONS_DISABLED",
        L = "chat.SLOW_MODE_ENABLED",
        x = "chat.SLOW_MODE_DISABLED",
        R = "chat.SUBS_ONLY_MODE_ENABLED",
        F = "chat.SUBS_ONLY_MODE_DISABLED",
        U = "chat.TIMESTAMPS_ENABLED",
        P = "chat.TIMESTAMPS_DISABLED"
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(2),
        o = (n(451), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.logger = r.n.logger.withCategory("resize-detector"), t.onScroll = function() {
                    var e = t.container,
                        n = e.offsetWidth,
                        i = e.offsetHeight,
                        a = e.offsetLeft,
                        r = e.offsetTop;
                    t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && r === t.top && a === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, r, a)), t.reset()
                }, t.setGrowDivRef = function(e) {
                    return t.growDiv = e
                }, t.setGrowChildDivRef = function(e) {
                    return t.growChildDiv = e
                }, t.setShrinkDivRef = function(e) {
                    return t.shrinkDiv = e
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                return a.createElement("div", {
                    className: "resize-detector"
                }, a.createElement("div", {
                    className: "resize-detector",
                    ref: this.setGrowDivRef
                }, a.createElement("div", {
                    className: "resize-detector__grow",
                    ref: this.setGrowChildDivRef
                })), a.createElement("div", {
                    className: "resize-detector",
                    ref: this.setShrinkDivRef
                }, a.createElement("div", {
                    className: "resize-detector__shrink"
                })))
            }, t.prototype.componentDidMount = function() {
                if (!this.growDiv) return void this.logger.warn("growDiv is undefined!");
                this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                var e = this.container.style.position;
                "relative" !== e && "absolute" !== e && "fixed" !== e && "static" === window.getComputedStyle(this.container).getPropertyValue("position") && (this.container.style.position = "relative"), this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
            }, t.prototype.componentWillUnmount = function() {
                this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
            }, t.prototype.reset = function() {
                var e = this,
                    t = e.growDiv,
                    n = e.shrinkDiv,
                    i = this.growChildDiv.style;
                i.width = "100000px", i.height = "100000px", t.scrollLeft = 1e5, t.scrollTop = 1e5, n.scrollLeft = 1e5, n.scrollTop = 1e5
            }, t
        }(a.Component));
    n.d(t, "a", function() {
        return o
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        m.emit(d, e)
    }

    function a(e) {
        m.emit(p, e)
    }
    n.d(t, "b", function() {
        return s
    }), n.d(t, "c", function() {
        return l
    }), n.d(t, "d", function() {
        return c
    }), n.d(t, "a", function() {
        return u
    }), n.d(t, "f", function() {
        return d
    }), n.d(t, "e", function() {
        return p
    }), n.d(t, "g", function() {
        return m
    }), t.i = i, t.h = a;
    var r = n(24),
        o = (n.n(r), n(2)),
        s = {
            directory: {
                banner: "dfp-directory-banner",
                rectangle: "dfp-directory-rectangle"
            },
            channel250: "google_companion_300x250",
            anonFront: {
                rect: "Twitch_FPMedRect_holder",
                banner: "Twitch_FPopaBanner_holder",
                takeover: "Twitch_FPTakeoverSkinv2_holder",
                bottom: "Twitch_FP970Bottom_holder",
                sizzle: "sizzle_strip"
            },
            front: {
                leaderboard: "hpto_logged_in_leaderboard",
                rightTop: "hpto_logged_in_rcol_top",
                rightBottom: "hpto_logged_in_rcol_bottom"
            }
        },
        l = {
            directory: {
                banner: [
                    [970, 66],
                    [970, 250],
                    [728, 90]
                ],
                rectangle: [
                    [300, 250]
                ]
            },
            channel250: [300, 250],
            anonFront: {
                rect: [
                    [300, 250]
                ],
                banner: [
                    [970, 418],
                    [970, 67],
                    [970, 250],
                    [970, 150],
                    [980, 250]
                ],
                takeover: [
                    [1, 1]
                ],
                bottom: [
                    [970, 66],
                    [728, 90]
                ],
                sizzle: [
                    [980, 250]
                ]
            },
            front: {
                leaderboard: [
                    [970, 66],
                    [728, 90]
                ],
                rightTop: [
                    [300, 250]
                ],
                rightBottom: [
                    [300, 600]
                ]
            }
        },
        c = {
            directory: "/" + o.a.dfpNetworkCode + "/twitch/directory",
            channel: "/" + o.a.dfpNetworkCode + "/twitch/channels",
            frontpage: "/" + o.a.dfpNetworkCode + "/twitch/homepage",
            sizzle: "/" + o.a.dfpNetworkCode + "/twitch/sizzle_strip"
        },
        u = {
            games: "games",
            channel: "channel",
            frontpage: "homepage"
        },
        d = "ads.slot-render-end",
        p = "ads.slot-ready",
        m = new r.EventEmitter
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return e.split("").map(function(e) {
            return e.charCodeAt(0) > 127
        }).reduce(function(e, t) {
            return e || t
        })
    }

    function a(e, t) {
        var n = e,
            a = !1;
        return n ? i(n) && (a = !0) : n = t, {
            userDisplayName: n,
            isIntl: a
        }
    }
    t.a = a
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            firstPageLoaded: e.session.firstPageLoaded
        }
    }
    var a = n(6),
        r = n(0),
        o = n(1),
        s = n(64),
        l = n(2),
        c = n(3),
        u = function(e) {
            return o.createElement(c.v, {
                icon: c._9.Emoticons,
                ariaLabel: Object(l.d)("Emote picker", "EmotePickerButton"),
                type: c.w.Secondary,
                onClick: e.onClick,
                "data-a-target": "emote-picker-button"
            })
        },
        d = n(271),
        p = n(5),
        m = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    hasInteracted: !1,
                    isEmotePickerMenuVisible: !1,
                    isEmotePickerButtonVisible: !1
                }, t.onClickOut = function() {
                    t.setState({
                        isEmotePickerMenuVisible: !1
                    })
                }, t.onClickEmote = function(e, n) {
                    t.props.onClickEmote && t.props.onClickEmote(e, n)
                }, t.toggleEmotePicker = function() {
                    t.setState(function(e) {
                        return {
                            isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                        }
                    })
                }, t.onEmotePickerDataLoaded = function(e) {
                    e && t.setState({
                        isEmotePickerButtonVisible: !0
                    })
                }, t.onInteraction = function() {
                    return t.setState({
                        hasInteracted: !0
                    })
                }, t
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
            }, t.prototype.componentWillUnmount = function() {
                this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
            }, t.prototype.render = function() {
                var e = null;
                this.state.isEmotePickerButtonVisible && (e = o.createElement(u, {
                    onClick: this.toggleEmotePicker
                }));
                var t = null;
                this.hasInteractedOrPageload && (t = o.createElement(d.a, {
                    channelOwnerID: this.props.channelOwnerID,
                    onClickEmote: this.onClickEmote,
                    onLoad: this.onEmotePickerDataLoaded,
                    toggleVisibility: this.toggleEmotePicker,
                    visible: this.state.isEmotePickerMenuVisible,
                    direction: this.props.direction
                }));
                var n = o.createElement(c.U, r.__assign({
                    className: "emote-picker-and-button"
                }, this.layoutProps), e, t);
                return this.props.shouldCloseOnClickOut ? o.createElement(s.a, {
                    onClickOut: this.onClickOut
                }, n) : n
            }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                get: function() {
                    return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(t.prototype, "layoutProps", {
                get: function() {
                    var e = {
                        attachTop: !!this.props.attachTop,
                        attachRight: !!this.props.attachRight,
                        attachBottom: !!this.props.attachBottom,
                        attachLeft: !!this.props.attachLeft,
                        padding: this.props.padding
                    };
                    return this.props.position && this.props.position in c._2 && (e.position = this.props.position), e
                },
                enumerable: !0,
                configurable: !0
            }), t
        }(o.Component),
        h = Object(p.c)("EmotePicker")(m),
        g = Object(a.a)(i)(h),
        f = n(267);
    n.d(t, "a", function() {
        return g
    }), n.d(t, "c", function() {
        return d.a
    }), n.d(t, !1, function() {
        return f.b
    }), n.d(t, !1, function() {
        return f.a
    }), n.d(t, "b", function() {
        return u
    })
}, , function(e, t, n) {
    "use strict";
    n.d(t, "a", function() {
        return s
    });
    var i = n(0),
        a = n(1),
        r = (n.n(a), n(18)),
        o = n(3),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    showBalloon: !!t.props.openByDefault,
                    hasInteracted: !!t.props.openByDefault
                }, t.toggleBalloonId = Object(r.a)(), t.handleButtonClick = function() {
                    t.setState(function(e) {
                        return {
                            showBalloon: !e.showBalloon,
                            hasInteracted: !0
                        }
                    }, function() {
                        t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                    })
                }, t.handleGlobalClick = function(e) {
                    e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.setState({
                        showBalloon: !1
                    }, function() {
                        t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                    })
                }, t.onMouseEnter = function() {
                    t.state.hasInteracted || t.setState({
                        hasInteracted: !0
                    })
                }, t
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
            }, t.prototype.componentWillUpdate = function(e, t) {
                this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
            }, t.prototype.componentWillUnmount = function() {
                document.removeEventListener("click", this.handleGlobalClick, !0)
            }, t.prototype.render = function() {
                var e = a.Children.toArray(this.props.children);
                if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                var t = e[0],
                    n = e[1];
                if (n.type !== o.p) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                var r = a.cloneElement(t, {
                        onClick: this.handleButtonClick
                    }),
                    s = null;
                (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (s = a.cloneElement(n, {
                    show: this.state.showBalloon
                }));
                var l = r;
                return this.props.tooltipProps && (l = a.createElement(o._30, i.__assign({}, this.props.tooltipProps), r)), a.createElement(o.U, {
                    "data-toggle-balloon-id": this.toggleBalloonId,
                    display: this.props.display,
                    position: o._2.Relative
                }, a.createElement("div", {
                    style: {
                        display: "inherit"
                    },
                    onMouseEnter: this.onMouseEnter,
                    "data-test-selector": "toggle-balloon-wrapper__mouse-enter-detector"
                }, l), s)
            }, t.prototype.toggleBalloon = function(e) {
                void 0 === e && (e = !this.state.showBalloon), this.setState({
                    showBalloon: e,
                    hasInteracted: !0
                })
            }, t
        }(a.Component)
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(2),
        o = n(7),
        s = n(56),
        l = n(3),
        c = n(403),
        u = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return i.__extends(t, e), t.prototype.render = function() {
                return a.createElement(l.S, i.__assign({
                    onClick: this.props.onClick,
                    linkTo: this.props.linkTo,
                    hover: this.props.hover,
                    tabIndex: -1,
                    key: this.props.id
                }, Object(s.a)(this.props)), a.createElement(l.U, {
                    className: "search-game-result-card",
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, a.createElement(l.A, {
                    row: !0
                }, a.createElement(l.C, {
                    imageAlt: this.props.imageAlt,
                    imageSrc: this.props.data && !this.props.data.loading && this.props.data.game ? this.props.data.game.boxArtURL : r.a.defaultBoxArtURL,
                    size: l.D.Size4,
                    aspect: l.k.BoxArt
                }), a.createElement(l.B, null, a.createElement(l.P, {
                    padding: {
                        x: 1
                    }
                }, a.createElement(l._21, {
                    type: l._26.H5,
                    ellipsis: !0
                }, this.props.title))))))
            }, t = i.__decorate([Object(o.a)(c, {
                options: function(e) {
                    return {
                        variables: {
                            name: e.title
                        }
                    }
                }
            })], t)
        }(a.Component);
    n.d(t, "a", function() {
        return u
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            firstPageLoaded: !!e.session.firstPageLoaded
        }
    }
    var a = n(6),
        r = n(0),
        o = n(20),
        s = n(1),
        l = n(2),
        c = n(47),
        u = n(7),
        d = n(105),
        p = n(5),
        m = n(3),
        h = (n(418), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m.U, null, s.createElement(m._17, {
                    className: "prime-offer-header",
                    borderBottom: !0,
                    background: m.m.Alt2,
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, s.createElement(m.U, {
                    flexGrow: 1
                }, s.createElement(m._21, {
                    bold: !0,
                    type: m._26.H6
                }, Object(l.d)("Free with Prime", "PrimeOfferHeader")))), this.getNumOfUnseenOffersDisplay())
            }, t.prototype.getNumOfUnseenOffersDisplay = function() {
                var e = this.props.numOfUnseenOffers;
                if (e) return s.createElement(m._17, {
                    className: "prime-offer__new-offer-header",
                    borderBottom: !0,
                    background: m.m.Alt2,
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, s.createElement(m.U, {
                    fullWidth: !0,
                    display: m.H.Flex
                }, s.createElement(m.U, {
                    flexGrow: 1
                }, s.createElement(m._21, {
                    bold: !0,
                    type: m._26.H6
                }, Object(l.d)("New Prime Loot", "PrimeOfferHeader"))), s.createElement(m.U, {
                    className: "prime-offer__new-offer-header-count",
                    display: m.H.Flex,
                    alignItems: m.c.Center,
                    textAlign: m._22.Center
                }, s.createElement(m._17, {
                    className: "prime-offer__new-offer-header-count__text",
                    background: m.m.Base,
                    color: m.F.Base
                }, s.createElement(m._21, null, e.toString())))))
            }, t = r.__decorate([Object(p.c)("PrimeOfferHeader")], t)
        }(s.Component)),
        g = h,
        f = n(28),
        v = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = Object(l.d)("You'll get characters, vehicles, skins, and boosts for games like {hearthstone} and {smite}, plus surprises like a rotating selection of indie games.", {
                    hearthstone: s.createElement(m._21, {
                        italic: !0,
                        type: m._26.Span
                    }, Object(l.d)("Hearthstone", "PrimeEmpty")),
                    smite: s.createElement(m._21, {
                        italic: !0,
                        type: m._26.Span
                    }, Object(l.d)("Smite", "PrimeEmpty"))
                }, "PrimeEmpty");
                return s.createElement(m.U, {
                    className: "prime-empty",
                    margin: 2
                }, s.createElement(m.U, {
                    textAlign: m._22.Center,
                    margin: 2
                }, s.createElement("img", {
                    className: "prime-empty__image",
                    src: "https://m.media-amazon.com/images/G/01/sm/landing/Trunk_w_Star_transparent._V530838660_.png",
                    alt: Object(l.d)("Prime Treasure Chest", "PrimeEmpty")
                })), s.createElement(m._21, {
                    type: m._26.P,
                    bold: !0
                }, Object(l.d)("Free in-game loot every month, plus surprises", "PrimeEmpty")), s.createElement("div", null, e))
            }, t = r.__decorate([Object(p.c)("PrimeEmpty")], t)
        }(s.Component),
        b = v,
        y = n(65),
        k = n(21),
        S = {
            DIRECT_ENTITLEMENT: "DIRECT_ENTITLEMENT",
            CLAIM_CODE: "CLAIM_CODE",
            EXTERNAL_OFFER: "EXTERNAL_OFFER"
        },
        _ = function(e, t) {
            return e + "-" + t
        },
        w = function() {
            return D("claimedOffers")
        },
        E = function(e) {
            l.k.set("claimedOffers", e)
        },
        C = function() {
            return D("seenOffers")
        },
        N = function(e) {
            l.k.set("seenOffers", e)
        },
        T = function(e, t) {
            return (e && (e.priority || 0 === e.priority) ? e.priority : 99999) - (t && (t.priority || 0 === t.priority) ? t.priority : 99999)
        },
        D = function(e) {
            return l.k.get(e, [])
        },
        I = function() {
            var e = location.search,
                t = o.parse(e);
            return t && t.dateOverride || void 0
        },
        O = (n(419), n(420)),
        L = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m.U, {
                    className: "prime-claim-button"
                }, this.getClaimButton())
            }, t.prototype.getClaimButton = function() {
                var e = this.props,
                    t = this.getButtonText(),
                    n = s.createElement(m.u, {
                        fullWidth: !0,
                        state: this.props.claiming ? m.y.Loading : m.y.Default,
                        disabled: this.props.claiming,
                        onClick: this.props.claimCallback,
                        "data-a-target": "prime-claim-button"
                    }, t);
                return e.offerType === S.EXTERNAL_OFFER ? s.createElement(m.u, {
                    fullWidth: !0,
                    linkTo: e.offerLinkUri,
                    targetBlank: !0
                }, t) : s.createElement(m.U, {
                    position: m._2.Relative
                }, n)
            }, t.prototype.getButtonText = function() {
                return this.props.offerType === S.CLAIM_CODE ? Object(l.d)("Get Code", "PrimeClaimButton") : this.props.offerType === S.EXTERNAL_OFFER ? Object(l.d)("Learn More", "PrimeClaimButton") : Object(l.d)("Claim Offer", "PrimeClaimButton")
            }, t = r.__decorate([Object(u.a)(O), Object(p.c)("PrimeClaimButton")], t)
        }(s.Component),
        x = L,
        R = function(e) {
            function t() {
                var t = e.call(this) || this;
                return t.toggleShowDescription = function() {
                    t.setState({
                        showDescription: !t.state.showDescription
                    })
                }, t.state = {
                    showDescription: !1
                }, t
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m.U, {
                    className: "prime-claim-description",
                    margin: {
                        top: 1
                    }
                }, s.createElement(m.u, {
                    fullWidth: !0,
                    type: m.z.Hollow,
                    onClick: this.toggleShowDescription
                }, this.getDescriptionButtonText()), this.getDescriptionBlock())
            }, t.prototype.getDescriptionButtonText = function() {
                return this.state.showDescription ? Object(l.d)("Close Info", "PrimeClaimDescription") : Object(l.d)("More Info", "PrimeClaimDescription")
            }, t.prototype.getDescriptionBlock = function() {
                var e = null;
                return this.state.showDescription && (e = s.createElement(m._17, {
                    className: "prime-claim-description__body",
                    background: m.m.Alt2,
                    border: !0
                }, s.createElement(m.U, {
                    margin: {
                        bottom: 2
                    },
                    padding: 1
                }, s.createElement(y, {
                    source: this.props.description || ""
                })))), e
            }, t = r.__decorate([Object(p.c)("PrimeClaimDescription")], t)
        }(s.Component),
        F = R,
        U = n(131),
        P = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.getLink = function() {
                return this.props.externalUri ? this.props.externalUri : Object(U.d)(U.c, window.location.pathname.substring(1))
            }, t.prototype.render = function() {
                return s.createElement(m.U, {
                    className: "prime-upsell-button",
                    margin: {
                        top: 2,
                        bottom: 1
                    }
                }, s.createElement(m.u, {
                    fullWidth: !0,
                    linkTo: this.getLink(),
                    targetBlank: !0
                }, Object(l.d)("Start Your Free Trial", "PrimeUpsellButton")))
            }, t = r.__decorate([Object(p.c)("PrimeUpsellButton")], t)
        }(s.Component),
        M = P,
        A = n(421),
        j = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m.U, {
                    className: "prime-claim",
                    margin: {
                        top: 2,
                        bottom: 1
                    }
                }, this.getCallToAction(), this.getClaimDescriptionSection())
            }, t.prototype.getCallToAction = function() {
                var e = this.props.data;
                return !e.loading && !e.error && e.currentUser && e.currentUser.hasPrime ? s.createElement(x, {
                    offerType: this.props.offerType,
                    offerId: this.props.offerId,
                    claimCallback: this.props.claimCallback,
                    claiming: this.props.claiming,
                    offerLinkUri: this.props.externalUri
                }) : s.createElement(M, {
                    externalUri: this.props.externalUri
                })
            }, t.prototype.getClaimDescriptionSection = function() {
                return this.props.offerType === S.EXTERNAL_OFFER ? null : s.createElement(F, {
                    description: this.props.offerDescription
                })
            }, t = r.__decorate([Object(u.a)(A), Object(p.c)("PrimeInstructions")], t)
        }(s.Component),
        B = j,
        H = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m._17, {
                    background: m.m.Alt2,
                    display: m.H.Flex,
                    justifyContent: m.T.Center,
                    padding: {
                        y: 1
                    },
                    margin: {
                        bottom: 1
                    },
                    textAlign: m._22.Center
                }, s.createElement(m._21, {
                    type: m._26.H4,
                    align: m._37.Middle
                }, s.createElement(m._17, {
                    padding: 1,
                    display: m.H.InlineFlex,
                    flexGrow: 1,
                    flexWrap: m.K.NoWrap,
                    alignItems: m.c.Center,
                    fontSize: this.props.fontSize ? this.props.fontSize : m.L.Size5,
                    "data-a-target": "prime-error-glitch"
                }, s.createElement(m.U, {
                    margin: {
                        right: 1
                    },
                    display: m.H.InlineFlex,
                    flexGrow: 1,
                    flexWrap: m.K.NoWrap,
                    alignItems: m.c.Center
                }, s.createElement(m._8, {
                    asset: m._9.DeadGlitch,
                    type: m._10.Alert,
                    width: 20,
                    height: 20
                })), Object(l.d)("Something has gone wrong. Please try again later.", "PrimeError"))))
            }, t = r.__decorate([Object(p.c)("PrimeError")], t)
        }(s.Component),
        V = H,
        z = (n(422), function(e) {
            function t() {
                var t = e.call(this) || this;
                return t.setRef = function(e) {
                    t.setState({
                        clipboardInput: e
                    })
                }, t.copy = function() {
                    var e;
                    try {
                        t.state.clipboardInput && t.state.clipboardInput.select(), e = document.execCommand("copy")
                    } catch (t) {
                        e = !1
                    }
                    return t.setState({
                        copied: e
                    }), e
                }, t.state = {
                    copied: !1,
                    clipboardInput: void 0
                }, t
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = this.state.copied ? Object(l.d)("copied", "CopyButton") : Object(l.d)("copy", "CopyButton");
                return s.createElement(m.U, {
                    className: "copy-button copy-btn",
                    display: m.H.Flex
                }, s.createElement(m.P, {
                    className: "copy-button__btn"
                }, s.createElement(m.u, {
                    onClick: this.copy,
                    type: this.state.copied ? m.z.Success : m.z.Default
                }, e)), s.createElement("input", {
                    className: "copy-button__copy-input",
                    ref: this.setRef,
                    value: this.props.clipboardText,
                    readOnly: !0
                }))
            }, t = r.__decorate([Object(p.c)("CopyButton")], t)
        }(s.Component)),
        W = z,
        q = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.onChange = function(e) {
                    t.setState({
                        value: e.currentTarget.value,
                        copied: !1
                    })
                }, t
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.componentWillMount = function() {
                this.props.initialText && this.setState({
                    value: this.props.initialText,
                    copied: !1
                })
            }, t.prototype.render = function() {
                return this.state && this.state.value ? s.createElement(m.U, {
                    className: "copyable-item",
                    display: m.H.Flex,
                    flexGrow: 1
                }, s.createElement(m.U, {
                    flexGrow: 1
                }, s.createElement(m.Q, {
                    type: m.R.Text,
                    onChange: this.onChange,
                    value: this.state.value,
                    disabled: this.props.disabled,
                    readOnly: this.props.readOnly
                })), s.createElement(m.U, null, s.createElement(W, {
                    clipboardText: this.state.value
                }))) : null
            }, t = r.__decorate([Object(p.c)("CopyableItem")], t)
        }(s.Component),
        G = q,
        Q = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m._17, {
                    className: "prime-claim-instructions",
                    background: m.m.Alt2,
                    border: !0,
                    padding: 1,
                    fontSize: m.L.Size6
                }, s.createElement(m._36, null, s.createElement(y, {
                    source: this.props.claimInstructions || "",
                    escapeHtml: !0
                })))
            }, t = r.__decorate([Object(p.c)("PrimeClaimInstructions")], t)
        }(s.Component),
        K = Q,
        $ = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m.U, {
                    className: "prime-redeem",
                    margin: {
                        top: 1
                    }
                }, this.getCodeOrConfirmation(), this.getPrimeClaimInstructions())
            }, t.prototype.getCodeOrConfirmation = function() {
                return this.props.code && this.props.deliveryMethod === S.CLAIM_CODE ? s.createElement(m.U, null, s.createElement(G, {
                    initialText: this.props.code,
                    readOnly: !0,
                    textCenter: !0
                })) : s.createElement(m._17, {
                    background: m.m.Alt2,
                    display: m.H.Flex,
                    justifyContent: m.T.Center,
                    padding: {
                        y: 1
                    },
                    margin: {
                        bottom: 1
                    }
                }, s.createElement(m._21, {
                    type: m._26.H4,
                    align: m._37.Middle
                }, s.createElement(m.U, {
                    padding: 1,
                    display: m.H.InlineFlex,
                    flexGrow: 1,
                    flexWrap: m.K.NoWrap,
                    alignItems: m.c.Center,
                    "data-a-target": "prime-redeem-check"
                }, s.createElement(m.U, {
                    margin: {
                        right: 1
                    },
                    display: m.H.InlineFlex,
                    flexGrow: 1,
                    flexWrap: m.K.NoWrap,
                    alignItems: m.c.Center
                }, s.createElement(m._8, {
                    asset: m._9.Check,
                    type: m._10.Success,
                    width: 20,
                    height: 20
                })), Object(l.d)("Added To Your Twitch Account", "PrimeRedeem"))))
            }, t.prototype.getPrimeClaimInstructions = function() {
                if (this.props.claimInstructions) return s.createElement(K, {
                    claimInstructions: this.props.claimInstructions || ""
                })
            }, t = r.__decorate([Object(p.c)("PrimeRedeem")], t)
        }(s.Component),
        Y = $,
        J = n(423),
        X = (n(424), n(425)),
        Z = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    claimed: !1,
                    claiming: !1,
                    error: !1,
                    claimData: ""
                }, t.renderRedeemUpsellOrClaimSection = function(e) {
                    var n = e.content || {},
                        i = e.self || {
                            claimData: ""
                        },
                        a = t.props.data || {},
                        r = a.currentUser || {};
                    if (t.state.error) return s.createElement(V, {
                        fontSize: m.L.Size6
                    });
                    if ((t.isCurrentOfferClaimed(e) || t.state.claimed) && r && r.hasPrime) {
                        var o = t.state.claimData || i.claimData;
                        return s.createElement(Y, {
                            claimInstructions: e.claimInstructions,
                            code: o,
                            deliveryMethod: e.deliveryMethod
                        })
                    }
                    return s.createElement(B, {
                        offerId: e.id,
                        offerDescription: e.description || "",
                        offerType: e.deliveryMethod || "",
                        externalUri: n.externalURL || "",
                        claimCallback: t.claimOffer,
                        claiming: t.state.claiming
                    })
                }, t.claimOffer = function(e) {
                    e.nativeEvent.stopImmediatePropagation(), t.setState({
                        claiming: !0
                    });
                    var n = t.props.data;
                    if (!n.loading && !n.error && n.currentUser.id) {
                        var i = n.currentUser.id,
                            a = t.props.offer,
                            r = Object(k.a)({
                                offerID: a.id
                            });
                        t.props.claimPrimeOffer(r).then(function(e) {
                            var n = e.data || {},
                                r = n.claimPrimeOffer || {},
                                o = r.self || {};
                            o && a && t.setState({
                                claimData: o.claimData
                            }), t.markAsClaimedInLocalStorage(i)
                        }).catch(function() {
                            t.setState({
                                claiming: !1,
                                claimed: !1,
                                error: !0
                            })
                        })
                    }
                }, t.markAsClaimedInLocalStorage = function(e) {
                    var n = t.props.offer,
                        i = _(n.id, e),
                        a = w();
                    a.push(i), E(a), t.setState({
                        claiming: !1,
                        claimed: !0,
                        error: !1
                    })
                }, t
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = this.props.offer,
                    t = this.props.isLast || !1;
                if (e) {
                    var n = e.content || {},
                        i = n.game || {},
                        a = n.categories || [];
                    return s.createElement(m._17, {
                        className: "prime-offer",
                        alignItems: m.c.Center,
                        borderBottom: !t,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, s.createElement(m.U, {
                        className: "prime-offer__title",
                        padding: {
                            y: .5
                        }
                    }, s.createElement(y, {
                        className: "prime-offer__title__markdown",
                        containerTagName: "h4",
                        source: e.title || ""
                    })), s.createElement("img", {
                        src: e.imageURL
                    }), s.createElement(m.U, {
                        className: "prime-offer__description",
                        padding: {
                            top: .5
                        }
                    }, s.createElement(m._21, {
                        type: m._26.P
                    }, i.name, " ", a[0])), s.createElement(m.U, {
                        className: "prime-offer__publisher"
                    }, s.createElement(m._21, {
                        type: m._26.P,
                        color: m.F.Alt2,
                        fontSize: m.L.Size7
                    }, n.publisher)), this.renderRedeemUpsellOrClaimSection(e))
                }
                return null
            }, t.prototype.isCurrentOfferClaimed = function(e) {
                return (e.self || {
                    hasEntitlement: !1
                }).hasEntitlement || this.isCurrentOfferClaimedInLocalStorage()
            }, t.prototype.isCurrentOfferClaimedInLocalStorage = function() {
                var e = this.props.data,
                    t = this.props.offer;
                if (!e.loading && !e.error && e.currentUser) {
                    var n = e.currentUser.id,
                        i = _(t.id, n);
                    return w().includes(i)
                }
            }, t = r.__decorate([Object(u.a)(X, {
                name: "data"
            }), Object(u.a)(J, {
                name: "claimPrimeOffer"
            }), Object(p.c)("PrimeOffer")], t)
        }(s.Component),
        ee = Z,
        te = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m._17, {
                    className: "prime-offer-placeholder",
                    alignItems: m.c.Center,
                    borderBottom: !0,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, s.createElement(m.U, {
                    className: "prime-offer-placeholder__title",
                    padding: {
                        y: .5
                    }
                }, s.createElement(m._1, {
                    height: 20
                })), s.createElement(m._1, {
                    height: 160
                }), s.createElement(m.U, {
                    className: "prime-offer-placeholder__description",
                    padding: {
                        y: .5
                    }
                }, s.createElement(m._1, {
                    height: 20,
                    width: 160
                })), s.createElement(m.U, {
                    className: "prime-offer-placeholder__publisher"
                }, s.createElement(m._1, {
                    height: 20,
                    width: 80
                })), s.createElement(m.U, {
                    className: "prime-offer-placeholder__claim",
                    margin: {
                        top: 2,
                        bottom: 1
                    }
                }, s.createElement(m._1, {
                    height: 40
                })))
            }, t = r.__decorate([Object(p.c)("PrimeOfferPlaceholder")], t)
        }(s.Component),
        ne = te,
        ie = (n(426), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return s.createElement(m._17, {
                    "data-a-target": "prime-offers-upsell",
                    className: "prime-offers-upsell",
                    alignItems: m.c.Center,
                    padding: {
                        x: 2,
                        y: 1
                    },
                    borderBottom: !0
                }, s.createElement(m._21, {
                    type: m._26.H4
                }, Object(l.d)("Claim With Twitch Prime", "PrimeUpsell")), s.createElement(m.U, {
                    className: "prime-upsell__logo-container",
                    fullWidth: !0,
                    margin: {
                        y: 2
                    },
                    textAlign: m._22.Center
                }, s.createElement(m._8, {
                    asset: m._9.LogoTwitchPrime,
                    width: 330,
                    height: 150,
                    type: m._10.Brand
                })), s.createElement(m._21, {
                    type: m._26.P
                }, Object(l.d)("Get free game loot like this every month plus surprises, ad-free viewing, and loads more with Twitch Prime.", "PrimeUpsell")), s.createElement(M, null))
            }, t = r.__decorate([Object(p.c)("PrimeUpsell")], t)
        }(s.Component)),
        ae = ie,
        re = n(427),
        oe = (n(428), n(429)),
        se = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.shouldShowPlaceholders = function() {
                    var e = t.props.offersData,
                        n = e.primeOffers,
                        i = void 0 === n || null === n;
                    return e.loading || !e.error && i && t.props.showByDefault
                }, t.renderOfferPlaceholders = function() {
                    for (var e = [], t = 0; t < 3; ++t) e.push(s.createElement(ne, {
                        key: t
                    }));
                    return e
                }, t
            }
            return r.__extends(t, e), t.prototype.componentDidUpdate = function() {
                var e = this.props.offersData;
                e && e.primeOffers && this.props.latencyTracking.reportInteractive(e.primeOffers.length)
            }, t.prototype.render = function() {
                return s.createElement(f.b, {
                    className: "prime-offer-listing"
                }, s.createElement(m.U, {
                    className: "prime-offer-listing__content",
                    alignItems: m.c.Center,
                    padding: {
                        top: 1,
                        bottom: 2,
                        left: 1,
                        right: 1
                    }
                }, this.renderUpsell(), this.renderOfferExperience()))
            }, t.prototype.renderUpsell = function() {
                var e = this.props.userData;
                if (!e.loading && !e.error && !this.currentUserHasPrime(e)) return s.createElement(ae, null)
            }, t.prototype.renderOfferExperience = function() {
                var e = this.props.offersData;
                if (this.shouldShowPlaceholders()) return this.renderOfferPlaceholders();
                if (!e.error && e.primeOffers && e.primeOffers.length) {
                    var t = this.getSortedOffers(),
                        n = t[t.length - 1];
                    return t.map(function(e) {
                        return s.createElement(ee, {
                            key: e.id,
                            offer: e,
                            isLast: n.id === e.id
                        })
                    })
                }
                return s.createElement(b, null)
            }, t.prototype.getSortedOffers = function() {
                var e = this.props.offersData.primeOffers,
                    t = this.getUserId();
                if (t) {
                    var n = w(),
                        i = e.filter(function(e) {
                            return !n.includes(_(e.id, t))
                        }).sort(T),
                        a = e.filter(function(e) {
                            return !i.includes(e)
                        }).sort(T);
                    return i.concat(a)
                }
                return e.slice().sort(T)
            }, t.prototype.getUserId = function() {
                var e = this.props.userData;
                return !e.loading && !e.error && e.currentUser && e.currentUser.id ? e.currentUser.id : ""
            }, t.prototype.currentUserHasPrime = function(e) {
                var t = e.currentUser;
                return t && t.hasPrime
            }, t = r.__decorate([Object(u.a)(re, {
                name: "offersData"
            }), Object(u.a)(oe, {
                name: "userData"
            }), Object(p.c)("PrimeOfferList")], t)
        }(s.Component),
        le = se,
        ce = n(430),
        ue = (n(431), n(432)),
        de = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    numOfUnseenOffers: 0
                }, t.showOffersByDefault = function() {
                    var e = location.search,
                        n = o.parse(e);
                    return n && !!n.expandoffers || t.props.openByDefault
                }, t.onToggleMenu = function(e) {
                    t.seeOffers(), e && t.setState({
                        numOfUnseenOffers: 0
                    })
                }, t.getUnseenOffers = function(e) {
                    var n = e.offersData;
                    if (n && !n.loading && !n.error) {
                        var i = n.primeOffers || [],
                            a = C();
                        t.setState({
                            numOfUnseenOffers: i.filter(function(e) {
                                return !(a.includes(e.id) || t.offerIsClaimed(e))
                            }).length
                        })
                    }
                }, t.offerIsClaimed = function(e) {
                    return e.self && e.self.hasEntitlement
                }, t.seeOffers = function() {
                    var e = t.props.offersData;
                    if (e && !e.loading && !e.error) {
                        var n = e.primeOffers || [],
                            i = n.map(function(e) {
                                return "" + e.id
                            });
                        N(i)
                    }
                }, t.renderOfferList = function() {
                    var e = t.props.offersData,
                        n = t.showOffersByDefault() || !1;
                    return e && !e.loading && !e.error || n ? s.createElement(m.U, {
                        "data-a-target": "offers-list",
                        className: "prime-offers__list"
                    }, s.createElement(g, {
                        numOfUnseenOffers: t.state.numOfUnseenOffers
                    }), s.createElement(le, {
                        showByDefault: n
                    })) : null
                }, t
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.getUnseenOffers(this.props)
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.getUnseenOffers(e)
            }, t.prototype.render = function() {
                var e = this.props.userData && this.props.userData.requestInfo && Object(d.b)(this.props.userData.requestInfo.countryCode),
                    t = this.props.userData && this.props.userData.currentUser && this.props.userData.currentUser.hasPrime;
                if (!e && !t) return null;
                var n = {
                    align: m._31.Center,
                    direction: m._32.Bottom,
                    label: ""
                };
                return this.state.numOfUnseenOffers > 0 ? n.label = Object(l.d)("New Prime Loot", "PrimeOffers") : n.label = Object(l.d)("Prime Loot", "PrimeOffers"), s.createElement(m.U, {
                    className: "prime-offers",
                    position: m._2.Relative
                }, s.createElement(c.a, {
                    onToggle: this.onToggleMenu,
                    openByDefault: this.showOffersByDefault(),
                    tooltipProps: n
                }, s.createElement(m.v, {
                    ariaLabel: Object(l.d)("Prime offers", "PrimeOffers"),
                    overlay: !0,
                    size: m.x.Large,
                    icon: m._9.Crown,
                    "data-a-target": "prime-offers-icon",
                    "data-target": "prime-offers-icon"
                }), s.createElement(m.p, {
                    direction: m.q.BottomRight,
                    size: m.r.Large,
                    offsetX: "9px"
                }, this.renderOfferList())), this.renderUnseenOffersDisplay())
            }, t.prototype.renderUnseenOffersDisplay = function() {
                var e = this.state.numOfUnseenOffers;
                if (e) return s.createElement(m.U, {
                    className: "prime-offers__pill",
                    position: m._2.Absolute
                }, s.createElement(m.e, {
                    type: m.i.BounceIn,
                    duration: m.g.Medium,
                    timing: m.h.EaseIn,
                    enabled: e > 0
                }, s.createElement(m.Z, {
                    label: e.toString(),
                    type: m._0.Notification
                })))
            }, t = r.__decorate([Object(u.a)(ce, {
                name: "offersData",
                skip: function(e) {
                    return !e.firstPageLoaded
                }
            }), Object(u.a)(ue, {
                name: "userData"
            }), Object(p.c)("PrimeOffers", {
                autoReportInteractive: !0
            })], t)
        }(s.Component),
        pe = de,
        me = Object(a.a)(i)(pe),
        he = (n(433), n(434)),
        ge = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return r.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = this.props.data.requestInfo && Object(d.b)(this.props.data.requestInfo.countryCode);
                if (this.props.data.currentUser && this.props.data.currentUser.hasPrime || !e) return null;
                if (this.props.data.loading) return null;
                var t = Object(U.d)(U.a, ""),
                    n = Object(l.d)("Twitch Prime", "BlueBar"),
                    i = s.createElement("span", null, Object(l.d)("Free loot every month, plus exclusives and surprises, ad-free viewing, and loads more.", "BlueBar")),
                    a = Object(U.d)(U.a, ""),
                    r = Object(l.d)("Start Your Free Trial", "BlueBar");
                if (!this.props.data.loading && !this.props.data.error) {
                    var o = this.props.data;
                    o && o.primePromotions && o.primePromotions.forEach(function(e) {
                        switch (e.id) {
                            case "twitch.prime.bluebar.left1":
                                t = e.externalURL, n = e.text;
                                break;
                            case "twitch.prime.bluebar.center1":
                                i = s.createElement(y, {
                                    source: e.text,
                                    renderers: {
                                        Link: function(e) {
                                            return s.createElement("a", {
                                                href: e.href,
                                                target: "_blank",
                                                rel: "noopener noreferrer"
                                            }, e.children)
                                        }
                                    }
                                });
                                break;
                            case "twitch.prime.bluebar.right1":
                                a = e.externalURL, r = e.text
                        }
                    })
                }
                return s.createElement(m._17, {
                    color: m.F.Base,
                    className: "blue-bar",
                    position: m._2.Relative,
                    fullWidth: !0
                }, s.createElement(m.U, {
                    className: "blue-bar__bar",
                    display: m.H.Flex,
                    alignItems: m.c.Center,
                    justifyContent: m.T.Between,
                    flexWrap: m.K.NoWrap,
                    margin: "auto",
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, s.createElement(m.U, {
                    display: m.H.InlineFlex,
                    alignItems: m.c.Center,
                    padding: {
                        right: .5
                    }
                }, s.createElement(m.U, {
                    className: "blue-bar__logo",
                    display: m.H.InlineFlex,
                    margin: {
                        right: .5
                    },
                    flexShrink: 0
                }, s.createElement(m._8, {
                    asset: m._9.Crown,
                    width: 20,
                    height: 13
                })), s.createElement(m._21, {
                    bold: !0,
                    type: m._26.Span,
                    noWrap: !0,
                    fontSize: m.L.Size6
                }, s.createElement(m.P, {
                    padding: {
                        x: 1
                    }
                }, s.createElement("a", {
                    className: "blue-bar__link",
                    href: t,
                    target: "_blank",
                    rel: "noopener noreferrer"
                }, n))), s.createElement(m._21, {
                    className: "blue-bar__headline",
                    type: m._26.Span,
                    fontSize: m.L.Size6
                }, i)), s.createElement(m.U, {
                    display: m.H.InlineFlex,
                    flexShrink: 0
                }, s.createElement(m._21, {
                    bold: !0,
                    type: m._26.Span,
                    noWrap: !0,
                    fontSize: m.L.Size6,
                    color: m.F.Base
                }, s.createElement("a", {
                    className: "blue-bar__link",
                    href: a,
                    target: "_blank",
                    rel: "noopener noreferrer"
                }, r)))))
            }, t = r.__decorate([Object(u.a)(he, {
                options: function() {
                    return {
                        variables: {
                            stringIds: ["twitch.prime.bluebar.left1", "twitch.prime.bluebar.center1", "twitch.prime.bluebar.right1"],
                            dateOverride: I()
                        }
                    }
                }
            }), Object(p.c)("BlueBarComponent")], t)
        }(s.Component),
        fe = ge;
    n.d(t, "b", function() {
        return me
    }), n.d(t, "a", function() {
        return fe
    }), n.d(t, "c", function() {
        return I
    })
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(4),
        r = n(1),
        o = n(371),
        s = n(3),
        l = (n(471), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.onImageLoad = function() {
                    n.setState({
                        imageLoaded: !0
                    })
                }, n.renderImage = function() {
                    var e = null,
                        t = a("chat-image", n.props.className, {
                            hide: !n.state.imageLoaded
                        });
                    if (n.props.srcSet.themed) e = r.createElement(o.a, {
                        alt: n.props.alt,
                        className: t,
                        defaultRes: n.props.srcKey,
                        onLoad: n.onImageLoad,
                        sources: n.props.srcSet
                    });
                    else {
                        for (var i = [], s = 0, l = Object.keys(n.props.srcSet.sources); s < l.length; s++) {
                            var c = l[s];
                            i.push(n.props.srcSet.sources[c] + " " + c)
                        }
                        e = r.createElement("img", {
                            className: t,
                            onLoad: n.onImageLoad,
                            src: n.props.srcSet.sources[n.props.srcKey],
                            srcSet: i.join(","),
                            alt: n.props.alt
                        })
                    }
                    return e
                }, n.renderPlaceholder = function() {
                    return n.state.imageLoaded ? null : r.createElement(s.P, {
                        display: s.H.InlineBlock
                    }, r.createElement(s._21, {
                        type: s._26.Span,
                        className: "chat-image__placeholder",
                        align: s._37.Top
                    }, r.createElement(s._1, {
                        height: 28,
                        width: 28
                    })))
                }, n.state = {
                    imageLoaded: !1
                }, n
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = r.createElement(s._30, {
                    direction: this.props.tooltipDirection || s._32.Top,
                    label: this.props.alt,
                    display: s.H.Inline,
                    offsetY: "0.9rem",
                    "data-a-target": "emote-name"
                }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText);
                return this.props.cheerText ? r.createElement(s._21, {
                    type: s._26.Span,
                    noWrap: !0
                }, e) : e
            }, t
        }(r.Component));
    n.d(t, "a", function() {
        return l
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return function() {
            Object(l.c)(e), window.location.reload(!0)
        }
    }

    function a() {
        return {}
    }

    function r(e) {
        return Object(s.bindActionCreators)({
            changeLanguage: i
        }, e)
    }
    var o = n(6),
        s = n(9),
        l = n(72),
        c = n(0),
        u = n(1),
        d = n(2),
        p = n(3),
        m = (n(394), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderLink = function(e) {
                    var n = function() {
                        return t.props.changeLanguage(e.languageCode)
                    };
                    return u.createElement(p.S, {
                        key: e.languageCode,
                        onClick: n,
                        "data-target": "language-selector-link"
                    }, u.createElement(p.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e.name))
                }, t
            }
            return c.__extends(t, e), t.prototype.render = function() {
                var e = Math.floor(d.a.locales.length / 2);
                return u.createElement(p.U, {
                    className: "language-selector",
                    display: p.H.Flex,
                    padding: {
                        y: 1
                    }
                }, u.createElement("div", {
                    className: "language-selector__list language-selector__list--border-right"
                }, d.a.locales.slice(0, e).map(this.renderLink)), u.createElement("div", {
                    className: "language-selector__list"
                }, d.a.locales.slice(e).map(this.renderLink)))
            }, t
        }(u.Component)),
        h = Object(o.a)(a, r)(m);
    n.d(t, "a", function() {
        return h
    })
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        var n = {},
            i = o(e);
        if (!i) return n;
        var s;
        try {
            s = new URL(i)
        } catch (t) {
            return S.i.error(t.toString(), i + " was malformed from notification id:[" + e.id + "]"), n
        }
        return r(e.type, s) ? n.linkTo = {
            pathname: s.pathname,
            search: s.search,
            state: {
                content: e.type,
                medium: t
            }
        } : (n.linkTo = a(s.toString(), e.type, t), n.targetBlank = !0), n
    }

    function a(e, t, n) {
        var i = e.split("?");
        if (1 === i.length) return e + "?tt_content=" + t + "&tt_medium=" + n;
        var a = y.parse(i[1]);
        return a.tt_content = a.tt_content ? a.tt_content : t, a.tt_medium = a.tt_medium ? a.tt_medium : n, [i[0], y.stringify(a, {
            encode: !1
        })].join("?")
    }

    function r(e, t) {
        return !M.has(e) && "https://www.twitch.tv" === t.origin
    }

    function o(e) {
        var t = e.actions.filter(function(e) {
            return "click" === e.type
        });
        return t.length > 0 ? t[0].url : ""
    }

    function s(e) {
        return {
            id: e.id,
            body: e.body_md,
            type: e.type,
            thumbnailURL: e.thumbnail_url,
            createdAt: e.created_at,
            updatedAt: e.updated_at,
            isRead: e.read,
            actions: e.actions.map(function(e) {
                return {
                    body: e.body,
                    type: e.type,
                    url: e.url,
                    __typename: "OnsiteNotificationAction"
                }
            }),
            __typename: "OnsiteNotification"
        }
    }

    function l(e) {
        return {
            currentUser: Object(re.c)(e)
        }
    }

    function c(e, t) {
        for (var n = [], i = 0; i < e.length; i += t) {
            var a = e.slice(i, i + t);
            n.push(a)
        }
        return n
    }

    function u(e) {
        return e.type === N.c.OnsiteNotificationsRead
    }

    function d(e) {
        return e.type === N.c.OnsiteNotificationCreate || e.type === N.c.OnsiteNotificationUpdate
    }

    function p(e) {
        return e.type === N.c.OnsiteNotificationDelete
    }

    function m(e, t) {
        return me.debug("Received pubsub summary update", e), t && t.currentUser && t.currentUser.notifications && t.currentUser.notifications.summary && e.data.summary ? (t.currentUser.notifications.summary.lastSeenAt = e.data.summary.last_seen_at, t.currentUser.notifications.summary.unseenCount = e.data.summary.unseen_view_count, t) : t
    }

    function h(e, t) {
        if (me.debug("Received pubsub notification update", e), !(t && t.currentUser && t.currentUser.notifications && t.currentUser.notifications.edges && t.currentUser.notifications.edges)) return t;
        if (u(e)) {
            var n = new Set(e.data.notification_ids),
                i = t.currentUser.notifications.edges.map(function(e) {
                    return n.has(e.node.id) ? b.__assign({}, e, {
                        node: b.__assign({}, e.node, {
                            isRead: !0
                        })
                    }) : e
                });
            t.currentUser.notifications.edges = i
        } else if (d(e)) {
            if (e.data.persistent) {
                var a = s(e.data.notification),
                    i = g(t.currentUser.notifications.edges, a.id);
                i.unshift({
                    cursor: null,
                    node: a,
                    __typename: "OnsiteNotificationEdge"
                }), t.currentUser.notifications.edges = i
            }
        } else p(e) && (t.currentUser.notifications.edges = g(t.currentUser.notifications.edges, e.data.notification_id));
        return t
    }

    function g(e, t) {
        return e.filter(function(e) {
            return e.node.id !== t
        })
    }

    function f() {
        return function(e) {
            return function(t) {
                function n() {
                    var e = null !== t && t.apply(this, arguments) || this;
                    return e.state = {
                        shouldDefer: !0
                    }, e.stopDeferring = function() {
                        e.state.shouldDefer && e.setState({
                            shouldDefer: !1
                        })
                    }, e
                }
                return b.__extends(n, t), n.prototype.render = function() {
                    var t = {
                        shouldDefer: this.state.shouldDefer,
                        stopDeferring: this.stopDeferring
                    };
                    return k.createElement(e, b.__assign({}, this.props, t))
                }, n
            }(k.Component)
        }
    }
    var v, b = n(0),
        y = n(20),
        k = n(1),
        S = n(2),
        _ = n(47),
        w = n(7),
        E = n(106),
        C = n(16),
        N = n(39),
        T = n(21),
        D = n(30),
        I = n(5),
        O = n(28),
        L = n(31),
        x = n(395),
        R = n.n(x),
        F = n(14),
        U = n(65),
        P = n(12),
        M = new Set(["affiliateinvite", "feedcomment", "friendrequests", "partneragreementupdate", "partnerinvite"]),
        A = {
            Center: "center",
            Toast: "toast",
            Browser: "browser"
        },
        j = {
            Open: "open",
            Close: "close",
            MarkAllRead: "mark_all_read"
        },
        B = {
            PrimaryCta: "primary_cta",
            Dismiss: "dismiss"
        },
        H = function(e) {
            var t = {
                notification_id: e.notification.id,
                notification_type: e.notification.type,
                ui_context: e.uiContext
            };
            S.m.track(P.SpadeEventType.NotificationImpression, t)
        },
        V = function(e) {
            var t = {
                unseen_view_count: e.unseenCount,
                action: e.action
            };
            S.m.track(P.SpadeEventType.NotificationCenterInteraction, t)
        },
        z = function(e) {
            var t = {
                notification_id: e.notification.id,
                notification_type: e.notification.type,
                ui_context: e.uiContext,
                action: e.action
            };
            S.m.track(P.SpadeEventType.NotificationInteraction, t)
        },
        W = n(3),
        q = (n(396), "persistent-notification__delete"),
        G = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.impressionEventFired = !1, t.isVisible = function(e) {
                    if (null !== t.element) {
                        var n = t.element.getBoundingClientRect();
                        return n.top < e.bottom && n.bottom > e.top
                    }
                    return !1
                }, t.setRef = function(e) {
                    return t.element = e
                }, t.deleteNotification = function() {
                    z({
                        uiContext: A.Center,
                        notification: t.props.data,
                        action: B.Dismiss
                    }), t.props.onDeleteNotification(t.props.data.id)
                }, t.clickNotification = function() {
                    z({
                        uiContext: A.Center,
                        notification: t.props.data,
                        action: B.PrimaryCta
                    }), t.props.onViewNotification(t.props.data.id)
                }, t.renderDeleteNotification = function() {
                    return k.createElement(W.U, {
                        className: "persistent-notification__delete",
                        padding: {
                            top: 1,
                            left: 1,
                            right: .5
                        },
                        position: W._2.Absolute
                    }, k.createElement(W.U, {
                        display: W.H.Flex,
                        flexWrap: W.K.NoWrap,
                        alignItems: W.c.Start
                    }, k.createElement(W.v, {
                        ariaLabel: "delete-notification",
                        "data-test-selector": q,
                        icon: W._9.Close,
                        size: W.x.Small,
                        onClick: t.deleteNotification
                    })))
                }, t
            }
            return b.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive();
                var e = this.context.registerReceiver;
                e ? this.unregister = e(this) : S.i.warn("<PersistentNotification /> initialized missing a <ScrollableArea /> provider")
            }, t.prototype.componentWillUnmount = function() {
                this.unregister && this.unregister()
            }, t.prototype.render = function() {
                return k.createElement(W.U, {
                    className: "persistent-notification",
                    position: W._2.Relative,
                    refDelegate: this.setRef,
                    "data-test-selector": "persistent-notification"
                }, k.createElement(W._17, {
                    display: W.H.Flex,
                    className: this.props.data.isRead ? "persistent-notification__read" : "persistent-notification__unread",
                    borderBottom: !0,
                    flexWrap: W.K.NoWrap
                }, k.createElement(W.S, b.__assign({
                    "data-test-selector": "persistent-notification__click",
                    onClick: this.clickNotification
                }, i(this.props.data, P.PageviewMedium.NotificationCenter), {
                    alpha: !0
                }), k.createElement(W.U, {
                    className: "persistent-notification__area",
                    display: W.H.Flex,
                    flexWrap: W.K.NoWrap,
                    padding: {
                        top: 1,
                        bottom: 1,
                        left: 1,
                        right: 3
                    }
                }, k.createElement(W.C, {
                    aspect: W.k.Aspect1x1,
                    imageSrc: this.props.data.thumbnailURL,
                    imageAlt: Object(S.d)("Notification center item thumbnail", "OnsiteNotifications"),
                    size: W.D.Size4
                }), k.createElement(W.U, {
                    display: W.H.Flex,
                    flexDirection: W.J.Column,
                    flexWrap: W.K.NoWrap,
                    margin: {
                        x: 1
                    }
                }, k.createElement(W.U, {
                    className: "persistent-notification__body",
                    overflow: W.Y.Hidden,
                    "data-test-selector": "persistent-notification__body"
                }, k.createElement(W._21, {
                    type: W._26.Span,
                    color: W.F.Alt
                }, k.createElement(U, {
                    source: this.props.data.body || ""
                }))), k.createElement(W.U, {
                    display: W.H.Flex,
                    alignItems: W.c.Center,
                    flexShrink: 0,
                    margin: {
                        top: .5
                    }
                }, k.createElement(W._8, {
                    asset: W._9.MessagesSC,
                    height: 12,
                    width: 12,
                    type: W._10.Alt2
                }), k.createElement(W.U, {
                    margin: {
                        left: .5
                    }
                }, k.createElement(W._21, {
                    type: W._26.Span,
                    color: W.F.Alt2
                }, Object(S.g)(new Date(this.props.data.updatedAt)))))))), this.renderDeleteNotification()))
            }, t.prototype.checkVisible = function(e) {
                return b.__awaiter(this, void 0, void 0, function() {
                    return b.__generator(this, function(t) {
                        return !this.impressionEventFired && this.isVisible(e) && (H({
                            uiContext: A.Center,
                            notification: this.props.data
                        }), this.impressionEventFired = !0), [2]
                    })
                })
            }, t.contextTypes = {
                registerReceiver: F.func
            }, t = b.__decorate([Object(I.c)("PersistentNotification")], t)
        }(k.Component),
        Q = G,
        K = n(397),
        $ = n(398),
        Y = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isRead: !1
                }, t.createNotificationData = function() {
                    return {
                        id: "friendrequests",
                        type: "friendrequests",
                        body: Object(S.d)("{count, plural, one {You have # new friend request} other {You have # new friend requests}}", {
                            count: t.props.count
                        }, "FriendRequestsNotification"),
                        createdAt: t.props.date,
                        updatedAt: t.props.date,
                        isRead: t.props.isOldNotification || t.state.isRead,
                        thumbnailURL: R.a,
                        actions: [{
                            body: "View",
                            type: "click",
                            url: "https://www.twitch.tv/friends/requests"
                        }]
                    }
                }, t.clearUnseenCount = function() {
                    Object(T.d)($, {}, function(e) {
                        return e.currentUser.incomingFriendRequests.totalUnreadCount = 0, e
                    }), t.props.clearUnreadFriendRequests().then(function() {}).catch(function(e) {
                        return S.i.error(e, "[FriendRequestsNotification] Failed to clear unread requests.")
                    })
                }, t.viewFriendRequests = function() {
                    t.setState({
                        isRead: !0
                    })
                }, t
            }
            return b.__extends(t, e), t.prototype.render = function() {
                return k.createElement(Q, {
                    key: "friendRequestsNotification",
                    data: this.createNotificationData(),
                    onDeleteNotification: this.clearUnseenCount,
                    onViewNotification: this.viewFriendRequests
                })
            }, t
        }(k.Component),
        J = Object(L.compose)(Object(w.a)(K, {
            name: "clearUnreadFriendRequests"
        }))(Y),
        X = (n(399), "center-window__empty"),
        Z = "center-window__content-footer",
        ee = "center-window__footer__text",
        te = "center-window__read-all",
        ne = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isLoadingMore: !1
                }, t.renderContent = function() {
                    if (!t.props.hasInitiallyLoaded || t.props.data.length || t.props.friendRequestsData) {
                        return [t.mapPersistentNotificationElements(), t.renderContentFooter()]
                    }
                    return t.renderEmptyCenterWindowElement()
                }, t.renderContentFooter = function() {
                    var e = !t.props.hasInitiallyLoaded || t.state.isLoadingMore ? k.createElement(W.X, {
                        delay: 0,
                        fillContent: !0
                    }) : k.createElement(W._8, {
                        asset: W._9.LogoGlitch,
                        width: 24,
                        height: 24,
                        type: W._10.Alt2
                    });
                    return k.createElement(W.U, {
                        className: "center-window__content-footer",
                        key: "center-window__content-footer",
                        "data-test-selector": Z,
                        display: W.H.Flex,
                        flexDirection: W.J.Column,
                        justifyContent: W.T.Center,
                        alignItems: W.c.Center,
                        textAlign: W._22.Center,
                        padding: 1,
                        flexGrow: 1
                    }, e)
                }, t.mapPersistentNotificationElements = function() {
                    var e = t.props.data.map(function(e) {
                        return k.createElement(Q, {
                            key: "onsite-notification-" + e.node.id,
                            data: e.node,
                            onDeleteNotification: t.props.onDeleteNotification,
                            onViewNotification: t.props.onViewNotification
                        })
                    });
                    return t.props.friendRequestsData && e.unshift(k.createElement(J, b.__assign({}, t.props.friendRequestsData))), e
                }, t.renderEmptyCenterWindowElement = function() {
                    return k.createElement(W._17, {
                        "data-test-selector": X,
                        className: "center-window__empty-state",
                        background: W.m.Alt,
                        display: W.H.Flex,
                        justifyContent: W.T.Center,
                        alignItems: W.c.Center,
                        textAlign: W._22.Center,
                        flexDirection: W.J.Column,
                        padding: 2,
                        fullWidth: !0
                    }, k.createElement(W._8, {
                        asset: W._9.LogoGlitch,
                        width: 100,
                        height: 100,
                        type: W._10.Placeholder
                    }), k.createElement(W.U, {
                        margin: {
                            top: 1
                        }
                    }, k.createElement(W._21, {
                        type: W._26.H5,
                        color: W.F.Alt2
                    }, Object(S.d)("Hooray! You're in the clear!", "OnsiteNotifications"))))
                }, t.renderMarkAsRead = function() {
                    return 0 !== t.props.data.length || t.props.friendRequestsData ? k.createElement(W.u, {
                        "data-test-selector": te,
                        type: W.z.Text,
                        size: W.x.Small,
                        disabled: 0 === t.props.data.length && !t.props.friendRequestsData,
                        onClick: t.props.onReadAllNotifications
                    }, Object(S.d)("Mark All as Read", "OnsiteNotifications")) : null
                }, t.renderNotificationsHeaderElement = function() {
                    return k.createElement(W._17, {
                        className: "center-window__header",
                        background: W.m.Alt,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        display: W.H.Flex,
                        alignItems: W.c.Center,
                        justifyContent: W.T.Between,
                        borderBottom: !0
                    }, k.createElement(W._21, {
                        type: W._26.H6,
                        color: W.F.Alt2,
                        bold: !0
                    }, Object(S.d)("Notifications", "OnsiteNotifications")), t.renderMarkAsRead())
                }, t.renderUnreadNotificationsFooterElement = function() {
                    var e = 0 === t.props.newNotificationsCount ? null : k.createElement(W._21, {
                        "data-test-selector": ee,
                        type: W._26.H6,
                        color: W.F.Alt2
                    }, Object(S.d)("{num, plural, one {1 New Notification} other {{num, number} New Notifications} }", {
                        num: t.props.newNotificationsCount
                    }, "OnsiteNotifications"));
                    return k.createElement(W._17, {
                        className: "center-window__footer",
                        background: W.m.Alt,
                        padding: .5,
                        alignItems: W.c.Center,
                        textAlign: W._22.Center,
                        borderTop: !0
                    }, e)
                }, t.loadMore = function() {
                    return b.__awaiter(t, void 0, void 0, function() {
                        var e = this;
                        return b.__generator(this, function(t) {
                            return this.state.isLoadingMore ? [2] : (this.setState({
                                isLoadingMore: !0
                            }), [2, this.props.onLoadMore().then(function() {
                                return e.setState({
                                    isLoadingMore: !1
                                })
                            })])
                        })
                    })
                }, t
            }
            return b.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return k.createElement(W._17, {
                    className: "center-window",
                    "data-test-selector": "center-window",
                    background: W.m.Alt
                }, this.renderNotificationsHeaderElement(), k.createElement(O.b, {
                    className: "center-window__scroll",
                    contentClassName: "center-window__scroll-container"
                }, k.createElement(W.U, {
                    display: W.H.Flex,
                    alignItems: W.c.Center,
                    flexDirection: W.J.Column,
                    flexGrow: 1,
                    flexWrap: W.K.NoWrap
                }, this.renderContent(), k.createElement(O.a, {
                    enabled: this.props.data.length > 0 && !!this.props.data[this.props.data.length - 1].cursor,
                    contentLength: this.props.data.length,
                    loadMore: this.loadMore,
                    pixelThreshold: 200
                }))), this.renderUnreadNotificationsFooterElement())
            }, t = b.__decorate([Object(I.c)("OnsiteNotificationsCenterWindow")], t)
        }(k.Component),
        ie = ne,
        ae = n(6),
        re = n(17),
        oe = n(86),
        se = (n(400), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.closeTimeout = 0, t.close = function() {
                    z({
                        uiContext: A.Toast,
                        notification: t.props.item,
                        action: B.Dismiss
                    }), t.props.close(t.props.index)
                }, t.onMouseEnter = function() {
                    t.cancelCloseTimer()
                }, t.onMouseLeave = function() {
                    t.scheduleCloseTimer()
                }, t.view = function() {
                    z({
                        uiContext: A.Toast,
                        notification: t.props.item,
                        action: B.PrimaryCta
                    }), t.props.view(t.props.index)
                }, t
            }
            return b.__extends(t, e), t.prototype.componentWillMount = function() {
                this.scheduleCloseTimer()
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive(), H({
                    uiContext: A.Toast,
                    notification: this.props.item
                })
            }, t.prototype.componentWillUnmount = function() {
                this.cancelCloseTimer()
            }, t.prototype.render = function() {
                return k.createElement(W.e, {
                    type: W.i.BounceIn,
                    duration: W.g.Medium,
                    enabled: !0
                }, k.createElement("div", {
                    onMouseEnter: this.onMouseEnter,
                    onMouseLeave: this.onMouseLeave,
                    "data-test-selector": "onsite-notification-toast__mouse-enter-detector"
                }, k.createElement(W._17, {
                    className: "onsite-notification-toast",
                    background: W.m.Base,
                    display: W.H.Flex,
                    flexWrap: W.K.NoWrap,
                    margin: {
                        bottom: 1
                    },
                    border: !0
                }, k.createElement(W.S, b.__assign({
                    onClick: this.view,
                    alpha: !0
                }, i(this.props.item, P.PageviewMedium.NotificationToast)), k.createElement(W.U, {
                    className: "onsite-notification-toast__container",
                    display: W.H.Flex,
                    flexWrap: W.K.NoWrap
                }, k.createElement(W.U, {
                    padding: {
                        y: 1,
                        left: 1
                    },
                    display: W.H.Flex,
                    flexShrink: 0
                }, k.createElement(W.C, {
                    aspect: W.k.Aspect1x1,
                    imageSrc: this.props.item.thumbnailURL,
                    imageAlt: Object(S.d)("Notification toast thumbnail", "OnsiteNotifications"),
                    size: W.D.Size4
                })), k.createElement(W.U, {
                    display: W.H.Flex,
                    flexDirection: W.J.Column,
                    flexWrap: W.K.NoWrap,
                    flexGrow: 1,
                    padding: 1
                }, k.createElement(W.U, {
                    className: "onsite-notification-toast__body",
                    overflow: W.Y.Hidden
                }, k.createElement(W._17, {
                    color: W.F.Alt
                }, k.createElement(U, {
                    source: this.props.item.body
                }))), k.createElement(W.U, {
                    margin: {
                        top: .5
                    },
                    flexShrink: 0
                }, k.createElement(W._17, {
                    color: W.F.Alt2
                }, Object(S.g)(new Date(this.props.item.updatedAt))))))), this.renderActions())))
            }, t.prototype.renderActions = function() {
                return k.createElement(W._17, {
                    className: "onsite-notification-toast__action-wrapper",
                    display: W.H.Flex,
                    alignContent: W.b.Stretch,
                    flexGrow: 0,
                    flexShrink: 0,
                    flexDirection: W.J.Column,
                    borderLeft: !0
                }, k.createElement(W._17, {
                    className: "onsite-notification-toast__action",
                    display: W.H.Flex,
                    alignContent: W.b.Stretch,
                    flexGrow: 1,
                    borderBottom: !0
                }, k.createElement(W.S, b.__assign({
                    onClick: this.view,
                    "data-test-selector": "onsite-notification-toast__view",
                    alpha: !0
                }, i(this.props.item, P.PageviewMedium.NotificationToast)), k.createElement(W._17, {
                    display: W.H.Flex,
                    alignItems: W.c.Center,
                    justifyContent: W.T.Center,
                    fullHeight: !0,
                    flexGrow: 1,
                    padding: .5
                }, k.createElement(W._21, {
                    color: W.F.Link
                }, this.primaryCTAText())))), k.createElement(W._17, {
                    className: "onsite-notification-toast__action",
                    display: W.H.Flex,
                    alignContent: W.b.Stretch,
                    flexGrow: 1
                }, k.createElement(W.S, {
                    onClick: this.close,
                    "data-test-selector": "onsite-notification-toast__close",
                    alpha: !0
                }, k.createElement(W._17, {
                    display: W.H.Flex,
                    alignItems: W.c.Center,
                    justifyContent: W.T.Center,
                    fullHeight: !0,
                    flexGrow: 1,
                    padding: .5
                }, k.createElement(W._21, {
                    color: W.F.Alt2
                }, Object(S.d)("Close", "OnsiteNotifications"))))))
            }, t.prototype.primaryCTAText = function() {
                var e = this.props.item.actions.find(function(e) {
                    return "click" === e.type
                });
                return e ? e.body : Object(S.d)("View", "OnsiteNotifications")
            }, t.prototype.scheduleCloseTimer = function() {
                var e = this;
                this.cancelCloseTimer(), this.closeTimeout = setTimeout(function() {
                    e.props.close(e.props.index), e.closeTimeout = 0
                }, 1e4)
            }, t.prototype.cancelCloseTimer = function() {
                this.closeTimeout && (clearTimeout(this.closeTimeout), this.closeTimeout = 0)
            }, t
        }(k.Component)),
        le = Object(I.c)("OnsiteNotificationToast")(se),
        ce = le,
        ue = (n(401), S.i.withCategory("toast-manager")),
        de = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    notifications: []
                }, t.view = function(e) {
                    t.props.onViewNotification(t.state.notifications[e].id), t.close(e)
                }, t.close = function(e) {
                    var n = t.state.notifications.slice();
                    n.splice(e, 1), t.setState({
                        notifications: n
                    })
                }, t
            }
            return b.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive(), this.conditionallyInsertTestData()
            }, t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props.pubsub.messages.info,
                    n = e.pubsub.messages.info;
                if (n && n.data.toast && (!t || n.data.notification.id !== t.data.notification.id || n.data.notification.updated_at !== t.data.notification.updated_at)) {
                    ue.debug("Received pubsub update", e.pubsub.messages.info);
                    var i = s(n.data.notification);
                    this.onNewNotification(i)
                }
            }, t.prototype.render = function() {
                return k.createElement(W.U, {
                    className: "onsite-notifications-toast-manager",
                    position: W._2.Absolute,
                    margin: {
                        top: 5
                    },
                    "data-test-selector": "onsite-notifications-toast-manager"
                }, this.renderToasts())
            }, t.prototype.conditionallyInsertTestData = function() {
                return b.__awaiter(this, void 0, void 0, function() {
                    var e, t;
                    return b.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return S.a.buildType !== C.a.Production && y.parse(window.location.search).onsite_test_data ? [4, n.e(36).then(n.bind(null, 2051))] : [3, 2];
                            case 1:
                                e = i.sent().MockOnsiteNotifications, t = e.getMockOnsiteNotificationModels(3), this.setState({
                                    notifications: t
                                }), i.label = 2;
                            case 2:
                                return [2]
                        }
                    })
                })
            }, t.prototype.renderToasts = function() {
                var e = this,
                    t = this.state.notifications.map(function(t, n) {
                        return k.createElement(ce, {
                            key: t.id,
                            item: t,
                            index: n,
                            view: e.view,
                            close: e.close
                        })
                    });
                return 0 === t.length ? null : t
            }, t.prototype.onNewNotification = function(e) {
                var t = this.state.notifications.slice(),
                    n = t.findIndex(function(t) {
                        return t.id === e.id
                    });
                n > -1 && t.splice(n, 1), t.unshift(e), t.length > 3 && t.pop(), this.setState({
                    notifications: t
                })
            }, t = b.__decorate([Object(I.c)("OnsiteNotificationToastManager"), Object(oe.a)([{
                topic: function(e) {
                    return Object(D.e)("" + (e.currentUser && e.currentUser.id))
                },
                mapMessageTypesToProps: (v = {}, v[N.c.OnsiteNotificationCreate] = "info", v[N.c.OnsiteNotificationUpdate] = "info", v),
                skip: function(e) {
                    return !e.currentUser
                }
            }])], t)
        }(k.Component),
        pe = Object(ae.a)(l)(de),
        me = S.i.withCategory("onsite-pubsub-mutators"),
        he = n(388),
        ge = n(389),
        fe = n(390),
        ve = n(391),
        be = n(392);
    n(402);
    n.d(t, "a", function() {
        return we
    }), n.d(t, "b", function() {
        return De
    });
    var ye = S.i.withCategory("onsite-notifications"),
        ke = "onsite-notifications__badge",
        Se = "99+",
        _e = 5e3,
        we = 10,
        Ee = 100,
        Ce = {
            align: W._31.Center,
            direction: W._32.Bottom,
            label: ""
        },
        Ne = {
            limit: we,
            cursor: ""
        },
        Te = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    newNotificationsCount: 0,
                    newFriendRequestsBadgeCount: 0,
                    isFriendRequestsNotificationUnread: !1
                }, t.newNotificationsCountTimer = 0, t.hasInsertedSummaryData = !1, t.hasInsertedListNotificationsData = !1, t.viewNotification = function(e) {
                    t.centerWindowToggleBalloon.toggleBalloon(!1), t.readNotification(e)
                }, t.conditionallyInsertSummaryTestData = function() {
                    t.summaryDataLoaded(t.props) && !t.hasInsertedSummaryData && S.a.buildType !== C.a.Production && y.parse(window.location.search).onsite_test_data && (t.hasInsertedSummaryData = !0, Object(T.d)(ve, b.__assign({}, t.props.summaryData.variables), function(e) {
                        return e.currentUser.notifications.summary.unseenCount = y.parse(window.location.search).onsite_test_data, e
                    }))
                }, t.conditionallyInsertListNotificationsTestData = function() {
                    return b.__awaiter(t, void 0, void 0, function() {
                        var e;
                        return b.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return this.listDataLoaded() && !this.hasInsertedListNotificationsData && S.a.buildType !== C.a.Production && y.parse(window.location.search).onsite_test_data ? (this.hasInsertedListNotificationsData = !0, [4, n.e(36).then(n.bind(null, 2051))]) : [3, 2];
                                case 1:
                                    e = t.sent().MockOnsiteNotifications, Object(T.d)(ge, b.__assign({}, this.props.listData.variables), function(t) {
                                        return t.currentUser.notifications.edges = e.getMockOnsiteNotificationEdges(y.parse(window.location.search).onsite_test_data), t
                                    }), t.label = 2;
                                case 2:
                                    return [2]
                            }
                        })
                    })
                }, t.summaryDataLoaded = function(e) {
                    return e.summaryData && !e.summaryData.loading && !e.summaryData.error && e.summaryData.currentUser && e.summaryData.currentUser.notifications && e.summaryData.currentUser.notifications.summary && e.summaryData.currentUser.incomingFriendRequests
                }, t.listDataLoaded = function() {
                    return t.props.listData && t.props.listData.currentUser && t.props.listData.currentUser.notifications && void 0 !== t.props.listData.currentUser.notifications.edges
                }, t.hasNewFriendRequests = function(e) {
                    var t = e.summaryData.currentUser;
                    if (t.incomingFriendRequests && t.incomingFriendRequests.newestEdge && t.incomingFriendRequests.newestEdge.createdAt) {
                        var n = new Date(t.incomingFriendRequests.newestEdge.createdAt),
                            i = new Date(t.notifications.summary.lastSeenAt);
                        return t.incomingFriendRequests.totalUnreadCount > 0 && n > i
                    }
                    return !1
                }, t.getFriendRequestsData = function() {
                    if (t.summaryDataLoaded(t.props)) {
                        var e = t.props.summaryData.currentUser;
                        if (e.incomingFriendRequests && e.incomingFriendRequests.newestEdge) {
                            var n = e.incomingFriendRequests.totalUnreadCount,
                                i = e.incomingFriendRequests.newestEdge.createdAt;
                            return n && i ? {
                                count: n,
                                date: i,
                                isOldNotification: !t.state.isFriendRequestsNotificationUnread
                            } : void 0
                        }
                    }
                }, t.toggleCenter = function(e) {
                    e || (t.props.stopDeferring(), t.getUnseenNotificationsAndApplyTimer(), t.viewNotifications()), V({
                        unseenCount: t.getUnseenNotificationsCount(t.props),
                        action: e ? j.Close : j.Open
                    })
                }, t.getUnseenNotificationsAndApplyTimer = function() {
                    var e = t.state.newNotificationsCount;
                    t.summaryDataLoaded(t.props) && (e = t.getUnseenNotificationsCount(t.props), t.setState({
                        newNotificationsCount: e
                    })), t.clearTimeout(), e > 0 && (t.newNotificationsCountTimer = setTimeout(function() {
                        t.setState({
                            newNotificationsCount: 0
                        }), t.clearTimeout()
                    }, _e))
                }, t.viewNotifications = function() {
                    if (t.summaryDataLoaded(t.props)) {
                        t.setState({
                            newFriendRequestsBadgeCount: 0
                        });
                        var e = b.__assign({}, Object(T.a)({}), {
                            optimisticResponse: {
                                viewedNotifications: {
                                    user: {
                                        notifications: {
                                            summary: {
                                                unseenCount: 0,
                                                lastSeenAt: new Date,
                                                __typename: "OnsiteNotificationsSummary"
                                            },
                                            __typename: "OnsiteNotificationConnection"
                                        },
                                        __typename: "User"
                                    },
                                    __typename: "ViewedNotificationsPayload"
                                }
                            }
                        });
                        Object(T.d)(ve, b.__assign({}, t.props.summaryData.variables), function(e) {
                            return e.currentUser.notifications.summary.unseenCount = 0, e
                        }), t.props.viewNotifications(e).then(function() {}).catch(function(e) {
                            return ye.error(e, "failure to read message... ")
                        })
                    }
                }, t.getUnseenNotificationsCount = function(e) {
                    return t.summaryDataLoaded(e) ? e.summaryData.currentUser.notifications.summary.unseenCount + t.state.newFriendRequestsBadgeCount : 0
                }, t.renderUnseenNotificationsBadge = function() {
                    var e = t.getUnseenNotificationsCount(t.props);
                    if (e > 0) {
                        var n = e >= 100 ? Se : e.toString();
                        return k.createElement(W.U, {
                            className: "onsite-notifications__badge",
                            "data-test-selector": ke,
                            position: W._2.Absolute
                        }, k.createElement(W.Z, {
                            label: n,
                            type: W._0.Notification
                        }))
                    }
                }, t.deleteNotification = function(e) {
                    return b.__awaiter(t, void 0, void 0, function() {
                        var t, n;
                        return b.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = b.__assign({}, Object(T.a)({
                                        id: e
                                    }), {
                                        optimisticResponse: {
                                            deleteNotification: {
                                                __typename: "DeleteNotificationPayload",
                                                notification: {
                                                    __typename: "OnsiteNotification",
                                                    id: e
                                                }
                                            }
                                        }
                                    }), i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, this.props.deleteOnsiteNotification(t)];
                                case 2:
                                    return i.sent(), [3, 4];
                                case 3:
                                    return n = i.sent(), ye.error(n, "Unable to delete notification", {
                                        id: e
                                    }), [3, 4];
                                case 4:
                                    return this.listDataLoaded() && Object(T.d)(ge, b.__assign({}, this.props.listData.variables), function(t) {
                                        return t.currentUser.notifications.edges = t.currentUser.notifications.edges.filter(function(t) {
                                            return t.node.id !== e
                                        }), t
                                    }), [2]
                            }
                        })
                    })
                }, t.readAllNotifications = function() {
                    if (t.setState({
                            isFriendRequestsNotificationUnread: !1
                        }), t.listDataLoaded()) {
                        V({
                            unseenCount: t.getUnseenNotificationsCount(t.props),
                            action: j.MarkAllRead
                        });
                        var e = t.props.listData.currentUser.notifications.edges.filter(function(e) {
                            return !e.node.isRead
                        }).map(function(e) {
                            return e.node.id
                        });
                        if (0 !== e.length) {
                            for (var n = c(e, Ee), i = 0, a = n; i < a.length; i++) {
                                var r = a[i];
                                t.markIDsAsRead(r)
                            }
                            Object(T.d)(ge, b.__assign({}, t.props.listData.variables), function(e) {
                                return e.currentUser.notifications.edges = e.currentUser.notifications.edges.map(function(e) {
                                    return b.__assign({}, e, {
                                        node: b.__assign({}, e.node, {
                                            isRead: !0
                                        })
                                    })
                                }), e
                            })
                        }
                    }
                }, t.markIDsAsRead = function(e) {
                    return b.__awaiter(t, void 0, void 0, function() {
                        var t, n, i;
                        return b.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    t = e.map(function(e) {
                                        return {
                                            id: e,
                                            isRead: !0,
                                            __typename: "OnsiteNotification"
                                        }
                                    }), n = b.__assign({}, Object(T.a)({
                                        ids: e
                                    }), {
                                        optimisticResponse: {
                                            readNotifications: {
                                                __typename: "ReadNotificationsPayload",
                                                notifications: t,
                                                count: e.length
                                            }
                                        }
                                    }), a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, this.props.readOnsiteNotification(n)];
                                case 2:
                                    return a.sent(), [3, 4];
                                case 3:
                                    return i = a.sent(), ye.error(i, "Unable to read notifications", {
                                        ids: e
                                    }), [3, 4];
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, t.readNotification = function(e) {
                    return b.__awaiter(t, void 0, void 0, function() {
                        var t, n;
                        return b.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = b.__assign({}, Object(T.a)({
                                        ids: [e]
                                    }), {
                                        optimisticResponse: {
                                            readNotifications: {
                                                __typename: "ReadNotificationsPayload",
                                                notifications: [{
                                                    id: e,
                                                    isRead: !0,
                                                    __typename: "OnsiteNotification"
                                                }],
                                                count: 1
                                            }
                                        }
                                    }), i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, this.props.readOnsiteNotification(t)];
                                case 2:
                                    return i.sent(), [3, 4];
                                case 3:
                                    return n = i.sent(), ye.error(n, "Unable to read notification", {
                                        id: e
                                    }), [3, 4];
                                case 4:
                                    return this.listDataLoaded() && Object(T.d)(ge, b.__assign({}, this.props.listData.variables), function(t) {
                                        return t.currentUser.notifications.edges = t.currentUser.notifications.edges.map(function(t) {
                                            return t.node.id === e ? b.__assign({}, t, {
                                                node: b.__assign({}, t.node, {
                                                    isRead: !0
                                                })
                                            }) : t
                                        }), t
                                    }), [2]
                            }
                        })
                    })
                }, t.loadMore = function() {
                    return b.__awaiter(t, void 0, void 0, function() {
                        return b.__generator(this, function(e) {
                            return this.props.listData.loading ? [2] : [2, this.props.loadMore()]
                        })
                    })
                }, t.clearTimeout = function() {
                    t.newNotificationsCountTimer && (clearTimeout(t.newNotificationsCountTimer), t.newNotificationsCountTimer = 0)
                }, t.saveCenterWindowToggleBalloonRef = function(e) {
                    return t.centerWindowToggleBalloon = e
                }, t
            }
            return b.__extends(t, e), t.prototype.componentDidUpdate = function() {
                this.conditionallyInsertSummaryTestData(), this.conditionallyInsertListNotificationsTestData()
            }, t.prototype.componentWillUnmount = function() {
                this.clearTimeout()
            }, t.prototype.componentWillReceiveProps = function(e) {
                if (this.summaryDataLoaded(e)) {
                    var t = this.hasNewFriendRequests(e);
                    this.setState({
                        newFriendRequestsBadgeCount: t ? 1 : 0
                    }), this.summaryDataLoaded(this.props) || this.setState({
                        isFriendRequestsNotificationUnread: t
                    }), S.n.setBadgeCount(this.getUnseenNotificationsCount(e))
                }
            }, t.prototype.render = function() {
                var e = this.props.shouldDefer || !this.listDataLoaded() ? [] : this.props.listData.currentUser.notifications.edges;
                return Ce.label = Object(S.d)("Notifications", "OnsiteNotificationsToolTip"), k.createElement(W.U, {
                    className: "onsite-notifications"
                }, k.createElement(pe, {
                    onViewNotification: this.viewNotification
                }), k.createElement(W.U, {
                    position: W._2.Relative
                }, k.createElement(_.a, {
                    onToggle: this.toggleCenter,
                    ref: this.saveCenterWindowToggleBalloonRef,
                    tooltipProps: Ce
                }, k.createElement(W.v, {
                    ariaLabel: Object(S.d)("Open Notifications", "OnsiteNotifications"),
                    size: W.x.Large,
                    icon: W._9.NotificationBell,
                    overlay: !0
                }), k.createElement(W.p, {
                    "data-test-selector": "center-window__balloon",
                    direction: W.q.BottomRight,
                    size: W.r.Large,
                    offsetX: "10px"
                }, k.createElement(ie, {
                    newNotificationsCount: this.state.newNotificationsCount,
                    hasInitiallyLoaded: this.listDataLoaded(),
                    data: e,
                    friendRequestsData: this.getFriendRequestsData(),
                    onLoadMore: this.loadMore,
                    onViewNotification: this.viewNotification,
                    onReadAllNotifications: this.readAllNotifications,
                    onDeleteNotification: this.deleteNotification
                }))), this.renderUnseenNotificationsBadge()))
            }, t = b.__decorate([f(), Object(w.a)(ve, {
                name: "summaryData",
                skip: function(e) {
                    return !e.firstPageLoaded
                }
            }), Object(w.a)(be, {
                name: "viewNotifications"
            }), Object(w.a)(ge, {
                name: "listData",
                options: function(e) {
                    return {
                        variables: b.__assign({}, Ne, {
                            language: e.languageCode
                        })
                    }
                },
                skip: function(e) {
                    return e.shouldDefer
                },
                props: function(e) {
                    return b.__assign({}, e, {
                        loadMore: function() {
                            return e.listData.fetchMore({
                                query: ge,
                                variables: b.__assign({}, e.listData.variables, {
                                    cursor: e.listData.currentUser ? e.listData.currentUser.notifications.edges[e.listData.currentUser.notifications.edges.length - 1].cursor : ""
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult,
                                        i = n;
                                    return {
                                        currentUser: b.__assign({}, i.currentUser, {
                                            notifications: b.__assign({}, i.currentUser.notifications, {
                                                edges: e.currentUser.notifications.edges.concat(i.currentUser.notifications.edges)
                                            })
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            }), Object(w.a)(he, {
                name: "deleteOnsiteNotification"
            }), Object(w.a)(fe, {
                name: "readOnsiteNotification"
            }), Object(E.a)(function(e) {
                return {
                    query: ve,
                    skip: !e.currentUser,
                    topic: Object(D.e)("" + (e.currentUser && e.currentUser.id)),
                    types: [N.c.OnsiteNotificationSummaryUpdate, N.c.OnsiteNotificationUpdate, N.c.OnsiteNotificationCreate, N.c.OnsiteNotificationDelete],
                    mutator: m
                }
            }), Object(E.a)(function(e) {
                return {
                    query: ge,
                    variables: b.__assign({}, Ne, {
                        language: e.languageCode
                    }),
                    skip: !e.currentUser,
                    topic: Object(D.e)("" + (e.currentUser && e.currentUser.id)),
                    types: [N.c.OnsiteNotificationsRead, N.c.OnsiteNotificationUpdate, N.c.OnsiteNotificationCreate, N.c.OnsiteNotificationDelete],
                    mutator: h
                }
            }), Object(I.c)("OnsiteNotifications", {
                autoReportInteractive: !0
            })], t)
        }(k.Component),
        De = Te
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "OnsiteNotifications_DeleteNotification"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "DeleteNotificationInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "deleteNotification"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "notification"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 162
        }
    };
    n.loc.source = {
        body: "mutation OnsiteNotifications_DeleteNotification($input: DeleteNotificationInput!) {\n  deleteNotification(input: $input) {\n    notification {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "OnsiteNotifications_ListNotifications"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "limit"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Int"
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "cursor"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Cursor"
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "language"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "String"
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "notifications"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "after"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "cursor"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "language"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "language"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "pageInfo"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "hasNextPage"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "body"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "createdAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "updatedAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "isRead"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "thumbnailURL"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "actions"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "body"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "type"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "url"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 514
        }
    };
    n.loc.source = {
        body: "query OnsiteNotifications_ListNotifications($limit: Int, $cursor: Cursor, $language: String) {\n  currentUser {\n    id\n    notifications(first: $limit, after: $cursor, language: $language) {\n      pageInfo {\n        hasNextPage\n      }\n      edges {\n        cursor\n        node {\n          id\n          type\n          body\n          createdAt\n          updatedAt\n          isRead\n          thumbnailURL\n          actions {\n            body\n            type\n            url\n          }\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "OnsiteNotifications_ReadNotifications"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ReadNotificationsInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "readNotifications"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "notifications"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "isRead"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 167
        }
    };
    n.loc.source = {
        body: "mutation OnsiteNotifications_ReadNotifications($input: ReadNotificationsInput!) {\n readNotifications(input: $input) {\n   notifications {\n     id\n     isRead\n   }\n }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "OnsiteNotifications_Summary"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "notifications"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "summary"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "unseenCount"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "lastSeenAt"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "incomingFriendRequests"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "1"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "totalUnreadCount"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "newestEdge"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "createdAt"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 267
        }
    };
    n.loc.source = {
        body: "query OnsiteNotifications_Summary {\n  currentUser {\n    id\n    notifications {\n      summary {\n        unseenCount\n        lastSeenAt\n      }\n    }\n    incomingFriendRequests(first: 1) {\n      totalUnreadCount\n      newestEdge {\n        createdAt\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "OnsiteNotifications_View"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "viewedNotifications"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "notifications"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "summary"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "unseenCount"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "lastSeenAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 184
        }
    };
    n.loc.source = {
        body: "mutation OnsiteNotifications_View {\n  viewedNotifications {\n    user {\n      notifications {\n        summary {\n          unseenCount\n          lastSeenAt\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            firstPageLoaded: e.session.firstPageLoaded,
            languageCode: e.session.languageCode,
            currentUser: Object(g.c)(e)
        }
    }

    function a(e) {
        return {
            isLoggedIn: Object(g.d)(e)
        }
    }

    function r(e) {
        return {
            theme: Object(ke.a)(e),
            firstPageLoaded: e.session.firstPageLoaded,
            initialUserAvailabilityIsSet: e.session.initialUserAvailabilityIsSet
        }
    }

    function o(e) {
        return Object(p.bindActionCreators)({
            changeTheme: ye.b,
            initialUserAvailabilitySet: be.g
        }, e)
    }

    function s(e) {
        return Object(p.bindActionCreators)({
            login: function() {
                return Object(h.f)(m.a.TopNavSignupButton)
            },
            logout: h.g,
            signup: function() {
                return Object(h.h)(m.a.TopNavSignupButton)
            }
        }, e)
    }

    function l(e) {
        return {
            isLoggedIn: Object(g.d)(e)
        }
    }
    var c, u = n(6),
        d = n(10),
        p = n(9),
        m = n(48),
        h = n(32),
        g = n(17),
        f = n(0),
        v = n(1),
        b = n(2),
        y = n(386),
        k = n(47),
        S = n(12),
        _ = n(5),
        w = n(387),
        E = Object(u.a)(i)(w.b),
        C = n(22),
        N = n(40),
        T = n(18),
        D = n(107),
        I = n(265),
        O = n(64),
        L = n(4),
        x = n(28),
        R = n(128),
        F = n(49),
        U = n(375),
        P = n(383),
        M = n(7),
        A = n(56),
        j = n(3),
        B = (n(404), n(405)),
        H = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return f.__extends(t, e), t.prototype.render = function() {
                var e, t = {
                    "search-live-result-card": !0,
                    "search-live-result-card--hover": this.props.borderHover
                };
                return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.user.stream && (e = this.props.data.user.stream.previewImageURL), v.createElement(j.U, {
                    className: L(t),
                    key: this.props.id,
                    fullWidth: !0
                }, v.createElement(j.S, f.__assign({
                    linkTo: this.props.linkTo,
                    hover: this.props.borderHover,
                    tabIndex: -1,
                    "data-a-target": "search-live-result-card-link"
                }, Object(A.a)(this.props)), v.createElement(j.A, null, v.createElement(j.U, {
                    className: "search-live-result-card__wrapper",
                    position: j._2.Relative,
                    overflow: j.Y.Hidden,
                    fullWidth: !0
                }, v.createElement(j.C, {
                    imageSrc: e || b.a.defaultStreamPreviewURL,
                    imageAlt: this.props.imageAlt,
                    aspect: j.k.Aspect16x9
                }), v.createElement(j._17, {
                    className: "search-live-result-card__overlay",
                    position: j._2.Absolute,
                    attachLeft: !0,
                    attachTop: !0,
                    attachRight: !0,
                    attachBottom: !0,
                    display: j.H.Flex,
                    flexDirection: j.J.Column,
                    justifyContent: j.T.End,
                    overflow: j.Y.Hidden,
                    color: j.F.Overlay
                }, v.createElement(j.B, null, v.createElement(j.U, {
                    className: "search-live-result-card__body",
                    padding: .5
                }, v.createElement(j._21, {
                    type: j._26.H5,
                    ellipsis: !0,
                    className: "search-live-result-card__title"
                }, this.props.channelName), v.createElement(j.U, {
                    className: "search-live-result-card__viewer-count-container",
                    display: j.H.Flex,
                    alignItems: j.c.Center
                }, v.createElement(j.U, {
                    margin: {
                        right: .5
                    },
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    flexShrink: 0
                }, v.createElement(j._8, {
                    asset: j._9.GlyphLive,
                    type: j._10.Live,
                    width: 14,
                    height: 14
                })), v.createElement(j._21, {
                    className: "search-live-result-card__viewer-count",
                    ellipsis: !0
                }, Object(b.e)(this.props.viewerCount))), v.createElement(j._21, {
                    className: "search-live-result-card__info",
                    ellipsis: !0
                }, this.props.title))))))))
            }, t = f.__decorate([Object(M.a)(B, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.login
                        }
                    }
                }
            })], t)
        }(v.Component),
        V = (n(406), function(e) {
            var t, n, i;
            e.title && (e.hitsCount && e.hitsCount > 0 ? t = Object(b.d)("more", "SearchResultSection") : e.totalHitsCount && e.totalHitsCount > 0 && (t = Object(b.d)("Show", "SearchResultSection")), void 0 !== e.totalHitsCount && (i = v.createElement(j.Z, {
                type: j._0.Brand,
                label: e.totalHitsCount < 100 ? Object(b.e)(e.totalHitsCount) : "99+"
            })), n = v.createElement(j.S, f.__assign({
                onClick: e.onHeaderClick,
                tabIndex: -1
            }, Object(j._39)(e), {
                "data-ts_selectable": !0
            }), v.createElement(j.U, {
                className: "search-result-view__titlesep search-result-view--no-hover",
                display: j.H.Flex,
                justifyContent: j.T.Between
            }, v.createElement("div", null, v.createElement(j.U, {
                display: j.H.Inline,
                margin: {
                    right: 1
                }
            }, v.createElement(j._21, {
                type: j._26.Span,
                color: j.F.Link,
                fontSize: j.L.Size7,
                transform: j._25.Uppercase
            }, e.title)), i), v.createElement(j._21, {
                fontSize: j.L.Size7,
                transform: j._25.Uppercase
            }, t))));
            var a;
            return (Array.isArray(e.children) && e.children.length > 0 || e.children && !Array.isArray(e.children)) && (a = v.createElement(j.U, {
                className: "search-result-view__listing-wrapper",
                margin: {
                    top: .5,
                    bottom: .5
                }
            }, e.children)), v.createElement("div", {
                className: "search-result-view__block"
            }, n, a)
        }),
        z = (n(407), function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return f.__extends(t, e), t.prototype.render = function() {
                return v.createElement(j.U, {
                    className: "search-title-bar " + (this.props.showBack ? "search-title-bar--show" : ""),
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    "data-a-target": "nav-search-title-bar"
                }, v.createElement(j._17, {
                    className: "search-title-bar__back-container",
                    display: j.H.Flex,
                    alignItems: j.c.Stretch,
                    borderRight: !0
                }, v.createElement(j.v, {
                    icon: j._9.AngleLeft,
                    type: j.w.Secondary,
                    size: j.x.Large,
                    onClick: this.props.onBackClick,
                    ariaLabel: Object(b.d)("Back button", "SearchTitleBar"),
                    "data-ts_selectable": this.props.showBack,
                    "data-a-target": "nav-search-back"
                })), v.createElement(j.U, {
                    className: "search-title-bar__title"
                }, v.createElement(j._21, {
                    fontSize: j.L.Size5
                }, this.props.title)))
            }, t
        }(v.Component)),
        W = n(269),
        q = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleOptionChange = function(e) {
                    var n = e.currentTarget.elements;
                    t.props.onOptionsChange({
                        type: +n.type.value,
                        length: +n.video_length.value,
                        sort: +n.sort.value
                    })
                }, t
            }
            return f.__extends(t, e), t.prototype.render = function() {
                return v.createElement(j._17, {
                    className: "search__video-filters",
                    background: j.m.Alt,
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, v.createElement(j.P, {
                    display: j.H.Flex,
                    justifyContent: j.T.Between
                }, v.createElement("form", {
                    onInput: this.handleOptionChange
                }, v.createElement(j.U, {
                    flexShrink: 0
                }, v.createElement(j.U, {
                    display: j.H.InlineFlex,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._14, {
                    name: "type"
                }, v.createElement("option", {
                    value: W.c.AllVideos
                }, Object(b.d)("All Videos", "search__video-filters")), v.createElement("option", {
                    value: W.c.PastBroadcasts
                }, Object(b.d)("Past Broadcasts", "search__video-filters")), v.createElement("option", {
                    value: W.c.Uploads
                }, Object(b.d)("Uploads", "search__video-filters")), v.createElement("option", {
                    value: W.c.Highlights
                }, Object(b.d)("Highlights", "search__video-filters")))), v.createElement(j.U, {
                    display: j.H.InlineFlex
                }, v.createElement(j._14, {
                    name: "video_length"
                }, v.createElement("option", {
                    value: W.a.AnyLength
                }, Object(b.d)("Any Length", "search__video-filters")), v.createElement("option", {
                    value: W.a.Short
                }, Object(b.d)("Short", "search__video-filters")), v.createElement("option", {
                    value: W.a.Long
                }, Object(b.d)("Long", "search__video-filters"))))), v.createElement(j.U, {
                    display: j.H.InlineFlex,
                    flexShrink: 0
                }, v.createElement(j._14, {
                    name: "sort"
                }, v.createElement("option", {
                    value: W.b.Popular
                }, Object(b.d)("Popular", "search__video-filters")), v.createElement("option", {
                    value: W.b.Newest
                }, Object(b.d)("Newest", "search__video-filters")))))))
            }, t
        }(v.Component),
        G = n(66),
        Q = (n(408), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.onBackClick = function() {
                    return t.headerSelect(null)
                }, t.gameHeaderSelect = function() {
                    return t.headerSelect(G.a.Games)
                }, t.liveHeaderSelect = function() {
                    return t.headerSelect(G.a.Channels)
                }, t.userHeaderSelect = function() {
                    return t.headerSelect(G.a.Users)
                }, t.videoHeaderSelect = function() {
                    return t.headerSelect(G.a.Videos)
                }, t.communityHeaderSelect = function() {
                    return t.headerSelect(G.a.Communities)
                }, t.headerSelect = function(e) {
                    t.props.onCategorySelected(e)
                }, t.onClick = function(e) {
                    if (e.nativeEvent.stopImmediatePropagation(), e.target !== e.currentTarget) {
                        var n = e.target,
                            i = n.querySelector("a"),
                            a = i ? i.querySelector("[data-tt_content]") : null;
                        a || (i = n.closest("a")), a = i && i.dataset.tt_content ? i : null, a && t.props.onResultSelected()
                    }
                }, t.setScrollRef = function(e) {
                    return t.scroll = e
                }, t
            }
            return f.__extends(t, e), t.prototype.componentDidUpdate = function() {
                this.previousCategory !== this.props.currentCategory && (this.previousCategory = this.props.currentCategory, this.scroll.scrollToTop())
            }, t.prototype.render = function() {
                var e, t = {
                    "search-result-view": !0,
                    "search-result-view--active": !0,
                    "search-result-view--filtered": this.props.currentCategory === G.a.Videos
                };
                e = this.props.currentCategory && null !== this.props.currentCategory ? v.createElement(z, {
                    title: this.getCategoryTitle(this.props.currentCategory),
                    showBack: !0,
                    onBackClick: this.onBackClick
                }) : v.createElement(z, {
                    title: Object(b.d)("Top Results", "SearchResultPanel__titlebar"),
                    showBack: !1
                });
                var n;
                n = this.props.isWaiting ? v.createElement(j.X, {
                    fillContent: !0
                }) : this.props.isErrored ? this.getErrorMessage() : this.props.currentCategory && null !== this.props.currentCategory ? this.getCategoryDrillDown(this.props.currentCategory) : this.props.gameResults && this.props.gameResults.totalHits > 0 || this.props.userResults && this.props.userResults.totalHits > 0 || this.props.communityResults && this.props.communityResults.totalHits > 0 || this.props.videoResults && this.props.videoResults.totalHits > 0 || this.props.liveResults && this.props.liveResults.totalHits > 0 ? this.getResultSections() : this.getNoResultsMessage();
                var i;
                return this.props.currentCategory === G.a.Videos && (i = v.createElement(q, {
                    key: "video-filters",
                    onOptionsChange: this.props.onVideoOptionsChange
                })), v.createElement("div", {
                    className: "search-panel " + (this.props.isOpen ? "" : "search-panel--closed"),
                    tabIndex: 0,
                    onKeyDown: this.props.onKeyDown
                }, e, i, v.createElement(j._17, {
                    className: L(t),
                    background: j.m.Base,
                    position: j._2.Absolute,
                    overflow: j.Y.Hidden,
                    display: j.H.Block
                }, v.createElement(x.b, {
                    className: "search-result-view__wrapper",
                    contentClassName: "search-result-view__scroll-container",
                    onClick: this.onClick,
                    scrollRef: this.setScrollRef,
                    suppressScrollX: !0,
                    "data-a-target": "search-scroller"
                }, v.createElement(j.U, {
                    fullWidth: !0
                }, n, v.createElement(x.a, {
                    key: this.props.currentCategory || "none",
                    enabled: !this.props.isWaiting && this.props.isOpen,
                    loadMore: this.props.loadMore
                })))))
            }, t.prototype.getResultSections = function() {
                var e, t = [],
                    n = [],
                    i = this.getGameCards(),
                    a = this.getUserCards(),
                    r = this.getCommunityCards(),
                    o = this.getVideoCards(),
                    s = this.getLiveCards();
                return s.length > 0 && (e = v.createElement(j.U, {
                    className: "search-result-view__live",
                    margin: {
                        y: 1,
                        x: 1
                    }
                }, v.createElement(j.N, null, s))), this.getResultSection("games-section", G.a.Games, this.gameHeaderSelect, this.props.gameResults, i.length, i, n, t), this.getResultSection("live-section", G.a.Channels, this.liveHeaderSelect, this.props.liveResults, s.length, e, n, t), this.getResultSection("channels-section", G.a.Users, this.userHeaderSelect, this.props.userResults, a.length, a, n, t), this.getResultSection("videos-section", G.a.Videos, this.videoHeaderSelect, this.props.videoResults, o.length, o, n, t), this.getResultSection("communities-section", G.a.Communities, this.communityHeaderSelect, this.props.communityResults, r.length, r, n, t), t.concat(n)
            }, t.prototype.getResultSection = function(e, t, n, i, a, r, o, s) {
                var l = v.createElement(V, {
                    key: e,
                    totalHitsCount: i ? i.totalHits : 0,
                    hitsCount: a,
                    title: this.getCategoryTitle(t),
                    onHeaderClick: n,
                    "data-a-target": e
                }, r);
                0 === a ? o.push(l) : s.push(l)
            }, t.prototype.getGameCards = function() {
                return this.props.gameResults ? this.props.gameResults.results.map(function(e) {
                    return v.createElement(P.a, {
                        id: "game_" + e.id,
                        key: "game_" + e.id,
                        imageAlt: e.thumbnailAltText,
                        linkTo: e.linkTo,
                        title: e.title,
                        "data-ts_selectable": !0,
                        "data-tt_content": !0
                    })
                }) : []
            }, t.prototype.getLiveCards = function() {
                return this.props.liveResults ? this.props.liveResults.results.map(function(e) {
                    var t = Object(F.a)(e.login || "", e.name || "");
                    return v.createElement(j.G, {
                        key: "live_" + e.id,
                        cols: 6
                    }, v.createElement(j.U, {
                        margin: {
                            bottom: 1
                        }
                    }, v.createElement(H, {
                        id: "live_" + e.id,
                        imageAlt: e.thumbnailAltText,
                        linkTo: e.linkTo,
                        title: e.status || "",
                        login: e.login ? e.login : "",
                        channelName: t,
                        viewerCount: e.viewerCount || 0,
                        "data-ts_selectable": !0,
                        "data-tt_content": !0
                    })))
                }) : []
            }, t.prototype.getUserCards = function() {
                return this.props.userResults ? this.props.userResults.results.map(function(e) {
                    var t = Object(F.a)(e.login || "", e.name || "");
                    return v.createElement(j.S, {
                        linkTo: e.linkTo,
                        tabIndex: -1,
                        "data-ts_selectable": !0,
                        "data-tt_content": !0,
                        key: e.id
                    }, v.createElement(j.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, v.createElement(j.A, {
                        row: !0
                    }, v.createElement(j.C, {
                        imageAlt: e.thumbnailAltText,
                        imageSrc: e.thumbnail ? e.thumbnail : "",
                        size: j.D.Size4,
                        aspect: j.k.Aspect1x1
                    }), v.createElement(j.B, null, v.createElement(j.P, {
                        padding: {
                            x: 1
                        }
                    }, v.createElement(j._21, {
                        type: j._26.H5,
                        ellipsis: !0
                    }, t))))))
                }) : []
            }, t.prototype.getVideoCards = function() {
                return this.props.videoResults ? this.props.videoResults.results.map(function(e) {
                    var t = Object(F.a)(e.login || "", e.name || ""),
                        n = Object(U.a)(e.length || 0);
                    return v.createElement(j.S, {
                        key: "video_" + e.id,
                        linkTo: e.linkTo,
                        tabIndex: -1,
                        "data-ts_selectable": !0,
                        "data-tt_content": !0
                    }, v.createElement(j.U, {
                        className: "search-panel__card",
                        fullWidth: !0,
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, v.createElement(j.A, {
                        row: !0
                    }, v.createElement(j.C, {
                        imageSrc: e.thumbnail ? e.thumbnail : "",
                        imageAlt: e.thumbnailAltText,
                        size: j.D.Size8,
                        aspect: j.k.Aspect16x9
                    }), v.createElement(j.B, null, v.createElement(j.P, {
                        margin: {
                            left: 1
                        }
                    }, v.createElement(j._21, {
                        type: j._26.H5,
                        ellipsis: !0
                    }, e.title)), v.createElement(j.P, {
                        margin: {
                            left: 1
                        }
                    }, v.createElement(j._21, {
                        className: "search-panel__link",
                        ellipsis: !0
                    }, e.createdAt ? Object(b.c)(new Date(1e3 * e.createdAt), "medium") : "", " · ", n || "", " · ", v.createElement(j._21, {
                        className: "search-pannel__highlight-link",
                        type: j._26.Span
                    }, t)))))))
                }) : []
            }, t.prototype.getCommunityCards = function() {
                return this.props.communityResults ? this.props.communityResults.results.map(function(e) {
                    return v.createElement(j.S, {
                        key: "community_" + e.id,
                        targetBlank: Object(R.b)(),
                        linkTo: Object(R.a)(e.linkTo),
                        tabIndex: -1,
                        "data-ts_selectable": !0,
                        "data-tt_content": !0
                    }, v.createElement(j.U, {
                        className: "search-panel__card",
                        fullWidth: !0,
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, v.createElement(j.A, {
                        row: !0
                    }, v.createElement(j.C, {
                        imageSrc: e.thumbnail ? e.thumbnail : "",
                        imageAlt: e.thumbnailAltText,
                        size: j.D.Size4,
                        aspect: j.k.BoxArt
                    }), v.createElement(j.B, null, v.createElement(j.P, {
                        margin: {
                            left: 1
                        }
                    }, v.createElement(j._21, {
                        type: j._26.H5,
                        ellipsis: !0
                    }, e.name)), v.createElement(j.P, {
                        margin: {
                            left: 1
                        }
                    }, v.createElement(j._21, {
                        className: "search-panel__link",
                        ellipsis: !0
                    }, Object(b.d)("{viewerCount,number} Viewers", {
                        viewerCount: e.viewerCount || 0
                    }, "SearchResultPanel")))))))
                }) : []
            }, t.prototype.getCategoryDrillDown = function(e) {
                var t;
                switch (e) {
                    case G.a.Games:
                        if (!this.props.gameResults || 0 === this.props.gameResults.totalHits) return this.getNoResultsMessage();
                        t = this.getGameCards();
                        break;
                    case G.a.Users:
                        if (!this.props.userResults || 0 === this.props.userResults.totalHits) return this.getNoResultsMessage();
                        t = this.getUserCards();
                        break;
                    case G.a.Communities:
                        if (!this.props.communityResults || 0 === this.props.communityResults.totalHits) return this.getNoResultsMessage();
                        t = this.getCommunityCards();
                        break;
                    case G.a.Videos:
                        if (!this.props.videoResults || 0 === this.props.videoResults.totalHits) return this.getNoResultsMessage();
                        t = this.getVideoCards();
                        break;
                    case G.a.Channels:
                        if (!this.props.liveResults || 0 === this.props.liveResults.totalHits) return this.getNoResultsMessage();
                        t = [v.createElement(j.U, {
                            className: "search-result-view__live",
                            margin: {
                                x: 1
                            },
                            key: "live_drill-down-container"
                        }, v.createElement(j.N, null, this.getLiveCards()))];
                        break;
                    default:
                        return this.getNoResultsMessage()
                }
                return v.createElement(V, null, t)
            }, t.prototype.getCategoryTitle = function(e) {
                switch (e) {
                    case G.a.Games:
                        return Object(b.d)("Games", "SearchResultPanel");
                    case G.a.Users:
                        return Object(b.d)("Channels", "SearchResultPanel");
                    case G.a.Communities:
                        return Object(b.d)("Communities", "SearchResultPanel");
                    case G.a.Videos:
                        return Object(b.d)("Videos", "SearchResultPanel");
                    case G.a.Channels:
                        return Object(b.d)("Live", "SearchResultPanel");
                    default:
                        return Object(b.d)("Top Results", "SearchResultPanel")
                }
            }, t.prototype.getNoResultsMessage = function() {
                return v.createElement(j.U, {
                    display: j.H.Flex,
                    flexDirection: j.J.Column,
                    justifyContent: j.T.Center,
                    alignItems: j.c.Center,
                    className: "notice-wrap aspect__fill"
                }, v.createElement(j.U, {
                    className: "notice-wrap__visual",
                    textAlign: j._22.Center,
                    flexShrink: 1
                }, v.createElement(j._8, {
                    asset: j._9.SearchNoResults,
                    width: 46,
                    height: 48
                })), v.createElement("h4", {
                    className: "notice-wrap__title flex__item",
                    "data-test-selector": "panel-body-no-results"
                }, Object(b.d)("No results found", "SearchResultPanel")), v.createElement("p", {
                    className: "notice-wrap__text flex__item"
                }, Object(b.d)("They're probably in another castle", "SearchResultPanel")))
            }, t.prototype.getErrorMessage = function() {
                return v.createElement(j.U, {
                    display: j.H.Flex,
                    flexDirection: j.J.Column,
                    justifyContent: j.T.Center,
                    alignItems: j.c.Center,
                    className: "notice-wrap aspect__fill"
                }, v.createElement(j.U, {
                    className: "notice-wrap__visual",
                    textAlign: j._22.Center,
                    flexShrink: 1
                }, v.createElement(j._8, {
                    asset: j._9.DeadGlitch,
                    width: 46,
                    height: 48
                })), v.createElement("h4", {
                    "data-test-selector": "search-error-message",
                    className: "notice-wrap__title flex__item"
                }, Object(b.d)("Search is not available at this time", "SearchResultPanel")), v.createElement("p", {
                    className: "notice-wrap__text flex__item"
                }, Object(b.d)("Please try again later", "SearchResultPanel")))
            }, t
        }(v.Component)),
        K = (n(409), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.state = {
                    isAnimating: !1,
                    currentCategory: t.currentCategory
                }, n
            }
            return f.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                var t = this;
                e.currentCategory && e.currentCategory !== this.props.currentCategory && this.setState({
                    currentCategory: e.currentCategory
                }), this.props.isVisible !== e.isVisible && (this.animationTimeout && window.clearTimeout(this.animationTimeout), this.setState({
                    isAnimating: !0
                }), this.animationTimeout = window.setTimeout(function() {
                    t.setState({
                        isAnimating: !1
                    })
                }, 300))
            }, t.prototype.componentWillUnmount = function() {
                this.animationTimeout && window.clearTimeout(this.animationTimeout)
            }, t.prototype.render = function() {
                if (!this.state.currentCategory) return null;
                var e = this.getAssetName(this.state.currentCategory);
                return this.props.isVisible || this.state.isAnimating ? v.createElement(j.U, {
                    className: "search-tag"
                }, v.createElement(j.e, {
                    enabled: !0,
                    type: this.props.isVisible ? j.i.BounceIn : j.i.BounceOut
                }, v.createElement(j._20, {
                    label: this.state.currentCategory,
                    icon: e,
                    onClose: this.props.onClick,
                    "data-test-selector": "filter-icon",
                    "data-a-target": "nav-search-clear"
                }))) : null
            }, t.prototype.getAssetName = function(e) {
                switch (e) {
                    case G.a.Games:
                        return j._9.NavGames;
                    case G.a.Users:
                        return j._9.NavProfile;
                    case G.a.Communities:
                        return j._9.Communities;
                    case G.a.Videos:
                        return j._9.NavVideos;
                    case G.a.Channels:
                    default:
                        return j._9.NavChannels
                }
            }, t
        }(v.Component)),
        $ = (n(410), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleChange = function(e) {
                    t.props.onChange(e.target.value)
                }, t.categoryTagClicked = function(e) {
                    e.nativeEvent.stopImmediatePropagation(), t.props.onCategorySelected(null)
                }, t
            }
            return f.__extends(t, e), t.prototype.render = function() {
                return v.createElement("div", null, v.createElement("div", {
                    className: "top-nav__search-container",
                    "data-click-out-id": "nav-search-balloon"
                }, v.createElement(O.a, {
                    onClickOut: this.props.onClickOut
                }, v.createElement(j._11, {
                    onChange: this.handleChange,
                    onFocus: this.props.onFocus,
                    onKeyDown: this.props.onKeyDown,
                    placeholder: Object(b.d)("Search", "NavSearch"),
                    id: "nav-search-input",
                    "data-a-target": "nav-search-input",
                    spellCheck: !1
                }), v.createElement(j.p, {
                    direction: j.q.Bottom,
                    noTail: !0,
                    size: j.r.Large,
                    show: this.props.isOpen,
                    offsetY: "5px",
                    "data-a-target": "nav-search-balloon"
                }, v.createElement(Q, {
                    isOpen: this.props.isOpen,
                    gameResults: this.props.gameResults,
                    userResults: this.props.userResults,
                    communityResults: this.props.communityResults,
                    videoResults: this.props.videoResults,
                    liveResults: this.props.liveResults,
                    isErrored: this.props.isErrored,
                    isWaiting: this.props.isWaiting,
                    onResultSelected: this.props.onResultSelected,
                    onCategorySelected: this.props.onCategorySelected,
                    currentCategory: this.props.currentCategory,
                    onVideoOptionsChange: this.props.onVideoOptionsChange,
                    loadMore: this.props.loadMore,
                    onKeyDown: this.props.onKeyDown
                })), v.createElement(K, {
                    isVisible: this.props.isOpen && !!this.props.currentCategory,
                    currentCategory: this.props.currentCategory,
                    onClick: this.categoryTagClicked
                }))))
            }, t
        }(v.Component)),
        Y = 50,
        J = function(e) {
            function t() {
                var t = e.call(this) || this;
                return t.onCategorySelected = function(e) {
                    t.setState(f.__assign({}, t.getEmptyState(), {
                        term: t.state.term,
                        currentCategory: e,
                        isOpen: !0,
                        isWaiting: !0
                    }), function() {
                        t.doSearch(t.state.term)
                    })
                }, t.onChange = function(e) {
                    if (t.inputTimer && (clearTimeout(t.inputTimer), t.inputTimer = 0), !e) return void t.setState(t.getEmptyState());
                    t.setState({
                        topGameResults: null,
                        topUserResults: null,
                        topLiveResults: null,
                        topVideoResults: null,
                        topCommunityResults: null,
                        isWaiting: !0
                    }), t.inputTimer = setTimeout(function() {
                        return t.doSearch(e)
                    }, Y)
                }, t.onHistoryChange = function() {
                    t.state.isOpen && t.setState({
                        isOpen: !1
                    })
                }, t.onClickOut = function() {
                    t.state.isOpen && t.setState({
                        isOpen: !1
                    })
                }, t.onFocus = function() {
                    t.state.term && !t.state.isOpen && t.setState({
                        isOpen: !0
                    })
                }, t.onKeyDown = function(e) {
                    t.state.term && (e.keyCode === N.a.Esc ? t.setState({
                        isOpen: !1
                    }) : e.keyCode === N.a.Up ? t.focusNext(-1) : e.keyCode === N.a.Down && t.focusNext(1))
                }, t.onResultSelected = function() {
                    t.setState({
                        isOpen: !1
                    })
                }, t.loadMore = function() {
                    return f.__awaiter(t, void 0, void 0, function() {
                        var e, t, n, i;
                        return f.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    if (this.state.queryID || null === this.state.currentCategory || !0 === this.state.exhaustedHits) return [2];
                                    e = this.state.currentPage + 1, a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(this.state.currentCategory, this.state.term, "", {
                                        page: e
                                    })];
                                case 2:
                                    return t = a.sent(), [3, 4];
                                case 3:
                                    return n = a.sent(), b.i.error(n, "Algolia page search failed"), this.setState(f.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        isOpen: !0
                                    })), [2];
                                case 4:
                                    return t ? (i = Object(I.b)({
                                        searchResults: t,
                                        append: e > 0,
                                        currentGameResults: this.state.currentGameResults,
                                        currentUserResults: this.state.currentUserResults,
                                        currentCommunityResults: this.state.currentCommunityResults,
                                        currentVideoResults: this.state.currentVideoResults,
                                        currentLiveResults: this.state.currentLiveResults
                                    }), this.setState(f.__assign({}, i, {
                                        term: this.state.term,
                                        isOpen: !0,
                                        isWaiting: !1,
                                        currentPage: e,
                                        exhaustedHits: i.exhaustedHits
                                    })), [2]) : (this.setState(f.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        isOpen: !0
                                    })), [2])
                            }
                        })
                    })
                }, t.changeVideoOptions = function(e) {
                    return f.__awaiter(t, void 0, void 0, function() {
                        var t, n, i;
                        return f.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    t = T.a(), a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, this.searchClient.queryVideos(this.state.term, t, e)];
                                case 2:
                                    return n = a.sent(), n.hits && this.setState({
                                        currentVideoResults: {
                                            totalHits: n.totalHits,
                                            results: n.hits.map(I.a)
                                        },
                                        queryID: ""
                                    }), [3, 4];
                                case 3:
                                    return i = a.sent(), b.i.error(i, "Algolia video search failed"), this.setState({
                                        isErrored: !0
                                    }), [3, 4];
                                case 4:
                                    return [2]
                            }
                        })
                    })
                }, t.searchClient = new D.a(b.a.algoliaApplicationID, b.a.algoliaAPIKey), t.state = t.getEmptyState(), t
            }
            return f.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive(), this.props.history.listen(this.onHistoryChange)
            }, t.prototype.componentDidUpdate = function() {
                !this.state.focusSelectable || this.state.queryID || this.inputTimer || (this.focusNext(1), this.setState({
                    focusSelectable: !1
                }))
            }, t.prototype.render = function() {
                return v.createElement($, {
                    onChange: this.onChange,
                    onClickOut: this.onClickOut,
                    onFocus: this.onFocus,
                    onKeyDown: this.onKeyDown,
                    onResultSelected: this.onResultSelected,
                    gameResults: this.state.currentGameResults,
                    userResults: this.state.currentUserResults,
                    communityResults: this.state.currentCommunityResults,
                    videoResults: this.state.currentVideoResults,
                    liveResults: this.state.currentLiveResults,
                    isOpen: this.state.isOpen,
                    isErrored: this.state.isErrored,
                    isWaiting: this.state.isWaiting,
                    onCategorySelected: this.onCategorySelected,
                    currentCategory: this.state.currentCategory,
                    onVideoOptionsChange: this.changeVideoOptions,
                    loadMore: this.loadMore
                })
            }, t.prototype.focusNext = function(e) {
                var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                    i = document.activeElement,
                    a = Array.prototype.indexOf.call(n, i);
                if (t = a < 0 ? e > 0 ? 0 : n.length - 1 : a + e, t < 0 && (t = 0), !(t >= n.length)) {
                    var r = n.item(t);
                    r.focus(), r.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                        currentFocus: r
                    })
                }
            }, t.prototype.doSearch = function(e) {
                return f.__awaiter(this, void 0, void 0, function() {
                    var t, n, i, a, r, o;
                    return f.__generator(this, function(s) {
                        switch (s.label) {
                            case 0:
                                this.inputTimer = 0, t = -1, n = T.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                    queryID: n,
                                    focusSelectable: !i && !!this.state.currentFocus
                                }), s.label = 1;
                            case 1:
                                return s.trys.push([1, 6, , 7]), this.state.currentCategory && null !== this.state.currentCategory ? (t = 0, [4, this.searchClient.queryForType(this.state.currentCategory, e, n)]) : [3, 3];
                            case 2:
                                return a = s.sent(), [3, 5];
                            case 3:
                                return this.state.topGameResults && this.state.topUserResults && this.state.topLiveResults && this.state.topVideoResults && this.state.topCommunityResults ? (this.setState({
                                    currentGameResults: this.state.topGameResults,
                                    currentUserResults: this.state.topUserResults,
                                    currentLiveResults: this.state.topLiveResults,
                                    currentVideoResults: this.state.topVideoResults,
                                    currentCommunityResults: this.state.topCommunityResults,
                                    queryID: "",
                                    term: e,
                                    isOpen: !0,
                                    isWaiting: !1,
                                    currentPage: t
                                }), [2]) : [4, this.searchClient.queryTopResults(e, n)];
                            case 4:
                                a = s.sent(), s.label = 5;
                            case 5:
                                return [3, 7];
                            case 6:
                                return r = s.sent(), b.i.error(r, "Algolia top results search failed"), this.setState(f.__assign({}, this.getEmptyState(), {
                                    isErrored: !0,
                                    isOpen: !0,
                                    term: e
                                })), [2];
                            case 7:
                                return a ? this.state.queryID !== a.id ? [2] : (o = Object(I.b)({
                                    searchResults: a,
                                    append: !1,
                                    currentGameResults: this.state.currentGameResults,
                                    currentUserResults: this.state.currentUserResults,
                                    currentCommunityResults: this.state.currentCommunityResults,
                                    currentVideoResults: this.state.currentVideoResults,
                                    currentLiveResults: this.state.currentLiveResults
                                }), this.state.currentCategory && null === this.state.currentCategory && (o = f.__assign({}, o, {
                                    topGameResults: o.currentGameResults,
                                    topUserResults: o.currentUserResults,
                                    topLiveResults: o.currentLiveResults,
                                    topVideoResults: o.currentVideoResults,
                                    topCommunityResults: o.currentCommunityResults,
                                    exhaustedHits: o.exhaustedHits
                                })), this.setState(function(n) {
                                    return f.__assign({}, n, o, {
                                        queryID: "",
                                        term: e,
                                        isOpen: !0,
                                        isWaiting: !1,
                                        currentPage: t
                                    })
                                }), [2]) : (this.setState(f.__assign({}, this.getEmptyState(), {
                                    isErrored: !0,
                                    isOpen: !0,
                                    term: e
                                })), [2])
                        }
                    })
                })
            }, t.prototype.getEmptyState = function() {
                return {
                    term: "",
                    currentGameResults: {
                        totalHits: 0,
                        results: []
                    },
                    currentUserResults: {
                        totalHits: 0,
                        results: []
                    },
                    currentLiveResults: {
                        totalHits: 0,
                        results: []
                    },
                    currentCommunityResults: {
                        totalHits: 0,
                        results: []
                    },
                    currentVideoResults: {
                        totalHits: 0,
                        results: []
                    },
                    isOpen: !1,
                    isErrored: !1,
                    queryID: "",
                    isWaiting: !1,
                    currentCategory: null,
                    currentPage: -1,
                    focusSelectable: !1,
                    exhaustedHits: !1
                }
            }, t = f.__decorate([Object(_.c)("NavSearch")], t)
        }(v.Component),
        X = Object(C.e)(J),
        Z = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.onLoginClick = function(e) {
                    e.preventDefault(), t.props.login()
                }, t.onSignUpClick = function(e) {
                    e.preventDefault(), t.props.signup()
                }, t
            }
            return f.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return v.createElement(j.U, {
                    className: "anon-user",
                    flexWrap: j.K.NoWrap,
                    display: j.H.Flex,
                    margin: {
                        left: 1
                    },
                    "data-a-target": "user-card"
                }, v.createElement(j.U, {
                    margin: {
                        right: 1
                    }
                }, v.createElement(j.u, {
                    onClick: this.onLoginClick,
                    "data-a-target": "login-button"
                }, Object(b.d)("Log in", "top-nav"))), v.createElement(j.U, {
                    margin: {
                        right: 1
                    }
                }, v.createElement(j.u, {
                    onClick: this.onSignUpClick,
                    "data-a-target": "signup-button"
                }, Object(b.d)("Sign up", "top-nav"))))
            }, t = f.__decorate([Object(_.c)("AnonUser")], t)
        }(v.Component),
        ee = Z,
        te = n(411),
        ne = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return f.__extends(t, e), t.prototype.render = function() {
                var e = !1;
                if (this.props.data) {
                    if (this.props.data.loading || this.props.data.error) return null;
                    e = !!this.props.data.currentUser && this.props.data.currentUser.hasPrime
                }
                return !this.props.isLoggedIn || e ? v.createElement(d.b, {
                    to: {
                        pathname: "/store/merch",
                        state: {
                            medium: S.PageviewMedium.TopNav,
                            content: S.PageviewContent.Games
                        }
                    },
                    className: "top-nav__nav-link",
                    "data-a-target": "store-link",
                    activeClassName: "active"
                }, Object(b.d)("Store", "TopNavStore")) : null
            }, t = f.__decorate([Object(M.a)(te, {
                skip: function(e) {
                    return !e.isLoggedIn
                }
            }), Object(_.c)("TopNavStoreComponent", {
                autoReportInteractive: !0
            })], t)
        }(v.Component),
        ie = ne,
        ae = Object(u.a)(a)(ie),
        re = n(105),
        oe = n(131),
        se = n(412),
        le = Object(R.a)("/products/turbo?ref=top_nav"),
        ce = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return f.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                if (this.props.data.loading || this.props.data.error) return null;
                var e = this.props.data.requestInfo && !Object(re.b)(this.props.data.requestInfo.countryCode),
                    t = !this.props.data.currentUser || !this.props.data.currentUser.hasTurbo;
                if (e && t) return v.createElement("a", {
                    href: le,
                    target: "_blank",
                    className: "top-nav__nav-link",
                    "data-a-target": "try-prime-link"
                }, Object(b.d)("Go Turbo", "TopNavUpsell"));
                if (!this.props.data.currentUser || !this.props.data.currentUser.hasPrime) {
                    var n = Object(oe.d)(oe.b, window.location.pathname.substring(1));
                    return v.createElement("a", {
                        href: n,
                        target: "_blank",
                        className: "top-nav__nav-link",
                        "data-a-target": "try-prime-link"
                    }, Object(b.d)("Try Prime", "TopNavUpsell"))
                }
                return null
            }, t = f.__decorate([Object(M.a)(se), Object(_.c)("TopNavUpsellComponent")], t)
        }(v.Component),
        ue = ce,
        de = n(86),
        pe = n(106),
        me = n(51),
        he = n(39),
        ge = n(21),
        fe = n(30),
        ve = n(132),
        be = n(53),
        ye = n(130),
        ke = n(52),
        Se = function() {
            return v.createElement(j.U, {
                display: j.H.Flex,
                flexGrow: 1,
                alignItems: j.c.Center,
                fullHeight: !0,
                className: "top-nav__user-card",
                "data-a-target": "user-card"
            }, v.createElement(j.U, {
                display: j.H.Flex,
                flexWrap: j.K.NoWrap,
                alignItems: j.c.Center,
                flexGrow: 1,
                padding: {
                    right: 1
                },
                fullHeight: !0,
                className: "top-nav__user-card-wrapper"
            }, v.createElement(j.U, {
                margin: {
                    x: 1
                }
            }, v.createElement(_.a, {
                size: 30,
                imageSrc: b.a.defaultAvatarURL,
                imageAlt: Object(b.d)("User Avatar", "UserError"),
                "data-a-target": "top-nav-avatar"
            })), v.createElement(j.U, {
                flexGrow: 1
            }, v.createElement(j._17, {
                color: j.F.Base,
                className: "top-nav__username"
            }, ""))))
        },
        _e = function() {
            return v.createElement(j.U, {
                display: j.H.Flex,
                flexGrow: 1,
                alignItems: j.c.Center,
                fullHeight: !0,
                className: "top-nav__user-card top-nav__user-card--placeholder",
                "data-a-target": "user-card"
            }, v.createElement(j.U, {
                display: j.H.Flex,
                flexWrap: j.K.NoWrap,
                alignItems: j.c.Center,
                flexGrow: 1,
                padding: {
                    right: 1
                },
                fullHeight: !0,
                className: "top-nav__user-card-wrapper"
            }, v.createElement(j.U, {
                margin: {
                    x: 1
                }
            }, v.createElement("div", {
                className: "top-nav__user-card-placeholder-avatar"
            })), v.createElement(j.U, {
                flexGrow: 1,
                display: j.H.Flex,
                flexDirection: j.J.Column,
                justifyContent: j.T.Center
            }, v.createElement(j._17, {
                color: j.F.Base,
                className: "top-nav__username"
            }, v.createElement("div", {
                className: "top-nav__user-card-placeholder-name"
            })), v.createElement(j.U, {
                className: "top-nav__user-status"
            }, v.createElement(j.U, {
                ellipsis: !0,
                display: j.H.Flex,
                alignItems: j.c.Center
            }, v.createElement(j.U, {
                display: j.H.InlineFlex,
                margin: {
                    right: .5
                }
            }, v.createElement("div", {
                className: "top-nav__user-card-placeholder-presence"
            })), v.createElement(j._17, {
                display: j.H.InlineFlex,
                color: j.F.Alt
            }, v.createElement("div", {
                className: "top-nav__user-card-placeholder-status"
            }))))), v.createElement(j.U, {
                display: j.H.Flex,
                flexShrink: 0,
                className: "top-nav__user-card-dropdown-arrow top-nav__user-card-dropdown-arrow--presence",
                "data-a-target": "top-nav-dropdown-arrow"
            }, v.createElement(j._8, {
                asset: j._9.GlyphArrDown
            }))))
        },
        we = n(33),
        Ee = n(70),
        Ce = (n(415), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.onCardClick = function() {
                    n.setState({
                        dropdownOpen: !n.state.dropdownOpen
                    })
                }, n.onClickOut = function() {
                    n.setState({
                        dropdownOpen: !1
                    })
                }, n.onLogoutClick = function(e) {
                    e.preventDefault(), n.props.logout()
                }, n.onShareCheckboxClick = function() {
                    n.props.toggleShareActivity()
                }, n.onDarkModeCheckboxClick = function() {
                    var e = n.props.theme === we.a.Dark ? we.a.Light : we.a.Dark;
                    n.props.changeTheme(e, ye.a.UserMenu)
                }, n.onOnlineClick = function(e) {
                    e && e.stopPropagation(), n.props.toggleVisibility(me.a.Online)
                }, n.onInvisibleClick = function(e) {
                    e && e.stopPropagation(), n.props.toggleVisibility(me.a.Offline)
                }, n.unsubscribeFromHistory = n.props.history.listen(function() {
                    n.setState({
                        dropdownOpen: !1
                    })
                }), n.state = {
                    dropdownOpen: !1
                }, n
            }
            return f.__extends(t, e), t.prototype.componentWillUnmount = function() {
                this.unsubscribeFromHistory()
            }, t.prototype.render = function() {
                var e = this.props.gqlData.currentUser.profileImageURL || b.a.defaultAvatarURL,
                    t = L("top-nav__dropdown-wrapper", {
                        toggled: this.state.dropdownOpen
                    }),
                    n = L("top-nav__user-card", "theme--dark", {
                        "top-nav__dropdown-open": this.state.dropdownOpen
                    }),
                    i = this.state.dropdownOpen ? "dropdown-down" : "dropdown-up",
                    a = this.state.dropdownOpen ? "dropdown-down" : "dropdown-up",
                    r = this.props.gqlData.currentUser.availability === me.a.Offline ? j.F.Base : j.F.Alt2,
                    o = this.props.gqlData.currentUser.availability === me.a.Online ? j.F.Base : j.F.Alt2,
                    s = this.props.gqlData.currentUser.settings.isSharingActivity,
                    l = this.props.gqlData.currentUser.availability || this.props.gqlData.currentUser.settings.visibility,
                    c = v.createElement(j.U, {
                        margin: {
                            x: 2,
                            bottom: 1
                        }
                    }, v.createElement(j.E, {
                        id: "dark-mode-toggle",
                        label: Object(b.d)("Dark Mode", "TopNavUser"),
                        "data-a-target": "dark-mode-toggle",
                        "data-test-selector": "dark-mode-toggle",
                        "data-a-value": this.props.theme,
                        checked: this.props.theme === we.a.Dark,
                        onChange: this.onDarkModeCheckboxClick
                    }));
                return v.createElement(j.U, {
                    position: j._2.Relative,
                    display: j.H.Flex,
                    flexGrow: 1,
                    alignItems: j.c.Stretch,
                    fullHeight: !0
                }, v.createElement(O.a, {
                    onClickOut: this.onClickOut,
                    className: n
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    flexGrow: 1,
                    alignItems: j.c.Stretch,
                    fullHeight: !0
                }, v.createElement(j.S, {
                    onClick: this.onCardClick,
                    "data-a-target": "user-menu-toggle",
                    "data-test-selector": "user-menu-toggle"
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    flexWrap: j.K.NoWrap,
                    alignItems: j.c.Center,
                    flexGrow: 1,
                    padding: {
                        right: 1
                    },
                    fullHeight: !0,
                    className: "top-nav__user-card-wrapper"
                }, v.createElement(j.U, {
                    margin: {
                        x: 1
                    },
                    flexShrink: 0
                }, v.createElement(j.U, {
                    className: "top-nav__user-card-avatar-container"
                }, v.createElement(_.a, {
                    size: 30,
                    imageSrc: e,
                    imageAlt: "User avatar",
                    "data-a-target": "top-nav-avatar"
                }))), v.createElement(j.U, {
                    flexGrow: 1,
                    flexShrink: 1,
                    flexDirection: j.J.Column
                }, v.createElement(j._17, {
                    color: j.F.Base,
                    className: "top-nav__username",
                    "data-a-target": "user-display-name"
                }, this.props.gqlData.currentUser.displayName), v.createElement(j.U, {
                    className: "top-nav__user-status",
                    ellipsis: !0,
                    fullWidth: !0,
                    alignItems: j.c.Center,
                    display: j.H.Flex,
                    flexWrap: j.K.NoWrap
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    flexShrink: 0,
                    margin: {
                        right: .5
                    }
                }, v.createElement(Ee.a, {
                    availability: l
                })), v.createElement(j._17, {
                    ellipsis: !0,
                    color: j.F.Alt
                }, v.createElement(j._21, {
                    type: j._26.Span,
                    noWrap: !0,
                    "data-a-target": "online-status"
                }, this.props.gqlData.currentUser && v.createElement(Ee.b, {
                    activity: this.props.gqlData.currentUser.activity,
                    availability: l === me.a.Offline ? me.a.Invisible : l
                }))))), v.createElement(j._17, {
                    display: j.H.Flex,
                    flexShrink: 0,
                    color: j.F.Base,
                    className: "user-card-wrapper__dropdown-arrow",
                    "data-a-target": "top-nav-dropdown-arrow"
                }, v.createElement(j._8, {
                    asset: j._9.GlyphArrDown
                }))))), v.createElement(j._17, {
                    fullWidth: !0,
                    overflow: j.Y.Hidden,
                    position: j._2.Absolute,
                    className: t,
                    background: j.m.Base,
                    color: j.F.Base,
                    "data-a-target": i,
                    "data-test-selector": a
                }, v.createElement(j._17, {
                    padding: {
                        y: 1
                    },
                    background: j.m.Alt
                }, v.createElement(j.S, {
                    onClick: this.onOnlineClick,
                    "data-a-target": "online-dropdown-button",
                    "data-test-selector": "online-dropdown-button"
                }, v.createElement(j._17, {
                    color: j.F.Alt2,
                    display: j.H.Flex,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    alignItems: j.c.Center,
                    display: j.H.InlineFlex,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._3, {
                    status: j._4.Online
                })), v.createElement(j._21, {
                    bold: this.props.gqlData.currentUser.availability === me.a.Online,
                    color: o
                }, Object(b.d)("Online", "TopNavUser")))), v.createElement(j.S, {
                    onClick: this.onInvisibleClick,
                    "data-a-target": "invisible-dropdown-button",
                    "data-test-selector": "invisible-dropdown-button"
                }, v.createElement(j._17, {
                    color: j.F.Base,
                    display: j.H.Flex,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    alignItems: j.c.Center,
                    display: j.H.InlineFlex,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._3, {
                    status: j._4.Invisible
                })), v.createElement(j._21, {
                    bold: this.props.gqlData.currentUser.availability === me.a.Offline,
                    color: r
                }, Object(b.d)("Invisible", "TopNavUser")))), v.createElement(j.U, {
                    margin: {
                        x: 2,
                        bottom: 1,
                        top: .5
                    }
                }, v.createElement(j.E, {
                    id: "share-activity-toggle",
                    label: Object(b.d)("Share my activity", "TopNavUser"),
                    "data-a-target": "share-activity-toggle",
                    "data-test-selector": "share-activity-toggle",
                    "data-a-value": s,
                    checked: s,
                    onChange: this.onShareCheckboxClick,
                    disabled: this.props.gqlData.currentUser.availability === me.a.Offline
                }), v.createElement(j._21, {
                    type: j._26.Span,
                    color: j.F.Alt
                }, Object(b.d)("Share what you're watching, playing, or streaming with your friends.", "TopNavUser"))), v.createElement(j._17, {
                    borderBottom: !0,
                    margin: {
                        x: 2,
                        y: 1
                    }
                }), c), v.createElement(j.U, {
                    margin: {
                        y: 1
                    }
                }, v.createElement(j.S, {
                    linkTo: {
                        pathname: "/" + this.props.gqlData.currentUser.login,
                        state: {
                            content: "self-channel",
                            medium: "twitch-topnav"
                        }
                    },
                    "data-a-target": "channel-dropdown-link"
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.NavMyChannel,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Channel", "TopNavUser")))), v.createElement(j.S, {
                    linkTo: Object(R.a)("/" + this.props.gqlData.currentUser.login + "/manager/past_broadcasts"),
                    "data-a-target": "video-manager-dropdown-link"
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.NavManager,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Video Manager", "TopNavUser")))), v.createElement(j.S, {
                    linkTo: Object(R.a)("/" + this.props.gqlData.currentUser.login + "/dashboard"),
                    "data-a-target": "dashboard-dropdown-link"
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.NavDashboard,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Dashboard", "TopNavUser")))), v.createElement(j._17, {
                    borderBottom: !0,
                    margin: {
                        x: 2,
                        y: 1
                    }
                }), v.createElement(j.S, {
                    targetBlank: Object(R.b)(),
                    linkTo: Object(R.a)("/friends"),
                    "data-a-target": "friends-dropdown-link"
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.Friends,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Friends", "TopNavUser")))), v.createElement(j.S, {
                    targetBlank: Object(R.b)(),
                    linkTo: Object(R.a)("/messages/inbox"),
                    "data-a-target": "inbox-dropdown-link"
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.NavMessages,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Messages", "TopNavUser")))), v.createElement(j.S, {
                    targetBlank: Object(R.b)(),
                    linkTo: Object(R.a)("/subscriptions"),
                    "data-a-target": "subscriptions-dropdown-link"
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.NavBackpack,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Subscriptions", "TopNavUser")))), v.createElement(j.S, {
                    targetBlank: Object(R.b)(),
                    linkTo: Object(R.a)("/inventory"),
                    "data-a-target": "inventory-dropdown-link"
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.Crate,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Inventory", "TopNavUser")))), v.createElement(j._17, {
                    borderBottom: !0,
                    margin: {
                        x: 2,
                        y: 1
                    }
                }), v.createElement(j.S, {
                    targetBlank: Object(R.b)(),
                    linkTo: Object(R.a)("/settings/profile"),
                    "data-a-target": "settings-dropdown-link"
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.NavSettings,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Settings", "TopNavUser")))), v.createElement(j.S, {
                    "data-a-target": "dropdown-logout",
                    onClick: this.onLogoutClick
                }, v.createElement(j._17, {
                    color: j.F.Alt,
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, v.createElement(j.U, {
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    margin: {
                        right: 1
                    }
                }, v.createElement(j._8, {
                    asset: j._9.NavLogout,
                    height: 18,
                    width: 18
                })), v.createElement(j._21, null, Object(b.d)("Log Out", "TopNavUser"))))))))
            }, t
        }(v.Component)),
        Ne = Object(C.e)(Ce),
        Te = n(416),
        De = n(417),
        Ie = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.isSettingNewSession = !1, t.dataIsReady = function(e) {
                    return e.data && !e.data.loading && !e.data.error
                }, t.setUserToOffline = function() {
                    Object(ve.c)(me.a.Offline), Object(ve.a)()
                }, t.toggleShareActivity = function() {
                    var e = !t.props.data.currentUser.settings.isSharingActivity,
                        n = f.__assign({}, Object(ge.a)({
                            isSharingActivity: e
                        }), {
                            optimisticResponse: {
                                updateIsSharingActivity: {
                                    __typename: "UpdateIsSharingActivityPayload",
                                    user: {
                                        __typename: "User",
                                        id: t.props.data.currentUser.id,
                                        settings: {
                                            isSharingActivity: e,
                                            __typename: "UserSettings"
                                        }
                                    }
                                }
                            }
                        });
                    t.props.updateIsSharingActivity(n)
                }, t.toggleVisibility = function(e) {
                    t.dataIsReady(t.props) && Object(ve.e)(e)
                }, t.setNewSession = function() {
                    return f.__awaiter(t, void 0, void 0, function() {
                        var e;
                        return f.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    if (this.isSettingNewSession) return [2];
                                    this.isSettingNewSession = !0, t.label = 1;
                                case 1:
                                    return t.trys.push([1, 3, 4, 5]), [4, Object(ve.g)()];
                                case 2:
                                    return t.sent(), this.props.initialUserAvailabilitySet(), [3, 5];
                                case 3:
                                    return e = t.sent(), b.i.warn("Failed to set new user availability session.", e), [3, 5];
                                case 4:
                                    return this.isSettingNewSession = !1, [7];
                                case 5:
                                    return [2]
                            }
                        })
                    })
                }, t.maybeRefetchData = function(e) {
                    var n = e.pubsub.messages.presence;
                    n && e.data.currentUser.id && n.data.user_id === +e.data.currentUser.id && t.props.pubsub.messages.presence !== n && e.data.refetch()
                }, t
            }
            return f.__extends(t, e), t.prototype.componentDidMount = function() {
                this.maybeRefetchData(this.props), this.props.firstPageLoaded && this.dataIsReady(this.props) && !this.props.initialUserAvailabilityIsSet && this.setNewSession(), this.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.maybeRefetchData(e), e.firstPageLoaded && this.dataIsReady(e) && !e.initialUserAvailabilityIsSet && this.setNewSession()
            }, t.prototype.componentDidUpdate = function() {
                this.reportInteractive()
            }, t.prototype.componentWillUnmount = function() {
                this.setUserToOffline()
            }, t.prototype.render = function() {
                return this.props.data && !this.props.data.loading && this.props.data.currentUser ? this.props.data.error ? v.createElement(Se, null) : v.createElement(Ne, {
                    gqlData: this.props.data,
                    toggleShareActivity: this.toggleShareActivity,
                    toggleVisibility: this.toggleVisibility,
                    changeTheme: this.props.changeTheme,
                    firstPageLoaded: this.props.firstPageLoaded,
                    logout: this.props.logout,
                    theme: this.props.theme
                }) : v.createElement(_e, null)
            }, t.prototype.reportInteractive = function() {
                !this.props.data || this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
            }, t = f.__decorate([Object(M.a)(Te), Object(M.a)(De, {
                name: "updateIsSharingActivity"
            }), Object(pe.a)(function(e) {
                return {
                    query: Te,
                    topic: e.data.currentUser ? Object(fe.f)(e.data.currentUser.id) : "",
                    skip: !(e.data && !e.data.loading && !e.data.error && e.data.currentUser),
                    type: he.c.PresenceSettings,
                    mutator: function(e, t) {
                        return t.currentUser.settings.visibility = e.data.availability_override.toUpperCase(), t.currentUser.settings.isSharingActivity = e.data.share_activity, t
                    }
                }
            }), Object(de.a)([{
                topic: function(e) {
                    return Object(fe.f)(e.data.currentUser.id)
                },
                mapMessageTypesToProps: (c = {}, c[he.c.Presence] = "presence", c),
                skip: function(e) {
                    return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                }
            }]), Object(_.c)("User")], t)
        }(v.Component),
        Oe = Object(u.a)(r, o)(Object(d.f)(Ie)),
        Le = n(384),
        xe = (n(435), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderOnsiteNotifications = function() {
                    return t.props.isLoggedIn ? v.createElement(j.U, {
                        flexGrow: 0,
                        alignSelf: j.d.Center,
                        flexWrap: j.K.NoWrap,
                        padding: {
                            left: .5,
                            right: 1
                        },
                        flexShrink: 0
                    }, v.createElement(E, null)) : null
                }, t.renderTwitchPrimeCrown = function(e) {
                    return v.createElement(j.U, {
                        className: "top-nav__prime",
                        flexGrow: 0,
                        flexShrink: 0,
                        padding: {
                            x: .5
                        },
                        alignSelf: j.d.Center,
                        flexWrap: j.K.NoWrap
                    }, !e && v.createElement(Le.b, null))
                }, t.saveEllipsisRef = function(e) {
                    return t.ellipsisMenu = e
                }, t.onNavigationClicked = function() {
                    t.ellipsisMenu.toggleBalloon(!1)
                }, t.renderBrowseLink = function(e) {
                    var t = e.match,
                        n = t && "following" !== t.params.subpage,
                        i = Object(b.d)("Browse", "TopNav");
                    return v.createElement(d.a, {
                        className: "top-nav__nav-link" + (n ? " active" : ""),
                        "data-a-target": "browse-link",
                        title: i,
                        to: {
                            pathname: "/directory",
                            state: {
                                medium: S.PageviewMedium.TopNav,
                                content: S.PageviewContent.Games
                            }
                        }
                    }, i)
                }, t
            }
            return f.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = null;
                if (this.props.isLoggedIn) {
                    var t = Object(b.d)("Following", "TopNav");
                    e = v.createElement(d.b, {
                        activeClassName: "active",
                        to: {
                            pathname: "/directory/following",
                            state: {
                                medium: S.PageviewMedium.TopNav,
                                content: S.PageviewContent.Following
                            }
                        },
                        className: "top-nav__nav-link",
                        "data-a-target": "following-link",
                        title: t
                    }, t)
                }
                return v.createElement(j.P, {
                    position: j._2.Fixed,
                    attachTop: !0,
                    fullWidth: !0
                }, v.createElement("nav", {
                    className: "top-nav",
                    "data-a-target": "top-nav-container",
                    style: {
                        height: "5rem"
                    }
                }, v.createElement(j.U, {
                    className: "top-nav__menu",
                    display: j.H.Flex,
                    alignItems: j.c.Stretch,
                    flexWrap: j.K.NoWrap
                }, v.createElement(j.P, {
                    display: j.H.InlineFlex,
                    alignItems: j.c.Center,
                    flexShrink: 0
                }, v.createElement(d.a, {
                    to: {
                        pathname: "/",
                        state: {
                            medium: S.PageviewMedium.TopNav,
                            content: S.PageviewContent.Logo
                        }
                    },
                    className: "top-nav__home-link",
                    "data-a-target": "home-link"
                }, v.createElement(j._8, {
                    asset: j._9.LogoTwitch,
                    width: 94,
                    height: 32
                }))), v.createElement(j.U, {
                    className: "top-nav__nav-items-container",
                    display: j.H.Flex,
                    flexGrow: 1,
                    flexWrap: j.K.NoWrap,
                    flexShrink: 0
                }, e, v.createElement(d.d, {
                    path: "/directory/:subpage?",
                    children: this.renderBrowseLink
                }), v.createElement("a", {
                    href: "https://app.twitch.tv/download",
                    "data-a-target": "get-desktop-link",
                    className: "top-nav__nav-link"
                }, Object(b.d)("Get Desktop", "TopNav")), v.createElement(ue, null), v.createElement(ae, null), v.createElement(j.U, {
                    className: "top-nav__ellipsis-button",
                    display: j.H.Flex,
                    alignItems: j.c.Center
                }, v.createElement(k.a, {
                    ref: this.saveEllipsisRef
                }, v.createElement(j.v, {
                    icon: j._9.NavMore,
                    overlay: !0,
                    ariaLabel: Object(b.d)("More nav items", "TopNav"),
                    "data-a-target": "ellipsis-button"
                }), v.createElement(j.p, {
                    direction: j.q.Bottom,
                    tailOffset: 7,
                    size: j.r.Small,
                    "data-a-target": "overflow-menu"
                }, v.createElement(j.U, {
                    padding: 1
                }, v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://www.twitch.tv/p/about",
                    "data-a-target": "about-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("About", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "http://twitchadvertising.tv/",
                    "data-a-target": "advertisers-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Advertisers", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://blog.twitch.tv/",
                    "data-a-target": "blog-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Blog", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://www.twitch.tv/p/legal/community-guidelines",
                    "data-a-target": "community-guidelines-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Community Guidelines", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://www.twitch.tv/p/cookie-policy",
                    "data-a-target": "cookie-policy-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Cookie Policy", "TopNav"))), v.createElement(j.S, {
                    onClick: this.onNavigationClicked,
                    linkTo: "/directory/game/Creative",
                    "data-a-target": "creative-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Creative", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://dev.twitch.tv/",
                    "data-a-target": "developers-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Developers", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://help.twitch.tv/",
                    "data-a-target": "help-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Help", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://www.twitch.tv/jobs",
                    "data-a-target": "jobs-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Jobs", "TopNav"))), v.createElement(k.a, {
                    display: j.H.Block
                }, v.createElement(j.S, {
                    "data-target": "language-selector-click",
                    "data-a-target": "language-selector"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Language", "TopNav"))), v.createElement(j.p, {
                    size: j.r.Small,
                    direction: j.q.Right,
                    offsetY: "4px",
                    offsetX: "20px",
                    "data-target": "language-selector",
                    "data-a-target": "language-selector-menu"
                }, v.createElement(y.a, null))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://music.twitch.tv/",
                    "data-a-target": "music-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Music", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://www.twitch.tv/p/partners",
                    "data-a-target": "partners-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Partners", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://www.twitch.tv/p/press",
                    "data-a-target": "press-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Press", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://twitch.tv/p/security",
                    "data-a-target": "security-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Security", "TopNav"))), v.createElement(j.S, {
                    targetBlank: !0,
                    linkTo: "https://www.twitch.tv/p/terms-of-service",
                    "data-a-target": "terms-link"
                }, v.createElement(j.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(b.d)("Terms", "TopNav"))))))), v.createElement(j.U, {
                    className: "top-nav__search",
                    flexGrow: 1,
                    alignSelf: j.d.Center
                }, v.createElement(X, null))), this.renderTwitchPrimeCrown(), this.renderOnsiteNotifications(), v.createElement(j.U, {
                    className: "top-nav__nav-items-container",
                    display: j.H.Flex,
                    alignItems: j.c.Center,
                    flexWrap: j.K.NoWrap,
                    flexGrow: 0,
                    flexShrink: 0
                }, this.props.isLoggedIn ? v.createElement(Oe, {
                    logout: this.props.logout
                }) : v.createElement(ee, {
                    login: this.props.login,
                    signup: this.props.signup
                })))))
            }, t = f.__decorate([Object(_.c)("TopNav")], t)
        }(v.Component)),
        Re = xe,
        Fe = Object(d.f)(Object(u.a)(l, s)(Re));
    n.d(t, "a", function() {
        return "5rem"
    }), n.d(t, "b", function() {
        return Fe
    })
}, function(e, t) {}, function(e, t, n) {
    e.exports = n.p + "assets/friend_requests-aec9595d7e19764bc23d982c8c0f43d9.png"
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "FriendRequestsNotification_Clear"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "clearUnreadFriendRequests"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 106
        }
    };
    n.loc.source = {
        body: "mutation FriendRequestsNotification_Clear {\n  clearUnreadFriendRequests {\n    user {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "FriendRequestsNotification_Query"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "incomingFriendRequests"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "1"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "totalUnreadCount"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 138
        }
    };
    n.loc.source = {
        body: "query FriendRequestsNotification_Query {\n  currentUser {\n    id\n    incomingFriendRequests(first: 1) {\n      totalUnreadCount\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Search_SearchGameResultCard_Game"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "name"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "game"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "name"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "name"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "boxArtURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "40"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "height"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "55"
                                }
                            }],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 128
        }
    };
    n.loc.source = {
        body: "query Search_SearchGameResultCard_Game($name: String!) {\n  game(name: $name) {\n    id\n    boxArtURL(width: 40 height: 55)\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Search_SearchLiveResultCard_UserStream"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "login"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "stream"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "previewImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "156"
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "88"
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 174
        }
    };
    n.loc.source = {
        body: "query Search_SearchLiveResultCard_UserStream($login: String!) {\n  user(login: $login) {\n    id\n    stream {\n      id\n      previewImageURL(width: 156 height: 88)\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "TopNav_Store_CurrentUser"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 75
        }
    };
    n.loc.source = {
        body: "query TopNav_Store_CurrentUser {\n  currentUser {\n    id\n    hasPrime\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "TopNav_PrimeUpsell_CurrentUser"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasTurbo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "requestInfo"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "countryCode"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 130
        }
    };
    n.loc.source = {
        body: "query TopNav_PrimeUpsell_CurrentUser {\n  currentUser {\n    id\n    hasPrime\n    hasTurbo\n  }\n  requestInfo {\n    countryCode\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "ChannelPage_SetSessionStatus"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "SetSessionStatusInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "setSessionStatus"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "setAgainInSeconds"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 136
        }
    };
    n.loc.source = {
        body: "mutation ChannelPage_SetSessionStatus($input: SetSessionStatusInput!) {\n  setSessionStatus(input: $input) {\n    setAgainInSeconds\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "TopNav_User_UpdateVisibility"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UpdateVisibilityInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "updateVisibility"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "availability"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 159
        }
    };
    n.loc.source = {
        body: "mutation TopNav_User_UpdateVisibility($input: UpdateVisibilityInput!) {\n  updateVisibility(input: $input) {\n    user {\n      id\n      availability\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "TopNav_User_User"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "profileImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "70"
                                }
                            }],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "availability"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "settings"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "isSharingActivity"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "visibility"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "activity"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Watching"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "user"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "stream"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "game"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "name"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "hosting"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "displayName"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "stream"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "game"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "name"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Streaming"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "stream"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "game"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Playing"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 710
        }
    };
    n.loc.source = {
        body: "query TopNav_User_User {\n  currentUser {\n    id\n    displayName\n    profileImageURL(width: 70)\n    login\n    availability\n    settings {\n      isSharingActivity\n      visibility\n    }\n    activity {\n      type\n      ... on Watching {\n        user {\n          displayName\n          stream {\n            game {\n              name\n            }\n          }\n          hosting {\n            displayName\n            stream {\n              game {\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on Streaming {\n        stream {\n          game {\n            name\n          }\n        }\n      }\n      ... on Playing {\n        game {\n          name\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "TopNav_User_UpdateIsSharingActivity"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UpdateIsSharingActivityInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "updateIsSharingActivity"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "settings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "isSharingActivity"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 212
        }
    };
    n.loc.source = {
        body: "mutation TopNav_User_UpdateIsSharingActivity($input: UpdateIsSharingActivityInput!) {\n  updateIsSharingActivity(input: $input) {\n    user {\n      id\n      settings {\n        isSharingActivity\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Current_User"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 50
        }
    };
    n.loc.source = {
        body: "query Current_User {\n  currentUser {\n    id\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Current_User"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 63
        }
    };
    n.loc.source = {
        body: "query Current_User {\n  currentUser {\n    id\n    hasPrime\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "claimPrimeOffer"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ClaimPrimeOfferInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "claimPrimeOffer"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "claimData"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "hasEntitlement"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 153
        }
    };
    n.loc.source = {
        body: "mutation claimPrimeOffer($input: ClaimPrimeOfferInput!) {\n  claimPrimeOffer(input: $input) {\n    self {\n      claimData\n      hasEntitlement\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Current_User"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 63
        }
    };
    n.loc.source = {
        body: "query Current_User {\n  currentUser {\n    id\n    hasPrime\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Prime_PrimeOfferList_PrimeOffers"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "primeOffers"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "claimInstructions"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "description"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "deliveryMethod"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "priority"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "externalURL"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "publisher"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "categories"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "hasEntitlement"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "claimData"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 333
        }
    };
    n.loc.source = {
        body: "query Prime_PrimeOfferList_PrimeOffers {\n  primeOffers {\n    id\n    title\n    imageURL\n    claimInstructions\n    description\n    deliveryMethod\n    priority\n    content {\n      game {\n        id\n        name\n      }\n      externalURL\n      publisher\n      categories\n    }\n    self {\n      hasEntitlement\n      claimData\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Current_User"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 63
        }
    };
    n.loc.source = {
        body: "query Current_User {\n  currentUser {\n    id\n    hasPrime\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Prime_PrimeOffers_PrimeOfferIds"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "primeOffers"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "hasEntitlement"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "claimData"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 123
        }
    };
    n.loc.source = {
        body: "query Prime_PrimeOffers_PrimeOfferIds {\n  primeOffers {\n    id\n    self {\n      hasEntitlement\n      claimData\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Prime_PrimeOffers_CurrentUser"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "requestInfo"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "countryCode"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 116
        }
    };
    n.loc.source = {
        body: "query Prime_PrimeOffers_CurrentUser {\n  currentUser {\n    id\n    hasPrime\n  }\n  requestInfo {\n    countryCode\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Prime_BlueBar_CurrentUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "stringIds"
                    }
                },
                type: {
                    kind: "ListType",
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "dateOverride"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Time"
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "primePromotions"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "ids"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "stringIds"
                            }
                        }
                    }, {
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "dateOverride"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "dateOverride"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "text"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "externalURL"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "isExternalLink"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "requestInfo"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "countryCode"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 274
        }
    };
    n.loc.source = {
        body: "query Prime_BlueBar_CurrentUser($stringIds: [ID!], $dateOverride: Time) {\n  currentUser {\n    id\n    hasPrime\n  }\n  primePromotions (ids: $stringIds, dateOverride: $dateOverride) {\n    id\n    text\n    externalURL\n    isExternalLink\n  }\n  requestInfo {\n    countryCode\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t, n) {
    "use strict";
    var i, a = (n(452), n(0)),
        r = n(1),
        o = n(40),
        s = n(4),
        l = n(2),
        c = n(64),
        u = n(3),
        d = (n(453), "autocomplete-balloon-matches"),
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                    noMatches: Object(l.d)("No matches.", "AutocompleteBalloon")
                }, t.logger = l.i.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                    return t.props.matches.map(function(e, n) {
                        var i = t.state.selectedMatch,
                            a = i && i.replacement === e.replacement,
                            o = s("autocomplete-balloon__item", {
                                "autocomplete-balloon__item--selected": a
                            });
                        return r.createElement(u.U, {
                            key: "autocomplete-match-" + n,
                            refDelegate: a ? t.focusOnOption : void 0,
                            "data-test-selector": d
                        }, r.createElement(u.P, {
                            display: u.H.Block,
                            fullWidth: !0
                        }, r.createElement("button", {
                            onMouseEnter: t.handleMatchMouseEnter,
                            className: o,
                            "data-a-target": e.replacement,
                            "data-click-index": n,
                            onClick: t.onMatchClick
                        }, r.createElement(u.U, {
                            padding: {
                                x: .5
                            },
                            display: u.H.Flex,
                            alignItems: u.c.Center
                        }, e.element))))
                    })
                }, t.handleMatchMouseEnter = function(e) {
                    var n = t.getMatchFromEvent(e);
                    n && t.setState({
                        selectedMatch: n
                    })
                }, t.onMatchClick = function(e) {
                    var n = t.getMatchFromEvent(e);
                    n && t.props.onMatchSelect(n)
                }, t.getMatchFromEvent = function(e) {
                    var n = t.props.matches,
                        i = e.currentTarget.getAttribute("data-click-index");
                    return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                }, t.handleKeydown = function(e) {
                    var n = e.charCode || e.keyCode,
                        i = function() {
                            e.preventDefault(), e.stopPropagation()
                        };
                    switch (n) {
                        case o.a.Tab:
                        case o.a.Enter:
                            i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                            break;
                        case o.a.Up:
                        case o.a.Down:
                            if (!t.state.selectedMatch || !t.props.matches.length) return;
                            var a = t.props.matches.indexOf(t.state.selectedMatch);
                            if (-1 === a) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                            i();
                            var r = n === o.a.Up ? -1 : 1,
                                s = t.getIndexWithinLength(a + r, t.props.matches.length),
                                l = t.props.matches[s];
                            t.setState({
                                selectedMatch: l
                            })
                    }
                }, t.getIndexWithinLength = function(e, t) {
                    var n = e % t;
                    return n < 0 ? n + t : n
                }, t.onResize = function() {
                    t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                }, t.setContainerHeight = function() {
                    var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                    t.setState({
                        containerHeight: e
                    }), t.resizeAnimationFrame = 0
                }, t.focusOnOption = function(e) {
                    if (e && t.autocompleteBalloonElement) {
                        var n = e.getBoundingClientRect(),
                            i = t.autocompleteBalloonElement.getBoundingClientRect();
                        (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                    }
                }, t.setAutocompleteBalloonElement = function(e) {
                    t.autocompleteBalloonElement = e
                }, t
            }
            return a.__extends(t, e), t.prototype.componentDidMount = function() {
                window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                    selectedMatch: this.props.matches[0]
                })
            }, t.prototype.componentWillUnmount = function() {
                window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
            }, t.prototype.componentWillReceiveProps = function(e) {
                var t = this,
                    n = e.matches.reduce(function(e, n, i) {
                        return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                    }, 0);
                this.setState({
                    selectedMatch: e.matches[n]
                })
            }, t.prototype.render = function() {
                var e;
                return e = 0 === this.props.matches.length ? r.createElement(u.U, {
                    padding: {
                        x: .5
                    },
                    "data-test-selector": "autocomplete-balloon-no-matches"
                }, r.createElement(u._21, {
                    type: u._26.Span,
                    color: u.F.Alt2
                }, this.messages.noMatches)) : this.renderMatches(), r.createElement(u.U, {
                    position: u._2.Relative
                }, r.createElement(c.a, {
                    onClickOut: this.props.onDismiss
                }, r.createElement(u.p, {
                    direction: u.q.TopLeft,
                    "data-a-target": "autocomplete-balloon",
                    "data-test-selector": "autocomplete-balloon",
                    show: !0
                }, r.createElement(u.U, {
                    refDelegate: this.setAutocompleteBalloonElement,
                    "data-test-selector": "autocomplete-matches-container",
                    className: "autocomplete-balloon",
                    overflow: u.Y.Auto,
                    padding: {
                        y: 1
                    }
                }, r.createElement("div", {
                    style: {
                        maxHeight: this.state.containerHeight
                    }
                }, e)))))
            }, t
        }(r.Component),
        m = n(133),
        h = n(12),
        g = {
            Chat: "chat",
            Feed: "feed",
            Whisper: "whisper"
        },
        f = {
            Emote: ":",
            Hashtag: "#",
            Mention: "@",
            Tab: "Tab",
            Whisper: "/w"
        },
        v = function(e) {
            switch (e) {
                case m.a.Emote:
                    return f.Emote;
                case m.a.Mention:
                    return f.Mention;
                default:
                    return void l.i.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
            }
        },
        b = function(e) {
            var t = v(e.autocompleteType);
            if (t) {
                var n = {
                    source: e.source,
                    start_character: t
                };
                l.m.track(h.SpadeEventType.ChatSuggestion, n)
            }
        },
        y = function(e) {
            var t = v(e.autocompleteType);
            if (t) {
                var n = {
                    channel: e.channelLogin,
                    completed_text: e.completedText,
                    source: e.source,
                    start_character: t
                };
                l.m.track(h.SpadeEventType.ChatSuggestionComplete, n)
            }
        };
    ! function(e) {
        e.Input = "input", e.TextArea = "textarea"
    }(i || (i = {}));
    var k = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.state = {
                    autocompleteType: m.a.None,
                    matchedCursorPosition: 0,
                    matches: null,
                    value: ""
                }, n.providers = [], n.onChange = function(e) {
                    n.setState({
                        value: e.target.value
                    }, function() {
                        n.getMatches()
                    }), n.props.onChange && n.props.onChange(e)
                }, n.onKeyDown = function(e) {
                    var t = function() {
                            n.props.onKeyDown && n.props.onKeyDown(e)
                        },
                        i = function() {
                            e.preventDefault(), e.stopPropagation()
                        },
                        a = e.charCode || e.keyCode;
                    if (a === o.a.Enter) return void t();
                    switch (a) {
                        case o.a.Tab:
                            n.state.matches || (i(), n.getMatches(!0));
                            break;
                        case o.a.Esc:
                            n.state.matches && (i(), n.resetDisplayState())
                    }
                    t()
                }, n.setComponentRefDelegate = function(e) {
                    n.componentRef = e, n.props.componentRefDelegate && n.props.componentRefDelegate(e)
                }, n.getMatches = function(e) {
                    var t = n.state.value;
                    if (0 === n.providers.length || 0 === t.length) return void n.resetDisplayState();
                    var i = n.getCurrentCursorPosition();
                    if (i > t.length);
                    else
                        for (; i < t.length && !/\s/.test(t.charAt(i));) i++;
                    var a = t.substring(0, i);
                    if (0 === a.length || /\s/.test(a.substring(a.length - 1))) return void n.resetDisplayState();
                    for (var r = a.split(/\s/), o = r[r.length - 1], s = 0, l = n.providers; s < l.length; s++) {
                        var c = l[s];
                        if (!e || c.canBeTriggeredByTab) {
                            var u = c.getMatches(o, e);
                            if (u) return void n.setState({
                                autocompleteType: c.autocompleteType,
                                matchedCursorPosition: i,
                                matches: u
                            })
                        }
                    }
                    n.resetDisplayState()
                }, n.resetDisplayState = function(e, t) {
                    var i = a.__assign({}, n.state, {
                        autocompleteType: m.a.None,
                        matches: null
                    }, e || {});
                    n.setState(i, t)
                }, n.insertReplacement = function(e) {
                    var t = n.state.value,
                        i = n.state.matchedCursorPosition,
                        r = t.substring(0, i),
                        o = r.lastIndexOf(e.current);
                    if (-1 === o) r = r.concat(e.replacement + " "), i = r.length;
                    else {
                        var s = r.substring(0, o),
                            l = t.length > o + e.current.length ? t.substring(o + e.current.length) : "",
                            c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                        r = "" + s + c + l, i = s.length + c.length
                    }
                    y(a.__assign({}, n.props.trackingParams || {}, {
                        autocompleteType: n.state.autocompleteType,
                        completedText: e.replacement,
                        source: n.props.suggestionSource
                    })), n.resetDisplayState({
                        value: r
                    }, function() {
                        n.setCursorPosition(i)
                    })
                }, n.getCurrentCursorPosition = function() {
                    return n.componentRef.selectionStart
                }, n.setCursorPosition = function(e) {
                    n.componentRef && (n.componentRef.setSelectionRange(e, e), n.componentRef.focus())
                }, n.registerAutocompleteProvider = function(e) {
                    return n.providers.push(e),
                        function() {
                            var t = n.providers.indexOf(e);
                            n.providers.splice(t, 1)
                        }
                }, t.refDelegate && t.refDelegate(n), n
            }
            return a.__extends(t, e), t.prototype.getChildContext = function() {
                return {
                    registerAutocompleteProvider: this.registerAutocompleteProvider
                }
            }, t.prototype.componentWillUpdate = function(e, t) {
                !this.state.matches && t.matches && b({
                    autocompleteType: t.autocompleteType,
                    source: e.suggestionSource
                })
            }, t.prototype.componentDidUpdate = function(e, t) {
                t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
            }, t.prototype.render = function() {
                var e = a.__assign({}, this.props, {
                    onChange: this.onChange,
                    onKeyDown: this.onKeyDown,
                    refDelegate: this.setComponentRefDelegate,
                    value: this.state.value
                });
                return r.createElement(u.U, null, this.state.matches && r.createElement(p, {
                    matches: this.state.matches,
                    onMatchSelect: this.insertReplacement,
                    onDismiss: this.resetDisplayState,
                    containerElement: this.props.containerElement
                }), this.props.componentType === i.Input ? r.createElement(u.Q, a.__assign({}, e, {
                    type: e.type || u.R.Text
                })) : r.createElement(u._23, a.__assign({}, e)), this.props.children)
            }, t.prototype.getValue = function() {
                return this.state.value
            }, t.prototype.setValue = function(e) {
                this.resetDisplayState({
                    value: e
                })
            }, t.childContextTypes = {
                registerAutocompleteProvider: r.PropTypes.func
            }, t
        }(r.Component),
        S = n(87),
        _ = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.autocompleteType = m.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                    return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                }, t.getMatchedEmotes = function(e) {
                    var n = t.props.emotes;
                    if (!n || 0 === n.length) return null;
                    var i = e.substring(1),
                        a = n.reduce(function(e, n) {
                            var a = n.emotes.filter(function(e) {
                                if (e.token) return t.doesEmoteMatchTerm(e, i)
                            });
                            return e.concat([a])
                        }, []).filter(function(e) {
                            return e.length > 0
                        }).reduce(function(e, t) {
                            return e.concat(t)
                        }, []);
                    return a = Object(S.d)(a), a = Object(S.e)(a, i), a.map(function(e) {
                        return {
                            current: ":" + i,
                            replacement: e.token,
                            element: t.renderEmoteSuggestion(e)
                        }
                    })
                }, t.doesEmoteMatchTerm = function(e, t) {
                    var n = new RegExp("^" + t, "i");
                    if (e.token.match(n)) return !0;
                    var i = new RegExp("" + t.charAt(0).toUpperCase()),
                        a = new RegExp("^" + t.slice(1), "i"),
                        r = e.token.match(i);
                    return !!(r && r.index && e.token.slice(r.index + 1).match(a))
                }, t.renderEmoteSuggestion = function(e) {
                    return [r.createElement(u.U, {
                        padding: {
                            right: .5
                        },
                        key: "emote-img-" + e.id
                    }, r.createElement("img", {
                        srcSet: e.srcSet
                    })), r.createElement(u._21, {
                        type: u._26.Span,
                        key: "emote-text-" + e.id
                    }, e.token)]
                }, t
            }
            return a.__extends(t, e), t.prototype.componentDidMount = function() {
                this.unregister = this.context.registerAutocompleteProvider(this)
            }, t.prototype.componentWillUnmount = function() {
                this.unregister()
            }, t.prototype.render = function() {
                return null
            }, t.contextTypes = {
                registerAutocompleteProvider: r.PropTypes.func
            }, t
        }(r.Component);
    n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
        return k
    }), n.d(t, "a", function() {
        return i
    }), n.d(t, !1, function() {}), n.d(t, "d", function() {
        return _
    }), n.d(t, "c", function() {
        return g
    })
}, function(e, t, n) {
    "use strict";

    function i() {
        var e = this;
        return Object(s.a)(c, {
            props: function(t) {
                return {
                    blockUserMutation: function(n, i, s, c) {
                        return r.__awaiter(e, void 0, void 0, function() {
                            var e;
                            return r.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        if (!t.mutate) return [3, 4];
                                        r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, t.mutate({
                                            variables: {
                                                input: {
                                                    targetUserID: n,
                                                    sourceContext: s,
                                                    reason: i
                                                }
                                            },
                                            optimisticResponse: {
                                                blockUser: {
                                                    __typename: "BlockUserPayload",
                                                    targetUser: {
                                                        __typename: "User",
                                                        id: n
                                                    }
                                                }
                                            },
                                            update: function(e) {
                                                var t = e.readFragment({
                                                    id: a(c),
                                                    fragment: l
                                                });
                                                t && (t.blockedUsers.push({
                                                    id: n,
                                                    __typename: "User"
                                                }), e.writeFragment({
                                                    id: a(c),
                                                    fragment: l,
                                                    data: t
                                                }))
                                            }
                                        })];
                                    case 2:
                                        return r.sent(), [3, 4];
                                    case 3:
                                        return e = r.sent(), o.i.error(e, "Unable to block user"), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }
                }
            }
        })
    }

    function a(e) {
        return e && o.n.apollo.client.dataIdFromObject ? o.n.apollo.client.dataIdFromObject(e) || "" : ""
    }
    t.a = i;
    var r = n(0),
        o = n(2),
        s = n(7),
        l = n(276),
        c = (n.n(l), n(460));
    n.n(c)
}, function(e, t, n) {
    "use strict";

    function i(e, t) {
        for (var n = [], i = /\S+/g, a = i.exec(e); a;) {
            var r = a[0],
                o = t[r];
            if (o) {
                var s = Object(d.d)(e.slice(0, a.index)),
                    l = s ? s.length : a.index;
                n.push({
                    id: o.id,
                    start: l,
                    end: l + r.length - 1
                })
            }
            a = i.exec(e)
        }
        return n
    }

    function a(e) {
        var t = e.currentUserID,
            n = e.emotes,
            a = e.message,
            d = e.recipientUserID;
        if ("" === t || "" === a || "" === d) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
        var g = Object(c.b)(),
            f = o.__assign({
                mutation: p
            }, Object(l.a)({
                message: a,
                nonce: g,
                recipientUserID: d
            })),
            v = Object(m.a)(t, d),
            b = r(v);
        if (b) {
            var y = i(a, n).map(u.a);
            f.optimisticResponse = {
                sendWhisper: {
                    __typename: "SendWhisperPayload",
                    message: {
                        content: {
                            content: a,
                            emotes: y,
                            __typename: "MessageBody"
                        },
                        from: {
                            id: t,
                            __typename: "User"
                        },
                        id: g,
                        sentAt: (new Date).toISOString(),
                        deletedAt: null,
                        editedAt: null,
                        __typename: "WhisperMessage"
                    }
                }
            };
            var k = "" + (parseInt(b.messages.edges[0].cursor, 10) + 1) || "";
            f.update = function(e, t) {
                if (t.data) {
                    var n = r(v);
                    if (n) {
                        if (n.messages.edges.findIndex(function(e) {
                                return e.cursor === k
                            }) < 0) {
                            var i = {
                                cursor: k,
                                node: t.data.sendWhisper.message,
                                __typename: "WhisperMessageEdge"
                            };
                            n.messages.edges.unshift(i)
                        }
                        n.userLastMessageRead.sentAt = t.data.sendWhisper.message.sentAt, e.writeQuery({
                            query: h,
                            data: {
                                whisperThread: n
                            }
                        })
                    }
                }
            }
        }
        return s.n.apollo.client.mutate(f)
    }

    function r(e) {
        try {
            return s.n.apollo.client.readQuery({
                query: h,
                variables: {
                    id: e
                }
            }).whisperThread
        } catch (e) {
            return null
        }
    }
    var o = n(0),
        s = n(2),
        l = n(21),
        c = n(18),
        u = n(285),
        d = n(129),
        p = n(472),
        m = n(55),
        h = n(473);
    t.a = a
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(2),
        o = n(7),
        s = n(5),
        l = n(3),
        c = n(485),
        u = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    canGift: !1
                }, t
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.componentWillReceiveProps = function(e) {
                e.data && e.data.user && e.data.user.self ? this.setState({
                    canGift: e.data.user.self.canGift
                }) : this.setState({
                    canGift: !1
                })
            }, t.prototype.render = function() {
                return a.createElement(l.u, {
                    targetBlank: !0,
                    disabled: !this.state.canGift,
                    onClick: this.props.onClick,
                    linkTo: this.props.checkoutURL,
                    "data-test-selector": "gift-subscribe-button"
                }, Object(r.d)("Gift Subscription", "GiftSubscribeButton"))
            }, t = i.__decorate([Object(s.c)("GiftSubscribeButton"), Object(o.a)(c, {
                options: function(e) {
                    return {
                        variables: {
                            recipientLogin: e.giftRecipient,
                            subProductId: e.subProductId
                        }
                    }
                },
                skip: function(e) {
                    return !e.giftRecipient || !e.subProductId
                }
            })], t)
        }(a.Component),
        d = u;
    n.d(t, !1, function() {
        return "gift-subscribe-button"
    }), n.d(t, "a", function() {
        return d
    })
}, function(e, t, n) {
    "use strict";
    var i = n(0),
        a = n(1),
        r = n(69),
        o = (n(530), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    scrollableProps: {}
                }, t.getChildContext = function() {
                    return {
                        setRootScrollableProps: t.setRootScrollableProps,
                        resetRootScrollableProps: t.resetRootScrollableProps,
                        getRootScrollableOffsetHeight: t.getOffsetHeight,
                        setRootScrollableOffsetHeight: t.setOffsetHeight,
                        resetRootScrollableOffsetHeight: t.resetOffsetHeight
                    }
                }, t.setRootScrollableProps = function(e) {
                    t.setState({
                        scrollableProps: e
                    })
                }, t.resetRootScrollableProps = function() {
                    t.setState({
                        scrollableProps: {}
                    })
                }, t.getOffsetHeight = function() {
                    return t.state.offsetHeight
                }, t.setOffsetHeight = function(e) {
                    t.setState({
                        offsetHeight: e
                    })
                }, t.resetOffsetHeight = function() {
                    t.setState({
                        offsetHeight: void 0
                    })
                }, t.setScrollableAreaRef = function(e) {
                    return t.scrollableAreaRef = e
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = void 0,
                    t = this.state.offsetHeight;
                t && (e = {
                    paddingTop: t
                });
                var n = i.__assign({
                    className: "root-scrollable",
                    contentClassName: "root-scrollable__content"
                }, this.state.scrollableProps);
                return a.createElement(r.b, i.__assign({}, n, {
                    "data-a-target": "root-scroller",
                    style: e,
                    scrollRef: this.setScrollableAreaRef,
                    scrollbarVerticalOffset: t
                }), this.props.children)
            }, t.childContextTypes = {
                setRootScrollableProps: a.PropTypes.func,
                resetRootScrollableProps: a.PropTypes.func,
                getRootScrollableOffsetHeight: a.PropTypes.func,
                setRootScrollableOffsetHeight: a.PropTypes.func,
                resetRootScrollableOffsetHeight: a.PropTypes.func
            }, t
        }(a.Component)),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.shouldSetRootScrollableProps = function(e, t) {
                    return !(!e || !t) && (e.disableDebounce !== t.disableDebounce || (e.scrollRef !== t.scrollRef || (e.contentClassName !== t.contentClassName || (e.scrollContentClassName !== t.scrollContentClassName || (e.suppressScrollX !== t.suppressScrollX || (e.suppressScrollY !== t.suppressScrollY || e.className !== t.className))))))
                }, t
            }
            return i.__extends(t, e), t.prototype.componentDidMount = function() {
                this.context.setRootScrollableProps(this.props)
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.shouldSetRootScrollableProps(this.props, e) && this.context.setRootScrollableProps(e)
            }, t.prototype.componentWillUnmount = function() {
                this.context.resetRootScrollableProps()
            }, t.prototype.render = function() {
                return null
            }, t.contextTypes = {
                setRootScrollableProps: a.PropTypes.func,
                resetRootScrollableProps: a.PropTypes.func
            }, t
        }(a.Component);
    n.d(t, "a", function() {
        return o
    }), n.d(t, "b", function() {
        return s
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            isLoggedIn: Object(T.d)(e)
        }
    }

    function a(e) {
        return Object(w.bindActionCreators)({
            login: function() {
                return Object(N.f)(E.a.ReportHoster)
            },
            showReportUserModal: function(e) {
                var t = u.__rest(e, []);
                return Object(C.d)(D.a, t)
            }
        }, e)
    }

    function r() {
        return !!window.Twitch && !!window.Twitch.Player
    }

    function o(e) {
        return {
            theatreModeEnabled: e.ui.theatreModeEnabled,
            isLoggedIn: Object(T.d)(e),
            authToken: Object(T.a)(e)
        }
    }

    function s(e) {
        return Object(w.bindActionCreators)({
            enableTheatreMode: O.l,
            disableTheatreMode: O.k,
            togglePersistentPlayer: O.p
        }, e)
    }

    function l(e, t, n) {
        if (!e.collectionID && e.videoID) return void t.push("/videos/" + e.videoID);
        if (e.collectionID && e.videoID) {
            if (n && n.currentVideoID && n.currentCollectionID && n.currentVideoID === e.videoID && n.currentCollectionID === e.collectionID) return;
            return void t.push("/videos/" + e.videoID + "?collection=" + e.collectionID)
        }
        if (e.collectionID && !e.videoID) return void t.push("/collections/" + e.collectionID);
        m.i.withCategory("video-player").error(new Error("No collection or video specified from the emitted player transition event."), "No collection or video specified from the emitted player transition event.")
    }
    var c, u = n(0),
        d = n(1),
        p = n(10),
        m = n(2),
        h = n(138),
        g = n(47),
        f = n(12),
        v = n(134),
        b = n(261),
        y = n(135),
        k = n(3),
        S = (n(527), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleReportHosterClick = function() {
                    t.props.isLoggedIn ? t.props.showReportUserModal({
                        onClose: t.handleReportModalClose,
                        reportContext: {
                            contentType: b.a.User,
                            targetUserID: t.props.hostChannelID
                        },
                        title: Object(m.d)("Report {channelDisplayName}", {
                            channelDisplayName: t.props.hostChannelDisplayName
                        }, "VideoPlayerHostingUI")
                    }) : t.props.login()
                }, t.handleReportModalClose = function(e) {
                    (e === v.b.MutationError || e === v.b.Success) && t.props.history.push("/")
                }, t
            }
            return u.__extends(t, e), t.prototype.render = function() {
                var e = !!this.props.hostedChannelDisplayName;
                return d.createElement(k._17, {
                    className: "video-player-hosting-ui__container"
                }, e && this.renderHeader(), d.createElement("span", {
                    key: "video-player"
                }, this.props.children), d.createElement(k.U, {
                    display: e ? k.H.Block : k.H.Hide,
                    position: k._2.Relative,
                    zIndex: k._38.Above
                }, e && this.renderFooter()))
            }, t.prototype.renderHeader = function() {
                return d.createElement(k.e, {
                    type: k.i.SlideInBottom,
                    delay: k.f.Medium,
                    duration: k.g.Medium,
                    enabled: !0
                }, d.createElement(p.a, {
                    key: "hosting-ui-header",
                    className: "video-player-hosting-ui__link",
                    to: {
                        pathname: "/" + this.props.hostedChannelLogin,
                        state: {
                            medium: f.PageviewMedium.Channel,
                            content: f.PageviewContent.Host
                        }
                    },
                    "data-a-target": "hosting-ui-link",
                    "data-test-selector": "video-player-hosting-ui__header"
                }, d.createElement(k._17, {
                    className: "video-player-hosting-ui__header",
                    display: k.H.Flex,
                    background: k.m.AccentAlt2,
                    color: k.F.Overlay,
                    alignItems: k.c.Center,
                    padding: {
                        x: 1,
                        y: .5
                    },
                    "data-a-target": "hosting-ui-header"
                }, d.createElement(k.U, {
                    className: "video-player-hosting-ui__avatar-container"
                }, d.createElement(k.l, {
                    imageSrc: this.props.hostedChannelProfileImageURL || "",
                    size: 30,
                    imageAlt: Object(m.d)("Hosted Channel {hostedChannelDisplayName}'s Avatar", {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || ""
                    }, "VideoPlayerHostingUI")
                })), d.createElement(k._17, {
                    margin: {
                        left: 1
                    },
                    fontSize: k.L.Size5
                }, Object(m.d)("Hosting", "VideoPlayerHostingUI"), " ", d.createElement(k._21, {
                    type: k._26.Span,
                    className: "video-player-hosting-ui__channel-name",
                    color: k.F.OverlayAlt,
                    "data-a-target": "hosting-ui-channel-name"
                }, this.props.hostedChannelDisplayName)))))
            }, t.prototype.renderFooter = function() {
                return d.createElement(k.e, {
                    type: k.i.SlideInTop,
                    enabled: !0,
                    delay: k.f.Medium,
                    duration: k.g.Medium
                }, d.createElement(k._17, {
                    key: "hosting-ui-footer",
                    background: k.m.AccentAlt2,
                    className: "video-player-hosting-ui__footer",
                    display: k.H.Block,
                    padding: 1,
                    "data-test-selector": "video-player-hosting-ui__footer",
                    "data-a-target": "hosting-ui-footer"
                }, d.createElement(k.U, {
                    padding: {
                        y: .5
                    },
                    display: k.H.Flex,
                    justifyContent: k.T.Between
                }, d.createElement(k.U, {
                    display: k.H.Flex
                }, d.createElement(k.U, {
                    margin: {
                        right: 1
                    }
                }, d.createElement(h.a, {
                    "data-a-target": "hosting-ui-follow-button",
                    channelName: this.props.hostedChannelLogin || "",
                    channelLogin: this.props.hostedChannelLogin,
                    hostChannelLogin: this.props.hostChannelLogin,
                    hostChannelID: this.props.hostChannelID,
                    isHostedFollow: !0,
                    balloonDirection: k.q.BottomLeft
                })), d.createElement(k.U, null, d.createElement(y.b, {
                    channelLogin: this.props.hostedChannelLogin,
                    hostChannelID: this.props.hostChannelID,
                    hostChannelLogin: this.props.hostChannelLogin,
                    "data-a-target": "hosting-ui-subscribe-button"
                }))), d.createElement(g.a, null, d.createElement(k.v, {
                    ariaLabel: Object(m.d)("More options", "HostingUI"),
                    overlay: !0,
                    icon: k._9.More,
                    onClick: this.handleReportHosterClick,
                    "data-a-target": "hosting-ui-more-button"
                }), d.createElement(k.p, {
                    direction: k.q.TopRight,
                    "data-a-target": "hosting-ui-more-balloon"
                }, d.createElement(k.U, {
                    padding: {
                        y: 1
                    }
                }, d.createElement(k.S, {
                    onClick: this.handleReportHosterClick,
                    "data-a-target": "hosting-ui-report-button"
                }, d.createElement(k.U, {
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, Object(m.d)("Report {hostChannelDisplayName}", {
                    hostChannelDisplayName: this.props.hostChannelDisplayName
                }, "VideoPlayerHostingUI")))))))))
            }, t
        }(d.Component)),
        _ = n(6),
        w = n(9),
        E = n(48),
        C = n(38),
        N = n(32),
        T = n(17),
        D = n(374),
        I = Object(_.a)(i, a)(Object(p.f)(S)),
        O = n(58),
        L = n(4),
        x = n(292),
        R = n(287),
        F = n(20),
        U = n(497),
        P = n(5);
    ! function(e) {
        e.LoadStart = "loadstart", e.Error = "error", e.LoadedMetadata = "loadedmetadata", e.CanPlay = "canplay", e.Playing = "playing", e.Waiting = "waiting", e.Seeking = "seeking", e.Seeked = "seeked", e.Ended = "ended", e.DurationChange = "durationchange", e.TimeUpdate = "timeupdate", e.Play = "play", e.Pause = "pause", e.VolumeChange = "volumechange", e.RateChange = "ratechange"
    }(c || (c = {}));
    var M;
    ! function(e) {
        e.PlayerInit = "init", e.ContentShowing = "contentShowing", e.PlaybackStatistics = "playbackStatistics", e.ChansubRequired = "chansubRequired", e.VideoFailure = "videoFailure", e.Formats = "videoFormats", e.ABSStreamFormatChange = "abs_stream_format_change", e.FormatChanged = "videoFormatChanged", e.TimeChange = "timeChange", e.BufferChange = "bufferChange", e.SegmentChange = "segmentchange", e.UsherFailError = "usherFail", e.CaptionUpdate = "captions", e.SeekFailed = "seekfailed", e.VariantSwitchRequest = "variantSwitchRequested", e.ViewersChange = "viewerschange", e.StreamLoaded = "streamLoaded", e.VideoLoaded = "videoLoaded", e.VideoPaused = "videoPaused", e.QualityChange = "qualitychange", e.Online = "online", e.Offline = "offline", e.Restricted = "restricted", e.CastingChange = "castingchange", e.TheatreChange = "theatrechange", e.MidrollRequested = "midrollrequested", e.ManifestExtraInfo = "manifestExtraInfo", e.TransitionToCollectionVOD = "transitionToCollectionVod", e.TransitionToRecommendedVOD = "transitionToRecommendedVod", e.StitchedAdStart = "stitchedadstart", e.StichedAdEnd = "stitchedadend", e.PersistenPlayerToggle = "persistentPlayerEnableToggle", e.StatsUpdate = "statsupdate", e.PromptLoginModal = "prompt login modal", e.OpenStream = "openStream", e.PlayerReady = "ready", e.FullscreenChange = "fullscreenchange"
    }(M || (M = {}));
    var A, j = (n(528), n(447));
    ! function(e) {
        e.Embed = "embed", e.Frontpage = "frontpage", e.Site = "site"
    }(A || (A = {}));
    var B = {
            allowfullscreen: !0,
            autoplay: !0,
            branding: !1,
            channelInfo: !1,
            controls: !0,
            height: "100%",
            playsinline: !0,
            player: A.Site,
            showInfo: !1,
            showtheatre: !1,
            trackingProperties: {
                client_app: "twilight"
            },
            width: "100%",
            oauth_token: ""
        },
        H = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.logger = m.i.withCategory("video-player"), n.checkPlayerDependencyStatus = function() {
                    r() ? (n.setState({
                        canInitializePlayer: !0
                    }), n.checkPlayerDependencyAnimationFrame = null) : n.checkPlayerDependencyAnimationFrame = requestAnimationFrame(n.checkPlayerDependencyStatus)
                }, n.attachRef = function(e) {
                    return n.playerRef = e
                }, n.onOpenStream = function() {
                    if (n.props.playerTypeOverride === A.Frontpage && n.player)
                        if (n.props.channelLogin) m.n.history.push("/" + n.props.channelLogin);
                        else if (n.props.vodID) {
                        var e = Math.floor(n.player.getCurrentTime());
                        m.n.history.push("/videos/" + n.props.vodID + "?t=" + Object(j.b)(e))
                    } else n.props.collectionID && m.n.history.push("/collections/" + n.props.collectionID)
                }, n.onPlayerReady = function() {
                    n.player && (n.logger.debug("Ready"), n.props.latencyTracking.reportInteractive(), n.hasPlayed = !1, n.props.latencyTracking.reportCustomEvent(n.playerLoaded), n.setState({
                        playerInitialized: !0
                    }, function() {
                        return n.updatePlayerTrackingData(n.props.hostChannel)
                    }))
                }, n.onPlayerPlay = function() {
                    n.logger.debug("Play"), n.reportPlayerPlayed(), n.props.onPauseToggled && n.props.onPauseToggled(!1)
                }, n.onStreamStatusOnline = function() {
                    n.props.onStreamStatusChange && n.props.onStreamStatusChange(M.Online)
                }, n.onStreamStatusOffline = function() {
                    n.props.onStreamStatusChange && n.props.onStreamStatusChange(M.Offline)
                }, n.onTheatreChange = function(e) {
                    e ? (n.logger.debug("Theatre Entered"), n.props.enableTheatreMode && !n.props.theatreModeEnabled && n.props.enableTheatreMode()) : (n.logger.debug("Theatre Exited"), n.props.disableTheatreMode && n.props.theatreModeEnabled && n.props.disableTheatreMode())
                }, n.onFullScreenChange = function() {
                    n.player && (n.logger.debug("Fullscreen change", n.player.fullscreen), n.player.fullscreen !== n.state.isFullScreen && n.setState({
                        isFullScreen: n.player.fullscreen
                    }))
                }, n.onSeek = function() {
                    n.props.onSeek && n.player && n.props.onSeek(n.player.getCurrentTime())
                }, n.onTimeUpdate = function() {
                    n.props.onVideoTimeChange && n.player && n.props.onVideoTimeChange(n.player.getCurrentTime())
                }, n.onTransitionToCollectionVod = function(e) {
                    if (n.props.onNavigationRequest) {
                        var t = {};
                        e.vodId && (t.videoID = Object(U.a)(e.vodId)), e.collectionId && (t.collectionID = e.collectionId), n.props.onNavigationRequest(t)
                    }
                }, n.onTransitionToRecommendedVod = function(e) {
                    if (n.props.onNavigationRequest) {
                        var t = {};
                        e.vodId && (t.videoID = Object(U.a)(e.vodId)), n.props.onNavigationRequest(t)
                    }
                }, n.onPause = function() {
                    n.props.onPauseToggled && n.props.onPauseToggled(!0)
                }, n.onPersistentPlayerToggled = function() {
                    n.props.togglePersistentPlayer && n.props.togglePersistentPlayer()
                }, n.updatePlayerTrackingData = function(e) {
                    if (n.state.playerInitialized && n.player) {
                        var t = m.m.getLastPageview();
                        t ? n.logger.debug("Tracking data updated.", {
                            pageviewProperties: t,
                            hostChannel: e
                        }) : n.logger.debug("pageviewProperties not found; only hosting status updated", {
                            pageviewProperties: t,
                            hostChannel: e
                        }), n.player.setTrackingProperties(u.__assign({}, t, {
                            host_channel: e
                        }))
                    }
                }, n.updatePlayerType = function() {
                    var e = n.props.playerTypeOverride || B.player;
                    n.player && n.playerType !== e && (n.player.setPlayerType(e), n.playerType = e)
                }, n.maybeRecordClip = function() {
                    n.player && n.state.playerInitialized && n.player.recordClip()
                }, n.playerCreated = n.registerCreatedEvent(), n.playerLoaded = n.registerLoadedEvent(), n.playerPlayed = n.registerPlayedEvent(), n.state = {
                    canInitializePlayer: r(),
                    playerInitialized: !1,
                    isFullScreen: !1
                }, n.playerType = t.playerTypeOverride || B.player, n.lastSetChannel = t.channelLogin, t.instanceRef && t.instanceRef(n), n
            }
            return u.__extends(t, e), t.prototype.componentDidMount = function() {
                var e = this;
                if (this.props.latencyTracking.reportCustomEvent(this.playerCreated), this.bindHotKeys(), this.state.canInitializePlayer ? this.initializePlayer() : this.checkPlayerDependencyAnimationFrame = window.requestAnimationFrame(this.checkPlayerDependencyStatus), m.m.eventEmitter.addListener(f.SpadeEventType.Pageview, function() {
                        return e.updatePlayerTrackingData(e.props.hostChannel)
                    }), window.__playerScriptChunk && !t.tagInjected) {
                    this.logger.debug("Loading player chunk after page loaded");
                    var n = document.createElement("script");
                    n.crossOrigin = "anonymous", n.src = window.__jqueryChunk, n.onload = function() {
                        var e = document.createElement("script");
                        e.async = !0, e.crossOrigin = "anonymous", e.src = window.__playerScriptChunk, document.body.appendChild(e)
                    }, document.body.appendChild(n);
                    var i = document.createElement("link");
                    i.href = window.__playerStyleChunk, i.media = "screen", i.rel = "stylesheet", i.type = "text/css", document.body.appendChild(i), t.tagInjected = !0
                }
            }, t.prototype.componentWillUpdate = function(e, t) {
                if (!this.state.canInitializePlayer && t.canInitializePlayer) return void this.initializePlayer();
                if (t.canInitializePlayer && t.playerInitialized) {
                    if (this.updatePlayerTrackingData(e.hostChannel), this.updatePlayerType(), this.player && e.theatreModeEnabled !== this.player.getTheatre() && this.player.setTheatre(e.theatreModeEnabled), this.player && e.miniModeEnabled !== this.props.miniModeEnabled && this.player.setMiniPlayerMode(!!e.miniModeEnabled), this.player && e.paused !== this.lastPausedProp && (e.paused ? this.player.pause() : this.player.play(), this.lastPausedProp = e.paused), this.player && e.channelLogin && e.channelLogin !== this.lastSetChannel) return this.logger.debug("Setting Channel: ", e.channelLogin), this.player.setChannel(e.channelLogin), this.lastSetChannel = e.channelLogin, void m.m.setVideoPlayerTrackingData({
                        vodID: void 0
                    });
                    var n = e.collectionID && this.props.collectionID !== e.collectionID,
                        i = e.vodID && this.props.vodID !== e.vodID;
                    if (n || i) {
                        var a = e.vodID ? Object(j.a)(e.vodID) : "";
                        if ("" !== a && m.m.setVideoPlayerTrackingData({
                                vodID: e.vodID
                            }), !this.player) return;
                        return void(n || e.collectionID && i ? this.player.setCollection(e.collectionID, a, e.nextVideoOffset) : this.player.setVideo(a, e.nextVideoOffset))
                    }
                    void 0 !== e.nextVideoOffset && e.nextVideoOffset >= 0 && this.props.nextVideoOffset !== e.nextVideoOffset && this.player && this.player.setCurrentTime(e.nextVideoOffset)
                }
            }, t.prototype.render = function() {
                var e = L("video-player", {
                    "video-player--theatre": this.props.theatreModeEnabled,
                    "video-player--logged-in": this.props.isLoggedIn,
                    "video-player--fullscreen": this.state.isFullScreen
                });
                return d.createElement("div", {
                    className: L(e),
                    "data-test-selector": "video-player"
                }, d.createElement("div", {
                    className: "video-player__container",
                    ref: this.attachRef
                }))
            }, t.prototype.componentWillUnmount = function() {
                this.unbindHotKeys(), this.checkPlayerDependencyAnimationFrame && cancelAnimationFrame(this.checkPlayerDependencyAnimationFrame), this.maybeDetachFromWindow(), this.props.onDestroy && this.props.onDestroy(), this.player && (m.m.eventEmitter.removeListener(f.SpadeEventType.Pageview, this.updatePlayerTrackingData), this.player.removeEventListener(M.PlayerReady, this.onPlayerReady), this.player.removeEventListener(M.Online, this.onStreamStatusOnline), this.player.removeEventListener(M.Offline, this.onStreamStatusOffline), this.player.removeEventListener(c.Ended, this.onStreamStatusOffline), this.player.removeEventListener(c.Play, this.onPlayerPlay), this.player.removeEventListener(M.TheatreChange, this.onTheatreChange), this.player.removeEventListener(M.TransitionToCollectionVOD, this.onTransitionToCollectionVod), this.player.removeEventListener(M.FullscreenChange, this.onFullScreenChange), this.player.removeEventListener(c.Seeked, this.onSeek), this.player.removeEventListener(c.TimeUpdate, this.onTimeUpdate), this.player.removeEventListener(M.OpenStream, this.onOpenStream), this.player.removeEventListener(c.Pause, this.onPause), this.player.removeEventListener(M.PersistenPlayerToggle, this.onPersistentPlayerToggled), x.extensionService.unregisterPlayer(), this.player.destroy()), m.m.setVideoPlayerTrackingData({
                    vodID: void 0
                })
            }, t.prototype.trackMiniPlayerAction = function(e, t) {
                this.player && this.state.playerInitialized && this.player.trackMiniPlayerAction(e, t)
            }, t.prototype.initializePlayer = function() {
                var e = u.__assign({}, B, {
                    showtheatre: !this.props.disableTheatreButton,
                    autoplay: !this.props.paused
                });
                this.props.playerTypeOverride && (e.player = this.props.playerTypeOverride, this.playerType = this.props.playerTypeOverride), this.props.channelLogin && (e.channel = this.props.channelLogin, this.lastSetChannel = this.props.channelLogin), this.props.collectionID && (e.collection = this.props.collectionID), this.props.vodID && (e.video = Object(j.a)(this.props.vodID), m.m.setVideoPlayerTrackingData({
                    vodID: this.props.vodID
                })), this.props.nextVideoOffset && (e.time = Object(j.b)(this.props.nextVideoOffset)), this.lastPausedProp = this.props.paused, e.oauth_token = this.props.authToken || "", this.logger.debug("Initializing", e);
                var t = new window.Twitch.Player(this.playerRef, e);
                this.player = t, t.addEventListener(M.PlayerReady, this.onPlayerReady), t.addEventListener(M.Online, this.onStreamStatusOnline), t.addEventListener(M.Offline, this.onStreamStatusOffline), t.addEventListener(c.Ended, this.onStreamStatusOffline), t.addEventListener(c.Play, this.onPlayerPlay), t.addEventListener(c.Seeked, this.onSeek), t.addEventListener(c.TimeUpdate, this.onTimeUpdate), t.addEventListener(M.TheatreChange, this.onTheatreChange), t.addEventListener(M.FullscreenChange, this.onFullScreenChange), t.addEventListener(M.TransitionToCollectionVOD, this.onTransitionToCollectionVod), t.addEventListener(M.TransitionToRecommendedVOD, this.onTransitionToRecommendedVod), t.addEventListener(M.OpenStream, this.onOpenStream), t.addEventListener(c.Pause, this.onPause), t.addEventListener(M.PersistenPlayerToggle, this.onPersistentPlayerToggled), x.extensionService.registerPlayer(this.player), this.props.onInit && this.props.onInit(t), this.maybeAttachToWindow(this.props)
            }, t.prototype.registerCreatedEvent = function() {
                return this.props.latencyTracking.registerCustomEvent("Player", "player-created", "Created", 1e3)
            }, t.prototype.registerLoadedEvent = function() {
                return this.props.latencyTracking.registerCustomEvent("Player", "player-loaded", "Init", 2500)
            }, t.prototype.registerPlayedEvent = function() {
                return this.props.latencyTracking.registerCustomEvent("Player", "player-played", "First Frame", 4e3)
            }, t.prototype.reportPlayerPlayed = function() {
                this.hasPlayed || (this.hasPlayed = !0, this.playerPlayed && this.props.latencyTracking.reportCustomEvent(this.playerPlayed))
            }, t.prototype.maybeAttachToWindow = function(e) {
                F.parse(window.location.search).attachPlayer && e.attachToWindow && this.player && (window.player = this.player)
            }, t.prototype.maybeDetachFromWindow = function() {
                window.player = void 0
            }, t.prototype.bindHotKeys = function() {
                R.bind("alt+x", this.maybeRecordClip)
            }, t.prototype.unbindHotKeys = function() {
                R.unbind("alt+x")
            }, t.tagInjected = !1, t
        }(d.Component),
        V = Object(P.c)("VideoPlayer")(H),
        z = Object(_.a)(o, s)(V);
    n.d(t, !1, function() {
        return "hosting-ui-report-button"
    }), n.d(t, !1, function() {
        return "hosting-ui-more-balloon"
    }), n.d(t, !1, function() {
        return "hosting-ui-more-button"
    }), n.d(t, !1, function() {
        return "hosting-ui-channel-name"
    }), n.d(t, !1, function() {
        return "video-player-hosting-ui__header"
    }), n.d(t, !1, function() {
        return "video-player-hosting-ui__footer"
    }), n.d(t, !1, function() {
        return S
    }), n.d(t, "a", function() {
        return I
    }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
        return A
    }), n.d(t, !1, function() {}), n.d(t, "c", function() {
        return z
    }), n.d(t, "d", function() {
        return l
    })
}, , function(e, t, n) {
    e.exports = n.p + "assets/bg_glitch_pattern-34ca2e369aad1ed33b57f3d2d59c70eb.png"
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return Object(r.bindActionCreators)({
            openThread: function(e) {
                return Object(o.l)({
                    collapsed: !1,
                    threadID: e,
                    ignoreCollapseIfOpen: !0
                }, Object(s.a)())
            }
        }, e)
    }
    var a = n(6),
        r = n(9),
        o = n(57),
        s = n(71),
        l = n(0),
        c = n(1),
        u = n(2),
        d = n(3),
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleClick = function() {
                    t.props.onClick && t.props.onClick(), t.props.openThread(t.props.threadID)
                }, t
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = Object(u.d)("Whisper", "WhisperButton");
                return c.createElement(d.u, {
                    onClick: this.handleClick
                }, e)
            }, t
        }(c.Component),
        m = p,
        h = Object(a.a)(null, i)(m);
    n.d(t, "a", function() {
        return h
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            isLoggedIn: Object(c.d)(e)
        }
    }

    function a(e) {
        return Object(o.bindActionCreators)({
            onLoginClick: function() {
                return l.f(s.a.FriendAdd)
            }
        }, e)
    }
    var r = n(6),
        o = n(9),
        s = n(48),
        l = n(32),
        c = n(17),
        u = n(0),
        d = n(1),
        p = n(2),
        m = n(7),
        h = n(21),
        g = n(5),
        f = n(3),
        v = n(479),
        b = n(480),
        y = n(481),
        k = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    hovered: !1
                }, t.onClickAddFriend = function() {
                    t.props.onCreateFriendRequest(Object(h.a)({
                        targetID: t.props.channelID
                    }))
                }, t.onClickUnfriend = function() {
                    t.props.onUnfriendUser(Object(h.a)({
                        targetID: t.props.channelID
                    }))
                }, t.onToggleHover = function() {
                    t.setState(function(e) {
                        return {
                            hovered: !e.hovered
                        }
                    })
                }, t
            }
            return u.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = Object(p.d)("Add Friend", "UserCard");
                if (!this.props.isLoggedIn) return d.createElement(f.u, {
                    ariaLabel: e,
                    onClick: this.props.onLoginClick
                }, e);
                if (this.props.data.loading || this.props.data.error) return d.createElement(f._1, {
                    height: 30,
                    width: 60
                });
                if (!this.isFriend()) return d.createElement(f.u, {
                    onClick: this.onClickAddFriend
                }, e);
                var t = Object(p.d)("Unfriend", "UserCard"),
                    n = Object(p.d)("Friends", "UserCard"),
                    i = this.state.hovered ? t : n;
                return d.createElement("div", {
                    onMouseEnter: this.onToggleHover,
                    onMouseLeave: this.onToggleHover
                }, d.createElement(f.P, {
                    flexDirection: f.J.Row,
                    display: f.H.Flex,
                    alignItems: f.c.Center
                }, d.createElement("button", {
                    "aria-label": t,
                    className: "user-card__status-btn",
                    onClick: this.onClickUnfriend,
                    "data-a-target": "unfriend-button"
                }, d.createElement(f.U, {
                    display: f.H.Flex,
                    className: "user-card__status-btn--text",
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, d.createElement(f._21, null, i)))))
            }, t.prototype.isFriend = function() {
                var e = this;
                return !this.props.data.loading && !this.props.data.error && !!this.props.data.currentUser.friends.edges.find(function(t) {
                    return t.node.id === e.props.channelID
                })
            }, t = u.__decorate([Object(g.c)("FriendButton"), Object(m.a)(b), Object(m.a)(y, {
                name: "onUnfriendUser"
            }), Object(m.a)(v, {
                name: "onCreateFriendRequest"
            })], t)
        }(d.Component),
        S = k,
        _ = Object(r.a)(i, a)(S);
    n.d(t, "a", function() {
        return _
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return {
            collapsed: !e.ui.sideNavExpanded,
            isLoggedIn: Object(O.d)(e),
            firstPageLoaded: e.session.firstPageLoaded
        }
    }

    function a(e) {
        return Object(D.bindActionCreators)({
            collapseSideNav: I.j,
            expandSideNav: I.n
        }, e)
    }

    function r(e) {
        return {
            onBlockThread: function(t) {
                return e(R.h(t, Object(F.a)()))
            },
            onCloseThread: function(t) {
                return e(R.h(t, Object(F.a)()))
            },
            onCollapseThread: function(t) {
                return e(R.i(t, Object(F.a)()))
            },
            onExpandThread: function(t) {
                return e(R.j(t, Object(F.a)()))
            },
            onFocusThread: function(t) {
                return e(R.k(t, Object(F.a)()))
            },
            onUnfocusThread: function(t) {
                return e(R.n(t, Object(F.a)()))
            },
            onResizeContent: function() {
                return e(R.m(Object(F.a)()))
            }
        }
    }

    function o(e) {
        return {
            openedThreads: e.whispers.display.openedIDs.map(function(t) {
                return Object(x.b)(e, t)
            }),
            focusedThreadID: e.whispers.display.focusedID
        }
    }

    function s(e) {
        return Object.keys(e).reduce(function(t, n) {
            var i = e[n];
            return i.muted || i.archived ? t : t + i.unreadMessagesCount
        }, 0)
    }

    function l(e) {
        return e.type === A.c.WhisperSent
    }

    function c(e) {
        return e.type === A.c.WhisperReceived
    }

    function u(e) {
        return e.type === A.c.WhisperDeleted
    }

    function d(e) {
        return e.type === A.c.WhisperEdited
    }

    function p(e) {
        return e.type === A.c.WhisperThreadUpdate
    }

    function m(e) {
        return e.type === A.c.WhisperAllThreadsUpdate
    }

    function h(e, t, n) {
        if (!t.currentUser) return t;
        var i = V.l.get("whisperDoNotDisturb", !1),
            a = t.currentUser.whisperThreads.edges.find(function(t) {
                return t.node.id === e.data_object.thread_id
            });
        if (a) {
            var r = Object(ce.c)(e);
            a.node.messages.edges.unshift(r), c(e) && (a.node.unreadMessagesCount += 1, n({
                threadID: e.data_object.thread_id,
                collapsed: !0,
                hidden: i
            })), a.node.isArchived = !1;
            var o = t.currentUser.whisperThreads.edges.filter(function(t) {
                return t.node.id !== e.data_object.thread_id
            });
            o.unshift(a), t.currentUser.whisperThreads.edges = o
        } else n({
            threadID: e.data_object.thread_id,
            collapsed: !0,
            hidden: i
        });
        return t
    }

    function g(e, t) {
        if (!t.currentUser) return t;
        var n = t.currentUser.whisperThreads.edges.find(function(t) {
            return t.node.id === e.data_object.thread_id
        });
        if (n) {
            var i = n.node.messages.edges.find(function(t) {
                return t.node.id === e.data_object.message_id
            });
            i && (i.node.deletedAt = new Date(1e3 * e.data_object.deleted_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(ce.b)(e.data_object.tags.emotes))
        }
        return t
    }

    function f(e, t) {
        if (!t.currentUser) return t;
        var n = t.currentUser.whisperThreads.edges.find(function(t) {
            return t.node.id === e.data_object.thread_id
        });
        if (n) {
            var i = n.node.messages.edges.find(function(t) {
                return t.node.id === e.data_object.message_id
            });
            i && (i.node.editedAt = new Date(1e3 * e.data_object.edited_at).toISOString(), i.node.content.content = e.data_object.body, i.node.content.emotes = Object(ce.b)(e.data_object.tags.emotes))
        }
        return t
    }

    function v(e, t, n) {
        if (!t.currentUser) return t;
        var i = t.currentUser.whisperThreads.edges.findIndex(function(t) {
            return t.node.id === e.data_object.id
        });
        if (i >= 0) {
            var a = t.currentUser.whisperThreads.edges[i],
                r = a.node.messages.edges[0].cursor,
                o = parseInt(r, 10) - e.data_object.last_read;
            a.node.unreadMessagesCount = o >= 0 ? o : 0, a.node.isMuted = e.data_object.muted, !a.node.isArchived && e.data_object.archived && n(e.data_object.id), a.node.isArchived = e.data_object.archived
        }
        return t
    }

    function b(e, t) {
        return t.currentUser ? (e.data_object.mark_all_read && t.currentUser.whisperThreads.edges.forEach(function(e) {
            e.node.unreadMessagesCount = 0
        }), t) : t
    }

    function y(e) {
        return {
            rightColumnExpanded: e.ui.rightColumnExpanded,
            theatreModeEnabled: e.ui.theatreModeEnabled
        }
    }

    function k(e) {
        return {
            openThread: function(t) {
                return e(R.l(t, Object(F.a)()))
            },
            closeThread: function(t) {
                return e(R.h(t, Object(F.a)()))
            }
        }
    }
    var S = n(0),
        _ = n(1),
        w = n(496),
        E = n(449),
        C = n(440),
        N = n(143),
        T = n(6),
        D = n(9),
        I = n(58),
        O = n(17),
        L = Object(T.a)(i, a)(N.c),
        x = n(145),
        R = n(57),
        F = n(71),
        U = n(4),
        P = n(7),
        M = n(106),
        A = n(39),
        j = n(21),
        B = n(30),
        H = n(266),
        V = n(2),
        z = n(64),
        W = n(28),
        q = n(47),
        G = n(18),
        Q = n(66),
        K = n(107),
        $ = n(284),
        Y = n(3),
        J = (n(531), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleThreadClick = function() {
                    t.props.selectThread(t.props.threadID)
                }, t.handleArchiveClick = function(e) {
                    e.stopPropagation(), t.props.archiveThread(t.props.threadID)
                }, t
            }
            return S.__extends(t, e), t.prototype.render = function() {
                var e = this.props.user;
                if (!e) return this.renderError();
                var t = this.props.lastMessage ? Object($.a)(this.props.lastMessage.content.content, this.props.lastMessage.content.emotes, this.props.lastMessage.editedAt) : null,
                    n = this.props.unreadMessageCount,
                    i = e.displayName || e.login;
                return _.createElement("div", {
                    onClick: this.handleThreadClick
                }, _.createElement(Y._17, {
                    className: "whispers-list-item",
                    borderBottom: !0,
                    padding: 1,
                    display: Y.H.Flex,
                    flexDirection: Y.J.Row,
                    flexWrap: Y.K.NoWrap,
                    fullWidth: !0,
                    alignItems: Y.c.Center
                }, _.createElement(Y.U, {
                    className: "whispers-list-item__avatar",
                    margin: {
                        right: .5
                    },
                    flexShrink: 0
                }, _.createElement(Y.l, {
                    size: 30,
                    imageAlt: Object(V.d)("{interlocutorName}'s Avatar", {
                        interlocutorName: i
                    }, "WhisperThreadListItem"),
                    imageSrc: e.profileImageURL
                })), _.createElement(Y.U, {
                    fullWidth: !0,
                    display: Y.H.Inline
                }, _.createElement(Y._21, {
                    fontSize: Y.L.Size5,
                    bold: !0
                }, i), _.createElement(Y.U, {
                    className: "whispers-list-item__last-message",
                    ellipsis: !0
                }, t)), _.createElement(Y.U, {
                    className: "whispers-list-item__unread-count",
                    margin: {
                        right: 1
                    },
                    textAlign: Y._22.Right
                }, _.createElement(Y._21, {
                    bold: !0
                }, n > 0 && !this.props.muted ? n : null), this.props.muted && _.createElement(Y.U, {
                    display: Y.H.Flex,
                    alignItems: Y.c.Center,
                    justifyContent: Y.T.Center
                }, _.createElement(Y._8, {
                    type: Y._10.Alt2,
                    asset: Y._9.WhisperMuted
                }))), _.createElement("div", {
                    className: "whispers-list-item__archive"
                }, _.createElement(Y.v, {
                    ariaLabel: Object(V.d)("Archive Thread", "WhisperThreadListItem"),
                    tabIndex: -1,
                    icon: Y._9.Close,
                    "data-a-target": "whispers-list-item__archive-button",
                    onClick: this.handleArchiveClick,
                    "data-click-out-id": "whispers-list-item__archive-button"
                }))))
            }, t.prototype.renderError = function() {
                return _.createElement(Y.U, null, _.createElement("p", null, Object(V.d)("Sorry, something went wrong fetching this conversation.", "WhisperThreadListItem")))
            }, t
        }(_.Component)),
        X = J,
        Z = n(89),
        ee = n(532),
        te = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.markAllWhispersAsRead = function() {
                    var e = Object(j.a)({
                        markAllAsRead: !0
                    });
                    n.props.markAllWhispersAsRead && (Object(Z.i)(), n.props.markAllWhispersAsRead(e)), n.props.onMarkAllMessagesRead && n.props.onMarkAllMessagesRead()
                }, n.toggleDoNotDisturb = function() {
                    n.state.doNotDisturb ? (V.l.set("whisperDoNotDisturb", !1), Object(Z.f)(), n.setState({
                        doNotDisturb: !1
                    })) : (V.l.set("whisperDoNotDisturb", !0), Object(Z.g)(), n.setState({
                        doNotDisturb: !0
                    }))
                }, n.state = {
                    doNotDisturb: V.l.get("whisperDoNotDisturb", !1)
                }, n
            }
            return S.__extends(t, e), t.prototype.render = function() {
                var e = this.state.doNotDisturb ? Object(V.d)("Disable Do Not Disturb", "ThreadsBoxSettings") : Object(V.d)("Enable Do Not Disturb", "ThreadsBoxSettings"),
                    t = Object(V.d)("Mark All Whispers as Read", "ThreadsBoxSettings");
                return _.createElement(Y.U, {
                    className: "threads-box-settings",
                    display: Y.H.Flex,
                    flexDirection: Y.J.Column,
                    margin: 1
                }, _.createElement(Y.S, {
                    ariaLabel: e,
                    onClick: this.toggleDoNotDisturb
                }, _.createElement(Y.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, e)), _.createElement(Y.S, {
                    ariaLabel: t,
                    onClick: this.markAllWhispersAsRead
                }, _.createElement(Y.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, t)))
            }, t = S.__decorate([Object(P.a)(ee, {
                name: "markAllWhispersAsRead"
            })], t)
        }(_.Component),
        ne = te,
        ie = n(55),
        ae = (n(533), function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.onMarkAllMessagesRead = function() {
                    n.settingsMenu.toggleBalloon(!1)
                }, n.renderUserSearchResult = function(e, t) {
                    var i = Object(V.d)("{username}'s avatar", {
                        username: e.name
                    }, "ThreadsBox");
                    return _.createElement("div", {
                        key: "searchResult:" + e.objectID,
                        onClick: n.handleUserSearchResultClick(e, t)
                    }, _.createElement(Y._17, {
                        className: "whispers-list-item",
                        borderBottom: !0,
                        padding: 1,
                        display: Y.H.Flex,
                        flexDirection: Y.J.Row,
                        flexWrap: Y.K.NoWrap,
                        fullWidth: !0,
                        alignItems: Y.c.Center
                    }, _.createElement(Y.U, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, _.createElement(Y.l, {
                        size: 30,
                        imageSrc: e.profile_image,
                        imageAlt: i
                    })), _.createElement(Y.U, {
                        fullWidth: !0,
                        display: Y.H.Flex,
                        flexDirection: Y.J.Column
                    }, _.createElement(Y._21, {
                        fontSize: Y.L.Size5,
                        bold: !0
                    }, e.login), _.createElement(Y.U, null, " "))))
                }, n.saveSettingsMenuRef = function(e) {
                    return n.settingsMenu = e
                }, n.handleConversationsClick = function() {
                    n.setState(function(e) {
                        return {
                            open: !e.open
                        }
                    })
                }, n.selectThread = function(e) {
                    n.handleClose(), n.clearSearchText(), n.props.selectThread(e)
                }, n.handleClose = function() {
                    n.setState({
                        open: !1
                    })
                }, n.clearSearchText = function() {
                    n.setState({
                        searchText: "",
                        searching: !1
                    })
                }, n.onSearchInputChange = function(e) {
                    return S.__awaiter(n, void 0, void 0, function() {
                        var t, n = this;
                        return S.__generator(this, function(i) {
                            return t = e.currentTarget.value, clearTimeout(this.inputTimeout), t && 0 !== t.length ? (this.setState({
                                searchText: t,
                                searching: !0
                            }), this.inputTimeout = setTimeout(function() {
                                n.search(n.state.searchText)
                            }, 200), [2]) : (this.inputTimeout = 0, this.clearSearchText(), [2])
                        })
                    })
                }, n.handleUserSearchResultClick = function(e, t) {
                    return function() {
                        var i = e.objectID;
                        if (null !== n.props.currentUserID && i !== n.props.currentUserID) {
                            n.handleClose(), n.clearSearchText();
                            var a = Object(ie.a)(n.props.currentUserID, i);
                            Object(Z.e)({
                                threadID: a,
                                targetUserlogin: e.login,
                                searchResultRank: t
                            }), Object(Z.b)({
                                searchResultRank: t,
                                searchQuery: n.state.searchText,
                                isConversation: !1
                            }), n.props.selectThread(a)
                        }
                    }
                }, n.filterExistingThreads = function(e) {
                    var t = e.toLowerCase();
                    return n.props.orderedThreadIDs.filter(function(e) {
                        var i = n.props.threadsByID[e].participants.find(function(e) {
                            return e.id !== n.props.currentUserID
                        });
                        return !(!i || !i.displayName) && i.displayName.toLowerCase().indexOf(t) >= 0
                    })
                }, n.searchClient = new K.a(V.a.algoliaApplicationID, V.a.algoliaAPIKey), n.state = {
                    open: !1,
                    searchText: "",
                    searching: !1
                }, n
            }
            return S.__extends(t, e), t.prototype.render = function() {
                return _.createElement(z.a, {
                    onClickOut: this.handleClose
                }, _.createElement(Y._17, {
                    className: "whispers-threads-box__container " + (this.state.open ? "whispers-threads-box__container--open" : ""),
                    display: Y.H.Flex,
                    flexDirection: Y.J.Column,
                    flexWrap: Y.K.NoWrap,
                    border: !0,
                    background: Y.m.Base,
                    position: Y._2.Absolute,
                    attachBottom: !0,
                    attachRight: !0,
                    "data-click-out-id": "threads-box",
                    "data-a-target": "threads-box-" + (this.state.open ? "open" : "closed")
                }, this.renderHeader(), this.renderList(), this.renderFooter()))
            }, t.prototype.renderOpenCloseButton = function() {
                var e = null;
                if (this.props.unreadCount > 0) {
                    var t = this.props.unreadCount > 99 ? "99+" : this.props.unreadCount.toString();
                    e = _.createElement(Y.U, {
                        className: "whispers-threads-box__unread",
                        margin: {
                            y: .5
                        }
                    }, _.createElement("span", {
                        className: "whispers-threads-box__unread--count",
                        "data-a-target": "whisper-unreads"
                    }, t))
                }
                return _.createElement(Y._17, {
                    className: "whispers-threads-box__open-close",
                    position: Y._2.Relative,
                    background: Y.m.Alt2,
                    display: Y.H.Flex,
                    alignItems: Y.c.Center,
                    justifyContent: Y.T.Center
                }, e, _.createElement(Y.v, {
                    ariaLabel: Object(V.d)("Close Threads", "WhisperThreadsBox"),
                    icon: Y._9.Conversations,
                    onClick: this.handleConversationsClick,
                    "data-a-target": "whisper-box-button"
                }))
            }, t.prototype.renderList = function() {
                var e = this;
                if (!this.state.open) return null;
                var t, n = null;
                "" !== this.state.searchText && (n = _.createElement(Y._17, {
                    key: "otherPeopleDivider",
                    borderBottom: !0,
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, Object(V.d)("Other People", "WhispersThreadBox")));
                var i = null;
                if (this.state.searching ? i = _.createElement(Y.U, {
                        display: Y.H.Flex,
                        flexDirection: Y.J.Column,
                        margin: {
                            top: 4
                        },
                        alignItems: Y.c.Center
                    }, _.createElement(Y.X, {
                        delay: 0
                    })) : this.state.searchResults && this.state.searchResults.users && "" !== this.state.searchText && (i = this.state.searchResults.users.hits.filter(function(t) {
                        return !e.props.threadsByID[t.objectID]
                    }).map(this.renderUserSearchResult)), this.props.error) t = _.createElement(Y.U, {
                    margin: {
                        x: "auto"
                    },
                    display: Y.H.Flex,
                    justifyContent: Y.T.Center,
                    alignItems: Y.c.Center,
                    fullHeight: !0
                }, _.createElement(Y._21, {
                    color: Y.F.Error
                }, Object(V.d)("There was a problem loading whispers.", "WhisperThreadsBox")));
                else if (this.props.loading) t = _.createElement(Y.X, null);
                else {
                    var a = this.props.orderedThreadIDs;
                    "" !== this.state.searchText && (a = this.filterExistingThreads(this.state.searchText)), t = a.filter(function(t) {
                        return e.props.threadsByID[t] && !e.props.threadsByID[t].archived
                    }).map(function(t) {
                        var n = e.props.threadsByID[t];
                        return _.createElement(X, {
                            key: "whisperThread:" + n.id,
                            user: n.participants.find(function(t) {
                                return t.id !== e.props.currentUserID
                            }),
                            threadID: n.id,
                            lastMessage: n.lastMessage,
                            archiveThread: e.props.archiveThread,
                            selectThread: e.selectThread,
                            unreadMessageCount: n.unreadMessagesCount,
                            muted: n.muted
                        })
                    })
                }
                return _.createElement(W.b, {
                    suppressScrollX: !0
                }, _.createElement(Y.U, null, t, n, i, _.createElement(W.a, {
                    enabled: this.state.open,
                    loadMore: this.props.loadMore,
                    pixelThreshold: 200
                })))
            }, t.prototype.renderHeader = function() {
                return this.state.open ? _.createElement(Y._17, {
                    className: "whispers-threads-box__header",
                    "data-a-target": "whispers-threads-box__header",
                    alignItems: Y.c.Center,
                    background: Y.m.Alt,
                    borderBottom: !0,
                    color: Y.F.Base,
                    display: Y.H.Flex,
                    flexDirection: Y.J.Row,
                    flexGrow: 0,
                    flexShrink: 0,
                    padding: {
                        y: .5,
                        x: 1
                    },
                    "data-click-hide-id": "threads-box-header"
                }, _.createElement(Y.U, {
                    flexGrow: 1,
                    display: Y.H.Flex
                }, _.createElement(Y._21, {
                    type: Y._26.Span,
                    bold: !0
                }, Object(V.d)("Whispers", "WhisperThreadsBox"))), _.createElement(q.a, {
                    ref: this.saveSettingsMenuRef
                }, _.createElement(Y.v, {
                    ariaLabel: Object(V.d)("Settings", "WhisperThreadsBox"),
                    icon: Y._9.Gear,
                    "data-a-target": "whisper-settings-button"
                }), _.createElement(Y.p, {
                    size: Y.r.Small,
                    direction: Y.q.BottomRight,
                    offsetX: "0.5rem"
                }, _.createElement(ne, {
                    onMarkAllMessagesRead: this.onMarkAllMessagesRead
                }))), _.createElement(Y.v, {
                    ariaLabel: Object(V.d)("Minimize", "WhisperThreadsBox"),
                    icon: Y._9.Minimize,
                    onClick: this.handleClose,
                    "data-a-target": "whisper-close-button"
                })) : null
            }, t.prototype.renderFooter = function() {
                return this.state.open ? _.createElement(Y._17, {
                    display: Y.H.Flex,
                    flexGrow: 0,
                    flexShrink: 0,
                    alignItems: Y.c.Center,
                    borderTop: !0,
                    background: Y.m.Alt
                }, _.createElement(Y.U, {
                    flexGrow: 1,
                    padding: {
                        top: .5,
                        bottom: .5,
                        left: 1
                    }
                }, _.createElement(Y._11, {
                    onChange: this.onSearchInputChange,
                    value: this.state.searchText,
                    placeholder: Object(V.d)("Search for People", "WhisperThreadsBox"),
                    id: "threads-box-filter",
                    autoFocus: !0,
                    "data-a-target": "whisper-search-input"
                })), this.renderOpenCloseButton()) : this.renderOpenCloseButton()
            }, t.prototype.search = function(e) {
                return S.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return S.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return e ? [4, this.searchClient.queryForType(Q.a.Users, e, G.a())] : [2];
                            case 1:
                                return t = n.sent(), this.setState({
                                    searchResults: t,
                                    searching: !1
                                }), [2]
                        }
                    })
                })
            }, t
        }(_.Component)),
        re = n(281),
        oe = Object(T.a)(o, r)(re.a),
        se = function(e) {
            for (var t = {}, n = 0, i = e; n < i.length; n++) {
                var a = i[n];
                t[a.id] = S.__assign({}, le(a))
            }
            return t
        },
        le = function(e) {
            return {
                id: e.id,
                messageHistory: e.messages.edges.map(function(e) {
                    return e.node
                }).slice(0, -1),
                lastMessage: e.messages.edges.map(function(e) {
                    return e.node
                }).find(function(e) {
                    return !e.deletedAt
                }) || null,
                spamInfo: e.spamInfo,
                participants: e.participants,
                muted: e.isMuted,
                archived: e.isArchived,
                unreadMessagesCount: e.unreadMessagesCount
            }
        },
        ce = n(285),
        ue = n(534),
        de = (n(535), n(536)),
        pe = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.archiveThread = function(e) {
                    if (n.state.threadsByID[e]) {
                        var t = S.__assign({}, Object(j.a)({
                            threadID: e,
                            isArchived: !0
                        }), {
                            optimisticResponse: {
                                updateWhisperThread: {
                                    thread: {
                                        __typename: "WhisperThread",
                                        id: e,
                                        isArchived: !0
                                    },
                                    __typename: "UpdateWhisperThreadPayload"
                                }
                            }
                        });
                        n.props.archiveThread && (n.props.closeThread(e), n.props.data.currentUser && Object(Z.a)(e), n.props.archiveThread(t))
                    }
                }, n.selectThread = function(e) {
                    n.props.openThread({
                        threadID: e,
                        collapsed: !1
                    })
                }, n.loadMore = function() {
                    return S.__awaiter(n, void 0, void 0, function() {
                        return S.__generator(this, function(e) {
                            return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                        })
                    })
                }, n.handleThreadDataReport = function(e, t) {
                    n.state.threadsByID[e] || Object(j.d)(de, {
                        cursor: null
                    }, function(e) {
                        return e.currentUser && e.currentUser.whisperThreads.edges.unshift({
                            cursor: "0",
                            node: S.__assign({}, t, {
                                isArchived: !1
                            }),
                            __typename: "WhisperThreadEdge"
                        }), e
                    });
                    var i = S.__assign({}, n.state.threadsByID[e]);
                    t.messages && (i.messageHistory = t.messages.edges.map(function(e) {
                        return e.node
                    }).slice(0, -1)), !1 !== t.isMuted && !0 !== t.isMuted || (i.muted = t.isMuted);
                    var a = S.__assign({}, n.state.threadsByID, (r = {}, r[e] = i, r));
                    n.setState({
                        threadsByID: a,
                        unreadCount: s(a)
                    });
                    var r
                };
                var i = n.props.data.currentUser && se(n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                    return e.node
                })) || {};
                return n.state = {
                    error: !!n.props.data.error,
                    orderedThreadIDs: n.props.data.currentUser && n.props.data.currentUser.whisperThreads.edges.map(function(e) {
                        return e.node.id
                    }) || [],
                    threadsByID: i,
                    unreadCount: s(i),
                    emotes: {}
                }, n
            }
            return S.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                if (e.data.error) this.setState({
                    error: !!e.data.error
                });
                else if (!e.data.loading && e.data.currentUser) {
                    var t = se(e.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node
                        })),
                        n = Object(H.a)(e.data.currentUser.emoteSets);
                    this.setState({
                        emotes: n,
                        threadsByID: t,
                        orderedThreadIDs: e.data.currentUser.whisperThreads.edges.map(function(e) {
                            return e.node.id
                        }),
                        unreadCount: s(t)
                    })
                }
            }, t.prototype.render = function() {
                if (!this.props.data.currentUser) return null;
                var e = U({
                    whispers: !0,
                    "whispers--theatre-mode": this.props.theatreModeEnabled,
                    "whispers--right-column-expanded": this.props.rightColumnExpanded
                });
                return _.createElement(Y.U, {
                    className: e,
                    position: Y._2.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    margin: {
                        right: 1
                    }
                }, _.createElement(oe, {
                    currentUserID: this.props.data.currentUser.id,
                    emotes: this.state.emotes,
                    reportThreadData: this.handleThreadDataReport,
                    archiveThread: this.archiveThread
                }), _.createElement(ae, {
                    currentUserID: this.props.data.currentUser.id,
                    error: this.state.error,
                    loading: this.props.data.loading,
                    unreadCount: this.state.unreadCount,
                    orderedThreadIDs: this.state.orderedThreadIDs,
                    threadsByID: this.state.threadsByID,
                    selectThread: this.selectThread,
                    archiveThread: this.archiveThread,
                    loadMore: this.loadMore
                }))
            }, t = S.__decorate([Object(P.a)(de, {
                props: function(e) {
                    return S.__assign({}, e, {
                        loadMore: function() {
                            return e.data.fetchMore({
                                query: de,
                                variables: S.__assign({}, e.data.variables, {
                                    cursor: e.data.currentUser && e.data.currentUser.whisperThreads.edges.length > 0 ? e.data.currentUser.whisperThreads.edges[e.data.currentUser.whisperThreads.edges.length - 1].cursor : null
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult,
                                        i = n;
                                    return i.currentUser ? e.currentUser ? {
                                        currentUser: S.__assign({}, i.currentUser, {
                                            whisperThreads: S.__assign({}, i.currentUser.whisperThreads, {
                                                edges: Object(j.b)(e.currentUser.whisperThreads.edges, i.currentUser.whisperThreads.edges)
                                            })
                                        })
                                    } : {
                                        currentUser: i.currentUser
                                    } : {
                                        currentUser: null
                                    }
                                }
                            })
                        }
                    })
                }
            }), Object(P.a)(ue, {
                name: "archiveThread"
            }), Object(M.a)(function(e) {
                return {
                    query: de,
                    types: [A.c.WhisperDeleted, A.c.WhisperEdited, A.c.WhisperSent, A.c.WhisperAllThreadsUpdate, A.c.WhisperReceived, A.c.WhisperThreadUpdate],
                    variables: S.__assign({}, e.data.variables),
                    skip: !e.data.currentUser || void 0 === e.data.currentUser.id,
                    topic: Object(B.p)(e.data.currentUser && e.data.currentUser.id || ""),
                    mutator: function(t, n) {
                        if (!n.currentUser) return n;
                        if (l(t) || c(t)) {
                            if (c(t)) {
                                var i = n.currentUser.whisperThreads.edges.find(function(e) {
                                    return e.node.id === t.data_object.thread_id
                                });
                                if (i) {
                                    var a = i.node.participants.find(function(e) {
                                        return e.id === "" + t.data_object.from_id
                                    });
                                    a && Object(Z.l)({
                                        targetUserLogin: a.login,
                                        threadID: t.data_object.thread_id
                                    })
                                }
                            }
                            return h(t, n, e.openThread)
                        }
                        return u(t) ? g(t, n) : d(t) ? f(t, n) : p(t) ? v(t, n, e.closeThread) : m(t) ? b(t, n) : n
                    },
                    skipMessage: function(e, t) {
                        if (l(e)) {
                            if (!t.currentUser) return !1;
                            var n = t.currentUser.whisperThreads.edges.find(function(t) {
                                return t.node.id === e.data_object.thread_id
                            });
                            if (n && n.node.messages.edges.findIndex(function(t) {
                                    return t.node.id === e.data_object.nonce
                                }) >= 0) return !0
                        }
                        return !1
                    }
                }
            })], t)
        }(_.Component),
        me = pe,
        he = Object(T.a)(y, k)(me),
        ge = n(10),
        fe = n(111),
        ve = n(16),
        be = n(5),
        ye = fe.a.wrap(function() {
            return n.e(48).then(n.bind(null, 2052))
        }, "AnonFrontPage"),
        ke = fe.a.wrap(function() {
            return n.e(32).then(n.bind(null, 2053))
        }, "BrowseCommunitiesPage"),
        Se = fe.a.wrap(function() {
            return n.e(32).then(n.bind(null, 2053))
        }, "BrowseForYouPage"),
        _e = fe.a.wrap(function() {
            return n.e(32).then(n.bind(null, 2053))
        }, "BrowseCreativePage"),
        we = fe.a.wrap(function() {
            return n.e(42).then(n.bind(null, 2055))
        }, "ChannelClipsPage"),
        Ee = fe.a.wrap(function() {
            return n.e(47).then(n.bind(null, 2056))
        }, "ChannelCollectionsPage"),
        Ce = fe.a.wrap(function() {
            return n.e(45).then(n.bind(null, 2057))
        }, "ChannelEventsPage"),
        Ne = fe.a.wrap(function() {
            return n.e(0).then(n.bind(null, 2058))
        }, "ChannelPage"),
        Te = fe.a.wrap(function() {
            return n.e(41).then(n.bind(null, 2059))
        }, "ChannelVideosPage"),
        De = fe.a.wrap(function() {
            return n.e(35).then(n.bind(null, 2060))
        }, "ChannelClipsManagerPage"),
        Ie = fe.a.wrap(function() {
            return n.e(35).then(n.bind(null, 2060))
        }, "MyClipsManagerPage"),
        Oe = fe.a.wrap(function() {
            return n.e(61).then(n.bind(null, 2061))
        }, "DevOnlyRoot"),
        Le = fe.a.wrap(function() {
            return n.e(58).then(n.bind(null, 2062))
        }, "DevOnlyTestingCarouselPage"),
        xe = fe.a.wrap(function() {
            return n.e(33).then(n.bind(null, 2063))
        }, "DirectoryCommunityByLanguagePage"),
        Re = fe.a.wrap(function() {
            return n.e(54).then(n.bind(null, 2067))
        }, "DirectoryCommunityDetailsPage"),
        Fe = fe.a.wrap(function() {
            return n.e(50).then(n.bind(null, 2068))
        }, "DirectoryGameClipsPage"),
        Ue = fe.a.wrap(function() {
            return n.e(51).then(n.bind(null, 2069))
        }, "DirectoryGameDetailsPage"),
        Pe = fe.a.wrap(function() {
            return n.e(33).then(n.bind(null, 2063))
        }, "DirectoryGamePage"),
        Me = fe.a.wrap(function() {
            return n.e(52).then(n.bind(null, 2070))
        }, "DirectoryGameVideosPage"),
        Ae = fe.a.wrap(function() {
            return n.e(34).then(n.bind(null, 2071))
        }, "DirectoryPopularPage"),
        je = fe.a.wrap(function() {
            return n.e(34).then(n.bind(null, 2071))
        }, "DirectoryPopularByLanguagePage"),
        Be = fe.a.wrap(function() {
            return n.e(32).then(n.bind(null, 2053))
        }, "BrowseGamePage"),
        He = fe.a.wrap(function() {
            return n.e(59).then(n.bind(null, 2072))
        }, "EmailVerificationPage"),
        Ve = fe.a.wrap(function() {
            return n.e(49).then(n.bind(null, 2073))
        }, "EventLandingPage"),
        ze = fe.a.wrap(function() {
            return n.e(53).then(n.bind(null, 2074))
        }, "FollowingRootPage"),
        We = fe.a.wrap(function() {
            return n.e(46).then(n.bind(null, 2075))
        }, "FrontPage"),
        qe = fe.a.wrap(function() {
            return n.e(60).then(n.bind(null, 2076))
        }, "ReportUserPage"),
        Ge = fe.a.wrap(function() {
            return n.e(55).then(n.bind(null, 2077))
        }, "StoreMerchPage"),
        Qe = fe.a.wrap(function() {
            return n.e(43).then(n.bind(null, 2078))
        }, "VideoWatchPage"),
        Ke = fe.a.wrap(function() {
            return n.e(56).then(n.bind(null, 2079))
        }, "GlobalNotificationSettingsPage"),
        $e = function() {
            return _.createElement(ge.c, {
                path: "/",
                to: "/directory/following"
            })
        },
        Ye = function() {
            return window.location.reload(), null
        },
        Je = function(e) {
            return _.createElement(ge.c, {
                to: "/popout/" + e.match.params.channelLogin + "/chat"
            })
        },
        Xe = function(e) {
            return _.createElement(ge.c, {
                to: "/" + e.match.params.channelLogin + "/videos/all"
            })
        },
        Ze = function(e) {
            return _.createElement(ge.c, {
                to: "/" + e.match.params.channelLogin + "/videos/archive"
            })
        },
        et = function(e) {
            return _.createElement(ge.c, {
                to: "/directory/game/" + e.match.params.encodedCommunityName + "/videos/all"
            })
        },
        tt = function() {
            return _.createElement(ge.c, {
                to: "/directory/all/xbox"
            })
        },
        nt = function(e) {
            var t = e.isLoggedIn;
            return _.createElement(ge.e, null, V.a.buildType !== ve.a.Production && _.createElement(ge.d, {
                path: "/_dev/testing/carousel",
                component: Le
            }), V.a.buildType !== ve.a.Production && _.createElement(ge.d, {
                path: "/_dev",
                component: Oe
            }), _.createElement(ge.d, {
                exact: !0,
                path: "/",
                component: t ? We : ye
            }), _.createElement(ge.d, {
                path: "/bits",
                render: Ye
            }), _.createElement(ge.d, {
                path: "/collections/:collectionID",
                component: Qe
            }), _.createElement(ge.d, {
                path: "/communities/:encodedCommunityName/details",
                component: Re
            }), _.createElement(ge.d, {
                path: "/communities/:encodedCommunityName/:encodedLanguage",
                component: xe
            }), _.createElement(ge.d, {
                path: "/communities/:encodedCommunityName",
                component: Pe
            }), _.createElement(ge.d, {
                path: "/directory/communities",
                component: ke
            }), _.createElement(ge.d, {
                path: "/directory/creative",
                component: _e
            }), _.createElement(ge.d, {
                path: "/directory/foryou",
                component: Se
            }), _.createElement(ge.d, {
                path: "/directory/following/:category?",
                component: ze
            }), _.createElement(ge.d, {
                path: "/directory/game/:encodedCommunityName/clips",
                component: Fe
            }), V.a.buildType !== ve.a.Production && _.createElement(ge.d, {
                path: "/directory/game/:encodedCommunityName/details",
                component: Ue
            }), _.createElement(ge.d, {
                path: "/directory/game/:encodedCommunityName/videos/:filter",
                component: Me
            }), _.createElement(ge.d, {
                path: "/directory/game/:encodedCommunityName/videos",
                render: et
            }), _.createElement(ge.d, {
                path: "/directory/game/:encodedCommunityName/:encodedLanguage",
                component: xe
            }), _.createElement(ge.d, {
                path: "/directory/game/:encodedCommunityName",
                component: Pe
            }), _.createElement(ge.d, {
                path: "/directory/all/ps4",
                component: Ae
            }), _.createElement(ge.d, {
                path: "/directory/all/xb1",
                component: tt
            }), _.createElement(ge.d, {
                path: "/directory/all/xbox",
                component: Ae
            }), _.createElement(ge.d, {
                path: "/directory/all/:encodedLanguage",
                component: je
            }), _.createElement(ge.d, {
                path: "/directory/all",
                component: Ae
            }), _.createElement(ge.d, {
                path: "/directory/:category?",
                component: Be
            }), _.createElement(ge.d, {
                path: "/events/:eventName",
                render: Ve
            }), _.createElement(ge.d, {
                path: "/email-verification/:emailOpaqueId",
                component: He
            }), _.createElement(ge.d, {
                path: "/following",
                component: $e
            }), _.createElement(ge.d, {
                path: "/popout",
                render: Ye
            }), _.createElement(ge.d, {
                path: "/videos/:videoID",
                component: Qe
            }), _.createElement(ge.d, {
                path: "/store/merch",
                component: Ge
            }), _.createElement(ge.d, {
                path: "/store"
            }, _.createElement(ge.c, {
                to: "/store/merch"
            })), _.createElement(ge.d, {
                path: "/subs",
                render: Ye
            }), _.createElement(ge.d, {
                path: "/settings/notifications",
                component: Ke
            }), _.createElement(ge.d, {
                path: "/:channelName/report",
                component: qe
            }), _.createElement(ge.d, {
                path: "/:channelLogin/videos/(past_broadcasts?)",
                render: Ze
            }), _.createElement(ge.d, {
                path: "/:channelLogin/videos/:filter(all|archive|upload|highlight)",
                component: Te
            }), _.createElement(ge.d, {
                path: "/:channelLogin/videos/:unknownFilter?",
                render: Xe
            }), V.a.buildType !== ve.a.Production && _.createElement(ge.d, {
                path: "/:channelName/manager/clips/channel",
                component: De
            }), V.a.buildType !== ve.a.Production && _.createElement(ge.d, {
                path: "/:channelName/manager/clips",
                component: Ie
            }), _.createElement(ge.d, {
                path: "/:channelName/clips",
                component: we
            }), _.createElement(ge.d, {
                path: "/:channelLogin/chat",
                render: Je
            }), _.createElement(ge.d, {
                path: "/:channelLogin/collections",
                component: Ee
            }), _.createElement(ge.d, {
                path: "/:channelLogin/events",
                component: Ce
            }), _.createElement(ge.d, {
                path: "/:channelName/p/:entityID",
                component: Ne
            }), _.createElement(ge.d, {
                path: "/:channelName",
                component: Ne
            }))
        },
        it = Object(be.c)("DefaultRootRouter", {
            autoReportInteractive: !0
        })(nt);
    n.d(t, "b", function() {
        return at
    }), n.d(t, "a", function() {
        return rt
    });
    var at = "twilight-main",
        rt = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {}, t.setMainRef = function(e) {
                    t.setState({
                        mainContentRef: e
                    })
                }, t
            }
            return S.__extends(t, e), t.prototype.render = function() {
                return _.createElement(Y.U, {
                    display: Y.H.Flex,
                    flexWrap: Y.K.NoWrap,
                    fullHeight: !0,
                    position: Y._2.Relative
                }, _.createElement(L, null), _.createElement(Y.P, {
                    position: Y._2.Relative,
                    flexGrow: 1,
                    fullHeight: !0,
                    fullWidth: !0
                }, _.createElement("main", {
                    className: at,
                    ref: this.setMainRef
                }, _.createElement(C.a, null, _.createElement(Y.U, {
                    position: Y._2.Relative,
                    fullWidth: !0
                }, _.createElement(it, {
                    isLoggedIn: this.props.isLoggedIn
                }), _.createElement(w.b, {
                    mainRef: this.state.mainContentRef
                }))), this.props.firstPageLoaded && _.createElement(he, null))), _.createElement(E.a, null))
            }, t
        }(_.Component)
}, function(e, t, n) {
    "use strict";

    function i(e) {
        var t = Math.floor(e / 3600),
            n = Math.floor((e - 3600 * t) / 60),
            i = e - 3600 * t - 60 * n;
        return t < 10 && (t = "0" + t), n < 10 && (n = "0" + n), i < 10 && (i = "0" + i), t + "h" + n + "m" + i + "s"
    }

    function a(e) {
        return "" === e ? "" : e.startsWith("v") ? e : "v" + e
    }
    t.b = i, t.a = a
}, function(e, t) {
    function n(e) {
        var t = !1;
        if (null != e && "function" != typeof e.toString) try {
            t = !!(e + "")
        } catch (e) {}
        return t
    }

    function i(e) {
        return !!e && "object" == typeof e
    }

    function a(e) {
        if (!i(e) || d.call(e) != r || n(e)) return !1;
        var t = p(e);
        if (null === t) return !0;
        var a = c.call(t, "constructor") && t.constructor;
        return "function" == typeof a && a instanceof a && l.call(a) == u
    }
    var r = "[object Object]",
        o = Function.prototype,
        s = Object.prototype,
        l = o.toString,
        c = s.hasOwnProperty,
        u = l.call(Object),
        d = s.toString,
        p = function(e, t) {
            return function(n) {
                return e(t(n))
            }
        }(Object.getPrototypeOf, Object);
    e.exports = a
}, function(e, t, n) {
    "use strict";
    var i = n(286),
        a = n(0),
        r = n(1),
        o = n(2),
        s = n(18),
        l = n(142),
        c = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.renderPortal = function(e) {
                    l.d ? l.d.provideContent(e, n.contentID) : o.i.warn("RightColumn must be defined on the Root to manipulate its content.")
                }, n.removePortal = function() {
                    l.d ? l.d.removeContent() : o.i.warn("RightColumn must be defined on the Root to manipulate its content.")
                }, n.contentID = Object(s.a)(), n
            }
            return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                e.children ? this.renderPortal(e.children) : this.removePortal()
            }, t.prototype.componentDidMount = function() {
                l.d || o.i.warn("RightColumn must be defined on the Root to manipulate its content."), this.props.children && this.renderPortal(this.props.children)
            }, t.prototype.componentWillUnmount = function() {
                this.removePortal()
            }, t.prototype.render = function() {
                return null
            }, t
        }(r.Component);
    n.d(t, "a", function() {
        return i.b
    }), n.d(t, "b", function() {
        return c
    })
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "FragmentDefinition",
            name: {
                kind: "Name",
                value: "currentUser"
            },
            typeCondition: {
                kind: "NamedType",
                name: {
                    kind: "Name",
                    value: "User"
                }
            },
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "id"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: null
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "login"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: null
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "displayName"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: null
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "availability"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: null
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "activity"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "type"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "InlineFragment",
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Watching"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "InlineFragment",
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Streaming"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "InlineFragment",
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Playing"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 323
        }
    };
    n.loc.source = {
        body: "fragment currentUser on User {\n  id\n  login\n  displayName\n  availability\n  activity {\n    type\n    ... on Watching {\n      user {\n        displayName\n      }\n    }\n    ... on Streaming {\n      stream {\n        game {\n          name\n        }\n      }\n    }\n    ... on Playing {\n      game {\n        name\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Core_Services_Spade_SubEvent_User"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "channelID"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "withVideo"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Boolean"
                        }
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "videoID"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ID"
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "canPrimeSubscribe"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionBenefit"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "tier"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "purchasedWithPrime"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "video"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        }
                    }],
                    directives: [{
                        kind: "Directive",
                        name: {
                            kind: "Name",
                            value: "include"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "if"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "withVideo"
                                }
                            }
                        }]
                    }],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "broadcastType"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 339
        }
    };
    n.loc.source = {
        body: "query Core_Services_Spade_SubEvent_User($channelID: ID!, $withVideo: Boolean!, $videoID: ID) {\n  user(id: $channelID) {\n    id\n    self {\n      canPrimeSubscribe\n      subscriptionBenefit {\n        id\n        tier\n        purchasedWithPrime\n      }\n    }\n  }\n  video(id: $videoID) @include(if: $withVideo) {\n    id\n    broadcastType\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "EmotePicker_EmotePicker_UserEmotes"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "emoteSets"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "emotes"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "token"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 144
        }
    };
    n.loc.source = {
        body: "query EmotePicker_EmotePicker_UserEmotes {\n  user {\n    id\n    emoteSets {\n      id\n      emotes {\n        id\n        token\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "channelOwnerID"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelOwnerID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "subscriptionProducts"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "url"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "emotes"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "token"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "emoteSetID"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 265
        }
    };
    n.loc.source = {
        body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\n  user(id: $channelOwnerID) {\n    id\n    login\n    displayName\n    subscriptionProducts {\n      id\n      url\n      emotes {\n        id\n        token\n      }\n      emoteSetID\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "WhisperThread_BlockUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "BlockUserInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "blockUser"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "targetUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 127
        }
    };
    n.loc.source = {
        body: "mutation WhisperThread_BlockUser($input: BlockUserInput!) {\n  blockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Presence_WatchingClick_User"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "login"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "stream"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hosting"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 279
        }
    };
    n.loc.source = {
        body: "query Presence_WatchingClick_User($login: String!) {\n  user(login: $login) {\n    id\n    stream {\n      id\n      game {\n        id\n        name\n      }\n    }\n    hosting {\n      id\n      stream {\n        id\n        game {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Whispers_Tracking_CurrentUser"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasTurbo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "availability"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 107
        }
    };
    n.loc.source = {
        body: "query Whispers_Tracking_CurrentUser {\n  currentUser {\n    id\n    hasTurbo\n    availability\n    login\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "Thread_BlockUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "BlockUserInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "blockUser"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "targetUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 120
        }
    };
    n.loc.source = {
        body: "mutation Thread_BlockUser($input: BlockUserInput!) {\n  blockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "Thread_ReportUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ReportWhisperThreadInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "reportWhisperThread"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "thread"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 137
        }
    };
    n.loc.source = {
        body: "mutation Thread_ReportUser($input: ReportWhisperThreadInput!) {\n  reportWhisperThread(input: $input) {\n    thread {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "Thread_SetMuteThread"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UpdateWhisperThreadInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "updateWhisperThread"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "thread"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "isMuted"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 154
        }
    };
    n.loc.source = {
        body: "mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      isMuted\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "Thread_UnblockUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UnblockUserInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "unblockUser"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "targetUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 126
        }
    };
    n.loc.source = {
        body: "mutation Thread_UnblockUser($input: UnblockUserInput!) {\n  unblockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "WhisperThread_ReportUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ReportWhisperThreadInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "reportWhisperThread"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "thread"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 144
        }
    };
    n.loc.source = {
        body: "mutation WhisperThread_ReportUser($input: ReportWhisperThreadInput!) {\n  reportWhisperThread(input: $input) {\n    thread {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "WhisperThread_SetThreadSpamStatus"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UpdateWhisperThreadInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "updateWhisperThread"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "thread"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "spamInfo"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "lastMarkedNotSpamAt"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "likelihood"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 225
        }
    };
    n.loc.source = {
        body: "mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      spamInfo {\n        lastMarkedNotSpamAt\n        likelihood\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "SendWhisper"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "SendWhisperInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "sendWhisper"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "message"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "content"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "content"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "emoteID"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "setID"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "from"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "to"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "from"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "sentAt"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "editedAt"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "deletedAt"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 334
        }
    };
    n.loc.source = {
        body: "mutation SendWhisper($input: SendWhisperInput!) {\n  sendWhisper(input: $input) {\n    message {\n      id\n      content {\n        content\n        emotes {\n          id\n          emoteID\n          setID\n          from\n          to\n        }\n      }\n      from {\n        id\n      }\n      sentAt\n      editedAt\n      deletedAt\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "WhisperThread"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "id"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "whisperThread"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "userLastMessageRead"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "sentAt"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "messages"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "20"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "content"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "emotes"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "emoteID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "setID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "from"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "to"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "from"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "sentAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "editedAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "deletedAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 515
        }
    };
    n.loc.source = {
        body: "query WhisperThread($id: ID!) {\n  whisperThread(id: $id) {\n    id\n    userLastMessageRead {\n      id\n      sentAt\n    }\n    messages(first: 20) {\n      edges {\n        cursor\n        node {\n          id\n          content {\n            content\n            emotes {\n              id\n              emoteID\n              setID\n              from\n              to\n            }\n          }\n          from {\n            id\n          }\n          sentAt\n          editedAt\n          deletedAt\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Whispers_Thread_Participants"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "targetUserID"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ID"
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "blockedUsers"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "chatColor"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "profileImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "70"
                                }
                            }],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "friends"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "availability"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "activity"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "InlineFragment",
                                                    typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Playing"
                                                        }
                                                    },
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "game"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "name"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "InlineFragment",
                                                    typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Streaming"
                                                        }
                                                    },
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "stream"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "game"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "name"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "InlineFragment",
                                                    typeCondition: {
                                                        kind: "NamedType",
                                                        name: {
                                                            kind: "Name",
                                                            value: "Watching"
                                                        }
                                                    },
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "user"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "displayName"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "login"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "hosting"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "displayName"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetUserID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayBadges"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "imageURL"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "chatColor"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "profileImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "70"
                                }
                            }],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 1008
        }
    };
    n.loc.source = {
        body: "query Whispers_Thread_Participants($targetUserID: ID) {\n  currentUser {\n    id\n    blockedUsers {\n      id\n    }\n    chatColor\n    displayName\n    profileImageURL(width: 70)\n    login\n    friends {\n      edges {\n        node {\n          id\n        }\n        availability\n        activity {\n          type\n          ... on Playing {\n            game {\n              id\n              name\n            }\n          }\n          ... on Streaming {\n            stream {\n              id\n              game {\n                id\n                name\n              }\n            }\n          }\n          ... on Watching {\n            user {\n              id\n              displayName\n              login\n              hosting {\n                id\n                displayName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  user(id: $targetUserID) {\n    id\n    displayBadges {\n      id\n      title\n      imageURL\n    }\n    chatColor\n    displayName\n    profileImageURL(width: 70)\n    login\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Whispers_Thread_WhisperThread"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "id"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "cursor"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Cursor"
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "whisperThread"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "userLastMessageRead"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "sentAt"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "participants"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "chatColor"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "70"
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "spamInfo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "lastMarkedNotSpamAt"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "likelihood"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "isMuted"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "isArchived"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "messages"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "20"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "after"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "cursor"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "content"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "emotes"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "emoteID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "setID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "from"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "to"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "from"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "sentAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "editedAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "deletedAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "unreadMessagesCount"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 792
        }
    };
    n.loc.source = {
        body: "query Whispers_Thread_WhisperThread($id: ID!, $cursor: Cursor) {\n  whisperThread(id: $id) {\n    id\n    userLastMessageRead {\n      id\n      sentAt\n    }\n    participants {\n      id\n      chatColor\n      displayName\n      profileImageURL(width: 70)\n      login\n    }\n    spamInfo {\n      lastMarkedNotSpamAt\n      likelihood\n    }\n    isMuted\n    isArchived\n    messages(first: 20, after: $cursor) {\n      edges {\n        cursor\n        node {\n          id\n          content {\n            content\n            emotes {\n              id\n              emoteID\n              setID\n              from\n              to\n            }\n          }\n          from {\n            id\n          }\n          sentAt\n          editedAt\n          deletedAt\n        }\n      }\n    }\n    unreadMessagesCount\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "Thread_UpdateThread"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UpdateWhisperThreadInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "updateWhisperThread"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "thread"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "unreadMessagesCount"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 165
        }
    };
    n.loc.source = {
        body: "mutation Thread_UpdateThread($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      unreadMessagesCount\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "FriendButton_CreateFriendRequest"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "CreateFriendRequestInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "createFriendRequest"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 150
        }
    };
    n.loc.source = {
        body: "mutation FriendButton_CreateFriendRequest($input: CreateFriendRequestInput!) {\n  createFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "FriendButton"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "friends"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 130
        }
    };
    n.loc.source = {
        body: "query FriendButton {\n  currentUser {\n    id\n    friends {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "FriendButton_UnfriendUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UnfriendUserInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "unfriendUser"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 129
        }
    };
    n.loc.source = {
        body: "mutation FriendButton_UnfriendUser($input: UnfriendUserInput!) {\n  unfriendUser(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "ReportUserModal_ReportReasons"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "content"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ReportContentType"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "reportReasons"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "content"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "content"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 118
        }
    };
    n.loc.source = {
        body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\n  reportReasons(content: $content) {\n    id\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "ReportUserModal_UserCommunities"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "userId"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "userId"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "directories"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "nodes"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "directoryType"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 201
        }
    };
    n.loc.source = {
        body: "query ReportUserModal_UserCommunities($userId: ID!) {\n  user(id: $userId) {\n    id\n    directories {\n      nodes {\n        id\n        name\n        displayName\n        directoryType\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "GiftSubscribeButton_Gift_Eligibility"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "recipientLogin"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "String"
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "subProductId"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "recipientLogin"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "canGift"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "product"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "subProductId"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 195
        }
    };
    n.loc.source = {
        body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String, $subProductId: String!) {\n  user(login: $recipientLogin) {\n    id\n    self {\n      canGift(product: $subProductId)\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "ChannelPage_SubscribeButton_Promotion"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "login"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "subscriptionProducts"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "isEligibleForDiscount"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "newPrice"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "oldPrice"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "discountType"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "discountType"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 246
        }
    };
    n.loc.source = {
        body: "query ChannelPage_SubscribeButton_Promotion($login: String!) {\n  user(login: $login) {\n    id\n    subscriptionProducts {\n      id\n      self {\n\t\t\t\tisEligibleForDiscount\n\t\t\t\tnewPrice\n\t\t\t\toldPrice\n\t\t\t\tdiscountType\n\t\t\t\tdiscountType\n\t\t\t}\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "ChannelPage_SubscribeButton_User"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "login"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "subscriptionProducts"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "price"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "url"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "emoteSetID"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "emotes"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "canPrimeSubscribe"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionBenefit"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "purchasedWithPrime"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "tier"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "endsAt"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "paidUpgrade"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "price"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "startsAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "gift"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "isGift"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "gifter"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "displayName"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "requestInfo"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "countryCode"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 673
        }
    };
    n.loc.source = {
        body: "query ChannelPage_SubscribeButton_User($login: String!) {\n  user(login: $login) {\n    id\n    login\n    displayName\n    subscriptionProducts {\n      id\n      price\n      url\n      emoteSetID\n      displayName\n      name\n      emotes {\n        id\n      }\n    }\n    self {\n      canPrimeSubscribe\n      subscriptionBenefit {\n        id\n        purchasedWithPrime\n        tier\n        endsAt\n        paidUpgrade {\n          price\n          startsAt\n        }\n        gift {\n          isGift\n          gifter {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  }\n  currentUser {\n    id\n    login\n    hasPrime\n  }\n  requestInfo {\n    countryCode\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "ReportUserModal_ReportUserCommunity"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ReportUserInCommunityInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "reportUserInCommunity"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 157
        }
    };
    n.loc.source = {
        body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\n  reportUserInCommunity(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "ReportUserModal_ReportUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ReportContentInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "reportContent"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "contentID"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 120
        }
    };
    n.loc.source = {
        body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\n  reportContent(input: $input) {\n    contentID\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, , function(e, t, n) {
    "use strict";

    function i(e, t) {
        return !(!e && !t) && (!t || !e || (t.channelLogin !== e.channelLogin || t.vodID !== e.vodID || t.collectionID !== e.collectionID))
    }

    function a(e) {
        return {
            sideNavCollapsed: !e.ui.sideNavExpanded,
            rightNavCollapsed: !e.ui.rightColumnExpanded,
            theatreModeEnabled: e.ui.theatreModeEnabled
        }
    }

    function r(e) {
        return {
            isLoggedIn: Object(c.d)(e)
        }
    }

    function o(e) {
        return {
            theme: e.ui.theme,
            persistentPlayerEnabled: e.ui.persistentPlayerEnabled
        }
    }
    var s, l = n(6),
        c = n(17),
        u = n(0),
        d = n(1),
        p = n(10),
        m = n(2),
        h = n(4),
        g = n(286),
        f = n(143),
        v = n(441),
        b = n(3),
        y = (n(529), function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    sideNavCollapsedByCSSBreakpoint: window.innerWidth < f.d
                }, t.resizeAnimationFrame = 0, t.renderMiniTitle = function() {
                    return d.createElement(b.U, {
                        padding: {
                            y: .5,
                            right: .5
                        },
                        flexDirection: b.J.Row,
                        display: b.H.Flex,
                        alignItems: b.c.Center,
                        justifyContent: b.T.Between,
                        flexWrap: b.K.NoWrap,
                        className: "persistent-player__title",
                        zIndex: b._38.Above,
                        "data-test-selector": "persistent-player-mini-title"
                    }, d.createElement(b.U, {
                        ellipsis: !0,
                        margin: {
                            x: 1
                        }
                    }, d.createElement(b._21, {
                        fontSize: b.L.Size5,
                        type: b._26.Span
                    }, t.props.options.miniPlayerTitle)), d.createElement(b.v, {
                        ariaLabel: Object(m.d)("Dismiss Mini Player", "PersistentPlayerMini"),
                        icon: b._9.Close,
                        overlay: !0,
                        onClick: t.props.onClickDismiss,
                        "data-test-selector": "persistent-player-mini-dismiss"
                    }))
                }, t.renderMiniHoverControls = function() {
                    var e = t.state.isPaused ? Object(m.d)("Play", "PersistentPlayerMini") : Object(m.d)("Pause", "PersistentPlayerMini");
                    return d.createElement(b.U, {
                        className: "persistent-player__hover-controls",
                        justifyContent: b.T.Center,
                        alignItems: b.c.Center,
                        display: b.H.Flex,
                        flexDirection: b.J.Row,
                        attachTop: !0,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        margin: {
                            top: 4
                        },
                        position: b._2.Absolute,
                        zIndex: b._38.Above,
                        "data-test-selector": "persistent-player-mini-hover"
                    }, t.renderMiniControl(b._9.MiniPlayerExpand, Object(m.d)("Expand Player", "PersistentPlayerMini"), "persistent-player-mini-expand", t.props.onClickExpand), d.createElement(b.U, {
                        margin: {
                            left: 2
                        }
                    }, t.renderMiniControl(t.state.isPaused ? b._9.MiniPlayerPlay : b._9.MiniPlayerPause, e, "persistent-player-mini-pause-play", t.togglePause)))
                }, t.renderMiniControl = function(e, t, n, i) {
                    return d.createElement("button", {
                        className: "persistent-player__control",
                        onClick: i,
                        "aria-label": t,
                        "data-test-selector": n
                    }, d.createElement(b._8, {
                        asset: e,
                        width: 30,
                        height: 30
                    }))
                }, t.renderMiniInterceptPointerView = function() {
                    return d.createElement(b.U, {
                        className: "persistent-player__intercept-view",
                        position: b._2.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        zIndex: b._38.Above,
                        "data-test-selector": "persistent-player-mini-cover"
                    })
                }, t.togglePause = function() {
                    t.setState(function(e) {
                        return {
                            shouldPause: !e.isPaused
                        }
                    })
                }, t.onPauseToggled = function(e) {
                    t.setState({
                        isPaused: e,
                        shouldPause: e
                    })
                }, t.collapseOnBreakpoint = function() {
                    var e = window.innerWidth;
                    e < f.d && !t.state.sideNavCollapsedByCSSBreakpoint ? t.setState({
                        sideNavCollapsedByCSSBreakpoint: !0
                    }) : e >= f.d && t.state.sideNavCollapsedByCSSBreakpoint && t.setState({
                        sideNavCollapsedByCSSBreakpoint: !1
                    }), t.resizeAnimationFrame = 0
                }, t.handleWindowResize = function() {
                    t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.collapseOnBreakpoint))
                }, t
            }
            return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                i(this.props.options.playerProps, e.options.playerProps) && this.setState({
                    shouldPause: !1
                })
            }, t.prototype.componentDidMount = function() {
                window.addEventListener("resize", this.handleWindowResize)
            }, t.prototype.componentWillUnmount = function() {
                window.removeEventListener("resize", this.handleWindowResize), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
            }, t.prototype.render = function() {
                var e = this.context.getScrollContent();
                if (!e) return null;
                var t, n = this.props.theatreModeEnabled && !this.props.mini,
                    i = h({
                        "persistent-player--theatre": n
                    }),
                    a = this.props.mainRef.getBoundingClientRect();
                if (n) t = {
                    position: "fixed",
                    left: 0,
                    top: 0,
                    maxHeight: "100vh",
                    height: "100%",
                    width: window.innerWidth < 820 || this.props.rightNavCollapsed ? "100%" : "calc(100% - " + g.a + ")",
                    zIndex: 3e3
                };
                else if (this.props.mini) t = {
                    position: "fixed",
                    width: "26rem",
                    height: "18.6rem",
                    left: a.left,
                    bottom: 0,
                    margin: "1rem",
                    zIndex: 1e3
                };
                else {
                    var r = this.props.contentRef.getBoundingClientRect(),
                        o = r.left - a.left,
                        s = a.right - r.right,
                        l = this.context.getRootScrollableOffsetHeight();
                    t = {
                        top: r.top - a.top + e.scrollTop,
                        left: o,
                        position: "absolute",
                        width: "100%",
                        maxWidth: "calc(100% - " + (o + s) + "px)",
                        maxHeight: "calc(100vh - 16rem)",
                        overflow: "hidden",
                        height: "auto",
                        marginTop: l ? "-" + l : void 0
                    }
                }
                return d.createElement("div", {
                    className: h("persistent-player", i),
                    style: t
                }, this.props.mini && this.renderMiniTitle(), d.createElement(b.j, null, d.createElement(v.c, u.__assign({}, this.props.options.playerProps, {
                    instanceRef: this.props.onVideoPlayerInstance,
                    miniModeEnabled: this.props.mini,
                    paused: this.state.shouldPause,
                    onPauseToggled: this.onPauseToggled
                }))), this.props.mini && this.renderMiniInterceptPointerView(), this.props.mini && this.renderMiniHoverControls())
            }, t.contextTypes = {
                getScrollContent: d.PropTypes.func,
                getRootScrollableOffsetHeight: d.PropTypes.func
            }, t
        }(d.Component)),
        k = Object(l.a)(a)(y);
    ! function(e) {
        e.CloseMini = "close", e.OpenMini = "open", e.ExpandPlayer = "expand", e.ContentChange = "content_change"
    }(s || (s = {}));
    var S;
    ! function(e) {
        e.Minimize = "minimize", e.Maximize = "maximize", e.UserMinimize = "user_minimize", e.UserMaximize = "user_maximize"
    }(S || (S = {}));
    var _, w = n(291),
        E = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.logger = m.i.withCategory("PersistentPlayerRoot"), n.trackMiniPlayerAction = function(e, t) {
                    n.videoPlayerComponent && n.videoPlayerComponent.trackMiniPlayerAction(e, t)
                }, n.setVideoPlayerRef = function(e) {
                    return n.videoPlayerComponent = e
                }, n.onClickExpand = function() {
                    if (n.state.options) {
                        if (n.state.overrides && n.state.overrides.onMiniPlayerExpand) return void n.state.overrides.onMiniPlayerExpand();
                        n.props.history.push(n.state.options.miniPlayerContentRoute), n.trackMiniPlayerAction(s.ExpandPlayer, S.UserMaximize)
                    }
                }, n.onClickDismiss = function() {
                    if (n.state.options) {
                        if (n.state.overrides && n.state.overrides.onMiniPlayerDismiss) return void n.state.overrides.onMiniPlayerDismiss();
                        n.destroyPlayer(), n.trackMiniPlayerAction(s.CloseMini, S.UserMinimize)
                    }
                }, n.onHistoryChange = function(e) {
                    var t = n.props.isLoggedIn,
                        i = Object(w.a)({
                            isLoggedIn: t,
                            location: e
                        });
                    i !== n.state.hideSideNav && n.setState({
                        hideSideNav: i
                    })
                };
                var i = t.isLoggedIn,
                    a = t.location;
                return n.state = {
                    mini: !1,
                    hideSideNav: Object(w.a)({
                        isLoggedIn: i,
                        location: a
                    })
                }, _ && n.logger.warn("attempting to create a second instance of the Persistent Player Root. There should only be one in <Root>, use <PersistentPlayerContent> instead."), _ = n, n
            }
            return u.__extends(t, e), t.prototype.componentDidMount = function() {
                this.historyUnlisten = m.n.history.listen(this.onHistoryChange)
            }, t.prototype.componentWillUnmount = function() {
                this.historyUnlisten && this.historyUnlisten()
            }, t.prototype.render = function() {
                return this.state.options && this.state.contentRef && this.props.mainRef ? d.createElement(k, {
                    options: this.state.options,
                    contentRef: this.state.contentRef,
                    mainRef: this.props.mainRef,
                    mini: this.state.mini,
                    hideSideNav: this.state.hideSideNav,
                    onClickExpand: this.onClickExpand,
                    onClickDismiss: this.onClickDismiss,
                    onVideoPlayerInstance: this.setVideoPlayerRef
                }) : null
            }, t.prototype.destroyPlayer = function(e) {
                this.setState({
                    mini: !1,
                    options: void 0,
                    overrides: void 0,
                    contentRef: void 0
                }, e)
            }, t.prototype.requestVideoContent = function(e) {
                var t = this,
                    n = function() {
                        t.setState({
                            contentRef: e.ref,
                            options: e.options,
                            overrides: e.overrides
                        }, e.onCompletion)
                    };
                i(this.state.options && this.state.options.playerProps, e.options.playerProps) ? (this.trackMiniPlayerAction(s.ContentChange, ""), this.destroyPlayer(n)) : n()
            }, t.prototype.transitionToMiniPlayer = function(e) {
                this.setState({
                    mini: !0
                }), e && this.trackMiniPlayerAction(s.OpenMini, e)
            }, t.prototype.transitionToAnchoredPlayer = function(e) {
                this.setState({
                    mini: !1
                }), e && this.trackMiniPlayerAction(s.CloseMini, e)
            }, t
        }(d.Component),
        C = Object(p.f)(E),
        N = Object(l.a)(r)(C),
        T = n(34),
        D = null,
        I = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.state = {
                    userHasDismissedContent: !1
                }, n.logger = m.i.withCategory("PersistentPlayer"), n.setDomRef = function(e) {
                    return n.domRef = e
                }, n.onMiniPlayerDismiss = function() {
                    n.transitionToAnchoredPlayer(S.UserMinimize), n.setState({
                        userHasDismissedContent: !0
                    })
                }, n.onMiniPlayerExpand = function() {
                    n.context.scrollToTop()
                }, n.getPersistentPlayerOverrides = function() {
                    return {
                        onMiniPlayerDismiss: n.onMiniPlayerDismiss,
                        onMiniPlayerExpand: n.onMiniPlayerExpand
                    }
                }, D && n.logger.error(new Error, "there should only ever be one <PersistentPlayer> rendered at a time. Verify that no other component above or below this in the tree has rendered one as well."), D = n, n
            }
            return u.__extends(t, e), t.prototype.componentDidMount = function() {
                var e = this;
                _ || this.logger.error(new Error, "No <PersistentPlayerRoot> found. Make sure it is mounted in the Root component"), this.unregister = this.context.registerReceiver(this), _.requestVideoContent({
                    ref: this.domRef,
                    options: this.props,
                    overrides: this.getPersistentPlayerOverrides(),
                    onCompletion: function() {
                        return e.transitionToAnchoredPlayer()
                    }
                })
            }, t.prototype.componentWillReceiveProps = function(e) {
                _.requestVideoContent({
                    ref: this.domRef,
                    options: e,
                    overrides: this.getPersistentPlayerOverrides()
                })
            }, t.prototype.componentWillUnmount = function() {
                var e = this;
                if (this.unregister(), this.props.disablePersistenceOnUnmount || this.state.userHasDismissedContent || !this.props.persistentPlayerEnabled) return _.destroyPlayer(), void(D = null);
                var t = this.props,
                    n = t.playerProps,
                    i = t.miniPlayerTitle,
                    a = t.miniPlayerContentRoute,
                    r = {
                        playerProps: {
                            channelLogin: n.channelLogin,
                            hostChannel: n.hostChannel,
                            collectionID: n.collectionID,
                            disableTheatreButton: n.disableTheatreButton,
                            nextVideoOffset: n.nextVideoOffset,
                            playerTypeOverride: n.playerTypeOverride,
                            vodID: n.vodID,
                            attachToWindow: n.attachToWindow
                        },
                        miniPlayerTitle: i,
                        miniPlayerContentRoute: a
                    };
                _.requestVideoContent({
                    ref: this.domRef,
                    options: r,
                    onCompletion: function() {
                        return e.transitionToMiniPlayer(S.Minimize)
                    }
                }), D = null
            }, t.prototype.render = function() {
                return d.createElement(b._17, {
                    background: b.m.Alt2,
                    position: b._2.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    attachRight: !0,
                    attachTop: !0,
                    refDelegate: this.setDomRef,
                    "data-target": "persistent-player-content",
                    className: Object(T.a)(this.props.theme)
                })
            }, t.prototype.transitionToMiniPlayer = function(e) {
                _.transitionToMiniPlayer(e)
            }, t.prototype.transitionToAnchoredPlayer = function(e) {
                _.transitionToAnchoredPlayer(e)
            }, t.prototype.isMini = function() {
                return _.state.mini
            }, t.prototype.checkVisible = function(e, t) {
                var n = this.context.getScrollContent();
                if (t && n) {
                    var i = this.domRef.getBoundingClientRect(),
                        a = n.getBoundingClientRect(),
                        r = i.top + i.height - a.top;
                    r <= 100 && this.props.persistentPlayerEnabled && !this.isMini() && !this.props.disablePersistenceOnScroll && !this.state.userHasDismissedContent && this.transitionToMiniPlayer(S.Minimize), r > 100 && (this.isMini() && this.transitionToAnchoredPlayer(S.Maximize), this.state.userHasDismissedContent && this.setState({
                        userHasDismissedContent: !1
                    }))
                }
            }, t.contextTypes = {
                registerReceiver: d.PropTypes.func,
                getScrollContent: d.PropTypes.func,
                scrollToTop: d.PropTypes.func
            }, t
        }(d.Component),
        O = Object(l.a)(o)(I);
    n.d(t, "b", function() {
        return N
    }), n.d(t, "a", function() {
        return O
    }), n.d(t, !1, function() {
        return S
    })
}, function(e, t, n) {
    "use strict";

    function i(e) {
        return e && "v" === e.charAt(0) ? e.substring(1) : e
    }
    t.a = i
}, function(e, t) {}, function(e, t) {}, , function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Core_Services_Spade_Video"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "id"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "video"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "broadcastType"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 94
        }
    };
    n.loc.source = {
        body: "query Core_Services_Spade_Video($id: ID!) {\n  video(id: $id) {\n    id\n    broadcastType\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "FollowButton_FollowEvent_User"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "id"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "isPartner"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "stream"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hosting"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 282
        }
    };
    n.loc.source = {
        body: "query FollowButton_FollowEvent_User($id: ID!) {\n  user(id: $id) {\n    id\n    isPartner\n    stream {\n      id\n      game {\n        id\n        name\n      }\n    }\n    hosting {\n      id\n      stream {\n        id\n        game {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "FollowButton_FollowUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "FollowUserInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "followUser"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "follow"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "disableNotifications"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 143
        }
    };
    n.loc.source = {
        body: "mutation FollowButton_FollowUser($input: FollowUserInput!) {\n  followUser(input: $input) {\n    follow {\n      disableNotifications\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "FollowButton_UnfollowUser"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UnfollowUserInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "unfollowUser"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "follow"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "disableNotifications"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 149
        }
    };
    n.loc.source = {
        body: "mutation FollowButton_UnfollowUser($input: UnfollowUserInput!) {\n  unfollowUser(input: $input) {\n    follow {\n      disableNotifications\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "FollowButton_User"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "login"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "self"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "follower"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "disableNotifications"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 204
        }
    };
    n.loc.source = {
        body: "query FollowButton_User($login: String!) {\n  user(login: $login) {\n    id\n    displayName\n    login\n    self {\n      follower {\n        disableNotifications\n      }\n    }\n  }\n  currentUser {\n    id\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "UserCard"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "id"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "user"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "bannerImageURL"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "displayName"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "description"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "profileImageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "width"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "70"
                                }
                            }],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "availability"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "activity"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "type"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Playing"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Streaming"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "stream"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "game"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "InlineFragment",
                                    typeCondition: {
                                        kind: "NamedType",
                                        name: {
                                            kind: "Name",
                                            value: "Watching"
                                        }
                                    },
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "user"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 525
        }
    };
    n.loc.source = {
        body: "query UserCard($id: ID!) {\n  user(id: $id) {\n    id\n    login\n    bannerImageURL\n    displayName\n    description\n    profileImageURL(width: 70)\n    availability\n    activity {\n      type\n      ... on Playing {\n        game {\n          id\n          name\n        }\n      }\n      ... on Streaming {\n        stream {\n          id\n          game {\n            id\n            name\n          }\n        }\n      }\n      ... on Watching {\n        user {\n          id\n          displayName\n          login\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "SideNav_FeaturedChannels"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "language"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "String"
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "featuredStreams"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "language"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "language"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "stream"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "broadcaster"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "profileImageURL"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                value: {
                                                    kind: "IntValue",
                                                    value: "70"
                                                }
                                            }],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "game"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 280
        }
    };
    n.loc.source = {
        body: "query SideNav_FeaturedChannels($language: String) {\n  featuredStreams(language: $language) {\n   \tstream {\n      id\n      broadcaster {\n        id\n        displayName\n        login\n        profileImageURL(width: 70)\n      }\n      game {\n        id\n        name\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "FollowedChannels_CurrentUser_FollowedVideos"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "videoTypes"
                    }
                },
                type: {
                    kind: "ListType",
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BroadcastType"
                            }
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "followedVideos"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "100"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "types"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoTypes"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "title"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "viewCount"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "publishedAt"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "previewThumbnailURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "126"
                                                        }
                                                    }, {
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "height"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "71"
                                                        }
                                                    }],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "owner"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "displayName"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "self"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "viewingHistory"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "position"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 507
        }
    };
    n.loc.source = {
        body: "query FollowedChannels_CurrentUser_FollowedVideos($videoTypes: [BroadcastType!]) {\n  currentUser {\n    id\n    followedVideos(first: 100, types: $videoTypes) {\n      edges {\n        node {\n          id\n          title\n          viewCount\n          publishedAt\n          previewThumbnailURL(width: 126, height: 71)\n          owner {\n            id\n            displayName\n          }\n          self {\n            viewingHistory {\n              position\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "FollowedChannels"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "limit"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Int"
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "cursor"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Cursor"
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "follows"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    }
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "after"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "cursor"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "profileImageURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "70"
                                                        }
                                                    }],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "stream"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "title"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "viewersCount"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "game"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "name"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "lastBroadcast"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "game"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "name"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "pageInfo"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "hasNextPage"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "followedLiveUsers"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "limit"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "nodes"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "profileImageURL"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "width"
                                                },
                                                value: {
                                                    kind: "IntValue",
                                                    value: "70"
                                                }
                                            }],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "stream"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "title"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "viewersCount"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "game"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "lastBroadcast"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "game"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 1020
        }
    };
    n.loc.source = {
        body: "query FollowedChannels($limit: Int, $cursor: Cursor) {\n  currentUser {\n    id\n    follows(first: $limit, after: $cursor) {\n      edges {\n        cursor\n        node {\n          id\n          displayName\n          login\n          profileImageURL(width: 70)\n          stream {\n            id\n            title\n            viewersCount\n            game {\n              id\n              name\n            }\n          }\n          lastBroadcast {\n            id\n            game {\n              id\n              name\n            }\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n      }\n    }\n    followedLiveUsers(first: $limit) {\n      nodes {\n        id\n        displayName\n        login\n        profileImageURL(width: 70)\n        stream {\n          id\n          title\n          viewersCount\n          game {\n            id\n            name\n          }\n          type\n        }\n        lastBroadcast {\n          id\n          game {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "RecommendedChannels"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "first"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Int"
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "recID"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }, {
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "language"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "recommendations"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "liveRecommendations"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            }
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "recRequestID"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "recID"
                                            }
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "language"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "language"
                                            }
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "generationID"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "responseID"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "nodes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "broadcaster"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "displayName"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "login"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "profileImageURL"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                value: {
                                                                    kind: "IntValue",
                                                                    value: "70"
                                                                }
                                                            }],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "game"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "name"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 502
        }
    };
    n.loc.source = {
        body: "query RecommendedChannels($first: Int, $recID: String!, $language: String!) {\n  currentUser {\n    id\n    recommendations {\n      liveRecommendations (first: $first, recRequestID: $recID, language: $language) {\n        generationID\n        responseID\n        nodes {\n          id\n          broadcaster {\n            id\n            displayName\n            login\n            profileImageURL(width: 70)\n          }\n          game {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "RecommendedFriend_CreateFriendRequest"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "CreateFriendRequestInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "createFriendRequest"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 155
        }
    };
    n.loc.source = {
        body: "mutation RecommendedFriend_CreateFriendRequest($input: CreateFriendRequestInput!) {\n  createFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "RecommendedFriend_DismissFriendRecommendation"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "DismissFriendRecommendationInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "dismissFriendRecommendation"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 179
        }
    };
    n.loc.source = {
        body: "mutation RecommendedFriend_DismissFriendRecommendation($input: DismissFriendRecommendationInput!) {\n  dismissFriendRecommendation(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "RecommendedFriends"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "recommendations"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "friends"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "user"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "displayName"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "login"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "profileImageURL"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "width"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "70"
                                                        }
                                                    }],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 221
        }
    };
    n.loc.source = {
        body: "query RecommendedFriends {\n  currentUser {\n    id\n    recommendations {\n      friends {\n        user {\n          id\n          displayName\n          login\n          profileImageURL(width: 70)\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "RecommendedFriend_CancelFriendRequest"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "CancelFriendRequestInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "cancelFriendRequest"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 155
        }
    };
    n.loc.source = {
        body: "mutation RecommendedFriend_CancelFriendRequest($input: CancelFriendRequestInput!) {\n  cancelFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "SearchFriendResult_CreateFriendRequest"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "CreateFriendRequestInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "createFriendRequest"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 156
        }
    };
    n.loc.source = {
        body: "mutation SearchFriendResult_CreateFriendRequest($input: CreateFriendRequestInput!) {\n  createFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "Threads_MarkAllWhispersAsRead"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UpdateAllWhisperThreadsInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "updateAllWhisperThreads"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "count"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 139
        }
    };
    n.loc.source = {
        body: "mutation Threads_MarkAllWhispersAsRead($input: UpdateAllWhisperThreadsInput!) {\n  updateAllWhisperThreads(input: $input) {\n    count\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "mutation",
            name: {
                kind: "Name",
                value: "Thread_ArchiveThread"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "input"
                    }
                },
                type: {
                    kind: "NonNullType",
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "UpdateWhisperThreadInput"
                        }
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "updateWhisperThread"
                    },
                    arguments: [{
                        kind: "Argument",
                        name: {
                            kind: "Name",
                            value: "input"
                        },
                        value: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "thread"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "isArchived"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 157
        }
    };
    n.loc.source = {
        body: "mutation Thread_ArchiveThread($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      isArchived\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, function(e, t) {}, function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Whispers_Whispers_UserWhisperThreads"
            },
            variableDefinitions: [{
                kind: "VariableDefinition",
                variable: {
                    kind: "Variable",
                    name: {
                        kind: "Name",
                        value: "cursor"
                    }
                },
                type: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Cursor"
                    }
                },
                defaultValue: null
            }],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "emoteSets"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: null
                                }, {
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "emotes"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "token"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "whisperThreads"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "10"
                                }
                            }, {
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "after"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "cursor"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    alias: null,
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: null
                                        }, {
                                            kind: "Field",
                                            alias: null,
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "participants"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "chatColor"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "displayName"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "profileImageURL"
                                                            },
                                                            arguments: [{
                                                                kind: "Argument",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "width"
                                                                },
                                                                value: {
                                                                    kind: "IntValue",
                                                                    value: "70"
                                                                }
                                                            }],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "login"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "spamInfo"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "lastMarkedNotSpamAt"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "likelihood"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "messages"
                                                    },
                                                    arguments: [{
                                                        kind: "Argument",
                                                        name: {
                                                            kind: "Name",
                                                            value: "first"
                                                        },
                                                        value: {
                                                            kind: "IntValue",
                                                            value: "20"
                                                        }
                                                    }],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "edges"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "cursor"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: null
                                                                }, {
                                                                    kind: "Field",
                                                                    alias: null,
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "node"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "sentAt"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "editedAt"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "deletedAt"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: null
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "from"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [{
                                                                                    kind: "Field",
                                                                                    alias: null,
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "id"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: [],
                                                                                    selectionSet: null
                                                                                }]
                                                                            }
                                                                        }, {
                                                                            kind: "Field",
                                                                            alias: null,
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "content"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [{
                                                                                    kind: "Field",
                                                                                    alias: null,
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "content"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: [],
                                                                                    selectionSet: null
                                                                                }, {
                                                                                    kind: "Field",
                                                                                    alias: null,
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "emotes"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: [],
                                                                                    selectionSet: {
                                                                                        kind: "SelectionSet",
                                                                                        selections: [{
                                                                                            kind: "Field",
                                                                                            alias: null,
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "id"
                                                                                            },
                                                                                            arguments: [],
                                                                                            directives: [],
                                                                                            selectionSet: null
                                                                                        }, {
                                                                                            kind: "Field",
                                                                                            alias: null,
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "emoteID"
                                                                                            },
                                                                                            arguments: [],
                                                                                            directives: [],
                                                                                            selectionSet: null
                                                                                        }, {
                                                                                            kind: "Field",
                                                                                            alias: null,
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "setID"
                                                                                            },
                                                                                            arguments: [],
                                                                                            directives: [],
                                                                                            selectionSet: null
                                                                                        }, {
                                                                                            kind: "Field",
                                                                                            alias: null,
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "from"
                                                                                            },
                                                                                            arguments: [],
                                                                                            directives: [],
                                                                                            selectionSet: null
                                                                                        }, {
                                                                                            kind: "Field",
                                                                                            alias: null,
                                                                                            name: {
                                                                                                kind: "Name",
                                                                                                value: "to"
                                                                                            },
                                                                                            arguments: [],
                                                                                            directives: [],
                                                                                            selectionSet: null
                                                                                        }]
                                                                                    }
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "userLastMessageRead"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }, {
                                                            kind: "Field",
                                                            alias: null,
                                                            name: {
                                                                kind: "Name",
                                                                value: "sentAt"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: null
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "isMuted"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "isArchived"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }, {
                                                    kind: "Field",
                                                    alias: null,
                                                    name: {
                                                        kind: "Name",
                                                        value: "unreadMessagesCount"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: null
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 1232
        }
    };
    n.loc.source = {
        body: "query Whispers_Whispers_UserWhisperThreads($cursor: Cursor) {\n  currentUser {\n    id\n    login\n    emoteSets {\n      id\n      emotes {\n        id\n        token\n      }\n    }\n   \twhisperThreads(first: 10, after: $cursor) {\n      edges {\n        cursor\n        node {\n          id\n          participants {\n            id\n            chatColor\n            displayName\n            profileImageURL(width: 70)\n            login\n          }\n          spamInfo {\n            lastMarkedNotSpamAt\n            likelihood\n          }\n          messages(first: 20) {\n            edges {\n              cursor\n              node {\n                id\n                sentAt\n                editedAt\n                deletedAt\n                from {\n                  id\n                }\n                content {\n                  content\n                  emotes {\n                    id\n                    emoteID\n                    setID\n                    from\n                    to\n                  }\n                }\n              }\n            }\n          }\n          userLastMessageRead {\n            id\n            sentAt\n          }\n          isMuted\n          isArchived\n          unreadMessagesCount\n        }\n      }\n    }\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, , function(e, t, n) {
    n(148), n(185), e.exports = n(681)
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, n) {
    "use strict";

    function i(e) {
        return Object(E.bindActionCreators)({
            trackingSet: C.b
        }, e)
    }

    function a(e) {
        return "mousemove" === e.type
    }

    function r(e) {
        return {
            isLoggedIn: Object(m.d)(e),
            firstPageLoaded: e.session.firstPageLoaded
        }
    }

    function o(e) {
        return {
            firstPageLoaded: e.session.firstPageLoaded,
            isLoggedIn: Object(m.d)(e),
            theme: Object(f.a)(e)
        }
    }

    function s() {
        d.n.mount(c.createElement(u.c, {
            history: d.n.history
        }, c.createElement(te, null)), document.getElementById("root"))
    }

    function l() {
        var e = d.n.store.getState();
        !ie && Object(m.e)(e) && (ie = !0, ne(), d.a.optimizedBuild ? s() : setTimeout(s, 500))
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var c = n(1),
        u = n(22),
        d = n(2),
        p = n(32),
        m = n(17),
        h = n(234),
        g = n(6),
        f = n(52),
        v = n(0),
        b = n(10),
        y = n(111),
        k = n(112),
        S = n(16),
        _ = n(34),
        w = n(110),
        E = n(9),
        C = n(124),
        N = n(20),
        T = n(7),
        D = n(378),
        I = n(696),
        O = "https://www.googletagservices.com/tag/js/gpt.js",
        L = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.logger = d.n.logger.withCategory("ad-manager"), t.injectGoogletag = function(e) {
                    if (0 === t.containerRef.children.length) {
                        t.isInjected = !0;
                        var n = document.createElement("script");
                        n.async = !0, n.src = O, t.containerRef.appendChild(n), w.a.initialize(D.i);
                        var i = N.parse(window.location.search).campaign || "";
                        i && t.logger.debug("Setting campaign", i), w.a.setAppWideTracking("campaign", i), w.a.setAppWideTracking("server", d.a.buildType === S.a.Production ? "production" : "dev"), w.a.setAppWideTracking("salt", "true"), w.a.setAppWideTracking("kuid", window.Krux && window.Krux.user || ""), w.a.setAppWideTracking("loggedin", e.data.currentUser ? "true" : "false"), e.trackingSet(), t.logger.debug("Tracking is set")
                    }
                }, t.setContainerRef = function(e) {
                    return t.containerRef = e
                }, t
            }
            return v.__extends(t, e), t.prototype.componentDidMount = function() {
                this.shouldInjectGoogletag(this.props) && this.injectGoogletag(this.props)
            }, t.prototype.componentWillReceiveProps = function(e) {
                this.shouldInjectGoogletag(e) && this.injectGoogletag(e)
            }, t.prototype.shouldComponentUpdate = function() {
                return !1
            }, t.prototype.render = function() {
                return c.createElement("div", {
                    ref: this.setContainerRef
                })
            }, t.prototype.shouldInjectGoogletag = function(e) {
                var t = !e.data.loading && !e.data.error,
                    n = e.data.currentUser && (e.data.currentUser.hasTurbo || e.data.currentUser.hasPrime);
                return !this.isInjected && t && !n
            }, t = v.__decorate([Object(T.a)(I)], t)
        }(c.Component),
        x = L,
        R = Object(g.a)(null, i)(x),
        F = n(235),
        U = n(5),
        P = n(262),
        M = n(242),
        A = n(146),
        j = n(393),
        B = n(249),
        H = n(132),
        V = 6e5,
        z = ["mousemove", "keydown", "wheel", "DOMMouseScroll", "mouseWheel", "mousedown", "touchstart", "touchmove", "MSPointerDown", "MSPointerMove"],
        W = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isIdle: !1,
                    oldDate: +new Date,
                    lastActiveTimestamp: +new Date,
                    timeoutID: null,
                    lastPageX: null,
                    lastPageY: null
                }, t.onActiveEvent = function(e) {
                    var n = null,
                        i = null;
                    if (a(e)) {
                        if (n = e.pageX, i = e.pageY, n === t.state.lastPageX && i === t.state.lastPageY) return;
                        if (+new Date - t.state.oldDate < 200) return
                    }
                    t.state.timeoutID && clearTimeout(t.state.timeoutID), t.state.isIdle && Object(H.b)(), t.setStateOnActive(n, i)
                }, t.setStateOnActive = function(e, n) {
                    t.setState({
                        isIdle: !1,
                        lastActiveTimestamp: +new Date,
                        timeoutID: setTimeout(t.setIdleState, V),
                        lastPageX: e,
                        lastPageY: n
                    })
                }, t.setIdleState = function() {
                    t.setState({
                        isIdle: !0
                    }), Object(H.d)()
                }, t
            }
            return v.__extends(t, e), t.prototype.componentWillMount = function() {
                var e = this;
                z.forEach(function(t) {
                    document.addEventListener(t, e.onActiveEvent)
                }), Object(H.b)(), this.setStateOnActive(null, null)
            }, t.prototype.componentWillUnmount = function() {
                var e = this;
                this.state.timeoutID && clearTimeout(this.state.timeoutID), z.forEach(function(t) {
                    document.removeEventListener(t, e.onActiveEvent)
                })
            }, t.prototype.render = function() {
                return null
            }, t
        }(c.Component),
        q = W,
        G = n(147),
        Q = n(446),
        K = Object(g.a)(r)(Q.a),
        $ = n(3),
        Y = (n(798), y.a.wrap(function() {
            return n.e(37).then(n.bind(null, 2080))
        }, "DashboardRoot")),
        J = y.a.wrap(function() {
            return n.e(38).then(n.bind(null, 2082))
        }, "TeamsDashboardRoot"),
        X = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.onHistoryChange = function(e, n) {
                    "REPLACE" !== n && (t.props.rootLatencyTracker.reset(), w.a.clearAppWideTracking("game"), w.a.clearAppWideTracking("chan"), w.a.clearAppWideTracking("pagetype"))
                }, t
            }
            return v.__extends(t, e), t.prototype.componentWillMount = function() {
                d.n.setPageTitle()
            }, t.prototype.componentDidMount = function() {
                this.props.history.listen(this.onHistoryChange), this.props.latencyTracking.reportInteractive();
                var e = Object(_.c)(this.props.theme);
                e && document.body.classList.add(e)
            }, t.prototype.componentDidUpdate = function(e) {
                if (this.props.location !== e.location && window.scrollTo(0, 0), this.props.latencyTracking.reportInteractive(), e.theme !== this.props.theme) {
                    var t = Object(_.c)(e.theme),
                        n = Object(_.c)(this.props.theme);
                    t && document.body.classList.remove(t), n && document.body.classList.add(n)
                }
            }, t.prototype.render = function() {
                return c.createElement("div", null, c.createElement($.U, {
                    className: "twilight-root",
                    position: $._2.Absolute,
                    overflow: $.Y.Hidden,
                    attachRight: !0,
                    attachBottom: !0,
                    attachLeft: !0
                }, c.createElement(R, null), c.createElement(F.a, null), c.createElement(j.b, null), c.createElement(b.e, null, c.createElement(b.d, {
                    path: "/:channelName/dashboard/:pageName?",
                    component: Y
                }), c.createElement(b.d, {
                    path: "/:channelName/:pageName(manager_v2)",
                    component: Y
                }), d.a.buildType !== S.a.Production && c.createElement(b.d, {
                    path: "/teams/:teamName/dashboard/:pageName?",
                    component: J
                }), c.createElement(b.d, {
                    path: "/",
                    component: K
                })), c.createElement(G.b, null), c.createElement(A.b, null), c.createElement(k.a, null), this.props.firstPageLoaded && c.createElement(M.a, null), this.props.firstPageLoaded && c.createElement(B.a, {
                    history: this.props.history
                }), this.props.isLoggedIn && c.createElement(q, null), d.n.benchmarking.toolsEnabled && c.createElement(U.b, {
                    benchmarking: d.n.benchmarking
                }), this.props.firstPageLoaded && c.createElement(P.b, {
                    history: this.props.history
                })))
            }, t
        }(c.Component),
        Z = Object(U.c)("Root", {
            isRoot: !0
        })(X),
        ee = Object(g.a)(o)(Z),
        te = Object(u.e)(ee);
    d.a.optimizedBuild || n.e(1).then(n.bind(null, 2083)).then(function(e) {
        return window.Perf = e
    });
    var ne, ie = !1;
    ne = d.n.store.getReduxStore().subscribe(l), Object(h.a)(), d.n.store.dispatch(Object(p.e)())
}, , , , , , , , , , , , , , , function(e, t) {
    var n = {
        kind: "Document",
        definitions: [{
            kind: "OperationDefinition",
            operation: "query",
            name: {
                kind: "Name",
                value: "Ads_Components_AdManager_User"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: "SelectionSet",
                selections: [{
                    kind: "Field",
                    alias: null,
                    name: {
                        kind: "Name",
                        value: "currentUser"
                    },
                    arguments: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasPrime"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }, {
                            kind: "Field",
                            alias: null,
                            name: {
                                kind: "Name",
                                value: "hasTurbo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: null
                        }]
                    }
                }]
            }
        }],
        loc: {
            start: 0,
            end: 93
        }
    };
    n.loc.source = {
        body: "query Ads_Components_AdManager_User {\n  currentUser {\n    id\n    hasPrime\n    hasTurbo\n  }\n}\n",
        name: "GraphQL request",
        locationOffset: {
            line: 1,
            column: 1
        }
    };
    e.exports = n
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t) {}], [538]);
//# sourceMappingURL=core-0d166910ddee695ecaff1f8a2a645657.js.map