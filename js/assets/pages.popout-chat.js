webpackJsonp([36], {
    "+5Qw": function(e, t) {},
    "+V/3": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        });
        var i = "subscribe_to_channel",
            a = "turbo",
            r = "visit_url",
            s = "broadcaster"
    },
    "+Znq": function(e, t, n) {
        "use strict";
        var i = n("jetF");
        n.d(t, "a", function() {
            return i.a
        })
    },
    "+gWs": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 264
            }
        };
        n.loc.source = {
            body: "query WhisperThread($id: ID!) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nunreadMessagesCount\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+xsx": function(e, t) {},
    "/LBW": function(e, t, n) {
        "use strict";
        t.h = function(e) {
            var t = {
                action_name: e.actionName,
                action_type: "click",
                client_time: (new Date).getTime(),
                displayed_balance: e.displayedBalance,
                emote_level: e.emoteLevel,
                emote_type: e.emoteType,
                bits_location: e.location || s.ChatTooltip
            };
            a.m.track(r.SpadeEventType.BitsCardInteraction, t)
        }, n.d(t, "b", function() {
            return s
        }), n.d(t, "a", function() {
            return o
        }), t.d = function(e) {
            return e && l[e] ? l[e] : (a.i.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), o.Buy100)
        }, t.e = function(e) {
            var t = {
                channel: e.channel,
                channel_id: e.channelID,
                available: e.available,
                host: "twitch.tv"
            };
            a.m.track(r.SpadeEventType.BitsAdsAvailability, t)
        }, t.f = function(e) {
            var t = {
                distinct_id: a.n.session.deviceID,
                host: "twitch.tv",
                request_id: e.requestID,
                campaign_id: e.campaignID,
                adblock: e.adblock
            };
            a.m.track(r.SpadeEventType.BitsAdsImpression, t)
        }, n.d(t, "c", function() {
            return i
        }), t.g = function(e) {
            var t = a.m.getLastPageview(),
                n = {
                    location: t ? t.location || "" : "",
                    ad_returned: null,
                    campaign_id: e.campaignID,
                    distinct_id: a.n.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    request_method: e.requestMethod
                };
            a.m.track(r.SpadeEventType.BitsAdsRequest, n)
        };
        var i, a = n("6sO2"),
            r = n("vH/s"),
            s = {
                ChatTooltip: "card",
                GetBitsButton: "get_bits_button",
                BitsLandingPage: "bits_landing_page"
            },
            o = {
                BuyMain: "buy_main",
                Buy100: "buy_100",
                Buy500: "buy_500",
                Buy1000: "buy_1000",
                Buy1500: "buy_1500",
                Buy5000: "buy_5000",
                Buy10000: "buy_10000",
                Buy25000: "buy_25000",
                CloseCard: "menu_close",
                OpenCard: "menu_open",
                PreviewEmote: "emote_preview",
                WatchAd: "watch_ad",
                WatchAnotherAd: "watch_another_ad"
            },
            l = {
                100: o.Buy100,
                500: o.Buy500,
                1e3: o.Buy1000,
                1500: o.Buy1500,
                5e3: o.Buy5000,
                1e4: o.Buy10000,
                25e3: o.Buy25000
            };
        (i || (i = {})).ShowAdButton = "show_ad_button"
    },
    "/UH7": function(e, t, n) {
        "use strict";

        function i(e) {
            if (0 === e.openedIDs.length) return 0;
            for (var t = 0, n = 0, i = e.openedIDs; n < i.length; n++) {
                var a = i[n],
                    r = e.byID[a];
                r.hidden || (t += r.collapsed ? m : h)
            }
            return t
        }

        function a(e) {
            var t = e.openedIDs.slice(),
                n = t.pop();
            return n && e.focusedID === n && t.length > 0 && (t.pop(), t.push(n)), u(e, function(e) {
                return e.openedIDs
            }, function() {
                return t
            })
        }

        function r(e, t) {
            var n = e.orderedIDs.filter(function(t) {
                return !e.openedIDs.includes(t)
            });
            return n.length > 0 ? s(e, n[0], t) : e
        }

        function s(e, t, n) {
            var r = n - i(e),
                s = d.__assign({}, e);
            return s.openedIDs.includes(t) || (r < h && (s = a(s)), s = u(s, function(e) {
                return e.openedIDs
            }, function(e) {
                return e.push(t), e
            })), s
        }

        function o(e, t, n) {
            if (!e.byID[t]) return e;
            var r = u(e, function(e) {
                return e.byID
            }, function(e) {
                return e[t].collapsed = !1, e
            });
            r.focusedID = t;
            return i(e) > n && (r = a(r)), r
        }
        var l = n("2KeS"),
            c = n("6sO2"),
            d = n("TToO"),
            u = n("LIeg"),
            p = n("uXDg"),
            m = 234,
            h = 310,
            g = n("5k1t");
        t.b = function(e, t) {
            return e.whispers ? e.whispers.display.byID[t] : null
        }, t.a = function(e, t) {
            return e.whispers.notifications.byThreadID[t] || []
        };
        var f = Object(l.combineReducers)({
            display: function(e, t) {
                switch (void 0 === e && (e = {
                    byID: {},
                    orderedIDs: [],
                    openedIDs: [],
                    focusedID: ""
                }), t.type) {
                    case p.f:
                        var n = (c = d.__assign({}, e)).byID[t.data.threadID],
                            l = c.openedIDs.includes(t.data.threadID);
                        return n || (c = u(c, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.push(t.data.threadID), e
                        }), c = u(c, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.data.threadID] = t.data, e
                        })), c.openedIDs.includes(t.data.threadID) && !c.byID[t.data.threadID].hidden || (c.byID[t.data.threadID].hidden = t.data.hidden), t.data.ignoreCollapseIfOpen || t.data.collapsed || (c.focusedID = t.data.threadID), c = s(c, t.data.threadID, t.contentWidth), (!l || l && !t.data.ignoreCollapseIfOpen) && (t.data.collapsed || (c = o(c, t.data.threadID, t.contentWidth))), c;
                    case p.b:
                        if (!e.byID[t.threadID]) return e;
                        var c = u(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return delete e[t.threadID], e
                        });
                        return c = u(c, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), c = u(c, function(e) {
                            return e.openedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), e.focusedID === t.threadID && (c.focusedID = c.openedIDs[0]), r(c, t.contentWidth);
                    case p.c:
                        return e.byID[t.threadID] ? (e.focusedID === t.threadID && (e.focusedID = ""), u(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.threadID].collapsed = !0, e
                        })) : e;
                    case p.d:
                        return o(e, t.threadID, t.contentWidth);
                    case p.e:
                        return u(e, function(e) {
                            return e.focusedID
                        }, function() {
                            return t.threadID
                        });
                    case p.g:
                        return u(e, function(e) {
                            return e.focusedID
                        }, function(e) {
                            return e === t.threadID ? "" : e
                        });
                    case p.a:
                        var m = i(e);
                        if (m > t.contentWidth) {
                            if (e.openedIDs.length <= 1) return e;
                            for (var g = d.__assign({}, e); m > t.contentWidth && g.openedIDs.length > 1;) m = i(g = a(g));
                            return g
                        }
                        if (t.contentWidth - m >= h) {
                            var f = Math.floor((t.contentWidth - m) / h),
                                v = Math.min(f, e.orderedIDs.length - e.openedIDs.length);
                            if (0 === v) return e;
                            g = d.__assign({}, e);
                            for (var b = 0; b < v; b++)
                                if ((g = r(g, t.contentWidth)).openedIDs.length > 1)
                                    for (var k = g.openedIDs, y = k.length, S = 0, C = g.orderedIDs; S < C.length; S++) {
                                        var _ = C[S];
                                        if (k[y - 1] === _) {
                                            var E = k.splice(y - 2, 1);
                                            k.push(E[0]);
                                            break
                                        }
                                        if (k[y - 2] === _) break
                                    }
                                return g
                        }
                        return e;
                    default:
                        return e
                }
            },
            notifications: function(e, t) {
                switch (void 0 === e && (e = {
                    byThreadID: {}
                }), t.type) {
                    case g.a:
                        return e.byThreadID[t.threadID] ? u(e, function(e) {
                            return e.byThreadID[t.threadID]
                        }, function(e) {
                            return [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }].concat(e)
                        }) : u(e, function(e) {
                            return e.byThreadID
                        }, function(e) {
                            return d.__assign((n = {}, n[t.threadID] = [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }], n), e);
                            var n
                        });
                    default:
                        return e
                }
            }
        });
        c.n.store.registerReducer("whispers", f)
    },
    "/eFD": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatSettings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "blockLinks"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "rules"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "chatDelayMs"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\nchatDelayMs\n}\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0ImK": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "embeddedEmote"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "EmbeddedEmote"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "emoteID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "from"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "to"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 65
            }
        };
        n.loc.source = {
            body: "fragment embeddedEmote on EmbeddedEmote {\nemoteID\nsetID\nfrom\nto\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0Yyt": function(e, t) {},
    "11M/": function(e, t, n) {
        "use strict";

        function i(e) {
            return u.__awaiter(this, void 0, void 0, function() {
                var t, n;
                return u.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, m.n.apollo.client.query({
                                query: ge,
                                variables: {
                                    login: e
                                }
                            })];
                        case 2:
                            return t = i.sent(), [3, 4];
                        case 3:
                            return n = i.sent(), m.i.warn(n, "Failed to fetch user targeted by chat command.", {
                                userLogin: e
                            }), [3, 4];
                        case 4:
                            return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                    }
                })
            })
        }

        function a(e, t) {
            var n = {
                raid_creator_id: Number(t.creatorID),
                raid_source_id: Number(t.sourceChannelID),
                raid_target_id: Number(t.targetChannelID),
                raid_id: t.id
            };
            m.m.track(e, n)
        }

        function r(e) {
            return e.currentUserID !== e.channelID || !Object(rt.a)()
        }

        function s(e, t, n, i, a, r, s) {
            return void 0 === s && (s = !1), u.__assign({}, Object(Mt.a)(t, n, i, a, r, s), {
                type: e,
                id: n.id || Object(Tt.a)(n.username)
            })
        }

        function o(e, t, n, i, a, r, s, o) {
            var l = r && s ? Object(Mt.a)(r, s, j.a, !1, o) : function(e) {
                return {
                    user: {
                        userDisplayName: e,
                        userLogin: e,
                        userID: null,
                        userType: It.a.User,
                        color: void 0,
                        isIntl: !1
                    }
                }
            }(t);
            return u.__assign({}, l, {
                type: bt.a.Resubscription,
                id: Object(Tt.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                months: i,
                tier: a
            })
        }

        function l() {
            return Object(m.d)("Unable to unban user", "UnbanUserMutation")
        }

        function c() {
            return {
                raid_error_self: Object(m.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                raid_error_forbidden: Object(m.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                raid_error_already_raiding: Object(m.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                raid_error_too_many_viewers_to_raid: Object(m.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                raid_error_unexpected: Object(m.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                unraid_error_unexpected: Object(m.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                unraid_error_no_active_raid: Object(m.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                raid_notice_restricted_chat: Object(m.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                raid_notice_mature: Object(m.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                raid_notice_owner: Object(m.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                    unraidCommand: "/unraid"
                }, "RaidNoticeOwnerMessage")
            }
        }

        function d(e) {
            return e.type === bt.a.Post || e.type === bt.a.PostWithMention || e.type === bt.a.Action
        }
        var u = n("TToO"),
            p = n("LIeg"),
            m = n("6sO2"),
            h = n("vh75"),
            g = n("UzRK"),
            f = n("VsL1");
        m.n.store.registerReducer("chat", function(e, t) {
            switch (void 0 === e && (e = function() {
                var e = Object(f.a)();
                return u.__assign({}, e, {
                    commandHandlers: {},
                    emoteSets: [],
                    followerDuration: g.a,
                    followerMode: !1,
                    isHidden: !1,
                    messages: {},
                    slowMode: !1,
                    subsOnlyMode: !1
                })
            }()), t.type) {
                case h.b:
                    return u.__assign({}, e, {
                        isHidden: !0
                    });
                case h.c:
                    return u.__assign({}, e, {
                        emoteSets: [],
                        messages: {}
                    });
                case h.d:
                    return u.__assign({}, e, {
                        isHidden: !1
                    });
                case h.e:
                    return u.__assign({}, e, {
                        emoteSets: t.emoteSets
                    });
                case h.f:
                    return u.__assign({}, e, {
                        followerMode: !1
                    });
                case h.g:
                    return u.__assign({}, e, {
                        followerDuration: t.duration
                    });
                case h.h:
                    return u.__assign({}, e, {
                        lastUsedFollowerDurations: u.__assign({}, e.lastUsedFollowerDurations, (n = {}, n[t.channelLogin] = t.duration, n))
                    });
                case h.i:
                    return u.__assign({}, e, {
                        followerMode: !0
                    });
                case h.j:
                    return p(e, function(e) {
                        return e.messages
                    }, function(e) {
                        return e[t.channel] = t.messages, e
                    });
                case h.k:
                    return u.__assign({}, e, {
                        showModIcons: !1
                    });
                case h.l:
                    return u.__assign({}, e, {
                        showModIcons: !0
                    });
                case h.n:
                    return u.__assign({}, e, {
                        slowMode: !1
                    });
                case h.o:
                    return u.__assign({}, e, {
                        slowMode: !0
                    });
                case h.p:
                    return u.__assign({}, e, {
                        subsOnlyMode: !1
                    });
                case h.q:
                    return u.__assign({}, e, {
                        subsOnlyMode: !0
                    });
                case h.r:
                    return u.__assign({}, e, {
                        showTimestamps: !1
                    });
                case h.s:
                    return u.__assign({}, e, {
                        showTimestamps: !0
                    });
                case h.a:
                    return p(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return e[t.command] = t.handler, e
                    });
                case h.m:
                    return p(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return delete e[t.command], e
                    });
                default:
                    return e
            }
            var n
        });
        var v = n("ass3");
        m.n.store.registerReducer("viewerCard", function(e, t) {
            switch (void 0 === e && (e = {
                viewerCardOptions: null
            }), t.type) {
                case v.a:
                    return u.__assign({}, e, {
                        viewerCardOptions: null
                    });
                case v.b:
                    return t.viewerCardOptions ? u.__assign({}, e, {
                        viewerCardOptions: u.__assign({}, t.viewerCardOptions)
                    }) : e;
                default:
                    return e
            }
        });
        var b, k = n("RH2O"),
            y = n("Aj/L"),
            S = n("U7vG"),
            C = n("7vx8"),
            _ = n("BhyV"),
            E = n("2KeS"),
            N = n("NXs7"),
            w = n("Ldv2"),
            D = n("NikC"),
            T = n("ZVME"),
            I = n("0nzt"),
            O = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.props.addCommand(this.props.command, this.props.handler)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command), this.props.addCommand(e.command, e.handler))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.removeCommand(this.props.command)
                }, t.prototype.render = function() {
                    return null
                }, t
            }(S.PureComponent),
            M = Object(k.a)(null, function(e) {
                return Object(E.bindActionCreators)({
                    addCommand: h.t,
                    removeCommand: h.J
                }, e)
            })(O),
            x = n("J4ib"),
            U = n("Y5T0");
        ! function(e) {
            e.Recent = "RECENT", e.Top = "TOP"
        }(b || (b = {}));
        var R, F, L = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.unpinRecentCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return u.__awaiter(t, void 0, void 0, function() {
                                    return u.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: b.Recent
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(x.d)("Recent cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t.resetTopCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return u.__awaiter(t, void 0, void 0, function() {
                                    return u.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: b.Top
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(x.d)("Top cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return S.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, S.createElement(M, {
                        command: "unpin",
                        handler: this.unpinRecentCheer
                    }), S.createElement(M, {
                        command: "reset",
                        handler: this.resetTopCheer
                    }))
                }, t = u.__decorate([Object(C.a)(U, {
                    name: "dismissPinnedCheer"
                })], t)
            }(S.Component),
            j = n("iydZ"),
            A = n("bkpq"),
            B = n("HW6M"),
            P = n("RweG"),
            V = n("C8Io"),
            H = n("oIkB"),
            W = n("HZww"),
            G = n("vH/s"),
            q = n("iMOk"),
            z = n("Odds"),
            Q = (n("y0i/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        formInputValue: "",
                        sharing: !1
                    }, t.hasUnmounted = !1, t.handleShareClick = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            return u.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            sharing: !0
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, , 3, 4]), [4, this.props.onShare(this.state.formInputValue)];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return this.hasUnmounted || this.setState({
                                            sharing: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.onInputChange = function(e) {
                        t.setState({
                            formInputValue: e.currentTarget.value
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.hasUnmounted = !1
                }, t.prototype.componentWillUnmount = function() {
                    this.hasUnmounted = !0
                }, t.prototype.render = function() {
                    var e = B("share-input", {
                            "share-input--hidden": this.props.hide
                        }),
                        t = this.state.formInputValue.length > 255,
                        n = t ? "-" + (this.state.formInputValue.length - 255) : Object(m.d)("Share", "ChatResubNotification"),
                        i = Object(m.d)("Close", "ChatResubNotification"),
                        a = Object(m.d)("Add a message to the streamer", "ChatResubNotification"),
                        r = this.state.sharing ? z.y.Loading : z.y.Default;
                    return S.createElement(z.V, {
                        className: e,
                        padding: 1,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: z._4.Absolute
                    }, S.createElement(z._19, {
                        className: "share-input__container",
                        position: z._4.Relative,
                        border: !0,
                        background: z.m.Base,
                        padding: 1
                    }, S.createElement(z.V, {
                        position: z._4.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, S.createElement(z.v, {
                        ariaLabel: i,
                        onClick: this.props.onClose,
                        type: z.w.Secondary,
                        icon: z._11.Close,
                        "data-a-target": "resub-notification-close-form-btn",
                        "data-test-selector": "share-input__close-form-btn"
                    })), S.createElement(z.V, {
                        textAlign: z._24.Center,
                        padding: {
                            top: 1,
                            bottom: 2
                        }
                    }, this.props.children), S.createElement(z.V, {
                        display: z.H.Flex,
                        flexWrap: z.K.NoWrap
                    }, S.createElement(z.V, {
                        fullWidth: !0
                    }, S.createElement(z.R, {
                        autoFocus: !0,
                        type: z.S.Text,
                        value: this.state.formInputValue,
                        onChange: this.onInputChange,
                        placeholder: a,
                        "data-a-target": "resub-notification-share-message-input",
                        "data-test-selector": "share-input__share-message-input"
                    })), S.createElement(z.u, {
                        disabled: t,
                        onClick: this.handleShareClick,
                        "data-a-target": "resub-notification-send-msg-btn",
                        "data-test-selector": "share-input__send-msg-btn",
                        state: r
                    }, n))))
                }, t
            }(S.Component)),
            $ = (n("54rb"), function(e) {
                var t = Object(m.d)("Share", "Chat--SharePrompt"),
                    n = Object(m.d)("Close", "Chat--SharePrompt"),
                    i = B("chat-share-prompt", {
                        "chat-share-prompt--hidden": e.hide || !e.children
                    });
                return S.createElement(z.V, {
                    position: z._4.Absolute,
                    fullWidth: !0,
                    className: i,
                    padding: {
                        y: .5,
                        left: .5
                    }
                }, S.createElement(z.V, {
                    display: z.H.Flex,
                    padding: 1,
                    justifyContent: z.U.Between,
                    alignItems: z.c.Center,
                    flexWrap: z.K.NoWrap
                }, S.createElement(z._23, {
                    "data-a-target": "resub-notification-months-subbed-text",
                    "data-test-selector": "share-prompt__text"
                }, e.children), S.createElement(z.V, {
                    display: z.H.Flex,
                    flexWrap: z.K.NoWrap,
                    alignItems: z.c.Center,
                    flexShrink: 0,
                    padding: {
                        left: .5
                    }
                }, S.createElement(z.V, {
                    display: z.H.Inline,
                    padding: {
                        right: .5
                    },
                    flexShrink: 0
                }, S.createElement(z.u, {
                    onClick: e.onClickShare,
                    size: z.x.Small,
                    "data-a-target": "resub-notification-share-notification-btn",
                    "data-test-selector": "share-prompt__share-btn"
                }, t)), S.createElement(z.V, {
                    flexShrink: 0
                }, S.createElement(z.v, {
                    ariaLabel: n,
                    onClick: e.onClickClose,
                    type: z.w.Secondary,
                    icon: z._11.Close,
                    "data-a-target": "resub-notification-close-notification-btn",
                    "data-test-selector": "share-prompt__close-btn"
                })))))
            }),
            J = n("Tzcg"),
            K = n("xZvS"),
            Y = n("cxe8"),
            Z = n("QNxL"),
            X = (n("BTUa"), "chat_dismiss"),
            ee = "chat_share",
            te = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.purchaseTokensExist = function(e) {
                        return e.data.user.self && e.data.user.self.purchaseTokens.length > 0
                    }, t.manageParentSpace = function(e) {
                        t.dataIsReady(e) && t.purchaseTokensExist(e) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissPurchaseToken = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return u.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), e = this.props.data.user.self.purchaseTokens[0], t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(H.d)(Y, {
                                            channelLogin: this.props.channelLogin
                                        }, t), m.m.track(G.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: e.asin,
                                            item_name: e.title,
                                            context: X,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), [4, this.props.dismissPurchaseToken(Object(H.a)({
                                            token: e.id,
                                            channelID: this.props.data.user.id
                                        }))];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.sharePurchase = function(e) {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return u.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, , 3, 4]), t = this.props.data.user.self.purchaseTokens[0], [4, this.props.sharePurchaseTokenInChat(Object(H.a)({
                                            token: t.id,
                                            channelID: this.props.data.user.id,
                                            message: e
                                        }))];
                                    case 2:
                                        return i.sent(), m.m.track(G.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: t.asin,
                                            item_name: t.title,
                                            context: ee,
                                            context_details: e,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), n = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(H.d)(Y, {
                                            channelLogin: this.props.channelLogin
                                        }, n), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.dataIsReady(e)) {
                        var t = e.pubsub.messages.userCommerceUpdateEvent,
                            n = this.props.pubsub.messages.userCommerceUpdateEvent,
                            i = !n && t,
                            a = n && t && n.time !== t.time;
                        (i || a) && this.props.data && this.props.data.refetch()
                    }
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.purchaseTokensExist(this.props) && this.props.data.user.self ? this.renderPurchaseToken(this.props.data.user.self.purchaseTokens[0]) : null
                }, t.prototype.renderPurchaseToken = function(e) {
                    var t;
                    t = this.props.data.user.settings.isCommerceRevShareEnabled ? Object(m.d)("You bought {product} and supported {channelName}!", {
                        product: S.createElement("strong", null, e.title),
                        channelName: S.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat") : Object(m.d)("You bought {product} while watching {channelName}!", {
                        product: S.createElement("strong", null, e.title),
                        channelName: S.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat");
                    var n, i = e.inGameContents.map(this.renderLootInGameContent),
                        a = e.badges.map(this.renderLootBadge),
                        r = e.emoteSets.map(this.renderLootEmoteSet),
                        s = e.bits.map(this.renderLootBits, this);
                    return (i.length || a.length || r.length || s.length) && (n = S.createElement(z.V, {
                        "data-test-selector": "share-purchase__loot",
                        padding: {
                            bottom: 1
                        },
                        display: z.H.Flex,
                        justifyContent: z.U.Center
                    }, i, a, r, s), t = Object(m.d)("You bought {product} and opened a Twitch Crate! Let {channelName} know you shared the love.", {
                        product: S.createElement("strong", null, e.title),
                        channelName: S.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat")), S.createElement(z.V, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: z._4.Absolute
                    }, S.createElement($, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissPurchaseToken
                    }, t), S.createElement(Q, {
                        hide: !this.state.showMessageInput,
                        onShare: this.sharePurchase,
                        onClose: this.toggleContentShown
                    }, S.createElement(z.V, {
                        padding: {
                            bottom: 1
                        }
                    }, S.createElement("figure", {
                        height: 40,
                        width: 40
                    }, S.createElement("img", {
                        src: e.imageThumbnail
                    }))), n, S.createElement(z._23, null, Object(m.d)("Score! Give a shout out to {channelName} in Chat about all your sweet loot!", {
                        channelName: S.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat"))))
                }, t.prototype.renderLootInGameContent = function(e) {
                    return S.createElement(z.V, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__igc"
                    }, S.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.imageURL
                    }))
                }, t.prototype.renderLootEmoteSet = function(e) {
                    return Object(J.b)(e.emoteSet.emotes).map(function(e) {
                        return S.createElement(z.V, {
                            key: e.id,
                            margin: {
                                top: .5,
                                right: 1
                            },
                            "data-test-selector": "share-purchase__emoticon"
                        }, S.createElement("img", {
                            className: "share-to-chat__loot",
                            srcSet: e.srcSet,
                            alt: e.displayName
                        }))
                    })
                }, t.prototype.renderLootBadge = function(e) {
                    return S.createElement(z.V, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__badge"
                    }, S.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.badge.image2x
                    }))
                }, t.prototype.renderLootBits = function(e) {
                    if (this.props.bitsConfig) return S.createElement(z.V, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__bits"
                    }, S.createElement(q.a, {
                        count: e.quantity,
                        bitsConfig: this.props.bitsConfig,
                        withImage: !0
                    }))
                }, t = u.__decorate([Object(C.a)(Y, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(P.a)([{
                    topic: function(e) {
                        return Object(W.m)(e.currentUserID)
                    },
                    mapMessageTypesToProps: (R = {}, R[V.c.ChatNotification] = "userCommerceUpdateEvent", R)
                }])], t)
            }(S.Component),
            ne = Object(C.a)(K, {
                name: "dismissPurchaseToken"
            })(Object(C.a)(Z, {
                name: "sharePurchaseTokenInChat"
            })(te)),
            ie = Object(k.a)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            })(ne),
            ae = (n("e9ZN"), function(e) {
                var t = B("rare-emote__face", {
                        "rare-emote__face--animate": !!e.animate
                    }),
                    n = B("rare-emote__neck", {
                        "rare-emote__neck--animate": !!e.animate
                    });
                return S.createElement(z.V, {
                    overflow: z._0.Hidden,
                    className: "rare-emote"
                }, S.createElement(z.Q, {
                    zIndex: z._39.Above,
                    position: z._4.Relative
                }, S.createElement("img", {
                    className: t,
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.emoteID + "/2.0"
                })), S.createElement(z.V, {
                    position: z._4.Relative,
                    zIndex: z._39.Default,
                    className: n
                }, S.createElement(z._10, {
                    width: 28,
                    height: 28,
                    asset: z._11.Neck
                })))
            }),
            re = 3,
            se = n("nEoF"),
            oe = n("S20p"),
            le = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        resubDismissed: !1,
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.randomEmoteId = t.getRandomEmoteId(), t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.resubExists = function(e, t) {
                        return e.data.user.self && e.data.user.self.resubNotification && !t.resubDismissed
                    }, t.manageParentSpace = function() {
                        t.dataIsReady(t.props) && t.resubExists(t.props, t.state) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissResubNotification = function() {
                        t.setState({
                            resubDismissed: !0
                        })
                    }, t.shareResub = function(e) {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return u.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.resubNotification) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 4, 5, 6]), this.props.authToken ? [4, function(e, t, n, i) {
                                            return u.__awaiter(this, void 0, void 0, function() {
                                                var a, r, s, o, l;
                                                return u.__generator(this, function(c) {
                                                    switch (c.label) {
                                                        case 0:
                                                            a = "https://api.twitch.tv/api/channels/" + e + "/use_chat_notification_token", r = 1, c.label = 1;
                                                        case 1:
                                                            if (!(r <= re)) return [3, 7];
                                                            c.label = 2;
                                                        case 2:
                                                            return c.trys.push([2, 5, , 6]), [4, fetch(a, {
                                                                body: JSON.stringify({
                                                                    token_id: t,
                                                                    custom_message: n
                                                                }),
                                                                method: "POST",
                                                                headers: {
                                                                    "Client-ID": m.n.config.legacyClientID,
                                                                    Accept: "application/json; charset=UTF-8",
                                                                    "content-type": "application/json; charset=UTF-8",
                                                                    Authorization: "OAuth " + i
                                                                }
                                                            })];
                                                        case 3:
                                                            return s = c.sent(), [4, s.json()];
                                                        case 4:
                                                            return o = c.sent(), [2, o];
                                                        case 5:
                                                            if (l = c.sent(), r === re) throw l;
                                                            return [3, 6];
                                                        case 6:
                                                            return ++r, [3, 1];
                                                        case 7:
                                                            return [2]
                                                    }
                                                })
                                            })
                                        }(this.props.channelLogin, this.props.data.user.self.resubNotification.token, e, this.props.authToken)] : [3, 3];
                                    case 2:
                                        i.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.resubNotification = null), e
                                        }, Object(H.d)(oe, {
                                            channelLogin: this.props.channelLogin
                                        }, t), this.dismissResubNotification(), i.label = 3;
                                    case 3:
                                        return [3, 6];
                                    case 4:
                                        return n = i.sent(), m.i.error(n, "Failed to post resub message"), [3, 6];
                                    case 5:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 6:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace()
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.dataIsReady(e) && e.data.user.self && e.data.user.self.resubNotification && !this.randomEmoteId && (this.randomEmoteId = this.getRandomEmoteId())
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.resubExists(this.props, this.state) && this.props.data.user.self && this.props.data.user.self.resubNotification ? this.renderResubToken(this.props.data.user.self.resubNotification) : null
                }, t.prototype.renderResubToken = function(e) {
                    return S.createElement(z.V, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: z._4.Absolute
                    }, S.createElement($, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissResubNotification
                    }, Object(m.d)("It's your {monthsSubbed, number} month anniversary!", {
                        monthsSubbed: e.months
                    }, "ChatResubNotification")), S.createElement(Q, {
                        hide: !this.state.showMessageInput,
                        onShare: this.shareResub,
                        onClose: this.toggleContentShown
                    }, S.createElement(ae, {
                        emoteID: this.randomEmoteId,
                        animate: this.state.showMessageInput
                    }), S.createElement(z._23, null, Object(m.d)("Hooray! Let {channelName} know it's your {monthsSubbed, number} month anniversary.", {
                        channelName: S.createElement("strong", null, this.props.channelDisplayName),
                        monthsSubbed: e.months
                    }, "ChatResubNotification"))))
                }, t.prototype.getRandomEmoteId = function() {
                    var e = Math.floor(Math.random() * se.a.length);
                    return se.a[e]
                }, t = u.__decorate([Object(C.a)(oe, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })], t)
            }(S.Component);
        n("NZkJ");
        ! function(e) {
            e[e.Resub = 1] = "Resub", e[e.Purchase = 2] = "Purchase"
        }(F || (F = {}));
        var ce, de = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestedSpaces: new Set
                    }, t.addSpace = function(e) {
                        t.state.requestedSpaces.has(e) || t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.add(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.removeSpace = function(e) {
                        t.state.requestedSpaces.has(e) && t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.delete(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.requestResubSpace = function() {
                        t.addSpace(F.Resub)
                    }, t.dismissResubSpace = function() {
                        t.removeSpace(F.Resub)
                    }, t.requestPurchaseSpace = function() {
                        t.addSpace(F.Purchase)
                    }, t.dismissPurchaseSpace = function() {
                        t.removeSpace(F.Purchase)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    this.state.requestedSpaces.size && (e = Array.from(this.state.requestedSpaces.values()).sort()[0]);
                    var t = B({
                            "share-to-chat__space--hidden": e !== F.Resub
                        }),
                        n = B({
                            "share-to-chat__space--hidden": e !== F.Purchase
                        });
                    return S.createElement(z.V, null, S.createElement(z.V, {
                        className: t
                    }, S.createElement(le, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        requestSpace: this.requestResubSpace,
                        dismissSpace: this.dismissResubSpace
                    })), S.createElement(z.V, {
                        className: n
                    }, S.createElement(ie, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig,
                        requestSpace: this.requestPurchaseSpace,
                        dismissSpace: this.dismissPurchaseSpace
                    })))
                }, t
            }(S.Component),
            ue = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        show: !0
                    }, t.dismiss = function() {
                        t.setState({
                            show: !1
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                        show: !0
                    })
                }, t.prototype.render = function() {
                    return this.state.show ? S.createElement(z._19, {
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        background: z.m.AccentAlt2,
                        color: z.F.Overlay,
                        position: z._4.Absolute,
                        className: "hosting-notification",
                        padding: {
                            y: .5,
                            left: .5
                        },
                        "data-a-target": "hosting-notification-container"
                    }, S.createElement(z.V, {
                        display: z.H.Flex,
                        padding: 1,
                        justifyContent: z.U.Between,
                        alignItems: z.c.Center,
                        flexWrap: z.K.NoWrap
                    }, S.createElement(z.V, {
                        display: z.H.Flex,
                        flexWrap: z.K.NoWrap
                    }, S.createElement(z.V, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, S.createElement(z._23, null, Object(m.d)("Hosting", "ChatHostingNotification"))), S.createElement(z.V, {
                        ellipsis: !0,
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, S.createElement(z._23, {
                        type: z._28.Strong,
                        "data-test-selector": "hosting-notification__text",
                        "data-a-target": "hosting-notification-channel-name"
                    }, "" + this.props.hostedChannelDisplayName))), S.createElement(z.V, {
                        display: z.H.Flex,
                        flexWrap: z.K.NoWrap,
                        flexShrink: 0
                    }, S.createElement(z.V, {
                        display: z.H.Inline,
                        padding: {
                            right: .5
                        }
                    }, S.createElement(z.u, {
                        linkTo: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                content: "host_channel",
                                medium: "chat_bar_notification"
                            }
                        },
                        size: z.x.Small,
                        "data-a-target": "hosting-notification-gotochannel-button"
                    }, Object(m.d)("Go to Channel", "ChatHostingNotification"))), S.createElement(z.v, {
                        onClick: this.dismiss,
                        ariaLabel: Object(m.d)("Close", "HostingNotification"),
                        size: z.x.Small,
                        overlay: !0,
                        icon: z._11.Close,
                        "data-a-target": "hosting-notification-close-button"
                    })))) : null
                }, t
            }(S.Component),
            pe = n("u8SD"),
            me = n("Kxgf"),
            he = n("djIP"),
            ge = n("pV+t"),
            fe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getInvalidUserMessage = function() {
                        return Object(m.d)("No user matching that login.", "IgnoreCommandHandler")
                    }, t.blockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: i(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.blockUserMutation(e, he.b.Other, he.a.Chat, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(m.d)("Unable to ignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(m.d)("User successfully ignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t.unblockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: i(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.unblockUserMutation(e, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(m.d)("Unable to unignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(m.d)("User successfully unignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return S.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, S.createElement(M, {
                        command: "ignore",
                        handler: this.blockUser
                    }), S.createElement(M, {
                        command: "unignore",
                        handler: this.unblockUser
                    }))
                }, t = u.__decorate([Object(C.a)(ge, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.currentUserLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.currentUserLogin
                    }
                })], t)
            }(S.Component),
            ve = Object(_.compose)(Object(me.a)(), Object(pe.a)())(fe),
            be = n("F8kA"),
            ke = (n("W266"), "nativeBroadcastNotifDismissed"),
            ye = [{
                title: "English",
                login: "PlayHearthstone"
            }, {
                title: "中文 繁體",
                login: "HearthstonezhTW"
            }, {
                title: "한국어",
                login: "playhearthstonekr"
            }, {
                title: "Русский",
                login: "PlayHearthstoneRU"
            }, {
                title: "Deutsch",
                login: "C4mlann"
            }, {
                title: "Italiano",
                login: "GDivision"
            }, {
                title: "Polski",
                login: "BlackFIreIce"
            }, {
                title: "Français",
                login: "originhs"
            }, {
                title: "Français",
                login: "armatvhs"
            }, {
                title: "Español - España",
                login: "OGSeries"
            }, {
                title: "ภาษาไทย",
                login: "HearthstoneTH"
            }, {
                title: "Español - Latinoamérica",
                login: "CopaAmerica_ES1"
            }, {
                title: "Português - Brasil",
                login: "CopaAmerica_pt1"
            }],
            Se = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isClosed: !1
                    }, t.getChannelLinks = function() {
                        var e = x.b.get("native_broadcast_blacklist", []);
                        return ye.filter(function(t) {
                            return e.indexOf(t.login.toLowerCase()) < 0
                        }).filter(function(e) {
                            return e.login.toLowerCase() !== t.props.channelLogin.toLowerCase()
                        }).map(function(e) {
                            var t = e.title + " (" + e.login + ")";
                            return S.createElement("li", {
                                key: e.login
                            }, S.createElement(be.a, {
                                className: "native-broadcast-notification__link",
                                to: "/" + e.login.toLowerCase()
                            }, t))
                        })
                    }, t.onDismiss = function() {
                        t.setState({
                            isClosed: !0
                        });
                        var e = u.__assign({}, m.k.get(ke, {}), (n = {}, n[t.props.channelLogin.toLowerCase()] = Date.now(), n));
                        m.k.set(ke, e);
                        var n
                    }, t.onExpire = function() {
                        t.setState({
                            isClosed: !0
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin.toLowerCase() !== this.props.channelLogin.toLowerCase() && this.setState({
                        isClosed: !1
                    })
                }, t.prototype.render = function() {
                    if (this.state.isClosed) return null;
                    if (!this.isEventChannel(this.props.channelLogin)) return null;
                    if (this.hasDismissedForChannel(this.props.channelLogin)) return null;
                    var e = Date.now();
                    if (e < 15161904e5 || e >= 15167088e5) return null;
                    var t = this.getChannelLinks();
                    return t.length ? S.createElement(z._19, {
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        background: z.m.AccentAlt2,
                        color: z.F.Overlay,
                        padding: 1,
                        position: z._4.Absolute
                    }, S.createElement(z.V, {
                        margin: {
                            bottom: 1
                        }
                    }, S.createElement(z._23, {
                        type: z._28.H4
                    }, Object(m.d)("Want to watch HCT?", "NativeBroadcastNotification"))), S.createElement("ul", null, t), S.createElement(z.V, {
                        attachRight: !0,
                        attachTop: !0,
                        margin: 1,
                        position: z._4.Absolute
                    }, S.createElement(z.v, {
                        ariaLabel: Object(m.d)("Close", "NativeBroadcastNotification"),
                        icon: z._11.Close,
                        onClick: this.onDismiss,
                        overlay: !0,
                        size: z.x.Small,
                        "data-a-target": "native-broadcast-notification-close-button"
                    })), S.createElement(z.V, {
                        margin: {
                            top: .5
                        }
                    }, S.createElement(z._7, {
                        countdown: 30,
                        onCountdownEnd: this.onExpire,
                        size: z._8.ExtraSmall
                    }))) : null
                }, t.prototype.isEventChannel = function(e) {
                    return ye.map(function(e) {
                        return e.login.toLowerCase()
                    }).includes(e.toLowerCase())
                }, t.prototype.hasDismissedForChannel = function(e) {
                    var t = m.k.get(ke, {})[e.toLowerCase()];
                    return !!t && t >= 15161904e5
                }, t
            }(S.Component),
            Ce = n("+Znq"),
            _e = n("9u8h"),
            Ee = (n("q4rf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestFailed: !1
                    }, t.logger = m.n.logger.withCategory("orbis"), t.onClickInteraction = function(e) {
                        t.props.sendMessage(":act " + e.currentTarget.getAttribute("data-action")), t.toggleBalloonRef.toggleBalloon()
                    }, t.setToggleBalloonRef = function(e) {
                        return t.toggleBalloonRef = e
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.isLoggedIn && this.props.firstPageLoaded && this.getChatProperties()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.isLoggedIn && !this.props.firstPageLoaded && e.firstPageLoaded && this.getChatProperties()
                }, t.prototype.render = function() {
                    return this.props.isLoggedIn && !this.state.requestFailed && this.hasInteractions() ? S.createElement(z._19, {
                        className: "orbis",
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        alignItems: z.c.Stretch,
                        background: z.m.Base,
                        flexShrink: 0,
                        borderBottom: !0
                    }, S.createElement(Ce.a, {
                        ref: this.setToggleBalloonRef
                    }, S.createElement("div", {
                        className: "orbis__dropdown-container",
                        "data-test-selector": "orbis-dropdown-container"
                    }, S.createElement(z.V, {
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: z.H.Flex,
                        justifyContent: z.U.Between,
                        flexWrap: z.K.NoWrap
                    }, S.createElement(z.V, {
                        ellipsis: !0,
                        padding: {
                            right: 1
                        }
                    }, S.createElement(z._23, {
                        type: z._28.Span
                    }, Object(m.d)("Interactions Available", "Orbis"))), S.createElement(z.V, {
                        display: z.H.Flex,
                        justifyContent: z.U.Between,
                        alignItems: z.c.Center,
                        flexShrink: 0
                    }, S.createElement(z.V, {
                        className: "orbis__dropdown-icon",
                        display: z.H.Flex,
                        justifyContent: z.U.Between,
                        alignItems: z.c.Center
                    }, S.createElement(z._10, {
                        asset: z._11.AngleRight
                    }))))), S.createElement(z.p, {
                        offsetY: "1px",
                        noTail: !0
                    }, S.createElement(z.V, {
                        className: "orbis__dropdown-content",
                        padding: 1
                    }, this.renderInteractions())))) : null
                }, t.prototype.renderInteractions = function() {
                    return this.state.chatProperties ? [this.renderInteraction(this.state.chatProperties.sce_title_preset_text_1), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_2), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_3), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_4), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_5)] : null
                }, t.prototype.renderInteraction = function(e) {
                    return e ? S.createElement(z.T, {
                        onClick: this.onClickInteraction,
                        key: e,
                        "data-action": e,
                        "data-test-selector": "orbis-interaction"
                    }, S.createElement(z.Q, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, S.createElement(z._23, {
                        ellipsis: !0
                    }, e))) : null
                }, t.prototype.getChatProperties = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return u.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, _e.a.get("/api/channels/" + this.props.channelLogin + "/chat_properties?on_site=1")];
                                case 1:
                                    return (e = n.sent()).requestError ? (this.logger.error(e.requestError, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.error ? (this.logger.error(new Error("Chat Properties Error"), "The API returned a non-200 response", e.error), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.body ? (this.setState({
                                        chatProperties: e.body
                                    }), [3, 3]) : (this.logger.error(new Error("Chat Properties Error"), "Body is undefined"), this.setState({
                                        requestFailed: !0
                                    }), [2]);
                                case 2:
                                    return t = n.sent(), this.logger.error(t, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.hasInteractions = function() {
                    return !!this.state.chatProperties && !!(this.state.chatProperties.sce_title_preset_text_1 || this.state.chatProperties.sce_title_preset_text_2 || this.state.chatProperties.sce_title_preset_text_3 || this.state.chatProperties.sce_title_preset_text_4 || this.state.chatProperties.sce_title_preset_text_5)
                }, t
            }(S.Component)),
            Ne = Object(k.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isLoggedIn: Object(y.d)(e)
                }
            })(Ee),
            we = n("CIox"),
            De = n("+xm8"),
            Te = n("f2i/"),
            Ie = function() {
                return function() {}
            }(),
            Oe = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.joinedRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.joinedRaids = t.joinedRaids), n
                }
                return u.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return this.joinedRaids.has(e.id) || this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        joinedRaids: this.joinedRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.add(e.id);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.delete(e.id);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    m.k.set("raid", e)
                }, t.prototype.getStorageData = function() {
                    return m.k.get("raid", {})
                }, t
            }(Ie),
            Me = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.leftRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.leftRaids = t.leftRaids), n
                }
                return u.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return !this.leftRaids.has(e.id) && !this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        leftRaids: this.leftRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.delete(e.id);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.add(e.id);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    m.k.set("raids-left", e)
                }, t.prototype.getStorageData = function() {
                    return m.k.get("raids-left", {})
                }, t
            }(Ie),
            xe = 3,
            Ue = 5,
            Re = "raid_update",
            Fe = function() {
                function e(e, t) {
                    this.message = e, this.id = e.raid.id, this.creatorID = e.raid.creator_id, this.sourceChannelID = e.raid.source_id, this.targetChannelID = e.raid.target_id, this.viewerCount = e.raid.viewer_count, t ? (this.varianceSeconds = t.varianceSeconds, this.totalDurationInSeconds = t.totalDurationInSeconds, this.clientCreatedAtTimestamp = t.clientCreatedAtTimestamp) : (this.varianceSeconds = Math.round(Math.random() * xe * 2 - xe), this.totalDurationInSeconds = this.getTotalDurationInSeconds(e.raid.remaining_duration_seconds), this.clientCreatedAtTimestamp = (new Date).getTime()), this.isAnnouncing = e.type === Re && this.totalDurationInSeconds > 0, this.hasTimeToJoin = this.totalDurationInSeconds > Ue
                }
                return e.prototype.withMessage = function(t) {
                    return this.id !== t.raid.id ? new e(t) : new e(t, this)
                }, e.prototype.getRemainingJoinTime = function(e) {
                    void 0 === e && (e = new Date);
                    var t = e.getTime() - this.clientCreatedAtTimestamp;
                    return 1e3 * this.totalDurationInSeconds - t
                }, e.prototype.getTotalDurationInSeconds = function(e) {
                    var t = e + this.varianceSeconds;
                    return Math.max(t, 0)
                }, e
            }(),
            Le = "https://api.twitch.tv/kraken",
            je = n("O0Qc"),
            Ae = (n("z7Cp"), {
                "data-test-selector": "countdown-fill-width"
            }),
            Be = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = this.props.startPolling || setInterval;
                    this.intervalID = t(function() {
                        return e.forceUpdate()
                    }, 1e3)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.intervalID)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.getRemainingTime() <= 0 && this.props.onCountdownEnd()
                }, t.prototype.render = function() {
                    var e = this.countdownPercentage + "%";
                    return S.createElement("div", {
                        className: "raid-countdown-bar"
                    }, S.createElement("div", u.__assign({
                        className: "raid-countdown-bar__fill",
                        style: {
                            width: e
                        }
                    }, Ae)))
                }, Object.defineProperty(t.prototype, "countdownPercentage", {
                    get: function() {
                        return this.props.getRemainingTime() / this.props.totalCountdownTime * 100
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(S.PureComponent),
            Pe = (n("mR/9"), {
                medium: "twitch_channel",
                content: "raid_channel"
            }),
            Ve = n("UMQJ"),
            He = Object(C.a)(Ve, {
                options: function(e) {
                    return {
                        variables: {
                            sourceChannelID: e.raid.sourceChannelID,
                            targetChannelID: e.raid.targetChannelID
                        }
                    }
                }
            })(function(e) {
                if (e.data.loading || e.data.error) return S.createElement("div", null);
                var t = e.component,
                    n = u.__rest(e, ["component"]);
                return S.createElement(t, u.__assign({}, n))
            }),
            We = {
                "data-test-selector": "current-raiders"
            },
            Ge = function(e) {
                return function(t) {
                    return S.createElement(He, u.__assign({}, t, {
                        component: e
                    }))
                }
            }(function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRemainingTime = function() {
                        return t.props.raid.getRemainingJoinTime()
                    }, t.handleCountdownEnd = function() {
                        t.props.onRaidInvitePeriodOver(t.props.data.targetChannel.displayName)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    ! function(e) {
                        a(G.SpadeEventType.RaidPromptImpression, e)
                    }(this.props.raid)
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.sourceChannel,
                        n = e.targetChannel;
                    return S.createElement(z._19, {
                        className: "raid-notification",
                        background: z.m.AccentAlt2,
                        color: z.F.Overlay,
                        position: z._4.Absolute,
                        zIndex: z._39.Above,
                        fullWidth: !0
                    }, S.createElement(z.V, {
                        className: "raid-notification__content",
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: z.H.Flex,
                        justifyContent: z.U.Between
                    }, S.createElement(z.V, {
                        alignItems: z.c.Center,
                        display: z.H.Flex
                    }, S.createElement(z.l, {
                        size: 36,
                        imageSrc: t.profileImageURL,
                        imageAlt: t.displayName
                    }), S.createElement(z._10, {
                        asset: z._11.AngleRight,
                        height: 10
                    }), S.createElement(z.l, {
                        size: 36,
                        imageSrc: n.profileImageURL,
                        imageAlt: n.displayName
                    }), S.createElement(z.V, {
                        padding: {
                            left: 1
                        }
                    }, S.createElement(z._23, {
                        color: z.F.OverlayAlt,
                        type: z._28.P,
                        className: "raid-notification__channel-name"
                    }, Object(m.d)("{sourceDisplayName} is", {
                        sourceDisplayName: t.displayName
                    }, "RaidCTASourceChannel")), S.createElement(z._23, null, Object(m.d)("raiding {targetDisplayName}", {
                        targetDisplayName: n.displayName
                    }, "RaidCTATargetChannel")), S.createElement(z._23, u.__assign({
                        bold: !0
                    }, We), Object(m.d)("{viewerCount, plural, one {# raider} other {# raiders}}", {
                        viewerCount: this.props.raid.viewerCount
                    }, "RaidCTATotalRaiders")))), this.props.children), S.createElement(Be, {
                        totalCountdownTime: 1e3 * this.props.raid.totalDurationInSeconds,
                        getRemainingTime: this.getRemainingTime,
                        onCountdownEnd: this.handleCountdownEnd
                    }))
                }, t
            }(S.Component)),
            qe = {
                "data-test-selector": "raid-cancel-button"
            },
            ze = function(e) {
                return S.createElement(z.V, {
                    alignSelf: z.d.Center
                }, S.createElement(z.u, u.__assign({
                    size: z.x.Large,
                    type: z.z.Hollow,
                    overlay: !0,
                    onClick: e.onCancelRaid
                }, qe), Object(m.d)("Cancel", "RaidCTACancel")))
            },
            Qe = n("bQ8d"),
            $e = {
                "data-test-selector": "join-raid-button"
            },
            Je = {
                "data-test-selector": "leave-raid-button"
            },
            Ke = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.timerID = 0, t.handleLeaveRaid = function() {
                        clearTimeout(t.timerID), t.props.onLeaveRaid()
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.hasJoined && (this.timerID = setTimeout(this.props.onJoinRaid, Object(Qe.a)(5e3)))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.timerID)
                }, t.prototype.render = function() {
                    return this.props.hasJoined ? S.createElement(z.V, {
                        alignSelf: z.d.Center
                    }, S.createElement(z.u, u.__assign({
                        size: z.x.Large,
                        type: z.z.Hollow,
                        overlay: !0,
                        onClick: this.handleLeaveRaid
                    }, Je), Object(m.d)("Leave", "RaidCTALeave"))) : S.createElement(z.V, {
                        alignSelf: z.d.Center
                    }, S.createElement(z.u, u.__assign({
                        size: z.x.Large,
                        onClick: this.props.onJoinRaid
                    }, $e), Object(m.d)("Join", "RaidCTAJoin")))
                }, t
            }(S.Component),
            Ye = n("jML9"),
            Ze = n("OAwv"),
            Xe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        raidStorage: new Oe
                    }, t.unsubscribe = function() {}, t.handlePubsubMessage = function(e) {
                        t.setState(function(t) {
                            return t.raid ? u.__assign({}, t, {
                                raid: t.raid.withMessage(e)
                            }) : u.__assign({}, t, {
                                raid: new Fe(e)
                            })
                        })
                    }, t.handleRaidInvitePeriodOver = function(e) {
                        var n = t.hasJoinedCurrentRaid;
                        if (t.state.raid && t.setState({
                                raidStorage: t.state.raidStorage.expireRaid(t.state.raid)
                            }), n) {
                            var i = function(e, t) {
                                var n;
                                if (function(e) {
                                        return !e.split("/")[2]
                                    }(e.pathname)) n = "/" + t;
                                else {
                                    if (! function(e) {
                                            return /^\/.+\/chat$/.test(e)
                                        }(e.pathname)) return "";
                                    n = "/" + t + "/chat"
                                }
                                var i = u.__assign({}, Ze.parse(e.search), {
                                    referrer: "raid"
                                });
                                return n + "?" + Ze.stringify(i)
                            }(t.props.history.location || window.location, e);
                            i && t.props.history.push(i, Pe)
                        }
                    }, t.handleJoinRaid = function() {
                        if (t.state.raid) {
                            var e = t.state.raid.id;
                            t.props.authToken ? (! function(e, t) {
                                var n = {
                                    headers: {
                                        "Client-ID": m.n.config.legacyClientID,
                                        Authorization: "OAuth " + t,
                                        Accept: "application/vnd.twitchtv.v5+json"
                                    },
                                    method: "POST"
                                };
                                fetch(Le + "/raids/" + e + "/join", n)
                            }(e, t.props.authToken), function(e) {
                                a(G.SpadeEventType.RaidPromptJoin, e)
                            }(t.state.raid), t.setState({
                                raidStorage: t.state.raidStorage.joinRaid(t.state.raid)
                            })) : t.props.login()
                        }
                    }, t.handleLeaveRaid = function() {
                        if (t.state.raid) {
                            ! function(e, t) {
                                var n = {
                                    headers: {
                                        "Client-ID": m.n.config.legacyClientID,
                                        Authorization: "OAuth " + t,
                                        Accept: "application/vnd.twitchtv.v5+json"
                                    },
                                    method: "POST"
                                };
                                fetch(Le + "/raids/" + e + "/leave", n)
                            }(t.state.raid.id, t.props.authToken),
                            function(e) {
                                a(G.SpadeEventType.RaidPromptLeave, e)
                            }(t.state.raid), t.setState({
                                raidStorage: t.state.raidStorage.leaveRaid(t.state.raid)
                            })
                        }
                    }, t.handleCancelRaid = function() {
                        t.state.raid && t.props.send(je.a)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.subscribe(), [4, m.n.experiments.getAssignment("TWILIGHT_RAID_AUTO_JOIN")];
                                case 1:
                                    return "yes" === e.sent() && this.setState({
                                        raidStorage: new Me
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return this.shouldRenderRaidNotification ? S.createElement(Ge, {
                        raid: this.state.raid,
                        onRaidInvitePeriodOver: this.handleRaidInvitePeriodOver
                    }, this.renderCTAButton()) : null
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribe()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.props.channelID !== e.channelID && (this.unsubscribe(), this.setState({
                        raid: void 0
                    }, function() {
                        return t.subscribe()
                    }))
                }, t.prototype.subscribe = function() {
                    this.unsubscribe = m.n.pubsub.subscribe({
                        topic: Object(W.g)(this.props.channelID),
                        onMessage: this.handlePubsubMessage
                    })
                }, t.prototype.renderCTAButton = function() {
                    return this.isRaidCreator ? S.createElement(ze, {
                        onCancelRaid: this.handleCancelRaid
                    }) : S.createElement(Ke, {
                        onJoinRaid: this.handleJoinRaid,
                        onLeaveRaid: this.handleLeaveRaid,
                        hasJoined: this.hasJoinedCurrentRaid
                    })
                }, Object.defineProperty(t.prototype, "shouldRenderRaidNotification", {
                    get: function() {
                        var e = this.state.raid;
                        return e && e.isAnnouncing && !this.state.raidStorage.isExpired(e) && (e.hasTimeToJoin || this.hasJoinedCurrentRaid)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isRaidCreator", {
                    get: function() {
                        var e = this.state.raid;
                        return e && this.props.data && this.props.data.user && this.props.data.user.id === e.creatorID
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "hasJoinedCurrentRaid", {
                    get: function() {
                        var e = this.state.raid;
                        return !(!e || !this.props.authToken) && (this.isRaidCreator || this.state.raidStorage.hasJoined(e))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(S.Component),
            et = Object(C.a)(Ye, {
                skip: function(e) {
                    return !e.authToken
                }
            })(Xe),
            tt = Object(k.a)(function(e) {
                return {
                    authToken: Object(y.a)(e)
                }
            }, function(e) {
                return Object(E.bindActionCreators)({
                    login: function() {
                        return Object(Te.f)(De.a.RaidJoin)
                    }
                }, e)
            })(et),
            nt = Object(we.e)(tt),
            it = n("WIs4"),
            at = n("aSvS"),
            rt = n("rIzn"),
            st = n("J7iJ"),
            ot = n("KfLc"),
            lt = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return S.createElement(z._19, {
                        background: z.m.Base,
                        color: z.F.Alt
                    }, S.createElement(z.V, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        }
                    }, S.createElement(z.V, {
                        margin: {
                            bottom: .5
                        }
                    }, S.createElement(z._23, {
                        bold: !0,
                        type: z._28.H5
                    }, Object(m.d)("Introducing: New Chatter Announcements!", "RitualsOnboardingSticky"))), S.createElement(z.V, {
                        margin: {
                            bottom: .5
                        }
                    }, S.createElement(z._23, {
                        type: z._28.Span
                    }, Object(m.d)("New chatter announcements are now active in your channel, making it easier to welcome new people.", "RitualsOnboardingSticky")), S.createElement(z._23, null, S.createElement(be.a, {
                        onClick: this.props.onClick,
                        to: "/" + this.props.channelLogin + "/dashboard/settings",
                        "data-test-selector": "rituals-sticky-link"
                    }, Object(m.d)("Manage in Dashboard", "RitualsOnboardingSticky"))))), S.createElement(z._19, {
                        alignItems: z.c.Center,
                        background: z.m.Alt2,
                        borderBottom: !0,
                        color: z.F.Alt2,
                        display: z.H.Flex,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, S.createElement(z._10, {
                        asset: z._11.Lock,
                        height: 12,
                        width: 12
                    }), S.createElement(z.V, {
                        display: z.H.Inline,
                        margin: {
                            left: .5
                        }
                    }, S.createElement(z._23, {
                        fontSize: z.L.Size8,
                        type: z._28.Span
                    }, Object(m.d)("You see this because you own this channel", "RitualsOnboardingSticky")))), S.createElement(z._19, {
                        attachRight: !0,
                        attachTop: !0,
                        padding: {
                            x: .5,
                            top: 1
                        },
                        position: z._4.Absolute
                    }, S.createElement(z.v, {
                        ariaLabel: Object(m.d)("Close", "RitualsOnboardingSticky"),
                        icon: z._11.Close,
                        onClick: this.props.onDismiss,
                        size: z.x.Small,
                        type: z.w.Secondary,
                        "data-test-selector": "rituals-sticky-dismiss-button"
                    })))
                }, t
            }(S.PureComponent),
            ct = "seenNewChatterAnnouncementSticky",
            dt = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.onClick = function() {
                        Object(ot.c)({
                            action: at.a.Click,
                            channelID: t.props.channelID
                        })
                    }, t.onDismiss = function() {
                        m.k.set(ct, !0), t.setState({
                            isDismissed: !0
                        }), Object(ot.c)({
                            action: at.a.Dismiss,
                            channelID: t.props.channelID
                        })
                    }, t.state.isDismissed = m.k.get(ct, !1), t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return !this.props.data || this.props.data.loading || this.props.data.error ? null : this.props.data.channel.settings.isRitualsEnabled ? this.state.isDismissed ? null : S.createElement(lt, {
                        channelLogin: this.props.channelLogin,
                        onClick: this.onClick,
                        onDismiss: this.onDismiss
                    }) : null
                }, t
            }(S.Component),
            ut = Object(_.compose)(Object(k.a)(function(e) {
                var t = Object(y.c)(e);
                return {
                    currentUserID: t && t.id
                }
            }, null), Object(C.a)(st, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: r
            }), Object(it.a)(function(e) {
                return {
                    query: st,
                    variables: {
                        id: e.channelID
                    },
                    topic: Object(W.h)(e.channelID),
                    type: V.c.UpdatedChannelChatProperty,
                    mutator: function(e, t) {
                        return t.channel.settings.isRitualsEnabled = e.data.is_rituals_enabled, t
                    },
                    skip: r(e)
                }
            }))(dt),
            pt = n("uXDg"),
            mt = n("QPF3"),
            ht = n("qzJ+"),
            gt = n("m4HT"),
            ft = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleWhisperCommand = function(e) {
                        var n = Object(je.o)(e),
                            i = n.recipientLogin,
                            a = n.body;
                        if (!i || !a) return {
                            preserveInput: !0,
                            deferred: Promise.resolve({
                                notice: Object(m.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                            })
                        };
                        if (t.props.isEmbedded || t.props.isPopout) return {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                            })
                        };
                        if (i.toLowerCase() === t.props.userLogin) return {
                            deferred: Promise.resolve({
                                notice: Object(m.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                            })
                        };
                        if (t.props.userID) return t.initiateWhisper(i, a)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return S.createElement(M, {
                        command: "w",
                        handler: this.handleWhisperCommand
                    })
                }, t.prototype.initiateWhisper = function(e, t) {
                    var n = this;
                    return {
                        deferred: new Promise(function(a, r) {
                            return u.__awaiter(n, void 0, void 0, function() {
                                var n, s, o, l;
                                return u.__generator(this, function(c) {
                                    switch (c.label) {
                                        case 0:
                                            return c.trys.push([0, 2, , 3]), [4, i(e)];
                                        case 1:
                                            return n = c.sent(), [3, 3];
                                        case 2:
                                            return s = c.sent(), m.i.warn(s, "Failed to fetch user targeted by whisper command.", {
                                                recipientLogin: e
                                            }), [2, r(s)];
                                        case 3:
                                            return n ? [3, 4] : [2, a({
                                                notice: Object(m.d)("No user matching that login.", "WhisperCommandHandler")
                                            })];
                                        case 4:
                                            return c.trys.push([4, 6, , 7]), [4, Object(ht.a)({
                                                currentUserID: this.props.userID,
                                                emotes: this.props.emoteMap || {},
                                                message: t,
                                                recipientUserID: n
                                            })];
                                        case 5:
                                            return c.sent(), [3, 7];
                                        case 6:
                                            return o = c.sent(), m.i.error(o, "Failed to send whisper using whisper command.", {
                                                currentUserID: this.props.userID,
                                                recipientUserID: n
                                            }), [2, a({
                                                notice: Object(m.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                            })];
                                        case 7:
                                            return l = Object(gt.a)(this.props.userID, n), this.props.openThread(l), [2, a({})]
                                    }
                                })
                            })
                        })
                    }
                }, t
            }(S.Component),
            vt = Object(k.a)(null, function(e) {
                return Object(E.bindActionCreators)({
                    openThread: function(e) {
                        return Object(pt.l)({
                            threadID: e,
                            collapsed: !0
                        }, Object(mt.a)())
                    }
                }, e)
            })(ft),
            bt = n("qkCi"),
            kt = n("NPzy"),
            yt = 200,
            St = function() {
                return function(e) {
                    var t = this;
                    this.resetWithChannelID = function(e) {
                        t.activeChatterIDs = new Set, t.activeChatters = {}, t.channelID = e, t.currentUserID = null, t.isDirty = !0
                    }, this.getActiveChatters = function() {
                        return t.isDirty = !1, Object.keys(t.activeChatters).map(function(e) {
                            return t.activeChatters[e]
                        })
                    }, this.setCurrentUserID = function(e) {
                        t.currentUserID = e, t.activeChatterIDs.has(e) && (t.isDirty = !0, t.removeActiveChatter(e))
                    }, this.consumeChatEvent = function(e) {
                        switch (e.type) {
                            case bt.a.Action:
                            case bt.a.Post:
                            case bt.a.PostWithMention:
                            case bt.a.Resubscription:
                            case bt.a.Subscription:
                                var n = e;
                                t.handleActiveChatter(n.user);
                                break;
                            case bt.a.Ritual:
                                var i = e.message;
                                t.handleActiveChatter(i.user)
                        }
                    }, this.handleActiveChatter = function(e) {
                        e.userID && e.userID !== t.channelID && e.userID !== t.currentUserID && (t.activeChatterIDs.has(e.userID) ? (t.activeChatterIDs.delete(e.userID), t.addActiveChatter(e)) : (t.addActiveChatter(e), t.trimActiveChatters(), t.isDirty = !0))
                    }, this.addActiveChatter = function(e) {
                        e.userID && (t.activeChatterIDs.add(e.userID), t.activeChatters[e.userID] = e)
                    }, this.removeActiveChatter = function(e) {
                        t.activeChatterIDs.delete(e), delete t.activeChatters[e]
                    }, this.trimActiveChatters = function() {
                        if (!(t.activeChatterIDs.size <= yt))
                            for (var e = t.activeChatterIDs.size - yt, n = t.activeChatterIDs.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveChatter(a)
                            }
                    }, this.resetWithChannelID(e)
                }
            }(),
            Ct = n("mwvJ"),
            _t = 1e3,
            Et = 250,
            Nt = 0,
            wt = 200,
            Dt = function() {
                function e(e, t) {
                    void 0 === e && (e = Et), void 0 === t && (t = function() {});
                    var n = this;
                    this.maxSize = e, this.onBufferUpdate = t, this.setDelay = function(e) {
                        n.delayDuration = e
                    }, this.setCurrentUserLogin = function(e) {
                        n.currentUserLogin = e
                    }, this.consumeChatEvent = function(e) {
                        var t = !1;
                        switch (e.type) {
                            case bt.a.Action:
                            case bt.a.Post:
                            case bt.a.PostWithMention:
                                var i = e;
                                if (i.user.userID && n.blockedUsers.has(i.user.userID)) return;
                                var a = i.messageParts[0];
                                if (a && a.type === Ct.a.Text && a.content.startsWith(":act ")) return;
                                t = !n.isOwnMessage(i);
                                break;
                            case bt.a.Resubscription:
                                var r = e;
                                t = !n.isOwnMessage(r) && void 0 !== r.messageParts;
                                break;
                            case bt.a.Ban:
                            case bt.a.Timeout:
                                var s = e.userLogin;
                                if (n.moderatedUsers.has(s)) return;
                                [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                    return e.event
                                })].forEach(function(e) {
                                    e.forEach(function(e) {
                                        e.user && s === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0)
                                    })
                                }), n.moderatedUsers.add(s), setTimeout(n.unmoderateUser(s), _t);
                                break;
                            case bt.a.Disconnected:
                                return;
                            case bt.a.Reconnect:
                                if (n.buffer.find(function(t) {
                                        return t.id === e.id
                                    }) || n.delayedMessageBuffer.find(function(t) {
                                        return t.event.id === e.id
                                    })) return;
                                break;
                            case bt.a.Clear:
                                n.delayedMessageBuffer = [], n.buffer = []
                        }
                        n.delayedMessageBuffer.push({
                            event: e,
                            time: Date.now(),
                            shouldDelay: t
                        })
                    }, this.unmoderateUser = function(e) {
                        return function() {
                            n.moderatedUsers.delete(e)
                        }
                    }, this.isOwnMessage = function(e) {
                        var t = e.user;
                        return !(!n.currentUserLogin || !t || t.userLogin !== n.currentUserLogin)
                    }, this.delayedMessageBuffer = [], this.buffer = [], this.moderatedUsers = new Set, this.blockedUsers = new Set, this._isDirty = !1, this.throttlingDuration = wt, this.delayDuration = Nt, this.currentUserLogin = null, this.flushInterval = setInterval(function() {
                        return n.flushRawMessages()
                    }, this.throttlingDuration), this.setBlockedUsers = this.setBlockedUsers.bind(this)
                }
                return e.prototype.shutdown = function() {
                    this.flushInterval && clearInterval(this.flushInterval)
                }, e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e.prototype.toArray = function() {
                    return this.buffer = this.buffer.slice(-this.maxSize), this._isDirty = !1, this.buffer
                }, e.prototype.isDeletable = function(e) {
                    return void 0 !== e.deleted
                }, e.prototype.flushRawMessages = function() {
                    var e = this,
                        t = [],
                        n = Date.now();
                    this.delayedMessageBuffer.forEach(function(i) {
                        var a = i.event,
                            r = i.time,
                            s = i.shouldDelay;
                        r <= n - e.delayDuration || !s ? e.isDeletable(a) && a.deleted || (e.buffer.push(a), e._isDirty = !0, e.onBufferUpdate()) : t.push({
                            event: a,
                            time: r,
                            shouldDelay: s
                        })
                    }), this.delayedMessageBuffer = t
                }, Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "moderatedUserCount", {
                    get: function() {
                        return this.moderatedUsers.size
                    },
                    enumerable: !0,
                    configurable: !0
                }), e
            }(),
            Tt = n("INp2"),
            It = n("6Agf"),
            Ot = n("aUOx"),
            Mt = n("l21v"),
            xt = n("Ncf8"),
            Ut = n("YhVV"),
            Rt = function() {
                function e(e, t, n) {
                    var i = this;
                    this.onJoinedEvent = function(e) {
                        return i.postMessage({
                            type: bt.a.Connected,
                            id: Object(Tt.a)("connected")
                        })
                    }, this.onDisconnectedEvent = function(e) {
                        return i.postMessage(function(e) {
                            return {
                                type: bt.a.Disconnected,
                                id: Object(Tt.a)("disconnected"),
                                reason: e
                            }
                        }(e.reason))
                    }, this.onReconnectingEvent = function(e) {
                        return i.postMessage({
                            type: bt.a.Reconnect,
                            id: Object(Tt.a)("reconnect")
                        })
                    }, this.onHostingEvent = function(e) {
                        return i.postMessage(function(e) {
                            return {
                                type: bt.a.Hosting,
                                id: Object(Tt.a)("hosting"),
                                hostedChannel: e
                            }
                        }(e.target))
                    }, this.onUnhostEvent = function(e) {
                        return i.postMessage(function(e) {
                            return {
                                type: bt.a.Unhost,
                                id: Object(Tt.a)("unhost-" + e)
                            }
                        }(e.channel))
                    }, this.onChatMessageEvent = function(e) {
                        i.postMessage(i.convertMessage(e))
                    }, this.onChatActionEvent = function(e) {
                        var t = i.bitsConfig || j.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0,
                            a = s(bt.a.Action, e.action, e.message.user, t, i.shouldBlockLinks(e.message.user), n);
                        i.postMessage(a)
                    }, this.onChatNoticeEvent = function(e) {
                        var t = function(e, t, n) {
                            return {
                                type: bt.a.Notice,
                                id: Object(Tt.a)("notice"),
                                channel: e,
                                msgid: t,
                                message: n
                            }
                        }(e.channel, e.msgid, e.body);
                        i.postMessage(t)
                    }, this.onTimeoutEvent = function(e) {
                        i.onModerationEvent(bt.a.Timeout, e)
                    }, this.onBanEvent = function(e) {
                        i.onModerationEvent(bt.a.Ban, e)
                    }, this.onModerationEvent = function(e, t) {
                        i.postMessage(Object(xt.a)(e, t.userLogin, t.reason, t.duration))
                    }, this.onSubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "$4.99"
                        }
                        i.postMessage(function(e, t, n, i, a) {
                            var r = Object(Mt.a)("", a, j.a, !1);
                            return u.__assign({}, r, {
                                type: bt.a.Subscription,
                                id: Object(Tt.a)(t + "-sub"),
                                channel: e.slice(1),
                                isPrime: n,
                                userLogin: t,
                                tier: i
                            })
                        }(e.channel, e.user.displayName, e.methods.prime, t, e.user))
                    }, this.onSubscriptionGiftEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "custom"
                        }
                        i.postMessage(function(e, t, n, i, a) {
                            return {
                                type: bt.a.SubGift,
                                id: Object(Tt.a)(t + "-sub"),
                                channel: e.slice(1),
                                isPrime: n,
                                userLogin: t,
                                tier: i,
                                recipient: a
                            }
                        }(e.channel, e.user.displayName, e.methods.prime, t, e.recipientName))
                    }, this.onBitsCharityEvent = function(e) {
                        i.postMessage(function(e, t, n, i, a, r) {
                            return {
                                type: bt.a.BitsCharity,
                                id: Object(Tt.a)("charity"),
                                total: e,
                                charityName: t,
                                daysLeft: n,
                                hoursLeft: i,
                                hashtag: a,
                                learnMore: r
                            }
                        }(e.total, e.charityName, e.daysLeft, e.hoursLeft, e.hashtag, e.learnMore))
                    }, this.onResubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "$4.99"
                        }
                        i.postMessage(o(e.channel, e.user.displayName, e.methods.prime, e.months, t, e.body, e.user))
                    }, this.onRoomModsEvent = function(e) {
                        return i.postMessage(function(e) {
                            return {
                                type: bt.a.RoomMods,
                                id: Object(Tt.a)("roommods"),
                                moderatorLogins: e
                            }
                        }(e.usernames))
                    }, this.onRoomStateEvent = function(e) {
                        return i.postMessage(function(e) {
                            return {
                                type: bt.a.RoomState,
                                id: Object(Tt.a)("roomstate"),
                                state: e
                            }
                        }(e.state))
                    }, this.onSlowModeEvent = function(e) {
                        return i.postMessage(function(e, t) {
                            return {
                                type: bt.a.SlowMode,
                                id: Object(Tt.a)("slowmode"),
                                enabled: e,
                                length: t
                            }
                        }(e.enabled, e.length))
                    }, this.onEmoteOnlyModeEvent = function(e) {
                        return i.postMessage(function(e) {
                            return {
                                type: bt.a.EmoteOnlyMode,
                                id: Object(Tt.a)("emoteonlymode"),
                                enabled: e
                            }
                        }(e.enabled))
                    }, this.onFollowerOnlyModeEvent = function(e) {
                        return i.postMessage(function(e, t) {
                            return {
                                type: bt.a.FollowerOnlyMode,
                                id: Object(Tt.a)("follower-only"),
                                enabled: e,
                                length: t
                            }
                        }(e.enabled, e.length))
                    }, this.onSubscriberOnlyModeEvent = function(e) {
                        return i.postMessage(function(e) {
                            return {
                                type: bt.a.SubscriberOnlyMode,
                                id: Object(Tt.a)("subscriber-only"),
                                enabled: e
                            }
                        }(e.enabled))
                    }, this.onClearChatEvent = function(e) {
                        return i.postMessage({
                            type: bt.a.Clear,
                            id: Object(Tt.a)("clear")
                        })
                    }, this.onRaidEvent = function(e) {
                        return i.postMessage(function(e, t, n) {
                            return {
                                type: bt.a.Raid,
                                id: Object(Tt.a)("raid"),
                                channel: e,
                                userLogin: t,
                                params: n
                            }
                        }(e.channel, e.userLogin, e.params))
                    }, this.onUnraidEvent = function(e) {
                        return i.postMessage(function(e, t, n) {
                            return {
                                type: bt.a.Unraid,
                                id: Object(Tt.a)("unraid"),
                                channel: e,
                                userLogin: t,
                                message: n
                            }
                        }(e.channel, e.userLogin, e.message))
                    }, this.onRitualEvent = function(e) {
                        i.postMessage(function(e, t) {
                            return {
                                type: bt.a.Ritual,
                                id: Object(Tt.a)(t.user.userLogin + "-" + e + "-ritual"),
                                ritualType: e,
                                message: t
                            }
                        }(e.type, i.convertMessage(e)))
                    }, this.onBadgesUpdatedEvent = function(e) {
                        return i.postMessage(function(e, t) {
                            return {
                                type: bt.a.BadgesUpdated,
                                id: Object(Tt.a)("updateBadges"),
                                userName: e,
                                badges: t
                            }
                        }(e.username, e.badges))
                    }, this.onPurchaseEvent = function(e) {
                        var t = i.bitsConfig || j.a;
                        i.postMessage(function(e, t, n, i) {
                            return {
                                bitsConfig: i,
                                message: t,
                                purchase: e,
                                timestamp: n,
                                id: Object(Tt.a)(t.user.userLogin + "-purchase"),
                                type: bt.a.Purchase
                            }
                        }(e.purchase, i.convertMessage(e), e.timestamp, t))
                    }, this.onCrateEvent = function(e) {
                        i.postMessage(function(e, t) {
                            return {
                                type: bt.a.CrateGift,
                                id: Object(Tt.a)("crate"),
                                message: e,
                                selectedCount: t
                            }
                        }(i.convertMessage(e), e.selectedCount))
                    }, this.convertMessage = function(e) {
                        var t = i.bitsConfig || j.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0;
                        return s(bt.a.Post, e.message.body, e.message.user, t, i.shouldBlockLinks(e.message.user), n)
                    }, this.logger = m.i.withCategory("chat-service"), this.logger.debug("Created"), this.userLogin = e, this.channelLogin = t, this.service = m.n.tmi, this.client = m.n.tmi.client, this.postMessage = n, this.disabled = m.n.tmi.disabled
                }
                return e.prototype.join = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Joining channel and binding all event listeners"), [4, this.service.awaitParted()];
                                case 1:
                                    return e.sent(), this.connectHandlers(), [4, this.service.join(this.channelLogin)];
                                case 2:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.part = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Parting channel and unbinding all event listeners"), this.client.events.removeAll(), [4, this.service.part(this.channelLogin)];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.sendMessage = function(e) {
                    var t = this,
                        n = Object(je.l)(e, this.channelLogin);
                    return n.handled ? n.result && n.result.deferred && n.result.deferred.then(function(e) {
                        var n = e.notice;
                        n && t.postMessage(Object(Ot.a)(n))
                    }) : this.client.sendCommand(this.channelLogin, e).catch(function(e) {
                        m.i.warn("Failed to send message, or message timeout", e)
                    }), n.result
                }, e.prototype.updateEmotes = function(e) {
                    this.selfEmotes = Object(Ut.a)(e), this.client.updateEmoteSets(e)
                }, e.prototype.updateChannelBadges = function(e) {
                    this.client.updateChannelBadges(this.channelLogin, e)
                }, e.prototype.updateBitsConfig = function(e) {
                    this.bitsConfig = e
                }, e.prototype.updateBlockLinks = function(e) {
                    this.blockLinks = e
                }, e.prototype.connectHandlers = function() {
                    this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.followersonly(this.onFollowerOnlyModeEvent), this.client.events.slowmode(this.onSlowModeEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                }, e.prototype.shouldBlockLinks = function(e) {
                    return e.username !== this.channelLogin && e.userType !== It.a.Staff && e.userType !== It.a.GlobalMod && e.userType !== It.a.Moderator && this.blockLinks
                }, e
            }(),
            Ft = function() {
                return function(e, t, n) {
                    this.channelID = e, this.sessionUserID = t, this.unsubscribe = m.j.subscribe({
                        topic: Object(W.d)(this.sessionUserID, this.channelID),
                        onMessage: function(e) {
                            switch (e.data.moderation_action) {
                                case V.b.AutoModRejected:
                                    var t = function(e, t, n, i) {
                                        var a = {
                                                badges: null,
                                                bits: 0,
                                                color: "",
                                                displayName: "",
                                                id: "",
                                                userID: n,
                                                username: n,
                                                userType: It.a.User,
                                                emotes: null
                                            },
                                            r = Object(Mt.a)(t, a, j.a, !1);
                                        return {
                                            type: bt.a.AutoModRejectedPrompt,
                                            id: function(e) {
                                                return e + "-automod-rejected"
                                            }(e),
                                            category: i,
                                            isAutoModAction: !0,
                                            rejectedMessage: u.__assign({}, r, {
                                                type: bt.a.Post,
                                                id: e
                                            })
                                        }
                                    }(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    n(t);
                                    break;
                                case V.e.AutoModMessageRejected:
                                    n({
                                        id: Object(Tt.a)("automod-message-rejected"),
                                        type: bt.a.AutoModMessageRejected,
                                        isTargeted: !0,
                                        isAutoModAction: !0
                                    });
                                    break;
                                case V.e.AutoModMessageApproved:
                                    n({
                                        id: Object(Tt.a)("automod-message-allowed"),
                                        type: bt.a.AutoModMessageAllowed,
                                        isTargeted: !0,
                                        isAutoModAction: !0
                                    });
                                    break;
                                case V.e.AutoModMessageDenied:
                                    n({
                                        id: Object(Tt.a)("automod-message-denied"),
                                        type: bt.a.AutoModMessageDenied,
                                        isTargeted: !0,
                                        isAutoModAction: !0
                                    })
                            }
                        }
                    })
                }
            }(),
            Lt = n("QFW6"),
            jt = n("CSlQ"),
            At = n("9fnI"),
            Bt = n("VAT8"),
            Pt = function() {
                function e() {}
                return e.fetchChannelsList = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return u.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, _e.a.get("/kraken/autohost/list")];
                                case 1:
                                    return e = n.sent(), [2, this.deserialize(e)];
                                case 2:
                                    return t = n.sent(), m.i.error(t, "Couldn't fetch autohost list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.setChannelsList = function(e) {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return u.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, _e.a.put("/kraken/autohost/list", {
                                        body: {
                                            targets: e.join(",")
                                        }
                                    })];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), m.i.error(n, "Couldn't update autohost list"), [2, e];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.deserialize = function(e) {
                    return e.body ? e.body.targets.map(function(e) {
                        return e._id.toString()
                    }) : []
                }, e
            }(),
            Vt = (n("7X7f"), n("QMHY")),
            Ht = "autohost-notifications-dismissed",
            Wt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.dismiss = function() {
                        t.setState({
                            isDismissed: !0
                        }), t.track(G.SpadeEventType.AutohostChatDismiss);
                        var e = t.getAutohostNotificationsDismissed();
                        e[t.props.data.user.id] = {
                            dismissedDate: (new Date).getTime()
                        }, t.setAutohostNotificationsDismissed(e)
                    }, t.addChannelToAutohost = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return u.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, Pt.fetchChannelsList()];
                                    case 1:
                                        return e = t.sent().concat([this.props.data.user.id]), this.setState({
                                            autohostChannels: e
                                        }), Pt.setChannelsList(e), this.track(G.SpadeEventType.AutohostChatYes), [2]
                                }
                            })
                        })
                    }, t.trackSettingsClick = function() {
                        t.track(G.SpadeEventType.AutohostChatSettings)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return u.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, Pt.fetchChannelsList()];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        autohostChannels: e
                                    }), this.isShowing && this.track(G.SpadeEventType.AutohostChatImpression), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    if (!this.isShowing) return null;
                    var e = Object(m.d)("You are now hosting {channel}", {
                            channel: this.props.data.user.displayName
                        }, "AutohostPrompt"),
                        t = Object(m.d)("Auto host this channel whenever you're offline?", "AutohostPrompt"),
                        n = Object(m.d)("Yes", "AutohostPrompt"),
                        i = Object(m.d)("Settings", "AutohostPrompt");
                    return S.createElement(z._19, {
                        background: z.m.Base,
                        className: "autohost-prompt",
                        margin: {
                            x: 2
                        },
                        position: z._4.Relative
                    }, S.createElement(z.p, {
                        size: z.r.Medium,
                        direction: z.q.TopLeft,
                        show: !0
                    }, S.createElement(z._19, {
                        alignItems: z.c.Center,
                        borderBottom: !0,
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        justifyContent: z.U.Around,
                        padding: 1
                    }, S.createElement(z.V, {
                        position: z._4.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, S.createElement(z.v, {
                        ariaLabel: Object(m.d)("Close", "AutohostPrompt"),
                        size: z.x.Small,
                        type: z.w.Secondary,
                        "data-test-selector": "autohost-dismiss-button",
                        icon: z._11.Close,
                        onClick: this.dismiss
                    })), S.createElement(z.l, {
                        imageAlt: this.props.data.user.displayName,
                        imageSrc: this.props.data.user.profileImageURL,
                        size: 30
                    }), S.createElement(z.V, {
                        className: "autohost-prompt__hosting-message",
                        display: z.H.Flex,
                        padding: {
                            top: .5
                        }
                    }, S.createElement(z._10, {
                        asset: z._11.Check
                    }), S.createElement(z.Q, {
                        margin: {
                            left: .5
                        }
                    }, S.createElement(z._23, null, e)))), S.createElement(z.V, {
                        className: "autohost-prompt__prompt",
                        justifyContent: z.U.Center,
                        display: z.H.Flex,
                        padding: 1
                    }, S.createElement(z._23, null, t), S.createElement(z._34, {
                        gutterSize: z._36.ExtraSmall,
                        childWidth: z._35.Large
                    }, S.createElement("div", null, S.createElement(z.u, {
                        "data-test-selector": "autohost-yes-button",
                        fullWidth: !0,
                        onClick: this.addChannelToAutohost
                    }, n)), S.createElement("div", null, S.createElement(z.u, {
                        "data-test-selector": "autohost-settings-button",
                        fullWidth: !0,
                        onClick: this.trackSettingsClick,
                        type: z.z.Hollow,
                        linkTo: "https://twitch.tv/settings/profile"
                    }, i))))))
                }, Object.defineProperty(t.prototype, "isShowing", {
                    get: function() {
                        return !this.state.isDismissed && !!this.props.hostedChannelLogin && !this.props.data.loading && !this.props.data.error && this.props.data.user && !!this.state.autohostChannels && !this.state.autohostChannels.includes(this.props.data.user.id) && !this.getAutohostNotificationsDismissed()[this.props.data.user.id]
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.track = function(e) {
                    ! function(e, t) {
                        m.m.track(e, u.__assign({
                            time: Date.now()
                        }, t))
                    }(e, {
                        user_id: this.props.data.currentUser.id,
                        hosting_channel_id: this.props.data.currentUser.id,
                        hosted_channel_id: this.props.data.user.id
                    })
                }, t.prototype.getAutohostNotificationsDismissed = function() {
                    return m.k.get(Ht, {})
                }, t.prototype.setAutohostNotificationsDismissed = function(e) {
                    return m.k.set(Ht, e)
                }, t = u.__decorate([Object(C.a)(Vt, {
                    skip: function(e) {
                        return !e.hostedChannelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.hostedChannelLogin
                            }
                        }
                    }
                })], t)
            }(S.Component),
            Gt = n("3T7g"),
            qt = n("RbGx"),
            zt = n("5Nu7"),
            Qt = n("g7wA"),
            $t = n("O9wU"),
            Jt = n("1OO3"),
            Kt = n("l669"),
            Yt = (n("B88H"), "chat-ban-button"),
            Zt = "chat-unban-button",
            Xt = "chat-timeout-button",
            en = "chat-deleted-message-placeholder",
            tn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        alwaysShowMessage: !1
                    }, t.renderModerationIcons = function() {
                        if (!t.props.isCurrentUserModerator || !t.props.showModerationIcons) return null;
                        var e = t.onBanUser,
                            n = z._11.Ban,
                            i = Object(m.d)("Ban", "ChatMessageEvent"),
                            a = Yt;
                        return t.props.message.deleted && !t.state.alwaysShowMessage && (e = t.onUnbanUser, n = z._11.FollowCheck, i = Object(m.d)("Unban", "ChatMessageEvent"), a = Zt), S.createElement(z.V, {
                            display: z.H.Inline,
                            className: "chat-line__mod-icons"
                        }, S.createElement("button", {
                            className: "mod-icon",
                            onClick: e,
                            "data-a-target": a
                        }, S.createElement(z._31, {
                            label: i
                        }, S.createElement(z._10, {
                            width: 16,
                            height: 16,
                            type: z._12.Inherit,
                            asset: n
                        }))), S.createElement("button", {
                            className: "mod-icon",
                            onClick: t.timeoutUser,
                            "data-a-target": Xt
                        }, S.createElement(z._31, {
                            label: Object(m.d)("Timeout", "ChatMessageEvent")
                        }, S.createElement(z._10, {
                            width: 16,
                            height: 16,
                            type: z._12.Inherit,
                            asset: z._11.Timeout
                        }))))
                    }, t.renderMessageBody = function() {
                        if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                            var e = Object(m.d)("message deleted", "ChatLine");
                            return t.props.isCurrentUserModerator ? S.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": en
                            }, S.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + e + ">")) : S.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": en
                            }, "<" + e + ">")
                        }
                        return Object(Qt.h)(t.props.message.messageParts, t.props.currentUserDisplayName, t.props.currentUserLogin)
                    }, t.onBanUser = function() {
                        t.props.onBanUser(t.props.message.user.userLogin)
                    }, t.onUnbanUser = function() {
                        t.props.onUnbanUser(t.props.message.user.userLogin)
                    }, t.timeoutUser = function() {
                        t.props.onBanUser(t.props.message.user.userLogin, 600)
                    }, t.alwaysShowMessage = function(e) {
                        e && e.preventDefault(), t.setState({
                            alwaysShowMessage: !0
                        })
                    }, t.usernameClickHandler = function() {
                        t.props.onUsernameClick(t.props.message.user.userLogin, $t.a.chat_message, t.props.message.id)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.badgeSets,
                        n = e.className,
                        i = e.message,
                        a = e.showTimestamps,
                        r = {},
                        s = ": ";
                    i.type === bt.a.Action && (r = {
                        color: i.user.color
                    }, s = " ");
                    var o = null;
                    return a && (o = Object(Qt.r)(i.timestamp)), S.createElement("div", {
                        className: B(n, "chat-line__message"),
                        style: r,
                        "data-a-target": "chat-line-message"
                    }, o, this.renderModerationIcons(), S.createElement(Gt.b, {
                        badgeSets: t,
                        badgesToRender: i.badges
                    }), S.createElement("button", {
                        onClick: this.usernameClickHandler,
                        className: "chat-line__username"
                    }, S.createElement(zt.a, {
                        userData: i.user
                    })), S.createElement("span", {
                        key: "separator"
                    }, s), this.renderMessageBody())
                }, t
            }(S.Component),
            nn = Object(_.compose)(Object(k.a)(void 0, function(e) {
                return Object(E.bindActionCreators)({
                    onUsernameClick: v.d
                }, e)
            }), Object(Jt.a)(function(e) {
                return {
                    channelID: e.channelID,
                    onPushMessage: e.onPushMessage
                }
            }), function() {
                var e = this;
                return Object(C.a)(Kt, {
                    props: function(t) {
                        return {
                            onUnbanUser: function(n) {
                                return u.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return u.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 5];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate(Object(H.a)({
                                                    channelID: t.ownProps.channelID,
                                                    bannedUserLogin: n
                                                }))];
                                            case 2:
                                                return i.sent(), t.ownProps.onPushMessage(Object(Ot.a)(function(e) {
                                                    return Object(m.d)("{bannedUserLogin} is no longer banned from this room.", {
                                                        bannedUserLogin: e
                                                    }, "UnbanUserMutation")
                                                }(n))), [3, 4];
                                            case 3:
                                                return e = i.sent(), m.i.error(e, "Unable to ban user"), t.ownProps.onPushMessage(Object(Ot.a)(l())), [3, 4];
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                t.ownProps.onPushMessage(Object(Ot.a)(l())), i.label = 6;
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(tn),
            an = n("3LYq"),
            rn = n("IEOs"),
            sn = {
                badges: {
                    twitchbot: "1"
                },
                bits: 0,
                color: "#6441A5",
                displayName: "AutoMod",
                id: "automod",
                userID: "automod",
                username: "automod",
                userType: It.a.GlobalMod,
                emotes: null
            },
            on = {
                VoHiYo: {
                    displayName: "VoHiYo",
                    id: "81274",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/81274/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/3.0 3.0x",
                    token: "VoHiYo"
                }
            },
            ln = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isResolved: !1
                    }, t.allowAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        }), t.props.allowRejectedChatMessage && t.props.message.type === bt.a.AutoModRejectedPrompt && t.props.allowRejectedChatMessage(Object(H.a)({
                            id: t.props.message.rejectedMessage.id
                        }))
                    }, t.denyAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        }), t.props.denyRejectedChatMessage && t.props.message.type === bt.a.AutoModRejectedPrompt && t.props.denyRejectedChatMessage(Object(H.a)({
                            id: t.props.message.rejectedMessage.id
                        }))
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e;
                    switch (this.props.message.type) {
                        case bt.a.AutoModRejectedPrompt:
                            e = function(e) {
                                var t;
                                switch (e) {
                                    case "aggressive":
                                        t = Object(m.d)("aggressive", "AutoModLine");
                                        break;
                                    case "sexual":
                                        t = Object(m.d)("sexual", "AutoModLine");
                                        break;
                                    case "profanity":
                                        t = Object(m.d)("profanity", "AutoModLine");
                                        break;
                                    case "identity":
                                        t = Object(m.d)("identity", "AutoModLine");
                                        break;
                                    default:
                                        return Object(m.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                                }
                                return Object(m.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                                    category: t
                                }, "AutoModLine")
                            }(this.props.message.category);
                            break;
                        case bt.a.AutoModMessageRejected:
                            e = Object(m.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                            break;
                        case bt.a.AutoModMessageAllowed:
                            e = Object(m.d)("Mods have allowed your message. Happy chatting!", "AutoModLine"), e += " VoHiYo";
                            break;
                        case bt.a.AutoModMessageDenied:
                            e = Object(m.d)("Mods have removed your message.", "AutoModLine");
                            break;
                        default:
                            throw new Error("Invalid message type")
                    }
                    var t = Object(Mt.a)(e, sn, j.a, !1, on);
                    switch (this.props.message.type) {
                        case bt.a.AutoModRejectedPrompt:
                            if (this.state.isResolved) return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.e)());
                            var n = ["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"];
                            return S.createElement(z.V, {
                                className: "chat-line__message"
                            }, S.createElement(qt.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: t.badges
                            }), S.createElement(zt.a, {
                                userData: t.user
                            }), S.createElement("span", {
                                key: "separator"
                            }, ": "), Object(Qt.h)(t.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin), S.createElement(z.V, {
                                key: "automod-prompt",
                                className: "chat-line__nested-component--float-right"
                            }, S.createElement(z.u, {
                                size: z.x.Small,
                                onClick: this.allowAutoModRejectedMessage,
                                type: z.z.Text
                            }, Object(m.d)("Allow", "AutoModLine")), S.createElement(z._23, {
                                type: z._28.Span
                            }, "•"), S.createElement(z.u, {
                                size: z.x.Small,
                                onClick: this.denyAutoModRejectedMessage,
                                type: z.z.Text
                            }, Object(m.d)("Deny", "AutoModLine"))), S.createElement(nn, u.__assign({}, this.props, {
                                isDeleted: !1,
                                showTimestamps: !1,
                                className: B(n),
                                message: this.props.message.rejectedMessage
                            })));
                        case bt.a.AutoModMessageRejected:
                        case bt.a.AutoModMessageAllowed:
                        case bt.a.AutoModMessageDenied:
                            var i = ["chat-line__message", "chat-line__message--special", "chat-line__message--alert"];
                            return S.createElement(z.V, {
                                className: B(i)
                            }, S.createElement(qt.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: t.badges
                            }), S.createElement(zt.a, {
                                userData: t.user
                            }), S.createElement("span", {
                                key: "separator"
                            }, ": "), Object(Qt.h)(t.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin));
                        default:
                            throw new Error("Invalid message type")
                    }
                }, t
            }(S.Component),
            cn = Object(_.compose)(Object(C.a)(an, {
                name: "allowRejectedChatMessage",
                options: {}
            }), Object(C.a)(rn, {
                name: "denyRejectedChatMessage",
                options: {}
            }))(ln),
            dn = n("91zu"),
            un = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.params,
                        t = this.props.data,
                        n = t.channel,
                        i = t.loading,
                        a = t.error;
                    if (i || a) return null;
                    var r = Object(m.d)("{displayName} is raiding with a party of {viewerCount}.", {
                        displayName: S.createElement("strong", null, n.displayName),
                        viewerCount: S.createElement("strong", null, e.viewerCount)
                    }, "RaidIncomingMessage");
                    return S.createElement(z.V, {
                        className: "chat-line__raid",
                        "data-test-selector": "incoming-raid"
                    }, S.createElement(z.V, {
                        display: z.H.Flex,
                        alignItems: z.c.Center
                    }, S.createElement(z.l, {
                        imageAlt: n.displayName,
                        imageSrc: n.profileImageURL,
                        size: 30
                    }), S.createElement(z._19, {
                        color: z.F.Base,
                        margin: {
                            left: 1
                        }
                    }, r)))
                }, t
            }(S.Component),
            pn = Object(C.a)(dn, {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.message.params.login
                        }
                    }
                }
            })(un),
            mn = function(e) {
                return S.createElement("span", null, c()[e.message.msgid])
            };
        (ce || (ce = {})).NewChatter = "new_chatter";
        var hn, gn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderSystemText = function() {
                        if (t.props.event.ritualType === ce.NewChatter) {
                            var e = t.props.event.message,
                                n = e.user.isIntl ? e.user.userDisplayName + " (" + e.user.userLogin + ")" : e.user.userDisplayName;
                            return Object(m.d)("{user} is new here. Say hello!", {
                                user: "@" + n
                            }, "NewChatterRitual")
                        }
                        return ""
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.event.message;
                    if (e.user) {
                        var t = null;
                        e.badges && (t = S.createElement(Gt.b, {
                            badgeSets: this.props.badgeSets,
                            badgesToRender: e.badges
                        }));
                        var n = null;
                        return this.props.showTimestamps && e.timestamp && (n = Object(Qt.r)(e.timestamp)), S.createElement("span", null, this.renderSystemText(), S.createElement("div", {
                            className: "chat-line__ritual--message"
                        }, n, t, S.createElement(zt.a, {
                            userData: e.user
                        }), S.createElement("span", null, " : "), Object(Qt.h)(e.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin)))
                    }
                    return null
                }, t
            }(S.Component),
            fn = n("Cn8s"),
            vn = (n("RkXA"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        drawerOpen: !1
                    }, t.renderBitsLoot = function(e) {
                        return S.createElement(z.V, {
                            key: e.quantity,
                            className: "chat-line__purchase-loot"
                        }, S.createElement(q.a, {
                            bitsConfig: t.props.bitsConfig,
                            count: e.quantity,
                            withImage: !0
                        }))
                    }, t.toggleDrawer = function() {
                        t.setState(function(e) {
                            return {
                                drawerOpen: !e.drawerOpen
                            }
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e, t = this,
                        n = this.props.purchase,
                        i = n.crateLoot,
                        a = n.numCrates,
                        r = n.purchased;
                    if (a > 0) {
                        var s = Object(m.d)("{numCrates, plural, one {Plus # Twitch Crate with {lootCount} rewards!} other {Plus # Twitch Crates with {lootCount} rewards!}}", {
                            numCrates: a,
                            lootCount: i.length
                        }, "SharePurchaseLineRewardText");
                        e = S.createElement(z.V, {
                            className: "chat-line__purchase-reward-text",
                            margin: {
                                top: .5
                            }
                        }, s)
                    }
                    var o, l = i.map(function(e) {
                        switch (e.type) {
                            case fn.a.Badge:
                                return t.renderBadgeLoot(e);
                            case fn.a.Bits:
                                return t.renderBitsLoot(e);
                            case fn.a.Emote:
                                return t.renderEmoteLoot(e);
                            case fn.a.InGameContent:
                                return t.renderIGCLoot(e);
                            default:
                                return ""
                        }
                    });
                    if (i.length <= 2) o = 0 === i.length ? "" : S.createElement(z._19, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: z.c.Center,
                        borderLeft: !0,
                        display: z.H.Flex,
                        flexDirection: z.J.Row,
                        flexShrink: 0,
                        flexWrap: z.K.NoWrap,
                        justifyContent: z.U.Center,
                        padding: .5
                    }, l);
                    else if (this.state.drawerOpen) o = S.createElement("span", {
                        className: "chat-line__purchase-loot-toggle",
                        onClick: this.toggleDrawer,
                        "data-test-selector": "purchase-loot-toggle"
                    }, S.createElement(z._19, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: z.c.Center,
                        borderLeft: !0,
                        display: z.H.Flex,
                        flexDirection: z.J.Row,
                        flexShrink: 0,
                        flexWrap: z.K.NoWrap,
                        justifyContent: z.U.Center,
                        padding: .5
                    }, S.createElement(z._10, {
                        asset: z._11.GlyphArrUp
                    })));
                    else {
                        var c = "+" + (i.length - 1);
                        o = S.createElement("span", {
                            className: "chat-line__purchase-loot-toggle",
                            onClick: this.toggleDrawer,
                            "data-test-selector": "purchase-loot-toggle"
                        }, S.createElement(z._19, {
                            className: "chat-line__purchase-loot-box",
                            alignItems: z.c.Center,
                            borderLeft: !0,
                            display: z.H.Flex,
                            flexDirection: z.J.Row,
                            flexShrink: 0,
                            flexWrap: z.K.NoWrap,
                            justifyContent: z.U.Center,
                            padding: .5
                        }, l[0], S.createElement(z._1, {
                            label: c,
                            type: z._2.Notification
                        })))
                    }
                    var d = i.length <= 2 || !this.state.drawerOpen ? "" : S.createElement(z._19, {
                        className: "chat-line__purchase-loot-drawer",
                        alignItems: z.c.Center,
                        display: z.H.Flex,
                        flexDirection: z.J.Row,
                        flexShrink: 0,
                        flexWrap: z.K.NoWrap,
                        justifyContent: z.U.End,
                        padding: .5,
                        "data-test-selector": "purchase-loot-drawer"
                    }, l);
                    return S.createElement(z._19, {
                        className: "chat-line__purchase",
                        elevation: 1,
                        margin: {
                            bottom: .5,
                            left: 2,
                            right: 2,
                            top: 0
                        }
                    }, S.createElement(z.V, {
                        display: z.H.Flex,
                        flexDirection: z.J.Row,
                        flexWrap: z.K.NoWrap
                    }, S.createElement(z.V, {
                        flexGrow: 0,
                        flexShrink: 0,
                        margin: .5
                    }, S.createElement("img", {
                        className: "chat-line__purchase-boxart",
                        src: r.boxart
                    })), S.createElement(z.V, {
                        flexGrow: 1,
                        margin: .5
                    }, S.createElement(z._19, {
                        fontSize: z.L.Size4
                    }, r.title), e), o), d)
                }, t.prototype.renderBadgeLoot = function(e) {
                    return S.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t.prototype.renderEmoteLoot = function(e) {
                    var t = "//static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/2.0";
                    return S.createElement("img", {
                        key: e.id,
                        className: "chat-line__purchase-loot",
                        src: t
                    })
                }, t.prototype.renderIGCLoot = function(e) {
                    return S.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t
            }(S.Component)),
            bn = (n("+5Qw"), "timeout_success"),
            kn = "ban_success",
            yn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return e.isCurrentUserModerator !== this.props.isCurrentUserModerator || e.showTimestamps !== this.props.showTimestamps || e.showModerationIcons !== this.props.showModerationIcons || !e.doesNotUpdate || d(e.message) && e.message.deleted
                }, t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case bt.a.AutoModMessageRejected:
                        case bt.a.AutoModMessageAllowed:
                        case bt.a.AutoModMessageDenied:
                        case bt.a.AutoModRejectedPrompt:
                            return S.createElement(cn, {
                                channelID: this.props.channelID,
                                message: e,
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                showModerationIcons: this.props.showModerationIcons,
                                currentUserLogin: this.props.currentUserLogin
                            });
                        case bt.a.Connected:
                            return S.createElement(z.V, {
                                className: "chat-line__status",
                                "data-a-target": "chat-welcome-message"
                            }, S.createElement(z._23, {
                                type: z._28.Span
                            }, Object(m.d)("Welcome to the chat room!", "ChatLine")));
                        case bt.a.Disconnected:
                            return e.reason ? S.createElement(z.V, {
                                className: "chat-line__status"
                            }, S.createElement(z._23, {
                                type: z._28.Span
                            }, Object(m.d)("You have been disconnected from chat for the following reason: {reason}", {
                                reason: e.reason
                            }, "ChatLine"))) : S.createElement(z.V, {
                                className: "chat-line__status"
                            }, S.createElement(z._23, {
                                type: z._28.Span
                            }, Object(m.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                        case bt.a.Hosting:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, S.createElement(z._23, {
                                type: z._28.Span
                            }, Object(m.d)("Now hosting {channel}", {
                                channel: e.hostedChannel
                            }, "ChatLine")));
                        case bt.a.Unhost:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, S.createElement(z._23, {
                                type: z._28.Span
                            }, Object(m.d)("No longer hosting.", "ChatLine")));
                        case bt.a.Post:
                        case bt.a.PostWithMention:
                        case bt.a.Action:
                            return d(e) ? S.createElement(nn, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e,
                                isDeleted: e.deleted,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }) : null;
                        case bt.a.Ban:
                        case bt.a.Timeout:
                            return this.props.isCurrentUserModerator ? S.createElement(z.V, {
                                className: "chat-line__moderation"
                            }, Object(Qt.i)(e)) : null;
                        case bt.a.Subscription:
                            return S.createElement(z.V, {
                                className: "chat-line__subscribe"
                            }, Object(Qt.q)(e));
                        case bt.a.SubGift:
                            return S.createElement(z.V, {
                                className: "chat-line__subscribe"
                            }, Object(Qt.p)(e));
                        case bt.a.BitsCharity:
                            return S.createElement(z.V, {
                                className: "chat-line__bits-charity",
                                padding: {
                                    right: 2,
                                    y: .5
                                }
                            }, Object(Qt.a)(e));
                        case bt.a.Resubscription:
                            return S.createElement(z.V, {
                                className: "chat-line__subscribe"
                            }, Object(Qt.l)(e, this.props.showTimestamps, this.props.currentUserDisplayName, this.props.currentUserLogin, this.props.badgeSets));
                        case bt.a.RoomMods:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.m)(e.moderatorLogins));
                        case bt.a.SlowMode:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.n)(e));
                        case bt.a.SubscriberOnlyMode:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.o)(e));
                        case bt.a.FollowerOnlyMode:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.f)(e));
                        case bt.a.EmoteOnlyMode:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.d)(e));
                        case bt.a.Clear:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.b)());
                        case bt.a.Notice:
                            if (function(e) {
                                    return e.msgid in c()
                                }(e)) return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, S.createElement(mn, {
                                message: e
                            }));
                            if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                case bn:
                                case kn:
                                    return null
                            }
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.j)(e));
                        case bt.a.Info:
                            return S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.g)(e));
                        case bt.a.Purchase:
                            var t = e.message.user.isIntl ? e.message.user.userDisplayName + " (" + e.message.user.userLogin + ")" : e.message.user.userDisplayName;
                            return S.createElement(z.V, {
                                className: "chat-line__message--special"
                            }, S.createElement(z.V, {
                                className: "chat-line__status"
                            }, Object(Qt.k)(t, e.purchase.purchased.title, e.purchase.numCrates)), S.createElement(nn, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e.message,
                                isDeleted: !1,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }), S.createElement(vn, {
                                bitsConfig: e.bitsConfig,
                                purchase: e.purchase
                            }));
                        case bt.a.Raid:
                            return S.createElement(pn, {
                                message: e
                            });
                        case bt.a.Unraid:
                            return S.createElement(z.V, {
                                className: "chat-line__raid"
                            }, Object(Qt.t)());
                        case bt.a.CrateGift:
                            return Object(Qt.c)(e);
                        case bt.a.Ritual:
                            return S.createElement(z.V, {
                                className: "chat-line__ritual"
                            }, S.createElement(gn, {
                                badgeSets: this.props.badgeSets,
                                event: e,
                                showTimestamps: this.props.showTimestamps,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin
                            }));
                        default:
                            return null
                    }
                }, t
            }(S.Component),
            Sn = n("dQj3"),
            Cn = n("QsiC"),
            _n = (n("zbFZ"), "pinned-cheer__rendered-message-inner"),
            En = "pinned-cheer--collapse",
            Nn = /(\d+)$/,
            wn = m.i.withCategory("pinned-cheer"),
            Dn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null
                    }, t.collapseCheer = !0, t.root = null, t.renderedMessage = null, t.recentCheerTimeout = 0, t.saveRenderedMessageRef = function(e) {
                        t.renderedMessage = e
                    }, t.saveRootRef = function(e) {
                        t.root = e
                    }, t.handleHeadlineClick = function() {
                        t.collapseCheer = !t.collapseCheer, t.root && t.root.classList.toggle(En, t.collapseCheer)
                    }, t.handleProgressExpired = function() {
                        wn.debug("setTimeout expired, forcing re-render"), t.forceUpdate()
                    }, t.onProgressAnimationEnd = function() {
                        wn.debug("Animation end event fired")
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.calcRecentCheerExpiry(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.calcRecentCheerExpiry(e)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    var n = this.getDisplayData(this.props, this.state),
                        i = this.getDisplayData(e, t);
                    return (n.displayCheer && n.displayCheer.id) !== (i.displayCheer && i.displayCheer.id)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this.getDisplayData(this.props, this.state),
                        t = e.isRecent,
                        n = e.remainingRecentCheerTime;
                    if (t && (clearTimeout(this.recentCheerTimeout), this.recentCheerTimeout = setTimeout(this.handleProgressExpired, n + 100)), this.renderedMessage) {
                        var i = this.renderedMessage.getElementsByClassName(_n);
                        if (i.length) {
                            var a = i[0].getBoundingClientRect().height > 42;
                            this.state.cheerIsTall !== a && this.setState({
                                cheerIsTall: a
                            })
                        }
                    }
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.recentCheerTimeout)
                }, t.prototype.render = function() {
                    var e = this.getDisplayData(this.props, this.state),
                        t = e.isRecent,
                        n = e.remainingRecentCheerTime,
                        i = e.displayCheer,
                        a = e.isExpandable;
                    if (!i) return null;
                    for (var r = "", s = 0, o = 0, l = i.messageParts; o < l.length; o++) {
                        var c = l[o];
                        if (c.type === Ct.a.Emote && c.content.cheerAmount && c.content.alt) {
                            var d = c.content.alt.replace(Nn, "").toLowerCase();
                            s += c.content.cheerAmount, r ? r !== d && (r = "cheer") : r = d
                        }
                    }
                    var u, p = {
                            "pinned-cheer__rendered-message": !0,
                            "pinned-cheer__rendered-message--recent": t,
                            "pinned-cheer__rendered-message--top": !t
                        },
                        h = S.createElement(zt.a, {
                            userData: i.user
                        }),
                        g = S.createElement("div", {
                            ref: this.saveRenderedMessageRef,
                            className: B(p)
                        }, S.createElement(z._19, {
                            margin: {
                                x: 2
                            },
                            borderTop: !0
                        }), S.createElement(z.V, {
                            padding: {
                                y: .5
                            },
                            className: _n
                        }, S.createElement(yn, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeData,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isCurrentUserModerator: !1,
                            message: i,
                            showModerationIcons: !1,
                            showTimestamps: !1
                        }))),
                        f = null;
                    if (t) u = S.createElement(z._23, {
                        type: z._28.Strong
                    }, Object(m.d)("Recent Cheer", "Bits--PinnedCheer"));
                    else {
                        u = S.createElement(z._23, {
                            type: z._28.Strong
                        }, Object(m.d)("Top Cheer by {user}", {
                            user: h
                        }, "Bits--PinnedCheer"), " :");
                        var v = Object(Qt.h)(Object(j.c)(r + s.toString(), this.props.bitsConfig), this.props.currentUserDisplayName, this.props.currentUserLogin);
                        f = S.createElement(z.V, {
                            display: z.H.Inline,
                            margin: {
                                left: .5
                            }
                        }, v)
                    }
                    var b = (C = {
                            "pinned-cheer__bounding-box": !0
                        }, C[En] = this.collapseCheer, C),
                        k = {
                            "pinned-cheer__headline": !0,
                            "pinned-cheer__headline--clickable": a
                        },
                        y = null;
                    return t && (y = S.createElement(z.V, {
                        className: "pinned-cheer__progress-bar-placeholder"
                    }, S.createElement(z.V, {
                        className: "pinned-cheer__progress-bar",
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        justifyContent: z.U.End
                    }, S.createElement(z._7, {
                        key: i.id,
                        countdown: n / 1e3,
                        size: z._8.ExtraSmall,
                        onCountdownEnd: this.onProgressAnimationEnd
                    })))), wn.debug("Rendering pinned cheer", {
                        remainingRecentCheerTime: n,
                        isRecent: t,
                        recentCheerExpireTime: this.state.recentCheerExpireTime
                    }), S.createElement(z.V, {
                        className: "pinned-cheer",
                        flexGrow: 0,
                        flexShrink: 0,
                        zIndex: z._39.Default
                    }, S.createElement("div", {
                        className: B(b),
                        ref: this.saveRootRef
                    }, S.createElement(z.Q, {
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: z.H.Flex,
                        flexDirection: z.J.Row,
                        flexWrap: z.K.NoWrap
                    }, S.createElement("div", {
                        className: B(k),
                        onClick: a ? this.handleHeadlineClick : void 0
                    }, S.createElement(z.V, {
                        flexGrow: 1,
                        flexShrink: 1,
                        display: z.H.Flex,
                        alignItems: z.c.Center
                    }, S.createElement(z._10, {
                        asset: t ? z._11.HourGlass : z._11.Trophy,
                        height: 18,
                        width: 18
                    }), S.createElement(z.V, {
                        margin: {
                            left: .5
                        },
                        display: z.H.Inline
                    }, u), f), S.createElement(z.V, {
                        className: "pinned-cheer__expand-caret",
                        flexShrink: 0,
                        flexGrow: 0,
                        display: z.H.Flex,
                        justifyContent: z.U.Between,
                        alignItems: z.c.Center
                    }, a ? S.createElement(z._10, {
                        asset: z._11.AngleLeft
                    }) : null))), g, y));
                    var C
                }, t.prototype.calcRecentCheerExpiry = function(e) {
                    var t = e.recentCheer ? e.recentCheer.id : null;
                    e.recentTimeoutMs && this.state.recentCheerID !== t && this.setState({
                        recentCheerID: t,
                        recentCheerExpireTime: t ? Date.now() + e.recentTimeoutMs : null
                    })
                }, t.prototype.getDisplayData = function(e, t) {
                    var n = 0;
                    t.recentCheerExpireTime && (n = Math.max(0, t.recentCheerExpireTime - Date.now()));
                    var i = !!e.recentCheer && !!e.topCheer && e.recentCheer.id === e.topCheer.id,
                        a = !!n && !!e.recentCheer && !i;
                    return {
                        remainingRecentCheerTime: n,
                        isRecent: a,
                        displayCheer: a ? e.recentCheer : e.topCheer,
                        isExpandable: !a || t.cheerIsTall
                    }
                }, t = u.__decorate([Object(C.a)(Cn, {
                    props: function(e) {
                        var t, n, i;
                        return e.data && e.data.user && e.data.user.cheer && (i = e.data.user.cheer.recentTimeoutMs, e.data.user.cheer.top && (t = Object(Sn.a)(e.data.user.cheer.top, e.ownProps.bitsConfig, e.ownProps.blockLinks)), e.data.user.cheer.recent && (n = Object(Sn.a)(e.data.user.cheer.recent, e.ownProps.bitsConfig, e.ownProps.blockLinks))), {
                            topCheer: t,
                            recentCheer: n,
                            recentTimeoutMs: i
                        }
                    },
                    options: function(e) {
                        return {
                            name: "data",
                            fetchPolicy: "network-only",
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }), Object(it.a)(function(e) {
                    return {
                        query: Cn,
                        variables: {
                            channelID: e.channelID
                        },
                        topic: Object(W.a)(e.channelID),
                        type: V.c.BitsPinEvent,
                        mutator: function(t, n) {
                            if (n.user.cheer) {
                                var i = JSON.parse(t.msg);
                                if (i.channel_id === e.channelID) return wn.debug("Received pubsub update", {
                                    hasTopCheer: !!i.top && i.top.has_top_event,
                                    hasNewTopCheer: !n.user.cheer.top || null !== i.top.tags && n.user.cheer.top.id !== i.top.tags.msg_id,
                                    hasRecentCheer: !!i.recent && i.recent.has_recent_event,
                                    hasNewRecentCheer: !n.user.cheer.recent || null !== i.recent.tags && n.user.cheer.recent.id !== i.recent.tags.msg_id
                                }), i.top && (i.top.has_top_event || "dimiss" === i.action) ? (!n.user.cheer.top || null !== i.top.tags && n.user.cheer.top.id !== i.top.tags.msg_id || "dismiss" === i.action) && (n.user.cheer.top = Object(Sn.c)(i.top)) : n.user.cheer.top = null, i.recent && (i.recent.has_recent_event || "dismiss" === i.action) ? (!n.user.cheer.recent || null !== i.recent.tags && n.user.cheer.recent.id !== i.recent.tags.msg_id || "dismiss" === i.action) && (n.user.cheer.recent = Object(Sn.c)(i.recent), n.user.cheer.recentTimeoutMs = n.user.cheer.settings.recentTimeoutMs) : n.user.cheer.recent = null, n
                            }
                        }
                    }
                })], t)
            }(S.Component),
            Tn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.bitsConfig && (e = this.state && this.state.pcheersV2Enabled ? null : S.createElement(Dn, {
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelID: this.props.channelID,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin
                    })), e
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return u.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    e = "off", t.label = 1;
                                case 1:
                                    return t.trys.push([1, 3, , 4]), [4, m.n.experiments.getAssignment("TWILIGHT_LEADERBOARDS")];
                                case 2:
                                    return e = t.sent(), [3, 4];
                                case 3:
                                    return t.sent(), e = "off", [3, 4];
                                case 4:
                                    return this.setState({
                                        pcheersV2Enabled: "on" === e
                                    }), [2]
                            }
                        })
                    })
                }, t
            }(S.Component);
        ! function(e) {
            e.Badge = "badge_update", e.Balance = "balance_update"
        }(hn || (hn = {}));
        var In, On = n("6BvN"),
            Mn = n("HM6l"),
            xn = n("c3pS"),
            Un = (n("56e8"), function(e) {
                var t = void 0 !== e.progress,
                    n = S.createElement("img", {
                        className: "cheer-badge__image",
                        src: e.badge.image1x,
                        alt: e.badge.title,
                        srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                    });
                if (!t) return n;
                var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                return S.createElement("div", {
                    className: "cheer-badge__progress-container"
                }, n, S.createElement("div", {
                    className: "cheer-badge__progress-overlay",
                    style: {
                        width: i + "px"
                    },
                    "data-test-selector": "cheer-progress"
                }))
            }),
            Rn = n("3iBR"),
            Fn = function(e) {
                var t;
                e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = S.createElement(z.V, {
                    padding: {
                        bottom: .5
                    }
                }, e.selfBitsBadge.current && S.createElement(z.V, {
                    display: z.H.Inline,
                    margin: {
                        right: .5
                    }
                }, S.createElement(Un, {
                    badge: e.selfBitsBadge.current
                })), e.selfBitsBadge.next && S.createElement(Un, {
                    badge: e.selfBitsBadge.next,
                    progress: e.selfBitsBadge.progress
                }), e.selfBitsBadge.nextBits && Object(m.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                    bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                }, "Bits--BalanceFooter")));
                var n = Object(m.d)("{bitsGem} Log in to see your Bits balance", {
                    bitsGem: S.createElement(q.a, {
                        count: 100,
                        withImage: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: N.a.Dark
                    })
                }, "Bits--BalanceFooter");
                return void 0 !== e.balance && null !== e.balance && (n = Object(m.d)("You have {currentBits}", {
                    currentBits: S.createElement(q.a, {
                        count: e.balance,
                        withImage: !0,
                        withText: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: N.a.Dark
                    })
                }, "Bits--BalanceFooter")), S.createElement(z.V, {
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-balance-footer"
                }, t, S.createElement(z.V, {
                    display: z.H.Flex,
                    flexGrow: 1,
                    alignItems: z.c.Center,
                    justifyContent: z.U.Between
                }, S.createElement("div", null, n), S.createElement(z.u, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > Rn.h,
                    onClick: e.onClickGetBits,
                    "data-test-selector": "get-bits-button",
                    "data-a-target": "get-bits-button"
                }, Object(m.d)("Get Bits", "Bits--BalanceFooter"))))
            },
            Ln = function() {
                return S.createElement(z._19, {
                    className: "t-bits-card",
                    display: z.H.Flex,
                    flexDirection: z.J.Column,
                    alignItems: z.c.Center,
                    justifyContent: z.U.Center,
                    textAlign: z._24.Center,
                    padding: 1,
                    border: !0,
                    background: z.m.Base,
                    elevation: 3,
                    fullWidth: !0
                }, S.createElement(z._23, {
                    italic: !0
                }, Object(m.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
            },
            jn = n("QRuM"),
            An = n("ySfT"),
            Bn = function(e) {
                return S.createElement(z.V, {
                    display: z.H.Flex,
                    flexGrow: 1,
                    flexDirection: z.J.Column,
                    justifyContent: z.U.Center,
                    alignItems: z.c.Center,
                    padding: 1
                }, S.createElement(z.V, {
                    padding: {
                        top: 2,
                        bottom: 2
                    }
                }, S.createElement(z._23, {
                    type: z._28.H5,
                    color: z.F.Link,
                    bold: !0
                }, Object(m.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), S.createElement(z._23, null, Object(m.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), S.createElement(z.V, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, S.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(m.d)("How do I cheer?", "Bits--CheermoteIntro"))))
            },
            Pn = n("nrdj"),
            Vn = function(e) {
                var t = e.headline || e.prefix + (e.tier || "");
                if (e.tournament && e.tier <= 0) {
                    var n = e.tournament.teams.find(function(t) {
                        return t.id === e.prefix
                    });
                    n && (t = n.name + " - " + e.prefix)
                }
                var i = e.tier;
                return e.event && !e.tier && (i = 1), S.createElement(z.V, {
                    display: z.H.Flex,
                    flexDirection: z.J.Column,
                    alignItems: z.c.Center,
                    padding: 1
                }, S.createElement(z._23, {
                    type: z._28.H4,
                    bold: !0
                }, t), S.createElement(Pn.a, {
                    prefix: e.prefix,
                    amount: i,
                    bitsConfig: e.bitsConfig,
                    showImage: !0,
                    showAmount: !(e.event && !e.tier)
                }))
            },
            Hn = (n("DVR9"), function(e) {
                var t = null;
                e.minToCheer > 1 && (t = S.createElement(z._23, {
                    color: z.F.Alt2,
                    italic: !0
                }, Object(m.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                    minToCheer: e.minToCheer
                }, "Bits--CheermoteTierIntro")));
                var n = null;
                return e.minToPin > 0 && (n = S.createElement(z._23, {
                    color: z.F.Alt2,
                    italic: !0
                }, Object(m.d)("Pinning your Cheer is a minimum of {minToPin} Bits", {
                    minToPin: e.minToPin
                }, "Bits--CheermoteTierIntro"))), S.createElement(z.V, {
                    display: z.H.Flex,
                    flexGrow: 1,
                    flexDirection: z.J.Column,
                    alignItems: z.c.Center,
                    justifyContent: z.U.Center,
                    padding: 1,
                    className: "cheermote-tier-intro"
                }, S.createElement(z.V, {
                    padding: {
                        x: 4
                    },
                    margin: {
                        bottom: 1
                    }
                }, S.createElement(z._23, {
                    color: z.F.Alt2
                }, Object(m.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t, n)
            }),
            Wn = n("1bR2"),
            Gn = n.n(Wn),
            qn = n("vDGQ"),
            zn = (n("CGWe"), function(e) {
                return Object(qn.d)({
                    action: qn.a.View,
                    type: qn.c.BitsIntro,
                    channelId: e.channelID
                }), S.createElement(z.V, {
                    "data-test-selector": "crate-intro"
                }, S.createElement(z.V, {
                    padding: {
                        x: 1,
                        top: 2,
                        bottom: 1
                    }
                }, S.createElement(z._23, {
                    fontSize: z.L.Size4,
                    bold: !0
                }, Object(m.d)("Share the Holiday Cheer!", "Crates"))), S.createElement(z._19, {
                    className: "crates-holiday-background",
                    background: z.m.Alt,
                    padding: 1,
                    margin: {
                        y: 1
                    },
                    display: z.H.Flex,
                    justifyContent: z.U.Around,
                    alignItems: z.c.End,
                    borderTop: !0,
                    borderBottom: !0
                }, S.createElement(z.e, {
                    type: z.i.BounceIn,
                    delay: z.f.Long,
                    enabled: !0
                }, S.createElement(z._31, {
                    label: "XmasRaid"
                }, S.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633161/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/3.0 3.0x",
                    alt: "XmasRaid"
                }))), S.createElement(z.e, {
                    type: z.i.BounceIn,
                    delay: z.f.Medium,
                    enabled: !0
                }, S.createElement(z._31, {
                    label: "MerryPurple"
                }, S.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633177/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/3.0 3.0x",
                    alt: "MerryPurple"
                }))), S.createElement(z.e, {
                    type: z.i.BounceIn,
                    delay: z.f.Short,
                    enabled: !0
                }, S.createElement(z._31, {
                    label: "GiftRage"
                }, S.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/634141/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/3.0 3.0x",
                    alt: "GiftRage"
                }))), S.createElement("img", {
                    src: Gn.a,
                    height: "50",
                    width: "50"
                }), S.createElement(z.e, {
                    type: z.i.BounceIn,
                    delay: z.f.Short,
                    enabled: !0
                }, S.createElement(z._31, {
                    label: "RudolphWhoa"
                }, S.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633166/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/3.0 3.0x",
                    alt: "RudolphWhoa"
                }))), S.createElement(z.e, {
                    type: z.i.BounceIn,
                    delay: z.f.Medium,
                    enabled: !0
                }, S.createElement(z._31, {
                    label: "FeelsGingerMan"
                }, S.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633171/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/633171/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/633171/3.0 4x",
                    alt: "FeelsGingerMan"
                }))), S.createElement(z.e, {
                    type: z.i.BounceIn,
                    delay: z.f.Long,
                    enabled: !0
                }, S.createElement(z._31, {
                    label: "OrnaMental"
                }, S.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633170/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/3.0 3.0x",
                    alt: "OrnaMental"
                })))), S.createElement(z.V, {
                    padding: 1
                }, S.createElement(z._23, {
                    type: z._28.P
                }, Object(m.d)("Cheer any amount to support your streamer, and get a holiday gift! Cheer {minBits, number} Bits or more, and others in chat can get a gift too!", {
                    minBits: 250
                }, "Crates")), S.createElement(z._23, {
                    type: z._28.Strong
                }, S.createElement("a", {
                    href: "http://link.twitch.tv/holiday-emotes",
                    target: "_blank",
                    rel: "noreferrer noopener"
                }, Object(m.d)("Details", "Crates")))))
            });
        (In || (In = {})).CratesChristmas = "CratesChristmas";
        var Qn, $n = function(e) {
                switch (e.event) {
                    case In.CratesChristmas:
                        return S.createElement(zn, {
                            onClickHelp: e.onClickHelp,
                            channelID: e.channelID
                        });
                    default:
                        return S.createElement(Bn, {
                            onClickHelp: e.onClickHelp
                        })
                }
            },
            Jn = n("N221"),
            Kn = n("cv4W"),
            Yn = n.n(Kn),
            Zn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = "";
                    if (this.props.amount < 250) {
                        var t = 250 - this.props.amount;
                        e = Object(m.d)("{bitsToGo, plural, one {Cheer # more Bit to share gifts with chat!} other {Cheer # more Bits to share gifts with chat!}}", {
                            bitsToGo: t
                        }, "Crates")
                    } else e = Object(m.d)("Your Cheer will share gifts with chat!", "Crates");
                    return S.createElement(z._19, {
                        className: "crate-christmas-2017-reminder",
                        background: z.m.Alt,
                        borderTop: !0,
                        padding: 1
                    }, S.createElement(z.V, {
                        display: z.H.Inline,
                        margin: {
                            right: .5
                        }
                    }, S.createElement("img", {
                        src: Yn.a,
                        height: "22",
                        width: "22"
                    })), S.createElement(z._23, {
                        type: z._28.Strong
                    }, e))
                }, t
            }(S.Component),
            Xn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.event) {
                        case In.CratesChristmas:
                            return S.createElement(Zn, {
                                amount: this.props.amount
                            });
                        default:
                            return null
                    }
                }, t
            }(S.Component),
            ei = function(e) {
                var t = e.prefixes.map(function(t, n) {
                    if (t.alt && t.cheerAmount) return S.createElement(z.Q, {
                        key: n,
                        padding: {
                            x: 1
                        }
                    }, S.createElement("li", null, S.createElement(Pn.a, {
                        prefix: t.alt,
                        amount: t.cheerAmount > Rn.j ? Rn.j : t.cheerAmount,
                        bitsConfig: e.bitsConfig,
                        size: Pn.b.Small,
                        showAmount: !0,
                        showImage: !0
                    })))
                });
                return S.createElement(z.V, {
                    display: z.H.Flex,
                    flexDirection: z.J.Row,
                    alignItems: z.c.End,
                    justifyContent: z.U.Center,
                    flexWrap: z.K.Wrap,
                    margin: {
                        top: 1
                    },
                    className: "pending-cheer-list"
                }, t)
            },
            ti = (n("KWLn"), function(e) {
                var t;
                if (e.prefixes && 1 === e.prefixes.length) {
                    var n = e.prefixes[0].alt;
                    n && (t = S.createElement(z.V, {
                        padding: {
                            top: 2
                        }
                    }, S.createElement(Pn.a, {
                        prefix: n,
                        amount: e.amount > Rn.j ? Rn.j : e.amount,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: !0
                    })))
                } else if (e.prefixes) t = S.createElement(z.V, {
                    margin: {
                        top: 1
                    }
                }, S.createElement(Jn.b, {
                    className: "pending-cheer__scroll-container"
                }, S.createElement(ei, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = Object(m.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                        totalBits: S.createElement("strong", null, e.amount),
                        channelName: e.channelDisplayName
                    }, "Bits--PendingCheer");
                    t = S.createElement(z.V, {
                        padding: {
                            top: 2,
                            x: 5
                        }
                    }, S.createElement(z._23, {
                        color: z.F.Alt2,
                        "data-a-target": "total-bits-message"
                    }, i))
                }
                var a = null;
                e.purchaseMore && e.purchaseMore > 0 && (a = S.createElement(z._23, {
                    "data-a-target": "need-more-bits-error"
                }, Object(m.d)("Please purchase {neededBits} more Bits to Cheer", {
                    neededBits: e.purchaseMore
                }, "Bits--PendingCheer")));
                var r = null;
                if (e.largestCheermote > Rn.j) {
                    var s = Object(m.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                        maximumCheerSize: Rn.j
                    }, "Bits--PendingCheer");
                    a = S.createElement(z._23, {
                        "data-a-target": "max-cheer-bits-error"
                    }, s)
                }
                if (e.amount < e.minToCheer) {
                    var o = Object(m.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                        moreBitsAmount: e.minToCheer - e.amount
                    }, "Bits--PendingCheer");
                    a = S.createElement(z._23, {
                        "data-a-target": "min-cheer-bits-error"
                    }, o)
                }
                if (e.smallestCheermote < e.minPerEmote) {
                    var l = Object(m.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                        minPerEmote: e.minPerEmote
                    }, "Bits--PendingCheer");
                    r = S.createElement(z._23, {
                        color: z.F.Alt2,
                        italic: !0,
                        "data-a-target": "min-emote-bits-error"
                    }, l)
                }
                var c = S.createElement(Pn.a, {
                    amount: e.amount,
                    prefix: Rn.f,
                    bitsConfig: e.bitsConfig,
                    display: z.H.Inline,
                    showImage: !1,
                    showAmount: !0,
                    size: Pn.b.Medium
                });
                return S.createElement(z.V, null, S.createElement(z.V, {
                    display: z.H.Flex,
                    flexDirection: z.J.Column,
                    alignItems: z.c.Center,
                    padding: 1,
                    className: "pending-cheer"
                }, S.createElement(z._23, {
                    fontSize: z.L.Size4,
                    bold: !0
                }, Object(m.d)("Cheering {totalBits} Bits", {
                    totalBits: c
                }, "Bits--PendingCheer")), !r && t, !r && a && S.createElement(z.V, {
                    padding: {
                        top: 1
                    }
                }, a), r && S.createElement(z.V, {
                    padding: {
                        top: 3,
                        x: 3
                    }
                }, r)), !r && !a && S.createElement(Xn, {
                    event: e.event,
                    amount: e.amount
                }))
            }),
            ni = n("qe65"),
            ii = (n("f1ZS"), {
                themed: !0,
                dark: {
                    "1x": Rn.b + "/dark/animated/promo/intro.gif"
                },
                light: {
                    "1x": Rn.b + "/light/animated/promo/intro.gif"
                }
            }),
            ai = function() {
                return S.createElement(z.V, {
                    display: z.H.Flex,
                    flexDirection: z.J.Column,
                    alignItems: z.c.Center,
                    justifyContent: z.U.Center,
                    flexGrow: 1,
                    className: "bits-sending"
                }, S.createElement(z.V, {
                    padding: {
                        bottom: 1
                    }
                }, S.createElement(ni.a, {
                    sources: ii
                })), S.createElement(z._23, {
                    italic: !0
                }, Object(m.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
            },
            ri = (n("ZoRy"), function(e) {
                var t = Object(m.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                        totalBits: e.totalBits,
                        channelName: e.channelDisplayName
                    }, "Bits--UndoPrompt"),
                    n = null;
                if (e.prefixes && e.prefixes.length > 1) n = S.createElement(Jn.b, {
                    className: "bits-undo-prompt__scroll-container"
                }, S.createElement(z.V, {
                    margin: {
                        top: 1
                    }
                }, S.createElement(ei, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = e.prefixes[0].alt;
                    i && (n = S.createElement(z.V, {
                        padding: {
                            bottom: 1
                        }
                    }, S.createElement(Pn.a, {
                        prefix: i,
                        amount: e.totalBits,
                        bitsConfig: e.bitsConfig,
                        showAmount: !0,
                        showImage: !0
                    })))
                }
                return S.createElement(z.V, {
                    display: z.H.Flex,
                    flexDirection: z.J.Column,
                    alignItems: z.c.Center,
                    justifyContent: z.U.Center,
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-undo-prompt"
                }, n, S.createElement(z._23, null, t))
            }),
            si = function(e) {
                var t = m.b.get("crate_snowman_launch", jn.a.Off),
                    n = t === jn.a.On || t === jn.a.StaffOnly && e.isStaff ? In.CratesChristmas : null,
                    i = e.event || n;
                if (e.isSending) return e.totalBits < Rn.k ? S.createElement(ai, null) : S.createElement(ri, {
                    bitsConfig: e.bitsConfig,
                    channelDisplayName: e.displayName,
                    prefixes: e.currentCheers,
                    totalBits: e.totalBits
                });
                if (e.hoveredCheermote) return S.createElement(Vn, {
                    event: e.event,
                    tournament: e.tournament,
                    bitsConfig: e.bitsConfig,
                    prefix: e.hoveredCheermote,
                    tier: e.hoveredTier
                });
                if (e.totalBits) return S.createElement(ti, {
                    bitsConfig: e.bitsConfig,
                    prefixes: e.currentCheers,
                    amount: e.totalBits,
                    channelDisplayName: e.displayName,
                    purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                    largestCheermote: e.largestCheermote,
                    smallestCheermote: e.smallestCheermote,
                    minPerEmote: e.emoteMinimumBits,
                    minToCheer: e.cheerMinimumBits,
                    event: i
                });
                if (e.helpRequested) return S.createElement(An.a, null);
                if (e.chosenCheermote) {
                    var a = e.recentMinimumBits,
                        r = e.cheerMinimumBits;
                    return S.createElement(Hn, {
                        minToPin: a,
                        minToCheer: r
                    })
                }
                return i ? S.createElement($n, {
                    event: i,
                    onClickHelp: e.showHelp,
                    channelID: e.channelID
                }) : S.createElement(Bn, {
                    onClickHelp: e.showHelp
                })
            },
            oi = n("WVx7"),
            li = n("w9tK"),
            ci = (n("9uTb"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        startingIndex: 0
                    }, t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (this.props.hide) return null;
                    var t = this.props.cheermotes.map(function(t, n) {
                            if (!t) return S.createElement("li", {
                                key: "null-cheermote-" + n
                            }, S.createElement("button", {
                                className: "cheermote-list__item-button",
                                disabled: !0
                            }, S.createElement("div", {
                                className: "cheermote-list__placeholder"
                            })));
                            var i = "";
                            t.key && (i = t.key.replace(":", ""));
                            var a = null;
                            e.props.showCheermoteAmount && t.key && (a = S.createElement(Pn.a, {
                                bitsConfig: e.props.bitsConfig,
                                prefix: "",
                                amount: +t.key.split(":")[1],
                                showImage: !1,
                                showAmount: !0,
                                size: Pn.b.Small
                            }));
                            var r = S.createElement("li", {
                                key: t.key,
                                className: "cheermote-list__cheermote"
                            }, S.createElement("button", {
                                className: "cheermote-list__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + i
                            }, S.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })), a);
                            return e.props.showCheermoteAmount ? r : S.createElement(z.Q, {
                                key: t.key,
                                margin: {
                                    bottom: 1
                                }
                            }, r)
                        }),
                        n = null;
                    this.props.showCheermoteAmount && (n = S.createElement(z.V, {
                        padding: {
                            right: 2
                        },
                        fullWidth: !0,
                        className: "cheermote-list__back-button"
                    }, S.createElement(z.u, {
                        "data-a-target": "bits-card-back-button",
                        type: z.z.Text,
                        fullWidth: !0,
                        onClick: this.props.onClose
                    }, Object(m.d)("Show All Cheermotes", "CheermoteCarousel"))));
                    var i = S.createElement(z.Q, {
                            className: "cheermote-list__cheermotes",
                            display: z.H.Flex,
                            flexWrap: z.K.Wrap,
                            flexDirection: z.J.Row,
                            justifyContent: this.props.showCheermoteAmount ? z.U.Between : z.U.Start,
                            alignItems: z.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, S.createElement("ul", null, t, n)),
                        a = B("cheermote-list", {
                            "cheermote-list__tier-selection": this.props.showCheermoteAmount
                        }, {
                            "cheermote-list__cheermote-selection": !this.props.showCheermoteAmount
                        });
                    return this.props.showCheermoteAmount ? S.createElement(z.V, {
                        flexGrow: 1,
                        overflow: z._0.Hidden,
                        className: a
                    }, i) : S.createElement(z.V, {
                        flexGrow: 1,
                        overflow: z._0.Hidden,
                        className: a
                    }, S.createElement(Jn.b, null, i))
                }, t
            }(S.Component)),
            di = Object(_.compose)(Object(jt.c)("CheermoteCarousel", {
                autoReportInteractive: !0,
                destination: li.a.CheermoteCarousel
            }))(ci),
            ui = Object(k.a)(function(e) {
                return {
                    darkModeEnabled: Object(I.a)(e) === N.a.Dark
                }
            })(di),
            pi = function(e) {
                return e.event, S.createElement(Fn, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance,
                    selfBitsBadge: e.selfBitsBadge
                })
            },
            mi = function(e) {
                return S.createElement(z.V, {
                    flexGrow: 1
                }, S.createElement(z.V, {
                    className: "undo-prompt__footer",
                    padding: 1,
                    display: z.H.Flex,
                    justifyContent: z.U.Between
                }, S.createElement(z.u, {
                    onClick: e.onCancel || void 0,
                    type: z.z.Hollow,
                    overlay: !0,
                    "data-test-selector": "cancel-button"
                }, Object(m.d)("Cancel", "Bits--UndoPrompt")), S.createElement(z.u, {
                    onClick: e.onConfirm || void 0,
                    "data-test-selector": "confirm-button"
                }, Object(m.d)("Send", "Bits--UndoPrompt"))), S.createElement(z._7, {
                    size: z._8.ExtraSmall,
                    countdown: Rn.l.UNDO_PROMPT_DURATION / 1e3
                }))
            },
            hi = n("ZJYd"),
            gi = n("/LBW"),
            fi = n("iWdz"),
            vi = (n("2B/Z"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        chosenCheermote: null,
                        hoveredCheermote: null,
                        hoveredTier: 0,
                        helpRequested: !1,
                        totalBits: 0,
                        largestCheermote: 0,
                        smallestCheermote: 0,
                        buyingBits: !1
                    }, t.unhoverTimeout = 0, t.lastRefetchTime = 0, t.handleTierHover = function(e) {
                        clearTimeout(t.unhoverTimeout);
                        var n = e.split(":");
                        n.length < 2 || (t.setState({
                            hoveredTier: +n[1],
                            hoveredCheermote: n[0]
                        }), t.props.trackBitsCardInteraction(gi.a.PreviewEmote, {
                            emoteType: n[0],
                            emoteLevel: +n[1]
                        }))
                    }, t.handleUnhover = function() {
                        t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                    }, t.clearHovered = function() {
                        t.setState({
                            hoveredTier: 0,
                            hoveredCheermote: null
                        })
                    }, t.handleTierClick = function(e) {
                        t.props.onClickCheermote(e.split(":").join(""))
                    }, t.handleCheermoteHover = function(e) {
                        clearTimeout(t.unhoverTimeout), t.setState({
                            hoveredCheermote: e,
                            hoveredTier: 0
                        }), t.props.trackBitsCardInteraction(gi.a.PreviewEmote, {
                            emoteType: e,
                            emoteLevel: 100
                        })
                    }, t.handleCheermoteClick = function(e) {
                        t.setState({
                            chosenCheermote: e,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.clearChosenCheermote = function() {
                        t.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.showHelp = function(e) {
                        e.preventDefault(), t.setState({
                            helpRequested: !0
                        })
                    }, t.closeHelp = function() {
                        return t.setState({
                            helpRequested: !1
                        })
                    }, t.handleClickBuy = function() {
                        t.setState({
                            buyingBits: !0
                        }), t.props.trackBitsCardInteraction(gi.a.BuyMain)
                    }, t.handleCloseBuy = function() {
                        return t.setState({
                            buyingBits: !1
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.visible || !!this.props.currentCheers.length,
                        n = e.visible || !!e.currentCheers.length;
                    if (!t && n) {
                        var i = Date.now();
                        i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                    }
                    if (t && !n && this.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            buyingBits: !1
                        }), this.props.currentCheers !== e.currentCheers) {
                        var a = Object(hi.a)(e.currentCheers),
                            r = a.total,
                            s = a.largestCheermote,
                            o = a.smallestCheermote;
                        this.setState({
                            totalBits: r,
                            largestCheermote: s,
                            smallestCheermote: o
                        })
                    }
                }, t.prototype.render = function() {
                    var e = this;
                    if (!this.props.visible && !this.props.currentCheers.length) return null;
                    var t, n = {
                        border: !0,
                        background: z.m.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    if (this.props.currentCheers.length || (t = S.createElement("button", {
                            className: "t-bits-card__close t-bits-card__top-controls",
                            onClick: this.props.onUserClose,
                            "data-test-selector": "cancel-button",
                            "data-a-target": "bits-card-close-button"
                        }, S.createElement(z._10, {
                            asset: z._11.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return S.createElement(z._19, u.__assign({
                        className: "t-bits-card",
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        alignItems: z.c.Center,
                        justifyContent: z.U.Center
                    }, n), S.createElement(z.Z, {
                        delay: 0
                    }), S.createElement(z.V, {
                        padding: {
                            top: 2
                        }
                    }, S.createElement(z._23, {
                        italic: !0
                    }, Object(m.d)("Fetching Bits", "BitsCard"))));
                    if (this.props.data.error || !this.props.bitsConfig) return S.createElement(Ln, null);
                    if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return S.createElement(z._19, u.__assign({
                        className: "t-bits-card",
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        alignItems: z.c.Center,
                        justifyContent: z.U.Center,
                        textAlign: z._24.Center,
                        padding: {
                            top: 2,
                            x: 1,
                            bottom: 1
                        }
                    }, n), t, S.createElement(z._23, {
                        color: z.F.Error,
                        italic: !0
                    }, Object(m.d)("You cannot Cheer in your own channel.", "BitsCard")));
                    if (this.state.buyingBits) return S.createElement(oi.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.props.onUserClose,
                        onClose: this.handleCloseBuy,
                        trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                        location: gi.b.ChatTooltip
                    });
                    var i = null,
                        a = this.state.helpRequested && !this.props.currentCheers.length,
                        r = null;
                    if (this.props.data.user.cheer.settings.event && (r = this.props.data.user.cheer.settings.event.toLowerCase().replace("_", "-")), this.state.chosenCheermote) {
                        var s = this.props.bitsConfig.indexedActions[this.state.chosenCheermote.toLowerCase()];
                        if (s) {
                            var o = s.orderedTiers.filter(function(e) {
                                return e.bits <= Rn.j
                            }).map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: s.prefix + ":" + e.bits
                                }
                            }).reverse();
                            i = S.createElement(ui, {
                                bitsConfig: this.props.bitsConfig,
                                hide: a,
                                cheermotes: o,
                                showCheermoteAmount: !0,
                                event: r,
                                onHover: this.handleTierHover,
                                onHoverLeave: this.handleUnhover,
                                onClick: this.handleTierClick,
                                onClose: this.clearChosenCheermote
                            })
                        }
                    }
                    if (!i) {
                        o = this.props.bitsConfig.orderedActions.filter(function(e) {
                            return e.type !== Rn.d
                        }).map(function(t) {
                            var n = Rn.g;
                            e.props.data && e.props.data.user.cheer.settings.event && (n = 1);
                            var i = t.indexedTiers.get(n);
                            return i ? {
                                imgSrc: i.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: i.indexedImages.DARK.static.get(2),
                                key: t.prefix
                            } : null
                        });
                        i = S.createElement(ui, {
                            bitsConfig: this.props.bitsConfig,
                            hide: a,
                            cheermotes: o,
                            event: r,
                            onHover: this.handleCheermoteHover,
                            onHoverLeave: this.handleUnhover,
                            onClick: this.handleCheermoteClick
                        })
                    }
                    var l = null;
                    this.props.isSending ? this.state.totalBits >= Rn.k && (l = S.createElement(mi, {
                        onCancel: this.props.onCancelSend,
                        onConfirm: this.props.onConfirmSend
                    })) : l = r ? S.createElement(pi, {
                        event: r,
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    }) : S.createElement(Fn, {
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    });
                    var c;
                    a && (c = S.createElement("button", {
                        className: "t-bits-card__go-back t-bits-card__top-controls",
                        onClick: this.closeHelp,
                        "data-a-target": "bits-card-back-button"
                    }, S.createElement(z._10, {
                        asset: z._11.Play,
                        height: 8
                    }), " ", Object(m.d)("Back", "BitsCard")));
                    var d = B("t-bits-card", {
                        "t-bits-card--tall": !this.props.isSending
                    });
                    return S.createElement(z._19, u.__assign({
                        className: d,
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        "data-a-target": "bits-card"
                    }, n), !this.props.isSending && c, t, S.createElement(z._19, {
                        className: "t-bits-card__contents",
                        display: z.H.Flex,
                        flexGrow: 0,
                        flexDirection: z.J.Column,
                        alignContent: z.b.Stretch,
                        textAlign: z._24.Center,
                        borderBottom: !this.props.isSending
                    }, S.createElement(si, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        displayName: this.props.data.user.displayName,
                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                        event: r,
                        helpRequested: this.state.helpRequested,
                        hoveredCheermote: this.state.hoveredCheermote,
                        hoveredTier: this.state.hoveredTier,
                        isSending: this.props.isSending,
                        largestCheermote: this.state.largestCheermote,
                        recentMinimumBits: this.props.data.user.cheer.settings.recentMinimumBits,
                        smallestCheermote: this.state.smallestCheermote,
                        totalBits: this.state.totalBits,
                        tournament: this.props.data.user.tournament,
                        channelID: this.props.channelID,
                        showHelp: this.showHelp,
                        isStaff: this.props.isStaff
                    })), !this.props.isSending && i, l && S.createElement(z.V, {
                        className: "t-bits-card__footer",
                        display: z.H.Flex
                    }, l))
                }, t = u.__decorate([Object(C.a)(fi, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                })], t)
            }(S.Component)),
            bi = n("KSGD"),
            ki = n("2emZ"),
            yi = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = ki.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        if (!e.startsWith("#")) return null;
                        if (null !== t.props.hashTags.edges) {
                            return t.props.hashTags.edges.filter(function(t) {
                                return t.node.id.includes(e)
                            }).map(function(n) {
                                return {
                                    current: e,
                                    replacement: n.node.id,
                                    element: t.genearateHashtagDisplay(n.node.id)
                                }
                            })
                        }
                        return null
                    }, t.genearateHashtagDisplay = function(e) {
                        return S.createElement(z.V, {
                            padding: {
                                right: .5
                            },
                            key: "hashtag:" + e
                        }, S.createElement(z._23, null, e))
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: bi.func
                }, t
            }(S.Component),
            Si = n("Lx+S"),
            Ci = n("SZoP"),
            _i = n("Bir6"),
            Ei = n("e1CU"),
            Ni = 5,
            wi = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = ki.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var i = t ? e : e.substring(1),
                            a = new RegExp("^" + Object(_i.a)(i), "i");
                        return n.state.sortedChatMembers.filter(function(e) {
                            return a.test(e.userLogin) || a.test(e.userDisplayName)
                        }).slice(0, Ni).map(function(i) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + i.userDisplayName,
                                element: n.renderMention(i)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return S.createElement("span", null, Object(Ci.a)(e.userLogin, e.userDisplayName))
                    }, n.sortChatMembers = function(e) {
                        var t = [u.__assign({}, Object(Ei.a)(e.channelDisplayName, e.channelLogin), {
                                userID: e.channelID,
                                userLogin: e.channelLogin,
                                userType: It.a.Owner
                            })],
                            n = e.chatMembers;
                        return n.sort(function(e, t) {
                            return e.userLogin < t.userLogin ? -1 : e.userLogin > t.userLogin ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedChatMembers: n.sortChatMembers(t)
                    }, n
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.chatMembers === e.chatMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin && this.props.channelID === e.channelID || this.setState({
                        sortedChatMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: bi.func
                }, t
            }(S.Component),
            Di = function() {
                return S.createElement(z.p, {
                    direction: z.q.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, S.createElement(z.V, {
                    padding: 1,
                    "data-test-selector": "raids-settings-tooltip"
                }, Object(m.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
            },
            Ti = n("QCOJ"),
            Ii = n("hcyD"),
            Oi = function(e) {
                var t = u.__assign({}, Object(Lt.a)(e), {
                    mentioned_user_display_name: e.mentionedUserDisplayName,
                    user: e.userLogin
                });
                m.m.track(G.SpadeEventType.ChatMentionUsed, t)
            },
            Mi = n("Umoc"),
            xi = n("ieBa"),
            Ui = n("ACWz"),
            Ri = n("2I50"),
            Fi = /\S/,
            Li = 3;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(Qn || (Qn = {}));
        var ji, Ai, Bi = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.syncMembers = function() {
                        n.props.activeChatters.isDirty && n.setState({
                            chatMembers: n.props.activeChatters.getActiveChatters()
                        })
                    }, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.onChatSettingsToggle = function(e) {
                        n.handleRaidReportingToggle(e), e || Object(Mi.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode
                        })
                    }, n.handleRaidReportingToggle = function(e) {
                        n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                            showRaidsSettingsTooltip: !1
                        }), m.k.set("raidsModerationTooltipsSeenNumTimes", Li)), e && n.setState({
                            showRaidsFollowerOnlyTooltip: !1
                        }))
                    }, n.onKeyDown = function(e) {
                        var t = e.charCode || e.keyCode;
                        switch (n.props.onKeyDown && t !== On.a.Enter && n.props.onKeyDown(e), t) {
                            case On.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                            case On.a.Esc:
                                return void(n.state.showCard === Qn.Bits && n.setState({
                                    showCard: Qn.None
                                }));
                            case On.a.Tab:
                                return void e.preventDefault();
                            default:
                                return
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            value: e
                        })
                    }, n.onInputFocus = function() {
                        n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onMouseEnterInput = function() {
                        n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onChatCommand = function(e) {
                        n.props.onChatCommand(e), n.trackChatEvent()
                    }, n.confirmEmbedAction = function(e, t, i) {
                        var a = n,
                            r = a.hasConfirmedInEmbed;
                        if (a.hasSeenConfirmationPrompt) return r;
                        var s = window.confirm(n.confirmationMessage(e, t, i));
                        return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = s, s
                    }, n.confirmationMessage = function(e, t, n) {
                        return Object(m.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                            displayName: e,
                            message: t,
                            channelLogin: n
                        }, "ChatInput")
                    }, n.onMessageSend = function() {
                        return u.__awaiter(n, void 0, void 0, function() {
                            var e, t, n, i, a = this;
                            return u.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return this.props.authToken ? this.props.channelID ? (e = Fi.test(this.state.value)) ? this.state.isSendingBits ? (m.i.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (m.i.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : this.props.data && this.props.data.currentUser ? 0 === (t = Object(hi.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.user ? this.props.data.user.cheer ? (n = Object(hi.f)({
                                            messageBits: t,
                                            balance: this.props.data.currentUser.bitsBalance,
                                            cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                                            emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                                            inputValue: this.state.value
                                        })).canSpend ? this.props.sendCheer ? (this.setState({
                                            isSendingBits: !0
                                        }), t.total >= Rn.k ? [4, new Promise(function(e) {
                                            var t = setTimeout(e, Rn.l.UNDO_PROMPT_DURATION),
                                                n = function(n) {
                                                    void 0 === n && (n = !1), clearTimeout(t), a.cancelDelayedSend = null, a.confirmDelayedSend = null, e(n)
                                                };
                                            a.cancelDelayedSend = function() {
                                                return n(!0)
                                            }, a.confirmDelayedSend = function() {
                                                return n(!1)
                                            }
                                        })] : [3, 2]) : (m.i.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (m.i.warn("[Chat Input] Spending bits forbidden.", n), [2]) : (m.i.warn("[Chat Input] Cheer is null."), [2]) : (m.i.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2]) : (m.i.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                            hasSendableInput: e,
                                            value: this.state.value
                                        }), [2]) : (m.i.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                    case 1:
                                        if (r.sent()) return this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                        r.label = 2;
                                    case 2:
                                        i = Object(Mn.a)(), r.label = 3;
                                    case 3:
                                        return r.trys.push([3, 5, , 6]), [4, this.props.sendCheer({
                                            variables: {
                                                input: {
                                                    id: i,
                                                    targetID: this.props.channelID,
                                                    bits: t.total,
                                                    content: this.state.value
                                                }
                                            }
                                        })];
                                    case 4:
                                        return r.sent(), [3, 6];
                                    case 5:
                                        return r.sent(), this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                    case 6:
                                        return this.setState({
                                            isSendingBits: !1,
                                            showCard: Qn.None,
                                            value: ""
                                        }), this.chatInputRef.focus(), this.autocompleteInputRef.setValue(""), [2]
                                }
                            })
                        })
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            if (!e.messageCheers.length) return {
                                showCard: e.showCard === Qn.Emotes ? Qn.None : Qn.Emotes
                            }
                        })
                    }, n.onBitsIconClick = function() {
                        n.state.showCard === Qn.Bits ? n.trackBitsCardInteraction(gi.a.CloseCard) : n.trackBitsCardInteraction(gi.a.OpenCard), n.setState({
                            showCard: n.state.showCard === Qn.Bits ? Qn.None : Qn.Bits
                        })
                    }, n.onShowViewersList = function() {
                        n.state.showCard !== Qn.None && n.setState({
                            showCard: Qn.None
                        }), n.props.showViewersList()
                    }, n.onBitsClose = function() {
                        n.state.showCard === Qn.Bits && n.setState({
                            showCard: Qn.None
                        }), n.trackBitsCardInteraction(gi.a.CloseCard)
                    }, n.onClickEmote = function(e) {
                        var t = n.state.value;
                        n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef.setValue(t)
                    }, n.onEmotePickerDataLoaded = function(e) {
                        e && n.setState({
                            showEmotePickerButton: !0
                        })
                    }, n.trackBitsCardInteraction = function(e, t) {
                        var i = {
                            actionName: e,
                            emoteType: t && t.emoteType,
                            emoteLevel: t && t.emoteLevel,
                            location: t && t.location,
                            displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                        };
                        Object(gi.h)(i)
                    }, n.state = {
                        chatMembers: t.activeChatters.getActiveChatters(),
                        hasInteractedOrPageload: t.firstPageLoaded,
                        isSendingBits: !1,
                        messageCheers: [],
                        showBuyBits: !1,
                        showCard: Qn.None,
                        showEmotePickerButton: !!t.authToken,
                        showRaidsSettingsTooltip: !1,
                        showRaidsFollowerOnlyTooltip: !1,
                        value: ""
                    }, n
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.syncMembersHandle = setInterval(this.syncMembers, 250)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    var n = this;
                    if (t.value !== this.state.value && this.props.bitsConfig) {
                        var i = [];
                        Object(j.c)(t.value, this.props.bitsConfig).forEach(function(e) {
                            e.type === Ct.a.Emote && i.push(e.content)
                        }), i.length && t.showCard === Qn.Emotes && this.setState({
                            showCard: Qn.None
                        }), this.setState({
                            messageCheers: i
                        })
                    }
                    this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && (m.k.get("raidsModerationTooltipsSeenNumTimes", 0), Number(m.k.get("raidsModerationTooltipsSeenNumTimes", 0)) < Li && this.setState({
                        showRaidsSettingsTooltip: !0,
                        showRaidsFollowerOnlyTooltip: !0
                    }, function() {
                        setTimeout(function() {
                            m.k.set("raidsModerationTooltipsSeenNumTimes", m.k.get("raidsModerationTooltipsSeenNumTimes", 0) + 1), n.setState({
                                showRaidsSettingsTooltip: !1
                            })
                        }, 2e4)
                    }))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.firstPageLoaded && e.firstPageLoaded && this.setState({
                        hasInteractedOrPageload: !0
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
                }, t.prototype.render = function() {
                    var e = [];
                    this.props.bitsConfig && e.push(S.createElement(z.v, {
                        key: "bits",
                        icon: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.event ? z._11.HGCNexus : z._11.Bits,
                        ariaLabel: Object(m.d)("Bits", "ChatInput"),
                        type: z.w.Secondary,
                        onClick: this.onBitsIconClick,
                        "data-a-target": "bits-button"
                    })), this.state.showEmotePickerButton && e.push(S.createElement(xi.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle
                    }));
                    var t = null;
                    this.state.hasInteractedOrPageload && (t = S.createElement(xi.c, {
                        channelOwnerID: this.props.channelID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === Qn.Emotes
                    }));
                    var n = null;
                    this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = S.createElement(vi, {
                        bitsConfig: this.props.bitsConfig,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentCheers: this.state.messageCheers,
                        isSending: this.state.isSendingBits,
                        isStaff: this.props.isStaff,
                        onCancelSend: this.cancelDelayedSend,
                        onClickCheermote: this.onClickEmote,
                        onConfirmSend: this.confirmDelayedSend,
                        onUserClose: this.onBitsClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        visible: this.state.showCard === Qn.Bits
                    }));
                    var i = null;
                    return this.props.data.user && null !== this.props.data.user.cheer && null !== this.props.data.user.cheer.hashtags && this.state.messageCheers.length > 0 && (i = S.createElement(yi, {
                        hashTags: this.props.data.user.cheer.hashtags
                    })), S.createElement(z.V, {
                        className: "chat-input",
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, S.createElement(z.Q, {
                        position: z._4.Relative,
                        zIndex: z._39.Above
                    }, S.createElement("div", {
                        onMouseEnter: this.onMouseEnterInput
                    }, t, n, S.createElement(xn.b, {
                        componentType: xn.a.TextArea,
                        suggestionSource: xn.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onFocus: this.onInputFocus,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        paddingRight: 30 * e.length,
                        placeholder: Object(m.d)("Send a message", "ChatInput"),
                        noResize: !0,
                        "data-a-target": "chat-input",
                        "data-test-selector": "chat-input",
                        disabled: this.state.isSendingBits,
                        containerElement: this.props.containerElement
                    }, S.createElement(xn.d, {
                        emotes: this.props.emotes
                    }), S.createElement(wi, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        chatMembers: this.state.chatMembers
                    }), i), S.createElement(z.V, {
                        position: z._4.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e))), S.createElement(z.V, {
                        className: "chat-input__buttons-container",
                        display: z.H.Flex,
                        justifyContent: z.U.Between,
                        margin: {
                            top: 1
                        }
                    }, S.createElement(z.V, {
                        display: z.H.Flex,
                        flexDirection: z.J.Row
                    }, S.createElement(z.V, {
                        position: z._4.Relative
                    }, S.createElement(Si.a, {
                        disabled: this.props.isEmbedded,
                        onToggle: this.onChatSettingsToggle,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        authToken: this.props.authToken,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onChatCommand: this.onChatCommand,
                        isPopout: this.props.isPopout,
                        channelID: this.props.channelID,
                        sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip
                    }), this.state.showRaidsSettingsTooltip ? S.createElement(Di, null) : null), S.createElement(z.v, {
                        ariaLabel: Object(m.d)("Viewer list", "ChatInput"),
                        "data-a-target": "chat-viewer-list",
                        "data-test-selector": "chat-viewer-list",
                        icon: z._11.ViewerList,
                        onClick: this.onShowViewersList
                    })), this.renderSendButton()))
                }, t.prototype.renderSendButton = function() {
                    var e;
                    return e = this.state.value && null !== Object(je.n)(this.state.value) ? Object(m.d)("Whisper", "ChatInput") : Object(m.d)("Chat", "ChatInput"), S.createElement(z.u, {
                        onClick: this.onMessageSend,
                        "data-a-target": "chat-send-button",
                        "data-test-selector": "chat-send-button",
                        disabled: this.state.isSendingBits
                    }, e)
                }, t.prototype.sendRegularMessage = function() {
                    this.props.onSendMessage && this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef.setValue(""), this.setState({
                        showCard: Qn.None
                    }))
                }, t.prototype.trackChatEvent = function() {
                    Object(Ii.a)({
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        player: this.props.isPopout ? Ti.a.Embed : Ti.a.Web,
                        subOnlyMode: this.props.isSubsOnlyModeEnabled
                    })
                }, t.prototype.trackMentions = function() {
                    if (this.state.value && this.props.sessionUser)
                        for (var e = 0, t = Object(Mt.c)(this.state.value, this.props.sessionUser.displayName, !1); e < t.length; e++) {
                            var n = t[e];
                            n.type === Ct.a.Mention && n.content.recipient !== n.content.sender && Oi({
                                channelLogin: this.props.channelLogin,
                                isHostMode: this.props.isHostMode,
                                mentionedUserDisplayName: n.content.recipient,
                                userLogin: this.props.sessionUser.login
                            })
                        } else m.i.warn("[ChatInput] trackMentions was called in a nonsensical state.")
                }, t
            }(S.Component),
            Pi = Object(_.compose)(Object(C.a)(Ri, {
                name: "sendCheer"
            }), Object(C.a)(Ui), Object(jt.c)("ChatInput", {
                autoReportInteractive: !0
            }), Object(k.a)(function(e) {
                return {
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode,
                    sessionUser: Object(y.c)(e)
                }
            }, function(e) {
                return Object(E.bindActionCreators)({
                    login: function() {
                        return Object(Te.f)(De.a.Chat)
                    }
                }, e)
            }))(Bi),
            Vi = n("pexS"),
            Hi = n("DtWM"),
            Wi = n("zCIC"),
            Gi = (n("rMeN"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            qi = 10,
            zi = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        if (t.scroll && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type)) {
                            t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= qi ? t.setState({
                                isAutoScrolling: !0
                            }) : t.setState({
                                isAutoScrolling: !1
                            })
                        }
                    }, t.handleResize = function() {
                        t.state.isAutoScrolling && t.scrollToBottom()
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom)
                    }, t.scrollToBottom = function() {
                        t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    Gi.forEach(function(t) {
                        return e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    Gi.forEach(function(t) {
                        return e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.props.messages.map(function(t) {
                            return S.createElement(yn, {
                                badgeSets: e.props.badgeSets,
                                channelID: e.props.channelID,
                                isCurrentUserModerator: e.props.isCurrentUserModerator,
                                message: t,
                                key: t.id,
                                showModerationIcons: e.props.showModerationIcons && !e.props.isEmbedded,
                                showTimestamps: e.props.showTimestamps,
                                currentUserDisplayName: e.props.currentUserDisplayName,
                                currentUserLogin: e.props.currentUserLogin,
                                onPushMessage: e.props.onPushMessage,
                                doesNotUpdate: !0
                            })
                        });
                    return S.createElement(z.V, {
                        refDelegate: this.props.containerRef,
                        className: "chat-list",
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        flexWrap: z.K.NoWrap,
                        overflow: z._0.Hidden,
                        flexGrow: 1
                    }, S.createElement(Hi.a, {
                        onResize: this.handleResize
                    }), S.createElement(z.Q, {
                        flexGrow: 1
                    }, S.createElement(Wi.b, {
                        className: "chat-list__lines",
                        scrollRef: this.saveScrollRef,
                        "data-a-target": "chat-scroller"
                    }, S.createElement(z.V, {
                        flexGrow: 1,
                        fullHeight: !0,
                        padding: {
                            bottom: 1
                        }
                    }, t))), S.createElement(z.V, {
                        className: "chat-list__more-messages-placeholder",
                        position: z._4.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : S.createElement(z.Q, {
                        display: z.H.Flex,
                        justifyContent: z.U.Center,
                        alignItems: z.c.Center,
                        position: z._4.Absolute,
                        padding: .5,
                        attachBottom: !0,
                        fullWidth: !0
                    }, S.createElement("div", {
                        className: "chat-list__more-messages",
                        onClick: this.handleClickMoreMessages
                    }, Object(m.d)("More messages below.", "ChatList")))
                }, t
            }(S.Component),
            Qi = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = e.pubsub.messages.chatRichEmbedInfo;
                    t && this.props.pubsub.messages.chatRichEmbedInfo !== t && m.n.apollo.client.writeQuery({
                        query: Vi,
                        variables: {
                            slug: t.data.twitch_metadata.clip_metadata.slug
                        },
                        data: function(e) {
                            var t = e.data.twitch_metadata.clip_metadata,
                                n = {
                                    clip: {
                                        slug: t.slug,
                                        id: t.id,
                                        url: e.data.request_url,
                                        title: e.data.title,
                                        thumbnailURL: e.data.thumbnail_url,
                                        curator: {
                                            displayName: e.data.author_name,
                                            __typename: "User"
                                        },
                                        broadcaster: {
                                            displayName: t.channel_display_name,
                                            __typename: "User"
                                        },
                                        game: null,
                                        __typename: "Clip"
                                    }
                                };
                            return t.game && (n.clip.game = {
                                displayName: t.game,
                                __typename: "Game"
                            }), n
                        }(t)
                    })
                }, t.prototype.render = function() {
                    return S.createElement(zi, {
                        channelID: this.props.channelID,
                        badgeSets: this.props.badgeSets,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        channelLogin: this.props.channelLogin,
                        onPushMessage: this.props.onPushMessage,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        messages: this.props.messages,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        currentUserLogin: this.props.currentUserLogin,
                        containerRef: this.props.containerRef
                    })
                }, t
            }(S.Component),
            $i = Object(E.compose)(Object(k.a)(function(e, t) {
                return {
                    messages: function(e, t) {
                        return e.chat && e.chat.messages ? e.chat.messages[t] || [] : []
                    }(e, t.channelLogin),
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps
                }
            }), Object(P.a)([{
                skip: function(e) {
                    return !e.channelID
                },
                topic: function(e) {
                    return e.channelID ? Object(W.h)(e.channelID) : ""
                },
                mapMessageTypesToProps: (ji = {}, ji[V.c.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", ji)
            }]))(Qi),
            Ji = (n("HuX0"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickConfirm = function() {
                        n.markRoomSeen(), n.setState({
                            showRules: !1
                        })
                    };
                    var i = n.getRoomsSeen();
                    return n.state = {
                        showRules: n.props.chatRules && n.props.chatRules.length > 0 && !i[n.props.channelLogin]
                    }, n
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return this.state.showRules ? S.createElement(z.V, {
                        className: "chat-rules",
                        position: z._4.Relative
                    }, S.createElement(z._19, {
                        border: !0,
                        background: z.m.Base,
                        margin: {
                            bottom: 1
                        }
                    }, S.createElement(z.V, {
                        padding: 1
                    }, S.createElement(z.V, {
                        margin: {
                            bottom: 1
                        }
                    }, S.createElement(z._23, {
                        type: z._28.H6
                    }, Object(m.d)("Chat Rules:", "ChatRules"))), S.createElement(z.V, null, S.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                        return S.createElement("li", {
                            key: t
                        }, e)
                    }))), S.createElement(z.V, {
                        margin: {
                            top: 1
                        },
                        display: z.H.Flex,
                        justifyContent: z.U.Center
                    }, S.createElement(z.u, {
                        size: z.x.Small,
                        onClick: this.onClickConfirm
                    }, Object(m.d)("Ok, got it!", "ChatRules")))))) : null
                }, t.prototype.getRoomsSeen = function() {
                    return m.k.get("chat_rules_shown", {})
                }, t.prototype.markRoomSeen = function() {
                    var e = this.getRoomsSeen();
                    e[this.props.channelLogin] = !0, m.k.set("chat_rules_shown", e)
                }, t
            }(S.Component)),
            Ki = 3,
            Yi = (n("Bsuy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, $t.a.viewer_list, "")
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        a = n.map(function(t) {
                            return S.createElement("div", {
                                key: "chat-viewers-list-item-" + t
                            }, S.createElement("button", {
                                className: "chat-viewers-list__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, S.createElement(z._23, {
                                transform: z._27.Capitalize
                            }, t)))
                        });
                    return S.createElement(z.V, {
                        className: "chat-viewers-list",
                        padding: {
                            bottom: 2
                        }
                    }, S.createElement("div", null, S.createElement(z._23, {
                        transform: z._27.Uppercase
                    }, i)), a)
                }, t
            }(S.Component)),
            Zi = (n("gwjw"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        filter: "",
                        inputValue: "",
                        filteredViewers: {},
                        viewersPage: 0,
                        renderedViewers: [],
                        isLoading: !1
                    }, t.filterTimeout = 0, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.loadMore = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return u.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, new Promise(function(t) {
                                            e.setState(function(t) {
                                                return {
                                                    renderedViewers: e.getRenderedViewers(t.filteredViewers.viewers, t.viewersPage + 1),
                                                    viewersPage: t.viewersPage + 1
                                                }
                                            }, function() {
                                                t()
                                            })
                                        })];
                                    case 1:
                                        return t.sent(), [2]
                                }
                            })
                        })
                    }, t.getRenderedViewers = function(e, t) {
                        return e ? e.slice(0, 100 * (t || 1)) : []
                    }, t.handleFilter = function(e, n) {
                        var i = function(e, t) {
                                if (!t) return e;
                                var n = Object.assign({}, e);
                                return Object.keys(n).forEach(function(e) {
                                    var i = n[e];
                                    Array.isArray(i) && (n[e] = i.filter(function(e) {
                                        return -1 !== e.toLowerCase().indexOf(t)
                                    }))
                                }), n
                            }(n, e),
                            a = t.getRenderedViewers(i.viewers, 1);
                        t.scroll && t.scroll.scrollToTop(), t.setState({
                            filteredViewers: i,
                            isLoading: !1,
                            renderedViewers: a,
                            viewersPage: 1
                        })
                    }, t.handleFilterChange = function(e) {
                        var n = e.target.value,
                            i = n.toLowerCase().trim();
                        t.setState({
                            filter: i,
                            inputValue: n,
                            isLoading: !0
                        }), clearTimeout(t.filterTimeout), t.filterTimeout = setTimeout(function() {
                            t.handleFilter(i, t.props.viewers)
                        }, 350)
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.handleFilter(this.state.filter, e.viewers)
                }, t.prototype.render = function() {
                    var e = this.props.onShowViewerCard,
                        t = [],
                        n = this.state.filteredViewers;
                    n.staff && n.staff.length > 0 && t.push(S.createElement(Yi, {
                        key: "chat-viewers-list-staff",
                        header: Object(m.d)("Staff", "ChatViewers"),
                        viewers: n.staff,
                        onUsernameClick: e
                    })), n.admins && n.admins.length > 0 && t.push(S.createElement(Yi, {
                        key: "chat-viewers-list-admins",
                        header: Object(m.d)("Admins", "ChatViewers"),
                        viewers: n.admins,
                        onUsernameClick: e
                    })), n.global_mods && n.global_mods.length > 0 && t.push(S.createElement(Yi, {
                        key: "chat-viewers-list-global-mods",
                        header: Object(m.d)("Global Moderators", "ChatViewers"),
                        viewers: n.global_mods,
                        onUsernameClick: e
                    })), n.moderators && n.moderators.length > 0 && t.push(S.createElement(Yi, {
                        key: "chat-viewers-list-moderators",
                        header: Object(m.d)("Moderators", "ChatViewers"),
                        viewers: n.moderators,
                        onUsernameClick: e
                    })), n.viewers && n.viewers.length > 0 && t.push(S.createElement(Yi, {
                        key: "chat-viewers-list-viewers",
                        "data-test-selector": "chat-viewers-list-viewers",
                        header: Object(m.d)("Viewers", "ChatViewers"),
                        viewers: this.state.renderedViewers,
                        onUsernameClick: e
                    }));
                    var i = this.props.isLoading || this.state.isLoading,
                        a = i && S.createElement(z.V, {
                            className: "chat-viewers__loading",
                            display: z.H.Flex,
                            alignItems: z.c.Center,
                            justifyContent: z.U.Center,
                            zIndex: z._39.Above,
                            position: z._4.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, S.createElement(z.Z, null));
                    return S.createElement(z.V, {
                        className: "chat-viewers__container",
                        fullWidth: !0,
                        fullHeight: !0,
                        flexShrink: 0,
                        zIndex: z._39.Default
                    }, S.createElement(z.V, {
                        className: "chat-viewers__pane",
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        flexWrap: z.K.NoWrap,
                        position: z._4.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0
                    }, S.createElement(z.V, {
                        className: "chat-viewers__header",
                        display: z.H.Flex,
                        justifyContent: z.U.Center,
                        alignItems: z.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, S.createElement(z.V, {
                        position: z._4.Absolute,
                        attachLeft: !0,
                        margin: {
                            left: 1
                        }
                    }, S.createElement(z.v, {
                        icon: z._11.Close,
                        ariaLabel: Object(m.d)("Close", "ChatViewers"),
                        "data-a-target": "chat-viewer-list",
                        onClick: this.props.closeViewersList
                    })), S.createElement("p", {
                        "data-a-target": "chat-viewers_header-channel-name"
                    }, Object(m.d)("Viewer List", "ChatViewers"))), S.createElement(z.V, {
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        flexWrap: z.K.NoWrap,
                        fullHeight: !0
                    }, S.createElement(z.V, {
                        className: "chat-viewers__filter",
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }, S.createElement(z.R, {
                        type: z.S.Search,
                        name: "viewers-filter",
                        placeholder: Object(m.d)("Filter Viewers", "ChatViewers"),
                        readOnly: this.props.isLoading,
                        onChange: this.handleFilterChange,
                        value: this.state.inputValue
                    })), S.createElement(Wi.b, {
                        className: "chat-viewers__list",
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0,
                        scrollContentClassName: "chat-viewers__scroll-container"
                    }, S.createElement(z.V, {
                        padding: {
                            x: 2
                        }
                    }, t, S.createElement(Wi.a, {
                        key: this.state.filter,
                        enabled: !i,
                        loadMore: this.loadMore
                    })))), a))
                }, t
            }(S.Component)),
            Xi = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        viewers: {},
                        viewerCount: 0,
                        isLoading: !1
                    }, n.logger = m.i.withCategory("chat-viewers"), n
                }
                return u.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.channelLogin !== e.channelLogin && this.updateViewers(e.channelLogin)
                }, t.prototype.componentDidMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            return this.updateViewers(this.props.channelLogin), [2]
                        })
                    })
                }, t.prototype.render = function() {
                    return S.createElement(Zi, {
                        channelLogin: this.props.channelLogin,
                        closeViewersList: this.props.closeViewersList,
                        viewers: this.state.viewers,
                        viewerCount: this.state.viewerCount,
                        isLoading: this.state.isLoading,
                        onShowViewerCard: this.props.onShowViewerCard
                    })
                }, t.prototype.updateViewers = function(e) {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var t, n, i;
                        return u.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return this.setState({
                                        isLoading: !0
                                    }), [4, function(e) {
                                        return u.__awaiter(this, void 0, void 0, function() {
                                            var t, n, i, a, r;
                                            return u.__generator(this, function(s) {
                                                switch (s.label) {
                                                    case 0:
                                                        t = "https://tmi.twitch.tv/group/user/" + e.toLowerCase() + "/chatters", n = 1, s.label = 1;
                                                    case 1:
                                                        if (!(n <= Ki)) return [3, 7];
                                                        s.label = 2;
                                                    case 2:
                                                        return s.trys.push([2, 5, , 6]), [4, fetch(t, {
                                                            method: "GET",
                                                            headers: {
                                                                Accept: "application/json; charset=UTF-8",
                                                                "content-type": "application/json; charset=UTF-8"
                                                            }
                                                        })];
                                                    case 3:
                                                        return i = s.sent(), [4, i.json()];
                                                    case 4:
                                                        return a = s.sent(), m.i.debug("[update] getViewers done."), [2, a];
                                                    case 5:
                                                        if (r = s.sent(), n === Ki) throw r;
                                                        return [3, 6];
                                                    case 6:
                                                        return ++n, [3, 1];
                                                    case 7:
                                                        return [2]
                                                }
                                            })
                                        })
                                    }(e)];
                                case 1:
                                    return t = a.sent(), n = t ? t.chatters : {}, i = t ? t.chatter_count : 0, m.i.debug("Updated viewers list with " + i + " viewers"), this.setState({
                                        viewers: n,
                                        viewerCount: i,
                                        isLoading: !1
                                    }), [2]
                            }
                        })
                    })
                }, t
            }(S.Component),
            ea = Object(k.a)(null, function(e) {
                return Object(E.bindActionCreators)({
                    onShowViewerCard: v.d
                }, e)
            })(Xi),
            ta = n("tjbt"),
            na = n("V5M+"),
            ia = n("oSFp"),
            aa = n("E9Qg"),
            ra = n("5s0/"),
            sa = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIgnored: !1
                    }, t.ignoreUser = function() {
                        t.props.sendMessageToTMI(Object(je.h)(t.props.targetLogin)), t.setState({
                            isIgnored: !0
                        })
                    }, t.unignoreUser = function() {
                        t.props.sendMessageToTMI(Object(je.j)(t.props.targetLogin)), t.setState({
                            isIgnored: !1
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isIgnored) {
                        var e = Object(m.d)("Unblock User", "ViewerCardIgnoreAction");
                        return S.createElement(z._31, {
                            key: "Ignore",
                            label: e,
                            direction: z._33.Top,
                            align: z._32.Right,
                            offsetX: "15%"
                        }, S.createElement(z.v, {
                            icon: z._11.Unignore,
                            ariaLabel: Object(m.d)("Unblock {displayName}", {
                                displayName: this.props.targetDisplayName
                            }, "ViewerCardIgnoreAction"),
                            onClick: this.unignoreUser,
                            overlay: !0
                        }))
                    }
                    var t = Object(m.d)("Block User", "ViewerCardIgnoreAction");
                    return S.createElement(z._31, {
                        key: "Ignore",
                        label: t,
                        direction: z._33.Top,
                        align: z._32.Right,
                        offsetX: "15%"
                    }, S.createElement(z.v, {
                        icon: z._11.Ignore,
                        ariaLabel: Object(m.d)("Block {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.ignoreUser,
                        overlay: !0
                    }))
                }, t = u.__decorate([Object(jt.c)("ViewerCardIgnoreAction")], t)
            }(S.Component),
            oa = n("Dc1A"),
            la = n("1Eny"),
            ca = n("zVM8"),
            da = "10 minutes",
            ua = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(H.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t.onTimeoutClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(H.a)({
                            channelID: i,
                            bannedUserLogin: a,
                            expiresIn: da
                        }))
                    }, t.onUnbanClick = function() {
                        var e = t.props,
                            n = e.unbanUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(H.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return S.createElement(z.V, {
                        display: z.H.InlineFlex
                    }, this.getContent())
                }, t.prototype.getContent = function() {
                    return this.props.data.loading || this.props.data.error ? [this.renderBanAction(!0), this.renderTimeoutAction(!0)] : this.props.data.chatRoomBanStatus ? this.props.data.chatRoomBanStatus.isPermanent ? [this.renderUnbanAction(), this.renderTimeoutAction(!0)] : [this.renderBanAction(), this.renderUntimeoutAction()] : [this.renderBanAction(), this.renderTimeoutAction()]
                }, t.prototype.renderTimeoutAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(m.d)("Timeout User", "ViewerCardModActions");
                    return S.createElement(z._31, {
                        key: "Timeout",
                        label: t,
                        direction: z._33.Top,
                        align: z._32.Left,
                        offsetX: "15%"
                    }, S.createElement(z.V, {
                        padding: {
                            right: 1
                        }
                    }, S.createElement(z.v, {
                        icon: z._11.Timeout,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onTimeoutClick
                    })))
                }, t.prototype.renderUntimeoutAction = function() {
                    var e = Object(m.d)("Untimeout User", "ViewerCardModActions");
                    return S.createElement(z._31, {
                        key: "Untimeout",
                        label: e,
                        direction: z._33.Top,
                        align: z._32.Left,
                        offsetX: "15%"
                    }, S.createElement(z.V, {
                        padding: {
                            right: 1
                        }
                    }, S.createElement(z.v, {
                        icon: z._11.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t.prototype.renderBanAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(m.d)("Ban User", "ViewerCardModActions");
                    return S.createElement(z._31, {
                        key: "Ban",
                        label: t,
                        direction: z._33.Top,
                        align: z._32.Left,
                        offsetX: "32%"
                    }, S.createElement(z.V, {
                        padding: {
                            right: 1,
                            left: 1
                        }
                    }, S.createElement(z.v, {
                        icon: z._11.Ban,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onBanClick
                    })))
                }, t.prototype.renderUnbanAction = function() {
                    var e = Object(m.d)("Unban User", "ViewerCardModActions");
                    return S.createElement(z._31, {
                        key: "Unban",
                        label: e,
                        direction: z._33.Top,
                        align: z._32.Left,
                        offsetX: "32%"
                    }, S.createElement(z.V, {
                        padding: {
                            right: 1,
                            left: 1
                        }
                    }, S.createElement(z.v, {
                        icon: z._11.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t = u.__decorate([Object(jt.c)("ViewerCardModActions"), Object(C.a)(ca, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.userID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(C.a)(oa, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var i = e.readQuery({
                                        query: ca,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        }
                                    });
                                    t && t.data && (i.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: ca,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        },
                                        data: i
                                    })
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(C.a)(la, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                            query: ca,
                                            variables: {
                                                targetUserID: t.userID,
                                                channelID: t.channelID
                                            }
                                        }),
                                        i = u.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                    e.writeQuery({
                                        query: ca,
                                        variables: {
                                            targetUserID: t.userID,
                                            channelID: t.channelID
                                        },
                                        data: i
                                    })
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(S.Component),
            pa = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.modUser = function() {
                        n.props.sendMessageToTMI(Object(je.i)(n.props.targetLogin)), n.setState({
                            isModerator: !0
                        })
                    }, n.unmodUser = function() {
                        n.props.sendMessageToTMI(Object(je.k)(n.props.targetLogin)), n.setState({
                            isModerator: !1
                        })
                    }, n.state = {
                        isModerator: !1
                    }, n
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isModerator) {
                        var e = Object(m.d)("Unmod User", "ViewerCardOwnerActions");
                        return S.createElement(z._31, {
                            label: e,
                            direction: z._33.Top,
                            align: z._32.Center
                        }, S.createElement(z.V, {
                            key: "OP",
                            padding: {
                                right: 1
                            }
                        }, S.createElement(z.v, {
                            icon: z._11.FollowCheck,
                            ariaLabel: e,
                            onClick: this.unmodUser
                        })))
                    }
                    e = Object(m.d)("Mod User", "ViewerCardOwnerActions");
                    return S.createElement(z._31, {
                        label: e,
                        direction: z._33.Top,
                        align: z._32.Center
                    }, S.createElement(z.V, {
                        key: "OP",
                        padding: {
                            right: 1
                        }
                    }, S.createElement(z.v, {
                        icon: z._11.OP,
                        ariaLabel: e,
                        onClick: this.modUser
                    })))
                }, t = u.__decorate([Object(jt.c)("ViewerCardOwnerActions")], t)
            }(S.Component),
            ma = n("O1nh"),
            ha = n("mw/a"),
            ga = n("daN3"),
            fa = n("YH6m"),
            va = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    return S.createElement(z.V, null, S.createElement(z.V, {
                        display: z.H.Flex,
                        justifyContent: z.U.Between,
                        alignItems: z.c.Center,
                        fullWidth: !0
                    }, S.createElement(z._23, {
                        bold: !0,
                        type: z._28.H5
                    }, Object(m.d)("Choose A Gift Subscription", "GiftTierTabs")), S.createElement(z.u, {
                        type: z.z.Text,
                        icon: z._11.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, S.createElement(z.V, {
                        alignItems: z.c.Center,
                        display: z.H.InlineFlex
                    }, S.createElement(z._23, null, Object(m.d)("Back", "GiftTierTabs"))))), S.createElement(fa.a, {
                        canPrimeSubscribe: !1,
                        channelDisplayName: this.props.channelDisplayName,
                        giftRecipient: this.props.giftRecipient,
                        isGift: !0,
                        isSubscribed: !1,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1
                    }))
                }, t
            }(S.Component),
            ba = n("pQNb"),
            ka = n("CwIZ"),
            ya = (n("VSa1"), n("BBNG"));
        ! function(e) {
            e[e.ActionsPage = 0] = "ActionsPage", e[e.SubGiftSelectPage = 1] = "SubGiftSelectPage"
        }(Ai || (Ai = {}));
        var Sa = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: Ai.ActionsPage
                    }, t.getContent = function() {
                        if (t.props.data.loading || t.props.data.error) return t.renderHideButton();
                        var e = {
                                backgroundImage: "url(" + (t.props.data.targetUser.bannerImageURL || aa) + ")"
                            },
                            n = t.state.currentPage === Ai.ActionsPage ? t.renderActions() : t.renderSubGiftSelect();
                        return S.createElement(z.V, null, S.createElement(z._19, {
                            elevation: 1,
                            border: !0
                        }, S.createElement("div", {
                            className: "viewer-card",
                            style: e
                        }, S.createElement(z.V, {
                            display: z.H.Flex,
                            flexDirection: z.J.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            className: "viewer-card__overlay"
                        }, S.createElement(z.V, {
                            padding: 1,
                            alignItems: z.c.Start,
                            justifyContent: z.U.Start,
                            display: z.H.Flex,
                            flexDirection: z.J.Row,
                            textAlign: z._24.Center,
                            fullWidth: !0,
                            flexGrow: 1,
                            className: "viewer-card__banner"
                        }, S.createElement(z.l, {
                            imageSrc: t.props.data.targetUser.profileImageURL,
                            size: 50,
                            imageAlt: t.props.data.targetUser.displayName
                        }), S.createElement(z.V, {
                            alignItems: z.c.Center,
                            margin: 1,
                            className: "viewer-card__display-name",
                            ellipsis: !0
                        }, S.createElement(z._23, {
                            type: z._28.H4
                        }, S.createElement("a", {
                            className: "viewer-card__display-name-link",
                            href: "/" + t.props.targetLogin,
                            target: "_blank"
                        }, t.props.data.targetUser.displayName))), t.renderHideButton(), t.renderIgnoreButton()))), n))
                    }, t.toggleGiftPage = function() {
                        var e = t.state.currentPage === Ai.ActionsPage ? Ai.SubGiftSelectPage : Ai.ActionsPage;
                        e === Ai.SubGiftSelectPage && t.trackGiftEvent(), t.setState({
                            currentPage: e
                        })
                    }, t.onWhisperButtonClick = function() {
                        t.props.hideViewerCard()
                    }, t.handleReportUserClick = function() {
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: t.reportContentTypeFromSourceType(t.props.sourceType),
                                targetUserID: t.props.data.targetUser.id,
                                contentID: t.props.sourceID,
                                extra: JSON.stringify({
                                    channel_id: t.props.channelID.toString()
                                })
                            },
                            title: Object(m.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.data.targetUser.displayName
                            }, "ReportUserModalTitle")
                        })
                    }, t.trackBuyGiftSubEvent = function(e) {
                        Object(ka.b)(u.__assign({}, e, {
                            action: ka.a.BuyGiftSub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        }))
                    }, t.trackGiftEvent = function() {
                        Object(ka.b)({
                            action: ka.a.GiftASub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.error ? null : this.getContent()
                }, t.prototype.renderIgnoreButton = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : S.createElement(z.V, {
                        key: "Ignore",
                        position: z._4.Absolute,
                        attachRight: !0,
                        margin: {
                            top: 3,
                            right: .5
                        }
                    }, S.createElement(sa, {
                        targetDisplayName: this.props.data.targetUser.displayName,
                        targetLogin: this.props.targetLogin,
                        sendMessageToTMI: this.props.sendMessageToTMI
                    }))
                }, t.prototype.renderHideButton = function() {
                    return S.createElement(z.V, {
                        className: "viewer-card__hide",
                        position: z._4.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        margin: {
                            top: .5,
                            right: .5
                        }
                    }, S.createElement(z.v, {
                        icon: z._11.Close,
                        onClick: this.props.hideViewerCard,
                        ariaLabel: Object(m.d)("Hide", "ViewerCard"),
                        overlay: !0
                    }))
                }, t.prototype.renderActions = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : S.createElement(z._19, {
                        className: "viewer-card__actions",
                        "data-test-selector": "viewer-card-actions",
                        background: z.m.Base,
                        attachBottom: !0,
                        display: z.H.Flex,
                        flexDirection: z.J.Row,
                        justifyContent: z.U.Between,
                        fullWidth: !0,
                        flexGrow: 0
                    }, S.createElement(z.V, {
                        display: z.H.Flex,
                        flexDirection: z.J.Row,
                        fullWidth: !0,
                        margin: {
                            left: .5,
                            right: 1,
                            bottom: 1,
                            top: .5
                        }
                    }, this.renderSocialActions()), S.createElement(z._19, {
                        display: z.H.Flex,
                        background: z.m.Alt2,
                        fullWidth: !0
                    }, S.createElement(z.V, {
                        display: z.H.InlineFlex,
                        flexDirection: z.J.Row
                    }, this.renderChatActions())))
                }, t.prototype.renderSocialActions = function() {
                    var e = null;
                    return this.isModeratorOrHigher && (e = S.createElement(Ce.a, {
                        key: "MoreOptionsButton"
                    }, S.createElement(z.v, {
                        type: z.w.Hollow,
                        ariaLabel: Object(m.d)("More options", "ViewerCard"),
                        icon: z._11.More,
                        "data-a-target": "viewer-card-more-button"
                    }), S.createElement(z.p, {
                        direction: z.q.BottomRight,
                        "data-a-target": "viewer-card-more-balloon"
                    }, S.createElement(z.V, {
                        padding: {
                            y: 1
                        }
                    }, S.createElement(z.T, {
                        onClick: this.handleReportUserClick,
                        "data-a-target": "viewer-card-report-button"
                    }, S.createElement(z.V, {
                        padding: {
                            x: 1
                        }
                    }, Object(m.d)("Report {user}", {
                        user: this.props.targetLogin
                    }, "ViewerCard"))))))), [S.createElement(z.V, {
                        key: "FriendButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, S.createElement(ma.a, {
                        channelID: this.props.data.targetUser.id
                    })), this.renderWhisperButton(), this.renderGiftSubscriptionButton(), S.createElement(z.V, {
                        key: "ReportButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, e)]
                }, t.prototype.renderWhisperButton = function() {
                    if (!this.props.data.currentUser || !this.props.data.targetUser) return null;
                    var e = Object(gt.a)(this.props.data.currentUser.id, this.props.data.targetUser.id);
                    return S.createElement(z.V, {
                        key: "WhisperButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, S.createElement(ra.a, {
                        onClick: this.onWhisperButtonClick,
                        threadID: e
                    }))
                }, t.prototype.renderGiftSubscriptionButton = function() {
                    return !this.props.data.channelUser || !this.props.data.channelUser.subscriptionProducts || this.props.data.channelUser.subscriptionProducts.length < 1 ? null : S.createElement(z.V, {
                        key: "GiftButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, S.createElement(ga.a, {
                        onClick: this.toggleGiftPage,
                        subProductId: this.props.data.channelUser.subscriptionProducts[0].id,
                        giftRecipient: this.props.targetLogin
                    }))
                }, t.prototype.renderSubGiftSelect = function() {
                    return S.createElement(z.V, null, S.createElement(ba.a, {
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        isGift: !0
                    }), S.createElement(z._19, {
                        background: z.m.Base,
                        attachBottom: !0,
                        display: z.H.Flex,
                        flexDirection: z.J.Row,
                        justifyContent: z.U.Between,
                        fullWidth: !0,
                        flexGrow: 0,
                        padding: 2
                    }, S.createElement(va, {
                        onBack: this.toggleGiftPage,
                        channelDisplayName: this.props.data.channelUser.displayName,
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        giftRecipient: this.props.data.targetUser.login,
                        reportSubMenuAction: this.trackBuyGiftSubEvent
                    })))
                }, t.prototype.renderChatActions = function() {
                    var e = [];
                    return this.isModeratorOrHigher() && e.push(S.createElement(ua, {
                        key: "ModActions",
                        channelID: this.props.data.channelUser.id,
                        userID: this.props.data.targetUser.id,
                        userLogin: this.props.targetLogin
                    })), this.isOwnerOrHigher() && e.push(S.createElement(pa, {
                        key: "OwnerActions",
                        sendMessageToTMI: this.props.sendMessageToTMI,
                        targetLogin: this.props.targetLogin
                    })), e
                }, t.prototype.isOwnerOrHigher = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && (e.currentUser.roles.isGlobalMod || e.currentUser.roles.isSiteAdmin || e.currentUser.roles.isStaff || this.isOwner())
                }, t.prototype.isModeratorOrHigher = function() {
                    return this.isOwnerOrHigher() || this.props.data.channelUser.self && this.props.data.channelUser.self.isModerator
                }, t.prototype.isOwner = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && e.currentUser.id === e.channelUser.id
                }, t.prototype.reportContentTypeFromSourceType = function(e) {
                    switch (e) {
                        case $t.a.chat_message:
                            return ha.a.Chat;
                        case $t.a.recent_raids:
                            return ha.a.Raid;
                        case $t.a.viewer_list:
                        default:
                            return ha.a.User
                    }
                }, t = u.__decorate([Object(jt.c)("ViewerCard"), Object(C.a)(ya, {
                    options: function(e) {
                        return {
                            variables: {
                                targetLogin: e.targetLogin,
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(S.Component),
            Ca = (n("PqoY"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.hideViewerCard()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.viewerCardOptions && (e = S.createElement(z.V, {
                        className: "viewer-card-layer",
                        position: z._4.Relative
                    }, S.createElement(Sa, {
                        isEmbedded: this.props.isEmbedded,
                        targetLogin: this.props.viewerCardOptions.targetLogin,
                        hideViewerCard: this.props.hideViewerCard,
                        sendMessageToTMI: this.props.onSendMessage,
                        channelID: this.props.channelID,
                        showReportUserModal: this.props.showReportUserModal,
                        sourceType: this.props.viewerCardOptions.sourceType,
                        sourceID: this.props.viewerCardOptions.sourceID
                    }))), e
                }, t
            }(S.Component)),
            _a = Object(k.a)(function(e) {
                return {
                    viewerCardOptions: e.viewerCard.viewerCardOptions
                }
            }, function(e) {
                return Object(E.bindActionCreators)({
                    hideViewerCard: v.c,
                    showReportUserModal: function(e) {
                        var t = u.__rest(e, []);
                        return Object(na.d)(ia.a, t)
                    }
                }, e)
            })(Ca),
            Ea = n("vLl9"),
            Na = (n("dVd7"), m.i.withCategory("chat-room")),
            wa = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.closeViewersList = function() {
                        n.setState({
                            showViewersList: !1
                        })
                    }, n.showViewersList = function() {
                        n.setState({
                            showViewersList: !0
                        })
                    }, n.onChatInputFocus = function() {
                        n.props.authToken && !n.state.showChatRules && n.setState({
                            showChatRules: !0
                        })
                    }, n.setChatListElement = function(e) {
                        n.setState({
                            chatListElement: e
                        })
                    };
                    var i = new Gt.c([], [], n.props.channelLogin);
                    return n.state = {
                        showChatRules: !1,
                        showViewersList: !1,
                        badgeSets: i
                    }, n
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    var e = void 0 !== Ze.parse(this.props.location.search).darkpopout,
                        t = (s = {}, s[Object(Bt.c)(N.a.Dark)] = e, s);
                    if (this.props.isHidden) return S.createElement(z._19, {
                        alignItems: z.c.Center,
                        background: z.m.Alt2,
                        borderLeft: !0,
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: z.U.Center,
                        color: z.F.Base,
                        position: z._4.Relative
                    }, S.createElement(z.V, {
                        margin: {
                            bottom: 1
                        }
                    }, S.createElement(z._23, {
                        fontSize: z.L.Size5
                    }, Object(m.d)("Chat is hidden.", "ChatRoom"))), S.createElement(z.u, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(m.d)("Show Chat", "ChatRoom")));
                    var n = this.props.bitsConfig && this.props.firstPageLoaded && S.createElement(Tn, {
                            badgeData: this.state.badgeSets,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelID: this.props.channelID,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin
                        }),
                        i = this.state.showViewersList && S.createElement(ea, {
                            channelLogin: this.props.channelLogin,
                            closeViewersList: this.closeViewersList
                        }),
                        a = !!this.props.authToken && !this.props.isEmbedded,
                        r = null;
                    return this.state.showChatRules && (r = S.createElement(z.V, {
                        padding: {
                            x: 2
                        }
                    }, S.createElement(Ji, {
                        chatRules: this.props.chatRules,
                        channelLogin: this.props.channelLogin
                    }))), S.createElement(z.V, {
                        className: B("chat-room__container", t),
                        "data-a-target": this.props.theme === N.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                        flexShrink: 1,
                        flexGrow: 1,
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        overflow: z._0.Hidden,
                        fullWidth: !0,
                        fullHeight: !0
                    }, S.createElement(z._19, {
                        background: z.m.Alt2,
                        borderLeft: !0,
                        display: z.H.Flex,
                        flexDirection: z.J.Column,
                        flexWrap: z.K.NoWrap,
                        position: z._4.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: z._0.Hidden,
                        color: z.F.Base
                    }, S.createElement(z._19, {
                        background: z.m.Alt2,
                        borderBottom: !0,
                        className: "chat-room__header",
                        display: z.H.Flex,
                        justifyContent: z.U.Center,
                        alignItems: z.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, S.createElement("p", {
                        "data-a-target": "chat-room__header-channel-name"
                    }, this.props.channelLogin)), this.props.chatRoomHeader, n, S.createElement($i, {
                        badgeSets: this.state.badgeSets,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        isEmbedded: this.props.isEmbedded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onPushMessage: this.props.onPushMessage,
                        containerRef: this.setChatListElement
                    }), S.createElement(z.V, {
                        className: "chat-room__viewer-card",
                        position: z._4.Absolute
                    }, S.createElement(_a, {
                        isEmbedded: this.props.isEmbedded,
                        onSendMessage: this.props.onSendMessage,
                        channelID: this.props.channelID
                    })), S.createElement(z.V, {
                        className: "chat-room__notifications",
                        position: z._4.Absolute,
                        zIndex: z._39.Default,
                        fullWidth: !0
                    }, this.props.children), r, this.props.isOwnChannel && !this.props.isEmbedded && S.createElement(Wt, {
                        hostedChannelLogin: this.props.hostedChannelLogin
                    }), i, S.createElement(ta.a, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onPushMessage: this.props.onPushMessage,
                        onSendMessage: this.props.onSendMessage
                    }), S.createElement(Pi, {
                        activeChatters: this.props.activeChatters,
                        authToken: this.props.authToken,
                        bitsConfig: a ? this.props.bitsConfig : void 0,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        firstPageLoaded: this.props.firstPageLoaded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isStaff: this.props.isStaff,
                        onChatCommand: this.props.onSendMessage,
                        badgeSets: this.state.badgeSets,
                        userBadges: this.props.userBadges,
                        showViewersList: this.showViewersList,
                        raidReceived: this.props.raidReceived,
                        onSendMessage: this.props.onSendMessage,
                        onInputFocus: this.onChatInputFocus,
                        containerElement: this.state.chatListElement
                    })));
                    var s
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && this.setState({
                            badgeSets: new Gt.c(e.data.badges, e.data.user.broadcastBadges, e.channelLogin)
                        }), e.data && e.data.user && e.data.user.self && e.data.user.self.displayBadges) {
                        var t = {};
                        e.data.user.self.displayBadges.forEach(function(e) {
                            t[e.setID] = e.version
                        }), m.n.tmi.client.updateChannelBadges(e.channelLogin, t)
                    }
                }, t
            }(S.Component),
            Da = Object(E.compose)(Object(C.a)(Ea, {
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(it.a)(function(e) {
                return {
                    query: Ea,
                    variables: {
                        channelLogin: e.channelLogin
                    },
                    topic: Object(W.l)(e.userID),
                    type: V.c.UserBitsBadgeUpdate,
                    skip: !e.userID,
                    mutator: function(t, n) {
                        if (Na.debug("Received bits-user-update-v1 pubsub update", {
                                data: n,
                                event: t
                            }), !n.badges || t.message_type === hn.Balance || null === t.data.newest_version || t.data.channel_id !== e.channelID) return n;
                        var i = n.badges.find(function(e) {
                            return "bits" === e.setID && e.version === t.data.newest_version
                        });
                        return void 0 !== i && n.user.self.displayBadges && "bits" === n.user.self.selectedBadge.setID && (n.user.self.selectedBadge = i, n.user.self.displayBadges = n.user.self.displayBadges.map(function(e) {
                            return "bits" === e.setID && e.version !== i.version ? i : e
                        })), n
                    }
                }
            }), we.e)(wa),
            Ta = "(?:\\W|^)",
            Ia = "(?:$|\\W)",
            Oa = 150,
            Ma = "PowerUpL DarkMode PowerUpR",
            xa = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        hasEnteredChatRoom: !1,
                        hostedChannelLogin: null,
                        raidReceived: !1,
                        userBadges: null
                    }, n.sendMessage = function(e) {
                        if (!e || 0 === e.length || !n.props.authToken) return !1;
                        var t = n.chatService.sendMessage(e);
                        return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                    }, n.pushMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e)
                    }, n.onChatMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e), n.onChatEvent(e)
                    }, n.connect = function(e) {
                        n.setState({
                            hasEnteredChatRoom: !1
                        }), e.userID && e.channelID && (n.moderationActionService = new Ft(e.channelID, e.userID, n.chatBuffer.consumeChatEvent)), n.chatService.join()
                    }, n.disconnect = function() {
                        n.clearBufferHandle(), n.moderationActionService && n.moderationActionService.unsubscribe(), n.chatService.part()
                    }, n.updateBitsConfig = function(e) {
                        void 0 === e && (e = j.a), n.chatService.updateBitsConfig(e)
                    }, n.updateBlockLinks = function(e) {
                        n.chatService.updateBlockLinks(e)
                    }, n.onChatBufferUpdate = function() {
                        n.syncBufferHandle || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.syncBufferedMessages = function() {
                        n.chatBuffer && n.chatBuffer.isDirty && n.props.onChatMessagesUpdate(n.chatBuffer.toArray()), n.clearBufferHandle()
                    }, n.onChatEvent = function(e) {
                        switch (e.type) {
                            case bt.a.Hosting:
                                n.hostingHandler(e.hostedChannel);
                                break;
                            case bt.a.Unhost:
                                n.hostingHandler(null);
                                break;
                            case bt.a.Connected:
                                n.onConnected();
                                break;
                            case bt.a.RoomState:
                                n.roomStateHandler(e.state);
                                break;
                            case bt.a.BadgesUpdated:
                                n.onBadgesUpdated(e);
                                break;
                            case bt.a.Raid:
                                n.setState({
                                    raidReceived: !0
                                })
                        }
                    }, n.hostingHandler = function(e) {
                        n.setState({
                            hostedChannelLogin: e
                        }), n.props.onHostingChange && n.props.onHostingChange(e)
                    }, n.roomStateHandler = function(e) {
                        e.slowMode ? n.props.onSlowModeEnable() : n.props.onSlowModeDisable(), void 0 !== e.followersOnly && (e.followersOnly ? (n.props.onFollowerModeDurationChange(e.followersOnlyRequirement), n.props.onFollowerModeEnable()) : n.props.onFollowerModeDisable()), void 0 !== e.subsOnly && (e.subsOnly ? n.props.onSubsOnlyModeEnable() : n.props.onSubsOnlyModeDisable())
                    }, n.onConnected = function() {
                        m.i.debug("Connected"), n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.state.hasEnteredChatRoom || Object(Lt.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: !!n.state.hostedChannelLogin
                        }), n.setState({
                            hasEnteredChatRoom: !0
                        }), n.props.latencyTracking.reportInteractive()
                    }, n.createOutgoingTokenMatchers = function(e) {
                        n.outgoingTokenMatchers = e.map(function(e) {
                            return {
                                token: e,
                                regex: new RegExp("" + Ta + e + Ia)
                            }
                        })
                    }, n.parseOutgoingMessage = function(e) {
                        n.outgoingTokenMatchers.forEach(function(t) {
                            t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                        })
                    }, n.onOutgoingTokenMatch = function(e, t) {
                        switch (e) {
                            case Ma:
                                var i = n.props.theme === N.a.Light ? N.a.Dark : N.a.Light;
                                n.props.onThemeChange(i);
                                break;
                            default:
                                return
                        }
                    }, n.onBadgesUpdated = function(e) {
                        n.setState({
                            userBadges: e.badges
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.chatService = new Rt(t.userLogin, t.channelLogin, n.onChatMessage), n.logger = m.i.withCategory("chat-room"), n.registerCustomLatencyEvents(), n.createOutgoingTokenMatchers([Ma]), n.activeChatters = new St(t.channelID), n.chatBuffer = new Dt(Oa, n.onChatBufferUpdate), n.chatBuffer.setBlockedUsers(t.blockedUsers), t.userLogin && n.chatBuffer.setCurrentUserLogin(t.userLogin), t.userID && n.activeChatters.setCurrentUserID(t.userID), n
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.connect(this.props), this.props.bitsConfig && this.updateBitsConfig(this.props.bitsConfig), this.updateBlockLinks(this.props.blockLinks), this.chatService.disabled && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.disconnect(), this.chatBuffer && this.chatBuffer.shutdown(), this.props.onChatMessagesReset()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props,
                        n = !1;
                    e.isHidden && !t.isHidden || !e.rightColumnExpanded && t.rightColumnExpanded ? this.disconnect() : (n = e.channelLogin !== t.channelLogin || e.userLogin !== t.userLogin || e.authToken !== t.authToken || !e.isHidden && t.isHidden || e.rightColumnExpanded && !t.rightColumnExpanded) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.connect(e), this.setState({
                        hostedChannelLogin: null
                    })), e.emoteSetsData && e.emoteSetsData.emoteSets && (e.emoteSetsData.emoteSets !== (t.emoteSetsData && t.emoteSetsData.emoteSets) || n) && (this.logger.debug("Updating emote sets", {
                        shouldReconnect: n,
                        prevSets: t.emoteSetsData && t.emoteSetsData.emoteSets,
                        nextSet: e.emoteSetsData.emoteSets
                    }), this.chatService.updateEmotes(e.emoteSetsData.emoteSets)), (e.bitsConfig !== t.bitsConfig || n) && this.updateBitsConfig(e.bitsConfig), (e.blockLinks !== t.blockLinks || n) && this.updateBlockLinks(e.blockLinks);
                    var i = e.isCurrentUserModerator ? 0 : e.chatDelayMS;
                    this.chatBuffer.setDelay(i), e.userLogin && t.userLogin !== e.userLogin && this.chatBuffer.setCurrentUserLogin(e.userLogin), e.userID && t.userID !== e.userID && this.activeChatters.setCurrentUserID(e.userID), t.channelID !== e.channelID && this.activeChatters.resetWithChannelID(e.channelID), t.blockedUsers !== e.blockedUsers && this.chatBuffer.setBlockedUsers(e.blockedUsers), !this.moderationActionService && e.userID && e.channelID && (this.moderationActionService = new Ft(e.channelID, e.userID, this.chatBuffer.consumeChatEvent))
                }, t.prototype.render = function() {
                    var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return S.createElement(Da, {
                        authToken: this.props.authToken,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        activeChatters: this.activeChatters,
                        chatRoomHeader: S.createElement(Ne, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        }),
                        chatRules: this.props.chatRules,
                        currentUserDisplayName: this.props.userDisplayName,
                        currentUserLogin: this.props.userLogin,
                        emotes: e,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hostedChannelLogin: this.state.hostedChannelLogin,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHidden: this.props.isHidden,
                        isHostMode: !!this.state.hostedChannelLogin,
                        isOwnChannel: this.isOwnChannel,
                        isPopout: this.props.isPopout,
                        onChatUnhide: this.props.onChatUnhide,
                        onPushMessage: this.pushMessage,
                        onSendMessage: this.sendMessage,
                        raidReceived: this.state.raidReceived,
                        theme: this.props.theme,
                        isStaff: this.props.isStaff,
                        userBadges: this.state.userBadges,
                        userID: this.props.userID
                    }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && S.createElement(de, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig
                    }), this.props.hostedChannelDisplayName && !this.props.isPopout && S.createElement(ue, {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                        hostedChannelLogin: this.state.hostedChannelLogin || ""
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && S.createElement(nt, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && S.createElement(Se, {
                        channelLogin: this.props.channelLogin
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && S.createElement(ut, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin
                    }), S.createElement(vt, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.userLogin,
                        userID: this.props.userID,
                        emoteMap: t
                    }), S.createElement(ve, {
                        currentUserLogin: this.props.userLogin
                    }), S.createElement(L, {
                        channelID: this.props.channelID
                    }))
                }, t.prototype.registerCustomLatencyEvents = function() {
                    this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents("Chat"), this.chatInitialized = this.registerInitEvent(), this.chatConnected = this.registerConnectedEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized)
                }, t.prototype.registerInitEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 3e3,
                        group: T.a.Chat,
                        key: T.b.ChatInit,
                        label: T.c.Init
                    })
                }, t.prototype.registerConnectedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 4e3,
                        group: T.a.Chat,
                        key: T.b.ChatConnected,
                        label: T.c.Connected
                    })
                }, Object.defineProperty(t.prototype, "isOwnChannel", {
                    get: function() {
                        return this.props.userID === this.props.channelID
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(S.Component),
            Ua = Object(_.compose)(Object(k.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    isLoggedIn: Object(y.d)(e),
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theme: Object(I.a)(e)
                }
            }, function(e, t) {
                return Object(E.bindActionCreators)({
                    onChatMessagesReset: function() {
                        return h.w()
                    },
                    onChatMessagesUpdate: function(e) {
                        return h.I(t.channelLogin, e)
                    },
                    onChatUnhide: function() {
                        return h.K()
                    },
                    onFollowerModeDisable: function() {
                        return h.x()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return h.u(e)
                    },
                    onFollowerModeEnable: function() {
                        return h.C()
                    },
                    onSlowModeDisable: function() {
                        return h.z()
                    },
                    onSlowModeEnable: function() {
                        return h.E()
                    },
                    onSubsOnlyModeDisable: function() {
                        return h.A()
                    },
                    onSubsOnlyModeEnable: function() {
                        return h.F()
                    },
                    onThemeChange: function(e) {
                        return Object(D.b)(e, D.a.TypedCommand)
                    }
                }, e)
            }), Object(jt.c)("ChatRoom"), Object(C.a)(At, {
                props: function(e) {
                    var t;
                    return e.data && e.data.user && e.data.user.cheer && (t = Object(A.a)(e.data.user.cheer.emotes)), {
                        bitsConfig: t
                    }
                },
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(C.a)(kt, {
                props: function(e) {
                    return e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers ? {
                        blockedUsers: e.data.currentUser.blockedUsers.map(function(e) {
                            return e.id
                        })
                    } : {
                        blockedUsers: []
                    }
                },
                skip: function(e) {
                    return !e.authToken
                }
            }), Object(w.a)())(xa),
            Ra = n("/eFD"),
            Fa = n("KNSH"),
            La = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.channelData.channel,
                        t = this.props.userData && this.props.userData.user,
                        n = !1,
                        i = !1;
                    if (t && e && e.self) {
                        var a = t.login === e.login,
                            r = t.roles.isGlobalMod || t.roles.isSiteAdmin || t.roles.isStaff;
                        n = e.self.isModerator || r || a, i = t.roles.isStaff
                    }
                    var s = e && e.chatSettings && e.chatSettings.rules,
                        o = e && e.chatSettings && e.chatSettings.chatDelayMs,
                        l = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                    return S.createElement(Ua, {
                        key: this.props.channelLogin,
                        authToken: this.props.user && this.props.user.authToken,
                        blockLinks: l,
                        channelDisplayName: e && e.displayName,
                        channelID: e && e.id,
                        channelLogin: this.props.channelLogin,
                        chatRules: s,
                        chatDelayMS: o,
                        clientID: this.props.clientID,
                        isCurrentUserModerator: n,
                        isEmbedded: !!this.props.isEmbedded,
                        isPopout: !!this.props.isPopout,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                        onHostingChange: this.props.onHostingChange,
                        userDisplayName: this.props.user && this.props.user.displayName,
                        userID: this.props.user && this.props.user.id.toString(),
                        userLogin: this.props.user && this.props.user.login,
                        isStaff: i
                    })
                }, t = u.__decorate([Object(C.a)(Ra, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(C.a)(Fa, {
                    name: "userData",
                    skip: function(e) {
                        return !e.user
                    }
                }), Object(jt.c)("Chat")], t)
            }(S.Component),
            ja = Object(k.a)(function(e) {
                return {
                    user: Object(y.c)(e)
                }
            })(La);
        n.d(t, "a", function() {
            return ja
        })
    },
    "1EXI": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_UserCommunities"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "directories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "directoryType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_UserCommunities($userId: ID!) {\nuser(id: $userId) {\nid\ndirectories {\nnodes {\nid\nname\ndisplayName\ndirectoryType\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1Eny": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1Mw/": function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("U7vG"),
            s = n("DtWM"),
            o = n("RH2O"),
            l = n("2KeS"),
            c = n("Aj/L"),
            d = n("5k1t"),
            u = n("HW6M"),
            p = n("BhyV"),
            m = n("6sO2"),
            h = n("rCmJ"),
            g = n("yWCw"),
            f = n("7vx8"),
            v = n("RweG"),
            b = n("6BvN"),
            k = n("Ldv2"),
            y = n("oIkB"),
            S = n("HZww"),
            C = n("HM6l"),
            _ = n("c3pS"),
            E = n("ieBa"),
            N = n("F8kA"),
            w = n("+Znq"),
            D = n("u8SD"),
            T = n("4Dne"),
            I = n("djIP"),
            O = n("vH/s"),
            M = n("2Hj/"),
            x = n("emkL"),
            U = n("Kxgf"),
            R = n("7miU"),
            F = n("Odds"),
            L = n("82Ta"),
            j = n("yTC+"),
            A = "whispers-report-harassment-button",
            B = "whispers-report-spam-button",
            P = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderReportSpamButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(m.d)("Report Spam", "ThreadSettings");
                        return r.createElement(F.T, {
                            "data-test-selector": B,
                            ariaLabel: e,
                            onClick: t.reportUserSpam
                        }, r.createElement(F.V, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.renderReportHarassmentButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(m.d)("Report Harrasment", "ThreadSettings");
                        return r.createElement(F.T, {
                            "data-test-selector": A,
                            ariaLabel: e,
                            onClick: t.reportUserHarassment
                        }, r.createElement(F.V, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.onChannelRedirect = function() {
                        t.props.collapseThread && t.props.collapseThread()
                    }, t.toggleMutethread = function() {
                        var e = !t.props.isMuted,
                            n = a.__assign({}, Object(y.a)({
                                threadID: t.props.threadID,
                                isMuted: !t.props.isMuted
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            id: t.props.threadID,
                                            isMuted: e,
                                            __typename: "WhisperThread"
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                        t.props.setMuteThread && (e ? Object(R.j)(t.props.threadID) : Object(R.k)(t.props.threadID), t.props.setMuteThread(n))
                    }, t.reportUserHarassment = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return a.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(y.a)({
                                            targetUserID: this.props.userID,
                                            reason: I.c.Harassment,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), m.i.error(t, "Failed to report whisper thread for harassment.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.reportUserSpam = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return a.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(y.a)({
                                            targetUserID: this.props.userID,
                                            reason: I.c.Spam,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), m.i.error(t, "Failed to report whisper thread for spam.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.blockUser = function() {
                        t.props.blockUserMutation(t.props.userID, I.b.Other, I.a.Whisper, t.props.currentUser), t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.unblockUser = function() {
                        t.props.unblockUserMutation(t.props.userID, t.props.currentUser), t.props.onUnblock && t.props.onUnblock(t.props.threadID)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.displayName || this.props.login,
                        t = this.props.isMuted ? Object(m.d)("Turn Notifications On", "ThreadSettings") : Object(m.d)("Turn Notifications Off", "ThreadSettings"),
                        n = Object(m.d)("Go to {displayName}'s Channel", {
                            displayName: e
                        }, "ThreadSettings");
                    return r.createElement(F.V, {
                        display: F.H.Flex,
                        flexDirection: F.J.Column,
                        margin: 1
                    }, r.createElement(F.T, {
                        ariaLabel: t,
                        onClick: this.toggleMutethread
                    }, r.createElement(F.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)), r.createElement(F._19, {
                        borderBottom: !0,
                        margin: {
                            y: 1,
                            left: .5
                        }
                    }), this.renderBlockButton(), this.renderReportHarassmentButton(), this.renderReportSpamButton(), r.createElement(F.T, {
                        linkTo: "/" + this.props.login,
                        onClick: this.onChannelRedirect,
                        ariaLabel: n
                    }, r.createElement(F.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, n)))
                }, t.prototype.renderBlockButton = function() {
                    var e, t, n = this.props.displayName || this.props.login;
                    return this.isBlocked ? (e = Object(m.d)("Unblock {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.unblockUser) : (e = Object(m.d)("Block {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.blockUser), r.createElement(F.T, {
                        "data-test-selector": "whispers-block-user-button",
                        ariaLabel: e,
                        onClick: t
                    }, r.createElement(F.V, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, Object.defineProperty(t.prototype, "isBlocked", {
                    get: function() {
                        var e = this;
                        return !(!this.props.currentUser.blockedUsers || !this.props.currentUser.blockedUsers.find(function(t) {
                            return t.id === e.props.userID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "currentUserDataID", {
                    get: function() {
                        return m.n.apollo.client.dataIdFromObject ? m.n.apollo.client.dataIdFromObject(this.props.currentUser) || "" : ""
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            V = Object(p.compose)(Object(f.a)(j, {
                name: "setMuteThread"
            }), Object(f.a)(L, {
                name: "reportWhisperThread"
            }), Object(D.a)(), Object(U.a)())(P),
            H = n("GxF8"),
            W = n("N5sm"),
            G = n("l4QG"),
            q = n("P0T5"),
            z = (n("+xsx"), "report-as-spam-button"),
            Q = "mark-not-spam-button",
            $ = "dismiss-prompt-button",
            J = "spam-prompt-pending-target",
            K = "spam-prompt-reported-target",
            Y = {
                displayName: "???",
                login: "???",
                displayBadges: [],
                id: ""
            },
            Z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        potentialSpamResolution: "pending"
                    }, t.renderPotentialSpamPrompt = function() {
                        if (t.props.spamInfo && "low" !== t.props.spamInfo.likelihood && null === t.props.spamInfo.lastMarkedNotSpamAt) {
                            if ("pending" === t.state.potentialSpamResolution) return r.createElement(F.V, {
                                "data-a-target": J,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, r.createElement(F._19, {
                                background: F.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, r.createElement(F.V, {
                                display: F.H.InlineBlock,
                                margin: .5
                            }, r.createElement(F._23, {
                                type: F._28.Span,
                                fontSize: F.L.Size6,
                                color: F.F.Alt2
                            }, Object(m.d)("It looks like this conversation triggered our spam detector. If it is spam, please report it!", "ThreadHeader"))), r.createElement(F.V, {
                                display: F.H.InlineBlock,
                                margin: .5
                            }, r.createElement(F.u, {
                                "data-a-target": z,
                                type: F.z.Alert,
                                onClick: t.reportSpam,
                                size: F.x.Small
                            }, Object(m.d)("Report spam", "ThreadHeader"))), r.createElement(F.V, {
                                display: F.H.InlineBlock,
                                margin: .5
                            }, r.createElement(F.u, {
                                "data-a-target": Q,
                                onClick: t.markNotSpam,
                                size: F.x.Small
                            }, Object(m.d)("This is not spam", "ThreadHeader")))));
                            if ("reported" === t.state.potentialSpamResolution && t.interlocutor.displayName) return r.createElement(F.V, {
                                "data-a-target": K,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, r.createElement(F._19, {
                                background: F.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, r.createElement(F.V, {
                                display: F.H.InlineBlock,
                                margin: .5
                            }, r.createElement(F._23, {
                                type: F._28.Span,
                                fontSize: F.L.Size6,
                                color: F.F.Alt2
                            }, Object(m.d)("Thank you for helping us fight spam. We've blocked {user} from sending you further whispers. You can undo this from the Whisper Settings Menu.", {
                                user: t.interlocutor.displayName
                            }, "ThreadHeader"))), r.createElement(F.V, {
                                display: F.H.InlineBlock,
                                margin: .5
                            }, r.createElement(F.u, {
                                "data-a-target": $,
                                type: F.z.Text,
                                onClick: t.dismissSpamPrompt,
                                size: F.x.Small
                            }, Object(m.d)("Dismiss", "ThreadHeader")))))
                        }
                        return null
                    }, t.reportSpam = function() {
                        t.props.reportUserMutation(t.interlocutor.id, I.c.Spam, t.props.threadID), t.props.blockUserMutation(t.interlocutor.id, I.b.Other, I.a.Whisper, t.props.participants.currentUser), t.props.setThreadSpamStatusMutation(t.props.threadID, !0), Object(q.l)(t.interlocutor.login, q.a.SpamPropmt), t.setState({
                            potentialSpamResolution: "reported"
                        })
                    }, t.markNotSpam = function() {
                        t.props.setThreadSpamStatusMutation(t.props.threadID, !1), Object(q.o)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.dismissSpamPrompt = function() {
                        t.props.onBlock && t.props.onBlock(t.props.threadID), Object(q.n)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.onSettingsClick = function(e) {
                        e.stopPropagation()
                    }, t.onPresenceClick = function(e, n) {
                        n.stopPropagation();
                        var i = t.props.participants.currentUser && t.props.participants.currentUser.friends.edges.find(function(e) {
                            return e.node.id === t.interlocutor.id
                        });
                        t.props.participants.user && i && i.activity ? Object(T.b)({
                            context: e,
                            friendActivity: i.activity,
                            friendLogin: t.props.participants.user.login
                        }) : m.i.warn("[ThreadHeader] Attempted to track presence click without required data.")
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = u({
                            "thread-header__title-bar-container": !0,
                            "thread-header__title-bar-container--highlighted": this.props.isHighlighted,
                            "thread-header__title-bar-container--focused": this.props.isFocused
                        }),
                        n = u({
                            "thread-header": !0,
                            "thread-header--collapsed": this.props.isCollapsed
                        }),
                        i = Object(m.d)("Close", "WhisperThreadHeader"),
                        a = Object(m.d)("Settings", "WhisperThreadHeader");
                    if (this.props.isLoading || !this.props.participants.currentUser || !this.props.participants.user) return r.createElement(F.V, {
                        className: t,
                        display: F.H.Flex,
                        justifyContent: F.U.Between,
                        fullWidth: !0,
                        alignItems: F.c.Center,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        flexShrink: 0,
                        flexGrow: 0,
                        flexWrap: F.K.NoWrap
                    }, r.createElement(F._3, {
                        height: 20,
                        width: 80
                    }), r.createElement(F.V, {
                        display: F.H.Flex
                    }, r.createElement(F.v, {
                        ariaLabel: i,
                        icon: F._11.RemoveTag,
                        "data-a-target": "whispers-thread__close-button-" + this.props.threadID,
                        onClick: this.props.onClose
                    })));
                    var s = null,
                        o = null,
                        l = null,
                        c = null,
                        d = this.props.participants.currentUser && this.props.participants.currentUser.friends.edges.find(function(t) {
                            return t.node.id === e.interlocutor.id
                        });
                    if (d && (o = r.createElement(F.V, {
                            margin: {
                                left: 1
                            },
                            display: F.H.Flex,
                            alignItems: F.c.Center
                        }, r.createElement(F._5, {
                            status: function(e) {
                                switch (e) {
                                    case G.a.Online:
                                        return F._6.Online;
                                    case G.a.Away:
                                    case G.a.Idle:
                                        return F._6.Away;
                                    case G.a.Busy:
                                        return F._6.Busy;
                                    case G.a.Offline:
                                    case G.a.Invisible:
                                    default:
                                        return F._6.Offline
                                }
                            }(d.availability)
                        })), d.activity)) {
                        var p = Object(M.c)(d.activity, !0),
                            h = null,
                            g = Object(M.d)(this.props.participants.user.login, d.activity);
                        if (g && (h = {
                                pathname: g,
                                state: {
                                    content: O.PageviewContent.Presence,
                                    medium: O.PageviewMedium.Whispers
                                }
                            }), h) {
                            var f = u({
                                "thread-header__activity-link--highlighted": this.props.isHighlighted
                            });
                            l = r.createElement(N.a, {
                                className: f,
                                title: Object(M.c)(d.activity) || "",
                                onClick: this.onPresenceClick.bind(this, T.a.WhisperHeaderLink),
                                to: h,
                                "data-test-selector": "whispers-thread__presence-link"
                            }, p)
                        } else l = p;
                        this.props.isCollapsed || (c = r.createElement(F.V, {
                            padding: {
                                right: .5
                            }
                        }, r.createElement(x.a, {
                            link: h,
                            onClick: this.onPresenceClick.bind(this, T.a.WhisperHeaderButton),
                            shouldHollowOverlay: this.props.isHighlighted
                        })))
                    }!this.props.isCollapsed && this.props.participants.currentUser && (s = r.createElement(w.a, null, r.createElement(F.v, {
                        ariaLabel: a,
                        icon: F._11.Gear,
                        overlay: this.props.isHighlighted
                    }), r.createElement(F.p, {
                        direction: F.q.BottomRight,
                        offsetX: "0.5rem"
                    }, r.createElement(V, {
                        login: this.interlocutor.login,
                        displayName: this.interlocutor.displayName,
                        currentUser: this.props.participants.currentUser,
                        userID: this.interlocutor.id,
                        isMuted: this.props.isMuted,
                        threadID: this.props.threadID,
                        collapseThread: this.props.collapse,
                        onBlock: this.props.onBlock,
                        onUnblock: this.props.onUnblock
                    }))));
                    var v = this.interlocutor.displayBadges.map(function(e) {
                        return r.createElement(F.Q, {
                            key: e.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, r.createElement("img", {
                            alt: e.title,
                            title: e.title,
                            className: "thread-header__badge",
                            src: e.imageURL
                        }))
                    });
                    return r.createElement(F.V, {
                        className: n,
                        position: F._4.Relative,
                        fullWidth: !0
                    }, r.createElement("div", {
                        className: "thread-header__click-area",
                        onClick: this.props.onHeaderClick,
                        "data-a-target": "thread-header__click-area"
                    }, r.createElement(F.V, {
                        className: t,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        alignItems: F.c.Center,
                        flexGrow: 1,
                        display: F.H.Flex,
                        "data-a-target": "whisper-thread__title-bar-" + this.props.threadID,
                        "data-click-out-id": "thread-expand-close",
                        flexWrap: F.K.NoWrap
                    }, r.createElement(F.V, {
                        fullHeight: !0,
                        flexGrow: 1,
                        display: F.H.Flex,
                        flexDirection: F.J.Column
                    }, r.createElement(F.V, {
                        display: F.H.Flex,
                        flexGrow: 1,
                        alignItems: F.c.Center,
                        flexWrap: F.K.NoWrap,
                        padding: {
                            right: 1
                        }
                    }, v, r.createElement(F._23, {
                        color: this.props.isHighlighted ? F.F.Overlay : F.F.Base,
                        type: F._28.Span,
                        bold: !0,
                        ellipsis: !0
                    }, this.interlocutor.displayName), o), r.createElement(F._19, {
                        className: "thread-header__activity",
                        color: this.props.isHighlighted ? F.F.Overlay : F.F.Base,
                        padding: {
                            right: 1
                        },
                        overflow: F._0.Hidden
                    }, l)), r.createElement(F.V, {
                        display: F.H.Flex,
                        flexShrink: 0,
                        flexDirection: F.J.Row,
                        alignItems: F.c.Center
                    }, c, r.createElement("div", {
                        onClick: this.onSettingsClick
                    }, s), r.createElement(F.v, {
                        ariaLabel: i,
                        icon: F._11.RemoveTag,
                        "data-a-target": "thread-header__close-button-" + this.props.threadID,
                        onClick: this.props.onClose,
                        overlay: this.props.isHighlighted
                    })))), this.renderPotentialSpamPrompt())
                }, Object.defineProperty(t.prototype, "interlocutor", {
                    get: function() {
                        return this.props.participants.user || Y
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            X = Object(l.compose)(Object(D.a)(), function() {
                var e = this;
                return Object(f.a)(H, {
                    props: function(t) {
                        return {
                            reportUserMutation: function(n, i, r) {
                                return a.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return a.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            reason: i,
                                                            threadID: r
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return a.sent(), [3, 4];
                                            case 3:
                                                return e = a.sent(), m.i.error(e, "Unable to report user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), function() {
                var e = this;
                return Object(f.a)(W, {
                    props: function(t) {
                        return {
                            setThreadSpamStatusMutation: function(n, i) {
                                return a.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return a.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            threadID: n,
                                                            isSpam: i
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return a.sent(), [3, 4];
                                            case 3:
                                                return e = a.sent(), m.i.error(e, "Unable to modify threads spam status user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(Z),
            ee = n("/UH7"),
            te = n("zCIC"),
            ne = n("Th9g");
        ! function(e) {
            e[e.Timestamp = 0] = "Timestamp", e[e.Whisper = 1] = "Whisper", e[e.Warning = 2] = "Warning", e[e.NewMessages = 3] = "NewMessages", e[e.Notification = 4] = "Notification"
        }(i || (i = {}));
        n("vRhQ");
        var ie = n("hvzu"),
            ae = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case i.Timestamp:
                            return r.createElement(F._19, {
                                className: "thread-message__timestamp",
                                color: F.F.Alt2,
                                fontSize: F.L.Size7
                            }, Object(ie.d)(e));
                        case i.Warning:
                            return r.createElement(F._19, {
                                className: "thread-message__warning",
                                color: F.F.Alt2
                            }, Object(ie.e)());
                        case i.Whisper:
                            return r.createElement(F.V, {
                                className: "thread-message__message"
                            }, Object(ie.f)(e));
                        case i.NewMessages:
                            return r.createElement(F._19, {
                                className: "thread-message__new-messages",
                                color: F.F.OverlayAlt,
                                fontSize: F.L.Size7
                            }, Object(ie.b)());
                        case i.Notification:
                            return r.createElement(F.V, {
                                className: "thread-message__notification"
                            }, Object(ie.c)(e));
                        default:
                            return null
                    }
                }, t
            }(r.Component),
            re = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0
                    }, t.loadMore = function() {
                        var e = t.scroll.scrollContent.scrollHeight;
                        return t.setState({
                            prevScrollHeight: e
                        }), t.props.loadMore()
                    }, t.renderMessages = function(e) {
                        return e.map(function(e, n) {
                            return r.createElement(ae, {
                                message: e,
                                key: t.generateMessageKey(e, n.toString())
                            })
                        })
                    }, t.getMessages = function() {
                        var e = t.props.unreadMessagesCount;
                        return t.props.thread.messages.edges.map(function(e) {
                            return {
                                type: i.Whisper,
                                content: e.node.content.content,
                                from: t.props.participantsByID[+e.node.from.id],
                                emotes: e.node.content.emotes,
                                id: e.node.id,
                                sentAt: new Date(e.node.sentAt),
                                editedAt: e.node.editedAt,
                                deletedAt: e.node.deletedAt
                            }
                        }).reduce(function(n, i, a, r) {
                            if (t.notificationsFor(i).forEach(function(e) {
                                    n.push(e)
                                }), n.push(i), 0 == --e && n.push(t.createNewMessagesIndicator()), 0 === a);
                            else if (a < r.length - 1) {
                                var s = r[a + 1];
                                !i.deletedAt && t.shouldAddTimestamp(i, s) && n.push(t.createTimestampMessage(i))
                            }
                            return a === r.length - 1 && (i.deletedAt || n.push(t.createTimestampMessage(i)), n.push(t.createWarningMessage())), n
                        }, []).reverse()
                    }, t.shouldAddTimestamp = function(e, t) {
                        return e.sentAt.valueOf() - t.sentAt.valueOf() > 6e5
                    }, t.createTimestampMessage = function(e) {
                        return {
                            type: i.Timestamp,
                            timestamp: new Date(e.sentAt)
                        }
                    }, t.notificationsFor = function(e) {
                        return t.props.notifications.filter(function(t) {
                            return t.afterMessageID === e.id
                        }).map(t.createNotificationLine)
                    }, t.createNotificationLine = function(e) {
                        return {
                            type: i.Notification,
                            content: e.content
                        }
                    }, t.createNewMessagesIndicator = function() {
                        return {
                            type: i.NewMessages
                        }
                    }, t.createWarningMessage = function() {
                        return {
                            type: i.Warning
                        }
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.scrollToBottom = function() {
                        t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.scrollToBottom(), this.setState({
                        disableInfiniteTrigger: !1
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (this.props.thread.messages.edges.length > 0 || e.thread.messages.edges.length > 0) && (0 === this.props.thread.messages.edges.length && e.thread.messages.edges.length > 0 || this.props.thread.messages.edges[0].cursor !== e.thread.messages.edges[0].cursor) && this.setState({
                        prevScrollHeight: this.scroll.scrollContent.scrollHeight
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    if (this.props.thread.messages.edges.length > e.thread.messages.edges.length)
                        if (this.props.thread.messages.edges[0] && e.thread.messages.edges[0] && this.props.thread.messages.edges[0].cursor === e.thread.messages.edges[0].cursor && this.props.thread.messages.edges[0].node.id === e.thread.messages.edges[0].node.id) {
                            if (this.state.prevScrollHeight && this.state.prevScrollHeight !== this.scroll.scrollContent.scrollHeight) {
                                var t = this.scroll.scrollContent.scrollHeight - this.state.prevScrollHeight;
                                this.scroll.scrollContent.scrollTop = t
                            }
                        } else this.scrollToBottom();
                    this.props.notifications.length > e.notifications.length && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this.getMessages();
                    return r.createElement(F.V, {
                        fullHeight: !0
                    }, r.createElement(te.b, {
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0
                    }, r.createElement(F.V, null, r.createElement(te.a, {
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadMore,
                        pixelThreshold: 200,
                        orientation: ne.b.Down,
                        contentLength: e.length
                    }), this.renderMessages(e))))
                }, t.prototype.generateMessageKey = function(e, t) {
                    switch (e.type) {
                        case i.NewMessages:
                        case i.Warning:
                            return "" + e.type;
                        case i.Timestamp:
                            return e.type + "-" + e.timestamp.getTime();
                        case i.Whisper:
                            return e.type + "-" + e.id;
                        default:
                            return m.i.warn("[ThreadMessages] Encountered an unknown message type."), t
                    }
                }, t
            }(r.Component),
            se = Object(o.a)(function(e, t) {
                return {
                    notifications: Object(ee.a)(e, t.thread.id)
                }
            })(re),
            oe = n("DCOT"),
            le = n("qzJ+"),
            ce = n("m4HT"),
            de = n("Iv9R"),
            ue = (n("p8c9"), n("h4Qz")),
            pe = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.refetchTimeout = 0, n.onEmoticonClick = function(e) {
                        var t = n.autocompleteInput.getValue();
                        t && t.length > 0 && !t.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInput.setValue(t)
                    }, n.onBlock = function(e) {
                        n.addNotification(Object(m.d)("User successfully blocked", "whispers")), n.props.onBlock && n.props.onBlock(e)
                    }, n.onUnblock = function() {
                        n.addNotification(Object(m.d)("User successfully unblocked", "whispers"))
                    }, n.loadMore = function() {
                        return a.__awaiter(n, void 0, void 0, function() {
                            return a.__generator(this, function(e) {
                                return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.addNewThreadSendWhisper = function(e) {
                        var t = n.state.newThreadMessages;
                        t.unshift({
                            content: e,
                            id: Object(C.b)()
                        }), n.setState({
                            newThreadMessages: t
                        })
                    }, n.addNotification = function(e) {
                        n.props.notifyWhisperThread(n.props.threadID, e, n.getLastMessageID())
                    }, n.getLastMessageID = function() {
                        if (n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0]) return n.props.data.whisperThread.messages.edges[0].node.id
                    }, n.getPlaceholderThreadFromLocalState = function() {
                        return function(e, t) {
                            return {
                                messages: {
                                    edges: e.map(function(e, n) {
                                        return {
                                            cursor: "" + n,
                                            node: {
                                                content: {
                                                    content: e.content,
                                                    emotes: []
                                                },
                                                deletedAt: null,
                                                editedAt: null,
                                                from: {
                                                    id: t
                                                },
                                                id: e.id,
                                                sentAt: (new Date).toISOString()
                                            }
                                        }
                                    })
                                },
                                isMuted: !1,
                                unreadMessagesCount: 0,
                                participants: [],
                                id: Object(C.b)(),
                                spamInfo: {
                                    lastMarkedNotSpamAt: null,
                                    likelihood: "low"
                                },
                                userLastMessageRead: {
                                    sentAt: (new Date).toISOString()
                                }
                            }
                        }(n.state.newThreadMessages, n.props.currentUserID)
                    }, n.handleHeaderClick = function() {
                        n.props.collapsed ? n.expand() : n.collapse()
                    }, n.expand = function() {
                        n.props.participants.currentUser && Object(R.h)(n.props.threadID), n.props.onExpand(n.props.threadID)
                    }, n.onClickOut = function() {
                        n.props.focused && n.props.onUnfocus(n.props.threadID)
                    }, n.handleClose = function() {
                        n.props.participants.currentUser && Object(R.c)(n.props.threadID), n.props.onClose(n.props.threadID)
                    }, n.collapse = function() {
                        n.props.participants.currentUser && Object(R.d)(n.props.threadID), n.props.onCollapse(n.props.threadID)
                    }, n.handleKeydown = function(e) {
                        if ((e.charCode || e.keyCode) === b.a.Enter) {
                            var t = n.autocompleteInput.getValue();
                            n.autocompleteInput.setValue(""), n.sendWhisper(t)
                        }
                    }, n.handleClick = function() {
                        n.props.onFocus(n.props.threadID), n.markThreadMessagesAsRead()
                    }, n.markThreadMessagesAsRead = function() {
                        n.props.data.loading || n.props.data.error || n.props.data.whisperThread && 0 === n.props.data.whisperThread.unreadMessagesCount || Object(oe.a)({
                            threadID: n.props.threadID,
                            lastReadMessageID: n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id || ""
                        })
                    }, n.sendWhisper = function(e) {
                        if ("" !== e) {
                            n.props.data.error && n.addNewThreadSendWhisper(e);
                            var t = Object(ce.b)(n.props.threadID, n.props.currentUserID);
                            t ? (n.props.participants.currentUser && n.props.participants.user && Object(R.m)({
                                threadID: n.props.threadID,
                                targetUserLogin: n.props.participants.user.login
                            }), Object(le.a)({
                                currentUserID: n.props.currentUserID,
                                emotes: n.props.emoteSetsData && n.props.emoteSetsData.emoteMap || {},
                                message: e,
                                recipientUserID: t
                            }).catch(function() {
                                var e = Object(m.d)("Your whisper was not delivered.", "Thread"),
                                    t = n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id;
                                n.props.notifyWhisperThread(n.props.threadID, e, t)
                            })) : m.i.warn("Unable to parse whisper recipient ID.")
                        }
                    }, n.setAutocompleteInnerComponentRef = function(e) {
                        n.textInput = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInput = e
                    }, n.handleContentClick = function() {
                        document.getSelection().toString() || n.textInput.focus()
                    }, n.state = {
                        newThreadMessages: []
                    }, n
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (e.data.error || e.data.loading || !e.data.whisperThread || this.props.reportThreadData(e.threadID, e.data.whisperThread), this.props.data.error) {
                        var n = !1;
                        this.props.pubsub.messages.whisperReceived !== e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived.data_object.thread_id === this.props.threadID && (n = !0), this.props.pubsub.messages.whisperSent !== e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent.data_object.thread_id === this.props.threadID && (n = !0), n && (clearTimeout(this.refetchTimeout), this.refetchTimeout = setTimeout(function() {
                            t.props.data.refetch()
                        }, 200))
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    e.data.whisperThread && this.props.data.whisperThread && (this.props.data.whisperThread.messages.edges.length, e.data.whisperThread.messages.edges.length)
                }, t.prototype.render = function() {
                    var e = u({
                        "whispers-thread": !0,
                        "whispers-thread--collapsed": this.props.collapsed,
                        "whispers-thread--focused": this.props.focused
                    });
                    if (this.props.hidden) return null;
                    var t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [];
                    return r.createElement(h.a, {
                        onClickOut: this.onClickOut
                    }, r.createElement(F._19, {
                        className: e,
                        display: F.H.Flex,
                        flexShrink: 0,
                        flexGrow: 0,
                        position: F._4.Relative,
                        background: F.m.Base,
                        margin: {
                            left: 1
                        },
                        alignItems: F.c.Center,
                        justifyContent: F.U.Center,
                        "data-a-target": "whisper-thread-" + this.props.threadID + (this.props.collapsed ? "-collapsed" : ""),
                        elevation: 3
                    }, r.createElement(F.V, {
                        className: "whisper-thread__input",
                        position: F._4.Absolute,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        attachBottom: !0
                    }, r.createElement(_.b, {
                        componentType: _.a.Input,
                        suggestionSource: _.c.Whisper,
                        iconRight: !0,
                        onFocus: this.handleClick,
                        onClick: this.handleClick,
                        onKeyDown: this.handleKeydown,
                        componentRefDelegate: this.setAutocompleteInnerComponentRef,
                        refDelegate: this.setAutocompleteInputRef
                    }, r.createElement(_.d, {
                        emotes: t
                    })), r.createElement(E.a, {
                        attachBottom: !0,
                        attachRight: !0,
                        inputRef: this.textInput,
                        onClickEmote: this.onEmoticonClick,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        position: F._4.Absolute,
                        shouldCloseOnClickOut: !0
                    })), r.createElement(F.Q, {
                        fullWidth: !0
                    }, r.createElement("div", {
                        className: "whispers-thread__content",
                        onClick: this.handleContentClick
                    }, this.renderContent())), r.createElement(F.V, {
                        position: F._4.Absolute,
                        fullWidth: !0,
                        flexShrink: 0,
                        display: F.H.Flex,
                        alignItems: F.c.Center,
                        attachTop: !0
                    }, r.createElement(X, {
                        isHighlighted: !!(this.props.data.whisperThread && this.props.data.whisperThread.unreadMessagesCount > 0),
                        isFocused: !!this.props.focused,
                        isMuted: !!this.props.data.whisperThread && this.props.data.whisperThread.isMuted,
                        isCollapsed: this.props.collapsed,
                        isLoading: this.props.data.loading || this.props.participants.loading || !this.props.participants.user || !this.props.participants.currentUser,
                        participants: this.props.participants,
                        spamInfo: this.props.data.whisperThread && this.props.data.whisperThread.spamInfo,
                        threadID: this.props.threadID,
                        collapse: this.collapse,
                        onHeaderClick: this.handleHeaderClick,
                        onBlock: this.onBlock,
                        onUnblock: this.onUnblock,
                        onClose: this.handleClose
                    }))))
                }, t.prototype.renderContent = function() {
                    var e;
                    return this.props.data.error ? (e = r.createElement(g.a, {
                        message: Object(m.d)("Sorry, something went wrong loading this conversation.", "WhisperThread")
                    }), e = r.createElement(F.V, null), this.props.participants.currentUser && this.props.participants.user && (e = r.createElement(se, {
                        thread: this.getPlaceholderThreadFromLocalState(),
                        unreadMessagesCount: 0,
                        participantsByID: this.getUsersByID([this.props.participants.currentUser, this.props.participants.user]),
                        loadMore: this.loadMore
                    }))) : e = this.props.data.loading || this.props.participants.loading || !this.props.data.whisperThread ? r.createElement(F.V, {
                        display: F.H.Flex,
                        justifyContent: F.U.Center,
                        alignItems: F.c.Center,
                        margin: 2,
                        fullHeight: !0,
                        flexGrow: 1
                    }, r.createElement(F.Z, null)) : r.createElement(se, {
                        thread: this.props.data.whisperThread,
                        participantsByID: this.getUsersByID(this.props.data.whisperThread.participants),
                        unreadMessagesCount: this.props.data.whisperThread.unreadMessagesCount,
                        loadMore: this.loadMore
                    }), e
                }, t.prototype.getUsersByID = function(e) {
                    for (var t = {}, n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        t[a.id] = a
                    }
                    return t
                }, t
            }(r.Component),
            me = Object(p.compose)(Object(f.a)(de, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: Object(ce.b)(e.threadID, e.currentUserID) || ""
                        },
                        skip: !e.currentUserID || !e.threadID
                    }
                },
                name: "participants"
            }), Object(f.a)(ue, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.threadID
                        }
                    }
                },
                props: function(e) {
                    return a.__assign({}, e, {
                        loadMore: function() {
                            return e.data.fetchMore({
                                query: ue,
                                variables: a.__assign({}, e.data.variables, {
                                    cursor: e.data.whisperThread && e.data.whisperThread.messages.edges[e.data.whisperThread.messages.edges.length - 1].cursor
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult;
                                    if (!n.whisperThread) return {
                                        whisperThread: null
                                    };
                                    if (!e.whisperThread) return {
                                        whisperThread: n.whisperThread
                                    };
                                    var i = a.__assign({}, n.whisperThread.messages, {
                                        edges: Object(y.b)(e.whisperThread.messages.edges, n.whisperThread.messages.edges)
                                    });
                                    return {
                                        whisperThread: a.__assign({}, n.whisperThread, {
                                            messages: i
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            }), Object(v.a)([{
                topic: function(e) {
                    return Object(S.q)(e.currentUserID)
                },
                mapMessageTypesToProps: {
                    whisper_received: "whisperReceived",
                    whisper_sent: "whisperSent"
                }
            }]), Object(k.a)())(pe),
            he = Object(o.a)(function(e) {
                return {
                    isLoggedIn: Object(c.d)(e)
                }
            }, function(e) {
                return Object(l.bindActionCreators)({
                    notifyWhisperThread: d.b
                }, e)
            })(me);
        n("0Yyt");
        n.d(t, "b", function() {
            return ge
        }), n.d(t, "a", function() {
            return fe
        });
        var ge, fe = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.resizeAnimationHandle = null, t.renderThread = function(e) {
                    return e ? r.createElement(he, {
                        key: e.threadID,
                        currentUserID: t.props.currentUserID,
                        collapsed: e.collapsed,
                        hidden: e.hidden,
                        threadID: e.threadID,
                        onBlock: t.onBlock,
                        onCollapse: t.props.onCollapseThread,
                        onClose: t.props.onCloseThread,
                        onExpand: t.props.onExpandThread,
                        onFocus: t.props.onFocusThread,
                        onUnfocus: t.props.onUnfocusThread,
                        focused: t.props.focusedThreadID === e.threadID,
                        reportThreadData: t.props.reportThreadData
                    }) : null
                }, t.onBlock = function(e) {
                    t.props.archiveThread(e), t.props.onBlockThread(e)
                }, t.setOpenThreadsRef = function(e) {
                    return ge = e
                }, t.handleContentResize = function() {
                    t.resizeAnimationHandle || (t.resizeAnimationHandle = requestAnimationFrame(function() {
                        t.props.onResizeContent(), t.resizeAnimationHandle = null
                    }))
                }, t
            }
            return a.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = this.props.openedThreads.map(function(t) {
                        return e.renderThread(t)
                    });
                return r.createElement(F.V, {
                    className: "whispers-open-threads",
                    display: F.H.Flex,
                    flexDirection: F.J.RowReverse,
                    alignItems: F.c.End,
                    position: F._4.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    refDelegate: this.setOpenThreadsRef
                }, t, r.createElement(s.a, {
                    onResize: this.handleContentResize
                }))
            }, t
        }(r.Component)
    },
    "1OO3": function(e, t, n) {
        "use strict";

        function i() {
            return Object(r.d)("Unable to ban user", "BlockUserMutation")
        }
        t.a = function(e) {
            var t = this;
            return Object(s.a)(u, {
                props: function(n) {
                    return {
                        onBanUser: function(s, u) {
                            return void 0 === u && (u = null), a.__awaiter(t, void 0, void 0, function() {
                                var t, v, b, k, y, S;
                                return a.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            if (t = u ? d.a.Timeout : d.a.Ban, v = e(n.ownProps), b = v.channelID, k = v.onPushMessage, !n.mutate) return [3, 5];
                                            a.label = 1;
                                        case 1:
                                            return a.trys.push([1, 3, , 4]), [4, n.mutate(Object(o.a)({
                                                channelID: b,
                                                bannedUserLogin: s,
                                                expiresIn: u && function(e) {
                                                    if (!e) return "0s";
                                                    var t = e,
                                                        n = "";
                                                    if (t > f) {
                                                        var i = Math.floor(t / f);
                                                        t -= i * f, n += i + "mo"
                                                    }
                                                    if (t > g) {
                                                        var a = Math.floor(t / g);
                                                        t -= a * g, n += a + "w"
                                                    }
                                                    if (t > h) {
                                                        var r = Math.floor(t / h);
                                                        t -= r * h, n += r + "d"
                                                    }
                                                    if (t > m) {
                                                        var s = Math.floor(t / m);
                                                        t -= s * m, n += s + "h"
                                                    }
                                                    if (t > p) {
                                                        var o = Math.floor(t / p);
                                                        t -= o * p, n += o + "m"
                                                    }
                                                    return t > 0 && (n += t + "s"), n
                                                }(u)
                                            }))];
                                        case 2:
                                            return a.sent(), y = Object(c.a)(t, s, null, u), k && k(y), [2, y];
                                        case 3:
                                            throw S = a.sent(), r.i.error(S, "Unable to ban user"), k && k(Object(l.a)(i())), new Error(i());
                                        case 4:
                                            return [3, 6];
                                        case 5:
                                            throw k && k(Object(l.a)(i())), new Error(i());
                                        case 6:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var a = n("TToO"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("oIkB"),
            l = n("aUOx"),
            c = n("Ncf8"),
            d = n("qkCi"),
            u = n("MApH"),
            p = (n.n(u), 60),
            m = 60 * p,
            h = 24 * m,
            g = 7 * h,
            f = 4 * g
    },
    "1bR2": function(e, t, n) {
        e.exports = n.p + "assets/gift1-8573b4d1700bd278971c52e7d077d1c4.png"
    },
    "1pvm": function(e, t) {},
    "1tZx": function(e, t) {},
    "2B/Z": function(e, t) {},
    "2Hj/": function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (!e) return null;
            switch (e.type) {
                case c.a.Playing:
                    return e.game && e.game.name ? Object(l.d)("playing {game}", {
                        game: e.game.name
                    }, "PresenceActivity") : Object(l.d)("playing", "PresenceActivity");
                case c.a.Watching:
                    if (!t && e.user.hosting && e.user.hosting.displayName) return Object(l.d)("watching {user} with the {community} community", {
                        user: e.user.hosting.displayName,
                        community: e.user.displayName
                    }, "PresenceActivity");
                    if (!t && e.user.stream && e.user.stream.game && e.user.stream.game.name) return Object(l.d)("watching {user} stream {game}", {
                        user: e.user.displayName,
                        game: e.user.stream.game.name
                    }, "PresenceActivity");
                    var n = e.user.hosting && e.user.hosting.displayName ? e.user.hosting.displayName : e.user.displayName;
                    return Object(l.d)("watching {user}", {
                        user: n
                    }, "PresenceActivity");
                case c.a.Streaming:
                    return e.stream && e.stream.game && e.stream.game.name ? Object(l.d)("streaming {game}", {
                        game: e.stream.game.name
                    }, "PresenceActivity") : Object(l.d)("streaming", "PresenceActivity");
                default:
                    return null
            }
        }

        function a(e, t) {
            if (!t) return null;
            switch (t.type) {
                case c.a.Streaming:
                    return "/" + e;
                case c.a.Watching:
                    return "/" + t.user.login;
                default:
                    return null
            }
        }

        function r(e) {
            var t = Object(l.d)("Online", "PresenceAvailability");
            switch (e) {
                case d.a.Idle:
                case d.a.Away:
                    return Object(l.d)("Away", "PresenceAvailability");
                case d.a.Busy:
                    return Object(l.d)("Busy", "PresenceAvailability");
                case d.a.Offline:
                    return Object(l.d)("Offline", "PresenceAvailability");
                case d.a.Invisible:
                    return Object(l.d)("Invisible", "PresenceAvailability");
                case d.a.Online:
                default:
                    return t
            }
        }

        function s(e) {
            return function(t) {
                return function(e) {
                    return function(t) {
                        return function(n) {
                            function i(t) {
                                var i = n.call(this, t) || this;
                                return i.options = e(t), i
                            }
                            return h.__extends(i, n), i.prototype.componentDidMount = function() {
                                this.options.skip || this.subscribe(this.options)
                            }, i.prototype.componentWillReceiveProps = function(t) {
                                var n = e(t);
                                n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                            }, i.prototype.componentWillUnmount = function() {
                                this.unsubscribe()
                            }, i.prototype.render = function() {
                                return o.createElement(t, h.__assign({}, this.props))
                            }, i.prototype.subscribe = function(e) {
                                this.unsubscriber = Object(g.i)({
                                    fragment: e.fragment,
                                    id: e.id,
                                    topic: e.topic,
                                    type: e.type,
                                    mutator: e.mutator
                                })
                            }, i.prototype.unsubscribe = function() {
                                this.unsubscriber && this.unsubscriber()
                            }, i
                        }(o.Component)
                    }
                }(function(t) {
                    var n = e(t);
                    return {
                        id: "User:" + n.id,
                        skip: n.skip,
                        fragment: b,
                        topic: Object(g.f)(n.currentUserID),
                        type: f.c.Presence,
                        mutator: function(e, t) {
                            if (!t) return null;
                            var i = n.id;
                            if (e.data.user_id !== +i) return t;
                            var a = "$User:" + i + ".activity";
                            return t.availability = e.data.availability.toUpperCase(), t.activity = Object(v.a)(e.data.activity, a), t
                        }
                    }
                })(t)
            }
        }
        var o = n("U7vG"),
            l = n("6sO2"),
            c = n("Ex+h"),
            d = n("l4QG"),
            u = function(e) {
                return o.createElement("span", {
                    "data-a-target": "presence-text"
                }, i(e.activity, e.condensed) || r(e.availability))
            },
            p = n("Odds"),
            m = function(e) {
                var t = p._6.Online;
                switch (e.availability) {
                    case d.a.Idle:
                    case d.a.Away:
                        t = p._6.Away;
                        break;
                    case d.a.Busy:
                        t = p._6.Busy;
                        break;
                    case d.a.Invisible:
                        t = p._6.Invisible;
                        break;
                    case d.a.Offline:
                        t = p._6.Offline;
                        break;
                    case d.a.Online:
                        t = p._6.Online;
                        break;
                    default:
                        t = p._6.Online
                }
                return o.createElement(p._5, {
                    status: t
                })
            },
            h = n("TToO"),
            g = n("HZww"),
            f = n("C8Io"),
            v = n("mqvl"),
            b = n("TVUY");
        n.d(t, "b", function() {
            return u
        }), n.d(t, "a", function() {
            return m
        }), n.d(t, !1, function() {
            return s
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "d", function() {
            return a
        }), n.d(t, !1, function() {
            return r
        })
    },
    "2I50": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatInput_SendCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendCheerInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sendCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "currentUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "bitsBalance"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2IkU": function(e, t) {},
    "2emZ": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
        }(i || (i = {}))
    },
    "2rJy": function(e, t) {},
    "37Pp": function(e, t, n) {
        "use strict";
        var i = n("U7vG"),
            a = n("6sO2"),
            r = n("FDYX"),
            s = n("Odds"),
            o = (n("M5Tl"), "sub-discount-price-label__discounted"),
            l = "sub-discount-price-label__non-discounted",
            c = function(e) {
                var t = e.subscriptionProduct;
                if (void 0 === t) return i.createElement("div", null);
                var n = Object(a.d)("{price} / Month", {
                    price: t.price
                }, "SubDiscountPriceLabel");
                if (e.isGift ? Object(r.c)([e.subscriptionProduct]) : Object(r.d)([e.subscriptionProduct])) {
                    var c = void 0;
                    return c = e.isGift ? Object(a.d)("{price} (Save {percent})", {
                        price: Object(r.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(a.e)(Object(r.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel") : Object(a.d)("{price} for the first month (Save {percent})", {
                        price: Object(r.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(a.e)(Object(r.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel"), i.createElement(s.V, {
                        "data-test-selector": o
                    }, i.createElement(s._23, {
                        color: s.F.Alt2,
                        decoration: s._26.Strikethrough
                    }, n), i.createElement(s._23, {
                        className: "sub-discount-price-label__discount-price",
                        type: s._28.H5,
                        bold: !0
                    }, c))
                }
                return i.createElement(s.V, {
                    "data-test-selector": l
                }, i.createElement(s._23, null, n))
            };
        n.d(t, !1, function() {
            return o
        }), n.d(t, !1, function() {
            return l
        }), n.d(t, "a", function() {
            return c
        })
    },
    "3LYq": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_AllowRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AllowRejectedChatMessageInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "allowRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3QSP": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_SubEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withVideo"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withVideo"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 266
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3T7g": function(e, t, n) {
        "use strict";
        var i = n("RbGx"),
            a = n("mbxv"),
            r = n("+V/3"),
            s = (n("AwFw"), n("TToO")),
            o = function() {
                function e(e, t, n) {
                    this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                }
                return e.prototype.getBadge = function(e, t) {
                    var n = this.channelsBySet.get(e);
                    return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) ? n.get(t) || null : null
                }, e.prototype.indexBadges = function(e, t, n) {
                    e.forEach(function(e) {
                        n && e.clickAction === r.b && (e = s.__assign({}, e, {
                            channelName: n
                        }));
                        var i = t.get(e.setID);
                        i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                    })
                }, e
            }();
        new o([], [], "");
        n.d(t, "b", function() {
            return i.a
        }), n.d(t, "a", function() {
            return a.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return o
        })
    },
    "3iBR": function(e, t, n) {
        "use strict";
        n.d(t, "l", function() {
            return r
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "a", function() {
            return o
        }), n.d(t, "h", function() {
            return l
        }), n.d(t, "j", function() {
            return c
        }), n.d(t, "i", function() {
            return d
        }), n.d(t, "k", function() {
            return u
        }), n.d(t, "f", function() {
            return p
        }), n.d(t, "g", function() {
            return m
        }), n.d(t, "c", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        }), n.d(t, "e", function() {
            return f
        });
        var i, a = n("I89S"),
            r = {
                ERROR_DISPLAY_TIMEOUT: 5e3,
                GET_BALANCE_RATE_LIMIT: 5e3,
                UNDO_PROMPT_DURATION: 5e3
            },
            s = "https://d3aqoihi2n8ty8.cloudfront.net/cheer",
            o = "https://d3aqoihi2n8ty8.cloudfront.net/actions",
            l = 8e5,
            c = 1e4,
            d = 500,
            u = 1e3,
            p = "cheer",
            m = a.a.Purple,
            h = "FIRST_PARTY",
            g = "THIRD_PARTY",
            f = (i = {}, i[a.a.Gray] = "#979797", i[a.a.Purple] = "#9c3ee8", i[a.a.Green] = "#1db2a5", i[a.a.Blue] = "#0099fe", i[a.a.Red] = "#f43021", i[a.a.Yellow] = "#f3a71a", i)
    },
    "4Dne": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            return a.__awaiter(this, void 0, void 0, function() {
                var t, n, i, u, p, m, h, g;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            return (t = e.friendActivity) ? (n = Object(l.d)(e.friendLogin, t)) ? (i = "/" === n[0] ? n.slice(1) : n, t.type !== s.a.Streaming ? [3, 1] : (u = {
                                target_action: d.Streaming,
                                target_channel: e.friendLogin,
                                target_game: t.stream.game && t.stream.game.name || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7])) : (r.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2]) : (r.i.warn("[trackPresenceClick] Attempted to track a click with no activity."), [2]);
                        case 1:
                            if (t.type !== s.a.Watching) return [3, 6];
                            p = void 0, m = null, a.label = 2;
                        case 2:
                            return a.trys.push([2, 4, , 5]), [4, r.n.apollo.client.query({
                                query: c,
                                variables: {
                                    login: t.user.login
                                }
                            })];
                        case 3:
                            return m = a.sent(), [3, 5];
                        case 4:
                            return h = a.sent(), r.i.error(h, "[trackPresenceClick] Failed to query watched user data.", {
                                watchedUser: t.user.login
                            }), [3, 5];
                        case 5:
                            return (g = m && m.data && m.data.user) ? p = g.hosting.stream ? g.hosting.stream.game && g.hosting.stream.game.name || void 0 : g.stream && g.stream.game && g.stream.game.name || void 0 : r.i.error(new Error("GraphQL empty response"), "[trackPresenceClick] Query for watched user info returned no data.", {
                                watchedUser: t.user.login
                            }), u = {
                                target_action: d.Watching,
                                target_channel: t.user.login,
                                target_game: p,
                                target_hosted_channel: t.user.hosting && t.user.hosting.login || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7];
                        case 6:
                            return r.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2];
                        case 7:
                            return r.m.track(o.SpadeEventType.PresenceClick, u), [2]
                    }
                })
            })
        };
        var i, a = n("TToO"),
            r = n("6sO2"),
            s = n("Ex+h"),
            o = n("vH/s"),
            l = n("2Hj/"),
            c = n("K1Jg");
        n.n(c);
        ! function(e) {
            e.FriendsListButton = "friends", e.WhisperHeaderButton = "convo_join", e.WhisperHeaderLink = "convo_link"
        }(i || (i = {}));
        var d;
        ! function(e) {
            e.Streaming = "streaming", e.Watching = "watching"
        }(d || (d = {}))
    },
    "4JjK": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
        }(i || (i = {}))
    },
    "54rb": function(e, t) {},
    "56e8": function(e, t) {},
    "576g": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "cheer"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "cheer"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "prefix"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "tiers"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "color"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "images"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "theme"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isAnimated"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "dpiScale"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 133
            }
        };
        n.loc.source = {
            body: "fragment cheer on User {\ncheer {\nid\nemotes {\nid\nprefix\ntype\ntiers {\nid\nbits\ncolor\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5Nu7": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n("HW6M"),
            a = (n.n(i), n("U7vG")),
            r = (n.n(a), n("ysVA")),
            s = (n.n(r), "chat-author__intl-login"),
            o = function(e) {
                var t = [a.createElement("span", {
                    key: "username-display",
                    className: "chat-author__display-name",
                    "data-a-target": "chat-message-username",
                    "data-test-selector": "message-username",
                    style: {
                        color: e.userData.color
                    }
                }, e.userData.userDisplayName)];
                if (e.userData.isIntl) {
                    var n = i((r = {}, r[s] = !e.highlighted, r["chat-author__intl-login--highlighted"] = e.highlighted, r));
                    t.push(a.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.userData.color
                        },
                        className: n,
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.userData.userLogin + ")"))
                }
                return a.createElement("span", {
                    key: e.userData.userID + "-authorlabel"
                }, t);
                var r
            }
    },
    "5k1t": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            return {
                type: i,
                threadID: e,
                afterMessageID: n,
                content: t
            }
        };
        var i = "whisperNotifications.WHISPER_THREAD_NOTIFIED"
    },
    "5s0/": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("uXDg"),
            s = n("QPF3"),
            o = n("TToO"),
            l = n("U7vG"),
            c = n("6sO2"),
            d = n("Odds"),
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        t.props.onClick && t.props.onClick(), t.props.openThread(t.props.threadID)
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    var e = Object(c.d)("Whisper", "WhisperButton");
                    return l.createElement(d.u, {
                        onClick: this.handleClick
                    }, e)
                }, t
            }(l.Component),
            p = Object(i.a)(null, function(e) {
                return Object(a.bindActionCreators)({
                    openThread: function(e) {
                        return Object(r.l)({
                            collapsed: !1,
                            threadID: e,
                            ignoreCollapseIfOpen: !0
                        }, Object(s.a)())
                    }
                }, e)
            })(u);
        n.d(t, "a", function() {
            return p
        })
    },
    "5vPJ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("GxDs"),
            l = n("pexS"),
            c = {
                isTimedOut: !1
            },
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = c, t.timeoutID = null, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.data.clip || (this.timeoutID = setTimeout(function() {
                        e.setState({
                            isTimedOut: !0
                        })
                    }, 5e3))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                        isTimedOut: !1
                    }))
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.clip,
                        n = e.error,
                        i = e.loading;
                    return n || this.state.isTimedOut ? a.createElement(o.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "ClipsChatCard"),
                            description: Object(r.d)("We couldn't find that Clip", "ClipsChatCard")
                        }
                    }) : i || !t ? a.createElement(o.a, null) : a.createElement(o.a, {
                        data: {
                            title: t.title ? t.title : Object(r.d)("Clip of {broadcaster}", {
                                broadcaster: t.broadcaster.displayName
                            }, "ClipsChatCard"),
                            description: Object(r.d)("Clipped by {curator}", {
                                curator: t.curator.displayName
                            }, "ClipsChatCard"),
                            previewImageURL: t.thumbnailURL,
                            contentURL: t.url
                        }
                    })
                }, t
            }(a.Component),
            u = function(e) {
                return {
                    variables: {
                        slug: e.slug
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                }
            },
            p = Object(s.a)(l, {
                options: u
            })(d);
        n.d(t, !1, function() {
            return 5e3
        }), n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return c
        }), n.d(t, !1, function() {
            return d
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return p
        })
    },
    "67ft": function(e, t) {},
    "6Agf": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
        }(i || (i = {}))
    },
    "6O9f": function(e, t) {},
    "6Rwu": function(e, t) {},
    "6WAQ": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Archive = "ARCHIVE", e.Highlight = "HIGHLIGHT", e.Upload = "UPLOAD", e.WatchParty = "WATCH_PARTY", e.PastPremiere = "PAST_PREMIERE", e.PremiereUpload = "PREMIERE_UPLOAD"
        }(i || (i = {}))
    },
    "6lb1": function(e, t) {},
    "6vcJ": function(e, t) {},
    "7B9K": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserEmotes"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 76
            }
        };
        n.loc.source = {
            body: "query UserEmotes {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7LIQ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("U7vG"),
            s = n("6sO2"),
            o = n("Odds"),
            l = (n("VkpB"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = a("emote-picker__emote-link", {
                            "emote-picker__emote-link--locked": this.props.locked
                        }),
                        n = r.createElement(o._19, {
                            alignItems: o.c.Center,
                            background: o.m.Overlay,
                            borderRadius: o.s.Small,
                            className: "emote-picker__emote-lock",
                            color: o.F.Overlay,
                            display: o.H.InlineFlex,
                            justifyContent: o.U.Center,
                            position: o._4.Absolute,
                            zIndex: o._39.Above
                        }, r.createElement(o._10, {
                            asset: o._11.Lock,
                            height: 10,
                            width: 10
                        })),
                        i = this.props.emoteSet.emotes.map(function(i) {
                            return r.createElement("div", {
                                key: i.id,
                                className: "emote-picker__emote"
                            }, r.createElement(o._31, {
                                label: i.displayName || Object(s.d)("Emote", "EmoteGrid"),
                                direction: o._33.Bottom
                            }, r.createElement(o.Q, {
                                display: o.H.Flex,
                                alignItems: o.c.Center,
                                justifyContent: o.U.Center
                            }, r.createElement("button", {
                                className: t,
                                name: i.displayName,
                                onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, i.id),
                                "data-a-target": i.displayName
                            }, r.createElement("figure", {
                                className: "emote-picker__emote-figure"
                            }, e.props.locked ? n : null, r.createElement("img", {
                                srcSet: i.srcSet,
                                alt: i.displayName
                            }))))))
                        });
                    return r.createElement(o.V, {
                        display: o.H.Flex,
                        justifyContent: o.U.Center
                    }, i)
                }, t.prototype.handleClickEmote = function(e, t) {
                    this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e)
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    "7LVu": function(e, t) {},
    "7X7f": function(e, t) {},
    "7dPO": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_UnfriendUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfriendUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unfriendUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 110
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_UnfriendUser($input: UnfriendUserInput!) {\nunfriendUser(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7iNp": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendButton"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 75
            }
        };
        n.loc.source = {
            body: "query FriendButton {\ncurrentUser {\nid\nfriends {\nedges {\nnode {\nid\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7miU": function(e, t, n) {
        "use strict";
        var i = n("P0T5");
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return i.c
        }), n.d(t, "c", function() {
            return i.d
        }), n.d(t, "d", function() {
            return i.e
        }), n.d(t, "e", function() {
            return i.f
        }), n.d(t, "f", function() {
            return i.g
        }), n.d(t, "g", function() {
            return i.h
        }), n.d(t, "h", function() {
            return i.i
        }), n.d(t, "i", function() {
            return i.j
        }), n.d(t, "j", function() {
            return i.k
        }), n.d(t, "k", function() {
            return i.m
        }), n.d(t, "l", function() {
            return i.p
        }), n.d(t, "m", function() {
            return i.q
        })
    },
    "82Ta": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 118
            }
        };
        n.loc.source = {
            body: "mutation Thread_ReportUser($input: ReportWhisperThreadInput!) {\nreportWhisperThread(input: $input) {\nthread {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "8RKZ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("U7vG"),
            s = n("qe65"),
            o = n("Odds"),
            l = (n("2rJy"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onImageLoad = function() {
                        n.setState({
                            imageLoaded: !0
                        })
                    }, n.renderImage = function() {
                        var e = null,
                            t = a("chat-image", n.props.className);
                        if (n.props.srcSet.themed) e = r.createElement(o.Q, {
                            display: n.state.imageLoaded ? o.H.InlineBlock : o.H.Hide
                        }, r.createElement(s.a, {
                            alt: n.props.alt,
                            className: t,
                            defaultRes: n.props.srcKey,
                            onLoad: n.onImageLoad,
                            sources: n.props.srcSet
                        }));
                        else {
                            for (var i = [], l = 0, c = Object.keys(n.props.srcSet.sources); l < c.length; l++) {
                                var d = c[l];
                                i.push(n.props.srcSet.sources[d] + " " + d)
                            }
                            e = r.createElement(o.Q, {
                                display: n.state.imageLoaded ? o.H.InlineBlock : o.H.Hide
                            }, r.createElement("img", {
                                className: t,
                                onLoad: n.onImageLoad,
                                src: n.props.srcSet.sources[n.props.srcKey],
                                srcSet: i.join(","),
                                alt: n.props.alt
                            }))
                        }
                        return e
                    }, n.renderPlaceholder = function() {
                        return n.state.imageLoaded ? null : r.createElement(o.Q, {
                            display: o.H.InlineBlock
                        }, r.createElement(o._23, {
                            type: o._28.Span,
                            className: "chat-image__placeholder",
                            align: o._38.Top
                        }, r.createElement(o._3, {
                            height: 28,
                            width: 28
                        })))
                    }, n.state = {
                        imageLoaded: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = r.createElement(o._31, {
                        direction: this.props.tooltipDirection || o._33.Top,
                        label: this.props.alt,
                        display: o.H.Inline,
                        offsetY: "0.9rem",
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText);
                    return this.props.cheerText ? r.createElement(o._23, {
                        type: o._28.Span,
                        noWrap: !0
                    }, e) : e
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    "90yy": function(e, t) {},
    "91zu": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "IncomingRaidLine_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "9RMu": function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                id: "" + e.id,
                start: e.start,
                end: e.end
            }
        }

        function a(e) {
            return {
                from: e.start,
                to: e.end,
                emoteID: e.id,
                id: e.id + ";" + e.start + ";" + e.end,
                setID: "0",
                __typename: "EmbeddedEmote"
            }
        }
        t.c = function(e) {
            return {
                __typename: "WhisperMessageEdge",
                cursor: "" + e.data_object.id,
                node: {
                    __typename: "WhisperMessage",
                    id: e.data_object.message_id,
                    sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                    editedAt: null,
                    deletedAt: null,
                    content: {
                        __typename: "MessageBody",
                        content: e.data_object.body,
                        emotes: e.data_object.tags.emotes.map(function(e) {
                            return a(i(e))
                        })
                    },
                    from: {
                        __typename: "User",
                        id: "" + e.data_object.from_id
                    }
                }
            }
        }, t.b = function(e) {
            return e.map(function(e) {
                return a(i(e))
            })
        }, t.a = a
    },
    "9fnI": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery ChatList_Bits($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("576g").definitions)), e.exports = i
    },
    "9u8h": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("Aj/L"),
            s = "application/json; charset=UTF-8",
            o = function() {
                function e() {}
                return e.get = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.put = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.post = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.delete = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.request = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return t = this.constructOptions(t, n), a = t.headers ? t.headers["Content-Type"] : void 0, t.body = this.serialize(t.body, a), [4, this._fetch(e, t)];
                                case 1:
                                    return r = i.sent(), [4, this.constructLegacyAPIResponse(r)];
                                case 2:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.getAPIURL = function(e) {
                    return new URL(e, a.n.config.apiBaseURL)
                }, e.constructLegacyAPIResponse = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = {
                                        status: e.status
                                    }, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, e.json()];
                                case 2:
                                    return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                case 3:
                                    return a = i.sent(), t.requestError = a, [3, 4];
                                case 4:
                                    return [2, t]
                            }
                        })
                    })
                }, e._fetch = function(e, t) {
                    return void 0 === t && (t = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, fetch(this.getAPIURL(e).toString(), t)];
                                case 1:
                                    return [2, n.sent()]
                            }
                        })
                    })
                }, e.constructOptions = function(e, t) {
                    return e = Object.assign({}, e, {
                        headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                    })
                }, e.serialize = function(e, t) {
                    return t === s ? JSON.stringify(e) : e
                }, e.getDefaultHeaders = function(e, t) {
                    var n = a.n.store.getState(),
                        i = {
                            Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                            "Accept-Language": "en-us",
                            "Client-ID": a.n.config.legacyClientID,
                            "X-Requested-With": "XMLHttpRequest"
                        };
                    e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = s);
                    var o = Object(r.c)(n);
                    return o && (i.Authorization = "OAuth " + o.authToken, o.legacyCSRFToken && (i["Twitch-Api-Token"] = o.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                        i[e] && delete i[e]
                    }), i
                }, e
            }()
    },
    "9uSE": function(e, t) {},
    "9uTb": function(e, t) {},
    A5Hr: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return k
        });
        var i = n("TToO"),
            a = n("U7vG"),
            r = (n.n(a), n("RH2O")),
            s = n("2KeS"),
            o = n("6sO2"),
            l = n("7vx8"),
            c = n("oIkB"),
            d = n("vH/s"),
            u = n("CSlQ"),
            p = n("LjAQ"),
            m = n("mw/a"),
            h = n("xwpJ"),
            g = n("LjAQ"),
            f = n("mmQh"),
            v = (n.n(f), n("mRH2")),
            b = (n.n(v), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        submitStatus: g.b.Unsubmitted
                    }, t.handleSubmit = function(e, n, a, r) {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var t, s, l;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (e !== p.a) return [3, 5];
                                        s = {
                                            userID: this.props.reportContext.targetUserID,
                                            communityID: a || "",
                                            reason: n
                                        }, i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(c.a)(s))];
                                    case 2:
                                        return i.sent(), o.n.tracking.track(d.SpadeEventType.CommunityModeration, {
                                            community_id: a,
                                            name: r,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            target_id: this.props.reportContext.targetUserID,
                                            action: "report",
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 4];
                                    case 3:
                                        return t = i.sent(), o.i.error(t, "ReportUserInCommunity Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [3, 9];
                                    case 5:
                                        s = {
                                            description: n,
                                            reason: e,
                                            content: this.props.reportContext.contentType,
                                            contentID: this.props.reportContext.contentID,
                                            extra: this.props.reportContext.extra,
                                            targetID: this.props.reportContext.targetUserID
                                        }, this.props.reportContext.contentType === m.a.Community && this.props.reportContext.extra && (s.description = Object(h.a)(this.props.reportContext.extra, n)), i.label = 6;
                                    case 6:
                                        return i.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(c.a)(s))];
                                    case 7:
                                        return i.sent(), this.props.reportContext.contentType === m.a.Community && o.n.tracking.track(d.SpadeEventType.CommunityReport, {
                                            community_id: this.props.reportContext.contentID,
                                            name: this.props.reportContext.extra,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 9];
                                    case 8:
                                        return l = i.sent(), o.i.error(l, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 9];
                                    case 9:
                                        return [2]
                                }
                            })
                        })
                    }, t.handleChildError = function(e) {
                        return t.setState({
                            submitStatus: e
                        })
                    }, t.handleClose = function() {
                        t.props.onClose && t.props.onClose(t.state.submitStatus)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose()
                }, t.prototype.render = function() {
                    return a.createElement(g.c, {
                        onClose: this.handleClose,
                        onError: this.handleChildError,
                        onSubmit: this.handleSubmit,
                        reportContentType: this.props.reportContext.contentType,
                        submitStatus: this.state.submitStatus,
                        targetUserID: this.props.reportContext.targetUserID,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    })
                }, t
            }(a.Component)),
            k = Object(s.compose)(Object(l.a)(f, {
                name: "reportUserInCommunity"
            }), Object(l.a)(v, {
                name: "reportUser"
            }), Object(u.c)("ReportUser"), Object(r.a)(function(e) {
                return {
                    sessionUser: e.session.user
                }
            }, null))(b)
    },
    ACWz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatInput"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isEmbedded"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isEmbedded"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "hashtags"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "edges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "cursor"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "node"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 274
            }
        };
        n.loc.source = {
            body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nuser(login: $channelLogin) {\nid\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    AQmT: function(e, t) {},
    AaXK: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "selectedBadge"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availableBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "availableBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 288
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_Badges($channelLogin: String!) {\ncurrentUser {\nid\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\nuser(login: $channelLogin) {\nid\nself {\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = i
    },
    AwFw: function(e, t) {},
    B88H: function(e, t) {},
    BBNG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channelUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 437
            }
        };
        n.loc.source = {
            body: "query ViewerCard($targetLogin: String! $channelID: ID!) {\ntargetUser: user(login: $targetLogin) {\nid\nlogin\nbannerImageURL\ndisplayName\nprofileImageURL(width: 70)\n}\nchannelUser: user(id: $channelID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\nemotes {\nid\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\nisModerator\n}\n}\ncurrentUser {\nlogin\nid\nroles {\nisSiteAdmin\nisStaff\nisGlobalMod\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    BTUa: function(e, t) {},
    BVQ1: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SendWhisper"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendWhisperInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sendWhisper"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "content"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emotes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "to"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "from"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "editedAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 191
            }
        };
        n.loc.source = {
            body: "mutation SendWhisper($input: SendWhisperInput!) {\nsendWhisper(input: $input) {\nmessage {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Bir6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
        }
    },
    Bsuy: function(e, t) {},
    C8Io: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "e", function() {
            return o
        });
        var i, a = {
                ChannelBitsEvents: "channel-bits-events-v1",
                ChannelBitsPinEvents: "channel-bit-events-public",
                ChannelSubscribeEvents: "channel-subscribe-events-v1",
                Friendship: "friendship",
                ImageUpload: "user-image-update",
                ModerationActionsByUserAndChannel: "chat_moderator_actions",
                OnsiteNotifications: "onsite-notifications",
                Presence: "presence",
                Raid: "raid",
                StreamChange: "stream-change-v1",
                StreamChatRoom: "stream-chat-room-v1",
                UploadService: "upload",
                UserBitsUpdates: "user-bits-updates-v1",
                UserCommerceEvents: "user-commerce-events",
                UserCrateEvents: "user-crate-events-v1",
                UserSubscribeEvents: "user-subscribe-events-v1",
                VideoPlayback: "video-playback",
                VideoPlaybackById: "video-playback-by-id",
                Whispers: "whispers"
            },
            r = {
                BitsPinEvent: "bits-pin-event",
                ChannelStreamDown: "stream-down",
                ChannelStreamUp: "stream-up",
                ChatNotification: "chat-notification",
                ImageUploadSuccess: "imageuploadsuccess",
                ModerationAction: "moderation_action",
                OnsiteNotificationCreate: "create-notification",
                OnsiteNotificationDelete: "delete-notification",
                OnsiteNotificationsRead: "read-notifications",
                OnsiteNotificationSummaryUpdate: "update-summary",
                OnsiteNotificationUpdate: "update-notification",
                Presence: "presence",
                PresenceSettings: "settings",
                RaidCancel: "raid_cancel",
                RaidUpdate: "raid_update",
                StreamChatRoomChatRichEmbed: "chat_rich_embed",
                StreamDown: "stream_down",
                StreamUp: "stream_up",
                UpdatedChannelChatProperty: "updated_channel_chat_property",
                UploadService: "upload",
                UserBitsBalanceUpdate: "balance_update",
                UserBitsBadgeUpdate: "badge_update",
                UserCrateEvent: "crate-event",
                UserGiftEvent: "gift-event",
                ViewCount: "viewcount",
                Vodcast: "watchparty-vod",
                WhisperAllThreadsUpdate: "threads",
                WhisperDeleted: "whisper_deleted",
                WhisperEdited: "whisper_edited",
                WhisperReceived: "whisper_received",
                WhisperSent: "whisper_sent",
                WhisperThreadUpdate: "thread"
            },
            s = {
                Accepted: "accepted",
                Requested: "requested",
                Removed: "removed",
                SelfAccepted: "self_accepted",
                SelfRemoved: "self_removed",
                SelfRequested: "self_requested"
            };
        ! function(e) {
            e.Affiliate = "affiliate", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.Ban = "ban", e.Clear = "clear", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Untimeout = "untimeout"
        }(i || (i = {}));
        var o;
        ! function(e) {
            e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied"
        }(o || (o = {}));
        var l;
        ! function(e) {
            e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
        }(l || (l = {}));
        var c;
        ! function(e) {
            e.Private = "private", e.Public = "public"
        }(c || (c = {}))
    },
    CCVP: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Tracking_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 86
            }
        };
        n.loc.source = {
            body: "query Whispers_Tracking_CurrentUser {\ncurrentUser {\nid\nhasTurbo\navailability\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CFVp: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = [r.a.Red, r.a.Blue, r.a.Green, r.a.Purple, r.a.Gray],
                i = new Map,
                o = n.map(function(t) {
                    var n = function(e, t) {
                        for (var n = [], i = {}, r = 0, o = l; r < o.length; r++)
                            for (var d = o[r], u = 0, p = c; u < p.length; u++) {
                                var m = p[u];
                                i[d] || (i[d] = {
                                    animated: new Map,
                                    static: new Map
                                });
                                var h = a(e, d, !0, t, m);
                                n.push(h), i[d].animated.set(m, h.url);
                                var g = a(e, d, !1, t, m);
                                n.push(g), i[d].static.set(m, g.url)
                            }
                        return {
                            id: e + ";" + t,
                            bits: t,
                            color: s.e[t],
                            images: n,
                            indexedImages: i
                        }
                    }(e, t);
                    return i.set(t, n), n
                });
            return {
                prefix: e,
                type: t,
                tiers: o,
                orderedTiers: o,
                indexedTiers: i
            }
        }

        function a(e, t, n, i, a) {
            var r = n ? "gif" : "png";
            return {
                theme: t,
                isAnimated: n,
                dpiScale: a,
                url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + a + "." + r
            }
        }
        t.a = function() {
            if (!d) {
                var e = [],
                    t = {};
                Object.keys(o).forEach(function(n) {
                    var a = i(n, o[n]);
                    e.push(a), t[n.toLowerCase()] = a
                }), d = {
                    orderedActions: e,
                    indexedActions: t
                }
            }
            return d
        }, t.b = function() {
            return u || (u = function(e) {
                return d ? d.indexedActions[e] : i(e, o[e])
            }("Cheer")), u
        };
        var r = n("I89S"),
            s = n("3iBR"),
            o = {
                Cheer: s.c,
                Kreygasm: s.c,
                Kappa: s.c,
                Muxy: s.d,
                Streamlabs: s.d,
                SwiftRage: s.c,
                VoHiYo: s.c
            },
            l = ["LIGHT", "DARK"],
            c = [1, 1.5, 2, 3, 4],
            d = null,
            u = null
    },
    CGWe: function(e, t) {},
    CwIZ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        }), t.b = function(e) {
            return i.__awaiter(this, void 0, void 0, function() {
                var t, n, l, c, d, u, p, m, h, g, f, v, b;
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = a.m.getVideoPlayerTrackingData().vodID, n = !!t, l = {
                                channelID: e.channelID,
                                withVideo: !1
                            }, n && (l.withVideo = !0, l.videoID = t), c = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, a.n.apollo.client.query({
                                query: o,
                                variables: l
                            })];
                        case 2:
                            return c = i.sent(), [3, 4];
                        case 3:
                            return d = i.sent(), a.i.error(d, "Failed to make query for channel info in FollowEvent reporting.", {
                                channelID: e.channelID
                            }), [3, 4];
                        case 4:
                            return u = c && c.data && c.data.user || null, c && !u && a.i.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                channelID: e.channelID
                            }), p = null, c && n && ((m = c && c.data && c.data.video) ? p = Object(s.a)(m.broadcastType) : a.i.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                currentVideoID: t
                            })), h = u && u.self, g = h ? !!h.subscriptionBenefit : null, f = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                                action: e.action,
                                can_subscribe: v,
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                checkout_button_tier: e.checkoutButtonTier,
                                has_sub_credit: e.hasSubCredit,
                                host_channel: e.hostChannelLogin,
                                host_channel_id: e.hostChannelID,
                                is_menu_open: e.isMenuOpen,
                                is_subscribed: g,
                                is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                sub_location: e.sub_location,
                                sub_recipient: e.giftRecipient,
                                modal: e.modal,
                                modal_level: e.modalLevel || "",
                                show_prime_content: e.showPrimeContent,
                                show_resub: u ? v && f : null,
                                vod_id: t,
                                vod_type: p,
                                viewport_height: window.innerHeight,
                                viewport_width: window.innerWidth
                            }, a.m.track(r.SpadeEventType.Subscription, b), [2]
                    }
                })
            })
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            s = n("xrVp"),
            o = n("3QSP"),
            l = (n.n(o), {
                BuyGiftSub: "buy_gift_sub",
                ClickCheckout: "click_checkout_button",
                ClickMoreSubOptions: "more_options_click",
                ClickGiftSubOptions: "gift_options_click",
                ClickPrimeFAQ: "click_prime_faq",
                ClickSignupForPrime: "click_signup_for_prime",
                ClickBack: "back_top_level",
                CloseSubMenu: "close_subscribe_menu",
                GiftASub: "gift_a_sub",
                OpenSubMenu: "open_subscribe_menu",
                SubWithPrime: "samus_spend_credit"
            })
    },
    DCOT: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = i.__assign({
                mutation: s
            }, Object(r.a)({
                threadID: e.threadID,
                lastReadMessageID: e.lastReadMessageID
            }), {
                optimisticResponse: {
                    updateWhisperThread: {
                        thread: {
                            __typename: "WhisperThread",
                            id: e.threadID,
                            unreadMessagesCount: 0
                        },
                        __typename: "UpdateWhisperThreadPayload"
                    }
                }
            });
            a.n.apollo.client.mutate(t)
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("oIkB"),
            s = n("EBeM");
        n.n(s)
    },
    DVR9: function(e, t) {},
    Dc1A: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    DtWM: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            s = (n("SX5d"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = r.n.logger.withCategory("resize-detector"), t.onScroll = function() {
                        var e = t.container,
                            n = e.offsetWidth,
                            i = e.offsetHeight,
                            a = e.offsetLeft,
                            r = e.offsetTop;
                        t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && r === t.top && a === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, r, a)), t.reset()
                    }, t.setGrowDivRef = function(e) {
                        return t.growDiv = e
                    }, t.setGrowChildDivRef = function(e) {
                        return t.growChildDiv = e
                    }, t.setShrinkDivRef = function(e) {
                        return t.shrinkDiv = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("div", {
                        className: "resize-detector"
                    }, a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setGrowDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__grow",
                        ref: this.setGrowChildDivRef
                    })), a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setShrinkDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__shrink"
                    })))
                }, t.prototype.componentDidMount = function() {
                    if (this.growDiv) {
                        this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                        var e = this.container.style.position;
                        "relative" !== e && "absolute" !== e && "fixed" !== e && "static" === window.getComputedStyle(this.container).getPropertyValue("position") && (this.container.style.position = "relative"), this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                    } else this.logger.warn("growDiv is undefined!")
                }, t.prototype.componentWillUnmount = function() {
                    this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                }, t.prototype.reset = function() {
                    var e = this.growDiv,
                        t = this.shrinkDiv,
                        n = this.growChildDiv.style;
                    n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return s
        })
    },
    E9Qg: function(e, t, n) {
        e.exports = n.p + "assets/bg_glitch_pattern-34ca2e369aad1ed33b57f3d2d59c70eb.png"
    },
    EBeM: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Whispers_MarkThreadMessageRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "unreadMessagesCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "mutation Whispers_MarkThreadMessageRead($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nunreadMessagesCount\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Ex+h": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        });
        var i;
        ! function(e) {
            e.Playing = "PLAYING", e.Streaming = "BROADCASTING", e.Watching = "WATCHING"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Playing = "playing", e.Streaming = "broadcasting", e.Watching = "watching"
        }(a || (a = {}))
    },
    FDYX: function(e, t, n) {
        "use strict";
        t.d = function(e) {
            return e.some(function(e) {
                return !!e.self && !!e.self.promotion
            })
        }, t.c = function(e) {
            return e.some(function(e) {
                return !!e.giftPromotion
            })
        }, t.a = function(e, t) {
            var n;
            return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.newPrice : e.price
        }, t.b = function(e, t) {
            var n;
            return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.discountValue : 0
        }
    },
    FsFC: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return e === a.SECOND ? Object(r.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                secondCount: t
            }, "formatDuration") : e === a.MINUTE ? Object(r.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                minuteCount: t
            }, "formatDuration") : e === a.DAY ? Object(r.d)("{dayCount, plural, one {# day} other {# days}}", {
                dayCount: t
            }, "formatDuration") : e === a.HOUR ? Object(r.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                hourCount: t
            }, "formatDuration") : e === a.WEEK ? Object(r.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                weekCount: t
            }, "formatDuration") : e === a.MONTH ? Object(r.d)("{monthCount, plural, one {# month} other {# months}}", {
                monthCount: t
            }, "formatDuration") : ""
        }
        t.a = function(e) {
            if (e < 60) return i(a.SECOND, e);
            var t = Math.floor(e / 60),
                n = e % 60;
            if (t < 60) return n ? i(a.MINUTE, t) + " " + i(a.SECOND, n) : i(a.MINUTE, t);
            var r = Math.floor(t / 60);
            if (t %= 60, r < 24) return t ? i(a.HOUR, r) + " " + i(a.MINUTE, t) : i(a.HOUR, r);
            var s = Math.floor(r / 24);
            if (r %= 24, s < 7) return r ? i(a.DAY, s) + " " + i(a.HOUR, r) : i(a.DAY, s);
            if (s <= 26) {
                var o = Math.floor(s / 7);
                return (s %= 7) ? i(a.WEEK, o) + " " + i(a.DAY, s) : i(a.WEEK, o)
            }
            var l = Math.round((s + 3) / 30);
            return i(a.MONTH, l)
        };
        var a, r = n("6sO2");
        ! function(e) {
            e[e.SECOND = 0] = "SECOND", e[e.MINUTE = 1] = "MINUTE", e[e.HOUR = 2] = "HOUR", e[e.DAY = 3] = "DAY", e[e.WEEK = 4] = "WEEK", e[e.MONTH = 5] = "MONTH"
        }(a || (a = {}))
    },
    GxDs: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("F8kA"),
            s = n("yDzg"),
            o = n("vH/s"),
            l = n("6sO2"),
            c = n("Odds"),
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasImageLoadingError: !1
                    }, t.handleImageError = function() {
                        t.setState({
                            hasImageLoadingError: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                    this.setState({
                        hasImageLoadingError: !1
                    })
                }, t.prototype.render = function() {
                    var e = l.a.defaultStreamPreviewURL;
                    return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), a.createElement(c.C, {
                        aspect: c.k.Aspect16x9,
                        imageAlt: this.props.altText,
                        imageSrc: e,
                        onImageError: this.handleImageError
                    })
                }, t
            }(a.Component),
            u = (n("1tZx"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
            p = {
                ERROR: "chat-card-error",
                TITLE: "chat-card-title",
                DESCRIPTION: "chat-card-description"
            },
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderErrorCard = function() {
                        var e = a.createElement("img", {
                            "data-test-selector": p.ERROR,
                            src: u,
                            className: "chat-card__error-img"
                        });
                        return t.renderCardContent(e, t.props.error)
                    }, t.renderCardContent = function(e, t) {
                        var n, i;
                        return t ? (n = a.createElement(c._23, {
                            type: c._28.Span,
                            fontSize: c.L.Size5,
                            "data-test-selector": p.TITLE,
                            title: t.title
                        }, t.title), i = a.createElement(c._23, {
                            type: c._28.Span,
                            fontSize: c.L.Size6,
                            color: c.F.Alt2,
                            "data-test-selector": p.DESCRIPTION
                        }, t.description)) : (e = a.createElement(c._3, {
                            overlay: !0
                        }), n = a.createElement(c._3, {
                            width: 180
                        }), i = a.createElement(c._3, {
                            width: 120
                        })), a.createElement(c._19, {
                            background: c.m.Base,
                            display: c.H.Flex,
                            flexWrap: c.K.NoWrap,
                            padding: .5
                        }, a.createElement(c._19, {
                            className: "chat-card__preview-img",
                            background: c.m.Alt2,
                            display: c.H.Flex,
                            alignItems: c.c.Center,
                            justifyContent: c.U.Center,
                            flexShrink: 0
                        }, e), a.createElement(c.V, {
                            display: c.H.Flex,
                            alignItems: c.c.Center
                        }, a.createElement(c.V, {
                            margin: {
                                left: 1
                            },
                            fullWidth: !0
                        }, a.createElement(c.V, {
                            className: "chat-card__title",
                            ellipsis: !0
                        }, n), a.createElement(c.V, {
                            ellipsis: !0
                        }, i))))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e;
                    if (this.props.error) e = this.renderErrorCard();
                    else if (this.props.data) {
                        var t = Object(s.a)(this.props.data.contentURL, {
                                tt_medium: o.PageviewMedium.Chat,
                                tt_content: o.PageviewContent.ChatCard
                            }),
                            n = a.createElement(d, {
                                altText: this.props.data.title,
                                imageURL: this.props.data.previewImageURL
                            });
                        e = a.createElement(r.a, {
                            className: "chat-card__link",
                            to: t,
                            target: "_blank"
                        }, this.renderCardContent(n, {
                            title: this.props.data.title,
                            description: this.props.data.description
                        }))
                    } else e = this.renderCardContent();
                    return a.createElement(c._19, {
                        elevation: 1,
                        margin: {
                            top: .5
                        }
                    }, e)
                }, t
            }(a.Component),
            h = m;
        n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    GxF8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_ReportUser($input: ReportWhisperThreadInput!) {\nreportWhisperThread(input: $input) {\nthread {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    HZww: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            return a.d.ImageUpload + "." + e
        }, t.k = function(e) {
            return a.d.UploadService + "." + e
        }, t.p = function(e) {
            return a.d.VideoPlaybackById + "." + e
        }, t.f = function(e) {
            return a.d.Presence + "." + e
        }, t.d = function(e, t) {
            return a.d.ModerationActionsByUserAndChannel + "." + e + "." + t
        }, t.g = function(e) {
            return a.d.Raid + "." + e
        }, t.b = function(e) {
            return a.d.Friendship + "." + e
        }, t.a = function(e) {
            return a.d.ChannelBitsPinEvents + "." + e
        }, t.l = function(e) {
            return a.d.UserBitsUpdates + "." + e
        }, t.o = function(e) {
            return a.d.UserSubscribeEvents + "." + e
        }, t.n = function(e) {
            return a.d.UserCrateEvents + "." + e
        }, t.m = function(e) {
            return a.d.UserCommerceEvents + "." + e
        }, t.q = function(e) {
            return a.d.Whispers + "." + e
        }, t.e = function(e) {
            return a.d.OnsiteNotifications + "." + e
        }, t.h = function(e) {
            return a.d.StreamChatRoom + "." + e
        }, t.j = function(e) {
            return i.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(r.d)(e.query, e.variables, function(n) {
                        return e.mutator(t, n)
                    }, function(n) {
                        return !!e.skipMessage && e.skipMessage(t, n)
                    })
                }
            })
        }, t.i = function(e) {
            return i.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && t.type !== e.type || Object(r.c)({
                        fragment: e.fragment,
                        id: e.id,
                        mutator: function(n) {
                            return e.mutator(t, n)
                        }
                    })
                }
            })
        };
        var i = n("6sO2"),
            a = n("C8Io"),
            r = n("oIkB")
    },
    HuX0: function(e, t) {},
    I4TS: function(e, t) {},
    I89S: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red", e[e.Yellow = 1e5] = "Yellow"
        }(i || (i = {}))
    },
    IEOs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_DenyRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DenyRejectedChatMessageInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "denyRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    INp2: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e + "-" + Date.now() + "}"
        }
    },
    IfJQ: function(e, t) {},
    Iv9R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_Participants"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "imageURL"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 503
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_Participants($targetUserID: ID) {\ncurrentUser {\nid\nblockedUsers {\nid\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\nfriends {\nedges {\nnode {\nid\n}\navailability\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\nhosting {\nid\ndisplayName\n}\n}\n}\n}\n}\n}\n}\nuser(id: $targetUserID) {\nid\ndisplayBadges {\nid\ntitle\nimageURL\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    J7iJ: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RitualsEnabled_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "ritualsEnabled"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 153
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/rituals-enabled-fragment.gql"\nquery RitualsEnabled_User($id: ID!) {\nchannel: user(id: $id) {\n...ritualsEnabled\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("v2Uk").definitions)), e.exports = i
    },
    K1Jg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Presence_WatchingClick_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 158
            }
        };
        n.loc.source = {
            body: "query Presence_WatchingClick_User($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\nhosting {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KJtg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UnblockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnblockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unblockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KNSH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_UserData"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 95
            }
        };
        n.loc.source = {
            body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KWLn: function(e, t) {},
    KfLc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        }), n.d(t, "d", function() {
            return o
        }), n.d(t, "b", function() {
            return l
        }), n.d(t, "e", function() {
            return c
        }), n.d(t, "c", function() {
            return d
        });
        var i = n("6sO2"),
            a = n("vH/s"),
            r = n("aSvS"),
            s = function(e) {
                var t = {
                    action: r.b.DismissToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                i.m.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            o = function(e) {
                var t = {
                    action: r.b.RedeemToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: e.userMessage
                };
                i.m.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            l = function(e) {
                var t = {
                    action: r.b.RequestEligibility,
                    channel_id: e.channelID,
                    user_banner: null,
                    user_message: null
                };
                i.m.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            c = function(e) {
                var t = {
                    action: r.b.RequestToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                i.m.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            d = function(e) {
                var t = {
                    action: e.action,
                    channel_id: e.channelID
                };
                i.m.track(a.SpadeEventType.NewChatterOnboardingInteraction, t)
            }
    },
    Kxgf: function(e, t, n) {
        "use strict";

        function i(e) {
            return e && r.n.apollo.client.dataIdFromObject ? r.n.apollo.client.dataIdFromObject(e) || "" : ""
        }
        t.a = function() {
            var e = this;
            return Object(s.a)(l, {
                props: function(t) {
                    return {
                        unblockUserMutation: function(n, r) {
                            return a.__awaiter(e, void 0, void 0, function() {
                                return a.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n
                                                    }
                                                },
                                                optimisticResponse: {
                                                    unblockUser: {
                                                        __typename: "UnblockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: i(r),
                                                        fragment: o
                                                    });
                                                    t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                        return e.id !== n
                                                    }), e.writeFragment({
                                                        id: i(r),
                                                        fragment: o,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("unblockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var a = n("TToO"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("a0uF"),
            l = (n.n(o), n("KJtg"));
        n.n(l)
    },
    L0RX: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    LYwx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelOwnerID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelOwnerID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 194
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nurl\nemotes {\nid\ntoken\n}\nemoteSetID\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ldv2: function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(a.a)(s, {
                props: function(e) {
                    if (e.data) {
                        var t = e.data.currentUser && e.data.currentUser.emoteSets,
                            n = t && Object(r.a)(t);
                        return {
                            emoteSetsData: i.__assign({}, e.data, {
                                emoteMap: n,
                                emoteSets: t
                            })
                        }
                    }
                    return {}
                },
                skip: function(e) {
                    return !e.isLoggedIn
                }
            })
        };
        var i = n("TToO"),
            a = n("7vx8"),
            r = n("YhVV"),
            s = n("7B9K");
        n.n(s)
    },
    LjAQ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("U7vG"),
            s = n("2KeS"),
            o = n("6sO2"),
            l = n("7vx8"),
            c = n("CSlQ"),
            d = n("xwpJ"),
            u = n("Odds"),
            p = n("x6ny"),
            m = "reporting-modal__select",
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = Object(o.d)("Select One...", "ReportUserModal");
                    if (this.props.data.loading) e = [r.createElement("option", {
                        key: "Loading"
                    }, Object(o.d)("Loading...", "ReportReasonsSelect"))];
                    else {
                        e = (this.props.data.reportReasons || Object(d.b)()).map(function(e) {
                            return r.createElement("option", {
                                key: e.id,
                                value: e.id
                            }, e.text)
                        })
                    }
                    return r.createElement(u.V, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(u.M, {
                        id: m,
                        label: Object(o.d)("Select Reason (required)", "ReportUserModal")
                    }, r.createElement(u._16, {
                        id: m,
                        "data-test-selector": "reporting-modal.select",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.handleChange,
                        defaultValue: t
                    }, r.createElement("option", {
                        disabled: !0,
                        key: "default"
                    }, t), e)))
                }, t = i.__decorate([Object(c.c)("ReportReasonSelect")], t)
            }(r.Component),
            g = Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            content: e.reportContentType
                        }
                    }
                }
            })(h),
            f = (n("I4TS"), n("1EXI"));
        n.d(t, "a", function() {
            return k
        }), n.d(t, "b", function() {
            return v
        }), n.d(t, "c", function() {
            return S
        });
        var v, b = "reporting__select-community",
            k = "community_rules_violation";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError"
        }(v || (v = {}));
        var y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(o.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: r.createElement("br", null),
                        tosLink: r.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(o.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.selectCommunity = function(e) {
                        t.setState({
                            selectedCommunityID: e.target.value,
                            selectedCommunityName: e.target.name
                        })
                    }, t.handleSubmit = function(e) {
                        e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName) : t.props.onError(v.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                        var n = t.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        });
                        n.length && e === k ? t.setState({
                            reason: e,
                            selectedCommunityID: n[0].id,
                            selectedCommunityName: n[0].name,
                            isCommunityReason: !0
                        }) : t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(u.V, {
                        display: u.H.Flex,
                        flexDirection: u.J.Column,
                        alignItems: u.c.Center,
                        justifyContent: u.U.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === v.Success ? r.createElement("div", null, r.createElement(u.u, {
                        onClick: this.props.onClose
                    }, r.createElement(u.V, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Close", "ReportUser")))) : r.createElement("div", null, r.createElement(u.V, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, r.createElement(u._23, {
                        type: u._28.H4
                    }, this.props.title), r.createElement(u._19, {
                        color: u.F.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), r.createElement("form", null, r.createElement(u._19, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(g, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), this.renderCommunitiesSelector(), r.createElement(u.M, {
                        id: "reporting__text-area",
                        label: Object(o.d)("Description (required)", "ReportUser")
                    }, r.createElement(u._25, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), r.createElement(u._19, {
                        display: u.H.Flex,
                        justifyContent: u.U.Center
                    }, r.createElement(u.u, {
                        onClick: this.handleSubmit
                    }, r.createElement(u.V, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Send", "ReportUser"))))))
                }, t.prototype.renderCommunitiesSelector = function() {
                    if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                    if (this.state.isCommunityReason) {
                        var e = this.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        }).map(function(e) {
                            return r.createElement("option", {
                                key: e.id,
                                value: e.id,
                                name: e.name
                            }, e.displayName)
                        });
                        return r.createElement(u.V, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(u.M, {
                            id: b,
                            label: Object(o.d)("Community", "ReportUser")
                        }, r.createElement(u._16, {
                            id: b,
                            "data-test-selector": "reporting.select-community",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.selectCommunity
                        }, e)))
                    }
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case v.FormError:
                            e = Object(o.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case v.MutationError:
                            e = Object(o.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case v.Success:
                            e = Object(o.d)("Thank you for your report.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = a({
                        "reporting__error-container": this.props.submitStatus !== v.Success,
                        "reporting__success-container": this.props.submitStatus === v.Success
                    });
                    return r.createElement(u._19, {
                        className: t,
                        fullWidth: this.props.submitStatus !== v.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(r.Component),
            S = Object(s.compose)(Object(l.a)(f, {
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            userId: e.targetUserID
                        }
                    }
                }
            }))(y)
    },
    "Lx+S": function(e, t, n) {
        "use strict";

        function i(e) {
            var t = r.createElement(O._23, {
                    bold: !0,
                    type: O._28.Span
                }, r.createElement("span", {
                    style: {
                        color: e.chatColor
                    },
                    "data-a-target": V
                }, Object(j.a)(e.login, e.displayName))),
                n = null;
            return e.editAppearance || (n = r.createElement(O.V, {
                margin: {
                    top: 1
                }
            }, r.createElement("div", {
                className: "chat-settings__edit-button",
                onClick: e.onClickEdit,
                "data-a-target": P,
                "data-test-selector": B
            }, Object(E.d)("Edit Appearance", "ChatSettings")))), r.createElement(O._19, {
                background: O.m.Base,
                color: O.F.Base,
                display: O.H.InlineFlex,
                flexDirection: O.J.Column,
                fullWidth: !0
            }, r.createElement(O._23, {
                color: O.F.Alt2,
                transform: O._27.Uppercase
            }, Object(E.d)("Name Display", "ChatSettings")), r.createElement(O.V, {
                margin: {
                    top: 2
                }
            }, e.userBadges && e.userBadges.map(function(e) {
                return r.createElement(A.a, {
                    key: e.id,
                    badge: e
                })
            }), t), n)
        }
        var a = n("TToO"),
            r = n("U7vG"),
            s = n("RH2O"),
            o = n("CIox"),
            l = n("2KeS"),
            c = n("NXs7"),
            d = n("Ouuk"),
            u = n("jF7o"),
            p = n("+xm8"),
            m = n("f2i/"),
            h = n("NikC"),
            g = n("Aj/L"),
            f = n("0nzt"),
            v = n("vh75"),
            b = n("ass3"),
            k = n("UzRK"),
            y = n("TnJK"),
            S = n("O0Qc"),
            C = n("VsL1"),
            _ = n("Umoc"),
            E = n("6sO2"),
            N = n("zCIC"),
            w = n("+Znq"),
            D = n("7vx8"),
            T = n("HW6M"),
            I = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            O = n("Odds"),
            M = (n("90yy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onColorSelected = function(e) {
                        var n = e.currentTarget.getAttribute("data-color");
                        n && t.props.onColorSelected(n)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = I.map(function(t) {
                            var n = {
                                "color-chooser": !0,
                                "color-chooser--selected": t === e.props.selectedColor
                            };
                            return r.createElement("div", {
                                key: t,
                                "data-color": t,
                                onClick: e.onColorSelected,
                                className: T(n),
                                style: {
                                    backgroundColor: t
                                },
                                "data-test-selector": "color_swatch_" + t,
                                "data-a-target": "color_swatch_" + t
                            })
                        }),
                        n = r.createElement(O._23, {
                            transform: O._27.Uppercase,
                            color: O.F.Alt2
                        }, Object(E.d)("Name Color", "ChatSettings"));
                    return this.props.borderTop && (n = r.createElement(O._19, {
                        margin: {
                            top: 2
                        },
                        borderTop: !0,
                        padding: {
                            top: 2
                        }
                    }, n)), r.createElement("div", null, r.createElement(O._19, {
                        margin: {
                            bottom: 1
                        },
                        background: O.m.Base,
                        color: O.F.Base,
                        display: O.H.InlineFlex,
                        flexDirection: O.J.Column,
                        fullWidth: !0
                    }, n), r.createElement(O.V, {
                        margin: {
                            y: 1
                        },
                        display: O.H.Flex
                    }, t, r.createElement(O._23, {
                        fontSize: O.L.Size7
                    }, r.createElement("a", {
                        href: "https://twitch.tv/products/turbo?ref=more_colors_direct"
                    }, Object(E.d)("more colors →", "ChatSettings")))))
                }, t
            }(r.Component)),
            x = n("OAwv"),
            U = n("AaXK"),
            R = (n("7LVu"), "channel_badge"),
            F = "global_badge",
            L = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onGlobalBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setGlobalBadge(t.props.userLogin, n || "")
                    }, t.onChannelBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.currentUser ? r.createElement("div", null, r.createElement(M, {
                        selectedColor: this.props.userChatColor,
                        onColorSelected: this.props.onColorSelected,
                        borderTop: !0
                    }), this.getBadgeChooser()) : null
                }, t.prototype.getBadgeChooser = function() {
                    var e = this;
                    if (this.props.data) {
                        var t = this.props.data.user.self.availableBadges,
                            n = this.props.data.user.self.selectedBadge,
                            i = this.props.data.currentUser.availableBadges,
                            a = this.props.data.currentUser.selectedBadge;
                        if (!t) return null;
                        var s = void 0 === this.state.channelBadgeID && n ? n.setID : this.state.channelBadgeID,
                            o = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !s
                            },
                            l = Object(E.d)("No channel badges :(", "ChatSettings");
                        t && t.length > 0 && (l = t.map(function(t) {
                            var i = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": n && t.setID === s
                            };
                            return r.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onChannelBadgeClicked,
                                key: t.setID + "/" + t.version,
                                className: T(i),
                                "data-test-selector": R + "_" + t.setID,
                                "data-a-target": R + "_" + t.setID
                            }, r.createElement(O._31, {
                                label: t.title
                            }, r.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(r.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onChannelBadgeClicked,
                            className: T(o),
                            "data-test-selector": R + "_none",
                            "data-a-target": R + "_none"
                        }, r.createElement(O._31, {
                            label: Object(E.d)("Same as Global", "ChatSettings")
                        }, r.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, r.createElement(O._10, {
                            asset: O._11.Global
                        })))));
                        var c = void 0 === this.state.globalBadgeID && a ? a.setID : this.state.globalBadgeID,
                            d = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !c
                            },
                            u = Object(E.d)("No global badges :(", "ChatSettings");
                        return i && i.length > 0 && (u = i.map(function(t) {
                            var n = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": a && t.setID === c
                            };
                            return r.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onGlobalBadgeClicked,
                                key: t.setID + "/" + t.version,
                                className: T(n),
                                "data-test-selector": F + "_" + t.setID,
                                "data-a-target": F + "_" + t.setID
                            }, r.createElement(O._31, {
                                label: t.title
                            }, r.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(r.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onGlobalBadgeClicked,
                            className: T(d),
                            "data-test-selector": F + "_none",
                            "data-a-target": F + "_none"
                        }, r.createElement(O._31, {
                            label: Object(E.d)("None", "ChatSettings")
                        }, r.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, r.createElement(O._10, {
                            asset: O._11.Ban
                        }))))), r.createElement("div", null, r.createElement(O._19, {
                            background: O.m.Base,
                            color: O.F.Base,
                            display: O.H.InlineFlex,
                            flexDirection: O.J.Column,
                            fullWidth: !0
                        }, r.createElement(O._19, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, r.createElement(O._31, {
                            align: O._32.Left,
                            label: Object(E.d)("Your global badge is shown when chatting and whispering.", "ChatSettings"),
                            width: 175
                        }, r.createElement(O._23, {
                            color: O.F.Alt2,
                            transform: O._27.Uppercase
                        }, Object(E.d)("Global Badge [?]", "ChatSettings")))), r.createElement(O.V, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: O.H.Flex,
                            "data-a-target": "global-badge-selector"
                        }, u)), r.createElement(O._19, {
                            background: O.m.Base,
                            color: O.F.Base,
                            display: O.H.InlineFlex,
                            flexDirection: O.J.Column,
                            fullWidth: !0
                        }, r.createElement(O._19, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, r.createElement(O._31, {
                            align: O._32.Left,
                            label: Object(E.d)("Change the badge shown when chatting in this channel.", "ChatSettings"),
                            width: 175
                        }, r.createElement(O._23, {
                            color: O.F.Alt2,
                            transform: O._27.Uppercase
                        }, Object(E.d)("Channel Badge [?]", "ChatSettings")))), r.createElement(O.V, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: O.H.Flex,
                            "data-a-target": "channel-badge-selector"
                        }, l)))
                    }
                }, t.prototype.setChannelBadge = function(e, t, n) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var i, r, s;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return i = {
                                        "Client-ID": E.n.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, r = "https://api.twitch.tv/kraken/users/" + t + "/chat/channels/" + e + "/badges", [4, fetch(r, {
                                        method: "PUT",
                                        body: x.stringify({
                                            selected_badge: n
                                        }),
                                        headers: i
                                    })];
                                case 1:
                                    return (s = a.sent()) && s.ok && (this.props.onBadgesChanged(), this.setState({
                                        channelBadgeID: n
                                    })), [2]
                            }
                        })
                    })
                }, t.prototype.setGlobalBadge = function(e, t) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var n, i, r;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return n = {
                                        "Client-ID": E.n.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, i = "https://api.twitch.tv/kraken/users/" + e + "/chat/badges", [4, fetch(i, {
                                        method: "PUT",
                                        body: x.stringify({
                                            selected_badge: t
                                        }),
                                        headers: n
                                    }).catch(console.error)];
                                case 1:
                                    return (r = a.sent()) && r.ok && (this.props.onBadgesChanged(), this.setState({
                                        globalBadgeID: t
                                    })), [2]
                            }
                        })
                    })
                }, t = a.__decorate([Object(D.a)(U, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(r.Component),
            j = n("SZoP"),
            A = n("3T7g"),
            B = "edit-appearance-button",
            P = "edit-appearance-button",
            V = "edit-display-name",
            H = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(O.V, {
                        "data-toggle-balloon-id": "raids-follower-only-tooltip",
                        margin: {
                            left: .5
                        },
                        position: O._4.Relative
                    }, r.createElement(O._31, {
                        align: O._32.Right,
                        direction: O._33.Top,
                        display: O.H.InlineFlex,
                        label: this.props.text,
                        width: 175,
                        show: !0
                    }, r.createElement(O.Q, {
                        alignItems: O.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: O.H.InlineFlex,
                        justifyContent: O.U.Center
                    }, r.createElement(O._23, {
                        color: O.F.Overlay,
                        fontSize: O.L.Size8,
                        type: O._28.Span,
                        "data-test-selector": "raids-follower-only-tooltip"
                    }, "i"))))
                }, t
            }(r.Component),
            W = n("V5M+"),
            G = n("oSFp"),
            q = n("F8kA"),
            z = n("9u8h"),
            Q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.targetChannelID = t.props.targetChannelID, t
                }
                return a.__extends(t, e), t.fetchRecentRaidsList = function(e) {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return a.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, z.a.get("/kraken/raids?client_id=" + E.a.authClientID + "&api_version=" + E.a.defaultAPIVersion + "&target_id=" + e)];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), E.i.error(n, "Couldn't fetch raids list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.deserialize = function(e) {
                    var t = [];
                    if (e.body && e.body.raids) {
                        for (var n in e.body.raids)
                            if (n.hasOwnProperty) {
                                var i = {
                                    raidID: e.body.raids[n]._id,
                                    raidAt: e.body.raids[n].raid_at,
                                    userID: e.body.raids[n].creator_user._id,
                                    name: e.body.raids[n].creator_user.name
                                };
                                t.push(i)
                            }
                        return t
                    }
                    return []
                }, t
            }(r.Component),
            $ = n("oIkB"),
            J = n("g7wA"),
            K = n("O9wU"),
            Y = n("jPU6"),
            Z = n("y1/w"),
            X = (n("MSFW"), n("L0RX")),
            ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onUsernameClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-username"),
                            i = e.currentTarget.getAttribute("data-raid-id") || "";
                        n && t.props.onUsernameClick(n, K.a.recent_raids, i)
                    }, t.onBanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.banUser)(Object($.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t.onUnbanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.unbanUser)(Object($.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(O.V, {
                        key: "recent-raids-layout2-" + this.props.raiderUserID,
                        className: "recent-raids-item",
                        flexDirection: O.J.Row,
                        display: O.H.Flex,
                        fullWidth: !0
                    }, r.createElement(O.V, {
                        flexDirection: O.J.Row,
                        display: O.H.Flex,
                        fullWidth: !0,
                        justifyContent: O.U.Between
                    }, r.createElement(O._23, {
                        bold: !0
                    }, r.createElement("a", {
                        className: "recent-raids-item__name",
                        "data-username": this.props.channelLogin,
                        "data-raid-id": this.props.raidID,
                        onClick: this.onUsernameClick,
                        href: "#"
                    }, this.props.channelLogin)), r.createElement(O.V, {
                        position: O._4.Relative
                    }, r.createElement(O.V, {
                        className: "recent-raids-item__timestamp"
                    }, Object(J.s)(Date.parse(this.props.timestamp))), this.getCardSlideInContent())))
                }, t.prototype.getCardSlideInContent = function() {
                    if (!this.props.slideInContent) return null;
                    var e = null;
                    return e = this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? r.createElement(O.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: O.x.Small,
                        type: O.z.Text,
                        onClick: this.onUnbanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(E.d)("Unban", "RecentRaid")) : r.createElement(O.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: O.x.Small,
                        type: O.z.Text,
                        onClick: this.onBanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(E.d)("Ban", "RecentRaid")), r.createElement(O.V, {
                        key: "recent-raids-layout-" + this.props.raiderUserID,
                        className: "recent-raids-item__hover-content",
                        zIndex: O._39.Above,
                        "data-a-target": "recent-raids-item-hover"
                    }, this.props.slideInContent, e)
                }, t = a.__decorate([Object(D.a)(Z, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.raiderUserID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(D.a)(Y, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var i = e.readQuery({
                                        query: Z,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        }
                                    });
                                    t && t.data && (i.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: Z,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        },
                                        data: i
                                    })
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(D.a)(X, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                            query: Z,
                                            variables: {
                                                targetUserID: t.raiderUserID,
                                                channelID: t.channelID
                                            }
                                        }),
                                        i = a.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                    e.writeQuery({
                                        query: Z,
                                        variables: {
                                            targetUserID: t.raiderUserID,
                                            channelID: t.channelID
                                        },
                                        data: i
                                    })
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(r.Component),
            te = n("mw/a"),
            ne = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onReportButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-raid-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: te.a.Raid,
                                targetUserID: i,
                                contentID: n,
                                extra: JSON.stringify({
                                    channel_id: i.toString()
                                })
                            },
                            title: Object(E.d)("Report {channelDisplayName}", {
                                channelDisplayName: a
                            }, "ReportUserModal")
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    return a.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return a.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, Q.fetchRecentRaidsList(this.props.targetChannelID)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        raidChannels: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = [],
                        t = [],
                        n = {};
                    if (void 0 !== this.state.raidChannels) {
                        0 === this.state.raidChannels.length && e.push(r.createElement(O._23, {
                            key: "recent-raids-no-raids",
                            type: O._28.P
                        }, Object(E.d)("You have no recent raids", "RecentRaids")));
                        for (var i in this.state.raidChannels)
                            if (i.hasOwnProperty) {
                                var a = this.state.raidChannels[i];
                                this.state.raidChannels.hasOwnProperty(i) && void 0 === n[a.userID] && (t.push(r.createElement(ee, {
                                    key: "recent-raids-item-" + a.userID,
                                    slideInContent: [r.createElement(O._19, {
                                        key: "recent-raids-item-report-area-" + a.userID,
                                        color: O.F.Alt2,
                                        display: O.H.InlineFlex
                                    }, r.createElement(O.u, {
                                        key: "recent-raid-report-button",
                                        size: O.x.Small,
                                        type: O.z.Text,
                                        onClick: this.onReportButtonClick,
                                        "data-a-target": "recent-raid-item-button",
                                        "data-raid-id": a.raidID,
                                        "data-target-user-login": a.name,
                                        "data-target-user-id": a.userID
                                    }, Object(E.d)("Report", "RecentRaid")), r.createElement(O._31, {
                                        align: O._32.Right,
                                        width: 150,
                                        label: Object(E.d)("Banning a user prevents them from future chatting or raiding", "RecentRaid")
                                    }))],
                                    timestamp: a.raidAt,
                                    channelLogin: a.name,
                                    raiderUserID: a.userID,
                                    channelID: this.props.targetChannelID,
                                    raiderLogin: a.name,
                                    raidID: a.raidID,
                                    onUsernameClick: this.props.onUsernameClick,
                                    showReportUserModal: this.props.showReportUserModal
                                })), n[a.userID] = !0)
                            }
                    }
                    var s = null;
                    return this.props.recentRaids ? r.createElement(O.V, {
                        key: "recent-raids"
                    }, r.createElement(O.V, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(O._23, {
                        color: O.F.Link,
                        type: O._28.Span
                    }, r.createElement(q.a, {
                        to: {
                            pathname: "/broadcast/dashboard/settings/raids"
                        }
                    }, Object(E.d)("Manage Raid Settings", "RecentRaids")))), e, t) : (s = r.createElement(O.V, {
                        key: "recent-raids",
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: O.H.Flex,
                        justifyContent: O.U.Between,
                        alignItems: O.c.Center
                    }, r.createElement("span", {
                        className: "chat-settings__edit-button",
                        onClick: this.props.onClickRecentRaids,
                        "data-test-selector": "recent-raids-button"
                    }, Object(E.d)("See Recent Raids", "ChatSettings")), this.props.tooltipText && r.createElement(O.V, {
                        position: O._4.Relative
                    }, r.createElement(O._31, {
                        align: O._32.Right,
                        direction: O._33.Top,
                        display: O.H.InlineFlex,
                        label: this.props.tooltipText,
                        width: 175,
                        show: !0
                    }, r.createElement(O.Q, {
                        alignItems: O.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: O.H.InlineFlex,
                        justifyContent: O.U.Center,
                        margin: {
                            left: .5
                        }
                    }, r.createElement(O._23, {
                        color: O.F.Overlay,
                        fontSize: O.L.Size8,
                        type: O._28.Span
                    }, "i"))))), r.createElement(O.V, null, s))
                }, t
            }(r.Component),
            ie = Object(s.a)(function() {
                return {}
            }, function(e) {
                return Object(l.bindActionCreators)({
                    showReportUserModal: function(e) {
                        var t = a.__rest(e, []);
                        return Object(W.d)(G.a, t)
                    }
                }, e)
            })(ne),
            ae = n("baDC"),
            re = (n("Vaxm"), "chat-settings-back-button"),
            se = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        recentRaids: !1,
                        chatColor: null,
                        raidsTooltipDismissed: !1
                    }, t.dismissRaidsTooltip = function() {
                        t.setState({
                            raidsTooltipDismissed: !0
                        })
                    }, t.handleFollowerDurationClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-duration");
                        n && t.props.onFollowerDurationChange(parseInt(n, 10))
                    }, t.onClickEdit = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickEditAppearance()
                    }, t.onClickRecentRaids = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.setState({
                            recentRaids: !0
                        })
                    }, t.onClickBack = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onLeaveEditAppearance(), t.setState({
                            recentRaids: !1
                        })
                    }, t.onColorSelected = function(e) {
                        t.setState({
                            chatColor: e
                        }), t.props.onColorSelected(e)
                    }, t.onBadgesChanged = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return a.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return !this.props.data || this.props.data.loading ? [3, 2] : [4, this.props.data.refetch()];
                                    case 1:
                                        if ((e = i.sent()).data) {
                                            if (!(t = e.data).user.self) return [2];
                                            n = {}, t.user.self.displayBadges.forEach(function(e) {
                                                n[e.setID] = e.version
                                            }), E.n.tmi.client.updateChannelBadges(this.props.channelLogin, n)
                                        }
                                        i.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading) return null;
                    var e = null;
                    if (this.props.isLoggedIn && this.props.data.currentUser) {
                        var t = this.props.data.user.self ? this.props.data.user.self.displayBadges : [];
                        e = r.createElement(i, {
                            key: "name-display",
                            login: this.props.data.currentUser.login,
                            displayName: this.props.data.currentUser.displayName,
                            chatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                            editAppearance: this.props.editAppearance,
                            userBadges: t,
                            onClickEdit: this.onClickEdit
                        })
                    }
                    var n = [];
                    return this.props.isLoggedIn ? this.props.editAppearance ? n = [r.createElement(O.Q, {
                        margin: {
                            bottom: 2
                        },
                        key: "chat-settings-edit-inject"
                    }, r.createElement("div", {
                        key: "chat-settings-edit",
                        className: "chat-settings__edit-button",
                        onClick: this.onClickBack,
                        "data-test-selector": re
                    }, r.createElement(O._23, {
                        color: O.F.Link,
                        type: O._28.Span
                    }, r.createElement(O._10, {
                        asset: O._11.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(E.d)("Back", "ChatSettingsAppearance")))), e, r.createElement(L, {
                        key: "edit-appearance",
                        onColorSelected: this.onColorSelected,
                        editAppearance: this.props.editAppearance,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        userChatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                        userLogin: this.props.data.currentUser.login,
                        onBadgesChanged: this.onBadgesChanged
                    })] : this.state.recentRaids ? n = [r.createElement(O.Q, {
                        key: "chat-settings-recent-raids"
                    }, r.createElement("div", {
                        key: "chat-settings-edit",
                        className: "chat-settings__recent-raids-button",
                        onClick: this.onClickBack,
                        "data-test-selector": re
                    }, r.createElement(O._23, {
                        color: O.F.Link,
                        type: O._28.Span
                    }, r.createElement(O._10, {
                        asset: O._11.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(E.d)("Back", "ChatSettingsRecentRaids")), r.createElement(O.V, {
                        margin: {
                            top: 2
                        }
                    }, r.createElement(O._23, {
                        key: "recent-raids-title",
                        color: O.F.Alt2,
                        transform: O._27.Uppercase
                    }, Object(E.d)("Recent Raids", "ChatSettings"))))), r.createElement(ie, {
                        key: "recent-raids",
                        targetChannelID: this.props.channelID,
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard
                    })] : (n = [e, this.renderUniversalOptions()], this.props.isCurrentUserModerator && n.push(this.renderModTools())) : n = [r.createElement(M, {
                        key: "color-chooser",
                        onColorSelected: this.props.onColorSelected
                    }), this.renderUniversalOptions()], r.createElement(N.b, {
                        className: "chat-settings"
                    }, r.createElement("div", {
                        onClick: this.dismissRaidsTooltip
                    }, r.createElement(O._19, {
                        key: "chat-settings",
                        className: "chat-settings__content",
                        background: O.m.Base,
                        color: O.F.Base,
                        padding: 2
                    }, n)))
                }, t.prototype.renderUniversalOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && r.createElement(O.E, {
                            checked: this.props.darkModeEnabled,
                            "data-a-target": "darkmode-checkbox",
                            "data-test-selector": "dark-mode-checkbox",
                            id: "chat-settings-dark-mode",
                            label: Object(E.d)("Dark Mode", "ChatSettings"),
                            onChange: this.props.onDarkModeToggle
                        }),
                        t = !this.props.isPopout && r.createElement("button", {
                            onClick: this.props.onChatPopout,
                            "data-a-target": "popout-chat-button",
                            "data-test-selector": "popout-button"
                        }, Object(E.d)("Popout", "ChatSettings")),
                        n = !this.props.isPopout && (window.BetterTTV || window.FrankerFaceZ) && r.createElement("button", {
                            onClick: this.props.onLegacyChatPopout,
                            "data-test-selector": "legacy-popout-button"
                        }, Object(E.d)("Legacy Popout", "ChatSettings"));
                    return r.createElement(O.V, {
                        key: "chat-options"
                    }, r.createElement(O._19, {
                        borderTop: !0,
                        margin: {
                            top: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(O._23, {
                        color: O.F.Alt2,
                        transform: O._27.Uppercase
                    }, Object(E.d)("Chat Options", "ChatSettings"))), r.createElement(O.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(O.E, {
                        checked: this.props.showTimestamps,
                        "data-a-target": "timestamp-checkbox",
                        "data-test-selector": "timestamps-selector",
                        id: "chat-settings-timestamp",
                        label: Object(E.d)("Timestamps", "ChatSettings"),
                        onChange: this.props.onTimestampToggle
                    })), r.createElement(O.V, {
                        margin: {
                            bottom: 1
                        }
                    }, e), r.createElement(O.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement("button", {
                        onClick: this.props.onChatHide,
                        "data-a-target": "hide-chat-button",
                        "data-test-selector": "hide-chat-button"
                    }, Object(E.d)("Hide Chat", "ChatSettings"))), r.createElement(O.V, {
                        margin: {
                            bottom: 1
                        }
                    }, t), n && r.createElement(O.V, null, n))
                }, Object.defineProperty(t.prototype, "showRaidsTooltip", {
                    get: function() {
                        return this.props.sawFirstRaidPrompt && !this.state.raidsTooltipDismissed
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.renderModTools = function() {
                    return r.createElement(O._19, {
                        key: "mod-tools",
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, r.createElement(O.V, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(O._23, {
                        color: O.F.Alt2,
                        transform: O._27.Uppercase
                    }, Object(E.d)("Mod Tools", "ChatSettings"))), r.createElement(O.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(O.E, {
                        checked: this.props.showModerationIcons,
                        "data-a-target": "mod-icons-checkbox",
                        "data-test-selector": "mod-icons-checkbox",
                        id: "chat-settings-mod-icons",
                        label: Object(E.d)("Mod Icons", "ChatSettings"),
                        onChange: this.props.onModIconsToggle
                    })), r.createElement(O._19, {
                        margin: {
                            bottom: 1
                        },
                        display: O.H.Flex,
                        justifyContent: O.U.Between
                    }, r.createElement(O.E, {
                        checked: this.props.followerModeEnabled,
                        "data-a-target": "follower-mode-checkbox",
                        "data-test-selector": "follower-mode-checkbox",
                        id: "chat-settings-followers-only",
                        label: Object(E.d)("Followers-Only Chat", "ChatSettings"),
                        onChange: this.props.onFollowerModeToggle
                    }), this.showRaidsTooltip ? r.createElement(H, {
                        text: Object(E.d)("Prevent offensive raiders from chatting.", "RaidReportingChat")
                    }) : null, r.createElement(O.V, {
                        alignItems: O.c.Center,
                        display: O.H.Flex,
                        flexWrap: O.K.NoWrap,
                        justifyContent: O.U.Between
                    }, r.createElement(O.V, {
                        margin: {
                            right: .5
                        }
                    }, r.createElement(O._23, {
                        color: O.F.Alt2,
                        fontSize: O.L.Size7,
                        type: O._28.Span
                    }, Object(E.d)("Must have followed for", "ChatSettings"))), r.createElement(O.V, {
                        className: "chat-settings__mod-tools-follower-button",
                        flexShrink: 0
                    }, r.createElement(w.a, {
                        display: O.H.InlineBlock
                    }, r.createElement(O.u, {
                        size: O.x.Small,
                        type: O.z.Text,
                        "data-a-target": "follower-mode-dropdown",
                        "data-test-selector": "follower-mode-duration-menu",
                        dropdown: !0
                    }, Object(k.d)(this.props.selectedFollowerModeDuration)), r.createElement(O.p, {
                        direction: O.q.TopRight
                    }, r.createElement(O.V, {
                        padding: .5
                    }, r.createElement(O._23, {
                        color: O.F.Alt2
                    }, Object(E.d)("Followers can chat if they have followed for at least", "ChatSettings"))), r.createElement(O._19, {
                        color: O.F.Link
                    }, this.renderFollowerModeOptions())))))), r.createElement(O.V, {
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(O.E, {
                        checked: this.props.slowModeEnabled,
                        "data-a-target": "slow-mode-checkbox",
                        "data-test-selector": "slow-mode-checkbox",
                        id: "chat-settings-slow-mode",
                        label: Object(E.d)("Slow Mode", "ChatSettings"),
                        onChange: this.props.onSlowModeToggle
                    })), r.createElement(ie, {
                        key: "recent-raids",
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: b.d,
                        targetChannelID: this.props.channelID,
                        tooltipText: this.showRaidsTooltip ? Object(E.d)("View recent raids with option to report or ban.", "RaidReportingChat") : ""
                    }), r.createElement("button", {
                        onClick: this.props.onChatClear,
                        "data-a-target": "clear-chat-button",
                        "data-test-selector": "clear-chat-button"
                    }, Object(E.d)("Clear Chat", "ChatSettings")))
                }, t.prototype.renderFollowerModeOptions = function() {
                    var e = this;
                    return k.b.map(function(t) {
                        return r.createElement(O.T, {
                            "data-duration": t,
                            key: t,
                            onClick: e.handleFollowerDurationClick,
                            selected: t === e.props.selectedFollowerModeDuration
                        }, r.createElement(O.V, {
                            padding: .5
                        }, Object(k.c)(t)))
                    })
                }, t = a.__decorate([Object(D.a)(ae, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(r.Component),
            oe = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        editAppearance: !1
                    }, t.handleSettingsToggle = function(e) {
                        t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                            editAppearance: !1
                        })
                    }, t.onEdit = function() {
                        t.setState({
                            editAppearance: !0
                        })
                    }, t.onLeaveEdit = function() {
                        t.setState({
                            editAppearance: !1
                        })
                    }, t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? c.a.Light : c.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.darkModeEnabled,
                            settingName: y.a.DarkMode
                        })
                    }, t.onTimestampToggle = function() {
                        Object(C.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showTimestamps,
                            settingName: y.a.ShowTimestamps
                        })
                    }, t.onChatHide = function() {
                        t.props.onChatHide(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !0,
                            settingName: y.a.HideChat
                        })
                    }, t.onChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(u.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onLegacyChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("https://www.twitch.tv/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(u.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onModIconsToggle = function() {
                        Object(C.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showModerationIcons,
                            settingName: y.a.ShowModIcons
                        })
                    }, t.onFollowerModeToggle = function() {
                        if (t.props.followerModeEnabled) t.props.onChatCommand(Object(S.d)()), t.props.onFollowerModeDisable();
                        else {
                            var e = t.getSelectedFollowerDuration();
                            t.props.onChatCommand(Object(S.f)(e)), t.props.onFollowerModeDurationChange(e), t.props.onFollowerModeEnable()
                        }
                        Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.followerModeEnabled,
                            settingName: y.a.FollowerMode
                        })
                    }, t.onFollowerDurationChange = function(e) {
                        Object(C.c)(t.props.channelLogin, e), t.props.onFollowerModeDurationPreferenceChange(t.props.channelLogin, e), t.props.followerModeEnabled && (t.props.onChatCommand(Object(S.f)(e)), t.props.onFollowerModeDurationChange(e)), Object(_.c)({
                            channelLogin: t.props.channelLogin,
                            followerModeOn: t.props.followerModeEnabled,
                            isHostMode: t.props.isHostMode,
                            newValue: e
                        })
                    }, t.onSlowModeToggle = function() {
                        t.props.slowModeEnabled ? (t.props.onChatCommand(Object(S.e)()), t.props.onSlowModeDisable()) : (t.props.onChatCommand(Object(S.g)()), t.props.onSlowModeEnable()), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.slowModeEnabled,
                            settingName: y.a.SlowMode
                        })
                    }, t.onChatClear = function() {
                        t.props.onChatCommand(Object(S.c)())
                    }, t.getSelectedFollowerDuration = function() {
                        if (t.props.followerModeEnabled) return t.props.followerModeDuration;
                        var e = t.props.lastUsedFollowerDurations[t.props.channelLogin];
                        return "number" == typeof e ? e : k.a
                    }, t.onColorSelected = function(e) {
                        t.props.isLoggedIn ? t.props.onChatCommand(Object(S.b)(e)) : t.props.login()
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(de, {
                        disabled: this.props.disabled,
                        onToggle: this.handleSettingsToggle
                    }, r.createElement(se, {
                        darkModeEnabled: this.props.darkModeEnabled,
                        followerModeEnabled: this.props.followerModeEnabled,
                        editAppearance: this.state.editAppearance,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isPopout: this.props.isPopout,
                        onChatClear: this.onChatClear,
                        onChatHide: this.onChatHide,
                        onChatPopout: this.onChatPopout,
                        onDarkModeToggle: this.onDarkModeToggle,
                        onFollowerDurationChange: this.onFollowerDurationChange,
                        onFollowerModeToggle: this.onFollowerModeToggle,
                        onLegacyChatPopout: this.onLegacyChatPopout,
                        onModIconsToggle: this.onModIconsToggle,
                        onSlowModeToggle: this.onSlowModeToggle,
                        onTimestampToggle: this.onTimestampToggle,
                        selectedFollowerModeDuration: this.getSelectedFollowerDuration(),
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        slowModeEnabled: this.props.slowModeEnabled,
                        theatreModeEnabled: this.props.theatreModeEnabled,
                        onColorSelected: this.onColorSelected,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isLoggedIn: this.props.isLoggedIn,
                        onClickEditAppearance: this.onEdit,
                        onLeaveEditAppearance: this.onLeaveEdit,
                        sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                        onShowViewerCard: this.props.onShowViewerCard
                    }))
                }, t
            }(r.Component),
            le = Object(s.a)(function(e) {
                return {
                    darkModeEnabled: Object(f.a)(e) === c.a.Dark,
                    followerModeDuration: e.chat.followerDuration,
                    followerModeEnabled: e.chat.followerMode,
                    lastUsedFollowerDurations: e.chat.lastUsedFollowerDurations,
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps,
                    slowModeEnabled: e.chat.slowMode,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    isLoggedIn: Object(g.d)(e)
                }
            }, function(e) {
                return Object(l.bindActionCreators)({
                    onChatHide: function() {
                        return v.H()
                    },
                    onChatUnhide: function() {
                        return v.K()
                    },
                    onFollowerModeDisable: function() {
                        return v.x()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return v.u(e)
                    },
                    onFollowerModeDurationPreferenceChange: function(e, t) {
                        return v.v(e, t)
                    },
                    onFollowerModeEnable: function() {
                        return v.C()
                    },
                    onModIconsDisable: function() {
                        return v.y()
                    },
                    onModIconsEnable: function() {
                        return v.D()
                    },
                    onSlowModeDisable: function() {
                        return v.z()
                    },
                    onSlowModeEnable: function() {
                        return v.E()
                    },
                    onTimestampsDisable: function() {
                        return v.B()
                    },
                    onTimestampsEnable: function() {
                        return v.G()
                    },
                    onShowViewerCard: b.d,
                    onThemeChanged: function(e) {
                        return Object(h.b)(e, void 0, !1)
                    },
                    login: function() {
                        return Object(m.f)(p.a.Chat)
                    }
                }, e)
            })(oe),
            ce = Object(o.e)(le),
            de = function(e) {
                return r.createElement(w.a, {
                    onToggle: e.onToggle
                }, r.createElement(O.v, {
                    icon: O._11.Gear,
                    ariaLabel: Object(E.d)("Chat settings", "ChatInput"),
                    "data-a-target": "chat-settings",
                    disabled: !!e.disabled
                }), r.createElement(O.p, {
                    direction: O.q.Top,
                    noTail: !0,
                    offsetY: "11px",
                    "data-a-target": "chat-settings-balloon"
                }, e.children))
            };
        n.d(t, "a", function() {
            return ce
        }), n.d(t, "b", function() {
            return de
        })
    },
    M5Tl: function(e, t) {},
    MApH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_BanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "createdAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\ncreatedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    MSFW: function(e, t) {},
    Mful: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "chatMessage"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ChatMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "authorName"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "authorColor"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "author"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "body"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "embeddedEmote"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "setID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "version"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsUsed"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\nfragment chatMessage on ChatMessage {\nid\nauthorName\nauthorColor\nauthor {\nid\nlogin\n}\nbody {\ncontent\nemotes {\n...embeddedEmote\n}\n}\nbadges {\nsetID\nversion\n}\nbitsUsed\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("0ImK").definitions)), e.exports = i
    },
    N5sm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_SetThreadSpamStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "spamInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "lastMarkedNotSpamAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "likelihood"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    NPzy: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_BlockedUsers"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 66
            }
        };
        n.loc.source = {
            body: "query Chat_BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    NZkJ: function(e, t) {},
    Ncf8: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, a) {
            return {
                type: e,
                id: Object(i.a)(t + "-mod"),
                userLogin: t,
                reason: n,
                duration: a
            }
        };
        var i = n("INp2")
    },
    NikC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            return void 0 === n && (n = !0),
                function(i) {
                    i(Object(r.s)(e)), n && Object(a.d)(e), t && Object(s.b)(e, t)
                }
        };
        var i, a = n("VAT8"),
            r = n("7enT"),
            s = n("xrVp");
        ! function(e) {
            e[e.UserMenu = 1] = "UserMenu", e[e.TypedCommand = 2] = "TypedCommand"
        }(i || (i = {}))
    },
    O0Qc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), t.h = function(e) {
            return "/ignore " + e
        }, t.j = function(e) {
            return "/unignore " + e
        }, t.i = function(e) {
            return "/mod " + e
        }, t.k = function(e) {
            return "/unmod " + e
        }, t.m = function(e) {
            return /^[\/]/.test(e)
        }, t.c = function() {
            return "/clear"
        }, t.d = function() {
            return "/followersoff"
        }, t.e = function() {
            return "/slowoff"
        }, t.f = function(e) {
            return "/followers " + e
        }, t.g = function() {
            return "/slow"
        }, t.b = function(e) {
            return "/color " + e
        }, t.n = function(e) {
            var t = e.trim().match(s);
            return t ? {
                recipientLogin: t[1] || null,
                body: t[2] || null
            } : null
        }, t.o = function(e) {
            var t = e.trim().match(o);
            return t ? {
                recipientLogin: t[1] || null,
                body: t[2] || null
            } : {
                recipientLogin: null,
                body: null
            }
        }, t.l = function(e, t) {
            var n = e.match(l);
            if (!n) return {
                handled: !1
            };
            var r = n[1],
                s = i.n.store.getState().chat.commandHandlers[n[1].toLowerCase()];
            if (!s) return {
                command: r,
                handled: !1
            };
            var o = (n[2] || "").trim(),
                c = {
                    channelLogin: t
                };
            try {
                return {
                    command: r,
                    handled: !0,
                    result: s(o, c)
                }
            } catch (e) {
                return a.warn("Exception thrown from chat command handler", {
                    command: n[1],
                    err: e
                }), {
                    handled: !1
                }
            }
        };
        var i = n("6sO2"),
            a = i.n.logger.withCategory("chat-commands"),
            r = "/unraid",
            s = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i,
            o = /^(\S+)?\s+(.+)?$/,
            l = /^[/.]([a-z0-9]+)(.+)?$/i
    },
    O1nh: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("+xm8"),
            s = n("f2i/"),
            o = n("Aj/L"),
            l = n("TToO"),
            c = n("U7vG"),
            d = n("6sO2"),
            u = n("7vx8"),
            p = n("oIkB"),
            m = n("CSlQ"),
            h = n("Odds"),
            g = n("iYmP"),
            f = n("7iNp"),
            v = n("7dPO"),
            b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hovered: !1
                    }, t.onClickAddFriend = function() {
                        t.props.onCreateFriendRequest(Object(p.a)({
                            targetID: t.props.channelID
                        }))
                    }, t.onClickUnfriend = function() {
                        t.props.onUnfriendUser(Object(p.a)({
                            targetID: t.props.channelID
                        }))
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(d.d)("Add Friend", "UserCard");
                    if (!this.props.isLoggedIn) return c.createElement(h.u, {
                        ariaLabel: e,
                        onClick: this.props.onLoginClick
                    }, e);
                    if (this.props.data.loading || this.props.data.error) return c.createElement(h._3, {
                        height: 30,
                        width: 60
                    });
                    if (!this.isFriend()) return c.createElement(h.u, {
                        onClick: this.onClickAddFriend
                    }, e);
                    var t = Object(d.d)("Unfriend", "UserCard"),
                        n = Object(d.d)("Friends", "UserCard");
                    return c.createElement(h.u, {
                        ariaLabel: t,
                        onClick: this.onClickUnfriend,
                        "data-a-target": "unfriend-button",
                        statusAlertText: t
                    }, n)
                }, t.prototype.isFriend = function() {
                    var e = this;
                    return !this.props.data.loading && !this.props.data.error && !!this.props.data.currentUser.friends.edges.find(function(t) {
                        return t.node.id === e.props.channelID
                    })
                }, t = l.__decorate([Object(m.c)("FriendButton"), Object(u.a)(f), Object(u.a)(v, {
                    name: "onUnfriendUser"
                }), Object(u.a)(g, {
                    name: "onCreateFriendRequest"
                })], t)
            }(c.Component),
            k = Object(i.a)(function(e) {
                return {
                    isLoggedIn: Object(o.d)(e)
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    onLoginClick: function() {
                        return s.f(r.a.FriendAdd)
                    }
                }, e)
            })(b);
        n.d(t, "a", function() {
            return k
        })
    },
    O9wU: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.viewer_list = 2] = "viewer_list", e[e.test = 3] = "test"
        }(i || (i = {}))
    },
    OLKT: function(e, t) {},
    OcEY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "bitsOffersFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsOffer"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bits"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "InlineFragment",
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BitsBundleOffer"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "price"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "discount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPromo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "includesVAT"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "promotion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 145
            }
        };
        n.loc.source = {
            body: "fragment bitsOffersFragment on BitsOffer {\nid\ntype\nbits\n... on BitsBundleOffer {\nprice\ndiscount\nisPromo\nurl\nincludesVAT\npromotion {\nid\ntype\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ouuk: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e || (e = navigator.userAgent), !!i.exec(e)
        };
        var i = /\scurse\/\d/
    },
    "P+j/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("BhyV"),
            s = n("RH2O"),
            o = n("7vx8"),
            l = n("RweG"),
            c = n("Ldv2"),
            d = n("Aj/L"),
            u = n("Tzcg"),
            p = n("6sO2"),
            m = ["4.99", "9.99", "24.99"],
            h = n("CSlQ"),
            g = n("CwIZ"),
            f = n("HW6M"),
            v = n("zCIC"),
            b = n("6BvN"),
            k = n("7LIQ"),
            y = n("J4ib"),
            S = n("Odds"),
            C = (n("9uSE"), function(e) {
                var t = {
                        "emote-picker__tab": !0
                    },
                    n = null,
                    r = null;
                if (e.channelTabVisible) {
                    var s = f(i.__assign({}, t, {
                        "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                        "emote-picker__tab--disabled": !e.channelTabEnabled
                    }));
                    n = a.createElement(S.Q, {
                        padding: {
                            x: 1
                        }
                    }, a.createElement("div", {
                        key: "ChannelTabLink",
                        id: "emote-picker__channel",
                        className: s,
                        onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                        "data-a-target": "emote-channel-tab"
                    }, a.createElement("span", null, Object(y.d)("Channel", "EmotePicker"))))
                }
                if (e.allTabVisible) {
                    var o = f(i.__assign({}, t, {
                        "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                    }));
                    r = a.createElement(S.Q, {
                        padding: {
                            x: 1
                        }
                    }, a.createElement("div", {
                        key: "allTabLink",
                        id: "emote-picker__all",
                        className: o,
                        onClick: e.selectAllTab,
                        "data-a-target": "emote-all-tab"
                    }, a.createElement("span", null, Object(y.d)("All", "EmotePicker"))))
                }
                return a.createElement(S._19, {
                    background: S.m.Base,
                    borderTop: !0,
                    className: "emote-picker__tabs-container"
                }, n, r)
            }),
            _ = n("YEG/"),
            E = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.subscribeTexts)
                        for (var t = 0; t <= this.props.plan.level; t++) {
                            var n = this.props.subscribeTexts[t];
                            n && (t < this.props.plan.level ? (e.push(a.createElement("span", {
                                key: "upsell-predicate:" + t
                            }, n)), e.push(a.createElement("span", {
                                key: "upsell-plus:" + t
                            }, " + "))) : this.props.plan.level > 0 ? e.push(a.createElement("strong", {
                                key: "upsell-strong-end:" + this.props.plan.level
                            }, n)) : e.push(a.createElement("span", {
                                key: "upsell-end:" + t
                            }, n)))
                        }
                    if (!this.props.plan.emoteSetID) return null;
                    var i = {
                            id: this.props.plan.emoteSetID,
                            emotes: this.props.plan.emotes
                        },
                        r = {};
                    return this.props.plan.price && (r.purchase = Object(p.d)("${price}", {
                        price: this.props.plan.price
                    }, "PlanUpsell")), a.createElement(S.V, {
                        className: "emote-picker-plan-upsell",
                        display: S.H.Flex,
                        flexDirection: S.J.Column,
                        alignItems: S.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(k.a, {
                        emoteSet: i,
                        locked: !0
                    }), a.createElement(S.V, {
                        margin: 1,
                        alignItems: S.c.Center
                    }, e), a.createElement(_.a, {
                        isSubbedToTier: !1,
                        tierPrice: r.purchase || "",
                        reportSubAction: this.props.reportSubAction,
                        url: this.props.plan.url
                    }))
                }, t
            }(a.Component),
            N = (n("Xo53"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.closeOnEsc = function(e) {
                        e.keyCode === b.a.Esc && n.props.toggleVisibility()
                    }, n.handleFilterChange = function(e) {
                        var t = e.target.value,
                            i = t.toLowerCase(),
                            a = n.filterAvailableUpsells(n.props.availableUpsells, i),
                            r = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                        n.setState({
                            filter: i,
                            filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                            filteredAvailableUpsells: a,
                            filteredOwnedChannelEmoteSets: r,
                            inputValue: t,
                            channelTabEnabled: r.length > 0 || a.length > 0
                        })
                    }, n.state = {
                        filter: "",
                        filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                        filteredAvailableUpsells: t.availableUpsells,
                        filteredAllEmoteSets: t.allEmoteSets,
                        inputValue: "",
                        channelTabSelected: !0,
                        channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                    }, n.selectAllTab = function() {
                        return n.setChannelTabSelected(!1)
                    }, n.selectChannelTab = function() {
                        return n.setChannelTabSelected(!0)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.gqlError)
                        if (this.state.filter.length > 0) {
                            var t = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                n = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                            this.setState({
                                filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                filteredAvailableUpsells: t,
                                filteredOwnedChannelEmoteSets: n,
                                channelTabEnabled: n.length > 0 || t.length > 0
                            })
                        } else this.setState({
                            filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                            filteredAvailableUpsells: e.availableUpsells,
                            filteredAllEmoteSets: e.allEmoteSets,
                            channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                        })
                }, t.prototype.render = function() {
                    return a.createElement(S.p, {
                        "data-a-target": "emote-picker",
                        direction: this.props.direction ? this.props.direction : S.q.TopRight,
                        size: this.props.size ? this.props.size : S.r.Medium,
                        noTail: !0,
                        show: !0
                    }, a.createElement(S.V, {
                        className: f("emote-picker")
                    }, this.renderTabContent(), a.createElement(S.V, {
                        className: "emote-picker__controls-container",
                        position: S._4.Relative
                    }, a.createElement(S._19, {
                        padding: 1,
                        borderTop: !0
                    }, a.createElement(S.R, {
                        autoFocus: !0,
                        onChange: this.handleFilterChange,
                        onKeyDown: this.closeOnEsc,
                        placeholder: Object(p.d)("Search for Emotes", "EmotePicker"),
                        type: S.S.Text,
                        value: this.state.inputValue
                    })), a.createElement(C, {
                        allTabVisible: this.props.allEmoteSets.length > 0,
                        channelTabEnabled: this.state.channelTabEnabled,
                        channelTabSelected: this.state.channelTabSelected,
                        channelTabVisible: !!this.props.channelTabVisible,
                        selectAllTab: this.selectAllTab,
                        selectChannelTab: this.selectChannelTab
                    }))))
                }, t.prototype.renderTabContent = function() {
                    var e = this,
                        t = [];
                    return this.props.gqlError ? t.push(a.createElement(S.V, {
                        key: "emotePicker-error"
                    }, a.createElement(S._23, {
                        color: S.F.Error
                    }, Object(p.d)("Unable to load available emotes.", "EmotePicker")))) : this.props.loading ? t.push(a.createElement(S.V, {
                        alignItems: S.c.Center,
                        display: S.H.Flex,
                        key: "loading",
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: S.U.Center
                    }, a.createElement(S.Z, {
                        key: "LoadingSpinner"
                    }))) : this.state.channelTabEnabled && this.state.channelTabSelected ? (this.state.filteredOwnedChannelEmoteSets.length > 0 && t.push(a.createElement(S.V, {
                        className: "emote-picker__content-block",
                        key: "ownedChannelEmoteSets",
                        padding: 1,
                        position: S._4.Relative
                    }, a.createElement(k.a, {
                        emoteSet: this.state.filteredOwnedChannelEmoteSets[0],
                        onClickEmote: this.props.onClickEmote,
                        locked: !1
                    }))), t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                        return a.createElement(S.V, {
                            className: "emote-picker__content-block",
                            key: "planUpsell:" + t.level,
                            padding: 1,
                            position: S._4.Relative
                        }, a.createElement(E, {
                            plan: t,
                            subscribeTexts: e.props.subscribeTexts,
                            reportSubAction: e.props.reportSubAction
                        }))
                    }))) : t = this.state.filteredAllEmoteSets.map(function(t) {
                        return a.createElement(S.V, {
                            key: "emoteGrid" + t.id,
                            position: S._4.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, a.createElement(k.a, {
                            emoteSet: t,
                            onClickEmote: e.props.onClickEmote,
                            locked: !1
                        }))
                    }), t.length > 0 ? a.createElement(v.b, {
                        className: "emote-picker__tab-content"
                    }, a.createElement(S.V, {
                        padding: 1
                    }, t)) : null
                }, t.prototype.filterEmoteSet = function(e, t) {
                    return e.filter(function(e) {
                        return e.token.toLowerCase().includes(t)
                    })
                }, t.prototype.setChannelTabSelected = function(e) {
                    this.setState({
                        channelTabSelected: e
                    })
                }, t.prototype.filterEmoteSets = function(e, t) {
                    for (var n = [], i = 0, a = e; i < a.length; i++) {
                        var r = a[i],
                            s = this.filterEmoteSet(r.emotes, t);
                        s.length > 0 && n.push({
                            id: r.id,
                            emotes: s
                        })
                    }
                    return n
                }, t.prototype.filterAvailableUpsells = function(e, t) {
                    for (var n = [], a = 0, r = e; a < r.length; a++) {
                        var s = r[a],
                            o = this.filterEmoteSet(s.emotes, t);
                        o.length > 0 && n.push(i.__assign({}, s, {
                            emotes: o
                        }))
                    }
                    return n
                }, t
            }(a.Component)),
            w = n("LYwx"),
            D = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.trackSubEvent = function(e) {
                        Object(g.b)(i.__assign({}, e, {
                            action: g.a.ClickCheckout,
                            channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                            channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "emote_picker",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: null
                        }))
                    };
                    var a = {
                        allEmoteSets: [],
                        availableUpsells: [],
                        channelTabVisible: !1,
                        gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                        gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                        subscribeTexts: [],
                        ownedChannelEmoteSets: [],
                        ownedSetIDs: new Set([])
                    };
                    return a = n.applyDataPropsToState(t, a), n.state = i.__assign({}, a), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                        gqlError: !0
                    });
                    else {
                        var t = this.applyDataPropsToState(e, this.state);
                        this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(i.__assign({}, t, {
                            gqlError: !1
                        }))
                    }
                }, t.prototype.render = function() {
                    return this.props.visible ? a.createElement(N, {
                        allEmoteSets: this.state.allEmoteSets,
                        availableUpsells: this.state.availableUpsells,
                        channelTabVisible: this.state.channelTabVisible,
                        gqlError: this.state.gqlError,
                        loading: this.state.gqlLoading,
                        onClickEmote: this.props.onClickEmote,
                        ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                        toggleVisibility: this.props.toggleVisibility,
                        subscribeTexts: this.state.subscribeTexts,
                        reportSubAction: this.trackSubEvent,
                        direction: this.props.direction,
                        size: this.props.size
                    }) : null
                }, t.prototype.checkDataLoaded = function(e) {
                    var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                        n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                    return t && n
                }, t.prototype.checkForContent = function(e) {
                    var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                        n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                    return t || n
                }, t.prototype.applyDataPropsToState = function(e, t) {
                    var n = i.__assign({}, t);
                    return e.emoteSetsData && e.emoteSetsData.emoteSets && (n.ownedSetIDs = new Set(e.emoteSetsData.emoteSets.map(function(e) {
                        return parseInt(e.id, 10)
                    })), n.allEmoteSets = Object(u.a)(e.emoteSetsData.emoteSets)), e.channelData && e.channelData.user && (n.availableUpsells = function(e, t) {
                        var n = [];
                        return t.forEach(function(t, a) {
                            t.emotes.length && t.emoteSetID && !e.has(parseInt(t.emoteSetID, 10)) && n.push(i.__assign({}, t, {
                                emotes: Object(u.b)(t.emotes),
                                level: a,
                                price: m[a]
                            }))
                        }), n
                    }(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.subscribeTexts = function(e) {
                        for (var t = [], n = 0; n < e.length; n++) {
                            var i = e[n];
                            0 === n && i.emotes.length > 1 ? t[n] = Object(p.d)("Unlock {numEmotes, number} Sub Emotes", {
                                numEmotes: i.emotes.length
                            }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(p.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes.length > 1 ? t[n] = Object(p.d)("{numEmotes, number} Extra {price} Sub Emotes", {
                                numEmotes: i.emotes.length,
                                price: m[n]
                            }, "assembleSubscribeTexts") : i.emotes.length && (t[n] = Object(p.d)("1 Extra ${price, number} Sub Emote", {
                                price: m[n]
                            }, "assembleSubscribeTexts"))
                        }
                        return t
                    }(e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = function(e, t) {
                        for (var n = [{
                                id: "0",
                                emotes: []
                            }], i = 0, a = t; i < a.length; i++) {
                            var r = a[i];
                            r.emoteSetID && e.has(parseInt(r.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(u.b)(r.emotes)))
                        }
                        return n[0].emotes.length ? n : []
                    }(n.ownedSetIDs, e.channelData.user.subscriptionProducts)), n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
                }, t.prototype.subscriptionProductHasEmotes = function(e) {
                    return void 0 !== e.emoteSetID && e.emotes.length > 0
                }, t
            }(a.Component),
            T = Object(r.compose)(Object(s.a)(function(e) {
                return {
                    currentUserID: e.session.user && e.session.user.id,
                    isLoggedIn: Object(d.d)(e)
                }
            }), Object(o.a)(w, {
                name: "channelData",
                skip: function(e) {
                    return !e.channelOwnerID
                },
                options: function(e) {
                    return {
                        variables: {
                            channelOwnerID: e.channelOwnerID
                        }
                    }
                }
            }), Object(l.a)([{
                topic: function(e) {
                    return "user-subscribe-events-v1." + e.currentUserID
                },
                mapMessageTypesToProps: {
                    "*": "subscriptionInfo"
                },
                skip: function(e) {
                    return !e.currentUserID
                }
            }]), Object(h.c)("EmotePicker"), Object(c.a)())(D);
        n.d(t, "a", function() {
            return T
        })
    },
    P0T5: function(e, t, n) {
        "use strict";

        function i(e) {
            d.n.tracking.track(u.SpadeEventType.WhisperThreadMod, {
                conversation_id: e.threadID,
                action: e.action
            })
        }

        function a(e) {
            return c.__awaiter(this, void 0, void 0, function() {
                var t;
                return c.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, o()];
                        case 1:
                            return t = n.sent(), d.n.tracking.track(u.SpadeEventType.WhisperIgnoreUser, {
                                ui_context: e.context,
                                from_login: t && t.login,
                                ignored_login: e.targetUserLogin,
                                reason: e.reason || l.Other,
                                source: e.source
                            }), [2]
                    }
                })
            })
        }

        function r(e, t) {
            return c.__awaiter(this, void 0, void 0, function() {
                var n;
                return c.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, o()];
                        case 1:
                            return n = i.sent(), d.n.tracking.track(u.SpadeEventType.WhisperThreadMod, {
                                conversation_id: e,
                                action: t,
                                login: n && n.login
                            }), [2]
                    }
                })
            })
        }

        function s(e) {
            d.n.tracking.track(u.SpadeEventType.WhisperAllThreadsMod, {
                action: e
            })
        }

        function o() {
            return c.__awaiter(this, void 0, void 0, function() {
                var e, t, n;
                return c.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            e = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, d.n.apollo.client.query({
                                query: p
                            })];
                        case 2:
                            return e = i.sent(), [3, 4];
                        case 3:
                            return t = i.sent(), d.i.error(t, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                        case 4:
                            return n = e && e.data && e.data.currentUser, [2, n]
                    }
                })
            })
        }
        n.d(t, "a", function() {
            return g
        }), t.j = function() {
            s(m.MarkAllRead)
        }, t.h = function() {
            s(m.EnableDoNotDisturb)
        }, t.g = function() {
            s(m.DisableDoNotDisturb)
        }, t.l = function(e, t) {
            a({
                context: t,
                targetUserLogin: e,
                reason: l.Spam,
                source: "conversations_button"
            })
        }, t.o = function(e) {
            r(e, f.MarkNotSpam)
        }, t.n = function(e) {
            r(e, f.Archive)
        }, t.k = function(e) {
            i({
                threadID: e,
                action: h.Mute
            })
        }, t.m = function(e) {
            i({
                threadID: e,
                action: h.Unmute
            })
        }, t.i = function(e) {
            i({
                threadID: e,
                action: h.Expand
            })
        }, t.e = function(e) {
            i({
                threadID: e,
                action: h.Collapse
            })
        }, t.d = function(e) {
            i({
                threadID: e,
                action: h.Close
            })
        }, t.b = function(e) {
            i({
                threadID: e,
                action: h.Archive
            })
        }, t.f = function(e) {
            d.n.tracking.track(u.SpadeEventType.WhisperThreadCreate, {
                conversation_id: e.threadID,
                target_login: e.targetUserlogin,
                source: "search_target_result",
                search_result_rank: e.searchResultRank
            })
        }, t.c = function(e) {
            d.n.tracking.track(u.SpadeEventType.WhisperSearchClick, {
                query: e.searchQuery,
                source: "conversation_list",
                rank: e.searchResultRank,
                is_conversation: e.isConversation
            })
        }, t.q = function(e) {
            return c.__awaiter(this, void 0, void 0, function() {
                var t;
                return c.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, o()];
                        case 1:
                            return t = n.sent(), d.n.tracking.track(u.SpadeEventType.WhisperSent, {
                                to: e.targetUserLogin,
                                from: t && t.login,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID,
                                availability: t && t.availability
                            }), [2]
                    }
                })
            })
        }, t.p = function(e) {
            return c.__awaiter(this, void 0, void 0, function() {
                var t;
                return c.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, o()];
                        case 1:
                            return t = n.sent(), d.n.tracking.track(u.SpadeEventType.WhisperReceived, {
                                to: t && t.login,
                                from: e.targetUserLogin,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID
                            }), [2]
                    }
                })
            })
        };
        var l, c = n("TToO"),
            d = n("6sO2"),
            u = n("vH/s"),
            p = n("CCVP");
        n.n(p);
        ! function(e) {
            e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
        }(l || (l = {}));
        var m;
        ! function(e) {
            e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
        }(m || (m = {}));
        var h;
        ! function(e) {
            e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
        }(h || (h = {}));
        var g;
        ! function(e) {
            e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
        }(g || (g = {}));
        var f;
        ! function(e) {
            e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
        }(f || (f = {}))
    },
    PPK2: function(e, t) {},
    PqoY: function(e, t) {},
    QCOJ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Embed: "embed",
            Web: "web"
        }
    },
    QFW6: function(e, t, n) {
        "use strict";
        var i = n("6sO2"),
            a = n("vH/s"),
            r = "public";
        n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return o
        });
        var s = function(e) {
                return {
                    channel: e.channelLogin,
                    is_host_mode: e.isHostMode,
                    is_using_web_sockets: !0,
                    room_type: r
                }
            },
            o = function(e) {
                i.m.track(a.SpadeEventType.ChatRoomJoined, s(e))
            }
    },
    QMHY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatRoom_AutohostPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "query ChatRoom_AutohostPrompt($login: String!) {\ncurrentUser {\nid\n}\nuser(login: $login) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QNxL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SharePurchaseTokenInChat"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SharePurchaseTokenInChatInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sharePurchaseTokenInChat"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation SharePurchaseTokenInChat($input:SharePurchaseTokenInChatInput!) {\nsharePurchaseTokenInChat(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QPF3: function(e, t, n) {
        "use strict";
        t.a = function() {
            if (i.b) return +window.getComputedStyle(i.b).getPropertyValue("width").replace("px", "");
            return 0
        };
        var i = n("1Mw/")
    },
    QRuM: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("U7vG"),
            s = n("6sO2");
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(i || (i = {}));
        var o = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = s.b.get(this.props.name, i.Off);
                    return e === i.On || e === i.StaffOnly && this.props.isStaff ? r.Children.only(this.props.children) : null
                }, t
            }(r.Component),
            l = o;
        n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {
            return o
        }), n.d(t, "b", function() {
            return l
        })
    },
    "QU+n": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "badge"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Badge"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "version"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "title"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image1x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "NORMAL"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image2x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "DOUBLE"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image4x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "QUADRUPLE"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clickAction"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clickURL"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 170
            }
        };
        n.loc.source = {
            body: "fragment badge on Badge {\nid\nsetID\nversion\ntitle\nimage1x: imageURL(size: NORMAL)\nimage2x: imageURL(size: DOUBLE)\nimage4x: imageURL(size: QUADRUPLE)\nclickAction\nclickURL\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QsiC: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PinnedCheer_Cheers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "top"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isTopEnabled"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 275
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery PinnedCheer_Cheers($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\ntop {\n...chatMessage\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\nsettings {\nisRecentEnabled\nisTopEnabled\nrecentTimeoutMs\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("Mful").definitions)), e.exports = i
    },
    RbGx: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("U7vG"),
            a = (n.n(i), n("mbxv")),
            r = function(e) {
                var t = Object.keys(e.badgesToRender).map(function(t) {
                    var n = e.badgesToRender[t],
                        r = e.badgeSets.getBadge(t, n);
                    return null === r ? null : i.createElement(a.a, {
                        key: r.setID + "/" + r.version,
                        badge: r
                    })
                }).filter(function(e) {
                    return null !== e
                });
                return i.createElement("span", null, t)
            }
    },
    RkXA: function(e, t) {},
    RweG: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        i.unsubscribers = {};
                        var a = {};
                        return e.map(function(e) {
                            e.skip && e.skip(t) || (a[i.getTopic(e.topic, t)] = {
                                isSubscribing: !0
                            })
                        }), i.state = {
                            status: a,
                            messages: {}
                        }, i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        var t = this;
                        e.map(function(e) {
                            if (!e.skip || !e.skip(t.props)) {
                                var n = t.getTopic(e.topic, t.props);
                                t.unsubscribers[n] = s.j.subscribe({
                                    topic: n,
                                    success: function() {
                                        t.setState(function(e) {
                                            return {
                                                status: a.__assign({}, e.status, (t = {}, t[n] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        t.setState(function(t) {
                                            return {
                                                status: a.__assign({}, t.status, (i = {}, i[n] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, i))
                                            };
                                            var i
                                        })
                                    },
                                    onMessage: function(n) {
                                        e.mapMessageTypesToProps[n.type || ""] ? t.setState(function(t) {
                                            return {
                                                messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps[n.type || ""]] = n, i))
                                            };
                                            var i
                                        }) : e.mapMessageTypesToProps["*"] && t.setState(function(t) {
                                            return {
                                                messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = n, i))
                                            };
                                            var i
                                        })
                                    }
                                })
                            }
                        })
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = this,
                            i = {},
                            r = {};
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t)) {
                                var o = n.getTopic(e.topic, t);
                                i[o] || (i[o] = {
                                    isSubscribing: !0
                                }), n.unsubscribers[o] ? r[o] = n.unsubscribers[o] : r[o] = s.j.subscribe({
                                    topic: o,
                                    success: function() {
                                        n.setState(function(e) {
                                            return {
                                                status: a.__assign({}, e.status, (t = {}, t[o] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        n.setState(function(t) {
                                            return {
                                                status: a.__assign({}, t.status, (n = {}, n[o] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, n))
                                            };
                                            var n
                                        })
                                    },
                                    onMessage: function(t) {
                                        e.mapMessageTypesToProps[t.type || ""] ? n.setState(function(n) {
                                            return {
                                                messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps[t.type || ""]] = t, i))
                                            };
                                            var i
                                        }) : e.mapMessageTypesToProps["*"] && n.setState(function(n) {
                                            return {
                                                messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = t, i))
                                            };
                                            var i
                                        })
                                    }
                                })
                            }
                        }), Object.keys(this.unsubscribers).forEach(function(e) {
                            r[e] || n.unsubscribers[e]()
                        }), this.unsubscribers = r, this.setState(function(e) {
                            return {
                                status: a.__assign({}, e.status, i)
                            }
                        })
                    }, i.prototype.componentWillUnmount = function() {
                        var e = this;
                        Object.keys(this.unsubscribers).map(function(t) {
                            return e.unsubscribers[t]()
                        })
                    }, i.prototype.render = function() {
                        var e = {
                            pubsub: {
                                messages: this.state.messages,
                                status: this.state.status
                            }
                        };
                        return r.createElement(t, a.__assign({}, this.props, e))
                    }, i.prototype.getTopic = function(e, t) {
                        return "string" == typeof e ? e : e(t)
                    }, i
                }(r.Component)
            }
        }
        var a = n("TToO"),
            r = n("U7vG"),
            s = n("6sO2");
        n.d(t, "a", function() {
            return i
        })
    },
    S20p: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ShareResub_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "resubNotification"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "months"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "query Chat_ShareResub_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nself {\nresubNotification {\nid\nmonths\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    SX5d: function(e, t) {},
    SZoP: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("U7vG"),
            a = (n.n(i), /^[\x00-\x7F]*$/),
            r = function(e, t, n) {
                return void 0 === n && (n = !1), t && e && ! function(e) {
                    return a.test(e)
                }(t) ? n ? t + " (" + e + ")" : i.createElement("span", null, t, " ", i.createElement("span", {
                    className: "intl-login"
                }, "(" + e + ")")) : t || (e || "")
            }
    },
    TVUY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "currentUser"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "availability"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "activity"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Watching"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "user"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Streaming"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Playing"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 204
            }
        };
        n.loc.source = {
            body: "fragment currentUser on User {\nid\nlogin\ndisplayName\navailability\nactivity {\ntype\n... on Watching {\nuser {\ndisplayName\n}\n}\n... on Streaming {\nstream {\ngame {\nname\n}\n}\n}\n... on Playing {\ngame {\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Ti/Y": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissRitualTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation DismissNewChatterToken($input: DismissRitualTokenInput!) {\ndismissRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("j/3B").definitions)), e.exports = i
    },
    TnJK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            DarkMode: "darkMode",
            FollowerDuration: "followerDuration",
            FollowerMode: "followerMode",
            HideChat: "hideChat",
            ShowMessageFlags: "showMessageFlags",
            ShowModActions: "showModerationActions",
            ShowModIcons: "showModIcons",
            ShowTimestamps: "showTimestamps",
            SlowMode: "slowMode"
        }
    },
    Tur5: function(e, t, n) {
        "use strict";
        var i = n("bgpf");
        n.d(t, "RitualTokenMutationErrors", function() {
            return i.a
        }), n.d(t, "RitualTokenStatus", function() {
            return i.b
        }), n.d(t, "RitualTokenType", function() {
            return i.c
        });
        var a = n("AQmT"),
            r = (n.n(a), n("xfb5")),
            s = (n.n(r), n("6vcJ"));
        n.n(s)
    },
    Tzcg: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return c
        }), n.d(t, "c", function() {
            return d
        }), n.d(t, "a", function() {
            return p
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        });
        var i = n("TToO"),
            a = n("Bir6"),
            r = n("nEoF"),
            s = {
                "^B-?\\)$": "B)",
                "^:-?[z|Z|\\|]$": ":|",
                "^:-?\\)$": ":)",
                "^:-?\\($": ":(",
                "^:-?(p|P)$": ":P",
                "^;-?(p|P)$": ";P",
                "^:-?[\\\\/]$": ":/",
                "^;-?\\)$": ";)",
                "^R-?\\)$": "R)",
                "^:>$": ":>",
                "^[oO](_|\\.)[oO]$": "O_o",
                "^:-?D$": ":D",
                "^:-?(o|O)$": ":O",
                "^>\\($": ">(",
                "^:-?(?:7|L)$": ":7",
                "^:-?(S|s)$": ":S",
                "^#-?[\\\\/]$": "#/",
                "^<\\]$": "<]",
                "^<3$": "<3",
                "^&lt;3$": "<3",
                "^&lt;\\]$": "<]",
                "^&gt;\\($": ">("
            },
            o = ["1.0", "2.0", "3.0"],
            l = new Set([457, 33, 42, 0]),
            c = function(e) {
                return e.map(function(e) {
                    var t = m(e.token),
                        n = s[t] || t,
                        a = o.reduce(function(t, n) {
                            var i = t.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x");
                            return "3.0" !== n && (i = i.concat(", ")), i
                        }, "");
                    return i.__assign({
                        displayName: n,
                        srcSet: a
                    }, e)
                })
            },
            d = function(e) {
                var t = m(e);
                return s[t] || t
            },
            u = function(e) {
                return e.slice().sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            },
            p = function(e) {
                for (var t = [], n = [], i = 0, a = e; i < a.length; i++) {
                    var r = a[i];
                    l.has(parseInt(r.id, 10)) ? t.push({
                        id: r.id,
                        emotes: c(u(r.emotes))
                    }) : n.push({
                        id: r.id,
                        emotes: c(u(r.emotes))
                    })
                }
                return n.concat(t)
            },
            m = function(e) {
                if (! function(e) {
                        return /[\|\\\^\$\*\+\?\:\#]/.test(e)
                    }(e)) return e;
                return "^" + e.replace(/\\(?=[&;:])/g, "") + "$"
            },
            h = function(e, t) {
                var n = r.b,
                    i = [],
                    s = [],
                    o = [],
                    l = new RegExp("^" + Object(a.a)(t), "i");
                return e.forEach(function(e) {
                    n[e.token] ? o.push(e) : e.token.match(l) ? i.push(e) : s.push(e)
                }), i.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), s.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), o.sort(function(e, t) {
                    return n[t.token].count - n[e.token].count
                }), o.concat(i).concat(s)
            },
            g = function(e) {
                var t = {};
                return e.filter(function(e) {
                    return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                })
            }
    },
    UMQJ: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_Channels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sourceChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "sourceChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sourceChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 256
            }
        };
        n.loc.source = {
            body: "query RaidNotification_Channels($sourceChannelID: ID! $targetChannelID: ID!) {\nsourceChannel: user(id: $sourceChannelID) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\ntargetChannel: user(id: $targetChannelID) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Umoc: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), n.d(t, "c", function() {
            return d
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            s = n("TnJK"),
            o = n("QFW6"),
            l = function(e) {
                a.m.track(r.SpadeEventType.ChatSettingsOpened, Object(o.a)(e))
            },
            c = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    setting_name: e.settingName,
                    new_value: e.newValue.toString()
                });
                a.m.track(r.SpadeEventType.ChatSettingsChanged, t)
            },
            d = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    setting_name: s.a.FollowerDuration,
                    new_value: e.newValue.toString(),
                    follower_mode_on: e.followerModeOn
                });
                a.m.track(r.SpadeEventType.ChatSettingsChanged, t)
            }
    },
    UzRK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), t.c = function(e) {
            switch (e) {
                case 0:
                    return Object(i.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                case 10:
                    return Object(i.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                case 30:
                    return Object(i.d)("30 minutes", "FollowersOnlyLabel");
                case 60:
                    return Object(i.d)("1 hour", "FollowersOnlyLabel");
                case 1440:
                    return Object(i.d)("1 day", "FollowersOnlyLabel");
                case 10080:
                    return Object(i.d)("1 week", "FollowersOnlyLabel");
                case 43200:
                    return Object(i.d)("1 month", "FollowersOnlyLabel");
                case 129600:
                    return Object(i.d)("3 months", "FollowersOnlyLabel");
                default:
                    return i.i.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
            }
        }, t.d = function(e) {
            switch (e) {
                case 0:
                    return Object(i.d)("0 min", "FollowersOnlyShorthand");
                case 10:
                    return Object(i.d)("10 min", "FollowersOnlyShorthand");
                case 30:
                    return Object(i.d)("30 min", "FollowersOnlyShorthand");
                case 60:
                    return Object(i.d)("1 hr", "FollowersOnlyShorthand");
                case 1440:
                    return Object(i.d)("1 day", "FollowersOnlyShorthand");
                case 10080:
                    return Object(i.d)("1 wk", "FollowersOnlyShorthand");
                case 43200:
                    return Object(i.d)("1 mo", "FollowersOnlyShorthand");
                case 129600:
                    return Object(i.d)("3 mo", "FollowersOnlyShorthand");
                default:
                    return Object(i.d)("custom", "FollowersOnlyShorthand")
            }
        };
        var i = n("6sO2"),
            a = 30,
            r = [0, 10, 30, 60, 1440, 10080, 43200, 129600]
    },
    VSa1: function(e, t) {},
    Vaxm: function(e, t) {},
    VkpB: function(e, t) {},
    VsL1: function(e, t, n) {
        "use strict";

        function i() {
            var e = r.k.get(o, {});
            return a.__assign({
                lastUsedFollowerDurations: {},
                showAutoModActions: !0,
                showMessageFlags: !0,
                showModerationActions: !0,
                showModIcons: !1,
                showTimestamps: !1,
                zachModeStatus: s
            }, e)
        }
        var a = n("TToO"),
            r = n("6sO2"),
            s = "control";
        t.a = i, t.b = function(e, t) {
            var n = i();
            n[e] = t, r.k.set(o, n)
        }, t.c = function(e, t) {
            var n = i();
            n.lastUsedFollowerDurations[e] = t, r.k.set(o, n)
        };
        var o = "chatSettings"
    },
    W266: function(e, t) {},
    WIs4: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.mutator = function(e, t) {
                            return i.options.mutator(e, t)
                        }, i.typesChanged = function(e) {
                            if (e.types && !i.options.types || !e.types && i.options.types) return !0;
                            if (e.types && i.options.types) {
                                if (e.types.length !== i.options.types.length) return !0;
                                var t = new Set(i.options.types);
                                return e.types.every(function(e) {
                                    return t.has(e)
                                })
                            }
                            return !1
                        }, i.options = e(t), i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.skip !== this.options.skip && (n.skip ? this.unsubscribe() : this.subscribe(n)), n.skip || (n.topic !== this.options.topic || n.type !== this.options.type || this.typesChanged(n)) && (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, i.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, i.prototype.render = function() {
                        return r.createElement(t, a.__assign({}, this.props))
                    }, i.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(s.j)({
                            query: e.query,
                            variables: e.variables,
                            topic: e.topic,
                            type: e.type,
                            types: e.types,
                            mutator: this.mutator,
                            skipMessage: e.skipMessage
                        })
                    }, i.prototype.unsubscribe = function() {
                        this.unsubscriber && (this.unsubscriber(), this.unsubscriber = null)
                    }, i
                }(r.Component)
            }
        }
        var a = n("TToO"),
            r = n("U7vG"),
            s = n("HZww");
        n.d(t, "a", function() {
            return i
        })
    },
    WVx7: function(e, t, n) {
        "use strict";

        function i(e) {
            return u.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, r;
                return u.__generator(this, function(s) {
                    switch (s.label) {
                        case 0:
                            if (t = h.b.get("bits_truex_partner_hash", ""), !(n = h.b.get("bits_truex_api_url", "")) || !t) return h.i.warn("Truex API info missing from dynamic settings"), [2, b.Error];
                            s.label = 1;
                        case 1:
                            return s.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                        case 2:
                            return (i = s.sent()).ok ? [4, i.json()] : [3, 4];
                        case 3:
                            if ((a = s.sent()) && Array.isArray(a) && a.length) return [2, b.Available];
                            s.label = 4;
                        case 4:
                            return [2, b.Unavailable];
                        case 5:
                            return r = s.sent(), h.i.warn("Failed checking ad availability from TrueX, probably due to AdBlock", r), [2, b.AdBlocked];
                        case 6:
                            return [2]
                    }
                })
            })
        }

        function a(e) {
            return {
                adModalOpen: Object(c.b)(e, E),
                isLoggedIn: Object(d.d)(e)
            }
        }

        function r(e) {
            return {
                showWatchAdModal: function(t) {
                    return e(Object(l.d)(E, t))
                }
            }
        }
        var s, o = n("RH2O"),
            l = n("V5M+"),
            c = n("Iw4B"),
            d = n("Aj/L"),
            u = n("TToO"),
            p = n("U7vG"),
            m = n("2KeS"),
            h = n("6sO2"),
            g = n("+8VM"),
            f = n("7vx8"),
            v = n("oIkB");
        ! function(e) {
            e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
        }(s || (s = {}));
        var b, k = n("4JjK"),
            y = n("/LBW"),
            S = n("Odds"),
            C = n("zzpv"),
            _ = (n("x583"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                        return u.__awaiter(t, void 0, void 0, function() {
                            var t, n, i, a, r;
                            return u.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        if (e.origin !== window.location.origin) return [2];
                                        if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                        switch (t.type) {
                                            case k.a.Ready:
                                                return [3, 1];
                                            case k.a.RequestAd:
                                                return [3, 2];
                                            case k.a.Dimensions:
                                                return [3, 3];
                                            case k.a.OnStart:
                                                return [3, 4];
                                            case k.a.OnCredit:
                                                return [3, 5];
                                            case k.a.OnClose:
                                            case k.a.OnFinish:
                                            case k.a.LimitReached:
                                            case k.a.Adblock:
                                            case k.a.OnError:
                                                return [3, 9]
                                        }
                                        return [3, 10];
                                    case 1:
                                        return n = {
                                            msgSrc: "wateb-ad-modal",
                                            tuid: this.props.tuid
                                        }, e.source.postMessage(n, "*"), [2];
                                    case 2:
                                        try {
                                            if (!(i = JSON.parse(t.activityJSON))) return [2];
                                            Object(y.g)({
                                                campaignID: i.campaign_id.toString(),
                                                requestID: t.requestID,
                                                requestMethod: this.props.requestRef
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 3:
                                        return t.height && t.width && this.setState({
                                            customDimensions: {
                                                height: t.height,
                                                width: t.width
                                            }
                                        }), [3, 10];
                                    case 4:
                                        try {
                                            if (!(i = JSON.parse(t.activityJSON))) return [2];
                                            Object(y.f)({
                                                requestID: t.requestID,
                                                adblock: !1,
                                                campaignID: i.campaign_id.toString()
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 5:
                                        return o.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(v.a)({
                                            args: t.engagement.signature_argument_string,
                                            signature: t.engagement.signature,
                                            trueXAd: {
                                                creativeID: t.engagement.ad.creative_id,
                                                campaignID: t.engagement.ad.campaign_id,
                                                name: t.engagement.ad.name,
                                                currencyAmount: t.engagement.ad.currency_amount
                                            },
                                            targetID: this.props.channelID
                                        }))];
                                    case 6:
                                        return a = o.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(a.data.redeemTrueXAd.grantedBits), [3, 8];
                                    case 7:
                                        return r = o.sent(), h.i.warn("Error while redeeming bits for truex ad", r), this.props.onError && this.props.onError(s.Unknown), [3, 8];
                                    case 8:
                                        return [3, 10];
                                    case 9:
                                        return this.props.onError && (t.type === k.a.LimitReached ? this.props.onError(s.LimitReached) : t.type === k.a.Adblock ? this.props.onError(s.Adblock) : t.type === k.a.OnError ? this.props.onError(s.Unknown) : this.hasAwarded || this.props.onError(s.ExitEarly)), this.props.closeModal(), [3, 10];
                                    case 10:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.messageHandler)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.messageHandler)
                }, t.prototype.render = function() {
                    return p.createElement(S._19, {
                        background: S.m.Base
                    }, p.createElement("div", {
                        className: "t-watch-ads-modal",
                        style: this.state.customDimensions
                    }, p.createElement(g.a, null), p.createElement("iframe", {
                        src: "/products/bits/ad"
                    })))
                }, t = u.__decorate([Object(f.a)(C, {
                    name: "redeemTrueXAd"
                })], t)
            }(p.Component)),
            E = Object(o.a)(null, function(e) {
                return Object(m.bindActionCreators)({
                    closeModal: l.c
                }, e)
            })(_),
            N = n("HW6M"),
            w = n("BhyV"),
            D = n("jF7o"),
            T = n("w9tK"),
            I = n("zCIC");
        ! function(e) {
            e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
        }(b || (b = {}));
        var O, M = function(e) {
                var t = null;
                return e.disableWatchAd && (t = Object(h.d)("Try again later", "Bits--WatchAdOffer")), p.createElement(S._19, {
                    className: "bits-buy-card__offer-row",
                    display: S.H.Flex,
                    flexShrink: 0,
                    borderBottom: !0,
                    justifyContent: S.U.Between,
                    flexWrap: S.K.NoWrap,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, p.createElement(S.V, {
                    padding: {
                        right: 4
                    }
                }, p.createElement("strong", null, Object(h.d)("Get {minBitsCount} or more Bits by watching short ads", {
                    minBitsCount: e.minPayout
                }, "Bits--WatchAdOffer"))), p.createElement(S.V, {
                    flexShrink: 0,
                    display: S.H.Flex,
                    flexDirection: S.J.Column,
                    alignItems: S.c.End
                }, p.createElement(S.u, {
                    type: S.z.Hollow,
                    "data-a-target": "bits-watch-ad",
                    onClick: e.onWatchAdClick,
                    disabled: e.disableWatchAd
                }, Object(h.d)("Watch Ad", "Bits--WatchAdOffer")), t && p.createElement(S.V, {
                    className: "bits-buy-card__sub-text",
                    alignSelf: S.d.Stretch,
                    textAlign: S._24.Center,
                    margin: {
                        top: .5
                    }
                }, t)))
            },
            x = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
            U = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        enableWatchAd: !0
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return u.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, i(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), Object(y.e)({
                                        channel: this.props.channelLogin,
                                        channelID: this.props.channelID,
                                        available: e === b.Available
                                    }), e !== b.Available && e !== b.AdBlocked && this.setState({
                                        enableWatchAd: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return x.test(navigator.userAgent) ? null : p.createElement(M, u.__assign({}, this.props, {
                        disableWatchAd: !this.state.enableWatchAd
                    }))
                }, t
            }(p.Component),
            R = n("jxGs"),
            F = n("3iBR"),
            L = n("iydZ"),
            j = n("ZJYd"),
            A = n("CFVp"),
            B = n("qe65"),
            P = (n("OLKT"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleBuyClick = function(e) {
                        var n = t.props.channelID || "",
                            i = Object(j.b)({
                                trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                channelID: n,
                                purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                bitsAmount: e.currentTarget.dataset.bitsAmount,
                                closeAllBits: t.props.closeAllBits,
                                location: t.props.location
                            });
                        i && (t.props.onBuyPopupClose(i), t.props.onClose())
                    }, t
                }
                return u.__extends(t, e), t.prototype.render = function() {
                    if (this.props.offer.type === R.a) {
                        if (!this.props.channelLogin) return null;
                        var e = this.props.currentUserSHA || "";
                        return p.createElement(U, {
                            key: "wateb",
                            minPayout: this.props.offer.bits,
                            onWatchAdClick: this.props.handleWatchAdClick,
                            truexUserID: e,
                            channelID: this.props.channelID || "",
                            channelLogin: this.props.channelLogin
                        })
                    }
                    var t = null;
                    Object(j.c)(this.props.offer) ? t = p.createElement(S.V, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, p.createElement(S._23, {
                        type: S._28.Strong,
                        fontSize: S.L.Size6
                    }, Object(h.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(j.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === R.c && (t = p.createElement(S.V, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, p.createElement(S._23, {
                        type: S._28.Strong,
                        fontSize: S.L.Size6
                    }, Object(h.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))));
                    var n = null;
                    this.props.offer.discount && (n = p.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(h.d)("{percentOff,number,percent} discount", {
                        percentOff: this.props.offer.discount
                    }, "Bits--BuyCard")));
                    var i = null;
                    (Object(j.c)(this.props.offer) || Object(j.e)(this.props.offer)) && (i = p.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(h.d)("one per account", "Bits--BuyCard")));
                    var a = this.props.isLastRow ? S._19 : S.V;
                    return p.createElement(a, {
                        className: "bits-buy-card-offer-row",
                        flexShrink: 0,
                        display: S.H.Flex,
                        justifyContent: S.U.Center,
                        borderBottom: this.props.isLastRow,
                        flexDirection: S.J.Column,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, t, p.createElement(S.V, {
                        display: S.H.Flex,
                        justifyContent: S.U.Between,
                        alignItems: S.c.Center
                    }, p.createElement(S.V, {
                        flexGrow: 1
                    }, p.createElement(S._23, {
                        type: S._28.H5,
                        color: S.F.Base,
                        bold: !0
                    }, this.props.offer.bits, " Bits"), this.getAvailableTiers(this.props.offer.bits)), p.createElement(S.V, {
                        flexShrink: 0,
                        display: S.H.Flex,
                        flexDirection: S.J.Column,
                        alignItems: S.c.End
                    }, p.createElement(S.u, {
                        onClick: this.handleBuyClick,
                        "data-purchase-url": this.props.offer.url,
                        "data-bits-amount": this.props.offer.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                    }, this.props.offer.price), (n || i) && p.createElement(S.V, {
                        alignSelf: S.d.Stretch,
                        textAlign: S._24.Right,
                        margin: {
                            top: .5
                        }
                    }, n, i))))
                }, t.prototype.getAvailableTiers = function(e) {
                    var t = this.props.bitsConfig.indexedActions[F.f];
                    t || (t = Object(A.b)());
                    var n = t.orderedTiers.filter(function(t) {
                        return t.bits <= e
                    }).reverse();
                    return p.createElement(S.V, {
                        padding: {
                            top: .5
                        },
                        className: "bits-buy-card-offer-row__tier-bits-images"
                    }, n.map(function(e) {
                        return p.createElement(B.a, {
                            key: e.bits,
                            sources: Object(L.b)(e, 2, !1)
                        })
                    }))
                }, t
            }(p.Component)),
            V = (n("sgUC"), function(e) {
                var t = [],
                    n = [],
                    i = null;
                return e.offers.forEach(function(a, r) {
                    var s = p.createElement(P, {
                            key: a.id,
                            offer: a,
                            isLastRow: r + 1 < e.offers.length,
                            bitsConfig: e.bitsConfig,
                            channelID: e.channelID,
                            channelLogin: e.channelLogin,
                            currentUserSHA: e.currentUserSHA,
                            location: e.location,
                            onClose: e.onClose,
                            onBuyPopupClose: e.onBuyPopupClose,
                            handleWatchAdClick: e.handleWatchAdClick,
                            closeAllBits: e.closeAllBits,
                            trackBitsCardInteraction: e.trackBitsCardInteraction
                        }),
                        o = Object(j.d)(a),
                        l = Object(j.c)(a),
                        c = a.type === R.a;
                    l && !e.hidePromos ? t.push(s) : o && !l ? t.push(s) : c && !e.hideWateb ? i = s : c || o || n.push(s)
                }), e.fullsize ? p.createElement(S.V, {
                    className: "bits-buy-card-offers__full-size",
                    flexGrow: 1,
                    flexWrap: S.K.NoWrap,
                    display: S.H.Flex,
                    flexDirection: S.J.Column
                }, i, t, n) : p.createElement(I.b, {
                    className: "bits-buy-card-offers__scroll-view"
                }, p.createElement(S.V, {
                    flexGrow: 1,
                    flexWrap: S.K.NoWrap,
                    display: S.H.Flex,
                    flexDirection: S.J.Column
                }, i, t, n))
            }),
            H = function(e) {
                var t = null;
                e.pricesIncludeVAT && (t = p.createElement(S._23, {
                    italic: !0,
                    type: S._28.P,
                    color: S.F.Alt
                }, Object(h.d)("Prices include VAT", "Bits--BuyCard")));
                var n = null;
                e.minBitsToCheer && e.minBitsToCheer > 1 && (n = p.createElement(S._23, {
                    color: S.F.Alt
                }, Object(h.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                    displayName: e.displayName,
                    minBits: e.minBitsToCheer
                }, "Bits--BuyCard")));
                var i = null;
                return void 0 !== e.bitsBalance && null !== e.bitsBalance && (i = p.createElement(S._23, {
                    color: S.F.Alt
                }, Object(h.d)("You have {totalBits} Bits", {
                    totalBits: p.createElement("strong", {
                        "data-a-target": "buy-card-bits-count"
                    }, e.bitsBalance)
                }, "Bits--BuyCard"))), p.createElement(S._19, {
                    className: "bits-buy-card-header",
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    borderBottom: !0,
                    flexShrink: 0
                }, p.createElement(S.V, {
                    margin: {
                        bottom: 1
                    }
                }, p.createElement(S._23, {
                    type: S._28.H4,
                    color: S.F.Alt
                }, Object(h.d)("Purchase Bits", "Bits--BuyCard")), t), i, n)
            },
            W = n("nrdj"),
            G = function(e) {
                return p.createElement(S.V, {
                    display: S.H.Flex,
                    flexGrow: 1,
                    flexDirection: S.J.Column,
                    alignItems: S.c.Center,
                    fullWidth: !0,
                    flexWrap: S.K.NoWrap,
                    padding: {
                        y: 1
                    }
                }, p.createElement(W.a, {
                    prefix: "cheer",
                    amount: e.amount,
                    bitsConfig: e.bitsConfig,
                    showAmount: !0,
                    showImage: !0
                }), p.createElement(S.V, {
                    display: S.H.Flex,
                    padding: {
                        top: 1
                    },
                    flexGrow: 1,
                    flexDirection: S.J.Column,
                    alignItems: S.c.Center,
                    flexWrap: S.K.NoWrap
                }, p.createElement(S._23, {
                    type: S._28.H4,
                    bold: !0
                }, Object(h.d)("You got {bitsAmount,number} Bits!", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward")), p.createElement(S.Q, {
                    padding: {
                        top: 1
                    }
                }, p.createElement(S._23, {
                    color: S.F.Alt2
                }, Object(h.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward"), p.createElement("br", null), Object(h.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), p.createElement(S.V, {
                    display: S.H.Flex,
                    padding: {
                        x: 1,
                        top: 3
                    },
                    alignSelf: S.d.Stretch,
                    justifyContent: S.U.Between
                }, p.createElement(S.u, {
                    onClick: e.onStartCheering
                }, Object(h.d)("Start Cheering", "Bits--WatchAdAward")), p.createElement(S.u, {
                    type: S.z.Hollow,
                    onClick: e.onWatchAnother,
                    disabled: !e.hasAdAvailable
                }, Object(h.d)("Watch Another", "Bits--WatchAdAward"))))
            },
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasAdAvailable: !0
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentWillMount = function() {
                    return u.__awaiter(this, void 0, void 0, function() {
                        return u.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, i(this.props.truexUserID)];
                                case 1:
                                    return e.sent() !== b.Available && this.setState({
                                        hasAdAvailable: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return p.createElement(G, u.__assign({}, this.props, {
                        hasAdAvailable: this.state.hasAdAvailable
                    }))
                }, t
            }(p.Component),
            z = (n("q8Cw"), function(e) {
                var t = Object(h.d)("Something's wrong!", "Bits--WatchAdError"),
                    n = Object(h.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                    i = "adserrorgeneric";
                switch (e.type) {
                    case s.Adblock:
                        i = "adserroradblock", n = Object(h.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                        break;
                    case s.LimitReached:
                        i = "adserrorlimit", t = Object(h.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(h.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                        break;
                    case s.ExitEarly:
                        n = Object(h.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                }
                var a = p.createElement(S.V, {
                    className: "watch-ad-error__footer",
                    display: S.H.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: S.d.Stretch,
                    justifyContent: S.U.Center
                }, p.createElement(S.u, {
                    onClick: e.onTryAgain
                }, Object(h.d)("Try Again", "Bits--WatchAdError")));
                return e.type === s.LimitReached && (a = p.createElement(S.V, {
                    className: "watch-ad-error__footer",
                    display: S.H.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: S.d.Stretch,
                    justifyContent: S.U.Between
                }, p.createElement(S.u, {
                    onClick: e.onClose
                }, Object(h.d)("Got It", "Bits--WatchAdError")), p.createElement(S.u, {
                    onClick: e.onTryAgain,
                    type: S.z.Hollow
                }, Object(h.d)("Buy Bits", "Bits--WatchAdError")))), p.createElement(S.V, {
                    padding: {
                        x: 1
                    },
                    display: S.H.Flex,
                    flexGrow: 1,
                    flexDirection: S.J.Column,
                    alignItems: S.c.Center,
                    fullWidth: !0,
                    flexWrap: S.K.NoWrap
                }, p.createElement(S.V, {
                    padding: {
                        y: 2
                    }
                }, p.createElement("img", {
                    className: "watch-ad-error__error-image",
                    src: F.b + "/light/static/1/" + i + ".png"
                })), p.createElement(S.V, {
                    padding: {
                        bottom: 1
                    }
                }, p.createElement(S._23, {
                    type: S._28.H4,
                    bold: !0
                }, t)), p.createElement(S._23, {
                    color: S.F.Alt2
                }, n), a)
            }),
            Q = n("CSlQ"),
            $ = n("aqNN");
        n("6Rwu");
        ! function(e) {
            e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
        }(O || (O = {}));
        var J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        wateb: O.Inactive,
                        watebError: null,
                        bitsAwarded: 0
                    }, t.onBuyPopupClose = function(e) {
                        Object(D.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t.onAdBitsAwarded = function(e) {
                        t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                            wateb: O.Awarded,
                            bitsAwarded: e
                        })
                    }, t.handleWatchAdClick = function() {
                        return u.__awaiter(t, void 0, void 0, function() {
                            return u.__generator(this, function(e) {
                                return this.props.data && this.props.data.currentUser && this.props.data.user ? (this.props.showWatchAdModal({
                                    tuid: this.props.data.currentUser.idSHA1,
                                    onBitsAwarded: this.onAdBitsAwarded,
                                    onError: this.receiveAdErrorState,
                                    requestRef: y.c.ShowAdButton,
                                    channelID: this.props.data.user.id
                                }), [2]) : [2]
                            })
                        })
                    }, t.receiveAdErrorState = function(e) {
                        t.setState({
                            wateb: O.Error,
                            watebError: e
                        })
                    }, t.resetAdErrorState = function() {
                        t.state.wateb === O.Error && (t.setState({
                            wateb: O.Inactive
                        }), t.props.data && t.props.data.refetch())
                    }, t
                }
                return u.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return !e.adModalOpen
                }, t.prototype.render = function() {
                    var e = {
                            border: !0,
                            background: S.m.Base,
                            fullWidth: !0,
                            elevation: 3
                        },
                        t = N({
                            "bits-buy-card": !0,
                            "bits-buy-card__chat-tooltip": this.props.location === y.b.ChatTooltip
                        }),
                        n = null;
                    if (this.props.location === y.b.ChatTooltip && (n = p.createElement("button", {
                            className: "bits-buy-card__close",
                            onClick: this.props.onClose,
                            "data-a-target": "bits-buy-card-close-button"
                        }, p.createElement(S._10, {
                            asset: S._11.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return p.createElement(S._19, u.__assign({
                        className: t,
                        "data-a-target": "bits-buy-card-loading",
                        display: S.H.Flex,
                        flexDirection: S.J.Column,
                        alignItems: S.c.Center,
                        justifyContent: S.U.Center,
                        textAlign: S._24.Center
                    }, e), p.createElement(S.Z, {
                        delay: 0
                    }), p.createElement(S.V, {
                        padding: {
                            top: 2
                        }
                    }, p.createElement(S._23, {
                        italic: !0
                    }, Object(h.d)("Fetching bits", "Bits--BuyCard"))));
                    if (this.props.data.error) return p.createElement(S.V, u.__assign({
                        className: N(t, "bits-buy-card--shorter"),
                        display: S.H.Flex,
                        flexDirection: S.J.Column,
                        alignItems: S.c.Center,
                        justifyContent: S.U.Center,
                        padding: 2,
                        textAlign: S._24.Center,
                        "data-a-target": "bits-buy-card-error"
                    }, e), n, p.createElement(S._23, {
                        italic: !0
                    }, Object(h.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                    var i = this.renderWatebCard();
                    if (i) return p.createElement(S._19, u.__assign({
                        className: N(t, "bits-buy-card--shorter"),
                        display: S.H.Flex,
                        flexDirection: S.J.Column,
                        alignItems: S.c.Center,
                        justifyContent: S.U.Center,
                        textAlign: S._24.Center,
                        padding: 1
                    }, e), n, i);
                    var a = [];
                    this.props.data.currentUser ? a = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (a = this.props.data.bitsOffers);
                    var r = a.filter(function(e) {
                            return e.type === R.b
                        }).some(function(e) {
                            return e.includesVAT
                        }),
                        s = this.props.data.user ? this.props.data.user.id : "",
                        o = p.createElement(V, {
                            offers: a,
                            fullsize: this.props.fullsize,
                            hidePromos: this.props.hidePromos,
                            hideWateb: this.props.hideWateb,
                            bitsConfig: this.props.bitsConfig,
                            channelID: s,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.closeAllBits,
                            currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                            handleWatchAdClick: this.handleWatchAdClick,
                            location: this.props.location,
                            onBuyPopupClose: this.onBuyPopupClose,
                            onClose: this.props.onClose,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction
                        }),
                        l = null;
                    return this.props.location === y.b.ChatTooltip && (l = p.createElement(H, {
                        bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                        minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                        pricesIncludeVAT: r
                    })), p.createElement(S._19, u.__assign({
                        className: t,
                        padding: {
                            top: 1
                        },
                        display: S.H.Flex,
                        flexDirection: S.J.Column,
                        "data-a-target": "bits-buy-card"
                    }, e), n, l, o)
                }, t.prototype.renderWatebCard = function() {
                    if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                        case O.Awarded:
                            return p.createElement(q, {
                                bitsConfig: this.props.bitsConfig,
                                amount: this.state.bitsAwarded,
                                onStartCheering: this.props.onClose,
                                onWatchAnother: this.handleWatchAdClick,
                                truexUserID: this.props.data.currentUser.idSHA1
                            });
                        case O.Error:
                            return p.createElement(z, {
                                type: this.state.watebError || s.Unknown,
                                onClose: this.props.onClose,
                                onTryAgain: this.resetAdErrorState
                            });
                        default:
                            return !1
                    }
                }, t = u.__decorate([Object(f.a)($, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(p.Component),
            K = Object(w.compose)(Object(Q.c)("BitsBuyCard", {
                autoReportInteractive: !0,
                destination: T.a.BitsBuyCard
            }))(J),
            Y = Object(o.a)(a, r)(K);
        n.d(t, !1, function() {
            return a
        }), n.d(t, !1, function() {
            return r
        }), n.d(t, "a", function() {
            return Y
        })
    },
    Xo53: function(e, t) {},
    Y5T0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BitsCommandHandler_DismissPinnedCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPinnedCheerInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissPinnedCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation BitsCommandHandler_DismissPinnedCheer($input: DismissPinnedCheerInput!) {\ndismissPinnedCheer(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "YEG/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            s = n("yDzg"),
            o = n("CSlQ"),
            l = n("CwIZ"),
            c = n("Odds"),
            d = "subscribe-button__subscribe-tier-button",
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasPopupExperiment: !1
                    }, t.handleClick = function() {
                        t.openCheckout(), t.props.reportSubAction({
                            action: l.a.ClickCheckout,
                            checkoutButtonTier: t.props.tierPrice
                        })
                    }, t.setPopupExperiment = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, r.n.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP")];
                                    case 1:
                                        return e = t.sent(), this.setState({
                                            hasPopupExperiment: "yes" === e
                                        }), [2]
                                }
                            })
                        })
                    }, t.openCheckout = function() {
                        t.state.hasPopupExperiment && window.open(Object(s.a)(t.props.url, {
                            ref: "subscribe-tier-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    !1 !== this.props.targetBlank && this.setPopupExperiment()
                }, t.prototype.render = function() {
                    if (this.props.isSubbedToTier) {
                        var e = Object(r.d)("Subscribed", "SubTierButton");
                        return a.createElement(c.u, {
                            ariaLabel: e,
                            "data-test-selector": d,
                            disabled: !0,
                            icon: c._11.Star
                        }, e)
                    }
                    var t = Object(r.d)("Subscribe Now", "SubTierButton");
                    return a.createElement(c.u, i.__assign({
                        ariaLabel: t + " " + this.props.tierPrice,
                        "data-test-selector": d,
                        linkTo: this.state.hasPopupExperiment ? void 0 : this.props.url,
                        onClick: this.handleClick,
                        purchase: this.props.tierPrice
                    }, Object(c._40)(this.props), {
                        targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                    }), t)
                }, t = i.__decorate([Object(o.c)("SubTierButton", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component);
        n.d(t, !1, function() {
            return d
        }), n.d(t, "a", function() {
            return u
        })
    },
    YH6m: function(e, t, n) {
        "use strict";

        function i(e) {
            return "subscribe-button-modal-tab-" + e
        }
        var a, r = n("TToO"),
            s = n("U7vG"),
            o = n("6sO2"),
            l = n("vBst"),
            c = n("Tzcg"),
            d = n("CSlQ"),
            u = n("daN3"),
            p = n("37Pp"),
            m = n("YEG/"),
            h = n("jYA1"),
            g = n("FDYX"),
            f = n("CwIZ"),
            v = n("Odds"),
            b = (n("6O9f"), "gift-subscription-button"),
            k = "subscribe-button";
        ! function(e) {
            e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
        }(a || (a = {}));
        var y = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.toggleActiveTab = function(e) {
                    if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-tier")) {
                        case "subscribe-button-modal-tab-" + a.Prime:
                            n.setState({
                                activeTab: a.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(a.Prime);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier1:
                            n.setState({
                                activeTab: a.Tier1,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(a.Tier1);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier2:
                            n.setState({
                                activeTab: a.Tier2,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[1])
                            }), n.props.onSelectTierTab(a.Tier2);
                            break;
                        case "subscribe-button-modal-tab-" + a.Tier3:
                            n.setState({
                                activeTab: a.Tier3,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[2])
                            }), n.props.onSelectTierTab(a.Tier3);
                            break;
                        default:
                            n.setState({
                                activeTab: a.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(a.Prime)
                    }
                }, n.getTabTitle = function() {
                    switch (n.state.activeTab) {
                        case a.Prime:
                            return Object(o.d)("Free Channel Sub with Twitch Prime", "SubTierTabs");
                        case a.Tier1:
                            return n.props.subscriptionProducts[0].displayName;
                        case a.Tier2:
                            return n.props.subscriptionProducts[1].displayName;
                        case a.Tier3:
                            return n.props.subscriptionProducts[2].displayName;
                        default:
                            return n.props.subscriptionProducts[0].displayName
                    }
                }, n.getTierSubscribeButton = function() {
                    var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                    if (n.props.isGift) {
                        var t = Object(o.d)("Gift A Subscription", "SubTierTabs");
                        return n.props.giftRecipient ? s.createElement(u.a, {
                            subProductId: e.id,
                            giftRecipient: n.props.giftRecipient,
                            checkoutURL: e.url,
                            buttonMessage: t,
                            purchase: n.state.currentPurchasePrice,
                            onClick: n.reportGiftCheckoutAction
                        }) : s.createElement(v.u, {
                            ariaLabel: t + " " + n.state.currentPurchasePrice,
                            "data-test-selector": b,
                            onClick: n.onGiftSelect,
                            purchase: n.state.currentPurchasePrice
                        }, t)
                    }
                    return n.state.subbedTier === n.state.activeTab && n.state.activeTab === a.Prime ? s.createElement(h.a, {
                        authToken: n.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: n.props.isSubscribed,
                        isSubscribedWithPrime: n.props.subbedTier === l.a.Prime,
                        onSubscribedWithPrime: n.onSubscribedWithPrime,
                        reportSubMenuAction: n.props.reportSubMenuAction,
                        subLogin: n.props.subLogin,
                        userHasPrime: n.props.userHasPrime,
                        canPrimeSubscribe: n.props.canPrimeSubscribe
                    }) : s.createElement(m.a, {
                        isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                        tierPrice: n.state.currentPurchasePrice,
                        reportSubAction: n.props.reportSubMenuAction,
                        url: e.url,
                        "data-a-target": "subscribe-now-button",
                        "data-test-selector": k
                    })
                }, n.onSubscribedWithPrime = function() {
                    n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                }, n.reportGiftCheckoutAction = function() {
                    n.props.reportSubMenuAction({
                        action: f.a.BuyGiftSub,
                        checkoutButtonTier: n.state.currentPurchasePrice,
                        giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                    })
                }, n.onGiftSelect = function() {
                    n.props.onGiftSelect && n.props.onGiftSelect()
                }, n.mapSubbedTierToTabs = function(e) {
                    e.subbedTier === l.a.Prime ? (n.setState({
                        activeTab: a.Prime,
                        subbedTier: a.Prime
                    }), e.onSelectTierTab(a.Prime)) : e.subbedTier === l.a.Tier1 ? (n.setState({
                        activeTab: a.Tier1,
                        subbedTier: a.Tier1
                    }), e.onSelectTierTab(a.Tier1)) : e.subbedTier === l.a.Tier2 ? (n.setState({
                        activeTab: a.Tier2,
                        subbedTier: a.Tier2
                    }), e.onSelectTierTab(a.Tier2)) : e.subbedTier === l.a.Tier3 ? (n.setState({
                        activeTab: a.Tier3,
                        subbedTier: a.Tier3
                    }), e.onSelectTierTab(a.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(a.Prime)
                }, n.getExtraEmotes = function(e) {
                    return (e === a.Tier2 ? Object(c.b)(n.props.subscriptionProducts[1].emotes) : Object(c.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                        return s.createElement(v.V, {
                            display: v.H.InlineFlex,
                            margin: {
                                right: .5
                            },
                            key: e.id
                        }, s.createElement("img", {
                            srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                        }))
                    })
                }, n.state = n.getInitialState(), n
            }
            return r.__extends(t, e), t.prototype.componentWillMount = function() {
                this.mapSubbedTierToTabs(this.props)
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = null;
                this.state.subbedTier && (e = s.createElement(v.V, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: .5
                    },
                    className: "subscription-balloon-options__subbed-star"
                }, s.createElement(v._10, {
                    asset: v._11.Star
                })));
                var t = null,
                    n = null,
                    r = null,
                    c = s.createElement(v.V, {
                        display: v.H.InlineFlex
                    }, this.state.subbedTier === a.Tier3 && e, s.createElement(v._20, {
                        active: this.state.activeTab === a.Tier3,
                        "data-tier": i(a.Tier3),
                        "data-a-target": i(a.Tier3),
                        onClick: this.toggleActiveTab
                    }, this.props.subscriptionProducts[2].price));
                if (this.props.subbedTier !== l.a.Prime || this.props.isGift || (t = s.createElement(v.V, {
                        display: v.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, s.createElement(v.V, {
                        display: v.H.InlineFlex,
                        margin: {
                            right: 1
                        },
                        className: "subscription-balloon-options__prime-crown"
                    }, s.createElement(v._10, {
                        asset: v._11.Crown
                    })), s.createElement(v._20, {
                        active: this.state.activeTab === a.Prime,
                        "data-tier": i(a.Prime),
                        "data-a-target": i(a.Prime),
                        onClick: this.toggleActiveTab
                    }, Object(o.d)("Prime", "SubTierTabs")))), !this.props.subbedTier || this.props.subbedTier === l.a.Tier1) {
                    var d = this.props.subscriptionProducts[0].price;
                    n = s.createElement(v.V, {
                        display: v.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === a.Tier1 && e, s.createElement(v._20, {
                        active: this.state.activeTab === a.Tier1,
                        "data-tier": i(a.Tier1),
                        "data-a-target": i(a.Tier1),
                        onClick: this.toggleActiveTab
                    }, d))
                }
                this.props.subbedTier && this.props.subbedTier !== l.a.Prime && this.props.subbedTier !== l.a.Tier1 && this.props.subbedTier !== l.a.Tier2 || (r = s.createElement(v.V, {
                    display: v.H.InlineFlex,
                    margin: {
                        right: 2
                    }
                }, this.state.subbedTier === a.Tier2 && e, s.createElement(v._20, {
                    active: this.state.activeTab === a.Tier2,
                    "data-tier": i(a.Tier2),
                    "data-a-target": i(a.Tier2),
                    onClick: this.toggleActiveTab
                }, this.props.subscriptionProducts[1].price)));
                var u = this.props.subscriptionProducts[1].emotes.length,
                    m = u + this.props.subscriptionProducts[2].emotes.length,
                    h = null;
                (u > 0 && this.state.activeTab === a.Tier2 || m > 0 && this.state.activeTab === a.Tier3) && (h = s.createElement(v.V, {
                    display: v.H.InlineFlex,
                    alignItems: v.c.Center
                }, this.getExtraEmotes(this.state.activeTab), s.createElement(v._23, {
                    bold: !0
                }, Object(o.d)("Plus {extraEmoteCount, number} extra channel emote(s)", {
                    extraEmoteCount: this.state.activeTab === a.Tier2 ? u : m
                }, "SubTierTabs"))));
                var g = this.props.subscriptionProducts[this.state.activeTab - 1];
                return s.createElement(v.V, {
                    className: "channel-header__subscription-balloon-options"
                }, s.createElement(v.V, {
                    margin: {
                        bottom: 1
                    }
                }, s.createElement(v._21, null, t, n, r, c)), s.createElement(v.V, null, s.createElement(v.V, {
                    margin: {
                        bottom: 1
                    }
                }, s.createElement(v._23, {
                    type: v._28.H5,
                    bold: !0
                }, this.getTabTitle())), s.createElement(v.V, {
                    margin: {
                        bottom: 1
                    }
                }, s.createElement(v._23, null, Object(o.d)("Includes {availableEmoteCount, number} emoticon(s), subscriber badge, customizable messages upon subscribing, and ad-free viewing", {
                    availableEmoteCount: this.props.subscriptionProducts[0].emotes.length
                }, "SubTierTabs"))), h, s.createElement(p.a, {
                    subscriptionProduct: g,
                    isGift: this.props.isGift
                }), s.createElement(v.V, {
                    margin: {
                        top: 1,
                        right: 1
                    }
                }, this.getTierSubscribeButton())))
            }, t.prototype.getInitialState = function() {
                var e = this.props.subscriptionProducts[0].price;
                return (Object(g.d)(this.props.subscriptionProducts) || Object(g.c)(this.props.subscriptionProducts)) && (e = Object(g.a)(this.props.subscriptionProducts[0], this.props.isGift)), {
                    activeTab: a.Tier1,
                    currentPurchasePrice: e,
                    subbedTier: null
                }
            }, t.prototype.getPrice = function(e) {
                return Object(g.d)(this.props.subscriptionProducts) || Object(g.c)(this.props.subscriptionProducts) ? Object(g.a)(e, this.props.isGift) : e.price
            }, t = r.__decorate([Object(d.c)("SubTierTabs")], t)
        }(s.Component);
        n.d(t, !1, function() {
            return b
        }), n.d(t, !1, function() {
            return k
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return y
        })
    },
    YhVV: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = [];
            if (!e || !t) return n;
            for (var a = /\S+/g, r = a.exec(e); r;) {
                var s = r[0],
                    o = t[s];
                if (o && "function" != typeof o) {
                    var l = Object(i.d)(e.slice(0, r.index)),
                        c = l ? l.length : r.index;
                    n[c] = {
                        startIndex: c,
                        endIndex: c + s.length,
                        data: {
                            alt: s,
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": Object(i.e)(o.id, 1),
                                    "2x": Object(i.e)(o.id, 2),
                                    "4x": Object(i.e)(o.id, 4)
                                }
                            }
                        }
                    }
                }
                r = a.exec(e)
            }
            return n
        }, t.a = function(e) {
            for (var t = {}, n = 0, i = e; n < i.length; n++)
                for (var s = i[n], o = 0, l = s.emotes; o < l.length; o++)
                    for (var c = l[o], d = 0, u = a[c.token] || [c.token]; d < u.length; d++) {
                        var p = u[d];
                        t[p] && s.id === r || (t[p] = {
                            id: c.id,
                            token: p
                        })
                    }
            return t
        };
        var i = n("l21v"),
            a = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            },
            r = "0"
    },
    "Z+EN": function(e, t) {},
    ZJYd: function(e, t, n) {
        "use strict";

        function i(e) {
            return e.type === s.b && null !== e.promotion && !!e.promotion
        }
        t.c = function(e) {
            return e.type !== s.a && i(e) && null !== e.promotion && e.promotion.type === s.d
        }, t.e = function(e) {
            return e.type !== s.a && i(e) && null !== e.promotion && e.promotion.type === s.e
        }, t.d = i, t.a = function(e) {
            var t = 0,
                n = 0,
                i = 0;
            return e.forEach(function(e) {
                e.cheerAmount && (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, i += e.cheerAmount)
            }), {
                total: i,
                smallestCheermote: n,
                largestCheermote: t
            }
        }, t.f = function(e) {
            var t = e.messageBits,
                n = t.total,
                i = t.largestCheermote,
                r = t.smallestCheermote;
            if (n) {
                var s = {
                    cheerAboveMaxBitsPerEmote: i > o.j,
                    totalAboveBalance: n > e.balance,
                    totalBelowCheerMinimum: n < e.cheerMinimumBits,
                    totalBelowEmoteMinimum: r < e.emoteMinimumBits,
                    inputLongerThanMaxBitsMessage: e.inputValue.length > o.i,
                    inputStartsWithCommand: e.inputValue.startsWith("/")
                };
                if (Object.keys(s).some(function(e) {
                        return s[e]
                    })) return a.__assign({
                    canSpend: !1
                }, s)
            }
            return {
                canSpend: !0
            }
        }, t.b = function(e) {
            var t = e.purchaseUrl;
            if (t) {
                e.trackBitsCardInteraction(Object(l.d)(e.bitsAmount), {
                    location: e.location
                });
                var n = t.replace("{channelID}", e.channelID),
                    i = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
                return !i || Object(r.a)() ? (e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(l.a.CloseCard, {
                    location: e.location
                })) : (i.focus(), i)
            }
        };
        var a = n("TToO"),
            r = n("Ouuk"),
            s = n("jxGs"),
            o = n("3iBR"),
            l = n("/LBW")
    },
    ZoRy: function(e, t) {},
    a0uF: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "blockedUsers"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockedUsers"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 56
            }
        };
        n.loc.source = {
            body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    aSvS: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        });
        var i;
        ! function(e) {
            e.DismissToken = "token_dismissed", e.RedeemToken = "token_redeemed", e.RequestEligibility = "eligibility_requested", e.RequestToken = "token_requested"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Click = "clicked_manage_in_dashboards", e.Dismiss = "dismissed"
        }(a || (a = {}))
    },
    aUOx: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return {
                type: i.a.Info,
                id: Object(a.a)("notice"),
                message: e
            }
        };
        var i = n("qkCi"),
            a = n("INp2")
    },
    aqNN: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Bits_BuyCard_Offers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 440
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\nquery Bits_BuyCard_Offers($withChannel: Boolean! $isLoggedIn: Boolean! $channelLogin: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $channelLogin) @include(if: $withChannel) {\nid\ndisplayName\ncheer {\nid\nsettings {\ncheerMinimumBits\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("OcEY").definitions)), e.exports = i
    },
    ass3: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), t.c = function() {
            return {
                type: i
            }
        }, t.d = function(e, t, n) {
            return {
                type: a,
                viewerCardOptions: {
                    targetLogin: e,
                    sourceType: t,
                    sourceID: n
                }
            }
        };
        var i = "viewer-card.VIEWER_CARD_HIDDEN",
            a = "viewer-card.VIEWER_CARD_SHOWN"
    },
    bQ8d: function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (void 0 === t && (t = 0), t > e) {
                var n = t;
                t = e, e = n
            }
            return t + Math.floor(Math.random() * (e - t + 1))
        }
        t.a = i, t.b = function(e) {
            return e[i(e.length - 1)]
        }, t.c = function(e, t) {
            for (var n = 0, i = []; n < e;) i.push(t(n)), n += 1;
            return i
        }
    },
    baDC: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 236
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_CurrentUser($channelLogin: String!) {\ncurrentUser {\nid\nlogin\ndisplayName\nchatColor\n}\nuser(login: $channelLogin) {\nid\nself {\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = i
    },
    bgpf: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return r
        });
        var i;
        (i || (i = {})).NewChatter = "NEW_CHATTER";
        var a;
        ! function(e) {
            e.Available = "AVAILABLE", e.Dismissed = "DISMISSED", e.Eligible = "ELIGIBLE", e.Redeemed = "REDEEMED"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e.TokenNotAvailable = "TOKEN_NOT_AVAILABLE", e.TokenNotFound = "TOKEN_NOT_FOUND", e.UserBanned = "USER_CHAT_BANNED", e.UserNotFollowing = "FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED", e.UserNotSubbed = "SUB_ONLY_MODE_ENFORCEMENT_FAILED", e.UserTimedOut = "USER_CHAT_TIMED_OUT"
        }(r || (r = {}))
    },
    bkpq: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = new Map,
                n = new Map,
                i = new Map,
                r = new Map;
            return e.images.forEach(function(e) {
                "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? r.set(e.dpiScale, e.url) : i.set(e.dpiScale, e.url)
            }), a.__assign({
                indexedImages: {
                    LIGHT: {
                        static: t,
                        animated: n
                    },
                    DARK: {
                        static: i,
                        animated: r
                    }
                }
            }, e)
        }
        t.a = function(e) {
            var t = [],
                n = {};
            return e.forEach(function(e) {
                var o = e.tiers.map(function(e) {
                    return i(e)
                });
                "Cheer" === e.prefix && o.push(function() {
                    var e = ["DARK", "LIGHT"],
                        t = ["static", "animated"],
                        n = [];
                    return [1, 1.5, 2, 3, 4].forEach(function(i) {
                        e.forEach(function(e) {
                            t.forEach(function(t) {
                                n.push({
                                    url: s.a + "/cheer/" + e.toLowerCase() + "/" + t + "/100000/" + i + "." + ("static" === t ? "png" : "gif"),
                                    isAnimated: "animated" === t,
                                    theme: e,
                                    dpiScale: i
                                })
                            })
                        })
                    }), i({
                        id: "Cheer:100000",
                        bits: 1e5,
                        color: s.e[r.a.Yellow],
                        images: n
                    })
                }()), o.sort(function(e, t) {
                    return t.bits - e.bits
                });
                var l = a.__assign({}, e, {
                    indexedTiers: new Map(o.map(function(e) {
                        return [e.bits, e]
                    })),
                    orderedTiers: o
                });
                t.push(l), n[l.prefix.toLowerCase()] = l
            }), {
                indexedActions: n,
                orderedActions: t
            }
        };
        var a = n("TToO"),
            r = n("I89S"),
            s = n("3iBR")
    },
    c3pS: function(e, t, n) {
        "use strict";
        n("67ft");
        var i, a = n("TToO"),
            r = n("KSGD"),
            s = n("U7vG"),
            o = n("6BvN"),
            l = n("HW6M"),
            c = n("6sO2"),
            d = n("rCmJ"),
            u = n("Odds"),
            p = (n("IfJQ"), "autocomplete-balloon-matches"),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                        noMatches: Object(c.d)("No matches.", "AutocompleteBalloon")
                    }, t.logger = c.i.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                        return t.props.matches.map(function(e, n) {
                            var i = t.state.selectedMatch,
                                a = i && i.replacement === e.replacement,
                                r = l("autocomplete-balloon__item", {
                                    "autocomplete-balloon__item--selected": a
                                });
                            return s.createElement(u.V, {
                                key: "autocomplete-match-" + n,
                                refDelegate: a ? t.focusOnOption : void 0,
                                "data-test-selector": p
                            }, s.createElement(u.Q, {
                                display: u.H.Block,
                                fullWidth: !0
                            }, s.createElement("button", {
                                onMouseEnter: t.handleMatchMouseEnter,
                                className: r,
                                "data-a-target": e.replacement,
                                "data-click-index": n,
                                onClick: t.onMatchClick
                            }, s.createElement(u.V, {
                                padding: {
                                    x: .5
                                },
                                display: u.H.Flex,
                                alignItems: u.c.Center
                            }, e.element))))
                        })
                    }, t.handleMatchMouseEnter = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.setState({
                            selectedMatch: n
                        })
                    }, t.onMatchClick = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.props.onMatchSelect(n)
                    }, t.getMatchFromEvent = function(e) {
                        var n = t.props.matches,
                            i = e.currentTarget.getAttribute("data-click-index");
                        return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                    }, t.handleKeydown = function(e) {
                        var n = e.charCode || e.keyCode,
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                        switch (n) {
                            case o.a.Tab:
                            case o.a.Enter:
                                i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                break;
                            case o.a.Up:
                            case o.a.Down:
                                if (!t.state.selectedMatch || !t.props.matches.length) return;
                                var a = t.props.matches.indexOf(t.state.selectedMatch);
                                if (-1 === a) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                i();
                                var r = n === o.a.Up ? -1 : 1,
                                    s = t.getIndexWithinLength(a + r, t.props.matches.length),
                                    l = t.props.matches[s];
                                t.setState({
                                    selectedMatch: l
                                })
                        }
                    }, t.getIndexWithinLength = function(e, t) {
                        var n = e % t;
                        return n < 0 ? n + t : n
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t.focusOnOption = function(e) {
                        if (e && t.autocompleteBalloonElement) {
                            var n = e.getBoundingClientRect(),
                                i = t.autocompleteBalloonElement.getBoundingClientRect();
                            (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                        }
                    }, t.setAutocompleteBalloonElement = function(e) {
                        t.autocompleteBalloonElement = e
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                        selectedMatch: this.props.matches[0]
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this,
                        n = e.matches.reduce(function(e, n, i) {
                            return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                        }, 0);
                    this.setState({
                        selectedMatch: e.matches[n]
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = 0 === this.props.matches.length ? s.createElement(u.V, {
                        padding: {
                            x: .5
                        },
                        "data-test-selector": "autocomplete-balloon-no-matches"
                    }, s.createElement(u._23, {
                        type: u._28.Span,
                        color: u.F.Alt2
                    }, this.messages.noMatches)) : this.renderMatches(), s.createElement(u.V, {
                        position: u._4.Relative
                    }, s.createElement(d.a, {
                        onClickOut: this.props.onDismiss
                    }, s.createElement(u.p, {
                        direction: u.q.TopLeft,
                        "data-a-target": "autocomplete-balloon",
                        "data-test-selector": "autocomplete-balloon",
                        show: !0
                    }, s.createElement(u.V, {
                        refDelegate: this.setAutocompleteBalloonElement,
                        "data-test-selector": "autocomplete-matches-container",
                        className: "autocomplete-balloon",
                        overflow: u._0.Auto,
                        padding: {
                            y: 1
                        }
                    }, s.createElement("div", {
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, e)))))
                }, t
            }(s.Component),
            h = n("2emZ"),
            g = n("vH/s"),
            f = {
                Chat: "chat",
                Feed: "feed",
                Whisper: "whisper"
            },
            v = ":",
            b = "#",
            k = "@",
            y = function(e) {
                switch (e) {
                    case h.a.Emote:
                        return v;
                    case h.a.Hashtag:
                        return b;
                    case h.a.Mention:
                        return k;
                    default:
                        return void c.i.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                }
            },
            S = function(e) {
                var t = y(e.autocompleteType);
                if (t) {
                    var n = {
                        channel: e.channelLogin,
                        completed_text: e.completedText,
                        source: e.source,
                        start_character: t
                    };
                    c.m.track(g.SpadeEventType.ChatSuggestionComplete, n)
                }
            };
        ! function(e) {
            e.Input = "input", e.TextArea = "textarea"
        }(i || (i = {}));
        var C = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        autocompleteType: h.a.None,
                        matchedCursorPosition: 0,
                        matches: null,
                        value: ""
                    }, n.providers = [], n.onChange = function(e) {
                        n.setState({
                            value: e.target.value
                        }, function() {
                            n.getMatches()
                        }), n.props.onChange && n.props.onChange(e)
                    }, n.onKeyDown = function(e) {
                        var t = function() {
                                n.props.onKeyDown && n.props.onKeyDown(e)
                            },
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            },
                            a = e.charCode || e.keyCode;
                        if (a !== o.a.Enter) {
                            switch (a) {
                                case o.a.Tab:
                                    n.state.matches || (i(), n.getMatches(!0));
                                    break;
                                case o.a.Esc:
                                    n.state.matches && (i(), n.resetDisplayState())
                            }
                            t()
                        } else t()
                    }, n.setComponentRefDelegate = function(e) {
                        n.componentRef = e, n.props.componentRefDelegate && n.props.componentRefDelegate(e)
                    }, n.getMatches = function(e) {
                        var t = n.state.value;
                        if (0 !== n.providers.length && 0 !== t.length) {
                            var i = n.getCurrentCursorPosition();
                            if (i > t.length);
                            else
                                for (; i < t.length && !/\s/.test(t.charAt(i));) i++;
                            var a = t.substring(0, i);
                            if (0 === a.length || /\s/.test(a.substring(a.length - 1))) n.resetDisplayState();
                            else {
                                for (var r = a.split(/\s/), s = r[r.length - 1], o = 0, l = n.providers; o < l.length; o++) {
                                    var c = l[o];
                                    if (!e || c.canBeTriggeredByTab) {
                                        var d = c.getMatches(s, e);
                                        if (d) return void n.setState({
                                            autocompleteType: c.autocompleteType,
                                            matchedCursorPosition: i,
                                            matches: d
                                        })
                                    }
                                }
                                n.resetDisplayState()
                            }
                        } else n.resetDisplayState()
                    }, n.resetDisplayState = function(e, t) {
                        var i = a.__assign({}, n.state, {
                            autocompleteType: h.a.None,
                            matches: null
                        }, e || {});
                        n.setState(i, t)
                    }, n.insertReplacement = function(e) {
                        var t = n.state.value,
                            i = n.state.matchedCursorPosition,
                            r = t.substring(0, i),
                            s = r.lastIndexOf(e.current);
                        if (-1 === s) r = r.concat(e.replacement + " "), i = r.length;
                        else {
                            var o = r.substring(0, s),
                                l = t.length > s + e.current.length ? t.substring(s + e.current.length) : "",
                                c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                            r = "" + o + c + l, i = o.length + c.length
                        }
                        S(a.__assign({}, n.props.trackingParams || {}, {
                            autocompleteType: n.state.autocompleteType,
                            completedText: e.replacement,
                            source: n.props.suggestionSource
                        })), n.resetDisplayState({
                            value: r
                        }, function() {
                            n.setCursorPosition(i)
                        })
                    }, n.getCurrentCursorPosition = function() {
                        return n.componentRef.selectionStart
                    }, n.setCursorPosition = function(e) {
                        n.componentRef && (n.componentRef.setSelectionRange(e, e), n.componentRef.focus())
                    }, n.registerAutocompleteProvider = function(e) {
                        return n.providers.push(e),
                            function() {
                                var t = n.providers.indexOf(e);
                                n.providers.splice(t, 1)
                            }
                    }, t.refDelegate && t.refDelegate(n), n
                }
                return a.__extends(t, e), t.prototype.getChildContext = function() {
                    return {
                        registerAutocompleteProvider: this.registerAutocompleteProvider
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    !this.state.matches && t.matches && function(e) {
                        var t = y(e.autocompleteType);
                        if (t) {
                            var n = {
                                source: e.source,
                                start_character: t
                            };
                            c.m.track(g.SpadeEventType.ChatSuggestion, n)
                        }
                    }({
                        autocompleteType: t.autocompleteType,
                        source: e.suggestionSource
                    })
                }, t.prototype.componentDidUpdate = function(e, t) {
                    t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                }, t.prototype.render = function() {
                    var e = a.__assign({}, this.props, {
                        onChange: this.onChange,
                        onKeyDown: this.onKeyDown,
                        refDelegate: this.setComponentRefDelegate,
                        value: this.state.value
                    });
                    return s.createElement(u.V, null, this.state.matches && s.createElement(m, {
                        matches: this.state.matches,
                        onMatchSelect: this.insertReplacement,
                        onDismiss: this.resetDisplayState,
                        containerElement: this.props.containerElement
                    }), this.props.componentType === i.Input ? s.createElement(u.R, a.__assign({}, e, {
                        type: e.type || u.S.Text
                    })) : s.createElement(u._25, a.__assign({}, e)), this.props.children)
                }, t.prototype.getValue = function() {
                    return this.state.value
                }, t.prototype.setValue = function(e) {
                    this.resetDisplayState({
                        value: e
                    })
                }, t.childContextTypes = {
                    registerAutocompleteProvider: r.func
                }, t
            }(s.Component),
            _ = n("Bir6"),
            E = n("Tzcg"),
            N = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = h.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                    }, t.getMatchedEmotes = function(e) {
                        var n = t.state.hydratedEmotes;
                        if (!n || 0 === n.length) return null;
                        var i = e.substring(1),
                            a = n.reduce(function(e, n) {
                                var a = n.emotes.filter(function(e) {
                                    if (e.token) return t.doesEmoteMatchTerm(e, i)
                                });
                                return e.concat([a])
                            }, []).filter(function(e) {
                                return e.length > 0
                            }).reduce(function(e, t) {
                                return e.concat(t)
                            }, []);
                        return a = Object(E.d)(a), (a = Object(E.e)(a, i)).map(function(e) {
                            return {
                                current: ":" + i,
                                replacement: e.token,
                                element: t.renderEmoteSuggestion(e)
                            }
                        })
                    }, t.doesEmoteMatchTerm = function(e, t) {
                        var n = new RegExp("^" + Object(_.a)(t), "i");
                        if (e.token.match(n)) return !0;
                        var i = new RegExp("" + Object(_.a)(t.charAt(0)).toUpperCase()),
                            a = new RegExp("^" + Object(_.a)(t.slice(1)), "i"),
                            r = e.token.match(i);
                        return !!(r && r.index && e.token.slice(r.index + 1).match(a))
                    }, t.renderEmoteSuggestion = function(e) {
                        return [s.createElement(u.V, {
                            padding: {
                                right: .5
                            },
                            key: "emote-img-" + e.id
                        }, s.createElement("img", {
                            srcSet: e.srcSet
                        })), s.createElement(u._23, {
                            type: u._28.Span,
                            key: "emote-text-" + e.id
                        }, e.token)]
                    }, t.hidrateEmotes = function(e) {
                        var n = e.map(function(e) {
                            return {
                                id: e.id,
                                emotes: Object(E.b)(e.emotes)
                            }
                        });
                        t.setState({
                            hydratedEmotes: n
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.emotes && this.props.emotes !== e.emotes && this.hidrateEmotes(e.emotes)
                }, t.prototype.componentWillMount = function() {
                    this.hidrateEmotes(this.props.emotes)
                }, t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: r.func
                }, t
            }(s.Component);
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return C
        }), n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {}), n.d(t, "d", function() {
            return N
        }), n.d(t, "c", function() {
            return f
        })
    },
    cv4W: function(e, t, n) {
        e.exports = n.p + "assets/gift3-03f7dd6edab76b3567ff92bba447d5cb.png"
    },
    cxe8: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_SharePurchase_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isCommerceRevShareEnabled"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "purchaseTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "asin"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "imageThumbnail"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "40"
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteSets"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteSet"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "token"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "badge"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "quantity"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "inGameContents"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "imageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 433
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery Chat_SharePurchase_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nsettings {\nisCommerceRevShareEnabled\n}\nself {\npurchaseTokens {\nid\ntitle\nasin\nimageThumbnail: imageURL(width: 40)\nimageURL\nemoteSets {\nid\nemoteSet {\nid\nemotes {\nid\ntoken\n}\n}\n}\nbadges {\nid\nbadge{\n...badge\n}\n}\nbits {\nid\nquantity\n}\ninGameContents {\nid\nimageURL(width: 30)\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = i
    },
    dQj3: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = [];
            return e.forEach(function(e) {
                t[e.from] = {
                    startIndex: e.from,
                    endIndex: e.to + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(o.e)(e.emoteID, 1),
                                "2x": Object(o.e)(e.emoteID, 2),
                                "4x": Object(o.e)(e.emoteID, 4)
                            }
                        }
                    }
                }
            }), t
        }
        t.b = i, t.a = function(e, t, n) {
            var c = i(e.body.emotes),
                d = e.badges.reduce(function(e, t) {
                    return e[t.setID] = t.version, e
                }, {});
            return {
                type: s.a.Post,
                id: e.id,
                badges: d,
                bits: e.bitsUsed,
                timestamp: 0,
                deleted: !1,
                user: a.__assign({
                    userID: e.author.id,
                    userLogin: e.author.login,
                    userType: r.a.User,
                    color: e.authorColor
                }, Object(l.a)(e.authorName, e.author.login)),
                messageParts: Object(o.f)(e.body.content, c, e.bitsUsed, t, n, e.authorName)
            }
        }, t.c = function(e) {
            if (null === e.tags || null === e.message || null === e.bits_used) return null;
            var t = "ChatMessage:" + e.tags.msg_id;
            return {
                __typename: "ChatMessage",
                "Symbol(id)": t,
                id: e.tags.msg_id,
                authorName: e.tags.display_name,
                authorColor: e.tags.color,
                author: {
                    __typename: "User",
                    "Symbol(id)": "User:" + e.user_id,
                    id: e.user_id,
                    login: e.username
                },
                body: {
                    __typename: "MessageBody",
                    "Symbol(id)": "$" + t + ".body",
                    content: e.message,
                    emotes: e.tags.emotes.map(function(e, n) {
                        return {
                            __typename: "EmbeddedEmote",
                            "Symbol(id)": t + ".body.emotes." + n,
                            emoteID: e.id.toString(),
                            from: e.start,
                            to: e.end,
                            setID: e.set
                        }
                    })
                },
                badges: e.tags.badges.map(function(e, n) {
                    return {
                        __typename: "Badge",
                        "Symbol(id)": t + ".badges." + n,
                        setID: e.badge_set_id,
                        version: e.badge_set_version
                    }
                }),
                bitsUsed: e.bits_used
            }
        };
        var a = n("TToO"),
            r = n("6Agf"),
            s = n("qkCi"),
            o = n("l21v"),
            l = n("e1CU")
    },
    dVd7: function(e, t) {},
    daN3: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("yDzg"),
            l = n("CSlQ"),
            c = n("Odds"),
            d = n("lK86"),
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasPopupExperiment: !1
                    }, t.setPopupExperiment = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, r.n.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP")];
                                    case 1:
                                        return e = t.sent(), this.setState({
                                            hasPopupExperiment: "yes" === e
                                        }), [2]
                                }
                            })
                        })
                    }, t.handleClick = function() {
                        return t.openCheckout(), t.props.onClick && t.props.onClick()
                    }, t.openCheckout = function() {
                        t.state.hasPopupExperiment && t.props.checkoutURL && t.props.giftRecipient && window.open(Object(o.a)(t.props.checkoutURL, {
                            recipient: t.props.giftRecipient,
                            ref: "gift-subscribe-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.setPopupExperiment()
                }, t.prototype.render = function() {
                    var e = this.props.checkoutURL ? Object(r.d)("Buy Gift Subscription", "GiftSubscribeButton") : Object(r.d)("Gift Subscription", "GiftSubscribeButton"),
                        t = !!(this.props.data && this.props.data.user && this.props.data.user.self) && this.props.data.user.self.canGift,
                        n = this.props.checkoutURL && this.props.giftRecipient ? Object(o.a)(this.props.checkoutURL, {
                            recipient: this.props.giftRecipient
                        }) : "";
                    return a.createElement(c.u, {
                        targetBlank: !0,
                        disabled: !t,
                        onClick: this.handleClick,
                        linkTo: this.state.hasPopupExperiment ? void 0 : n,
                        "data-test-selector": "gift-subscribe-button",
                        purchase: this.props.purchase
                    }, this.props.buttonMessage || e)
                }, t = i.__decorate([Object(l.c)("GiftSubscribeButton", {
                    autoReportInteractive: !0
                }), Object(s.a)(d, {
                    options: function(e) {
                        return {
                            variables: {
                                recipientLogin: e.giftRecipient,
                                subProductId: e.subProductId
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.giftRecipient || !e.subProductId
                    }
                })], t)
            }(a.Component);
        n.d(t, !1, function() {
            return "gift-subscribe-button"
        }), n.d(t, "a", function() {
            return u
        })
    },
    djIP: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return r
        });
        var i;
        ! function(e) {
            e.Spam = "Spam", e.Harassment = "Harassment"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e.Whisper = "WHISPER", e.Chat = "CHAT"
        }(r || (r = {}))
    },
    e1CU: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            var n = e,
                i = !1;
            return n ? function(e) {
                return e.split("").map(function(e) {
                    return e.charCodeAt(0) > 127
                }).reduce(function(e, t) {
                    return e || t
                })
            }(n) && (i = !0) : n = t, {
                userDisplayName: n,
                isIntl: i
            }
        }
    },
    e9ZN: function(e, t) {},
    emkL: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            s = n("Odds"),
            o = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onHistoryChange = function(e) {
                        n.setState({
                            currentPathname: e.pathname
                        })
                    }, n.shouldShow = function() {
                        return n.props.link && n.state.currentPathname !== n.props.link.pathname
                    }, n.state = {
                        currentPathname: location.pathname
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = r.n.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten()
                }, t.prototype.render = function() {
                    return this.props.link && this.shouldShow() ? a.createElement(s.u, {
                        linkTo: this.props.link,
                        onClick: this.props.onClick,
                        overlay: this.props.shouldHollowOverlay,
                        size: s.x.Small,
                        tabIndex: -1,
                        type: this.props.shouldHollowOverlay ? s.z.Hollow : s.z.Default
                    }, Object(r.d)("Join", "JoinButton")) : null
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return o
        })
    },
    f1ZS: function(e, t) {},
    g7wA: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return c.createElement("a", {
                key: e,
                className: "chat-line__message--link",
                href: t.content.url,
                target: "_blank",
                rel: "noreferrer noopener"
            }, t.content.displayText)
        }

        function a(e, t, n) {
            var a = null,
                r = e.reduce(function(r, s, o) {
                    switch (s.type) {
                        case C.a.Text:
                            var l = o > 0;
                            return r.concat(function(e, t, n, i, a) {
                                var r = [],
                                    s = "";
                                i && (s = s.concat(" "));
                                var o = e.content.split(/\s+/);
                                return o.forEach(function(e, i) {
                                    if ("" !== e) {
                                        var a = i < o.length - 1 ? e + " " : e;
                                        (t || n) && function(e, t, n) {
                                            var i = e.trim().toLowerCase();
                                            return t && i === t.toLowerCase() || n && i === n.toLowerCase()
                                        }(e, t, n) ? (r = (r = r.concat(s)).concat(c.createElement(_.V, {
                                            className: "chat-line__message--mention-recipient",
                                            display: _.H.InlineFlex,
                                            key: "" + e + i,
                                            "data-a-target": "chat-message-mention"
                                        }, a)), s = "") : s = s.concat(a)
                                    }
                                }), r = r.concat(s), c.createElement("span", {
                                    key: "chat-line__message-text-" + a,
                                    "data-a-target": "chat-message-text"
                                }, r)
                            }(s, t, n, l, o));
                        case C.a.Mention:
                            var d = "";
                            return function(e) {
                                return e.content && e.content.sender
                            }(s) && t && s.content.sender.toLowerCase() === t.toLowerCase() ? d = "chat-line__message--mention-sender" : function(e) {
                                return e.content && e.content.recipient
                            }(s) && t && s.content.recipient.toLowerCase() === t.toLowerCase() && (d = "chat-line__message--mention-recipient"), r.concat(c.createElement(_.V, {
                                className: d,
                                display: _.H.InlineFlex,
                                key: o,
                                "data-a-target": "chat-message-mention"
                            }, "@" + s.content.recipient));
                        case C.a.Link:
                            return r = r.concat(i(o, s)), e.length > o + 1 && e[o + 1].type === C.a.Link && r.push(" "), r;
                        case C.a.Emote:
                            return r = r.concat(c.createElement(b.a, {
                                key: o,
                                emote: s.content
                            })), e.length > o + 1 && e[o + 1].type === C.a.Emote && r.push(" "), r;
                        case C.a.ClipLink:
                            return a ? r.concat(i(o, s)) : (a = c.createElement(k.a, {
                                key: o,
                                slug: s.content.slug
                            }), r);
                        case C.a.VideoLink:
                            return a ? r.concat(i(o, s)) : (a = c.createElement(y.a, {
                                key: o,
                                id: s.content.id,
                                url: s.content.url
                            }), r);
                        default:
                            return r.concat(c.createElement("span", {
                                key: o
                            }))
                    }
                }, []);
            return a && (r = r.concat(a)), r
        }

        function r(e) {
            var t = Object(h.a)("https://twitch.amazon.com/prime", {
                ref: "subscriptionMessage",
                channel: e
            });
            return c.createElement("a", {
                className: "chat-line__subscribe--prime",
                href: t,
                target: "_blank",
                rel: "noopener"
            }, Object(d.d)("Twitch Prime", "ChatLine"))
        }

        function s(e, t) {
            return Object(d.d)("{userLogin} just subscribed with {service}!", {
                userLogin: e,
                service: t
            }, "ChatLine")
        }

        function o(e, t) {
            return Object(d.d)("{userLogin} just subscribed with a {subTier} sub!", {
                userLogin: e,
                subTier: t
            }, "ChatLine")
        }

        function l(e) {
            return c.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, function(e) {
                var t = e.getHours() % 12;
                0 === t && (t = 12);
                var n = e.getMinutes(),
                    i = n.toString();
                return n < 10 && (i = "0" + i), t + ":" + i
            }(new Date(e)))
        }
        t.e = function() {
            return c.createElement("span", {
                key: "thankyou"
            }, Object(d.d)("Thank you for your feedback!", "ChatLine"))
        }, t.h = a, t.i = function(e) {
            if (e.type === S.a.Ban) return e.reason ? c.createElement("span", {
                className: "chat-line__moderation--ban-with-reason"
            }, Object(d.d)("{userLogin} has been banned. Reason: {reason}", {
                userLogin: e.userLogin,
                reason: e.reason
            }, "ChatLine")) : c.createElement("span", {
                className: "chat-line__moderation--ban"
            }, Object(d.d)("{userLogin}  is now banned from this room.", {
                userLogin: e.userLogin
            }, "ChatLine"));
            if (e.reason && e.duration) {
                var t = Object(d.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                    duration: e.duration,
                    reason: e.reason,
                    userLogin: e.userLogin
                }, "ChatLine");
                return c.createElement("span", {
                    className: "chat-line__moderation--timeout-with-reason"
                }, t)
            }
            return e.duration ? c.createElement("span", {
                className: "chat-line__moderation--timeout"
            }, Object(d.d)("{userLogin} has been timed out for {duration} seconds.", {
                userLogin: e.userLogin,
                duration: e.duration
            }, "ChatLine")) : void 0
        }, t.q = function(e) {
            return e.isPrime ? c.createElement("span", null, s(e.userLogin, r(e.channel))) : c.createElement("span", null, o(e.userLogin, e.tier))
        }, t.p = function(e) {
            return "custom" === e.tier ? c.createElement("span", null, function(e, t) {
                return Object(d.d)("{userLogin} gifted a subscription to {recipient}!", {
                    userLogin: e,
                    recipient: t
                }, "ChatLine")
            }(e.userLogin, e.recipient)) : c.createElement("span", null, function(e, t, n) {
                return Object(d.d)("{userLogin} gifted a {subTier} sub to {recipient}!", {
                    userLogin: e,
                    subTier: t,
                    recipient: n
                }, "ChatLine")
            }(e.userLogin, e.tier, e.recipient))
        }, t.a = function(e) {
            var t = e.daysLeft;
            0 === t && (t = e.hoursLeft);
            var n = {
                bitsTotal: c.createElement("strong", null, Object(g.e)(e.total, {
                    style: "currency",
                    currency: "USD"
                })),
                charityName: c.createElement("strong", null, e.charityName),
                learnMoreURL: c.createElement("a", {
                    href: e.learnMore,
                    target: "_blank"
                }, e.learnMore),
                hashtag: c.createElement("strong", null, e.hashtag),
                timeRemaining: Object(g.e)(t)
            };
            return c.createElement("span", null, 0 === e.daysLeft ? function(e) {
                return Object(d.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                    bitsTotal: e.bitsTotal,
                    charityName: e.charityName,
                    timeRemaining: e.timeRemaining,
                    hashtag: e.hashtag,
                    learnMoreURL: e.learnMoreURL
                }, "ChatLine")
            }(n) : function(e) {
                return Object(d.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                    bitsTotal: e.bitsTotal,
                    charityName: e.charityName,
                    timeRemaining: e.timeRemaining,
                    hashtag: e.hashtag,
                    learnMoreURL: e.learnMoreURL
                }, "ChatLine")
            }(n))
        }, t.l = function(e, t, n, i, u) {
            if (e.user) {
                var p = null;
                e.badges && (p = c.createElement(f.b, {
                    badgeSets: u,
                    badgesToRender: e.badges
                }));
                var m = e.isPrime ? s(e.user.userDisplayName, r(e.channel)) : o(e.user.userDisplayName, e.tier),
                    h = [c.createElement("span", {
                        key: "chat--resubbed"
                    }, m, c.createElement("span", {
                        key: "sub-separator"
                    }, " "), Object(d.d)("{userLogin} subscribed for {months} months in a row!", {
                        userLogin: e.user.userDisplayName,
                        months: e.months
                    }, "ChatLine"))];
                if (e.messageParts && e.user && !e.deleted) {
                    var g = null;
                    t && e.timestamp && (g = l(e.timestamp)), h.push(c.createElement("div", {
                        key: "resub-message",
                        className: "chat-line__subscribe--message"
                    }, g, p, c.createElement(v.a, {
                        userData: e.user
                    }), c.createElement("span", {
                        key: "separator"
                    }, " : "), a(e.messageParts, n, i)))
                }
                return h
            }
            return null
        }, t.n = function(e) {
            var t = e.enabled ? Object(d.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                length: e.length
            }, "ChatLine") : Object(d.d)("This room is no longer in slow mode.", "ChatLine");
            return c.createElement("span", null, t)
        }, t.j = function(e) {
            return c.createElement("span", null, e.message)
        }, t.g = function(e) {
            return c.createElement("span", null, e.message)
        }, t.m = function(e) {
            var t;
            if (e.length > 0) {
                var n = e.join(", ");
                t = Object(d.d)("The moderators of this room are: {moderatorList}", {
                    moderatorList: n
                }, "ChatLine")
            } else t = Object(d.d)("There are no moderators of this room.", "ChatLine");
            return c.createElement("span", null, t)
        }, t.f = function(e) {
            if (e.enabled) {
                var t = 0 === e.length ? Object(d.d)("This room is in followers-only mode.", "ChatLine") : Object(d.d)("This room is now in {length} followers-only mode.", {
                    length: Object(m.a)(60 * e.length)
                }, "ChatLine");
                return c.createElement("span", null, t)
            }
            return c.createElement("span", null, Object(d.d)("This room is no longer in followers-only mode.", "ChatLine"))
        }, t.d = function(e) {
            return e.enabled ? c.createElement("span", null, Object(d.d)("This room is now in emote-only mode.", "ChatLine")) : c.createElement("span", null, Object(d.d)("This room is no longer in emote-only mode.", "ChatLine"))
        }, t.o = function(e) {
            var t = e.enabled ? Object(d.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(d.d)("This room is no longer in subscriber-only mode.", "ChatLine");
            return c.createElement("span", null, t)
        }, t.b = function() {
            return c.createElement("span", null, Object(d.d)("Chat was cleared by a moderator", "ChatLine"))
        }, t.r = l, t.s = function(e) {
            return c.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, function(e, t) {
                void 0 === t && (t = {});
                var n = d.n.intl.getLanguageCode() || "en";
                return Intl.DateTimeFormat(n, t).format(e)
            }(new Date(e), {
                hour: "numeric",
                minute: "numeric"
            }))
        }, t.t = function() {
            return c.createElement("span", null, Object(d.d)("The raid has been cancelled.", "RaidCancelMessage"))
        }, t.c = function(e) {
            return c.createElement(_._19, {
                borderMarked: !0,
                borderBottom: !1
            }, c.createElement(_.V, {
                className: "chat-line__status",
                display: _.H.Flex,
                alignItems: _.c.Center,
                flexWrap: _.K.NoWrap
            }, c.createElement(_.Q, {
                flexShrink: 0
            }, c.createElement("img", {
                src: p.a,
                height: "32",
                width: "32"
            })), c.createElement(_.V, {
                margin: {
                    left: .5
                }
            }, Object(d.d)("<x:boldpurple>{userName}</x:boldpurple>'s Cheer unlocked gifts for <x:bold>{numberOfGifts, number} others</x:bold>!", {
                userName: e.message.user.userDisplayName,
                numberOfGifts: e.selectedCount,
                "x:boldpurple": function(e) {
                    return c.createElement(_._23, {
                        type: _._28.Span,
                        bold: !0,
                        color: _.F.Link
                    }, e)
                },
                "x:bold": function(e) {
                    return c.createElement("strong", null, e)
                }
            }, "Crates"))), c.createElement(_._19, {
                className: "chat-line__status",
                background: _.m.Alt2
            }, c.createElement(_._23, {
                bold: !0,
                color: _.F.Link
            }, Object(d.d)("Cheer 250+ to unlock gifts for others in chat!", "Crates"))))
        }, t.k = function(e, t, n) {
            return 0 === n ? Object(d.d)("<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}!</x:bold>", {
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return c.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage") : Object(d.d)("{numCrates, plural, one {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened a <x:bold>Twitch Crate!</x:bold>} other {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened # <x:bold>Twitch Crates!</x:bold>}}", {
                numCrates: n,
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return c.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage")
        };
        var c = n("U7vG"),
            d = (n.n(c), n("6sO2")),
            u = n("cv4W"),
            p = n.n(u),
            m = n("FsFC"),
            h = n("yDzg"),
            g = n("J4ib"),
            f = n("3T7g"),
            v = n("5Nu7"),
            b = n("hXeO"),
            k = n("5vPJ"),
            y = n("kBA+"),
            S = n("qkCi"),
            C = n("mwvJ"),
            _ = n("Odds")
    },
    gwjw: function(e, t) {},
    h4Qz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "participants"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "spamInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "lastMarkedNotSpamAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "likelihood"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isMuted"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isArchived"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 449
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_WhisperThread($id: ID! $cursor: Cursor) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nparticipants {\nid\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\nisMuted\nisArchived\nmessages(first: 20 after: $cursor) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\nunreadMessagesCount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    hXeO: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("U7vG"),
            a = (n.n(i), n("8RKZ")),
            r = function(e) {
                var t, n = e.emote,
                    r = n.alt || "";
                return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                    className: "chat-line__message--cheer-amount",
                    style: {
                        color: n.cheerColor
                    }
                }, n.cheerAmount)), i.createElement(a.a, {
                    alt: r,
                    cheerText: t,
                    className: "chat-line__message--emote",
                    srcKey: "1x",
                    srcSet: n.images
                })
            }
    },
    hcyD: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return c
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            s = n("l7/s"),
            o = (n.n(s), n("QFW6")),
            l = this,
            c = function(e) {
                return i.__awaiter(l, void 0, void 0, function() {
                    var t, n, l, c;
                    return i.__generator(this, function(d) {
                        switch (d.label) {
                            case 0:
                                t = null, d.label = 1;
                            case 1:
                                return d.trys.push([1, 3, , 4]), [4, a.n.apollo.client.query({
                                    query: s,
                                    variables: {
                                        id: e.channelID
                                    }
                                })];
                            case 2:
                                return t = d.sent(), [3, 4];
                            case 3:
                                return n = d.sent(), a.i.error(n, "ChatEvent query failed."), [3, 4];
                            case 4:
                                return t && t.data || a.i.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), l = t && t.data && t.data.user || null, c = i.__assign({}, Object(o.a)(e), {
                                    broadcast_id: a.m.getVideoPlayerTrackingData().broadcastID,
                                    channel_id: e.channelID,
                                    game: l && l.stream && l.stream.game && l.stream.game.name,
                                    live: !!(l && l.stream && l.stream.id.length > 0),
                                    partner: l && l.isPartner || !1,
                                    play_session_id: a.m.getVideoPlayerTrackingData().playSessionID,
                                    player: e.player,
                                    ritual_nca: e.fromNewChatterRitual || !1,
                                    sub_only_mode: e.subOnlyMode
                                }), a.m.track(r.SpadeEventType.Chat, c), [2]
                        }
                    })
                })
            }
    },
    hvzu: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = function(e) {
                var t = e.split(/\s+/),
                    n = [];
                return t.forEach(function(e, i) {
                    var a = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)([^\w./@#%&()\-+=:?~]|\s|$)/g,
                        s = a.exec(e);
                    if (s) {
                        var o = s.index,
                            l = !1,
                            c = !1,
                            d = s[1];
                        d && (o += 1, /\s/.test(d) || (l = !0)), 0 !== o && n.push({
                            type: r.Text,
                            content: (c ? " " : "") + e.slice(0, o) + (l ? " " : "")
                        }), c = !1;
                        var u = a.lastIndex,
                            p = s[3];
                        p && (u -= 1, /\s/.test(p) || (c = !0));
                        var m = e.slice(o, u);
                        if (m.indexOf("@") > -1 && (-1 === m.indexOf("/") || m.indexOf("@") < m.indexOf("/"))) n.push({
                            type: r.Link,
                            content: {
                                displayText: m,
                                url: "mailto:" + m,
                                shouldOpenInNewTab: !1
                            }
                        });
                        else {
                            var h = (s[2] ? "" : "https://") + e.slice(o, u);
                            n.push({
                                type: r.Link,
                                content: {
                                    displayText: e.slice(o, u),
                                    shouldOpenInNewTab: !0,
                                    url: h
                                }
                            })
                        }
                        var g = e.slice(u),
                            f = "";
                        i < t.length - 1 && (f = " "), g && n.push({
                            type: r.Text,
                            content: (c ? " " : "") + g + f
                        })
                    } else {
                        var v = n.length && n[n.length - 1];
                        if (f = "", i < t.length - 1 && (f = " "), v && v.type === r.Text) v.content += e + f;
                        else {
                            var b = "";
                            i && (b = " "), n.push({
                                type: r.Text,
                                content: b + e + f
                            })
                        }
                    }
                }), n
            }(e);
            return t.reduce(function(e, n, i) {
                if (n.type === r.Text) e.push(n.content);
                else if (n.type === r.Link) {
                    t[i - 1] && t[i - 1].type === r.Link && e.push(" "), e.push(s.createElement("a", {
                        key: i,
                        href: n.content.url,
                        target: "__blank"
                    }, n.content.displayText))
                }
                return e
            }, [])
        }

        function a(e, t, n) {
            var a = [],
                r = 0,
                u = Object(c.d)(e);
            if (t.forEach(function(t) {
                    var n = t.from,
                        o = t.to,
                        p = {
                            themed: !1,
                            sources: {
                                "1x": Object(c.e)("" + t.emoteID, 1),
                                "2x": Object(c.e)("" + t.emoteID, 2),
                                "4x": Object(c.e)("" + t.emoteID, 4)
                            }
                        };
                    if (n > r) {
                        var m = u ? u.slice(r, n).join("") : e.slice(r, n);
                        a.push(s.createElement("span", {
                            key: "str-" + r,
                            className: "thread-message__message--part"
                        }, i(m)))
                    }
                    var h = u ? u.slice(n, o + 1).join("") : e.slice(n, o + 1);
                    a.push(s.createElement(l.a, {
                        key: "emote-" + r,
                        tooltipDirection: d._33.Top,
                        className: "thread-message__message--emote",
                        srcSet: p,
                        srcKey: "1x",
                        alt: h
                    })), r = o + 1
                }), r < e.length) {
                var p = u ? u.slice(r, u.length).join("") : e.slice(r, e.length);
                a.push(s.createElement("span", {
                    key: "str-" + r,
                    className: "thread-message__message--part"
                }, i(p)))
            }
            if (n) {
                var m = Object(o.d)("edited", "ThreadMessage"),
                    h = Object(o.d)("{timestamp, date, full} {timestamp, time, long}", {
                        timestamp: new Date(n)
                    }, "ThreadMessage");
                a.push(s.createElement(d.Q, {
                    key: "editedAt",
                    margin: {
                        left: 1
                    }
                }, s.createElement(d._23, {
                    type: d._28.Span,
                    className: "thread-message__message--edited",
                    title: h,
                    color: d.F.Alt2
                }, "(" + m + ")")))
            }
            return a
        }
        var r, s = n("U7vG"),
            o = n("6sO2"),
            l = n("8RKZ"),
            c = n("l21v");
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Link = 1] = "Link"
        }(r || (r = {}));
        var d = n("Odds");
        t.a = a, n.d(t, "f", function() {
            return u
        }), n.d(t, "e", function() {
            return p
        }), n.d(t, "d", function() {
            return m
        }), n.d(t, "c", function() {
            return h
        }), n.d(t, "b", function() {
            return g
        });
        var u = function(e) {
                var t = a(e.content, e.emotes, e.editedAt);
                if (e.deletedAt) return null;
                var n = e.from && e.from.chatColor || "",
                    i = e.from && e.from.displayName || s.createElement(d._23, {
                        type: d._28.Span,
                        italic: !0
                    }, Object(o.d)("Unknown", "ThreadMessage"));
                return s.createElement(d.V, {
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, s.createElement("span", {
                    className: "thread-message__message--user-name",
                    style: {
                        color: n
                    }
                }, i), s.createElement("span", null, ": "), t)
            },
            p = function() {
                return s.createElement(d.V, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(o.d)("Please don't share passwords or personal information.", "whispers"))
            },
            m = function(e) {
                var t = new Date,
                    n = Object(o.d)("Today, {timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    i = Object(o.d)("{timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    a = e.timestamp.toDateString() === t.toDateString() ? n : i;
                return s.createElement(d.V, {
                    padding: {
                        y: 1
                    },
                    textAlign: d._24.Center
                }, "" + a)
            },
            h = function(e) {
                return s.createElement(d.V, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, s.createElement(d._23, {
                    type: d._28.Span,
                    color: d.F.Alt2
                }, e.content))
            },
            g = function() {
                return s.createElement(d.V, {
                    textAlign: d._24.Center,
                    padding: {
                        y: .5
                    }
                }, Object(o.d)("New Whispers", "whispers"))
            }
    },
    iMOk: function(e, t, n) {
        "use strict";

        function i(e) {
            var t, n = Object(r.d)("{bitsAmount} Bits", {
                bitsAmount: e.count.toString()
            }, "Bits--BitsCount");
            if (e.withImage) {
                var i = e.bitsConfig.indexedActions[o.f];
                i || (i = Object(c.b)());
                var u = i.orderedTiers.find(function(t) {
                    return t.bits <= e.count
                });
                if (u) {
                    var p = Object(l.b)(u);
                    return void 0 !== e.themeOverride && (e.themeOverride === s.a.Light ? p.dark = p.light : p.light = p.dark), t = a.createElement(d.a, {
                        className: "bits-count--img",
                        sources: p
                    }), a.createElement("strong", {
                        className: "bits-count",
                        "data-a-target": "bits-count"
                    }, a.createElement("span", null, t, " ", e.withText ? n : ""))
                }
            }
            return a.createElement("strong", {
                className: "bits-count",
                "data-a-target": "bits-count"
            }, a.createElement("span", null, n))
        }
        var a = n("U7vG"),
            r = n("6sO2"),
            s = n("NXs7"),
            o = n("3iBR"),
            l = n("iydZ"),
            c = n("CFVp"),
            d = n("qe65");
        n("1pvm");
        n.d(t, "a", function() {
            return i
        })
    },
    iWdz: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsCard_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "recentMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "bitsBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "totalBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "nextBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "progress"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "current"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "next"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "teams"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 381
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_Bits($name: ID!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nrecentMinimumBits\nevent\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = i
    },
    iYmP: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 131
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ieBa: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("TToO"),
            r = n("U7vG"),
            s = n("rCmJ"),
            o = n("6sO2"),
            l = n("Odds"),
            c = function(e) {
                return r.createElement(l.v, {
                    icon: l._11.Emoticons,
                    ariaLabel: Object(o.d)("Emote picker", "EmotePickerButton"),
                    type: l.w.Secondary,
                    onClick: e.onClick,
                    "data-a-target": "emote-picker-button"
                })
            },
            d = n("P+j/"),
            u = n("CSlQ"),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasInteracted: !1,
                        isEmotePickerMenuVisible: !1,
                        isEmotePickerButtonVisible: !1
                    }, t.onClickOut = function() {
                        t.setState({
                            isEmotePickerMenuVisible: !1
                        })
                    }, t.onClickEmote = function(e, n) {
                        t.props.onClickEmote && t.props.onClickEmote(e, n)
                    }, t.toggleEmotePicker = function() {
                        t.setState(function(e) {
                            return {
                                isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                            }
                        })
                    }, t.onEmotePickerDataLoaded = function(e) {
                        e && t.setState({
                            isEmotePickerButtonVisible: !0
                        })
                    }, t.onInteraction = function() {
                        return t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.isEmotePickerButtonVisible && (e = r.createElement(c, {
                        onClick: this.toggleEmotePicker
                    }));
                    var t = null;
                    this.hasInteractedOrPageload && (t = r.createElement(d.a, {
                        channelOwnerID: this.props.channelOwnerID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.toggleEmotePicker,
                        visible: this.state.isEmotePickerMenuVisible,
                        direction: this.props.direction
                    }));
                    var n = r.createElement(l.V, a.__assign({
                        className: "emote-picker-and-button"
                    }, this.layoutProps), e, t);
                    return this.props.shouldCloseOnClickOut ? r.createElement(s.a, {
                        onClickOut: this.onClickOut
                    }, n) : n
                }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                    get: function() {
                        return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "layoutProps", {
                    get: function() {
                        var e = {
                            attachTop: !!this.props.attachTop,
                            attachRight: !!this.props.attachRight,
                            attachBottom: !!this.props.attachBottom,
                            attachLeft: !!this.props.attachLeft,
                            padding: this.props.padding
                        };
                        return this.props.position && this.props.position in l._4 && (e.position = this.props.position), e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            m = Object(u.c)("EmotePicker")(p),
            h = Object(i.a)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(m),
            g = n("nEoF");
        n.d(t, "a", function() {
            return h
        }), n.d(t, "c", function() {
            return d.a
        }), n.d(t, !1, function() {
            return g.b
        }), n.d(t, !1, function() {
            return g.a
        }), n.d(t, "b", function() {
            return c
        })
    },
    imaO: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RedeemNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemRitualTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "redeemRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 182
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RedeemNewChatterToken($input: RedeemRitualTokenInput!) {\nredeemRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("j/3B").definitions)), e.exports = i
    },
    iydZ: function(e, t, n) {
        "use strict";

        function i(e, t, n) {
            void 0 === n && (n = !0);
            var i = n ? "animated" : "static";
            return t ? {
                themed: !0,
                dark: (a = {}, a[t + "x"] = e.indexedImages.DARK[i].get(t), a),
                light: (r = {}, r[t + "x"] = e.indexedImages.LIGHT[i].get(t), r)
            } : {
                themed: !0,
                dark: {
                    "1x": e.indexedImages.DARK[i].get(1),
                    "1.5x": e.indexedImages.DARK[i].get(1.5),
                    "2x": e.indexedImages.DARK[i].get(2),
                    "3x": e.indexedImages.DARK[i].get(3),
                    "4x": e.indexedImages.DARK[i].get(4)
                },
                light: {
                    "1x": e.indexedImages.LIGHT[i].get(1),
                    "1.5x": e.indexedImages.LIGHT[i].get(1.5),
                    "2x": e.indexedImages.LIGHT[i].get(2),
                    "3x": e.indexedImages.LIGHT[i].get(3),
                    "4x": e.indexedImages.LIGHT[i].get(4)
                }
            };
            var a, r
        }
        n.d(t, "a", function() {
            return o
        }), t.c = function(e, t) {
            var n = [],
                o = t.indexedActions,
                l = new RegExp("^(" + Object.keys(o).join("|") + ")(\\d+)$", "i"),
                c = e.split(/\s+/);
            return c.forEach(function(e, t) {
                var d = l.exec(e);
                if (d) {
                    var u = d[1].toLowerCase(),
                        p = +d[2],
                        m = o[u];
                    if (m || u !== a.f || (m = Object(r.b)()), m) {
                        var h = m.orderedTiers.find(function(e) {
                            return e.bits <= p
                        });
                        !h && p && (h = m.orderedTiers[0]), h && n.push({
                            type: s.a.Emote,
                            content: {
                                images: i(h),
                                alt: m.prefix,
                                cheerAmount: p,
                                cheerColor: h.color
                            }
                        })
                    }
                } else {
                    var g = n.length && n[n.length - 1],
                        f = "";
                    if (t < c.length - 1 && (f = " "), g && g.type === s.a.Text) g.content += e + f;
                    else {
                        var v = "";
                        t && (v = " "), n.push({
                            type: s.a.Text,
                            content: v + e + f
                        })
                    }
                }
            }), n
        }, t.b = i;
        var a = n("3iBR"),
            r = n("CFVp"),
            s = n("mwvJ"),
            o = {
                indexedActions: {},
                orderedActions: []
            }
    },
    "j/3B": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualToken"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RitualToken"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "expiresAt"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "status"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 64
            }
        };
        n.loc.source = {
            body: "fragment ritualToken on RitualToken {\nid\nexpiresAt\nstatus\ntype\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "j7/Y": function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                var n = function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.tracked = !1, i.referenceTracking = {}, i.trackPageview = function() {
                            if (!(i.tracked || e.skip && e.skip(i.props))) {
                                i.tracked = !0;
                                var t = {};
                                "function" == typeof e.properties ? t = e.properties(i.props) : e.properties && (t = a.__assign({}, e.properties));
                                var n = a.__assign({}, i.props);
                                n.location && n.location.state && (t.medium = n.location.state.medium, t.content = n.location.state.content, t.content_index = n.location.state.content_index);
                                var r = i.referenceTracking,
                                    s = r.content,
                                    o = r.medium,
                                    c = r.content_index;
                                l.n.tracking.trackPageview(a.__assign({
                                    content: s,
                                    medium: o,
                                    content_index: c,
                                    location: e.location
                                }, t))
                            }
                        }, l.i.debug("pageViewTracking", e), t.rootLatencyTracker ? t.rootLatencyTracker.setLocation(e.location) : l.i.warn("No latency tracker exists! This means no data will be sent to Spade.", e), i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        var e = this;
                        this.referenceTracking = this.stripTTParams(this.props.history.location), this.trackPageview(), this.props.history.listen(function(t, n) {
                            "REPLACE" !== n && (e.tracked = !1, e.referenceTracking = {})
                        })
                    }, i.prototype.componentDidUpdate = function() {
                        this.trackPageview()
                    }, i.prototype.render = function() {
                        return s.createElement(t, a.__assign({}, this.props))
                    }, i.prototype.stripTTParams = function(e) {
                        var t = "" !== e.search ? r.parse(e.search) : {},
                            n = {
                                content: t.tt_content,
                                content_index: t.tt_content_index,
                                medium: t.tt_medium
                            };
                        if (delete t.tt_content, delete t.tt_content_index, delete t.tt_medium, n.medium || n.content) {
                            var i = "",
                                a = r.stringify(t);
                            a.length > 0 && (i = "?" + a), this.props.history.replace({
                                pathname: e.pathname,
                                hash: e.hash,
                                search: i
                            })
                        }
                        return n
                    }, i
                }(s.Component);
                return Object(o.f)(n)
            }
        }
        var a = n("TToO"),
            r = n("OAwv"),
            s = n("U7vG"),
            o = n("F8kA"),
            l = n("6sO2");
        n.d(t, "a", function() {
            return i
        })
    },
    jF7o: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (e) var n = setInterval(function() {
                var i = !1,
                    a = !1;
                try {
                    i = e.closed, a = !!e.success
                } catch (e) {}
                if (i || a) {
                    t(a);
                    try {
                        e.close()
                    } catch (e) {}
                    clearInterval(n)
                }
            }, 500);
            else i.i.warn("[onPopupClose] Attempted to observe a window that failed to open.")
        };
        var i = n("6sO2")
    },
    jML9: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 43
            }
        };
        n.loc.source = {
            body: "query RaidNotification_User {\nuser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jPU6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jYA1: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            s = 3,
            o = n("CwIZ"),
            l = n("Odds"),
            c = "subscribe-button__subscribe-with-prime",
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribing: !1,
                        primeSubFailure: !0
                    }, t.handleStartPrimeTrialClick = function() {
                        t.props.reportSubMenuAction({
                            action: o.a.ClickSignupForPrime
                        })
                    }, t.handleSubWithPrimeClick = function() {
                        t.setState({
                            isSubscribing: !0
                        }, function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e;
                                return i.__generator(this, function(t) {
                                    switch (t.label) {
                                        case 0:
                                            return t.trys.push([0, 3, 4, 5]), this.props.authToken && this.props.userHasPrime && this.props.subLogin ? [4, function(e, t) {
                                                return i.__awaiter(this, void 0, void 0, function() {
                                                    var n, a, o, l, c;
                                                    return i.__generator(this, function(i) {
                                                        switch (i.label) {
                                                            case 0:
                                                                n = "https://api.twitch.tv/api/premium/credit/spend_token?channel_id=" + e, a = 1, i.label = 1;
                                                            case 1:
                                                                if (!(a <= s)) return [3, 7];
                                                                i.label = 2;
                                                            case 2:
                                                                return i.trys.push([2, 5, , 6]), [4, fetch(n, {
                                                                    method: "POST",
                                                                    headers: {
                                                                        "Client-ID": r.n.config.legacyClientID,
                                                                        Accept: "application/json; charset=UTF-8",
                                                                        "content-type": "application/json; charset=UTF-8",
                                                                        Authorization: "OAuth " + t
                                                                    }
                                                                })];
                                                            case 3:
                                                                return o = i.sent(), [4, o.body];
                                                            case 4:
                                                                return l = i.sent(), [2, l];
                                                            case 5:
                                                                if (c = i.sent(), a === s) throw c;
                                                                return [3, 6];
                                                            case 6:
                                                                return ++a, [3, 1];
                                                            case 7:
                                                                return [2]
                                                        }
                                                    })
                                                })
                                            }(this.props.subLogin, this.props.authToken)] : [3, 2];
                                        case 1:
                                            t.sent(), this.props.onSubscribedWithPrime(), t.label = 2;
                                        case 2:
                                            return [3, 5];
                                        case 3:
                                            return e = t.sent(), r.i.error(e, "Failed to subscribe with Prime", {
                                                subLogin: this.props.subLogin
                                            }), this.setState({
                                                isSubscribing: !1,
                                                primeSubFailure: !0
                                            }), [3, 5];
                                        case 4:
                                            return this.setState({
                                                isSubscribing: !1
                                            }), [7];
                                        case 5:
                                            return [2]
                                    }
                                })
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.isSubscribedWithPrime && this.props.canPrimeSubscribe;
                    if (!this.props.userHasPrime) {
                        var t = Object(r.d)("Start Your Free Trial", "SubscribeWithPrime");
                        return a.createElement(l.u, i.__assign({
                            ariaLabel: t,
                            "data-test-selector": c,
                            icon: l._11.Crown,
                            linkTo: r.a.tryPrimeURI,
                            onClick: this.handleStartPrimeTrialClick
                        }, Object(l._40)(this.props), {
                            targetBlank: !0
                        }), t)
                    }
                    if (this.props.isSubscribed && !e) {
                        var n = Object(r.d)("Subscribed", "SubscribeWithPrime");
                        return a.createElement(l.u, i.__assign({
                            ariaLabel: n,
                            "data-test-selector": c,
                            disabled: !0,
                            icon: l._11.Crown
                        }, Object(l._40)(this.props)), n)
                    }
                    if (!this.props.canPrimeSubscribe) {
                        var s = Object(r.d)("Not yet!", "SubscribeWithPrime");
                        return a.createElement(l.u, i.__assign({
                            ariaLabel: s,
                            "data-test-selector": c,
                            disabled: !0,
                            icon: l._11.Crown
                        }, Object(l._40)(this.props)), s)
                    }
                    var o = e ? Object(r.d)("Resubscribe Free", "SubscribeWithPrime") : Object(r.d)("Subscribe Free", "SubscribeWithPrime");
                    return a.createElement(l.u, i.__assign({
                        ariaLabel: o,
                        "data-test-selector": c,
                        disabled: this.state.isSubscribing,
                        icon: l._11.Crown,
                        state: this.state.isSubscribing ? l.y.Loading : l.y.Default,
                        onClick: this.handleSubWithPrimeClick
                    }, Object(l._40)(this.props)), o)
                }, t
            }(a.Component);
        n.d(t, !1, function() {
            return c
        }), n.d(t, "a", function() {
            return d
        })
    },
    jetF: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n("TToO"),
            a = n("U7vG"),
            r = (n.n(a), n("HM6l")),
            s = n("Odds"),
            o = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showBalloon: !!t.props.openByDefault,
                        hasInteracted: !!t.props.openByDefault
                    }, t.toggleBalloonId = Object(r.a)(), t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                showBalloon: !e.showBalloon,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.handleGlobalClick = function(e) {
                        e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.setState({
                            showBalloon: !1
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.onMouseEnter = function() {
                        t.state.hasInteracted || t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = a.Children.toArray(this.props.children);
                    if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                    var t = e[0],
                        n = e[1];
                    if (n.type !== s.p) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                    var r = a.cloneElement(t, {
                            onClick: this.handleButtonClick
                        }),
                        o = null;
                    (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (o = a.cloneElement(n, {
                        show: this.state.showBalloon
                    }));
                    var l = r;
                    return this.props.tooltipProps && (l = a.createElement(s._31, i.__assign({}, this.props.tooltipProps), r)), a.createElement(s.V, {
                        "data-toggle-balloon-id": this.toggleBalloonId,
                        display: this.props.display,
                        position: s._4.Relative
                    }, a.createElement("div", {
                        style: {
                            display: "inherit"
                        },
                        onMouseEnter: this.onMouseEnter,
                        "data-test-selector": "toggle-balloon-wrapper__mouse-enter-detector"
                    }, l), o)
                }, t.prototype.toggleBalloon = function(e) {
                    void 0 === e && (e = !this.state.showBalloon), this.setState({
                        showBalloon: e,
                        hasInteracted: !0
                    })
                }, t
            }(a.Component)
    },
    jxGs: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "c", function() {
            return o
        });
        var i = "AD",
            a = "BUNDLE",
            r = "first_time_purchase",
            s = "single_purchase",
            o = "black_friday_2017"
    },
    "kBA+": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("SZoP"),
            l = n("GxDs"),
            c = n("Odds"),
            d = n("s+oZ"),
            u = {
                ERROR: "video-chat-card-error"
            },
            p = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.video,
                        n = e.error,
                        i = e.loading;
                    if (n || t && !t.owner) return a.createElement(l.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "VideoChatCard"),
                            description: Object(r.d)("We couldn't find that video", "VideoChatCard")
                        }
                    });
                    if (i || !t) return a.createElement(l.a, null);
                    var s = a.createElement(c._23, null, Object(r.c)(new Date(t.publishedAt), "medium"), a.createElement("span", null, " · "), Object(o.a)(t.owner.login, t.owner.displayName));
                    return a.createElement(l.a, {
                        data: {
                            title: t.title,
                            description: s,
                            previewImageURL: t.previewThumbnailURL,
                            contentURL: this.props.url
                        }
                    })
                }, t
            }(a.Component),
            m = function(e) {
                return {
                    variables: {
                        videoID: e.id
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-first"
                }
            },
            h = Object(s.a)(d, {
                options: m
            })(p);
        n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    l21v: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return void 0 === t && (t = 15), "number" != typeof b[e] && (b[e] = Math.floor(Math.random() * t)), v[b[e]]
        }

        function a(e, t, n, i, a, l) {
            void 0 === t && (t = []);
            var d = [],
                u = 0,
                m = r(e);
            t.forEach(function(t) {
                var r = m ? m.slice(u, t.startIndex).join("") : e.slice(u, t.startIndex);
                r && (d = n ? d.concat(s(r, l, a, i)) : d.concat(o(r, l, a))), d.push({
                    type: p.a.Emote,
                    content: c.__assign({
                        alt: m ? m.slice(t.startIndex, t.endIndex).join("") : e.slice(t.startIndex, t.endIndex)
                    }, t.data)
                }), u = t.endIndex
            });
            var h = m ? m.slice(u).join("") : e.slice(u);
            return h && (d = n ? d.concat(s(h, l, a, i)) : d.concat(o(h, l, a))), d
        }

        function r(e) {
            return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
        }

        function s(e, t, n, i) {
            if (!i) return o(e, t, n);
            var a = Object(u.c)(e, i).map(function(e) {
                return e.type === p.a.Text ? o(e.content, t, n) : e
            });
            return [].concat.apply([], a)
        }

        function o(e, t, n) {
            var i = /^(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)$/g,
                a = /([^\w@#%\-+=:~])?(@)([^\u0000-\u007F]+|\w+)+([^\w./@#%&()\-+=:?~]|\s|$)/g,
                r = [],
                s = e.split(/\s+/);
            return s.forEach(function(e, o) {
                i.lastIndex = 0;
                var l = i.exec(e);
                a.lastIndex = 0;
                var c = a.exec(e);
                if (l) {
                    var u = l.index;
                    0 !== u && r.push({
                        type: p.a.Text,
                        content: "" + e.slice(0, u)
                    });
                    var h = i.lastIndex;
                    if (n) r.push({
                        type: p.a.Text,
                        content: " <" + Object(d.d)("deleted link", "CreateMessageData") + "> "
                    });
                    else {
                        var f = (l[1] ? "" : "https://") + e.slice(u, h);
                        if (function(e) {
                                return void 0 === e && (e = ""), m.test(e) && !e.includes("clips.twitch.tv/2017/")
                            }(f)) {
                            var v = function(e) {
                                void 0 === e && (e = "");
                                var t = e.match(m);
                                if (null === t) return "";
                                if (t && t.length > 0 && void 0 !== t.index) return t[1];
                                return ""
                            }(f);
                            r.push({
                                type: p.a.ClipLink,
                                content: {
                                    slug: v,
                                    url: f,
                                    displayText: e.slice(u, h)
                                }
                            })
                        } else if (function(e) {
                                return void 0 === e && (e = ""), g.test(e)
                            }(f)) {
                            var b = function(e) {
                                void 0 === e && (e = "");
                                var t = e.match(g);
                                if (null === t) return "";
                                if (t && t.length > 0 && void 0 !== t.index) return t[1];
                                return ""
                            }(f);
                            r.push({
                                type: p.a.VideoLink,
                                content: {
                                    id: b,
                                    url: f,
                                    displayText: e.slice(u, h)
                                }
                            })
                        } else r.push({
                            type: p.a.Link,
                            content: {
                                displayText: e.slice(u, h),
                                url: f
                            }
                        })
                    }
                    var k = e.slice(h),
                        y = "";
                    o < s.length - 1 && (y = " "), k && r.push({
                        type: p.a.Text,
                        content: "" + k + y
                    })
                } else {
                    if (!c) {
                        var S = r.length && r[r.length - 1];
                        y = "";
                        if (o < s.length - 1 && (y = " "), S && S.type === p.a.Text) S.content += e + y;
                        else {
                            var C = "";
                            o && (C = " "), r.push({
                                type: p.a.Text,
                                content: C + e + y
                            })
                        }
                        return
                    }
                    var _ = c[3];
                    r.push({
                        type: p.a.Mention,
                        content: {
                            sender: t,
                            recipient: _
                        }
                    })
                }
            }), r
        }

        function l(e, t) {
            return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
        }
        var c = n("TToO"),
            d = n("6sO2"),
            u = n("iydZ"),
            p = n("mwvJ"),
            m = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
            h = n("YhVV"),
            g = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?"),
            f = n("e1CU");
        t.a = function(e, t, n, r, s, o) {
            void 0 === o && (o = !1);
            var d;
            d = s ? Object(h.b)(e, s) : function(e) {
                var t = [];
                return e && Object.keys(e).forEach(function(n) {
                    var i = e[n];
                    i.forEach(function(e) {
                        t[e.startIndex] = {
                            startIndex: e.startIndex,
                            endIndex: e.endIndex + 1,
                            data: {
                                images: {
                                    themed: !1,
                                    sources: {
                                        "1x": l(n, 1),
                                        "2x": l(n, 2),
                                        "4x": l(n, 4)
                                    }
                                }
                            }
                        }
                    })
                }), t
            }(t.emotes);
            var u = Object(f.a)(t.displayName, t.username);
            return {
                badges: t.badges || {},
                bits: t.bits,
                user: c.__assign({}, u, {
                    userLogin: t.username,
                    userID: t.userID,
                    userType: t.userType,
                    color: t.color || i(t.userID)
                }),
                messageParts: e ? a(e, d, t.bits, n, r, u.userDisplayName) : [],
                deleted: o,
                timestamp: Date.now()
            }
        }, t.b = i, t.f = a, t.d = r, t.c = o, t.e = l;
        var v = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            b = {}
    },
    l4QG: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Away: "AWAY",
            Busy: "BUSY",
            Idle: "IDLE",
            Invisible: "INVISIBLE",
            Offline: "OFFLINE",
            Online: "ONLINE"
        }
    },
    l669: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UnbanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "createdAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\ncreatedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "l7/s": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_ChatEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 116
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    lK86: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GiftSubscribeButton_Gift_Eligibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recipientLogin"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "subProductId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "recipientLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canGift"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "product"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "subProductId"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 171
            }
        };
        n.loc.source = {
            body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String $subProductId: String!) {\nuser(login: $recipientLogin) {\nid\nself {\ncanGift(product: $subProductId)\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    m4HT: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
        }, t.b = function(e, t) {
            return e.split("_").find(function(e) {
                return e !== t
            }) || null
        }
    },
    "mR/9": function(e, t) {},
    mRH2: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportContent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "contentID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 111
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\nreportContent(input: $input) {\ncontentID\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mbxv: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        });
        var i = n("U7vG"),
            a = (n.n(i), n("+V/3")),
            r = n("Odds"),
            s = n("2IkU"),
            o = (n.n(s), "https://www.twitch.tv/products/turbo?ref=chat_badge"),
            l = function(e) {
                var t = e.badge,
                    n = i.createElement("img", {
                        alt: t.title,
                        className: "chat-badge",
                        src: t.image1x,
                        srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                    }),
                    s = function(e) {
                        switch (e.clickAction) {
                            case a.d:
                                return e.clickURL;
                            case a.b:
                                return e.channelName ? function(e) {
                                    return "https://www.twitch.tv/" + e + "/subscribe?ref=in_chat_subscriber_link"
                                }(e.channelName) : "";
                            case a.c:
                                return o;
                            default:
                                return ""
                        }
                    }(t);
                return "" !== s && (n = i.createElement("a", {
                    href: s,
                    target: "_blank"
                }, n)), i.createElement(r._31, {
                    key: t.image1x,
                    label: t.title,
                    display: r.H.Inline,
                    align: r._32.Left,
                    offsetY: "0.9rem",
                    "data-a-target": "chat-badge"
                }, n)
            }
    },
    mmQh: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUserCommunity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportUserInCommunityInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportUserInCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\nreportUserInCommunity(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mqvl: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            switch (e.type) {
                case i.b.Playing:
                    return {
                        type: i.a.Playing,
                        "Symbol(id)": t,
                        __typename: "Playing",
                        game: {
                            id: e.game_id,
                            name: e.game,
                            "Symbol(id)": t + ".game",
                            __typename: "Game"
                        }
                    };
                case i.b.Streaming:
                    var n = {
                        type: i.a.Streaming,
                        "Symbol(id)": t,
                        __typename: "Streaming",
                        stream: {
                            id: e.channel_id,
                            game: null,
                            "Symbol(id)": t + ".stream",
                            __typename: "Stream"
                        }
                    };
                    return e.game && e.game_id && (n.stream.game = {
                        id: e.game_id,
                        name: e.game,
                        "Symbol(id)": t + ".stream.game",
                        __typename: "Game"
                    }), n;
                case i.b.Watching:
                    return {
                        type: i.a.Watching,
                        "Symbol(id)": t,
                        __typename: "Watching",
                        user: {
                            id: e.channel_id,
                            login: e.channel_login,
                            displayName: e.channel_display_name,
                            "Symbol(id)": t + ".user",
                            __typename: "User",
                            hosting: {
                                id: e.hosted_channel_id || null,
                                displayName: e.hosted_channel_display_name || null,
                                login: e.hosted_channel_login || null,
                                "Symbol(id)": t + ".user.hosting",
                                __typename: "User"
                            }
                        }
                    };
                default:
                    return null
            }
        };
        var i = n("Ex+h")
    },
    "mw/a": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT"
        }(i || (i = {}))
    },
    mwvJ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Mention = 1] = "Mention", e[e.Link = 2] = "Link", e[e.Emote = 3] = "Emote", e[e.ClipLink = 4] = "ClipLink", e[e.VideoLink = 5] = "VideoLink"
        }(i || (i = {}))
    },
    nEoF: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        });
        var i = {
                TriHard: {
                    count: 196568036
                },
                Kappa: {
                    count: 192158118
                },
                "4Head": {
                    count: 155758710
                },
                PogChamp: {
                    count: 151485090
                },
                cmonBruh: {
                    count: 146352878
                },
                BibleThump: {
                    count: 56472964
                },
                WutFace: {
                    count: 45069031
                },
                Kreygasm: {
                    count: 41387580
                },
                DansGame: {
                    count: 38097659
                },
                hi5F: {
                    count: 34986404
                },
                SMOrc: {
                    count: 34734484
                },
                KappaPride: {
                    count: 34262839
                },
                VoHiYo: {
                    count: 27886434
                },
                SwiftRage: {
                    count: 24561900
                },
                ResidentSleeper: {
                    count: 24438298
                },
                EleGiggle: {
                    count: 19891526
                },
                FailFish: {
                    count: 19118343
                },
                NotLikeThis: {
                    count: 18802905
                },
                Keepo: {
                    count: 18351415
                },
                BabyRage: {
                    count: 18220906
                },
                MingLee: {
                    count: 18026207
                },
                pbfSSH: {
                    count: 16911241
                },
                forsenE: {
                    count: 14960299
                },
                HeyGuys: {
                    count: 14851569
                },
                ANELE: {
                    count: 14648986
                },
                PJSalt: {
                    count: 14438861
                }
            },
            a = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"]
    },
    nrdj: function(e, t, n) {
        "use strict";
        var i, a = n("HW6M"),
            r = n("U7vG"),
            s = n("6sO2"),
            o = n("iydZ"),
            l = n("CFVp"),
            c = n("qe65"),
            d = n("Odds");
        n("PPK2");
        ! function(e) {
            e[e.Large = 4] = "Large", e[e.Medium = 3] = "Medium", e[e.Small = 2] = "Small", e[e.ExtraSmall = 1.5] = "ExtraSmall", e[e.ExtremelySmall = 1] = "ExtremelySmall"
        }(i || (i = {}));
        var u = function(e) {
            var t = e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
            t || (t = Object(l.b)());
            var n = t.orderedTiers.find(function(t) {
                return t.bits <= (e.amount || 100)
            });
            n || (n = t.orderedTiers[0]);
            var u = e.display === d.H.Inline || e.display === d.H.InlineFlex || e.display === d.H.InlineBlock,
                p = null,
                m = a("cheermote-for-amount__cheer-amount", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer-amount--medium": e.size === i.Medium
                }, {
                    "cheermote-for-amount__cheer-amount--small": e.size === i.Small || e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-amount--extremely-small": e.size === i.ExtremelySmall
                });
            if (e.amount && e.showAmount) {
                var h = e.formattedNumber ? Object(s.e)(e.amount) : e.amount;
                p = r.createElement(d.Q, {
                    padding: e.size === i.Small ? 0 : void 0,
                    textAlign: e.size === i.Small ? d._24.Center : void 0
                }, r.createElement("strong", {
                    className: m,
                    style: {
                        color: n.color
                    }
                }, h))
            }
            var g = a("cheermote-for-amount__cheer-image", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer--inline": u
                }, {
                    "cheermote-for-amount__cheer-image--small": e.size === i.Small
                }, {
                    "cheermote-for-amount__cheer-image--extra-small": e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-image--extremely-small": e.size === i.ExtremelySmall
                }),
                f = r.createElement(c.a, {
                    className: g,
                    sources: Object(o.b)(n, e.size || i.Large, e.animated)
                });
            return e.showImage || (f = null), r.createElement(d.V, {
                className: "cheermote-for-amount",
                display: e.display
            }, f, p)
        };
        n.d(t, "a", function() {
            return u
        }), n.d(t, "b", function() {
            return i
        })
    },
    oFw4: function(e, t) {},
    oIkB: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = new Set(e.map(function(e) {
                return e.node.id
            }));
            return e.concat(t.filter(function(e) {
                return !n.has(e.node.id)
            }))
        }, t.a = function(e) {
            return {
                variables: {
                    input: e
                }
            }
        }, t.d = function(e, t, n, r) {
            void 0 === t && (t = {});
            try {
                var s = a.n.apollo.client.readQuery({
                    query: e,
                    variables: t
                });
                if (r && r(s)) return;
                var o = i(s, function(e) {
                    return e
                }, function(e) {
                    return n(e)
                });
                a.n.apollo.client.writeQuery({
                    query: e,
                    variables: t,
                    data: o
                })
            } catch (e) {
                a.i.warn("Failed writing updated query to Apollo", e)
            }
        }, t.c = function(e) {
            try {
                var t = e.id,
                    n = e.fragment,
                    r = e.mutator,
                    s = a.n.apollo.client.readFragment({
                        id: t,
                        fragment: n
                    }),
                    o = i(s, function(e) {
                        return e
                    }, function(e) {
                        return r(e)
                    });
                a.n.apollo.client.writeFragment({
                    fragment: n,
                    id: t,
                    data: o
                })
            } catch (e) {
                a.i.warn("Failed writing updated query to Apollo", e)
            }
        };
        var i = n("LIeg"),
            a = (n.n(i), n("6sO2"))
    },
    oSFp: function(e, t, n) {
        "use strict";
        var i = n("A5Hr"),
            a = n("TToO"),
            r = n("U7vG"),
            s = n("RH2O"),
            o = n("2KeS"),
            l = n("+8VM"),
            c = n("V5M+"),
            d = n("CSlQ"),
            u = n("Odds"),
            p = (n("oFw4"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClose = function(e) {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(e)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(u._19, {
                        className: "reporting-modal__container",
                        background: u.m.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, r.createElement(i.a, {
                        onClose: this.handleClose,
                        reportContext: this.props.reportContext,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    }), r.createElement(l.a, null))
                }, t
            }(r.Component)),
            m = Object(o.compose)(Object(d.c)("ReportUserModal"), Object(s.a)(null, function(e) {
                return Object(o.bindActionCreators)({
                    closeModal: c.c
                }, e)
            }))(p);
        n.d(t, !1, function() {}), n.d(t, !1, function() {
            return i.a
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return m
        })
    },
    p8c9: function(e, t) {},
    pQNb: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("6sO2"),
            s = n("FDYX"),
            o = n("Odds"),
            l = (n("Z+EN"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.hasDiscount(this.props.subscriptionProducts)) {
                        var e = this.getMessage();
                        return a.createElement(o._19, {
                            textAlign: o._24.Center,
                            className: "sub-discount-banner",
                            padding: 1,
                            color: o.F.Overlay,
                            "data-test-selector": "sub-discount-banner"
                        }, a.createElement(o._23, {
                            bold: !0
                        }, e))
                    }
                    return null
                }, t.prototype.getMessage = function() {
                    var e = Object(s.b)(this.props.subscriptionProducts[0], this.props.isGift);
                    return this.props.isGift ? Object(r.d)("Gift a sub and get {percent} off!", {
                        percent: Object(r.e)(e / 100, "percent")
                    }, "SubDiscountBanner") : Object(r.d)("Get {percent} off the first month of any paid subscription!", {
                        percent: Object(r.e)(e / 100, "percent")
                    }, "SubDiscountBanner")
                }, t.prototype.hasDiscount = function(e) {
                    return this.props.isGift ? Object(s.c)(e) : Object(s.d)(e)
                }, t
            }(a.Component));
        n.d(t, !1, function() {
            return "sub-discount-banner"
        }), n.d(t, "a", function() {
            return l
        })
    },
    "pV+t": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 62
            }
        };
        n.loc.source = {
            body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pexS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsChatCard_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "curator"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcaster"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "game"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thumbnailURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 166
            }
        };
        n.loc.source = {
            body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nslug\nurl\ncurator {\ndisplayName\n}\nbroadcaster {\ndisplayName\n}\ngame {\ndisplayName\n}\ntitle\nthumbnailURL\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    q4rf: function(e, t) {},
    q8Cw: function(e, t) {},
    qDcU: function(e, t) {},
    qe65: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = n("RH2O"),
            s = n("NXs7"),
            o = n("0nzt"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = (e.defaultRes, e.sources),
                        n = (e.darkModeEnabled, i.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                        r = this.props.darkModeEnabled ? t.dark : t.light,
                        s = Object.keys(r);
                    delete n.dispatch;
                    var o = i.__assign({}, n, {
                        src: r[this.props.defaultRes || s[0]],
                        srcSet: s.map(function(e) {
                            return r[e] + " " + e
                        }).join(",")
                    });
                    return a.createElement("img", i.__assign({}, o, {
                        onLoad: this.props.onLoad
                    }))
                }, t
            }(a.Component),
            c = Object(r.a)(function(e) {
                return {
                    darkModeEnabled: Object(o.a)(e) === s.a.Dark
                }
            })(l);
        n.d(t, "a", function() {
            return c
        })
    },
    qkCi: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention", e[e.Ban = 3] = "Ban", e[e.Timeout = 4] = "Timeout", e[e.AutoModRejectedPrompt = 5] = "AutoModRejectedPrompt", e[e.AutoModMessageRejected = 6] = "AutoModMessageRejected", e[e.AutoModMessageAllowed = 7] = "AutoModMessageAllowed", e[e.AutoModMessageDenied = 8] = "AutoModMessageDenied", e[e.Connected = 9] = "Connected", e[e.Disconnected = 10] = "Disconnected", e[e.Reconnect = 11] = "Reconnect", e[e.Hosting = 12] = "Hosting", e[e.Unhost = 13] = "Unhost", e[e.Subscription = 14] = "Subscription", e[e.Resubscription = 15] = "Resubscription", e[e.SubGift = 16] = "SubGift", e[e.Clear = 17] = "Clear", e[e.SubscriberOnlyMode = 18] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 19] = "FollowerOnlyMode", e[e.SlowMode = 20] = "SlowMode", e[e.EmoteOnlyMode = 21] = "EmoteOnlyMode", e[e.RoomMods = 22] = "RoomMods", e[e.RoomState = 23] = "RoomState", e[e.Raid = 24] = "Raid", e[e.Unraid = 25] = "Unraid", e[e.Ritual = 26] = "Ritual", e[e.Notice = 27] = "Notice", e[e.Info = 28] = "Info", e[e.BadgesUpdated = 29] = "BadgesUpdated", e[e.Purchase = 30] = "Purchase", e[e.BitsCharity = 31] = "BitsCharity", e[e.CrateGift = 32] = "CrateGift"
        }(i || (i = {}))
    },
    "qzJ+": function(e, t, n) {
        "use strict";

        function i(e) {
            try {
                return r.n.apollo.client.readQuery({
                    query: p,
                    variables: {
                        id: e
                    }
                }).whisperThread
            } catch (e) {
                return null
            }
        }
        var a = n("TToO"),
            r = n("6sO2"),
            s = n("oIkB"),
            o = n("HM6l"),
            l = n("9RMu"),
            c = n("l21v"),
            d = n("BVQ1"),
            u = n("m4HT"),
            p = n("+gWs");
        t.a = function(e) {
            var t = e.currentUserID,
                n = e.emotes,
                m = e.message,
                h = e.recipientUserID;
            if ("" === t || "" === m || "" === h) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
            var g = Object(o.b)(),
                f = a.__assign({
                    mutation: d
                }, Object(s.a)({
                    message: m,
                    nonce: g,
                    recipientUserID: h
                })),
                v = Object(u.a)(t, h),
                b = i(v);
            if (b) {
                var k = function(e, t) {
                    for (var n = [], i = /\S+/g, a = i.exec(e); a;) {
                        var r = a[0],
                            s = t[r];
                        if (s) {
                            var o = Object(c.d)(e.slice(0, a.index)),
                                l = o ? o.length : a.index;
                            n.push({
                                id: s.id,
                                start: l,
                                end: l + r.length - 1
                            })
                        }
                        a = i.exec(e)
                    }
                    return n
                }(m, n).map(l.a);
                f.optimisticResponse = {
                    sendWhisper: {
                        __typename: "SendWhisperPayload",
                        message: {
                            content: {
                                content: m,
                                emotes: k,
                                __typename: "MessageBody"
                            },
                            from: {
                                id: t,
                                __typename: "User"
                            },
                            id: g,
                            sentAt: (new Date).toISOString(),
                            deletedAt: null,
                            editedAt: null,
                            __typename: "WhisperMessage"
                        }
                    }
                }, f.update = function(e, t) {
                    var n = "" + (parseInt(b.messages.edges[0].cursor, 10) + 1) || "";
                    if (t.data) {
                        var a = i(v);
                        if (a) {
                            var r = a.messages.edges.findIndex(function(e) {
                                return e.cursor === n
                            });
                            if (r < 0) {
                                var s = {
                                    cursor: n,
                                    node: t.data.sendWhisper.message,
                                    __typename: "WhisperMessageEdge"
                                };
                                a.messages.edges.unshift(s)
                            } else a.messages.edges[r].node = t.data.sendWhisper.message;
                            a.userLastMessageRead.sentAt = t.data.sendWhisper.message.sentAt, a.unreadMessagesCount = 0, e.writeQuery({
                                query: p,
                                data: {
                                    whisperThread: a
                                }
                            })
                        }
                    }
                }
            }
            return r.n.apollo.client.mutate(f)
        }
    },
    rCmJ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("U7vG"),
            r = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        t.container = e
                    }, t.handleGlobalClick = function(e) {
                        var n = e.target;
                        t.isParentOf(n) || t.props.onClickOut(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = (e.onClickOut, i.__rest(e, ["onClickOut"]));
                    return a.createElement("div", i.__assign({}, t, {
                        ref: this.setContainerRef
                    }), this.props.children)
                }, t.prototype.isParentOf = function(e) {
                    for (var t = e; t;) {
                        if (t === this.container) return !0;
                        t = t.parentElement
                    }
                    return !1
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return r
        })
    },
    rIzn: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i = n("6sO2"),
            a = function() {
                return i.k.get("ritualsFeatureFlagOverride", i.b.get("viewer_milestones_enabled", !1))
            }
    },
    rMeN: function(e, t) {},
    rWzl: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "s+oZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "VideoChatCard_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "previewThumbnailURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "90"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "51"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "publishedAt"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 162
            }
        };
        n.loc.source = {
            body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    sgUC: function(e, t) {},
    ssrl: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "NewChatterRitual_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "ritualTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "ritualToken"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 167
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nquery NewChatterRitual_Channel($id: ID!) {\nchannel: user(id: $id) {\nid\nself {\nritualTokens {\n...ritualToken\n}\n}\nstream {\nid\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("j/3B").definitions)), e.exports = i
    },
    swra: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("RH2O"),
            a = n("0nzt"),
            r = n("TToO"),
            s = n("U7vG"),
            o = n("6sO2"),
            l = n("ZyA2"),
            c = n("j7/Y"),
            d = n("VAT8"),
            u = n("w9tK"),
            p = n("vH/s"),
            m = n("11M/"),
            h = n("CSlQ"),
            g = n("Odds"),
            f = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.match.params.channelLogin;
                    return s.createElement(g.V, {
                        className: Object(d.c)(this.props.theme),
                        display: g.H.Flex,
                        fullHeight: !0,
                        fullWidth: !0
                    }, s.createElement(g._19, {
                        background: g.m.Alt2,
                        display: g.H.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        overflow: g._0.Hidden,
                        fullHeight: !0,
                        fullWidth: !0
                    }, s.createElement(m.a, {
                        channelLogin: e,
                        clientID: o.n.config.legacyClientID,
                        isPopout: !0
                    }), s.createElement(l.a, null)))
                }, t = r.__decorate([Object(h.c)("PopoutChatPage", {
                    autoReportInteractive: !0,
                    destination: u.a.ChatPopout
                }), Object(c.a)({
                    location: p.PageviewLocation.Chat
                })], t)
            }(s.Component),
            v = Object(i.a)(function(e) {
                return {
                    theme: Object(a.a)(e)
                }
            })(f);
        n.d(t, "PopoutChatPage", function() {
            return v
        })
    },
    thJT: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RequestNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RequestRitualTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RequestNewChatterToken($input: RequestRitualTokenInput!) {\nrequestRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("j/3B").definitions)), e.exports = i
    },
    tjbt: function(e, t, n) {
        "use strict";
        (function(e) {
            function i(e) {
                return !e.firstPageLoaded || !Object(k.a)() || !e.isLoggedIn || e.isEmbedded || e.isPopout
            }
            n.d(t, "a", function() {
                return O
            });
            var a, r = n("TToO"),
                s = n("U7vG"),
                o = (n.n(s), n("BhyV")),
                l = (n.n(o), n("RH2O")),
                c = n("6sO2"),
                d = n("7vx8"),
                u = n("RweG"),
                p = n("WIs4"),
                m = n("C8Io"),
                h = n("oIkB"),
                g = n("HZww"),
                f = n("Aj/L"),
                v = n("aUOx"),
                b = n("QCOJ"),
                k = n("rIzn"),
                y = n("hcyD"),
                S = n("KfLc"),
                C = n("yqxY"),
                _ = n("Tur5"),
                E = n("ssrl"),
                N = (n.n(E), n("Ti/Y")),
                w = (n.n(N), n("imaO")),
                D = (n.n(w), n("thJT")),
                T = (n.n(D), 3e5),
                I = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            closedByError: !1,
                            isLive: !1
                        }, t.eligibilityTimeouts = {}, t.expirationTimeouts = {}, t.getBannerMessage = function() {
                            return Object(c.d)("Click an emote to say hello!", "NewChatterRitual")
                        }, t.getLiveStatus = function(e) {
                            var t = e.pubsub.messages.streamDown ? e.pubsub.messages.streamDown.server_time : 0,
                                n = e.pubsub.messages.streamUp ? e.pubsub.messages.streamUp.server_time : 0;
                            return t || n ? n > t : e.data && e.data.channel && !!e.data.channel.stream.id || !1
                        }, t.setEligibilityTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), i = 0, a = Object.keys(t.eligibilityTimeouts); i < a.length; i++) {
                                var r = a[i];
                                n.has(r) || (clearTimeout(t.eligibilityTimeouts[r]), delete t.eligibilityTimeouts[r])
                            }
                            n.forEach(function(e) {
                                t.eligibilityTimeouts[e] || (t.eligibilityTimeouts[e] = setTimeout(function() {
                                    delete t.eligibilityTimeouts[e], t.isEligible = !0, t.state.isLive && t.requestRitualToken()
                                }, T))
                            })
                        }, t.requestRitualToken = function() {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return r.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            Object(S.e)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), e = r.__assign({}, Object(h.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            })), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.requestToken(e)];
                                        case 2:
                                            return n.sent(), this.isEligible = !1, [3, 4];
                                        case 3:
                                            return t = n.sent(), c.i.error(t, "Failed to request new chatter ritual token."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.setExpirationTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), i = 0, a = Object.keys(t.expirationTimeouts); i < a.length; i++) {
                                var r = a[i];
                                n.has(r) || (clearTimeout(t.expirationTimeouts[r]), delete t.expirationTimeouts[r])
                            }
                            e.forEach(function(e) {
                                if (!t.expirationTimeouts[e.id] && e.expiresAt && new Date(e.expiresAt).valueOf() > Date.now()) {
                                    var n = new Date(e.expiresAt).valueOf() - Date.now();
                                    t.expirationTimeouts[e.id] = setTimeout(t.expireRitualToken.bind(e.id), n)
                                }
                            })
                        }, t.expireRitualToken = function(e) {
                            delete t.expirationTimeouts[e];
                            Object(h.d)(E, {
                                id: t.props.channelID
                            }, function(t) {
                                return t.channel && (t.channel.self.ritualTokens = t.channel.self.ritualTokens.filter(function(t) {
                                    return t.id === e
                                })), t
                            })
                        }, t.redeemRitualToken = function(e, n) {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var t, i, a;
                                return r.__generator(this, function(s) {
                                    switch (s.label) {
                                        case 0:
                                            Object(y.a)({
                                                channelID: this.props.channelID,
                                                channelLogin: this.props.channelLogin,
                                                isHostMode: this.props.isHostMode,
                                                fromNewChatterRitual: !0,
                                                subOnlyMode: this.props.isSubsOnlyModeEnabled,
                                                player: this.props.isEmbedded || this.props.isPopout ? b.a.Embed : b.a.Web
                                            }), Object(S.d)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID,
                                                userMessage: n
                                            }), t = r.__assign({}, Object(h.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter,
                                                messageText: n
                                            }), {
                                                optimisticResponse: {
                                                    redeemRitualToken: {
                                                        __typename: "RedeemRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Redeemed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), i = null, s.label = 1;
                                        case 1:
                                            return s.trys.push([1, 3, , 4]), [4, this.props.redeemToken(t)];
                                        case 2:
                                            return i = s.sent(), [3, 4];
                                        case 3:
                                            return a = s.sent(), c.i.error(a, "Failed to redeem new chatter ritual."), this.handleGenericError(), [2];
                                        case 4:
                                            if (i.data.redeemRitualToken.error) switch (i.data.redeemRitualToken.error.code) {
                                                case _.RitualTokenMutationErrors.UserBanned:
                                                case _.RitualTokenMutationErrors.UserNotFollowing:
                                                case _.RitualTokenMutationErrors.UserNotSubbed:
                                                case _.RitualTokenMutationErrors.UserTimedOut:
                                                    return this.props.onSendMessage(n), this.setState({
                                                        closedByError: !0
                                                    }), [2];
                                                default:
                                                    return this.handleGenericError(), [2]
                                            }
                                            return i.data.redeemRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.dismissRitualToken = function(e) {
                            return r.__awaiter(t, void 0, void 0, function() {
                                var t, n, i;
                                return r.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            Object(S.a)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), t = r.__assign({}, Object(h.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            }), {
                                                optimisticResponse: {
                                                    dismissRitualToken: {
                                                        __typename: "DismissRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Dismissed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), n = null, a.label = 1;
                                        case 1:
                                            return a.trys.push([1, 3, , 4]), [4, this.props.dismissToken(t)];
                                        case 2:
                                            return n = a.sent(), [3, 4];
                                        case 3:
                                            return i = a.sent(), c.i.error(i, "Failed to redeem new chatter ritual."), [3, 4];
                                        case 4:
                                            return n && n.data.dismissRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.handleGenericError = function() {
                            t.props.onPushMessage(Object(v.a)(Object(c.d)("Something went wrong.", "NewChatterRitual"))), t.setState({
                                closedByError: !0
                            })
                        }, t.clearAllTimers = function() {
                            for (var e = 0, n = Object.keys(t.eligibilityTimeouts); e < n.length; e++) {
                                var i = n[e];
                                clearTimeout(t.eligibilityTimeouts[i])
                            }
                            t.eligibilityTimeouts = {};
                            for (var a = 0, r = Object.keys(t.expirationTimeouts); a < r.length; a++) {
                                i = r[a];
                                clearTimeout(t.expirationTimeouts[i])
                            }
                            t.expirationTimeouts = {}
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        this.props.data && this.props.data.loading || !e.data || !e.data.loading || Object(S.b)({
                            channelID: this.props.channelID
                        });
                        var t = this.getLiveStatus(e);
                        if (this.state.isLive !== t && (this.setState({
                                isLive: t
                            }), t && this.isEligible && this.requestRitualToken()), e.data && e.data.channel) {
                            var n = e.data.channel.self.ritualTokens;
                            this.setEligibilityTimeouts(n.filter(function(e) {
                                return e.status === _.RitualTokenStatus.Eligible
                            })), this.setExpirationTimeouts(n.filter(function(e) {
                                return !!e.expiresAt
                            }))
                        } else this.clearAllTimers()
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearAllTimers()
                    }, t.prototype.render = function() {
                        return this.props.data && this.props.data.channel ? this.state.closedByError || !this.state.isLive ? null : s.createElement(C.a, {
                            bannerMessage: this.getBannerMessage(),
                            onRitualDismissed: this.dismissRitualToken,
                            onRitualRedeemed: this.redeemRitualToken,
                            ritualTokens: this.props.data.channel.self.ritualTokens
                        }) : null
                    }, t
                }(s.Component),
                O = Object(o.compose)(Object(l.a)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded,
                        isLoggedIn: Object(f.d)(e),
                        isSubsOnlyModeEnabled: e.chat.subsOnlyMode
                    }
                }, null), Object(d.a)(E, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    },
                    skip: i
                }), Object(p.a)(function(t) {
                    return {
                        query: E,
                        variables: {
                            id: t.channelID
                        },
                        topic: Object(g.h)(t.channelID),
                        type: m.c.UpdatedChannelChatProperty,
                        mutator: function(n, i) {
                            return n.data.is_rituals_enabled ? e(function() {
                                t.data && t.data.refetch && t.data.refetch()
                            }) : i.channel && (i.channel.self.ritualTokens = []), i
                        },
                        skip: i(t)
                    }
                }), Object(u.a)([{
                    topic: function(e) {
                        return Object(g.p)(e.channelID)
                    },
                    mapMessageTypesToProps: (a = {}, a[m.c.ChannelStreamUp] = "streamUp", a[m.c.ChannelStreamDown] = "streamDown", a),
                    skip: i
                }]), Object(d.a)(N, {
                    name: "dismissToken"
                }), Object(d.a)(w, {
                    name: "redeemToken"
                }), Object(d.a)(D, {
                    name: "requestToken"
                }))(I)
        }).call(t, n("162o").setImmediate)
    },
    u8SD: function(e, t, n) {
        "use strict";

        function i(e) {
            return e && r.n.apollo.client.dataIdFromObject ? r.n.apollo.client.dataIdFromObject(e) || "" : ""
        }
        t.a = function() {
            var e = this;
            return Object(s.a)(o, {
                props: function(t) {
                    return {
                        blockUserMutation: function(n, r, s, o) {
                            return a.__awaiter(e, void 0, void 0, function() {
                                return a.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n,
                                                        sourceContext: s,
                                                        reason: r
                                                    }
                                                },
                                                optimisticResponse: {
                                                    blockUser: {
                                                        __typename: "BlockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: i(o),
                                                        fragment: l
                                                    });
                                                    t && (t.blockedUsers.push({
                                                        id: n,
                                                        __typename: "User"
                                                    }), e.writeFragment({
                                                        id: i(o),
                                                        fragment: l,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("blockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var a = n("TToO"),
            r = n("6sO2"),
            s = n("7vx8"),
            o = n("rWzl"),
            l = (n.n(o), n("a0uF"));
        n.n(l)
    },
    uXDg: function(e, t, n) {
        "use strict";
        n.d(t, "f", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "d", function() {
            return s
        }), n.d(t, "e", function() {
            return o
        }), n.d(t, "g", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), t.l = function(e, t) {
            return {
                type: i,
                data: e,
                contentWidth: t
            }
        }, t.h = function(e, t) {
            return {
                type: a,
                threadID: e,
                contentWidth: t
            }
        }, t.i = function(e, t) {
            return {
                type: r,
                threadID: e,
                contentWidth: t
            }
        }, t.j = function(e, t) {
            return {
                type: s,
                threadID: e,
                contentWidth: t
            }
        }, t.m = function(e) {
            return {
                type: c,
                contentWidth: e
            }
        }, t.k = function(e, t) {
            return {
                type: o,
                threadID: e,
                contentWidth: t
            }
        }, t.n = function(e, t) {
            return {
                type: l,
                threadID: e,
                contentWidth: t
            }
        };
        var i = "whispers.THREAD_OPENED",
            a = "whispers.THREAD_CLOSED",
            r = "whispers.THREAD_COLLAPSED",
            s = "whispers.THREAD_EXPANDED",
            o = "whispers.THREAD_FOCUSED",
            l = "whispers.THREAD_UNFOCUSED",
            c = "whispers.CONTENT_RESIZED"
    },
    v2Uk: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualsEnabled"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "settings"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isRitualsEnabled"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isRitualsWhitelisted"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "fragment ritualsEnabled on User {\nid\nsettings {\nisRitualsEnabled\nisRitualsWhitelisted\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vBst: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i;
        ! function(e) {
            e[e.PercentOff = 0] = "PercentOff"
        }(i || (i = {}));
        var a = {
            Prime: "prime",
            Tier1: "1000",
            Tier2: "2000",
            Tier3: "3000"
        }
    },
    vDGQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "c", function() {
            return o
        }), t.d = function(e) {
            if (e.action && e.userId) {
                var t = {
                    location: r.PageviewLocation.Channel,
                    action: e.action,
                    target: e.target,
                    type: e.type,
                    channel_id: e.channelId,
                    reward_id: e.rewardID,
                    user_id: e.userId,
                    time: Date.now()
                };
                a.n.tracking.track(r.SpadeEventType.CrateNotificationAction, t)
            }
        };
        var i, a = n("6sO2"),
            r = n("vH/s");
        ! function(e) {
            e.Close = "close", e.DontShowThis = "dont_show_this", e.LearnMore = "learn_more", e.OpenLater = "open_later", e.OpenNow = "open_now", e.Timeout = "timeout", e.TryBeta = "try_beta", e.View = "view"
        }(i || (i = {}));
        var s;
        ! function(e) {
            e.Inventory = "inventory", e.OpenCrate = "open_crate"
        }(s || (s = {}));
        var o;
        ! function(e) {
            e.Ftue = "ftue", e.ReceiveCrate = "receive_crate", e.ReceiveGift = "receive_giveaway_item", e.BitsIntro = "bits_intro"
        }(o || (o = {}))
    },
    vLl9: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 256
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\nself {\nselectedBadge {\n...badge\n}\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n("QU+n").definitions)), e.exports = i
    },
    vRhQ: function(e, t) {},
    vh75: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "i", function() {
            return o
        }), n.d(t, "f", function() {
            return l
        }), n.d(t, "g", function() {
            return c
        }), n.d(t, "h", function() {
            return d
        }), n.d(t, "j", function() {
            return u
        }), n.d(t, "l", function() {
            return p
        }), n.d(t, "k", function() {
            return m
        }), n.d(t, "o", function() {
            return h
        }), n.d(t, "n", function() {
            return g
        }), n.d(t, "q", function() {
            return f
        }), n.d(t, "p", function() {
            return v
        }), n.d(t, "s", function() {
            return b
        }), n.d(t, "r", function() {
            return k
        }), n.d(t, "a", function() {
            return y
        }), n.d(t, "m", function() {
            return S
        }), t.I = function(e, t) {
            return {
                type: u,
                channel: e,
                messages: t
            }
        }, t.w = function() {
            return {
                type: a
            }
        }, t.G = function() {
            return {
                type: b
            }
        }, t.B = function() {
            return {
                type: k
            }
        }, t.K = function() {
            return {
                type: r
            }
        }, t.H = function() {
            return {
                type: i
            }
        }, t.D = function() {
            return {
                type: p
            }
        }, t.y = function() {
            return {
                type: m
            }
        }, t.C = function() {
            return {
                type: o
            }
        }, t.v = function(e, t) {
            return {
                type: d,
                channelLogin: e,
                duration: t
            }
        }, t.u = function(e) {
            return {
                type: c,
                duration: e
            }
        }, t.x = function() {
            return {
                type: l
            }
        }, t.E = function() {
            return {
                type: h
            }
        }, t.z = function() {
            return {
                type: g
            }
        }, t.F = function() {
            return {
                type: f
            }
        }, t.A = function() {
            return {
                type: v
            }
        }, t.t = function(e, t) {
            return {
                type: y,
                command: e.toLowerCase(),
                handler: t
            }
        }, t.J = function(e) {
            return {
                type: S,
                command: e.toLowerCase()
            }
        };
        var i = "chat.CHAT_HIDDEN",
            a = "chat.CHAT_RESET",
            r = "chat.CHAT_SHOWN",
            s = "chat.EMOTE_SETS_UPDATED",
            o = "chat.FOLLOWER_MODE_ENABLED",
            l = "chat.FOLLOWER_MODE_DISABLED",
            c = "chat.FOLLOWER_MODE_DURATION_CHANGED",
            d = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
            u = "chat.MESSAGES_UPDATED",
            p = "chat.MODICONS_ENABLED",
            m = "chat.MOD_ICONS_DISABLED",
            h = "chat.SLOW_MODE_ENABLED",
            g = "chat.SLOW_MODE_DISABLED",
            f = "chat.SUBS_ONLY_MODE_ENABLED",
            v = "chat.SUBS_ONLY_MODE_DISABLED",
            b = "chat.TIMESTAMPS_ENABLED",
            k = "chat.TIMESTAMPS_DISABLED",
            y = "chat.ADD_COMMAND",
            S = "chat.REMOVE_COMMAND"
    },
    w9tK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.BitsBuyCard = "bits-buy-card", e.BrowseCommunities = "browse.communities", e.BrowseCreative = "browse.creative", e.BrowseGamesAndCommunities = "browse.games-and-communities", e.ChannelClips = "channel.clips", e.ChannelCollections = "channel.collections", e.ChannelClipsManager = "videoManager.clips.channel", e.ChannelDashboardAchievements = "channel.dashboard.achievements", e.ChannelDashboardChannelAnalytics = "channel.dashboard.channel-analytics", e.ChannelDashboardExtensions = "channel.dashboard.extensions", e.ChannelDashboardModeration = "channel.dashboard.moderation", e.ChannelDashboardStreamSummary = "channel.dashboard.stream-summary", e.ChannelEvents = "channel.events", e.ChannelIndex = "channel.index.index", e.ChatPopout = "chat", e.CheermoteCarousel = "cheermote-carousel", e.DevOnly = "dev", e.DirectoryCommunityByLanguage = "directory.community.language", e.DirectoryCommunityIndex = "directory.community.index", e.DirectoryCommunityDetails = "directory.community.details", e.DirectoryFollowingCommunities = "directory.following.communities", e.DirectoryFollowingGames = "directory.following.games", e.DirectoryFollowingHosts = "directory.following.hosts", e.DirectoryFollowingIndex = "directory.following.index", e.DirectoryFollowingLiveChannels = "directory.following.channels", e.DirectoryFollowingVideos = "directory.following.videos.video-type", e.DirectoryGameClips = "directory.game.clips", e.DirectoryGameDetails = "directory.game.details", e.DirectoryGameIndex = "directory.game.index", e.DirectoryGames = "directory.games", e.DirectoryPopular = "directory.popular", e.DirectoryPopularByLanguage = "directory.popular.language", e.DirectoryGameVideos = "directory.game.videos", e.EmailVerification = "emailVerification", e.EventDetails = "event.details", e.ForYou = "for-you", e.Index = "index", e.MyClipsManager = "videoManager.clips", e.NotificationSettingsPage = "settings.notificationSettings", e.OnboardingIndex = "onboarding.index", e.ReportUserPage = "reportUser.page", e.SettingsConnections = "private/embed-components", e.SettingsChannel = "private/embed-components", e.SettingsNotifications = "settings.notifications", e.SettingsPrime = "settings.prime", e.SettingsProfile = "settings.profile", e.SettingsSecurity = "private/embed-components", e.StoreMerchPage = "store.merch", e.SubsLandingPage = "subs.landing", e.TeamsDashboardRevenue = "teams.dashboard.revenue", e.TeamsDashboardStats = "teams.dashboard.stats", e.TeamsDashboardMembers = "teams.dashboard.members", e.TeamsDashboardFeaturedChannels = "teams.dashboard.featured-channels", e.TeamsDashboardSettings = "teams.dashboard.settings", e.SubsBroadcasterPage = "subs.broadcaster", e.VideoManagerEditPropertiesPage = "videoManager.edit", e.VideoManagerPage = "videoManager.page", e.VideoManagerUploadListPage = "videoManager.upload-list", e.VideoManagerUploadPage = "videoManager.upload", e.VideosPage = "videos", e.VideoWatchPage = "video"
        }(i || (i = {}))
    },
    x583: function(e, t) {},
    x6ny: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportReasons"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "content"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentType"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportReasons"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 114
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\nreportReasons(content: $content) {\nid\ntext\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xZvS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissPurchaseToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPurchaseTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissPurchaseToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 113
            }
        };
        n.loc.source = {
            body: "mutation DismissPurchaseToken($input:DismissPurchaseTokenInput!) {\ndismissPurchaseToken(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xfb5: function(e, t) {},
    xrVp: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = "";
            switch (t) {
                case s.a.TypedCommand:
                    n = "typed_command";
                    break;
                case s.a.UserMenu:
                    n = "user_menu";
                    break;
                default:
                    n = "user_menu"
            }
            var r = "";
            switch (e) {
                case a.a.Dark:
                    r = "dark";
                    break;
                case a.a.Light:
                    r = "light";
                    break;
                default:
                    r = "light"
            }
            i.m.track(o.SpadeEventType.ThemeChange, {
                source: n,
                mode: r
            })
        }, t.a = function(e) {
            switch (e) {
                case r.a.Archive:
                    return o.SpadeVideoBroadcastType.Archive;
                case r.a.Highlight:
                    return o.SpadeVideoBroadcastType.Highlight;
                case r.a.Upload:
                    return o.SpadeVideoBroadcastType.Upload;
                case r.a.WatchParty:
                    return o.SpadeVideoBroadcastType.WatchParty;
                case r.a.PastPremiere:
                    return o.SpadeVideoBroadcastType.PastPremiere;
                case r.a.PremiereUpload:
                    return o.SpadeVideoBroadcastType.PremiereUpload;
                default:
                    return e
            }
        };
        var i = n("6sO2"),
            a = n("NXs7"),
            r = n("6WAQ"),
            s = n("NikC"),
            o = n("vH/s")
    },
    xwpJ: function(e, t, n) {
        "use strict";

        function i() {
            return [{
                id: "other",
                text: Object(r.d)("Other Terms of Service Violation", "ReportUserModal")
            }]
        }
        var a = function(e, t) {
                var n = "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e);
                return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, n).replace(/{description}/, t)
            },
            r = n("6sO2");
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        })
    },
    "y0i/": function(e, t) {},
    "y1/w": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 190
            }
        };
        n.loc.source = {
            body: "query RecentRaidsModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ySfT: function(e, t, n) {
        "use strict";
        var i = n("U7vG"),
            a = n("6sO2"),
            r = n("3iBR"),
            s = n("qe65"),
            o = n("Odds"),
            l = (n("6lb1"), {
                themed: !0,
                dark: {
                    "1x": r.b + "/dark/animated/1/cheertutorial.gif"
                },
                light: {
                    "1x": r.b + "/light/animated/1/cheertutorial.gif"
                }
            }),
            c = function() {
                return i.createElement(o.V, {
                    display: o.H.Flex,
                    padding: {
                        top: 5
                    },
                    flexGrow: 1,
                    flexDirection: o.J.Column,
                    justifyContent: o.U.Center,
                    alignItems: o.c.Center
                }, i.createElement(o._23, {
                    type: o._28.H4,
                    bold: !0
                }, i.createElement(s.a, {
                    className: "cheermote-help__tutorial-image",
                    sources: l
                }), Object(a.d)("How to Cheer", "Bits--CheermoteHelp")), i.createElement("p", {
                    className: "t-bits-card__contents-body t-bits-card__contents-body--narrow"
                }, Object(a.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp")))
            };
        n.d(t, "a", function() {
            return c
        })
    },
    "yTC+": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_SetMuteThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yqxY: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return u
        });
        var i = n("TToO"),
            a = n("U7vG"),
            r = (n.n(a), n("6sO2")),
            s = n("l21v"),
            o = n("Odds"),
            l = n("Tur5"),
            c = n("qDcU"),
            d = (n.n(c), [{
                id: "30259",
                alt: "HeyGuys"
            }, {
                id: "81274",
                alt: "VoHiYo"
            }, {
                id: "64138",
                alt: "SeemsGood"
            }]),
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onEmoteClick = function(e) {
                        if (n.renderedTokenID) {
                            var t = e.currentTarget.dataset.emoteString;
                            t ? n.props.onRitualRedeemed(n.renderedTokenID, t) : r.i.warn("[NewChatterRitual] Could not find clicked emote ID.")
                        } else r.i.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.onCloseButtonClick = function() {
                        n.renderedTokenID ? n.props.onRitualDismissed(n.renderedTokenID) : r.i.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.getAvailableToken = function() {
                        return n.props.ritualTokens.find(function(e) {
                            return e.type === l.RitualTokenType.NewChatter && e.status === l.RitualTokenStatus.Available && (!e.expiresAt || Date.now() < new Date(e.expiresAt).valueOf())
                        }) || null
                    }, n.renderedTokenID = null, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.getAvailableToken();
                    if (this.renderedTokenID = t ? t.id : null, !t) return null;
                    var n = d.map(function(t) {
                        return a.createElement(o.V, {
                            key: t.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, a.createElement(o._31, {
                            label: t.alt
                        }, a.createElement(o.T, {
                            alpha: !0,
                            onClick: e.onEmoteClick,
                            "data-emote-string": t.alt,
                            "data-test-selector": "emote-button"
                        }, a.createElement(o.V, {
                            padding: .5
                        }, a.createElement("img", {
                            className: "new-chatter-ritual__emote",
                            src: Object(s.e)(t.id, 3)
                        })))))
                    });
                    return a.createElement(o._19, {
                        background: o.m.Base,
                        border: !0,
                        className: "new-chatter-ritual",
                        margin: {
                            x: 2,
                            bottom: .5
                        },
                        padding: {
                            left: .5,
                            y: .5
                        }
                    }, a.createElement(o.V, {
                        alignItems: o.c.Center,
                        display: o.H.Flex,
                        flexWrap: o.K.NoWrap
                    }, a.createElement(o.V, {
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, this.props.bannerMessage), n, a.createElement(o._19, {
                        borderLeft: !0,
                        flexShrink: 0
                    }, a.createElement(o.v, {
                        ariaLabel: "close",
                        icon: o._11.Close,
                        onClick: this.onCloseButtonClick,
                        size: o.x.Large,
                        "data-test-selector": "dismiss-button"
                    }))))
                }, t
            }(a.Component)
    },
    ysVA: function(e, t) {},
    z7Cp: function(e, t) {},
    zVM8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query ViewerCardModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zbFZ: function(e, t) {},
    zzpv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WatchAdModal_Redeeem"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemTrueXAdInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "redeemTrueXAd"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "grantedBits"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 105
            }
        };
        n.loc.source = {
            body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\nredeemTrueXAd(input:$input) {\ngrantedBits\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    }
});
//# sourceMappingURL=pages.popout-chat-ab4222833522cefc7ffb5b91e3239a64.js.map