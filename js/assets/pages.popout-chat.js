webpackJsonp([39], {
    105: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = r.b.get("prime_blocked_regions", []);
            return !!e && !t.includes(e.toUpperCase())
        }

        function a(e) {
            var t = ["US"];
            return !e || !t.includes(e.toUpperCase())
        }
        t.b = i, t.a = a;
        var r = n(2)
    },
    106: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.options = e(t), i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, i.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, i.prototype.render = function() {
                        return r.createElement(t, a.__assign({}, this.props))
                    }, i.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(s.j)({
                            query: e.query,
                            variables: e.variables,
                            topic: e.topic,
                            type: e.type,
                            types: e.types,
                            mutator: e.mutator,
                            skipMessage: e.skipMessage
                        })
                    }, i.prototype.unsubscribe = function() {
                        this.unsubscriber && this.unsubscriber()
                    }, i
                }(r.Component)
            }
        }
        var a = n(0),
            r = n(1),
            s = n(30);
        n.d(t, "a", function() {
            return i
        })
    },
    107: function(e, t, n) {
        "use strict";

        function i() {
            return Math.floor(((new Date).getTime() - 6e5) / 1e3)
        }

        function a() {
            var e = new Date;
            return e.setMonth(e.getMonth() - 1), Math.floor(e.getTime() / 1e3)
        }
        n.d(t, "a", function() {
            return u
        });
        var r = n(0),
            s = n(502),
            o = (n.n(s), n(67)),
            l = n(269),
            c = {
                games: {
                    indexName: o.a.Games,
                    hitsPerPage: 2,
                    topNumericFilters: ["popularity>1"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                videos: {
                    indexName: o.a.Videos,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["created_at>" + a()]
                    },
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                users: {
                    indexName: o.a.Users,
                    hitsPerPage: 2,
                    topNumericFilters: ["followers>50"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                },
                channels: {
                    indexName: o.a.Channels,
                    hitsPerPage: 6,
                    get topNumericFilters() {
                        return ["channel_count>10", "updated_on>" + i()]
                    },
                    get singleTypeNumericFilters() {
                        return ["updated_on>" + i()]
                    },
                    optionalFacetFilters: ""
                },
                communities: {
                    indexName: o.a.Communities,
                    hitsPerPage: 2,
                    topNumericFilters: ["channels>9"],
                    singleTypeNumericFilters: [],
                    optionalFacetFilters: ""
                }
            },
            u = function() {
                function e(e, t) {
                    this.client = s(e, t)
                }
                return e.prototype.queryTopResults = function(e, t) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var n, i, a, s, o;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return n = [], i = [], n.push(this.getTopResult(c.games, e)), n.push(this.getTopResult(c.videos, e)), n.push(this.getTopResult(c.users, e)), n.push(this.getTopResult(c.channels, e)), n.push(this.getTopResult(c.communities, e)), i.push(this.getTotalResult(c.games, e)), i.push(this.getTotalResult(c.videos, e)), i.push(this.getTotalResult(c.users, e)), i.push(this.getTotalResult(c.channels, e)), i.push(this.getTotalResult(c.communities, e)), [4, this.client.search(n.concat(i))];
                                case 1:
                                    return a = r.sent(), s = a.results, o = {
                                        id: t,
                                        games: {
                                            totalHits: s[5].nbHits,
                                            hits: s[0].hits
                                        },
                                        videos: {
                                            totalHits: s[6].nbHits,
                                            hits: s[1].hits
                                        },
                                        users: {
                                            totalHits: s[7].nbHits,
                                            hits: s[2].hits
                                        },
                                        channels: {
                                            totalHits: s[8].nbHits,
                                            hits: s[3].hits
                                        },
                                        communities: {
                                            totalHits: s[9].nbHits,
                                            hits: s[4].hits
                                        }
                                    }, [2, o]
                            }
                        })
                    })
                }, e.prototype.queryForType = function(e, t, n, i) {
                    var a = void 0 === i ? {} : i,
                        s = a.page,
                        l = void 0 === s ? 0 : s,
                        u = a.hitsPerPage,
                        d = void 0 === u ? 50 : u,
                        p = a.facetFilters,
                        m = void 0 === p ? "" : p,
                        h = a.numericFilters;
                    return r.__awaiter(this, void 0, void 0, function() {
                        var i, a, s, u, p, f, g, b, v = this;
                        return r.__generator(this, function(k) {
                            switch (k.label) {
                                case 0:
                                    switch (i = {
                                        id: n,
                                        currentPage: l
                                    }, a = function(e) {
                                        return r.__awaiter(v, void 0, void 0, function() {
                                            var n, a;
                                            return r.__generator(this, function(r) {
                                                switch (r.label) {
                                                    case 0:
                                                        return n = {
                                                            indexName: e.indexName,
                                                            query: t,
                                                            params: {
                                                                page: l,
                                                                hitsPerPage: d,
                                                                numericFilters: h || e.singleTypeNumericFilters,
                                                                facets: "*",
                                                                facetFilters: m
                                                            }
                                                        }, [4, this.client.search([n])];
                                                    case 1:
                                                        return a = r.sent(), i.exhaustedHits = !a.results[0].nbHits || a.results[0].hits.length < d, [2, {
                                                            totalHits: a.results[0].nbHits,
                                                            hits: a.results[0].hits
                                                        }]
                                                }
                                            })
                                        })
                                    }, s = e) {
                                        case o.a.Games:
                                            return [3, 1];
                                        case o.a.Users:
                                            return [3, 3];
                                        case o.a.Channels:
                                            return [3, 5];
                                        case o.a.Videos:
                                            return [3, 7];
                                        case o.a.Communities:
                                            return [3, 9]
                                    }
                                    return [3, 11];
                                case 1:
                                    return u = i, [4, a(c.games)];
                                case 2:
                                    return u.games = k.sent(), [3, 12];
                                case 3:
                                    return p = i, [4, a(c.users)];
                                case 4:
                                    return p.users = k.sent(), [3, 12];
                                case 5:
                                    return f = i, [4, a(c.channels)];
                                case 6:
                                    return f.channels = k.sent(), [3, 12];
                                case 7:
                                    return g = i, [4, a(c.videos)];
                                case 8:
                                    return g.videos = k.sent(), [3, 12];
                                case 9:
                                    return b = i, [4, a(c.communities)];
                                case 10:
                                    return b.communities = k.sent(), [3, 12];
                                case 11:
                                    return [2, null];
                                case 12:
                                    return [2, i]
                            }
                        })
                    })
                }, e.prototype.queryVideos = function(e, t, n) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var i, a, s, u;
                        return r.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    switch (n.sort) {
                                        case l.b.Newest:
                                            i = o.a.VideosNewest;
                                            break;
                                        case l.b.Popular:
                                        default:
                                            i = o.a.Videos
                                    }
                                    switch (a = [], n.length) {
                                        case l.a.Short:
                                            a.push("length<=900");
                                            break;
                                        case l.a.Long:
                                            a.push("length>900")
                                    }
                                    switch (s = {
                                        indexName: i,
                                        query: e,
                                        params: {
                                            page: 0,
                                            hitsPerPage: c.videos.hitsPerPage,
                                            numericFilters: a,
                                            facets: "*",
                                            facetFilters: ""
                                        }
                                    }, n.type) {
                                        case l.c.PastBroadcasts:
                                            s.params.facetFilters = "broadcast_type:archive";
                                            break;
                                        case l.c.Uploads:
                                            s.params.facetFilters = "broadcast_type:upload";
                                            break;
                                        case l.c.Highlights:
                                            s.params.facetFilters = "broadcast_type:highlight"
                                    }
                                    return [4, this.client.search([s])];
                                case 1:
                                    return u = r.sent(), [2, {
                                        id: t,
                                        totalHits: u.results[0].nbHits,
                                        hits: u.results[0].hits
                                    }]
                            }
                        })
                    })
                }, e.prototype.getTopResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            page: 0,
                            hitsPerPage: e.hitsPerPage,
                            numericFilters: e.topNumericFilters
                        }
                    }
                }, e.prototype.getTotalResult = function(e, t) {
                    return {
                        indexName: e.indexName,
                        query: t,
                        params: {
                            hitsPerPage: 0,
                            numericFilters: e.singleTypeNumericFilters
                        }
                    }
                }, e
            }()
    },
    108: function(e, t, n) {
        "use strict";

        function i(e) {
            return "subscribe-button-modal-tab-" + e
        }
        var a, r = n(0),
            s = n(1),
            o = n(2),
            l = n(141),
            c = n(88),
            u = n(87),
            d = n(5),
            p = n(140),
            m = n(273),
            h = n(280),
            f = n(142),
            g = n(50),
            b = n(3),
            v = (n(490), "gift-subscription-button"),
            k = "subscribe-button";
        ! function(e) {
            e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
        }(a || (a = {}));
        var y = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.toggleActiveTab = function(e) {
                        if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-a-target")) {
                            case "subscribe-button-modal-tab-" + a.Prime:
                                n.setState({
                                    activeTab: a.Prime,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Prime);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier1:
                                n.setState({
                                    activeTab: a.Tier1,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Tier1);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier2:
                                n.setState({
                                    activeTab: a.Tier2,
                                    currentPurchasePrice: n.messages.tier2Price
                                }), n.props.onSelectTierTab(a.Tier2);
                                break;
                            case "subscribe-button-modal-tab-" + a.Tier3:
                                n.setState({
                                    activeTab: a.Tier3,
                                    currentPurchasePrice: n.messages.tier3Price
                                }), n.props.onSelectTierTab(a.Tier3);
                                break;
                            default:
                                n.setState({
                                    activeTab: a.Prime,
                                    currentPurchasePrice: n.messages.tier1Price
                                }), n.props.onSelectTierTab(a.Prime)
                        }
                    }, n.getTabTitle = function() {
                        switch (n.state.activeTab) {
                            case a.Prime:
                                return n.messages.freeSubWithPrime;
                            case a.Tier1:
                                return n.messages.tier1Sub;
                            case a.Tier2:
                                return n.messages.tier2Sub;
                            case a.Tier3:
                                return n.messages.tier3Sub;
                            default:
                                return n.messages.tier1Sub
                        }
                    }, n.getTierSubscribeButton = function() {
                        var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                        return n.props.isGift ? n.props.giftRecipient ? s.createElement(b.u, {
                            ariaLabel: n.messages.giftSubscription + " " + n.state.currentPurchasePrice,
                            "data-test-selector": v,
                            onClick: n.reportGiftCheckoutAction,
                            targetBlank: !0,
                            purchase: n.state.currentPurchasePrice,
                            linkTo: Object(c.a)(e.url, {
                                recipient: n.props.giftRecipient
                            })
                        }, n.messages.giftSubscription) : s.createElement(b.u, {
                            ariaLabel: n.messages.giftSubscription + " " + n.state.currentPurchasePrice,
                            "data-test-selector": v,
                            onClick: n.onGiftSelect,
                            purchase: n.state.currentPurchasePrice
                        }, n.messages.giftSubscription) : n.state.subbedTier === n.state.activeTab && n.state.activeTab === a.Prime ? s.createElement(h.a, {
                            authToken: n.props.authToken,
                            "data-a-target": "subscribe-with-prime-button",
                            isSubscribed: n.props.isSubscribed,
                            isSubscribedWithPrime: n.props.subbedTier === p.a,
                            onSubscribedWithPrime: n.onSubscribedWithPrime,
                            reportSubMenuAction: n.props.reportSubMenuAction,
                            subLogin: n.props.subLogin,
                            userHasPrime: n.props.userHasPrime,
                            canPrimeSubscribe: n.props.canPrimeSubscribe
                        }) : s.createElement(m.a, {
                            isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                            tierPrice: n.state.currentPurchasePrice,
                            reportSubAction: n.props.reportSubMenuAction,
                            url: e.url,
                            "data-a-target": "subscribe-now-button",
                            "data-test-selector": k
                        })
                    }, n.onSubscribedWithPrime = function() {
                        n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                    }, n.reportGiftCheckoutAction = function() {
                        n.props.reportSubMenuAction({
                            action: g.a.BuyGiftSub,
                            checkoutButtonTier: n.state.currentPurchasePrice,
                            giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                        })
                    }, n.onGiftSelect = function() {
                        n.props.reportSubMenuAction({
                            action: g.a.GiftASub,
                            checkoutButtonTier: n.state.currentPurchasePrice
                        }), n.props.onGiftSelect && n.props.onGiftSelect()
                    }, n.mapSubbedTierToTabs = function(e) {
                        e.subbedTier === l.a.Prime ? (n.setState({
                            activeTab: a.Prime,
                            subbedTier: a.Prime
                        }), e.onSelectTierTab(a.Prime)) : e.subbedTier === l.a.Tier1 ? (n.setState({
                            activeTab: a.Tier1,
                            subbedTier: a.Tier1
                        }), e.onSelectTierTab(a.Tier1)) : e.subbedTier === l.a.Tier2 ? (n.setState({
                            activeTab: a.Tier2,
                            subbedTier: a.Tier2
                        }), e.onSelectTierTab(a.Tier2)) : e.subbedTier === l.a.Tier3 ? (n.setState({
                            activeTab: a.Tier3,
                            subbedTier: a.Tier3
                        }), e.onSelectTierTab(a.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(a.Prime)
                    }, n.getExtraEmotes = function(e) {
                        return (e === a.Tier2 ? Object(u.b)(n.props.subscriptionProducts[1].emotes) : Object(u.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                            return s.createElement(b.U, {
                                display: b.H.InlineFlex,
                                margin: {
                                    right: .5
                                },
                                key: e.id
                            }, s.createElement("img", {
                                srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                            }))
                        })
                    }, n.state = {
                        activeTab: a.Tier1,
                        currentPurchasePrice: n.props.subscriptionProducts[0].price,
                        subbedTier: null
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages(this.props), this.mapSubbedTierToTabs(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.setMessages(e)
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.subbedTier && (e = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: .5
                        },
                        className: "subscription-balloon-options__subbed-star"
                    }, s.createElement(b._8, {
                        asset: b._9.Star
                    })));
                    var t = s.createElement(b._21, null),
                        n = null,
                        r = null,
                        c = null,
                        u = s.createElement(b.U, {
                            display: b.H.InlineFlex
                        }, this.state.subbedTier === a.Tier3 && e, s.createElement(b._18, {
                            active: this.state.activeTab === a.Tier3,
                            "data-a-target": i(a.Tier3),
                            onClick: this.toggleActiveTab
                        }, this.messages.tier3TabName));
                    this.hasDiscount(this.props) && this.state.activeTab !== a.Prime && (t = s.createElement(b.U, null, s.createElement(b._21, {
                        className: "tw-subscription-modal__old-price"
                    }, s.createElement("s", null, Object(f.a)(this.props.subscriptionProducts[this.state.activeTab - 1].self.oldPrice), " / Month")), s.createElement(b._21, {
                        className: "tw-subscription-modal__new-price",
                        type: b._26.H5,
                        bold: !0
                    }, Object(f.a)(this.props.subscriptionProducts[this.state.activeTab - 1].self.newPrice), " for the first month (Save 50%)"))), this.props.subbedTier !== l.a.Prime || this.props.isGift || (n = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 1
                        },
                        className: "subscription-balloon-options__prime-crown"
                    }, s.createElement(b._8, {
                        asset: b._9.Crown
                    })), s.createElement(b._18, {
                        active: this.state.activeTab === a.Prime,
                        "data-a-target": i(a.Prime),
                        onClick: this.toggleActiveTab
                    }, this.messages.prime))), this.props.subbedTier && this.props.subbedTier !== l.a.Tier1 || (r = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === a.Tier1 && e, s.createElement(b._18, {
                        active: this.state.activeTab === a.Tier1,
                        "data-a-target": i(a.Tier1),
                        onClick: this.toggleActiveTab
                    }, this.messages.tier1TabName))), this.props.subbedTier && this.props.subbedTier !== l.a.Prime && this.props.subbedTier !== l.a.Tier1 && this.props.subbedTier !== l.a.Tier2 || (c = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === a.Tier2 && e, s.createElement(b._18, {
                        active: this.state.activeTab === a.Tier2,
                        "data-a-target": i(a.Tier2),
                        onClick: this.toggleActiveTab
                    }, this.messages.tier2TabName)));
                    var d = null;
                    return (this.messages.tier2EmoteCount > 0 && this.state.activeTab === a.Tier2 || this.messages.tier3EmoteCount > 0 && this.state.activeTab === a.Tier3) && (d = s.createElement(b.U, {
                        display: b.H.InlineFlex,
                        alignItems: b.c.Center
                    }, this.getExtraEmotes(this.state.activeTab), s.createElement(b._21, {
                        bold: !0
                    }, Object(o.d)("Plus {extraEmoteCount, number} extra channel emote(s)", {
                        extraEmoteCount: this.state.activeTab === a.Tier2 ? this.messages.tier2EmoteCount : this.messages.tier3EmoteCount
                    }, "SubTierTabs")))), s.createElement(b.U, {
                        className: "channel-header__subscription-balloon-options"
                    }, s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._19, null, n, r, c, u)), s.createElement(b.U, null, s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._21, {
                        type: b._26.H5,
                        bold: !0
                    }, this.getTabTitle())), s.createElement(b.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(b._21, null, this.messages.subTierBenefits)), d, t, s.createElement(b.U, {
                        margin: {
                            top: 1,
                            right: 1
                        }
                    }, this.getTierSubscribeButton())))
                }, t.prototype.setMessages = function(e) {
                    var t = e.subscriptionProducts[1].emotes.length,
                        n = t + e.subscriptionProducts[2].emotes.length;
                    this.messages = {
                        tier2EmoteCount: t,
                        tier3EmoteCount: n,
                        prime: Object(o.d)("Prime", "SubTierTabs"),
                        subscribed: Object(o.d)("Subscribed", "SubTierTabs"),
                        subTierBenefits: Object(o.d)("Includes {availableEmoteCount, number} emoticon(s), subscriber badge, customizable messages upon subscribing, and ad-free viewing", {
                            availableEmoteCount: e.subscriptionProducts[0].emotes.length
                        }, "SubTierTabs"),
                        tier1Price: e.subscriptionProducts[0].price,
                        tier2Price: e.subscriptionProducts[1].price,
                        tier3Price: e.subscriptionProducts[2].price,
                        tier1TabName: e.subscriptionProducts[0].price,
                        tier2TabName: e.subscriptionProducts[1].price,
                        tier3TabName: e.subscriptionProducts[2].price,
                        subscribeNow: Object(o.d)("Subscribe Now", "SubTierTabs"),
                        freeSubWithPrime: Object(o.d)("Free Channel Sub with Twitch Prime", "SubTierTabs"),
                        giftSubscription: Object(o.d)("Gift A Subscription", "SubTierTabs"),
                        tier1Sub: e.subscriptionProducts[0].displayName,
                        tier2Sub: e.subscriptionProducts[1].displayName,
                        tier3Sub: e.subscriptionProducts[2].displayName
                    }, this.hasDiscount(e) && (this.messages.tier1Price = Object(f.a)(e.subscriptionProducts[0].self.newPrice), this.messages.tier2Price = Object(f.a)(e.subscriptionProducts[1].self.newPrice), this.messages.tier3Price = Object(f.a)(e.subscriptionProducts[2].self.newPrice))
                }, t.prototype.isSubscriptionDiscountReady = function(e) {
                    return void 0 !== e.subscriptionProducts[0].self
                }, t.prototype.hasDiscount = function(e) {
                    return !!this.isSubscriptionDiscountReady(e) && Object(f.b)(e.subscriptionProducts)
                }, t = r.__decorate([Object(d.c)("SubTierTabs")], t)
            }(s.Component),
            S = y;
        n.d(t, !1, function() {
            return v
        }), n.d(t, !1, function() {
            return k
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return S
        })
    },
    109: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        });
        var i;
        ! function(e) {
            e.Playing = "PLAYING", e.Streaming = "BROADCASTING", e.Watching = "WATCHING"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Playing = "playing", e.Streaming = "broadcasting", e.Watching = "watching"
        }(a || (a = {}))
    },
    129: function(e, t, n) {
        "use strict";

        function i(e) {
            return r.b.get(o.a, !1) || r.a.buildType !== s.a.Production ? "string" == typeof e ? e : e.pathname || "" : "string" == typeof e ? l + e : l + e.pathname
        }

        function a() {
            return !r.b.get(o.a, !1) && r.a.buildType === s.a.Production
        }
        var r = n(2),
            s = n(16),
            o = n(262);
        t.a = i, t.b = a;
        var l = "https://www.twitch.tv"
    },
    130: function(e, t, n) {
        "use strict";

        function i(e) {
            return void 0 === e && (e = ""), k.test(e)
        }

        function a(e) {
            void 0 === e && (e = "");
            var t = e.match(k);
            if (null === t) return "";
            if (t && t.length > 0 && void 0 !== t.index) {
                return t[1]
            }
            return ""
        }

        function r(e) {
            return void 0 === e && (e = ""), S.test(e)
        }

        function s(e) {
            void 0 === e && (e = "");
            var t = e.match(S);
            if (null === t) return "";
            if (t && t.length > 0 && void 0 !== t.index) {
                return t[1]
            }
            return ""
        }

        function o(e, t, n, i, a, r) {
            void 0 === r && (r = !1);
            var s;
            s = a ? Object(y.b)(e, a) : c(t.emotes);
            var o = Object(_.a)(t.displayName, t.username);
            return {
                badges: t.badges || {},
                bits: t.bits,
                user: f.__assign({}, o, {
                    userLogin: t.username,
                    userID: t.userID,
                    userType: t.userType,
                    color: t.color || l(t.userID)
                }),
                messageParts: e ? u(e, s, t.bits, n, i, o.userDisplayName) : [],
                deleted: r,
                timestamp: Date.now()
            }
        }

        function l(e, t) {
            return void 0 === t && (t = 15), "number" != typeof E[e] && (E[e] = Math.floor(Math.random() * t)), C[E[e]]
        }

        function c(e) {
            var t = [];
            return e && Object.keys(e).forEach(function(n) {
                e[n].forEach(function(e) {
                    t[e.startIndex] = {
                        startIndex: e.startIndex,
                        endIndex: e.endIndex + 1,
                        data: {
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": h(n, 1),
                                    "2x": h(n, 2),
                                    "4x": h(n, 4)
                                }
                            }
                        }
                    }
                })
            }), t
        }

        function u(e, t, n, i, a, r) {
            void 0 === t && (t = []);
            var s = [],
                o = 0,
                l = d(e);
            t.forEach(function(t) {
                var c = l ? l.slice(o, t.startIndex).join("") : e.slice(o, t.startIndex);
                c && (s = n ? s.concat(p(c, r, a, i)) : s.concat(m(c, r, a))), s.push({
                    type: v.a.Emote,
                    content: f.__assign({
                        alt: l ? l.slice(t.startIndex, t.endIndex).join("") : e.slice(t.startIndex, t.endIndex)
                    }, t.data)
                }), o = t.endIndex
            });
            var c = l ? l.slice(o).join("") : e.slice(o);
            return c && (s = n ? s.concat(p(c, r, a, i)) : s.concat(m(c, r, a))), s
        }

        function d(e) {
            var t = /[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g;
            return e.match(t)
        }

        function p(e, t, n, i) {
            if (!i) return m(e, t, n);
            var a = Object(b.c)(e, i).map(function(e) {
                return e.type === v.a.Text ? m(e.content, t, n) : e
            });
            return [].concat.apply([], a)
        }

        function m(e, t, n) {
            var o = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w.\/@#%&()\-+=:?~]*)?)([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
                l = /([^\w@#%\-+=:~])?(@)([^\u0000-\u007F]+|\w+)+([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
                c = [],
                u = e.split(/\s+/);
            return u.forEach(function(e, d) {
                o.lastIndex = 0;
                var p = o.exec(e);
                l.lastIndex = 0;
                var m = l.exec(e);
                if (p) {
                    var h = p.index,
                        f = !1,
                        b = !1,
                        k = p[1];
                    k && (h += 1, /\s/.test(k) || (f = !0)), 0 !== h && c.push({
                        type: v.a.Text,
                        content: (b ? " " : "") + e.slice(0, h) + (f ? " " : "")
                    }), b = !1;
                    var y = o.lastIndex,
                        S = p[3];
                    if (S && (y -= 1, /\s/.test(S) || (b = !0)), n) c.push({
                        type: v.a.Text,
                        content: " <" + Object(g.d)("deleted link", "CreateMessageData") + "> "
                    });
                    else {
                        var _ = p[2],
                            C = (_ ? "" : "https://") + e.slice(h, y);
                        if (i(C)) {
                            var E = a(C);
                            c.push({
                                type: v.a.ClipLink,
                                content: {
                                    slug: E,
                                    url: C,
                                    displayText: e.slice(h, y)
                                }
                            })
                        } else if (r(C)) {
                            var N = s(C);
                            c.push({
                                type: v.a.VideoLink,
                                content: {
                                    id: N,
                                    url: C,
                                    displayText: e.slice(h, y)
                                }
                            })
                        } else c.push({
                            type: v.a.Link,
                            content: {
                                displayText: e.slice(h, y),
                                url: C
                            }
                        })
                    }
                    var w = e.slice(y),
                        D = "";
                    d < u.length - 1 && (D = " "), w && c.push({
                        type: v.a.Text,
                        content: (b ? " " : "") + w + D
                    })
                } else {
                    if (!m) {
                        var T = c.length && c[c.length - 1],
                            D = "";
                        if (d < u.length - 1 && (D = " "), T && T.type === v.a.Text) T.content += e + D;
                        else {
                            var I = "";
                            d && (I = " "), c.push({
                                type: v.a.Text,
                                content: I + e + D
                            })
                        }
                        return
                    }
                    var U = m[3];
                    c.push({
                        type: v.a.Mention,
                        content: {
                            sender: t,
                            recipient: U
                        }
                    })
                }
            }), c
        }

        function h(e, t) {
            return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
        }
        var f = n(0),
            g = n(2),
            b = n(372),
            v = n(260),
            k = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
            y = n(266),
            S = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?"),
            _ = n(382);
        t.a = o, t.b = l, t.f = u, t.d = d, t.c = m, t.e = h;
        var C = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            E = {}
    },
    131: function(e, t, n) {
        "use strict";

        function i(e, t, n) {
            return void 0 === n && (n = !0),
                function(i) {
                    i(Object(s.o)(e)), n && Object(r.d)(e), t && Object(o.b)(e, t)
                }
        }
        n.d(t, "a", function() {
            return a
        }), t.b = i;
        var a, r = n(40),
            s = n(58),
            o = n(137);
        ! function(e) {
            e[e.UserMenu = 1] = "UserMenu", e[e.TypedCommand = 2] = "TypedCommand"
        }(a || (a = {}))
    },
    134: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Emote = "emote", e.Mention = "mention", e.None = "none"
        }(i || (i = {}))
    },
    135: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(4),
            r = n(1),
            s = n(9),
            o = n(2),
            l = n(6),
            c = n(5),
            u = n(279),
            d = n(3),
            p = n(485),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = Object(o.d)("Select One...", "ReportUserModal");
                    return e = this.props.data.loading ? [r.createElement("option", {
                        key: "Loading"
                    }, Object(o.d)("Loading...", "ReportReasonsSelect"))] : Object(u.b)(this.props.data.reportReasons).map(function(e) {
                        return r.createElement("option", {
                            key: e.canonical,
                            value: e.canonical
                        }, e.localized)
                    }), r.createElement(d.U, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(d.M, {
                        id: "reporting-modal__select",
                        label: Object(o.d)("Select Reason (required)", "ReportUserModal")
                    }, r.createElement(d._14, {
                        id: "reporting-modal__select",
                        "data-test-selector": "reporting-modal.select",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.handleChange,
                        defaultValue: t
                    }, r.createElement("option", {
                        disabled: !0,
                        key: "default"
                    }, t), e)))
                }, t = i.__decorate([Object(c.c)("ReportReasonSelect")], t)
            }(r.Component),
            h = Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            content: e.reportContentType
                        }
                    }
                }
            })(m),
            f = (n(486), n(487));
        n.d(t, "a", function() {
            return b
        }), n.d(t, "b", function() {
            return g
        }), n.d(t, "c", function() {
            return k
        });
        var g, b = "community_rules_violation";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError"
        }(g || (g = {}));
        var v = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(o.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: r.createElement("br", null),
                        tosLink: r.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(o.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.selectCommunity = function(e) {
                        t.setState({
                            selectedCommunityID: e.target.value,
                            selectedCommunityName: e.target.name
                        })
                    }, t.handleSubmit = function(e) {
                        e.preventDefault(), t.state.reason && t.state.description.length > 0 ? t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName) : t.props.onError(g.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                        var n = t.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        });
                        n.length && e === b ? t.setState({
                            reason: e,
                            selectedCommunityID: n[0].id,
                            selectedCommunityName: n[0].name,
                            isCommunityReason: !0
                        }) : t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(d.U, {
                        display: d.H.Flex,
                        flexDirection: d.J.Column,
                        alignItems: d.c.Center,
                        justifyContent: d.T.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === g.Success ? r.createElement("div", null, r.createElement(d.u, {
                        onClick: this.props.onClose
                    }, r.createElement(d.U, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Close", "ReportUser")))) : r.createElement("div", null, r.createElement(d.U, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        }
                    }, r.createElement(d._21, {
                        type: d._26.H4
                    }, this.props.title), r.createElement(d._17, {
                        color: d.F.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), r.createElement("form", null, r.createElement(d._17, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(h, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), this.renderCommunitiesSelector(), r.createElement(d.M, {
                        id: "reporting__text-area",
                        label: Object(o.d)("Description (required)", "ReportUser")
                    }, r.createElement(d._23, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), r.createElement(d._17, {
                        display: d.H.Flex,
                        justifyContent: d.T.Center
                    }, r.createElement(d.u, {
                        onClick: this.handleSubmit
                    }, r.createElement(d.U, {
                        padding: {
                            x: 2
                        }
                    }, Object(o.d)("Send", "ReportUser"))))))
                }, t.prototype.renderCommunitiesSelector = function() {
                    if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                    if (this.state.isCommunityReason) {
                        var e = this.props.data.user.directories.nodes.filter(function(e) {
                                return "COMMUNITY" === e.directoryType
                            }),
                            t = e.map(function(e) {
                                return r.createElement("option", {
                                    key: e.id,
                                    value: e.id,
                                    name: e.name
                                }, e.displayName)
                            });
                        return r.createElement(d.U, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(d.M, {
                            id: "reporting__select-community",
                            label: Object(o.d)("Community", "ReportUser")
                        }, r.createElement(d._14, {
                            id: "reporting__select-community",
                            "data-test-selector": "reporting.select-community",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.selectCommunity
                        }, t)))
                    }
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case g.FormError:
                            e = Object(o.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case g.MutationError:
                            e = Object(o.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case g.Success:
                            e = Object(o.d)("Thank you for your report.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = a({
                        "reporting__error-container": this.props.submitStatus !== g.Success,
                        "reporting__success-container": this.props.submitStatus === g.Success
                    });
                    return r.createElement(d._17, {
                        className: t,
                        fullWidth: this.props.submitStatus !== g.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(r.Component),
            k = Object(s.compose)(Object(l.a)(f, {
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            userId: e.targetUserID
                        }
                    }
                }
            }))(v)
    },
    136: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                authToken: Object(o.a)(e)
            }
        }
        var a = n(0),
            r = n(1),
            s = n(7),
            o = n(17),
            l = n(5),
            c = n(140),
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.reportInteractive = function() {
                        t.props.latencyTracking.reportInteractive()
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(c.b, {
                        authToken: this.props.authToken,
                        hostChannelID: this.props.hostChannelID,
                        hostChannelLogin: this.props.hostChannelLogin,
                        channelLogin: this.props.channelLogin,
                        updateContainerWidth: this.props.updateContainerWidth,
                        reportInteractive: this.reportInteractive
                    })
                }, t = a.__decorate([Object(l.c)("SubscribeButton")], t)
            }(r.Component),
            d = Object(s.a)(i)(u);
        n.d(t, !1, function() {
            return u
        }), n.d(t, "b", function() {
            return d
        }), n.d(t, !1, function() {}), n.d(t, "a", function() {
            return c.a
        }), n.d(t, !1, function() {
            return c.b
        })
    },
    137: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = "";
            switch (t) {
                case l.a.TypedCommand:
                    n = "typed_command";
                    break;
                case l.a.UserMenu:
                    n = "user_menu";
                    break;
                default:
                    n = "user_menu"
            }
            var i = "";
            switch (e) {
                case s.a.Dark:
                    i = "dark";
                    break;
                case s.a.Light:
                    i = "light";
                    break;
                default:
                    i = "light"
            }
            r.m.track(c.SpadeEventType.ThemeChange, {
                source: n,
                mode: i
            })
        }

        function a(e) {
            switch (e) {
                case o.a.Archive:
                    return c.SpadeVideoBroadcastType.Archive;
                case o.a.Highlight:
                    return c.SpadeVideoBroadcastType.Highlight;
                case o.a.Upload:
                    return c.SpadeVideoBroadcastType.Upload;
                case o.a.WatchParty:
                    return c.SpadeVideoBroadcastType.WatchParty;
                case o.a.PastPremiere:
                    return c.SpadeVideoBroadcastType.PastPremiere;
                case o.a.PremiereUpload:
                    return c.SpadeVideoBroadcastType.PremiereUpload;
                default:
                    return e
            }
        }
        t.b = i, t.a = a;
        var r = n(2),
            s = n(38),
            o = n(263),
            l = n(131),
            c = n(12)
    },
    140: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = new Map;
            return t.set(R.b.Prime, null), e.forEach(function(e, n) {
                t.set(n + 1, e)
            }), t
        }
        var a, r = n(0),
            s = n(1),
            o = n(2),
            l = n(47),
            c = n(6),
            u = n(86),
            d = n(141),
            p = n(105),
            m = n(21),
            h = n(30),
            f = n(18),
            g = n(5),
            b = n(39),
            v = n(67),
            k = n(107),
            y = n(265),
            S = n(28),
            _ = n(49),
            C = n(88),
            E = n(442),
            N = n(50),
            w = n(3),
            D = (n(489), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        selectedUser: null
                    }, t.messages = {
                        noResults: Object(o.d)("No Results", "GiftRecipientSearchResult"),
                        buyGift: Object(o.d)("Buy Gift Subscription", "GiftRecipientSearchResult"),
                        searchHint: Object(o.d)("Start typing to see a list of suggestions here.", "GiftRecipientSearchResult")
                    }, t.reportGiftCheckoutAction = function() {
                        t.props.reportSubMenuAction({
                            action: N.a.BuyGiftSub,
                            checkoutButtonTier: t.props.selectedProductPrice,
                            giftRecipient: t.state.selectedUser ? t.state.selectedUser.login : null
                        })
                    }, t.onUserClick = function(e) {
                        for (var n = e.target; n.parentElement && !n.dataset.user_id;) n = n.parentElement;
                        n.dataset.user_id && n.dataset.user_login && n.dataset.user_name ? t.setState({
                            selectedUser: {
                                id: n.dataset.userId || "",
                                login: n.dataset.user_login || "",
                                name: n.dataset.user_name || ""
                            }
                        }) : t.setState({
                            selectedUser: null
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (e.isWaiting || e.isErrored || !e.hasInput) && this.setState({
                        selectedUser: null
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = this.props.isWaiting ? s.createElement(w.U, {
                        fullHeight: !0
                    }, s.createElement(w.X, {
                        fillContent: !0
                    })) : this.props.hasInput ? this.props.isErrored ? this.getErrorMessage() : this.props.userResults && this.props.userResults.totalHits > 0 ? this.getUserResultContent() : this.getNoResultsMessage() : s.createElement(w.U, {
                        margin: 1
                    }, s.createElement(w._21, {
                        color: w.F.Alt2
                    }, this.messages.searchHint)), s.createElement("div", {
                        onKeyDown: this.props.onKeyDown
                    }, s.createElement(w._17, {
                        className: "gift-recipient-search-result-view",
                        background: w.m.Alt,
                        position: w._2.Relative,
                        overflow: w.Y.Hidden,
                        display: w.H.Block,
                        margin: {
                            bottom: 2
                        },
                        borderLeft: !0,
                        borderBottom: !0,
                        borderRight: !0
                    }, s.createElement(w.P, {
                        overflow: w.Y.Hidden,
                        position: w._2.Relative
                    }, s.createElement(S.b, {
                        suppressScrollX: !0
                    }, s.createElement(w.U, null, e, s.createElement(S.a, {
                        enabled: !this.props.isWaiting && this.props.hasInput,
                        loadMore: this.props.loadMore
                    }))))), this.getBuyGiftButton())
                }, t.prototype.getBuyGiftButton = function() {
                    var e = Object(C.a)(this.props.selectedProductURL, {
                            recipient: this.state.selectedUser ? this.state.selectedUser.login : ""
                        }),
                        t = s.createElement(E.a, {
                            subProductId: this.props.selectedProductId,
                            giftRecipient: this.state.selectedUser ? this.state.selectedUser.login : null,
                            onClick: this.reportGiftCheckoutAction,
                            checkoutURL: e
                        }),
                        n = null;
                    if (this.state.selectedUser) {
                        var i = Object(_.a)(this.state.selectedUser.login || "", this.state.selectedUser.name || "");
                        n = s.createElement(w.P, {
                            margin: {
                                x: 1
                            }
                        }, s.createElement(w._21, null, Object(o.d)("for {displayName}", {
                            displayName: s.createElement(w._21, {
                                bold: !0,
                                type: w._26.Span
                            }, i)
                        }, "GiftRecipientSearchResult")))
                    }
                    return s.createElement(w.U, {
                        display: w.H.Flex,
                        alignItems: w.c.Center,
                        fullWidth: !0
                    }, t, n)
                }, t.prototype.getErrorMessage = function() {
                    return s.createElement(w.U, {
                        fullWidth: !0,
                        textAlign: w._22.Center,
                        justifyContent: w.T.Center
                    }, s.createElement(w._21, null, Object(o.d)("Something went wrong", "GiftRecipientSearchResult")))
                }, t.prototype.getUserResultContent = function() {
                    var e = this;
                    return this.props.userResults ? this.props.userResults.results.map(function(t) {
                        var n = Object(_.a)(t.login || "", t.name || "");
                        return s.createElement(w.S, {
                            tabIndex: -1,
                            "data-ts_selectable": !0,
                            "data-tt_content": !0,
                            key: "git-recipient-result__" + t.id,
                            "data-user_id": t.id,
                            "data-user_login": t.login,
                            "data-user_name": t.name,
                            onClick: e.onUserClick,
                            "data-test-selector": "subscribe-button__gift_search_result"
                        }, s.createElement(w.U, {
                            padding: .5
                        }, s.createElement(w.A, {
                            row: !0
                        }, s.createElement(w.C, {
                            imageAlt: t.thumbnailAltText,
                            imageSrc: t.thumbnail ? t.thumbnail : "",
                            size: w.D.Size4,
                            aspect: w.k.Aspect1x1
                        }), s.createElement(w.B, null, s.createElement(w.P, {
                            padding: {
                                x: 1
                            }
                        }, s.createElement(w._21, {
                            type: w._26.H5,
                            ellipsis: !0
                        }, n))))))
                    }) : s.createElement(w._1, null)
                }, t.prototype.getNoResultsMessage = function() {
                    return s.createElement(w.U, {
                        margin: 1
                    }, s.createElement(w._21, {
                        color: w.F.Alt2
                    }, this.messages.noResults))
                }, t = r.__decorate([Object(g.c)("GiftRecipientSearchResultPanel")], t)
            }(s.Component)),
            T = D,
            I = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return this.props.selectedSubProduct ? (this.formatMessages(), s.createElement(w.U, {
                        padding: 2
                    }, s.createElement(w.U, null, s.createElement(w.U, {
                        display: w.H.Flex,
                        justifyContent: w.T.Between,
                        alignItems: w.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.giftSubscription), s.createElement(w.u, {
                        type: w.z.Text,
                        "data-a-target": "subscribe-back-button",
                        icon: w._9.AngleLeft,
                        onClick: this.props.onBack
                    }, s.createElement(w.U, {
                        alignItems: w.c.Center,
                        display: w.H.InlineFlex
                    }, s.createElement(w._21, null, this.messages.back)))), s.createElement(w.U, null, s.createElement(w._21, null, this.messages.giftSingleMonth), s.createElement(w.U, {
                        display: w.H.Flex,
                        justifyContent: w.T.Center,
                        fullWidth: !0
                    }, s.createElement(w.P, {
                        fullWidth: !0
                    }, s.createElement("div", null, s.createElement(w._11, {
                        onChange: this.handleChange,
                        onKeyDown: this.props.onKeyDown,
                        id: "gift-recipient-search",
                        placeholder: this.messages.searchPlaceholder
                    }), s.createElement(T, {
                        hasInput: this.props.hasInput,
                        userResults: this.props.userResults,
                        isErrored: this.props.isErrored,
                        isWaiting: this.props.isWaiting,
                        loadMore: this.props.loadMore,
                        onKeyDown: this.props.onKeyDown,
                        selectedProductId: this.props.selectedSubProduct.id,
                        selectedProductURL: this.props.selectedSubProduct.url,
                        selectedProductPrice: this.props.selectedSubProduct.price,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })))))))) : s.createElement(w._1, null)
                }, t.prototype.formatMessages = function() {
                    this.messages = {
                        giftSubscription: Object(o.d)("Choose a Gift Recipient", "GiftRecipientSearch"),
                        giftSingleMonth: Object(o.d)("{subDisplayName}: {giftPrice} Gift Subscription (Single Month)", {
                            subDisplayName: this.props.selectedSubProduct ? this.props.selectedSubProduct.displayName : "",
                            giftPrice: this.props.selectedSubProduct ? this.props.selectedSubProduct.price : ""
                        }, "GiftRecipientSearch"),
                        back: Object(o.d)("Back", "GiftRecipientSearch"),
                        searchPlaceholder: Object(o.d)("Search for a Twitch ID", "GiftRecipientSearch")
                    }
                }, t
            }(s.Component),
            U = 50,
            O = function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return t.onChange = function(e) {
                        if (t.inputTimer && (clearTimeout(t.inputTimer), t.inputTimer = 0), !e) return void t.setState(t.getEmptyState());
                        t.setState({
                            isWaiting: !0
                        }), t.inputTimer = setTimeout(function() {
                            return t.doSearch(e)
                        }, U)
                    }, t.loadMore = function() {
                        return r.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i;
                            return r.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (this.state.queryID || !0 === this.state.exhaustedHits) return [2];
                                        e = this.state.currentPage + 1, a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.searchClient.queryForType(v.a.Users, this.state.term, "", {
                                            page: e
                                        })];
                                    case 2:
                                        return t = a.sent(), [3, 4];
                                    case 3:
                                        return n = a.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2];
                                    case 4:
                                        return t ? (i = Object(y.b)({
                                            searchResults: t,
                                            append: e > 0,
                                            currentUserResults: this.state.currentUserResults
                                        }), this.setState({
                                            currentUserResults: i.currentUserResults,
                                            term: this.state.term,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: e,
                                            exhaustedHits: i.exhaustedHits
                                        }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                            isErrored: !0,
                                            hasInput: !0
                                        })), [2])
                                }
                            })
                        })
                    }, t.onKeyDown = function(e) {
                        t.state.term && (e.keyCode === b.a.Esc ? t.setState({
                            hasInput: !1
                        }) : e.keyCode === b.a.Up ? t.focusNext(-1) : e.keyCode === b.a.Down && t.focusNext(1))
                    }, t.state = t.getEmptyState(), t.searchClient = new k.a(o.a.algoliaApplicationID, o.a.algoliaAPIKey), t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(I, {
                        onChange: this.onChange,
                        loadMore: this.loadMore,
                        onKeyDown: this.onKeyDown,
                        userResults: this.state.currentUserResults,
                        hasInput: this.state.hasInput,
                        isErrored: this.state.isErrored,
                        isWaiting: this.state.isWaiting,
                        onBack: this.props.onBack,
                        selectedSubProduct: this.props.selectedSubProduct,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getEmptyState = function() {
                    return {
                        currentUserResults: {
                            totalHits: 0,
                            results: []
                        },
                        term: "",
                        hasInput: !1,
                        isErrored: !1,
                        queryID: "",
                        isWaiting: !1,
                        currentPage: -1,
                        focusSelectable: !1,
                        exhaustedHits: !1
                    }
                }, t.prototype.doSearch = function(e) {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var t, n, i, a, s, o;
                        return r.__generator(this, function(l) {
                            switch (l.label) {
                                case 0:
                                    this.inputTimer = 0, t = -1, n = f.a(), i = "INPUT" === document.activeElement.tagName, this.setState({
                                        queryID: n,
                                        focusSelectable: !i && !!this.state.currentFocus
                                    }), l.label = 1;
                                case 1:
                                    return l.trys.push([1, 3, , 4]), t = 0, [4, this.searchClient.queryForType(v.a.Users, e, n)];
                                case 2:
                                    return a = l.sent(), [3, 4];
                                case 3:
                                    return s = l.sent(), this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2];
                                case 4:
                                    return a ? this.state.queryID !== a.id ? [2] : (o = Object(y.b)({
                                        searchResults: a,
                                        append: !1
                                    }), this.setState(function(n) {
                                        return r.__assign({}, n, o, {
                                            queryID: "",
                                            term: e,
                                            hasInput: !0,
                                            isWaiting: !1,
                                            currentPage: t
                                        })
                                    }), [2]) : (this.setState(r.__assign({}, this.getEmptyState(), {
                                        isErrored: !0,
                                        hasInput: !0,
                                        term: e
                                    })), [2])
                            }
                        })
                    })
                }, t.prototype.focusNext = function(e) {
                    var t, n = document.querySelectorAll("[data-ts_selectable=true]"),
                        i = document.activeElement,
                        a = Array.prototype.indexOf.call(n, i);
                    if (t = a < 0 ? e > 0 ? 0 : n.length - 1 : a + e, t < 0 && (t = 0), !(t >= n.length)) {
                        var r = n.item(t);
                        r.focus(), r.tabIndex = 0, this.state.currentFocus && (this.state.currentFocus.tabIndex = -1), this.setState({
                            currentFocus: r
                        })
                    }
                }, t = r.__decorate([Object(g.c)("GiftRecipientSearch")], t)
            }(s.Component),
            x = O,
            M = n(268),
            R = n(108),
            P = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages()
                }, t.prototype.render = function() {
                    return s.createElement(w.U, {
                        padding: 2
                    }, s.createElement(w.U, null, s.createElement(w.U, {
                        display: w.H.Flex,
                        justifyContent: w.T.Between,
                        alignItems: w.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.allSubscriptions), s.createElement(w.u, {
                        type: w.z.Text,
                        "data-a-target": "subscribe-back-button",
                        "data-test-selector": "subscribe-button__back-button",
                        icon: w._9.AngleLeft,
                        onClick: this.props.onBack
                    }, s.createElement(w.U, {
                        alignItems: w.c.Center,
                        display: w.H.InlineFlex
                    }, s.createElement(w._21, null, this.messages.back)))), s.createElement(R.a, {
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.props.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1,
                        canPrimeSubscribe: !1,
                        isSubscribed: this.props.isSubscribed
                    })))
                }, t.prototype.setMessages = function() {
                    this.messages = {
                        back: Object(o.d)("Back", "PaidSubOptions"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "PaidSubOptions")
                    }
                }, t
            }(s.Component),
            F = P,
            j = n(136),
            A = n(280);
        ! function(e) {
            e[e.Top = 0] = "Top", e[e.SubOptions = 1] = "SubOptions", e[e.GiftOptions = 2] = "GiftOptions", e[e.RecipientSelect = 3] = "RecipientSelect"
        }(a || (a = {}));
        var L = n(142),
            B = n(491),
            H = (n(492), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.handleTopPageSubButtonClick = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickCheckout,
                            checkoutButtonTier: n.messages.tier1Price
                        })
                    }, n.showGiftOptions = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickGiftSubOptions,
                            modalLevel: "second_page"
                        }), n.setState(function() {
                            return {
                                currentPage: a.GiftOptions
                            }
                        })
                    }, n.showSubOptions = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickMoreSubOptions,
                            modalLevel: "second_page"
                        }), n.setState(function() {
                            return {
                                currentPage: a.SubOptions
                            }
                        })
                    }, n.showRecipientSelect = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.RecipientSelect
                            }
                        })
                    }, n.showTop = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.Top
                            }
                        })
                    }, n.goToPreviousPage = function() {
                        return n.props.reportSubMenuAction({
                            action: N.a.ClickBack,
                            modalLevel: n.state.currentPage === a.SubOptions || n.state.currentPage === a.GiftOptions ? "top_page" : "second_page"
                        }), n.state.currentPage === a.SubOptions || n.state.currentPage === a.GiftOptions ? void n.showTop() : n.state.currentPage === a.RecipientSelect ? void n.showGiftOptions() : void 0
                    }, n.onSelectTierTab = function(e) {
                        var t = n.tabToSubProduct.get(e);
                        if (t) {
                            var i = n.props.subscriptionProducts.findIndex(function(e) {
                                return e.price === t.price
                            });
                            i !== n.state.selectedSubProductIndex && n.setState({
                                selectedSubProductIndex: i
                            }), n.props.onSelectTierTab(t.price)
                        } else n.props.onSelectTierTab(j.a)
                    }, n.state = {
                        currentPage: a.Top,
                        selectedSubProductIndex: 0,
                        giftingEnabled: !1
                    }, n.tabToSubProduct = i(t.subscriptionProducts), n
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (!this.isSubscriptionDiscountReady(e) && this.isDiscountDataReady(e)) {
                        if (e.data.error) return;
                        var t = Object.assign({}, e.data.user.subscriptionProducts);
                        this.props.setPromotionData(t)
                    }
                }, t.prototype.render = function() {
                    return this.setMessages(), this.state.currentPage === a.Top ? this.getTopPage() : this.state.currentPage === a.SubOptions ? this.getPaidOptionsPage() : this.state.currentPage === a.GiftOptions ? this.getGiftOptionsPage() : this.state.currentPage === a.RecipientSelect ? this.getGiftRecipientSearchPage() : this.getTopPage()
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return r.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, o.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        giftingEnabled: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.getPaidOptionsPage = function() {
                    return s.createElement(F, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        isSubscribed: !1,
                        hasDiscount: this.hasDiscount(this.props)
                    })
                }, t.prototype.getGiftOptionsPage = function() {
                    return s.createElement(w.U, {
                        padding: 2
                    }, s.createElement(M.a, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onGiftSelect: this.showRecipientSelect
                    }))
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return s.createElement(x, {
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getTopPage = function() {
                    var e = null,
                        t = null,
                        n = null,
                        i = s.createElement(w._21, null, this.messages.tier1PricePerMonth),
                        a = this.messages.tier1Price;
                    return this.hasDiscount(this.props) && (i = s.createElement(w.U, null, s.createElement(w._21, {
                        className: "tw-subscription-modal__old-price"
                    }, s.createElement("s", null, this.messages.tier1PricePerMonth)), s.createElement(w._21, {
                        className: "tw-subscription-modal__new-price",
                        type: w._26.H5,
                        bold: !0
                    }, this.messages.discountMessage, " ")), a = Object(L.a)(this.props.subscriptionProducts[0].self.newPrice)), (this.props.inPrimeRegion || this.props.userHasPrime) && (n = this.renderPrimeSection()), this.props.isNonStandardSub || (e = s.createElement(w.U, {
                        margin: {
                            right: 1
                        },
                        display: w.H.Inline
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.seeMoreSubOptions,
                        onClick: this.showSubOptions,
                        type: w.z.Hollow,
                        "data-test-selector": "subscribe-button__more-sub-options-button",
                        "data-a-target": "see-more-sub-options-button"
                    }, this.messages.seeMoreSubOptions))), this.state.giftingEnabled && (t = s.createElement(w.U, {
                        display: w.H.Inline
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.giftSubscription,
                        onClick: this.showGiftOptions,
                        type: w.z.Hollow,
                        "data-test-selector": "subscribe-button__gift"
                    }, this.messages.giftSubscription))), s.createElement(w.U, {
                        padding: 2
                    }, n, s.createElement(w.U, null, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.paidSubscription), i, s.createElement(w.U, {
                        display: w.H.Flex
                    }, s.createElement(w.U, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.subscribeTier1,
                        "data-a-target": "tier1-subscribe-button",
                        "data-test-selector": "subscribe-button__top-page-sub-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.handleTopPageSubButtonClick,
                        purchase: a,
                        targetBlank: !0
                    }, this.messages.subscribe)))), s.createElement(w.U, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, e, t))
                }, t.prototype.renderPrimeSection = function() {
                    var e = this.props.userHasPrime ? this.messages.useFreeChannelSub : this.messages.primeUpsell;
                    return s.createElement(w.U, {
                        margin: {
                            bottom: 2
                        }
                    }, s.createElement(w.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.freeSubWithPrime)), s.createElement(w.U, null, s.createElement(w.U, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(w._21, null, e)), s.createElement(A.a, {
                        authToken: this.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: !1,
                        isSubscribedWithPrime: !1,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subLogin: this.props.subLogin,
                        userHasPrime: this.props.userHasPrime,
                        canPrimeSubscribe: this.props.canPrimeSubscribe
                    })))
                }, t.prototype.setMessages = function() {
                    var e = this.props.subscriptionProducts[0].price;
                    this.hasDiscount(this.props) && this.props.subscriptionProducts[0].self.isEligibleForDiscount && (e = Object(L.a)(this.props.subscriptionProducts[0].self.newPrice)), this.messages = {
                        useFreeChannelSub: Object(o.d)("Use your free channel subscription to directly support your favorite streamer. {upsellTextLink}", {
                            upsellTextLink: s.createElement("a", {
                                href: "https://help.twitch.tv/customer/en/portal/articles/2572060-twitch-prime-guide",
                                target: "_blank"
                            }, Object(o.d)("Learn more about your free sub", "BalloonNonSubbedUser"))
                        }, "BalloonNonSubbedUser"),
                        primeUpsell: Object(o.d)("{upsellTextBold}, plus get free game loot every month, ad-free viewing, and loads more with Twitch Prime.", {
                            upsellTextBold: s.createElement("strong", null, Object(o.d)("Support your favorite streamer", "BalloonNonSubbedUser"))
                        }, "BalloonNonSubbedUser"),
                        freeSubWithPrime: Object(o.d)("Free Channel Sub with Twitch Prime", "BalloonNonSubbedUser"),
                        changeSubscription: Object(o.d)("Change Your Subscription", "BalloonNonSubbedUser"),
                        seeMoreSubOptions: Object(o.d)("More Paid Subscription Options", "BalloonNonSubbedUser"),
                        tier1Price: Object(o.d)("{tier1Price}", {
                            tier1Price: e
                        }, "BalloonNonSubbedUser"),
                        paidSubscription: Object(o.d)("Paid Subscription", "BalloonNonSubbedUser"),
                        tier1PricePerMonth: Object(o.d)("{price} / Month", {
                            price: this.props.subscriptionProducts[0].price
                        }, "BalloonNonSubbedUser"),
                        subscribeTier1: Object(o.d)("Subscribe {tier1Price}", {
                            tier1Price: e
                        }, "BalloonNonSubbedUser"),
                        subscribeToUser: Object(o.d)("Subscribe to {username}", {
                            username: this.props.channelDisplayName
                        }, "BalloonNonSubbedUser"),
                        subscribe: Object(o.d)("Subscribe", "BalloonNonSubbedUser"),
                        back: Object(o.d)("Back", "BalloonNonSubbedUser"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "BalloonNonSubbedUser"),
                        chooseGiftSubscription: Object(o.d)("Choose A Gift Subscription", "BalloonNonSubbedUser"),
                        discountMessage: Object(o.d)("{price} for the first month (Save 50%)", {
                            price: e
                        }, "BalloonNonSubbedUser"),
                        giftSubscription: Object(o.d)("Gift a Subscription", "BalloonNonSubbedUser"),
                        giftDiscountDisclaimer: Object(o.d)("Promotions do not apply to Gift Subscriptions", "BalloonNonSubbedUser")
                    }
                }, t.prototype.isDiscountDataReady = function(e) {
                    return e.data.user && e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0 && e.data.user.subscriptionProducts[0] && e.data.user.subscriptionProducts[0].self && void 0 !== e.data.user.subscriptionProducts[0].self.isEligibleForDiscount
                }, t.prototype.isSubscriptionDiscountReady = function(e) {
                    return void 0 !== e.subscriptionProducts[0].self
                }, t.prototype.hasDiscount = function(e) {
                    return !!this.isDiscountDataReady(e) && Object(L.b)(e.subscriptionProducts)
                }, t = r.__decorate([Object(c.a)(B, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(g.c)("BalloonNonSubbedUser")], t)
            }(s.Component)),
            V = H,
            W = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.showTop = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.Top
                            }
                        })
                    }, n.showRecipientSelect = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.RecipientSelect
                            }
                        })
                    }, n.showGiftOptions = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickGiftSubOptions
                        }), n.setState(function() {
                            return {
                                currentPage: a.GiftOptions
                            }
                        })
                    }, n.showSubOptions = function() {
                        n.setState(function() {
                            return {
                                currentPage: a.SubOptions
                            }
                        })
                    }, n.goToPreviousPage = function() {
                        return n.state.currentPage === a.GiftOptions || n.state.currentPage === a.SubOptions || n.state.giftShortcut ? (n.showTop(), void n.setState({
                            giftShortcut: !1
                        })) : n.state.currentPage === a.RecipientSelect ? void n.showGiftOptions() : void 0
                    }, n.onGiftSelect = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.GiftASub,
                            checkoutButtonTier: n.props.subscriptionProducts[0].price
                        }), n.setState({
                            selectedSubProductIndex: 0,
                            giftShortcut: !0
                        }), n.showRecipientSelect()
                    }, n.handleTopPageSubButtonClick = function() {
                        n.props.reportSubMenuAction({
                            action: N.a.ClickCheckout,
                            checkoutButtonTier: n.props.subscriptionProducts[0].price
                        })
                    }, n.onSelectTierTab = function(e) {
                        var t = n.tabToSubProduct.get(e);
                        if (t) {
                            var i = n.props.subscriptionProducts.findIndex(function(e) {
                                return e.price === t.price
                            });
                            i !== n.state.selectedSubProductIndex && n.setState({
                                selectedSubProductIndex: i
                            }), n.props.onSelectTierTab(t.price)
                        } else n.props.onSelectTierTab(j.a)
                    }, n.state = {
                        currentPage: a.Top,
                        selectedSubProductIndex: 0,
                        giftShortcut: !1,
                        giftingEnabled: !1
                    }, n.tabToSubProduct = i(t.subscriptionProducts), n
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.setMessages(), this.state.currentPage === a.Top ? this.getTopPage() : this.state.currentPage === a.SubOptions ? this.getSubOptionsPage() : this.state.currentPage === a.GiftOptions ? this.getGiftOptionsPage() : this.state.currentPage === a.RecipientSelect ? this.getGiftRecipientSearchPage() : this.getTopPage()
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return r.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, o.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        giftingEnabled: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.getGiftRecipientSearchPage = function() {
                    return s.createElement(x, {
                        onBack: this.goToPreviousPage,
                        selectedSubProduct: this.props.subscriptionProducts[this.state.selectedSubProductIndex],
                        reportSubMenuAction: this.props.reportSubMenuAction
                    })
                }, t.prototype.getGiftOptionsPage = function() {
                    return s.createElement(w.U, {
                        padding: 2
                    }, s.createElement(M.a, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onGiftSelect: this.showRecipientSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    }))
                }, t.prototype.getSubOptionsPage = function() {
                    return s.createElement(F, {
                        onBack: this.goToPreviousPage,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        hasDiscount: !1,
                        isSubscribed: !0
                    })
                }, t.prototype.getTopPageGiftSection = function() {
                    return s.createElement(w.U, null, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.helpGrow), s.createElement(w.U, {
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: w.H.Flex
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.giftSubscription + " " + this.props.subscriptionProducts[0].price,
                        onClick: this.onGiftSelect,
                        purchase: this.props.subscriptionProducts[0].price
                    }, this.messages.giftSubscription), s.createElement(w.U, {
                        margin: {
                            left: 1
                        }
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.giftOptions,
                        onClick: this.showGiftOptions,
                        type: w.z.Hollow
                    }, this.messages.giftOptions))))
                }, t.prototype.getTopPageUpgradeSection = function() {
                    return s.createElement(w.U, null, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.upgradeSubscription), s.createElement(R.a, {
                        authToken: this.props.authToken,
                        onSubscribedWithPrime: this.props.onSubscribedWithPrime,
                        subLogin: this.props.subLogin,
                        userHasPrime: this.props.userHasPrime,
                        canPrimeSubscribe: this.props.canPrimeSubscribe,
                        channelDisplayName: this.props.channelDisplayName,
                        onSelectTierTab: this.onSelectTierTab,
                        subbedTier: this.props.subbedTier,
                        subscriptionProducts: this.props.subscriptionProducts,
                        reportSubMenuAction: this.props.reportSubMenuAction,
                        onGiftSelect: this.showRecipientSelect,
                        isSubscribed: !0
                    }))
                }, t.prototype.getGiftInfoSection = function() {
                    var e, t, n = null;
                    return this.props.giftPaidUpgrade ? (e = this.messages.yourSubscription, t = this.messages.giftInfo, n = this.messages.giftUpgradeInfo) : (e = this.messages.yourGiftSub, t = this.messages.giftInfoWithExpiration), s.createElement(w.U, null, s.createElement(w._21, {
                        bold: !0,
                        type: w._26.H4
                    }, e), s.createElement(w.P, {
                        margin: {
                            y: 1
                        }
                    }, s.createElement(w._21, null, t)), n)
                }, t.prototype.getGiftExtendSection = function() {
                    var e = null,
                        t = null;
                    return this.props.isNonStandardSub || (e = s.createElement(w.U, {
                        margin: {
                            right: 1
                        },
                        display: w.H.Inline
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.seeMoreSubOptions,
                        onClick: this.showSubOptions,
                        type: w.z.Hollow,
                        "data-a-target": "see-more-sub-options-button"
                    }, this.messages.seeMoreSubOptions))), t = s.createElement(w.U, {
                        display: w.H.Inline
                    }, s.createElement(w.u, {
                        ariaLabel: this.messages.giftSubscription,
                        onClick: this.showGiftOptions,
                        type: w.z.Hollow
                    }, this.messages.giftSubscription)), s.createElement(w.U, null, s.createElement(w.U, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(w._21, {
                        type: w._26.H4,
                        bold: !0
                    }, this.messages.extendSubscription), s.createElement(w.P, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(w._21, null, this.messages.tier1PricePerMonth)), s.createElement(w.U, {
                        margin: {
                            right: 1,
                            top: 1
                        }
                    }, s.createElement(w.u, {
                        ariaLabel: this.props.subscriptionProducts[0].price,
                        "data-a-target": "tier1-subscribe-button",
                        linkTo: this.props.subscriptionProducts[0].url,
                        onClick: this.handleTopPageSubButtonClick,
                        purchase: this.props.subscriptionProducts[0].price,
                        targetBlank: !0
                    }, this.messages.subscribe))), s.createElement(w.U, {
                        margin: {
                            right: 1,
                            top: 2
                        }
                    }, e, t))
                }, t.prototype.getTopPage = function() {
                    return this.state.giftingEnabled ? this.props.userHasGiftSub ? this.props.userHasGiftSub && !this.props.giftPaidUpgrade ? s.createElement(w.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, s.createElement(w.U, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getGiftExtendSection()) : s.createElement(w.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, s.createElement(w.U, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getGiftInfoSection()), this.getTopPageGiftSection()) : s.createElement(w.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, s.createElement(w.U, {
                        margin: {
                            bottom: 2
                        }
                    }, this.getTopPageGiftSection()), this.getTopPageUpgradeSection()) : s.createElement(w.U, {
                        className: "channel-header__subscription-modal-main",
                        padding: 2
                    }, this.getTopPageUpgradeSection())
                }, t.prototype.setMessages = function() {
                    switch (this.props.subbedTier) {
                        case d.a.Tier1:
                            this.props.subscriptionProducts[0].price;
                            break;
                        case d.a.Tier2:
                            this.props.subscriptionProducts[1].price;
                            break;
                        case d.a.Tier3:
                            this.props.subscriptionProducts[2].price;
                            break;
                        default:
                            this.props.subscriptionProducts[0].price
                    }
                    this.messages = {
                        upgradeSubscription: Object(o.d)("Upgrade Your Subscription", "BalloonSubbedUser"),
                        helpGrow: Object(o.d)("Help Grow {streamer}'s Community", {
                            streamer: this.props.channelDisplayName
                        }, "BalloonSubbedUser"),
                        giftSubscription: Object(o.d)("Gift A Subscription", "BalloonSubbedUser"),
                        giftOptions: Object(o.d)("More Gift Options", "BalloonSubbedUser"),
                        chooseGiftSubscription: Object(o.d)("Choose A Gift Subscription", "BalloonSubbedUser"),
                        back: Object(o.d)("Back", "BalloonSubbedUser"),
                        yourSubscription: Object(o.d)("Your Subscription", "BalloonSubbedUser"),
                        extendSubscription: Object(o.d)("Extend Your Subscription", "BalloonSubbedUser"),
                        yourGiftSub: Object(o.d)("Your Gift Subscription", "BalloonSubbedUser"),
                        seeMoreSubOptions: Object(o.d)("More Paid Subscription Options", "BalloonSubbedUser"),
                        subscribe: Object(o.d)("Subscribe", "BalloonSubbedUser"),
                        giftInfo: Object(o.d)("{giftPrice} Gift Subscription from {giftSender}", {
                            giftPrice: this.getCurrentSubPrice(),
                            giftSender: s.createElement(w._21, {
                                bold: !0,
                                type: w._26.Span
                            }, this.props.giftSender || "")
                        }, "BalloonSubbedUser"),
                        giftUpgradeInfo: Object(o.d)("Your new {upgradePrice} Paid Subscription will begin on {subStartDate}", {
                            upgradePrice: this.props.giftPaidUpgrade ? this.props.giftPaidUpgrade.price : "",
                            subStartDate: this.getFormattedGiftUpgradeStartDate()
                        }, "BalloonSubbedUser"),
                        giftInfoWithExpiration: Object(o.d)("{giftPrice} Subscription from {giftSender} - Benefits expire on {giftEndDate}", {
                            giftPrice: this.getCurrentSubPrice(),
                            giftSender: s.createElement(w._21, {
                                bold: !0,
                                type: w._26.Span
                            }, this.props.giftSender || ""),
                            giftEndDate: this.getFormattedGiftEndDate()
                        }, "BalloonSubbedUser"),
                        tier1PricePerMonth: Object(o.d)("{price} / Month", {
                            price: this.props.subscriptionProducts[0].price
                        }, "BalloonSubbedUser"),
                        allSubscriptions: Object(o.d)("All Paid Subscriptions", "BalloonSubbedUser")
                    }
                }, t.prototype.getFormattedGiftUpgradeStartDate = function() {
                    var e = "";
                    if (this.props.giftPaidUpgrade && this.props.giftPaidUpgrade.startsAt) try {
                        e = Object(o.c)(new Date(this.props.giftPaidUpgrade.startsAt), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        o.i.debug(t, "There was an error formatting gift upgrade start date."), e = ""
                    }
                    return e
                }, t.prototype.getFormattedGiftEndDate = function() {
                    var e = "";
                    if (this.props.giftSubEndDate) try {
                        e = Object(o.c)(new Date(this.props.giftSubEndDate), {
                            month: "long",
                            day: "numeric"
                        })
                    } catch (t) {
                        o.i.debug(t, "There was an error formatting gift end date."), e = ""
                    }
                    return e
                }, t.prototype.getCurrentSubPrice = function() {
                    switch (this.props.subbedTier) {
                        case "1000":
                            return this.props.subscriptionProducts[0].price;
                        case "2000":
                            return this.props.subscriptionProducts[1].price;
                        case "3000":
                            return this.props.subscriptionProducts[2].price;
                        default:
                            return this.props.subscriptionProducts[0].price
                    }
                }, t = r.__decorate([Object(g.c)("BalloonSubbedUser")], t)
            }(s.Component),
            G = W,
            q = (n(493), n(494));
        n.d(t, "a", function() {
            return z
        }), n.d(t, "b", function() {
            return J
        });
        var z = "prime",
            $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribed: !1,
                        activeTierPrice: z,
                        subbedTier: null,
                        subData: null,
                        inPrimeRegion: !1,
                        isNonStandardSub: !1,
                        isGiftSub: !1,
                        hasReconciledUser: !1,
                        subGiftingEnabled: !1
                    }, t.modalLevel = "top_page", t.reportSubMenuAction = function(e) {
                        Object(N.b)({
                            action: e.action || "",
                            channelLogin: t.props.channelLogin || "",
                            channelID: t.props.data && t.props.data.user.id,
                            checkoutButtonTier: e.checkoutButtonTier || t.state.activeTierPrice.slice(),
                            hasSubCredit: !!t.props.data.user.self && t.props.data.user.self.canPrimeSubscribe,
                            hostChannelID: t.props.hostChannelID,
                            hostChannelLogin: t.props.hostChannelLogin,
                            isMenuOpen: !(e.action === N.a.OpenSubMenu),
                            sub_location: "channel_page",
                            modal: !t.state.isSubscribed,
                            modalLevel: t.state.isSubscribed ? "" : t.modalLevel.slice(),
                            showPrimeContent: t.state.inPrimeRegion,
                            giftRecipient: e.giftRecipient || null
                        }), !e.modalLevel || e.action !== N.a.ClickMoreSubOptions && e.action !== N.a.ClickBack || (t.modalLevel = e.modalLevel, t.setState({
                            activeTierPrice: z
                        }))
                    }, t.handleMenuToggle = function(e) {
                        t.reportSubMenuAction({
                            action: e ? N.a.CloseSubMenu : N.a.OpenSubMenu
                        })
                    }, t.onSelectTierTab = function(e) {
                        t.state.activeTierPrice !== e && t.setState({
                            activeTierPrice: e
                        })
                    }, t.onSubscribedWithPrime = function() {
                        t.reportSubMenuAction({
                            action: N.a.SubWithPrime
                        }), t.modalLevel = "", t.setState({
                            isSubscribed: !0,
                            subbedTier: d.a.Prime
                        }), Object(m.d)(q, {
                            login: t.props.channelLogin
                        }, function(e) {
                            return e.user && e.user.self && (e.user.self.canPrimeSubscribe = !1, e.user.self.subscriptionBenefit = {
                                id: Object(f.a)(),
                                purchasedWithPrime: !0,
                                tier: z,
                                endsAt: null,
                                paidUpgrade: null,
                                gift: {
                                    isGift: !1,
                                    gifter: null,
                                    __typename: "SubscriptionGift"
                                },
                                __typename: "SubscriptionBenefit"
                            }), e
                        })
                    }, t.setMessages = function() {
                        var e;
                        e = t.state.subGiftingEnabled ? Object(o.d)("Gift A Sub", "SubscribeButton") : Object(o.d)("Subscribed", "SubscribeButton"), t.messages = {
                            subscribe: t.props.hostChannelID ? Object(o.d)("Subscribe to {username}", {
                                username: t.props.data.user.displayName
                            }, "SubscribeButton") : Object(o.d)("Subscribe", "SubscribeButton"),
                            subscribed: t.props.hostChannelID ? Object(o.d)("Subscribed to {username}", {
                                username: t.props.data.user.displayName
                            }, "SubscribeButton") : e,
                            discountMessage: Object(o.d)("Get 50% off the first month of any paid Subscription", "SubscribeButton")
                        }
                    }, t.setPromotionData = function(e) {
                        if (t.state) {
                            var n = Object.assign({}, t.state.subData);
                            if (null !== n) {
                                for (var i = [], a = 0; a < 3; a++) {
                                    var r = Object.assign({}, n.subscriptionProducts[a]);
                                    r.self = e[a].self, i.push(r)
                                }
                                n.subscriptionProducts = i, t.setState({
                                    subData: n
                                })
                            }
                        }
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.getGiftingExperimentAssignment()
                }, t.prototype.componentDidMount = function() {
                    this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch(), this.props.channelLogin !== e.channelLogin && this.setState({
                            subData: null,
                            isSubscribed: !1,
                            hasReconciledUser: !1
                        }), this.isUserDataReady(e) && this.hasSubscriptionProducts(e)) {
                        if (!this.state.inPrimeRegion && e.data.requestInfo && Object(p.b)(e.data.requestInfo.countryCode) && this.setState({
                                inPrimeRegion: !0
                            }), e.data.currentUser && this.isOwnChannel(e)) return void this.setState({
                            hasReconciledUser: !0
                        });
                        if (this.setState({
                                subData: e.data.user,
                                isNonStandardSub: 1 === e.data.user.subscriptionProducts.length
                            }), e.data.user.subscriptionProducts.some(this.isSubscriptionProductInvalid) && this.setState({
                                isNonStandardSub: !0
                            }), e.data.currentUser && e.data.user.self)
                            if (e.data.user.self.subscriptionBenefit) {
                                var t = e.data.user.self.subscriptionBenefit.purchasedWithPrime ? z : e.data.user.self.subscriptionBenefit.tier;
                                this.modalLevel = "";
                                var n = e.data.user.self.subscriptionBenefit.gift.isGift;
                                this.setState({
                                    isSubscribed: !0,
                                    subbedTier: t,
                                    hasReconciledUser: !0,
                                    isGiftSub: n
                                })
                            } else this.setState({
                                isSubscribed: !1,
                                hasReconciledUser: !0
                            });
                        else this.setState({
                            hasReconciledUser: !0
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.shouldRender() || !this.hasSubscriptionProducts(this.props)) return null;
                    if (this.setMessages(), this.props.data.currentUser && this.state.isSubscribed && this.state.isNonStandardSub) return s.createElement(w.u, {
                        disabled: !0,
                        ariaLabel: this.messages.subscribed,
                        icon: w._9.Star
                    }, this.messages.subscribed);
                    var e = this.state.subbedTier === d.a.Prime ? w._9.Crown : w._9.Star,
                        t = this.state.isSubscribed ? this.messages.subscribed : this.messages.subscribe,
                        n = this.state.isSubscribed ? "subscribed-button" : "subscribe-button",
                        i = s.createElement(w.u, {
                            "data-a-target": n,
                            "data-test-selector": "subscribe-button__dropdown",
                            ariaLabel: t,
                            type: this.state.isSubscribed ? w.z.Success : w.z.Default,
                            dropdown: !0,
                            icon: this.state.isSubscribed ? e : void 0
                        }, t),
                        a = this.props.hostChannelID ? w.q.TopLeft : w.q.BottomRight;
                    return s.createElement(l.a, {
                        onToggle: this.handleMenuToggle
                    }, i, s.createElement(w.p, {
                        size: w.r.Large,
                        direction: a,
                        "data-a-target": "sub-balloon"
                    }, this.renderBalloonContent()))
                }, t.prototype.renderBalloonContent = function() {
                    if (!this.state.subData) return o.i.debug("NOT rendering sub balloon; sub data not yet ready", {
                        state: this.state
                    }), null;
                    if (o.i.debug("rendering sub balloon", {
                            state: this.state
                        }), this.props.data.currentUser) {
                        if (this.state.isSubscribed) return s.createElement(G, {
                            authToken: this.props.authToken,
                            canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                            channelDisplayName: this.state.subData.displayName,
                            onSelectTierTab: this.onSelectTierTab,
                            reportSubMenuAction: this.reportSubMenuAction,
                            subbedTier: this.state.subbedTier,
                            isNonStandardSub: this.state.isNonStandardSub,
                            subscriptionProducts: this.state.subData.subscriptionProducts,
                            onSubscribedWithPrime: this.onSubscribedWithPrime,
                            userHasPrime: this.props.data.currentUser.hasPrime,
                            userHasGiftSub: this.state.isGiftSub,
                            subLogin: this.state.subData.login,
                            giftSubEndDate: this.props.data.user.self && this.props.data.user.self.subscriptionBenefit ? this.props.data.user.self.subscriptionBenefit.endsAt : void 0,
                            giftPaidUpgrade: this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.paidUpgrade ? this.props.data.user.self.subscriptionBenefit.paidUpgrade : void 0,
                            giftSender: this.getGiftSender()
                        });
                        var e = null;
                        return this.hasDiscount() && (e = s.createElement(w.U, {
                            className: "tw-subscription-modal__discount-bar"
                        }, s.createElement(w._21, null, this.messages.discountMessage))), s.createElement(w.U, null, e, s.createElement(V, {
                            authToken: this.props.authToken,
                            channelDisplayName: this.state.subData.displayName,
                            channelLogin: this.props.channelLogin,
                            canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                            inPrimeRegion: this.state.inPrimeRegion,
                            isNonStandardSub: this.state.isNonStandardSub,
                            onSelectTierTab: this.onSelectTierTab,
                            onSubscribedWithPrime: this.onSubscribedWithPrime,
                            reportSubMenuAction: this.reportSubMenuAction,
                            subLogin: this.state.subData.login,
                            subscriptionProducts: this.state.subData.subscriptionProducts,
                            userHasPrime: this.props.data.currentUser.hasPrime,
                            setPromotionData: this.setPromotionData
                        }))
                    }
                    return s.createElement(V, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.state.subData.displayName,
                        channelLogin: this.props.channelLogin,
                        canPrimeSubscribe: !!this.props.data.user.self && this.props.data.user.self.canPrimeSubscribe,
                        inPrimeRegion: this.state.inPrimeRegion,
                        isNonStandardSub: this.state.isNonStandardSub,
                        onSelectTierTab: this.onSelectTierTab,
                        onSubscribedWithPrime: this.onSubscribedWithPrime,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subLogin: this.state.subData.login,
                        subscriptionProducts: this.state.subData.subscriptionProducts,
                        userHasPrime: !1,
                        setPromotionData: this.setPromotionData
                    })
                }, t.prototype.hasSubscriptionProducts = function(e) {
                    return e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0
                }, t.prototype.shouldRender = function() {
                    return !!this.isUserDataReady(this.props) && (!this.hasSubscriptionProducts(this.props) || !!this.isSubscriptionReady())
                }, t.prototype.isUserDataReady = function(e) {
                    return e.data && e.data.user && !e.data.loading && !e.data.error
                }, t.prototype.isOwnChannel = function(e) {
                    return e.data.user.id === (e.data.currentUser && e.data.currentUser.id)
                }, t.prototype.isSubscriptionReady = function() {
                    return this.state.subData && this.state.hasReconciledUser
                }, t.prototype.getGiftSender = function() {
                    return this.state.isGiftSub && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && this.props.data.user.self.subscriptionBenefit.gift.isGift ? this.props.data.user.self.subscriptionBenefit.gift.gifter.displayName : null
                }, t.prototype.getGiftingExperimentAssignment = function() {
                    return r.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return r.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    e = "no", n.label = 1;
                                case 1:
                                    return n.trys.push([1, 3, , 4]), [4, o.n.experiments.getAssignment("TWILIGHT_SUB_GIFTING")];
                                case 2:
                                    return e = n.sent(), [3, 4];
                                case 3:
                                    return t = n.sent(), e = "no", [3, 4];
                                case 4:
                                    return this.setState({
                                        subGiftingEnabled: "yes" === e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.isSubscriptionProductInvalid = function(e) {
                    return !e.emoteSetID
                }, t.prototype.isSubscriptionDiscountReady = function(e) {
                    return !(!e || !e.subData) && void 0 !== e.subData.subscriptionProducts[0].self
                }, t.prototype.hasDiscount = function() {
                    var e = this.state;
                    return !!this.isSubscriptionDiscountReady(e) && (!(!e || !e.subData) && Object(L.b)(e.subData.subscriptionProducts))
                }, t = r.__decorate([Object(c.a)(q, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(u.a)([{
                    topic: function(e) {
                        return Object(h.n)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }])], t)
            }(s.Component),
            J = $
    },
    141: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Prime: "prime",
            Tier1: "1000",
            Tier2: "2000",
            Tier3: "3000"
        }
    },
    142: function(e, t, n) {
        "use strict";

        function i(e) {
            return "$" + (e / 100).toFixed(2).toString()
        }

        function a(e) {
            if (e[0].self && e[1].self && e[2].self) {
                if (e[0].self.isEligibleForDiscount) return !0;
                if (e[1].self.isEligibleForDiscount) return !0;
                if (e[2].self.isEligibleForDiscount) return !0
            }
            return !1
        }
        t.a = i, t.b = a
    },
    145: function(e, t, n) {
        "use strict";

        function i() {
            return {
                byID: {},
                orderedIDs: [],
                openedIDs: [],
                focusedID: ""
            }
        }

        function a(e, t) {
            switch (void 0 === e && (e = i()), t.type) {
                case v.f:
                    var n = g.__assign({}, e),
                        a = n.byID[t.data.threadID],
                        u = n.openedIDs.includes(t.data.threadID);
                    return a || (n = b(n, function(e) {
                        return e.orderedIDs
                    }, function(e) {
                        return e.push(t.data.threadID), e
                    }), n = b(n, function(e) {
                        return e.byID
                    }, function(e) {
                        return e[t.data.threadID] = t.data, e
                    })), n.openedIDs.includes(t.data.threadID) && !n.byID[t.data.threadID].hidden || (n.byID[t.data.threadID].hidden = t.data.hidden), n.focusedID = t.data.threadID, n = l(n, t.data.threadID, t.contentWidth), (!u || u && !t.data.ignoreCollapseIfOpen) && (t.data.collapsed || (n = c(n, t.data.threadID, t.contentWidth))), n;
                case v.b:
                    if (!e.byID[t.threadID]) return e;
                    var n = b(e, function(e) {
                        return e.byID
                    }, function(e) {
                        return delete e[t.threadID], e
                    });
                    return n = b(n, function(e) {
                        return e.orderedIDs
                    }, function(e) {
                        return e.filter(function(e) {
                            return e !== t.threadID
                        })
                    }), n = b(n, function(e) {
                        return e.openedIDs
                    }, function(e) {
                        return e.filter(function(e) {
                            return e !== t.threadID
                        })
                    }), e.focusedID === t.threadID && (n.focusedID = n.openedIDs[0]), o(n, t.contentWidth);
                case v.c:
                    return e.byID[t.threadID] ? b(e, function(e) {
                        return e.byID
                    }, function(e) {
                        return e[t.threadID].collapsed = !0, e
                    }) : e;
                case v.d:
                    return c(e, t.threadID, t.contentWidth);
                case v.e:
                    return b(e, function(e) {
                        return e.focusedID
                    }, function() {
                        return t.threadID
                    });
                case v.g:
                    return b(e, function(e) {
                        return e.focusedID
                    }, function(e) {
                        return e === t.threadID ? "" : e
                    });
                case v.a:
                    var d = r(e);
                    if (d > t.contentWidth) {
                        if (e.openedIDs.length <= 1) return e;
                        for (var p = g.__assign({}, e); d > t.contentWidth && p.openedIDs.length > 1;) p = s(p), d = r(p);
                        return p
                    }
                    if (t.contentWidth - d >= y) {
                        var m = Math.floor((t.contentWidth - d) / y),
                            h = Math.min(m, e.orderedIDs.length - e.openedIDs.length);
                        if (0 === h) return e;
                        for (var p = g.__assign({}, e), f = 0; f < h; f++)
                            if (p = o(p, t.contentWidth), p.openedIDs.length > 1)
                                for (var k = p.openedIDs, S = k.length, _ = 0, C = p.orderedIDs; _ < C.length; _++) {
                                    var E = C[_];
                                    if (k[S - 1] === E) {
                                        var N = k.splice(S - 2, 1);
                                        k.push(N[0]);
                                        break
                                    }
                                    if (k[S - 2] === E) break
                                }
                            return p
                    }
                    return e;
                default:
                    return e
            }
        }

        function r(e) {
            if (0 === e.openedIDs.length) return 0;
            for (var t = 0, n = 0, i = e.openedIDs; n < i.length; n++) {
                var a = i[n],
                    r = e.byID[a];
                r.hidden || (t += r.collapsed ? k : y)
            }
            return t
        }

        function s(e) {
            var t = e.openedIDs.slice(),
                n = t.pop();
            return n && e.focusedID === n && t.length > 0 && (t.pop(), t.push(n)), b(e, function(e) {
                return e.openedIDs
            }, function() {
                return t
            })
        }

        function o(e, t) {
            var n = e.orderedIDs.filter(function(t) {
                return !e.openedIDs.includes(t)
            });
            return n.length > 0 ? l(e, n[0], t, e.focusedID) : e
        }

        function l(e, t, n, i) {
            var a = n - r(e),
                o = g.__assign({}, e);
            return o.openedIDs.includes(t) || (a < y && (o = s(o)), o = b(o, function(e) {
                return e.openedIDs
            }, function(e) {
                return e.push(t), e
            })), o.focusedID = i || t, o
        }

        function c(e, t, n) {
            if (!e.byID[t]) return e;
            var i = b(e, function(e) {
                return e.byID
            }, function(e) {
                return e[t].collapsed = !1, e
            });
            return i.focusedID = t, r(e) > n && (i = s(i)), i
        }

        function u() {
            return {
                byThreadID: {}
            }
        }

        function d(e, t) {
            switch (void 0 === e && (e = u()), t.type) {
                case S.a:
                    return e.byThreadID[t.threadID] ? b(e, function(e) {
                        return e.byThreadID[t.threadID]
                    }, function(e) {
                        return [{
                            threadID: t.threadID,
                            afterMessageID: t.afterMessageID,
                            content: t.content
                        }].concat(e)
                    }) : b(e, function(e) {
                        return e.byThreadID
                    }, function(e) {
                        return g.__assign((n = {}, n[t.threadID] = [{
                            threadID: t.threadID,
                            afterMessageID: t.afterMessageID,
                            content: t.content
                        }], n), e);
                        var n
                    });
                default:
                    return e
            }
        }

        function p(e, t) {
            return e.whispers ? e.whispers.display.byID[t] : null
        }

        function m(e, t) {
            return e.whispers.notifications.byThreadID[t] || []
        }
        var h = n(9),
            f = n(2),
            g = n(0),
            b = n(138),
            v = n(57),
            k = 234,
            y = 310,
            S = n(276);
        t.b = p, t.a = m;
        var _ = Object(h.combineReducers)({
            display: a,
            notifications: d
        });
        f.n.store.registerReducer("whispers", _)
    },
    2080: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                theme: Object(r.a)(e)
            }
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var a = n(7),
            r = n(52),
            s = n(0),
            o = n(1),
            l = n(2),
            c = n(115),
            u = n(811),
            d = n(40),
            p = n(808),
            m = n(12),
            h = n(933),
            f = n(5),
            g = n(3),
            b = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.match.params.channelLogin;
                    return o.createElement(g.U, {
                        className: Object(d.c)(this.props.theme),
                        display: g.H.Flex,
                        fullHeight: !0,
                        fullWidth: !0
                    }, o.createElement(g._17, {
                        background: g.m.Alt2,
                        display: g.H.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        overflow: g.Y.Hidden,
                        fullHeight: !0,
                        fullWidth: !0
                    }, o.createElement(h.a, {
                        channelLogin: e,
                        clientID: l.n.config.legacyClientID,
                        isPopout: !0
                    }), o.createElement(c.a, null)))
                }, t = s.__decorate([Object(f.c)("PopoutChatPage", {
                    autoReportInteractive: !0,
                    destination: p.a.ChatPopout
                }), Object(u.a)({
                    location: m.PageviewLocation.Chat
                })], t)
            }(o.Component),
            v = b,
            k = Object(a.a)(i)(v);
        n.d(t, "PopoutChatPage", function() {
            return k
        })
    },
    21: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = new Set(e.map(function(e) {
                return e.node.id
            }));
            return e.concat(t.filter(function(e) {
                return !n.has(e.node.id)
            }))
        }

        function a(e) {
            return {
                variables: {
                    input: e
                }
            }
        }

        function r(e, t, n, i) {
            void 0 === t && (t = {});
            try {
                var a = l.n.apollo.client.readQuery({
                    query: e,
                    variables: t
                });
                if (i && i(a)) return;
                var r = o(a, function(e) {
                    return e
                }, function(e) {
                    return n(e)
                });
                l.n.apollo.client.writeQuery({
                    query: e,
                    variables: t,
                    data: r
                })
            } catch (e) {
                l.i.warn("Failed writing updated query to Apollo", e)
            }
        }

        function s(e) {
            try {
                var t = e.id,
                    n = e.fragment,
                    i = e.mutator,
                    a = l.n.apollo.client.readFragment({
                        id: t,
                        fragment: n
                    }),
                    r = o(a, function(e) {
                        return e
                    }, function(e) {
                        return i(e)
                    });
                l.n.apollo.client.writeFragment({
                    fragment: n,
                    id: t,
                    data: r
                })
            } catch (e) {
                l.i.warn("Failed writing updated query to Apollo", e)
            }
        }
        t.b = i, t.a = a, t.d = r, t.c = s;
        var o = n(138),
            l = (n.n(o), n(2))
    },
    259: function(e, t, n) {
        "use strict";
        n.d(t, "m", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        }), n.d(t, "i", function() {
            return o
        }), n.d(t, "k", function() {
            return l
        }), n.d(t, "j", function() {
            return c
        }), n.d(t, "l", function() {
            return u
        }), n.d(t, "e", function() {
            return d
        }), n.d(t, "f", function() {
            return p
        }), n.d(t, "b", function() {
            return m
        }), n.d(t, "c", function() {
            return h
        }), n.d(t, "d", function() {
            return f
        }), n.d(t, "h", function() {
            return g
        }), n.d(t, "g", function() {
            return b
        });
        var i, a = n(270),
            r = {
                ERROR_DISPLAY_TIMEOUT: 5e3,
                GET_BALANCE_RATE_LIMIT: 5e3,
                UNDO_PROMPT_DURATION: 5e3
            },
            s = "https://d3aqoihi2n8ty8.cloudfront.net/cheer",
            o = 8e5,
            l = 1e4,
            c = 500,
            u = 1e3,
            d = "cheer",
            p = a.a.Purple,
            m = "FIRST_PARTY",
            h = "THIRD_PARTY",
            f = (i = {}, i[a.a.Gray] = "#979797", i[a.a.Purple] = "#9c3ee8", i[a.a.Green] = "#1db2a5", i[a.a.Blue] = "#0099fe", i[a.a.Red] = "#f43021", i),
            g = "hgc-2017",
            b = "https://d3aqoihi2n8ty8.cloudfront.net/hgc2017"
    },
    260: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Mention = 1] = "Mention", e[e.Link = 2] = "Link", e[e.Emote = 3] = "Emote", e[e.ClipLink = 4] = "ClipLink", e[e.VideoLink = 5] = "VideoLink"
        }(i || (i = {}))
    },
    261: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT"
        }(i || (i = {}))
    },
    262: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(20),
            r = n(1),
            s = n(2),
            o = n(16),
            l = "legacy_routes_enabled",
            c = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.isEnabled = !1, n.onHistoryChange = function(e, t) {
                        return n.isEnabled ? "REPLACE" === t ? void n.logger.debug("Skipping legacy route processing, due to history replace.") : e && e.pathname ? (n.logger.debug("Location changed", {
                            path: e.pathname
                        }), void n.legacyRoutes.forEach(function(t) {
                            try {
                                if (e.pathname.match(t)) {
                                    n.logger.debug("Found legacy route. Reloading...");
                                    var i = "" !== e.search ? a.parse(e.search) : {};
                                    i["from-redirect"] = "true";
                                    var r = a.stringify(i),
                                        l = s.a.buildType === o.a.Dev ? window.location.host : window.location.hostname,
                                        c = window.location.protocol + "//" + l + e.pathname + "?" + r;
                                    return n.logger.debug("Redirecting to legacy route", {
                                        newUrl: c
                                    }), void window.location.replace(c)
                                }
                            } catch (e) {
                                s.i.withCategory("legacy").error(e, "Unable to determine legacy reload match", {
                                    regex: t
                                })
                            }
                        })) : void n.logger.debug("Unable to process history change. Path is null or empty.") : void n.logger.debug("Legacy routing not enabled.")
                    }, n.processRedirectParam = function(e) {
                        if (e && e.pathname && e.search) {
                            var t = "" !== e.search ? a.parse(e.search) : {};
                            if (t["from-redirect"]) {
                                delete t["from-redirect"];
                                var i = a.stringify(t),
                                    r = "";
                                i.length > 0 && (r = "?" + i), n.props.history.replace({
                                    pathname: e.pathname,
                                    hash: e.hash,
                                    search: r
                                })
                            }
                        }
                    }, n.isEnabled = s.b.get(l, !1), n.logger = s.i.withCategory("legacy-routes"), n.legacyRoutes = n.buildRoutes(), n.props.history.listen(n.onHistoryChange), n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return null
                }, t.prototype.componentDidMount = function() {
                    this.processRedirectParam(this.props.history.location)
                }, t.prototype.buildRoutes = function() {
                    if (!this.isEnabled) return [];
                    this.logger.debug("Building legacy routes...");
                    var e = s.b.get("legacy_routes", []),
                        t = [];
                    if (!e || 0 === e.length) return this.logger.debug("No legacy routes found in settings."), t;
                    for (var n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        try {
                            var r = new RegExp(a, "i");
                            t.push(r)
                        } catch (e) {
                            this.logger.debug("Failed to parse route!", {
                                val: a,
                                err: e
                            })
                        }
                    }
                    return this.logger.debug("Done building legacy routes!", {
                        count: t.length
                    }), t
                }, t
            }(r.Component),
            u = c;
        n.d(t, "a", function() {
            return l
        }), n.d(t, !1, function() {
            return "legacy_routes"
        }), n.d(t, "b", function() {
            return u
        })
    },
    263: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Archive = "ARCHIVE", e.Highlight = "HIGHLIGHT", e.Upload = "UPLOAD", e.WatchParty = "WATCH_PARTY", e.PastPremiere = "PAST_PREMIERE", e.PremiereUpload = "PREMIERE_UPLOAD"
        }(i || (i = {}))
    },
    264: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "a", function() {
            return r
        });
        var i;
        ! function(e) {
            e.Spam = "Spam", e.Harassment = "Harassment"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e.Whisper = "WHISPER", e.Chat = "CHAT"
        }(r || (r = {}))
    },
    265: function(e, t, n) {
        "use strict";

        function i(e) {
            var t, n, i, r, c, u = e.append,
                d = void 0 !== u && u,
                p = e.searchResults,
                m = e.currentGameResults,
                h = e.currentUserResults,
                f = e.currentCommunityResults,
                g = e.currentVideoResults,
                b = e.currentLiveResults;
            if (p.games && (t = {
                    totalHits: p.games.totalHits,
                    results: d && m ? m.results : []
                }, d && p.exhaustedHits && m && !p.games.totalHits && (t.totalHits = m.totalHits), t.results = t.results.concat(p.games.hits.map(function(e, t) {
                    var n, i = s.n.intl.getLanguageCode();
                    return n = i && void 0 !== e.localizations && i in e.localizations ? e.localizations[i] : e.name, {
                        title: n,
                        thumbnailAltText: e.name,
                        linkTo: {
                            pathname: Object(o.d)(e.name),
                            state: {
                                content: l.PageviewContent.Game,
                                content_index: t,
                                medium: l.PageviewMedium.NavSearch
                            }
                        },
                        id: e.objectID,
                        popularity: e.popularity
                    }
                }))), p.videos) {
                var v = d && g ? g.results : [],
                    k = p.videos.totalHits;
                d && p.exhaustedHits && g && !p.videos.totalHits && (k = g.totalHits), r = a(v, p.videos, k)
            }
            return p.users && (n = {
                totalHits: d && h ? h.totalHits : p.users.totalHits,
                results: d && h ? h.results : []
            }, d && p.exhaustedHits && h && !p.users.totalHits && (n.totalHits = h.totalHits), n.results = n.results.concat(p.users.hits.map(function(e, t) {
                return {
                    login: e.login,
                    name: e.name,
                    thumbnail: e.profile_image || s.a.defaultAvatarURL,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: l.PageviewContent.User,
                            content_index: t,
                            medium: l.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    followers: e.followers
                }
            }))), p.channels && (c = {
                totalHits: d && b ? b.totalHits : p.channels.totalHits,
                results: d && b ? b.results : []
            }, c.results = c.results.concat(p.channels.hits.map(function(e, t) {
                return {
                    viewerCount: e.channel_count,
                    login: e.login,
                    name: e.name,
                    thumbnailAltText: e.status,
                    linkTo: {
                        pathname: "/" + e.login,
                        state: {
                            content: l.PageviewContent.Live,
                            content_index: t,
                            medium: l.PageviewMedium.NavSearch
                        }
                    },
                    id: e.objectID,
                    status: e.status
                }
            }))), p.communities && (i = {
                totalHits: p.communities.totalHits,
                results: d && f ? f.results : []
            }, d && p.exhaustedHits && f && !p.communities.totalHits && (i.totalHits = f.totalHits), i.results = i.results.concat(p.communities.hits.map(function(e, t) {
                return {
                    name: e.name,
                    thumbnail: e.avatar_image_url,
                    thumbnailAltText: e.name,
                    linkTo: {
                        pathname: "/communities/" + e.name,
                        state: {
                            content: l.PageviewContent.Community,
                            content_index: t,
                            medium: l.PageviewMedium.NavSearch
                        }
                    },
                    viewerCount: e.viewers,
                    id: e.objectID
                }
            }))), {
                currentGameResults: t,
                currentUserResults: n,
                currentLiveResults: c,
                currentCommunityResults: i,
                currentVideoResults: r,
                exhaustedHits: p.exhaustedHits
            }
        }

        function a(e, t, n) {
            return {
                results: e.concat(t.hits.map(r)),
                totalHits: t.totalHits || n
            }
        }

        function r(e, t) {
            return {
                title: e.title,
                thumbnail: e.thumbnail,
                thumbnailAltText: e.title,
                linkTo: {
                    pathname: "/videos/" + e.objectID,
                    state: {
                        content: l.PageviewContent.Video,
                        content_index: t,
                        medium: l.PageviewMedium.NavSearch
                    }
                },
                login: e.broadcaster_login,
                name: e.broadcaster_name,
                createdAt: e.created_at,
                length: e.length,
                id: e.objectID
            }
        }
        t.b = i, t.a = r;
        var s = n(2),
            o = n(374),
            l = n(12)
    },
    266: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = [];
            if (!e || !t) return n;
            for (var i = /\S+/g, a = i.exec(e); a;) {
                var s = a[0],
                    o = t[s];
                if (o && "function" != typeof o) {
                    var l = Object(r.d)(e.slice(0, a.index)),
                        c = l ? l.length : a.index;
                    n[c] = {
                        startIndex: c,
                        endIndex: c + s.length,
                        data: {
                            alt: s,
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": Object(r.e)(o.id, 1),
                                    "2x": Object(r.e)(o.id, 2),
                                    "4x": Object(r.e)(o.id, 4)
                                }
                            }
                        }
                    }
                }
                a = i.exec(e)
            }
            return n
        }

        function a(e) {
            for (var t = {}, n = 0, i = e; n < i.length; n++)
                for (var a = i[n], r = 0, l = a.emotes; r < l.length; r++)
                    for (var c = l[r], u = s[c.token] || [c.token], d = 0, p = u; d < p.length; d++) {
                        var m = p[d];
                        t[m] && a.id === o || (t[m] = {
                            id: c.id,
                            token: m
                        })
                    }
            return t
        }
        t.b = i, t.a = a;
        var r = n(130),
            s = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            },
            o = "0"
    },
    267: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        });
        var i = {
                TriHard: {
                    count: 196568036
                },
                Kappa: {
                    count: 192158118
                },
                "4Head": {
                    count: 155758710
                },
                PogChamp: {
                    count: 151485090
                },
                cmonBruh: {
                    count: 146352878
                },
                BibleThump: {
                    count: 56472964
                },
                WutFace: {
                    count: 45069031
                },
                Kreygasm: {
                    count: 41387580
                },
                DansGame: {
                    count: 38097659
                },
                hi5F: {
                    count: 34986404
                },
                SMOrc: {
                    count: 34734484
                },
                KappaPride: {
                    count: 34262839
                },
                VoHiYo: {
                    count: 27886434
                },
                SwiftRage: {
                    count: 24561900
                },
                ResidentSleeper: {
                    count: 24438298
                },
                EleGiggle: {
                    count: 19891526
                },
                FailFish: {
                    count: 19118343
                },
                NotLikeThis: {
                    count: 18802905
                },
                Keepo: {
                    count: 18351415
                },
                BabyRage: {
                    count: 18220906
                },
                MingLee: {
                    count: 18026207
                },
                pbfSSH: {
                    count: 16911241
                },
                forsenE: {
                    count: 14960299
                },
                HeyGuys: {
                    count: 14851569
                },
                ANELE: {
                    count: 14648986
                },
                PJSalt: {
                    count: 14438861
                }
            },
            a = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"]
    },
    268: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(108),
            o = n(3),
            l = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(o.U, null, a.createElement(o.U, {
                        display: o.H.Flex,
                        justifyContent: o.T.Between,
                        alignItems: o.c.Center,
                        fullWidth: !0
                    }, a.createElement(o._21, {
                        bold: !0,
                        type: o._26.H5
                    }, Object(r.d)("Choose A Gift Subscription", "GiftTierTabs")), a.createElement(o.u, {
                        type: o.z.Text,
                        icon: o._9.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, a.createElement(o.U, {
                        alignItems: o.c.Center,
                        display: o.H.InlineFlex
                    }, a.createElement(o._21, null, Object(r.d)("Back", "GiftTierTabs"))))), a.createElement(s.a, {
                        isGift: !0,
                        giftRecipient: this.props.giftRecipient,
                        onGiftSelect: this.onGiftSelect,
                        channelDisplayName: this.props.channelDisplayName,
                        subscriptionProducts: this.props.subscriptionProducts,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        userHasPrime: !1,
                        canPrimeSubscribe: !1,
                        isSubscribed: !1
                    }))
                }, t
            }(a.Component),
            c = l;
        n.d(t, !1, function() {
            return "sub-gift-select-back-button"
        }), n.d(t, "a", function() {
            return c
        })
    },
    269: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return i
        }), n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        });
        var i;
        ! function(e) {
            e[e.AllVideos = 0] = "AllVideos", e[e.PastBroadcasts = 1] = "PastBroadcasts", e[e.Uploads = 2] = "Uploads", e[e.Highlights = 3] = "Highlights"
        }(i || (i = {}));
        var a;
        ! function(e) {
            e[e.AnyLength = 0] = "AnyLength", e[e.Short = 1] = "Short", e[e.Long = 2] = "Long"
        }(a || (a = {}));
        var r;
        ! function(e) {
            e[e.Popular = 0] = "Popular", e[e.Newest = 1] = "Newest"
        }(r || (r = {}))
    },
    270: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red"
        }(i || (i = {}))
    },
    271: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                authToken: Object(d.a)(e)
            }
        }

        function a(e) {
            return Object(l.bindActionCreators)({
                updateEmoteSets: p.H
            }, e)
        }
        var r = n(0),
            s = n(1),
            o = n(7),
            l = n(9),
            c = n(6),
            u = n(86),
            d = n(17),
            p = n(379),
            m = n(87),
            h = n(2),
            f = ["4.99", "9.99", "24.99"],
            g = function(e, t) {
                var n = [];
                return t.forEach(function(t, i) {
                    t.emotes.length && t.emoteSetID && !e.has(parseInt(t.emoteSetID, 10)) && n.push(r.__assign({}, t, {
                        emotes: Object(m.b)(t.emotes),
                        level: i,
                        price: f[i]
                    }))
                }), n
            },
            b = function(e, t) {
                for (var n = [{
                        id: "0",
                        emotes: []
                    }], i = 0, a = t; i < a.length; i++) {
                    var r = a[i];
                    r.emoteSetID && e.has(parseInt(r.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(m.b)(r.emotes)))
                }
                return n[0].emotes.length ? n : []
            },
            v = function(e) {
                for (var t = [], n = 0; n < e.length; n++) {
                    var i = e[n];
                    0 === n && i.emotes.length > 1 ? t[n] = Object(h.d)("Unlock {numEmotes, number} Sub Emotes", {
                        numEmotes: i.emotes.length
                    }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(h.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes.length > 1 ? t[n] = Object(h.d)("{numEmotes, number} Extra {price} Sub Emotes", {
                        numEmotes: i.emotes.length,
                        price: f[n]
                    }, "assembleSubscribeTexts") : i.emotes.length && (t[n] = Object(h.d)("1 Extra ${price, number} Sub Emote", {
                        price: f[n]
                    }, "assembleSubscribeTexts"))
                }
                return t
            },
            k = n(5),
            y = n(50),
            S = n(4),
            _ = n(28),
            C = n(39),
            E = n(272),
            N = n(68),
            w = n(3),
            D = (n(459), function(e) {
                var t = {
                        "emote-picker__tab": !0,
                        "pd-x-1": !0
                    },
                    n = null,
                    i = null;
                if (e.channelTabVisible) {
                    var a = S(r.__assign({}, t, {
                        "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                        "emote-picker__tab--disabled": !e.channelTabEnabled
                    }));
                    n = s.createElement("div", {
                        key: "ChannelTabLink",
                        id: "emote-picker__channel",
                        className: a,
                        onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                        "data-a-target": "emote-channel-tab"
                    }, s.createElement("span", null, Object(N.d)("Channel", "EmotePicker")))
                }
                if (e.allTabVisible) {
                    var o = S(r.__assign({}, t, {
                        "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                    }));
                    i = s.createElement("div", {
                        key: "allTabLink",
                        id: "emote-picker__all",
                        className: o,
                        onClick: e.selectAllTab,
                        "data-a-target": "emote-all-tab"
                    }, s.createElement("span", null, Object(N.d)("All", "EmotePicker")))
                }
                return s.createElement(w._17, {
                    background: w.m.Base,
                    borderTop: !0,
                    className: "emote-picker__tabs-container"
                }, n, i)
            }),
            T = n(273),
            I = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.subscribeTexts)
                        for (var t = 0; t <= this.props.plan.level; t++) {
                            var n = this.props.subscribeTexts[t];
                            n && (t < this.props.plan.level ? (e.push(s.createElement("span", {
                                key: "upsell-predicate:" + t
                            }, n)), e.push(s.createElement("span", {
                                key: "upsell-plus:" + t
                            }, " + "))) : this.props.plan.level > 0 ? e.push(s.createElement("strong", {
                                key: "upsell-strong-end:" + this.props.plan.level
                            }, n)) : e.push(s.createElement("span", {
                                key: "upsell-end:" + t
                            }, n)))
                        }
                    if (!this.props.plan.emoteSetID) return null;
                    var i = {
                            id: this.props.plan.emoteSetID,
                            emotes: this.props.plan.emotes
                        },
                        a = {};
                    return this.props.plan.price && (a.purchase = Object(h.d)("${price}", {
                        price: this.props.plan.price
                    }, "PlanUpsell")), s.createElement(w.U, {
                        className: "emote-picker-plan-upsell",
                        display: w.H.Flex,
                        flexDirection: w.J.Column,
                        alignItems: w.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(E.a, {
                        emoteSet: i,
                        locked: !0
                    }), s.createElement(w.U, {
                        margin: 1,
                        alignItems: w.c.Center
                    }, e), s.createElement(T.a, {
                        isSubbedToTier: !1,
                        tierPrice: a.purchase || "",
                        reportSubAction: this.props.reportSubAction,
                        url: this.props.plan.url
                    }))
                }, t
            }(s.Component),
            U = (n(460), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.closeOnEsc = function(e) {
                        e.keyCode === C.a.Esc && n.props.toggleVisibility()
                    }, n.handleFilterChange = function(e) {
                        var t = e.target.value,
                            i = t.toLowerCase(),
                            a = n.filterAvailableUpsells(n.props.availableUpsells, i),
                            r = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                        n.setState({
                            filter: i,
                            filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                            filteredAvailableUpsells: a,
                            filteredOwnedChannelEmoteSets: r,
                            inputValue: t,
                            channelTabEnabled: r.length > 0 || a.length > 0
                        })
                    }, n.state = {
                        filter: "",
                        filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                        filteredAvailableUpsells: t.availableUpsells,
                        filteredAllEmoteSets: t.allEmoteSets,
                        inputValue: "",
                        channelTabSelected: !0,
                        channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                    }, n.selectAllTab = function() {
                        return n.setChannelTabSelected(!1)
                    }, n.selectChannelTab = function() {
                        return n.setChannelTabSelected(!0)
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.gqlError)
                        if (this.state.filter.length > 0) {
                            var t = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                n = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                            this.setState({
                                filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                filteredAvailableUpsells: t,
                                filteredOwnedChannelEmoteSets: n,
                                channelTabEnabled: n.length > 0 || t.length > 0
                            })
                        } else this.setState({
                            filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                            filteredAvailableUpsells: e.availableUpsells,
                            filteredAllEmoteSets: e.allEmoteSets,
                            channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                        })
                }, t.prototype.render = function() {
                    return s.createElement(w.p, {
                        "data-a-target": "emote-picker",
                        direction: this.props.direction ? this.props.direction : w.q.TopRight,
                        size: this.props.size ? this.props.size : w.r.Medium,
                        noTail: !0,
                        show: !0
                    }, s.createElement(w.U, {
                        className: S("emote-picker")
                    }, this.renderTabContent(), s.createElement(w.U, {
                        className: "emote-picker__controls-container",
                        position: w._2.Relative
                    }, s.createElement(w._17, {
                        padding: 1,
                        borderTop: !0
                    }, s.createElement(w.Q, {
                        autoFocus: !0,
                        onChange: this.handleFilterChange,
                        onKeyDown: this.closeOnEsc,
                        placeholder: Object(h.d)("Search for Emotes", "EmotePicker"),
                        type: w.R.Text,
                        value: this.state.inputValue
                    })), s.createElement(D, {
                        allTabVisible: this.props.allEmoteSets.length > 0,
                        channelTabEnabled: this.state.channelTabEnabled,
                        channelTabSelected: this.state.channelTabSelected,
                        channelTabVisible: !!this.props.channelTabVisible,
                        selectAllTab: this.selectAllTab,
                        selectChannelTab: this.selectChannelTab
                    }))))
                }, t.prototype.renderTabContent = function() {
                    var e = this,
                        t = [];
                    return this.props.gqlError ? t.push(s.createElement(w.U, {
                        key: "emotePicker-error"
                    }, s.createElement(w._21, {
                        color: w.F.Error
                    }, Object(h.d)("Unable to load available emotes.", "EmotePicker")))) : this.props.loading ? t.push(s.createElement(w.U, {
                        alignItems: w.c.Center,
                        display: w.H.Flex,
                        key: "loading",
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: w.T.Center
                    }, s.createElement(w.X, {
                        key: "LoadingSpinner"
                    }))) : this.state.channelTabEnabled && this.state.channelTabSelected ? (this.state.filteredOwnedChannelEmoteSets.length > 0 && t.push(s.createElement(w.U, {
                        className: "emote-picker__content-block",
                        key: "ownedChannelEmoteSets",
                        padding: 1,
                        position: w._2.Relative
                    }, s.createElement(E.a, {
                        emoteSet: this.state.filteredOwnedChannelEmoteSets[0],
                        onClickEmote: this.props.onClickEmote,
                        locked: !1
                    }))), t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                        return s.createElement(w.U, {
                            className: "emote-picker__content-block",
                            key: "planUpsell:" + t.level,
                            padding: 1,
                            position: w._2.Relative
                        }, s.createElement(I, {
                            plan: t,
                            subscribeTexts: e.props.subscribeTexts,
                            reportSubAction: e.props.reportSubAction
                        }))
                    }))) : t = this.state.filteredAllEmoteSets.map(function(t) {
                        return s.createElement(w.U, {
                            key: "emoteGrid" + t.id,
                            position: w._2.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, s.createElement(E.a, {
                            emoteSet: t,
                            onClickEmote: e.props.onClickEmote,
                            locked: !1
                        }))
                    }), t.length > 0 ? s.createElement(_.b, {
                        className: "emote-picker__tab-content"
                    }, s.createElement(w.U, {
                        padding: 1
                    }, t)) : null
                }, t.prototype.filterEmoteSet = function(e, t) {
                    return e.filter(function(e) {
                        return e.token.toLowerCase().includes(t)
                    })
                }, t.prototype.setChannelTabSelected = function(e) {
                    this.setState({
                        channelTabSelected: e
                    })
                }, t.prototype.filterEmoteSets = function(e, t) {
                    for (var n = [], i = 0, a = e; i < a.length; i++) {
                        var r = a[i],
                            s = this.filterEmoteSet(r.emotes, t);
                        s.length > 0 && n.push({
                            id: r.id,
                            emotes: s
                        })
                    }
                    return n
                }, t.prototype.filterAvailableUpsells = function(e, t) {
                    for (var n = [], i = 0, a = e; i < a.length; i++) {
                        var s = a[i],
                            o = this.filterEmoteSet(s.emotes, t);
                        o.length > 0 && n.push(r.__assign({}, s, {
                            emotes: o
                        }))
                    }
                    return n
                }, t
            }(s.Component)),
            O = n(461),
            x = n(462),
            M = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.trackSubEvent = function(e) {
                        Object(y.b)(r.__assign({}, e, {
                            action: y.a.ClickCheckout,
                            channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                            channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "emote_picker",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: null
                        }))
                    };
                    var i = {
                        allEmoteSets: [],
                        availableUpsells: [],
                        channelTabVisible: !1,
                        gqlError: t.userData && !!t.userData.error || t.channelData && !!t.channelData.error || !1,
                        gqlLoading: t.userData && !!t.userData.loading || t.channelData && !!t.channelData.loading || !1,
                        subscribeTexts: [],
                        ownedChannelEmoteSets: [],
                        ownedSetIDs: new Set([])
                    };
                    return i = n.applyDataPropsToState(t, i), n.state = r.__assign({}, i), n
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.userData && e.userData.error || e.channelData && e.channelData.error) this.setState({
                        gqlError: !0
                    });
                    else {
                        var t = this.applyDataPropsToState(e, this.state);
                        this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.userData && this.props.userData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.state.allEmoteSets !== t.allEmoteSets && this.props.updateEmoteSets(t.allEmoteSets), this.setState(r.__assign({}, t, {
                            gqlError: !1
                        }))
                    }
                }, t.prototype.render = function() {
                    return this.props.visible ? s.createElement(U, {
                        allEmoteSets: this.state.allEmoteSets,
                        availableUpsells: this.state.availableUpsells,
                        channelTabVisible: this.state.channelTabVisible,
                        gqlError: this.state.gqlError,
                        loading: this.state.gqlLoading,
                        onClickEmote: this.props.onClickEmote,
                        ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                        toggleVisibility: this.props.toggleVisibility,
                        subscribeTexts: this.state.subscribeTexts,
                        reportSubAction: this.trackSubEvent,
                        direction: this.props.direction,
                        size: this.props.size
                    }) : null
                }, t.prototype.checkDataLoaded = function(e) {
                    var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                        n = !e.authToken || e.userData && !e.userData.loading;
                    return t && n
                }, t.prototype.checkForContent = function(e) {
                    var t = e.userData && e.userData.user && e.userData.user.emoteSets.length > 0 || !1,
                        n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                    return t || n
                }, t.prototype.applyDataPropsToState = function(e, t) {
                    var n = r.__assign({}, t);
                    return e.userData && e.userData.user && (n.ownedSetIDs = new Set(e.userData.user.emoteSets.map(function(e) {
                        return parseInt(e.id, 10)
                    })), n.allEmoteSets = Object(m.a)(e.userData.user.emoteSets)), e.channelData && e.channelData.user && (n.availableUpsells = g(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.subscribeTexts = v(e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = b(n.ownedSetIDs, e.channelData.user.subscriptionProducts)), n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
                }, t.prototype.subscriptionProductHasEmotes = function(e) {
                    return void 0 !== e.emoteSetID && e.emotes.length > 0
                }, t = r.__decorate([Object(c.a)(O, {
                    name: "userData",
                    skip: function(e) {
                        return !e.authToken
                    }
                }), Object(c.a)(x, {
                    name: "channelData",
                    skip: function(e) {
                        return !e.channelOwnerID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                channelOwnerID: e.channelOwnerID
                            }
                        }
                    }
                }), Object(u.a)([{
                    topic: function(e) {
                        return "user-subscribe-events-v1." + (e.userData && e.userData.user && e.userData.user.id)
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.userData && !e.userData.loading && !e.userData.error)
                    }
                }]), Object(k.c)("EmotePicker")], t)
            }(s.Component),
            R = Object(o.a)(i, a)(M);
        n.d(t, "a", function() {
            return R
        })
    },
    272: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(4),
            r = n(1),
            s = n(2),
            o = n(3),
            l = (n(458), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = a("emote-picker__emote-link", {
                            "emote-picker__emote-link--locked": this.props.locked
                        }),
                        n = this.props.emoteSet.emotes.map(function(n) {
                            return r.createElement("div", {
                                key: n.id,
                                className: "emote-picker__emote"
                            }, r.createElement(o._30, {
                                label: n.displayName || Object(s.d)("Emote", "EmoteGrid"),
                                direction: o._32.Bottom
                            }, r.createElement(o.P, {
                                display: o.H.Flex,
                                alignItems: o.c.Center,
                                justifyContent: o.T.Center
                            }, r.createElement("button", {
                                className: t,
                                name: n.displayName,
                                onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, n.id),
                                "data-a-target": n.displayName
                            }, r.createElement("figure", {
                                className: "emote-picker__emote-figure"
                            }, e.props.locked ? r.createElement("span", {
                                className: "emote-picker__emote-lock"
                            }, r.createElement(o._8, {
                                asset: o._9.Lock
                            })) : null, r.createElement("img", {
                                srcSet: n.srcSet,
                                alt: n.displayName
                            }))))))
                        });
                    return r.createElement(o.U, {
                        display: o.H.Flex,
                        justifyContent: o.T.Center
                    }, n)
                }, t.prototype.handleClickEmote = function(e, t) {
                    this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e)
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    273: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(5),
            o = n(50),
            l = n(3),
            c = "subscribe-button__subscribe-tier-button",
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.messages = {
                        subscribed: Object(r.d)("Subscribed", "SubTierButton"),
                        subscribeNow: Object(r.d)("Subscribe Now", "SubTierButton")
                    }, t.handleClick = function() {
                        t.props.reportSubAction({
                            action: o.a.ClickCheckout,
                            checkoutButtonTier: t.props.tierPrice
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.isSubbedToTier ? a.createElement(l.u, {
                        ariaLabel: this.messages.subscribed,
                        "data-test-selector": c,
                        disabled: !0,
                        icon: l._9.Star
                    }, this.messages.subscribed) : a.createElement(l.u, i.__assign({
                        ariaLabel: this.messages.subscribeNow + " " + this.props.tierPrice,
                        "data-test-selector": c,
                        linkTo: this.props.url,
                        onClick: this.handleClick,
                        purchase: this.props.tierPrice
                    }, Object(l._39)(this.props), {
                        targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                    }), this.messages.subscribeNow)
                }, t = i.__decorate([Object(s.c)("SubTierButton")], t)
            }(a.Component),
            d = u;
        n.d(t, !1, function() {
            return c
        }), n.d(t, "a", function() {
            return d
        })
    },
    275: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                sessionUser: e.session.user
            }
        }
        n.d(t, "a", function() {
            return y
        });
        var a = n(0),
            r = n(1),
            s = (n.n(r), n(7)),
            o = n(9),
            l = n(2),
            c = n(6),
            u = n(21),
            d = n(12),
            p = n(5),
            m = n(135),
            h = n(261),
            f = n(279),
            g = n(135),
            b = n(495),
            v = (n.n(b), n(496)),
            k = (n.n(v), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        submitStatus: g.b.Unsubmitted
                    }, t.handleSubmit = function(e, n, i, r) {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var t, s, t, o;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        if (e !== m.a) return [3, 5];
                                        t = {
                                            userID: this.props.reportContext.targetUserID,
                                            communityID: i || "",
                                            reason: n
                                        }, a.label = 1;
                                    case 1:
                                        return a.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(u.a)(t))];
                                    case 2:
                                        return a.sent(), l.n.tracking.track(d.SpadeEventType.CommunityModeration, {
                                            community_id: i,
                                            name: r,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            target_id: this.props.reportContext.targetUserID,
                                            action: "report",
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 4];
                                    case 3:
                                        return s = a.sent(), l.i.error(s, "ReportUserInCommunity Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [3, 9];
                                    case 5:
                                        t = {
                                            description: n,
                                            reason: e,
                                            content: this.props.reportContext.contentType,
                                            contentID: this.props.reportContext.contentID,
                                            extra: this.props.reportContext.extra,
                                            targetID: this.props.reportContext.targetUserID
                                        }, this.props.reportContext.contentType === h.a.Community && this.props.reportContext.extra && (t.description = Object(f.a)(this.props.reportContext.extra, n)), a.label = 6;
                                    case 6:
                                        return a.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(u.a)(t))];
                                    case 7:
                                        return a.sent(), this.props.reportContext.contentType === h.a.Community && l.n.tracking.track(d.SpadeEventType.CommunityReport, {
                                            community_id: this.props.reportContext.contentID,
                                            name: this.props.reportContext.extra,
                                            is_official: !1,
                                            user_id: this.props.sessionUser && this.props.sessionUser.id,
                                            reason: e
                                        }), this.setState({
                                            submitStatus: g.b.Success
                                        }), [3, 9];
                                    case 8:
                                        return o = a.sent(), l.i.error(o, "ReportUser Mutation failed."), this.setState({
                                            submitStatus: g.b.MutationError
                                        }), [3, 9];
                                    case 9:
                                        return [2]
                                }
                            })
                        })
                    }, t.handleChildError = function(e) {
                        return t.setState({
                            submitStatus: e
                        })
                    }, t.handleClose = function() {
                        t.props.onClose && t.props.onClose(t.state.submitStatus)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.handleClose()
                }, t.prototype.render = function() {
                    return r.createElement(g.c, {
                        onClose: this.handleClose,
                        onError: this.handleChildError,
                        onSubmit: this.handleSubmit,
                        reportContentType: this.props.reportContext.contentType,
                        submitStatus: this.state.submitStatus,
                        targetUserID: this.props.reportContext.targetUserID,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    })
                }, t
            }(r.Component)),
            y = Object(o.compose)(Object(c.a)(b, {
                name: "reportUserInCommunity"
            }), Object(c.a)(v, {
                name: "reportUser"
            }), Object(p.c)("ReportUser"), Object(s.a)(i, null))(k)
    },
    276: function(e, t, n) {
        "use strict";

        function i(e, t, n) {
            return {
                type: a,
                threadID: e,
                afterMessageID: n,
                content: t
            }
        }
        n.d(t, "a", function() {
            return a
        }), t.b = i;
        var a = "whisperNotifications.WHISPER_THREAD_NOTIFIED"
    },
    277: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "blockedUsers"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockedUsers"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 67
            }
        };
        n.loc.source = {
            body: "fragment blockedUsers on User {\n  id\n  blockedUsers {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    278: function(e, t, n) {
        "use strict";

        function i(e) {
            w.n.tracking.track(D.SpadeEventType.WhisperThreadMod, {
                conversation_id: e.threadID,
                action: e.action
            })
        }

        function a(e) {
            return N.__awaiter(this, void 0, void 0, function() {
                var t;
                return N.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, S()];
                        case 1:
                            return t = n.sent(), w.n.tracking.track(D.SpadeEventType.WhisperIgnoreUser, {
                                ui_context: e.context,
                                from_login: t && t.login,
                                ignored_login: e.targetUserLogin,
                                reason: e.reason || E.Other,
                                source: e.source
                            }), [2]
                    }
                })
            })
        }

        function r(e, t) {
            return N.__awaiter(this, void 0, void 0, function() {
                var n;
                return N.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, S()];
                        case 1:
                            return n = i.sent(), w.n.tracking.track(D.SpadeEventType.WhisperThreadMod, {
                                conversation_id: e,
                                action: t,
                                login: n && n.login
                            }), [2]
                    }
                })
            })
        }

        function s(e) {
            w.n.tracking.track(D.SpadeEventType.WhisperAllThreadsMod, {
                action: e
            })
        }

        function o() {
            s(I.MarkAllRead)
        }

        function l() {
            s(I.EnableDoNotDisturb)
        }

        function c() {
            s(I.DisableDoNotDisturb)
        }

        function u(e, t) {
            a({
                context: t,
                targetUserLogin: e,
                reason: E.Spam,
                source: "conversations_button"
            })
        }

        function d(e) {
            r(e, x.MarkNotSpam)
        }

        function p(e) {
            r(e, x.Archive)
        }

        function m(e) {
            i({
                threadID: e,
                action: U.Mute
            })
        }

        function h(e) {
            i({
                threadID: e,
                action: U.Unmute
            })
        }

        function f(e) {
            i({
                threadID: e,
                action: U.Expand
            })
        }

        function g(e) {
            i({
                threadID: e,
                action: U.Collapse
            })
        }

        function b(e) {
            i({
                threadID: e,
                action: U.Close
            })
        }

        function v(e) {
            i({
                threadID: e,
                action: U.Archive
            })
        }

        function k(e) {
            w.n.tracking.track(D.SpadeEventType.WhisperThreadCreate, {
                conversation_id: e.threadID,
                target_login: e.targetUserlogin,
                source: "search_target_result",
                search_result_rank: e.searchResultRank
            })
        }

        function y(e) {
            w.n.tracking.track(D.SpadeEventType.WhisperSearchClick, {
                query: e.searchQuery,
                source: "conversation_list",
                rank: e.searchResultRank,
                is_conversation: e.isConversation
            })
        }

        function S() {
            return N.__awaiter(this, void 0, void 0, function() {
                var e, t, n;
                return N.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            e = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, w.n.apollo.client.query({
                                query: T
                            })];
                        case 2:
                            return e = i.sent(), [3, 4];
                        case 3:
                            return t = i.sent(), w.i.error(t, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                        case 4:
                            return n = e && e.data && e.data.currentUser, [2, n]
                    }
                })
            })
        }

        function _(e) {
            return N.__awaiter(this, void 0, void 0, function() {
                var t;
                return N.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, S()];
                        case 1:
                            return t = n.sent(), w.n.tracking.track(D.SpadeEventType.WhisperSent, {
                                to: e.targetUserLogin,
                                from: t && t.login,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID,
                                availability: t && t.availability
                            }), [2]
                    }
                })
            })
        }

        function C(e) {
            return N.__awaiter(this, void 0, void 0, function() {
                var t;
                return N.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, S()];
                        case 1:
                            return t = n.sent(), w.n.tracking.track(D.SpadeEventType.WhisperReceived, {
                                to: t && t.login,
                                from: e.targetUserLogin,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID
                            }), [2]
                    }
                })
            })
        }
        n.d(t, "a", function() {
            return O
        }), t.j = o, t.h = l, t.g = c, t.l = u, t.o = d, t.n = p, t.k = m, t.m = h, t.i = f, t.e = g, t.d = b, t.b = v, t.f = k, t.c = y, t.q = _, t.p = C;
        var E, N = n(0),
            w = n(2),
            D = n(12),
            T = n(465);
        n.n(T);
        ! function(e) {
            e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
        }(E || (E = {}));
        var I;
        ! function(e) {
            e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
        }(I || (I = {}));
        var U;
        ! function(e) {
            e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
        }(U || (U = {}));
        var O;
        ! function(e) {
            e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
        }(O || (O = {}));
        var x;
        ! function(e) {
            e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
        }(x || (x = {}))
    },
    279: function(e, t, n) {
        "use strict";

        function i(e) {
            if (e) {
                var t = e.map(function(e) {
                    return e.id
                });
                return s().filter(function(e) {
                    return t.includes(e.canonical)
                })
            }
            return s()
        }
        var a = function(e, t) {
                return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e)).replace(/{description}/, t)
            },
            r = n(2),
            s = function() {
                return [{
                    localized: Object(r.d)("Site Suspension Evasion", "ReportUserModal"),
                    canonical: "tos_ban_evasion"
                }, {
                    localized: Object(r.d)("Chat Ban Evasion", "ReportUserModal"),
                    canonical: "chat_ban_evasion"
                }, {
                    localized: Object(r.d)("Self-Harm", "ReportUserModal"),
                    canonical: "selfharm"
                }, {
                    localized: Object(r.d)("Attempts or Threats to Harm", "ReportUserModal"),
                    canonical: "harm"
                }, {
                    localized: Object(r.d)("Harassment", "ReportUserModal"),
                    canonical: "harassment"
                }, {
                    localized: Object(r.d)("Hate Speech", "ReportUserModal"),
                    canonical: "hate_speech"
                }, {
                    localized: Object(r.d)("Offensive Username", "ReportUserModal"),
                    canonical: "offensive_username"
                }, {
                    localized: Object(r.d)("Impersonation", "ReportUserModal"),
                    canonical: "impersonation"
                }, {
                    localized: Object(r.d)("Spam, Scams, or Other Malicious Content", "ReportUserModal"),
                    canonical: "spam"
                }, {
                    localized: Object(r.d)("Porn or Other Sexually Explicit Content", "ReportUserModal"),
                    canonical: "porn"
                }, {
                    localized: Object(r.d)("Nudity or Sexual Behavior/Attire", "ReportUserModal"),
                    canonical: "nudity"
                }, {
                    localized: Object(r.d)("Extreme Violence, Gore, or Other Obscene Content", "ReportUserModal"),
                    canonical: "gore"
                }, {
                    localized: Object(r.d)("Underaged User", "ReportUserModal"),
                    canonical: "underaged"
                }, {
                    localized: Object(r.d)("Cheating in Online Game", "ReportUserModal"),
                    canonical: "cheating"
                }, {
                    localized: Object(r.d)("Prohibited Game", "ReportUserModal"),
                    canonical: "prohibited"
                }, {
                    localized: Object(r.d)("Miscategorized Content or Other Category Violation", "ReportUserModal"),
                    canonical: "miscategorized"
                }, {
                    localized: Object(r.d)("Community Rules Violation", "ReportUserModal"),
                    canonical: "community_rules_violation"
                }, {
                    localized: Object(r.d)("Community is Violating Terms of Service", "ReportUserModal"),
                    canonical: "community_tos_violation"
                }, {
                    localized: Object(r.d)("Bits Acceptable Use Policy Violation", "ReportUserModal"),
                    canonical: "bits_violation"
                }, {
                    localized: Object(r.d)("Other Terms of Service Violation", "ReportUserModal"),
                    canonical: "other"
                }]
            };
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return i
        })
    },
    280: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return a.__awaiter(this, void 0, void 0, function() {
                var n, i, r, l, c;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            n = "https://api.twitch.tv/api/premium/credit/spend_token?channel_id=" + e, i = 1, a.label = 1;
                        case 1:
                            if (!(i <= o)) return [3, 7];
                            a.label = 2;
                        case 2:
                            return a.trys.push([2, 5, , 6]), [4, fetch(n, {
                                method: "POST",
                                headers: {
                                    "Client-ID": s.n.config.legacyClientID,
                                    Accept: "application/json; charset=UTF-8",
                                    "content-type": "application/json; charset=UTF-8",
                                    Authorization: "OAuth " + t
                                }
                            })];
                        case 3:
                            return r = a.sent(), [4, r.body];
                        case 4:
                            return l = a.sent(), [2, l];
                        case 5:
                            if (c = a.sent(), i === o) throw c;
                            return [3, 6];
                        case 6:
                            return ++i, [3, 1];
                        case 7:
                            return [2]
                    }
                })
            })
        }
        var a = n(0),
            r = n(1),
            s = n(2),
            o = 3,
            l = n(50),
            c = n(3),
            u = "subscribe-button__subscribe-with-prime",
            d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isSubscribing: !1,
                        primeSubFailure: !0
                    }, t.handleStartPrimeTrialClick = function() {
                        t.props.reportSubMenuAction({
                            action: l.a.ClickSignupForPrime
                        })
                    }, t.handleSubWithPrimeClick = function() {
                        t.setState({
                            isSubscribing: !0
                        }, function() {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var e;
                                return a.__generator(this, function(t) {
                                    switch (t.label) {
                                        case 0:
                                            return t.trys.push([0, 3, 4, 5]), this.props.authToken && this.props.userHasPrime && this.props.subLogin ? [4, i(this.props.subLogin, this.props.authToken)] : [3, 2];
                                        case 1:
                                            t.sent(), this.props.onSubscribedWithPrime(), t.label = 2;
                                        case 2:
                                            return [3, 5];
                                        case 3:
                                            return e = t.sent(), s.i.error(e, "Failed to subscribe with Prime", {
                                                subLogin: this.props.subLogin
                                            }), this.setState({
                                                isSubscribing: !1,
                                                primeSubFailure: !0
                                            }), [3, 5];
                                        case 4:
                                            return this.setState({
                                                isSubscribing: !1
                                            }), [7];
                                        case 5:
                                            return [2]
                                    }
                                })
                            })
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.setMessages()
                }, t.prototype.render = function() {
                    var e = this.props.isSubscribedWithPrime && this.props.canPrimeSubscribe;
                    return this.props.userHasPrime ? this.props.isSubscribed && !e ? r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.subscribed,
                        "data-test-selector": u,
                        disabled: !0,
                        icon: c._9.Crown
                    }, Object(c._39)(this.props)), this.messages.subscribed) : this.props.canPrimeSubscribe ? r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.subscribeFree,
                        "data-test-selector": u,
                        disabled: this.state.isSubscribing,
                        icon: c._9.Crown,
                        state: this.state.isSubscribing ? c.y.Loading : c.y.Default,
                        onClick: this.handleSubWithPrimeClick
                    }, Object(c._39)(this.props)), e ? this.messages.resubscribeFree : this.messages.subscribeFree) : r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.primeSubNotAvailable,
                        "data-test-selector": u,
                        disabled: !0,
                        icon: c._9.Crown
                    }, Object(c._39)(this.props)), this.messages.primeSubNotAvailable) : r.createElement(c.u, a.__assign({
                        ariaLabel: this.messages.startPrimeTrial,
                        "data-test-selector": u,
                        icon: c._9.Crown,
                        linkTo: s.a.tryPrimeURI,
                        onClick: this.handleStartPrimeTrialClick
                    }, Object(c._39)(this.props), {
                        targetBlank: !0
                    }), this.messages.startPrimeTrial)
                }, t.prototype.setMessages = function() {
                    this.messages = {
                        subscribed: Object(s.d)("Subscribed", "SubscribeWithPrime"),
                        startPrimeTrial: Object(s.d)("Start Your Free Trial", "SubscribeWithPrime"),
                        primeSubNotAvailable: Object(s.d)("Not yet!", "SubscribeWithPrime"),
                        subscribeFree: Object(s.d)("Subscribe Free", "SubscribeWithPrime"),
                        resubscribeFree: Object(s.d)("Resubscribe Free", "SubscribeWithPrime")
                    }
                }, t
            }(r.Component),
            p = d;
        n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return p
        })
    },
    281: function(e, t, n) {
        "use strict";

        function i(e, t) {
            switch (e.type) {
                case a.b.Playing:
                    return {
                        type: a.a.Playing,
                        "Symbol(id)": t,
                        __typename: "Playing",
                        game: {
                            id: e.game_id,
                            name: e.game,
                            "Symbol(id)": t + ".game",
                            __typename: "Game"
                        }
                    };
                case a.b.Streaming:
                    var n = {
                        type: a.a.Streaming,
                        "Symbol(id)": t,
                        __typename: "Streaming",
                        stream: {
                            id: e.channel_id,
                            game: null,
                            "Symbol(id)": t + ".stream",
                            __typename: "Stream"
                        }
                    };
                    return e.game && e.game_id && (n.stream.game = {
                        id: e.game_id,
                        name: e.game,
                        "Symbol(id)": t + ".stream.game",
                        __typename: "Game"
                    }), n;
                case a.b.Watching:
                    return {
                        type: a.a.Watching,
                        "Symbol(id)": t,
                        __typename: "Watching",
                        user: {
                            id: e.channel_id,
                            login: e.channel_login,
                            displayName: e.channel_display_name,
                            "Symbol(id)": t + ".user",
                            __typename: "User",
                            hosting: {
                                id: e.hosted_channel_id || null,
                                displayName: e.hosted_channel_display_name || null,
                                login: e.hosted_channel_login || null,
                                "Symbol(id)": t + ".user.hosting",
                                __typename: "User"
                            }
                        }
                    };
                default:
                    return null
            }
        }
        t.a = i;
        var a = n(109)
    },
    282: function(e, t, n) {
        "use strict";

        function i(e) {
            switch (e) {
                case Q.a.Online:
                    return j._4.Online;
                case Q.a.Away:
                case Q.a.Idle:
                    return j._4.Away;
                case Q.a.Busy:
                    return j._4.Busy;
                case Q.a.Offline:
                case Q.a.Invisible:
                default:
                    return j._4.Offline
            }
        }

        function a(e, t) {
            return {
                notifications: Object(re.a)(e, t.thread.id)
            }
        }

        function r(e, t) {
            return {
                messages: {
                    edges: e.map(function(e, n) {
                        return {
                            cursor: "" + n,
                            node: {
                                content: {
                                    content: e.content,
                                    emotes: []
                                },
                                deletedAt: null,
                                editedAt: null,
                                from: {
                                    id: t
                                },
                                id: e.id,
                                sentAt: (new Date).toISOString()
                            }
                        }
                    })
                },
                isMuted: !1,
                unreadMessagesCount: 0,
                participants: [],
                id: Object(C.b)(),
                spamInfo: {
                    lastMarkedNotSpamAt: null,
                    likelihood: "low"
                },
                userLastMessageRead: {
                    sentAt: (new Date).toISOString()
                }
            }
        }

        function s(e) {
            return Object(p.bindActionCreators)({
                notifyWhisperThread: m.b
            }, e)
        }
        var o, l = n(0),
            c = n(1),
            u = n(380),
            d = n(7),
            p = n(9),
            m = n(276),
            h = n(4),
            f = n(2),
            g = n(64),
            b = n(66),
            v = n(6),
            k = n(86),
            y = n(39),
            S = n(21),
            _ = n(30),
            C = n(18),
            E = n(439),
            N = n(383),
            w = n(87),
            D = n(10),
            T = n(47),
            I = n(440),
            U = n(283),
            O = n(264),
            x = n(12),
            M = n(70),
            R = n(284),
            P = n(31),
            F = n(89),
            j = n(3),
            A = n(277),
            L = n(466),
            B = n(467),
            H = n(468),
            V = n(469),
            W = "whispers-report-harassment-button",
            G = "whispers-report-spam-button",
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderReportSpamButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(f.d)("Report Spam", "ThreadSettings");
                        return c.createElement(j.S, {
                            "data-test-selector": G,
                            ariaLabel: e,
                            onClick: t.reportUserSpam
                        }, c.createElement(j.U, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.renderReportHarassmentButton = function() {
                        if (t.isBlocked) return null;
                        var e = Object(f.d)("Report Harrasment", "ThreadSettings");
                        return c.createElement(j.S, {
                            "data-test-selector": W,
                            ariaLabel: e,
                            onClick: t.reportUserHarassment
                        }, c.createElement(j.U, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, e))
                    }, t.onChannelRedirect = function() {
                        t.props.collapseThread && t.props.collapseThread()
                    }, t.toggleMutethread = function() {
                        var e = !t.props.isMuted,
                            n = l.__assign({}, Object(S.a)({
                                threadID: t.props.threadID,
                                isMuted: !t.props.isMuted
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            id: t.props.threadID,
                                            isMuted: e,
                                            __typename: "WhisperThread"
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                        t.props.setMuteThread && (e ? Object(F.j)(t.props.threadID) : Object(F.k)(t.props.threadID), t.props.setMuteThread(n))
                    }, t.reportUserHarassment = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return l.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(S.a)({
                                            targetUserID: this.props.userID,
                                            reason: O.c.Harassment,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), f.i.error(t, "Failed to report whisper thread for harassment.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.reportUserSpam = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return l.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        e = Object(S.a)({
                                            targetUserID: this.props.userID,
                                            reason: O.c.Spam,
                                            threadID: this.props.threadID
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.reportWhisperThread(e)];
                                    case 2:
                                        return n.sent(), this.blockUser(), [3, 4];
                                    case 3:
                                        return t = n.sent(), f.i.error(t, "Failed to report whisper thread for spam.", {
                                            threadID: this.props.threadID
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.blockUser = function() {
                        var e = l.__assign({}, Object(S.a)({
                            targetUserID: t.props.userID,
                            reason: O.b.Other,
                            sourceContext: O.a.Whisper
                        }), {
                            optimisticResponse: {
                                blockUser: {
                                    __typename: "BlockUserPayload",
                                    targetUser: {
                                        __typename: "User",
                                        id: t.props.userID
                                    }
                                }
                            },
                            update: function(e) {
                                var n = e.readFragment({
                                    id: t.currentUserDataID,
                                    fragment: A
                                });
                                n && (n.blockedUsers.push({
                                    id: t.props.userID,
                                    __typename: "User"
                                }), e.writeFragment({
                                    id: t.currentUserDataID,
                                    fragment: A,
                                    data: n
                                }))
                            }
                        });
                        t.props.blockUser(e), t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.unblockUser = function() {
                        var e = l.__assign({}, Object(S.a)({
                            targetUserID: t.props.userID
                        }), {
                            optimisticResponse: {
                                unblockUser: {
                                    __typename: "UnblockUserPayload",
                                    targetUser: {
                                        id: t.props.userID,
                                        __typename: "User"
                                    }
                                }
                            },
                            update: function(e) {
                                var n = e.readFragment({
                                    id: t.currentUserDataID,
                                    fragment: A
                                });
                                n && (n.blockedUsers = n.blockedUsers.filter(function(e) {
                                    return e.id !== t.props.userID
                                }), e.writeFragment({
                                    id: t.currentUserDataID,
                                    fragment: A,
                                    data: n
                                }))
                            }
                        });
                        t.props.unblockUser(e), t.props.onUnblock && t.props.onUnblock(t.props.threadID)
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.displayName || this.props.login,
                        t = this.props.isMuted ? Object(f.d)("Turn Notifications On", "ThreadSettings") : Object(f.d)("Turn Notifications Off", "ThreadSettings"),
                        n = Object(f.d)("Go to {displayName}'s Channel", {
                            displayName: e
                        }, "ThreadSettings");
                    return c.createElement(j.U, {
                        display: j.H.Flex,
                        flexDirection: j.J.Column,
                        margin: 1
                    }, c.createElement(j.S, {
                        ariaLabel: t,
                        onClick: this.toggleMutethread
                    }, c.createElement(j.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)), c.createElement(j._17, {
                        borderBottom: !0,
                        margin: {
                            y: 1,
                            left: .5
                        }
                    }), this.renderBlockButton(), this.renderReportHarassmentButton(), this.renderReportSpamButton(), c.createElement(j.S, {
                        linkTo: "/" + this.props.login,
                        onClick: this.onChannelRedirect,
                        ariaLabel: n
                    }, c.createElement(j.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, n)))
                }, t.prototype.renderBlockButton = function() {
                    var e, t, n = this.props.displayName || this.props.login;
                    return this.isBlocked ? (e = Object(f.d)("Unblock {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.unblockUser) : (e = Object(f.d)("Block {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.blockUser), c.createElement(j.S, {
                        "data-test-selector": "whispers-block-user-button",
                        ariaLabel: e,
                        onClick: t
                    }, c.createElement(j.U, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, Object.defineProperty(t.prototype, "isBlocked", {
                    get: function() {
                        var e = this;
                        return !(!this.props.currentUser.blockedUsers || !this.props.currentUser.blockedUsers.find(function(t) {
                            return t.id === e.props.userID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "currentUserDataID", {
                    get: function() {
                        return f.n.apollo.client.dataIdFromObject ? f.n.apollo.client.dataIdFromObject(this.props.currentUser) || "" : ""
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(c.Component),
            z = Object(P.compose)(Object(v.a)(H, {
                name: "setMuteThread"
            }), Object(v.a)(L, {
                name: "blockUser"
            }), Object(v.a)(V, {
                name: "unblockUser"
            }), Object(v.a)(B, {
                name: "reportWhisperThread"
            }))(q),
            $ = n(470),
            J = n(471),
            Q = n(51),
            K = n(278),
            Y = (n(472), "report-as-spam-button"),
            X = "mark-not-spam-button",
            Z = "dismiss-prompt-button",
            ee = "spam-prompt-pending-target",
            te = "spam-prompt-reported-target",
            ne = {
                displayName: "???",
                login: "???",
                displayBadges: [],
                id: ""
            },
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        potentialSpamResolution: "pending"
                    }, t.renderPotentialSpamPrompt = function() {
                        if (t.props.spamInfo && "low" !== t.props.spamInfo.likelihood && null === t.props.spamInfo.lastMarkedNotSpamAt) {
                            if ("pending" === t.state.potentialSpamResolution) return c.createElement(j.U, {
                                "data-a-target": ee,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, c.createElement(j._17, {
                                background: j.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, c.createElement(j.U, {
                                display: j.H.InlineBlock,
                                margin: .5
                            }, c.createElement(j._21, {
                                type: j._26.Span,
                                fontSize: j.L.Size6,
                                color: j.F.Alt2
                            }, Object(f.d)("It looks like this conversation triggered our spam detector. If it is spam, please report it!", "ThreadHeader"))), c.createElement(j.U, {
                                display: j.H.InlineBlock,
                                margin: .5
                            }, c.createElement(j.u, {
                                "data-a-target": Y,
                                type: j.z.Alert,
                                onClick: t.reportSpam,
                                size: j.x.Small
                            }, Object(f.d)("Report spam", "ThreadHeader"))), c.createElement(j.U, {
                                display: j.H.InlineBlock,
                                margin: .5
                            }, c.createElement(j.u, {
                                "data-a-target": X,
                                onClick: t.markNotSpam,
                                size: j.x.Small
                            }, Object(f.d)("This is not spam", "ThreadHeader")))));
                            if ("reported" === t.state.potentialSpamResolution && t.interlocutor.displayName) return c.createElement(j.U, {
                                "data-a-target": te,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, c.createElement(j._17, {
                                background: j.m.Alt2,
                                padding: .5,
                                elevation: 2
                            }, c.createElement(j.U, {
                                display: j.H.InlineBlock,
                                margin: .5
                            }, c.createElement(j._21, {
                                type: j._26.Span,
                                fontSize: j.L.Size6,
                                color: j.F.Alt2
                            }, Object(f.d)("Thank you for helping us fight spam. We've blocked {user} from sending you further whispers. You can undo this from the Whisper Settings Menu.", {
                                user: t.interlocutor.displayName
                            }, "ThreadHeader"))), c.createElement(j.U, {
                                display: j.H.InlineBlock,
                                margin: .5
                            }, c.createElement(j.u, {
                                "data-a-target": Z,
                                type: j.z.Text,
                                onClick: t.dismissSpamPrompt,
                                size: j.x.Small
                            }, Object(f.d)("Dismiss", "ThreadHeader")))))
                        }
                        return null
                    }, t.reportSpam = function() {
                        t.props.reportUserMutation(t.interlocutor.id, O.c.Spam, t.props.threadID), t.props.blockUserMutation(t.interlocutor.id, O.b.Other, O.a.Whisper, t.props.participants.currentUser), t.props.setThreadSpamStatusMutation(t.props.threadID, !0), Object(K.l)(t.interlocutor.login, K.a.SpamPropmt), t.setState({
                            potentialSpamResolution: "reported"
                        })
                    }, t.markNotSpam = function() {
                        t.props.setThreadSpamStatusMutation(t.props.threadID, !1), Object(K.o)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.dismissSpamPrompt = function() {
                        t.props.onBlock && t.props.onBlock(t.props.threadID), Object(K.n)(t.props.threadID), t.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, t.onSettingsClick = function(e) {
                        e.stopPropagation()
                    }, t.onPresenceClick = function(e, n) {
                        n.stopPropagation();
                        var i = t.props.participants.currentUser && t.props.participants.currentUser.friends.edges.find(function(e) {
                            return e.node.id === t.interlocutor.id
                        });
                        t.props.participants.user && i && i.activity ? Object(U.b)({
                            context: e,
                            friendActivity: i.activity,
                            friendLogin: t.props.participants.user.login
                        }) : f.i.warn("[ThreadHeader] Attempted to track presence click without required data.")
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = h({
                            "thread-header__title-bar-container": !0,
                            "thread-header__title-bar-container--highlighted": this.props.isHighlighted,
                            "thread-header__title-bar-container--focused": this.props.isFocused
                        }),
                        n = h({
                            "thread-header": !0,
                            "thread-header--collapsed": this.props.isCollapsed
                        }),
                        a = Object(f.d)("Close", "WhisperThreadHeader"),
                        r = Object(f.d)("Settings", "WhisperThreadHeader");
                    if (this.props.isLoading || !this.props.participants.currentUser || !this.props.participants.user) return c.createElement(j.U, {
                        className: t,
                        display: j.H.Flex,
                        justifyContent: j.T.Between,
                        fullWidth: !0,
                        alignItems: j.c.Center,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        flexShrink: 0,
                        flexGrow: 0,
                        flexWrap: j.K.NoWrap
                    }, c.createElement(j._1, {
                        height: 20,
                        width: 80
                    }), c.createElement(j.U, {
                        display: j.H.Flex
                    }, c.createElement(j.v, {
                        ariaLabel: a,
                        icon: j._9.RemoveTag,
                        "data-a-target": "whispers-thread__close-button-" + this.props.threadID,
                        onClick: this.props.onClose
                    })));
                    var s = null,
                        o = null,
                        l = null,
                        u = null,
                        d = this.props.participants.currentUser && this.props.participants.currentUser.friends.edges.find(function(t) {
                            return t.node.id === e.interlocutor.id
                        });
                    if (d && (o = c.createElement(j.U, {
                            margin: {
                                left: 1
                            },
                            display: j.H.Flex,
                            alignItems: j.c.Center
                        }, c.createElement(j._3, {
                            status: i(d.availability)
                        })), d.activity)) {
                        var p = Object(M.c)(d.activity, !0),
                            m = null,
                            g = Object(M.d)(this.props.participants.user.login, d.activity);
                        if (g && (m = {
                                pathname: g,
                                state: {
                                    content: x.PageviewContent.Presence,
                                    medium: x.PageviewMedium.Whispers
                                }
                            }), m) {
                            var b = h({
                                "thread-header__activity-link--highlighted": this.props.isHighlighted
                            });
                            l = c.createElement(D.a, {
                                className: b,
                                title: Object(M.c)(d.activity) || "",
                                onClick: this.onPresenceClick.bind(this, U.a.WhisperHeaderLink),
                                to: m,
                                "data-test-selector": "whispers-thread__presence-link"
                            }, p)
                        } else l = p;
                        this.props.isCollapsed || (u = c.createElement(j.U, {
                            padding: {
                                right: .5
                            }
                        }, c.createElement(R.a, {
                            link: m,
                            onClick: this.onPresenceClick.bind(this, U.a.WhisperHeaderButton),
                            shouldHollowOverlay: this.props.isHighlighted
                        })))
                    }!this.props.isCollapsed && this.props.participants.currentUser && (s = c.createElement(T.a, null, c.createElement(j.v, {
                        ariaLabel: r,
                        icon: j._9.Gear,
                        overlay: this.props.isHighlighted
                    }), c.createElement(j.p, {
                        direction: j.q.BottomRight,
                        offsetX: "0.5rem"
                    }, c.createElement(z, {
                        login: this.interlocutor.login,
                        displayName: this.interlocutor.displayName,
                        currentUser: this.props.participants.currentUser,
                        userID: this.interlocutor.id,
                        isMuted: this.props.isMuted,
                        threadID: this.props.threadID,
                        collapseThread: this.props.collapse,
                        onBlock: this.props.onBlock,
                        onUnblock: this.props.onUnblock
                    }))));
                    var v = this.interlocutor.displayBadges.map(function(e) {
                        return c.createElement(j.P, {
                            key: e.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, c.createElement("img", {
                            alt: e.title,
                            title: e.title,
                            className: "thread-header__badge",
                            src: e.imageURL
                        }))
                    });
                    return c.createElement(j.U, {
                        className: n,
                        position: j._2.Relative,
                        fullWidth: !0
                    }, c.createElement("div", {
                        className: "thread-header__click-area",
                        onClick: this.props.onHeaderClick,
                        "data-a-target": "thread-header__click-area"
                    }, c.createElement(j.U, {
                        className: t,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        alignItems: j.c.Center,
                        flexGrow: 1,
                        display: j.H.Flex,
                        "data-a-target": "whisper-thread__title-bar-" + this.props.threadID,
                        "data-click-out-id": "thread-expand-close",
                        flexWrap: j.K.NoWrap
                    }, c.createElement(j.U, {
                        fullHeight: !0,
                        flexGrow: 1,
                        display: j.H.Flex,
                        flexDirection: j.J.Column
                    }, c.createElement(j.U, {
                        display: j.H.Flex,
                        flexGrow: 1,
                        alignItems: j.c.Center,
                        flexWrap: j.K.NoWrap,
                        padding: {
                            right: 1
                        }
                    }, v, c.createElement(j._21, {
                        color: this.props.isHighlighted ? j.F.Overlay : j.F.Base,
                        type: j._26.Span,
                        bold: !0,
                        ellipsis: !0
                    }, this.interlocutor.displayName), o), c.createElement(j._17, {
                        className: "thread-header__activity",
                        color: this.props.isHighlighted ? j.F.Overlay : j.F.Base,
                        padding: {
                            right: 1
                        },
                        overflow: j.Y.Hidden
                    }, l)), c.createElement(j.U, {
                        display: j.H.Flex,
                        flexShrink: 0,
                        flexDirection: j.J.Row,
                        alignItems: j.c.Center
                    }, u, c.createElement("div", {
                        onClick: this.onSettingsClick
                    }, s), c.createElement(j.v, {
                        ariaLabel: a,
                        icon: j._9.RemoveTag,
                        "data-a-target": "thread-header__close-button-" + this.props.threadID,
                        onClick: this.props.onClose,
                        overlay: this.props.isHighlighted
                    })))), this.renderPotentialSpamPrompt())
                }, Object.defineProperty(t.prototype, "interlocutor", {
                    get: function() {
                        return this.props.participants.user || ne
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(c.Component),
            ae = Object(p.compose)(Object(I.a)(), function() {
                var e = this;
                return Object(v.a)($, {
                    props: function(t) {
                        return {
                            reportUserMutation: function(n, i, a) {
                                return l.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return l.__generator(this, function(r) {
                                        switch (r.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                r.label = 1;
                                            case 1:
                                                return r.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            reason: i,
                                                            threadID: a
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return r.sent(), [3, 4];
                                            case 3:
                                                return e = r.sent(), f.i.error(e, "Unable to report user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), function() {
                var e = this;
                return Object(v.a)(J, {
                    props: function(t) {
                        return {
                            setThreadSpamStatusMutation: function(n, i) {
                                return l.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return l.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            threadID: n,
                                                            isSpam: i
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return a.sent(), [3, 4];
                                            case 3:
                                                return e = a.sent(), f.i.error(e, "Unable to modify threads spam status user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(ie),
            re = n(145),
            se = n(28),
            oe = n(114);
        ! function(e) {
            e[e.Timestamp = 0] = "Timestamp", e[e.Whisper = 1] = "Whisper", e[e.Warning = 2] = "Warning", e[e.NewMessages = 3] = "NewMessages", e[e.Notification = 4] = "Notification"
        }(o || (o = {}));
        var le = (n(473), n(285)),
            ce = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case o.Timestamp:
                            return c.createElement(j._17, {
                                className: "thread-message__timestamp",
                                color: j.F.Alt2,
                                fontSize: j.L.Size7
                            }, Object(le.d)(e));
                        case o.Warning:
                            return c.createElement(j._17, {
                                className: "thread-message__warning",
                                color: j.F.Alt2
                            }, Object(le.e)());
                        case o.Whisper:
                            return c.createElement(j.U, {
                                className: "thread-message__message"
                            }, Object(le.f)(e));
                        case o.NewMessages:
                            return c.createElement(j._17, {
                                className: "thread-message__new-messages",
                                color: j.F.OverlayAlt,
                                fontSize: j.L.Size7
                            }, Object(le.b)());
                        case o.Notification:
                            return c.createElement(j.U, {
                                className: "thread-message__notification"
                            }, Object(le.c)(e));
                        default:
                            return null
                    }
                }, t
            }(c.Component),
            ue = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0
                    }, t.loadMore = function() {
                        var e = t.scroll.scrollContent.scrollHeight;
                        return t.setState({
                            prevScrollHeight: e
                        }), t.props.loadMore()
                    }, t.renderMessages = function(e) {
                        return e.map(function(e, n) {
                            return c.createElement(ce, {
                                message: e,
                                key: t.generateMessageKey(e, n.toString())
                            })
                        })
                    }, t.getMessages = function() {
                        var e = t.props.unreadMessagesCount;
                        return t.props.thread.messages.edges.map(function(e) {
                            return {
                                type: o.Whisper,
                                content: e.node.content.content,
                                from: t.props.participantsByID[+e.node.from.id],
                                emotes: e.node.content.emotes,
                                id: e.node.id,
                                sentAt: new Date(e.node.sentAt),
                                editedAt: e.node.editedAt,
                                deletedAt: e.node.deletedAt
                            }
                        }).reduce(function(n, i, a, r) {
                            if (t.notificationsFor(i).forEach(function(e) {
                                    n.push(e)
                                }), n.push(i), 0 == --e && n.push(t.createNewMessagesIndicator()), 0 === a);
                            else if (a < r.length - 1) {
                                var s = r[a + 1];
                                !i.deletedAt && t.shouldAddTimestamp(i, s) && n.push(t.createTimestampMessage(i))
                            }
                            return a === r.length - 1 && (i.deletedAt || n.push(t.createTimestampMessage(i)), n.push(t.createWarningMessage())), n
                        }, []).reverse()
                    }, t.shouldAddTimestamp = function(e, t) {
                        return e.sentAt.valueOf() - t.sentAt.valueOf() > 6e5
                    }, t.createTimestampMessage = function(e) {
                        return {
                            type: o.Timestamp,
                            timestamp: new Date(e.sentAt)
                        }
                    }, t.notificationsFor = function(e) {
                        return t.props.notifications.filter(function(t) {
                            return t.afterMessageID === e.id
                        }).map(t.createNotificationLine)
                    }, t.createNotificationLine = function(e) {
                        return {
                            type: o.Notification,
                            content: e.content
                        }
                    }, t.createNewMessagesIndicator = function() {
                        return {
                            type: o.NewMessages
                        }
                    }, t.createWarningMessage = function() {
                        return {
                            type: o.Warning
                        }
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.scrollToBottom = function() {
                        t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.scrollToBottom(), this.setState({
                        disableInfiniteTrigger: !1
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    (this.props.thread.messages.edges.length > 0 || e.thread.messages.edges.length > 0) && (0 === this.props.thread.messages.edges.length && e.thread.messages.edges.length > 0 || this.props.thread.messages.edges[0].cursor !== e.thread.messages.edges[0].cursor) && this.setState({
                        prevScrollHeight: this.scroll.scrollContent.scrollHeight
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    if (this.props.thread.messages.edges.length > e.thread.messages.edges.length)
                        if (this.props.thread.messages.edges[0] && e.thread.messages.edges[0] && this.props.thread.messages.edges[0].cursor === e.thread.messages.edges[0].cursor && this.props.thread.messages.edges[0].node.id === e.thread.messages.edges[0].node.id) {
                            if (this.state.prevScrollHeight && this.state.prevScrollHeight !== this.scroll.scrollContent.scrollHeight) {
                                var t = this.scroll.scrollContent.scrollHeight - this.state.prevScrollHeight;
                                this.scroll.scrollContent.scrollTop = t
                            }
                        } else this.scrollToBottom();
                    this.props.notifications.length > e.notifications.length && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this.getMessages();
                    return c.createElement(j.U, {
                        fullHeight: !0
                    }, c.createElement(se.b, {
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0
                    }, c.createElement(j.U, null, c.createElement(se.a, {
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadMore,
                        pixelThreshold: 200,
                        orientation: oe.b.Down,
                        contentLength: e.length
                    }), this.renderMessages(e))))
                }, t.prototype.generateMessageKey = function(e, t) {
                    switch (e.type) {
                        case o.NewMessages:
                        case o.Warning:
                            return "" + e.type;
                        case o.Timestamp:
                            return e.type + "-" + e.timestamp.getTime();
                        case o.Whisper:
                            return e.type + "-" + e.id;
                        default:
                            return f.i.warn("[ThreadMessages] Encountered an unknown message type."), t
                    }
                }, t
            }(c.Component),
            de = ue,
            pe = Object(d.a)(a)(de),
            me = n(441),
            he = n(55),
            fe = n(477),
            ge = (n(478), n(479)),
            be = n(480),
            ve = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.refetchTimeout = 0, n.getEmotes = function() {
                        return Object.keys(n.props.emotes).map(function(e) {
                            return {
                                id: e,
                                emotes: Object(w.b)([n.props.emotes[e]])
                            }
                        })
                    }, n.onEmoticonClick = function(e) {
                        var t = n.autocompleteInput.getValue();
                        t && t.length > 0 && !t.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInput.setValue(t)
                    }, n.onBlock = function(e) {
                        n.addNotification(Object(f.d)("User successfully blocked", "whispers")), n.props.onBlock && n.props.onBlock(e)
                    }, n.onUnblock = function() {
                        n.addNotification(Object(f.d)("User successfully unblocked", "whispers"))
                    }, n.loadMore = function() {
                        return l.__awaiter(n, void 0, void 0, function() {
                            return l.__generator(this, function(e) {
                                return this.props.data.loading || this.props.data.error ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.addNewThreadSendWhisper = function(e) {
                        var t = n.state.newThreadMessages;
                        t.unshift({
                            content: e,
                            id: Object(C.b)()
                        }), n.setState({
                            newThreadMessages: t
                        })
                    }, n.addNotification = function(e) {
                        n.props.notifyWhisperThread(n.props.threadID, e, n.getLastMessageID())
                    }, n.getLastMessageID = function() {
                        if (n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0]) return n.props.data.whisperThread.messages.edges[0].node.id
                    }, n.getPlaceholderThreadFromLocalState = function() {
                        return r(n.state.newThreadMessages, n.props.currentUserID)
                    }, n.handleHeaderClick = function() {
                        n.props.collapsed ? n.expand() : n.collapse()
                    }, n.expand = function() {
                        n.props.participants.currentUser && Object(F.h)(n.props.threadID), n.props.onExpand(n.props.threadID)
                    }, n.onClickOut = function() {
                        n.props.focused && n.props.onUnfocus(n.props.threadID)
                    }, n.handleClose = function() {
                        n.props.participants.currentUser && Object(F.c)(n.props.threadID), n.props.onClose(n.props.threadID)
                    }, n.collapse = function() {
                        n.props.participants.currentUser && Object(F.d)(n.props.threadID), n.props.onCollapse(n.props.threadID)
                    }, n.handleKeydown = function(e) {
                        if ((e.charCode || e.keyCode) === y.a.Enter) {
                            var t = n.autocompleteInput.getValue();
                            n.autocompleteInput.setValue(""), n.sendWhisper(t)
                        }
                    }, n.handleClick = function() {
                        n.props.onFocus(n.props.threadID), n.markThreadMessagesAsRead()
                    }, n.markThreadMessagesAsRead = function() {
                        if (!(n.props.data.loading || n.props.data.error || n.props.data.whisperThread && 0 === n.props.data.whisperThread.unreadMessagesCount)) {
                            var e = l.__assign({}, Object(S.a)({
                                threadID: n.props.threadID,
                                lastReadMessageID: n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id || ""
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            __typename: "WhisperThread",
                                            id: n.props.threadID,
                                            unreadMessagesCount: 0
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                            n.props.updateThread && n.props.updateThread(e)
                        }
                    }, n.sendWhisper = function(e) {
                        if ("" !== e) {
                            n.props.data.error && n.addNewThreadSendWhisper(e);
                            var t = Object(he.b)(n.props.threadID, n.props.currentUserID);
                            if (!t) return void f.i.warn("Unable to parse whisper recipient ID.");
                            n.props.participants.currentUser && n.props.participants.user && Object(F.m)({
                                threadID: n.props.threadID,
                                targetUserLogin: n.props.participants.user.login
                            }), Object(me.a)({
                                currentUserID: n.props.currentUserID,
                                emotes: n.props.emotes,
                                message: e,
                                recipientUserID: t
                            }).catch(function() {
                                var e = Object(f.d)("Your whisper was not delivered.", "Thread"),
                                    t = n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id;
                                n.props.notifyWhisperThread(n.props.threadID, e, t)
                            })
                        }
                    }, n.setAutocompleteInnerComponentRef = function(e) {
                        n.textInput = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInput = e
                    }, n.handleContentClick = function() {
                        document.getSelection().toString() || n.textInput.focus()
                    }, n.state = {
                        newThreadMessages: []
                    }, n
                }
                return l.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (e.data.error || e.data.loading || !e.data.whisperThread || this.props.reportThreadData(e.threadID, e.data.whisperThread), this.props.data.error) {
                        var n = !1;
                        this.props.pubsub.messages.whisperReceived !== e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived.data_object.thread_id === this.props.threadID && (n = !0), this.props.pubsub.messages.whisperSent !== e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent.data_object.thread_id === this.props.threadID && (n = !0), n && (clearTimeout(this.refetchTimeout), this.refetchTimeout = setTimeout(function() {
                            t.props.data.refetch()
                        }, 200))
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    e.data.whisperThread && this.props.data.whisperThread && (this.props.data.whisperThread.messages.edges.length, e.data.whisperThread.messages.edges.length)
                }, t.prototype.render = function() {
                    var e = h({
                        "whispers-thread": !0,
                        "whispers-thread--collapsed": this.props.collapsed,
                        "whispers-thread--focused": this.props.focused
                    });
                    return this.props.hidden ? null : c.createElement(g.a, {
                        onClickOut: this.onClickOut
                    }, c.createElement(j._17, {
                        className: e,
                        display: j.H.Flex,
                        flexShrink: 0,
                        flexGrow: 0,
                        position: j._2.Relative,
                        background: j.m.Base,
                        margin: {
                            left: 1
                        },
                        alignItems: j.c.Center,
                        justifyContent: j.T.Center,
                        "data-a-target": "whisper-thread-" + this.props.threadID + (this.props.collapsed ? "-collapsed" : ""),
                        elevation: 3
                    }, c.createElement(j.U, {
                        className: "whisper-thread__input",
                        position: j._2.Absolute,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        attachBottom: !0
                    }, c.createElement(E.b, {
                        componentType: E.a.Input,
                        suggestionSource: E.c.Whisper,
                        iconRight: !0,
                        onFocus: this.handleClick,
                        onClick: this.handleClick,
                        onKeyDown: this.handleKeydown,
                        componentRefDelegate: this.setAutocompleteInnerComponentRef,
                        refDelegate: this.setAutocompleteInputRef
                    }, c.createElement(E.d, {
                        emotes: this.getEmotes()
                    })), c.createElement(N.a, {
                        attachBottom: !0,
                        attachRight: !0,
                        inputRef: this.textInput,
                        onClickEmote: this.onEmoticonClick,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        position: j._2.Absolute,
                        shouldCloseOnClickOut: !0
                    })), c.createElement(j.P, {
                        fullWidth: !0
                    }, c.createElement("div", {
                        className: "whispers-thread__content",
                        onClick: this.handleContentClick
                    }, this.renderContent())), c.createElement(j.U, {
                        position: j._2.Absolute,
                        fullWidth: !0,
                        flexShrink: 0,
                        display: j.H.Flex,
                        alignItems: j.c.Center,
                        attachTop: !0
                    }, c.createElement(ae, {
                        isHighlighted: !!(this.props.data.whisperThread && this.props.data.whisperThread.unreadMessagesCount > 0),
                        isFocused: !!this.props.focused,
                        isMuted: !!this.props.data.whisperThread && this.props.data.whisperThread.isMuted,
                        isCollapsed: this.props.collapsed,
                        isLoading: this.props.data.loading || this.props.participants.loading || !this.props.participants.user || !this.props.participants.currentUser,
                        participants: this.props.participants,
                        spamInfo: this.props.data.whisperThread && this.props.data.whisperThread.spamInfo,
                        threadID: this.props.threadID,
                        collapse: this.collapse,
                        onHeaderClick: this.handleHeaderClick,
                        onBlock: this.onBlock,
                        onUnblock: this.onUnblock,
                        onClose: this.handleClose
                    }))))
                }, t.prototype.renderContent = function() {
                    var e;
                    return this.props.data.error ? (e = c.createElement(b.a, {
                        message: Object(f.d)("Sorry, something went wrong loading this conversation.", "WhisperThread")
                    }), e = c.createElement(j.U, null), this.props.participants.currentUser && this.props.participants.user && (e = c.createElement(pe, {
                        thread: this.getPlaceholderThreadFromLocalState(),
                        unreadMessagesCount: 0,
                        participantsByID: this.getUsersByID([this.props.participants.currentUser, this.props.participants.user]),
                        loadMore: this.loadMore
                    }))) : e = this.props.data.loading || this.props.participants.loading || !this.props.data.whisperThread ? c.createElement(j.U, {
                        display: j.H.Flex,
                        justifyContent: j.T.Center,
                        alignItems: j.c.Center,
                        margin: 2,
                        fullHeight: !0,
                        flexGrow: 1
                    }, c.createElement(j.X, null)) : c.createElement(pe, {
                        thread: this.props.data.whisperThread,
                        participantsByID: this.getUsersByID(this.props.data.whisperThread.participants),
                        unreadMessagesCount: this.props.data.whisperThread.unreadMessagesCount,
                        loadMore: this.loadMore
                    }), e
                }, t.prototype.getUsersByID = function(e) {
                    for (var t = {}, n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        t[a.id] = a
                    }
                    return t
                }, t = l.__decorate([Object(v.a)(fe, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: Object(he.b)(e.threadID, e.currentUserID) || ""
                            },
                            skip: !e.currentUserID || !e.threadID
                        }
                    },
                    name: "participants"
                }), Object(v.a)(ge, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.threadID
                            }
                        }
                    },
                    props: function(e) {
                        return l.__assign({}, e, {
                            loadMore: function() {
                                return e.data.fetchMore({
                                    query: ge,
                                    variables: l.__assign({}, e.data.variables, {
                                        cursor: e.data.whisperThread && e.data.whisperThread.messages.edges[e.data.whisperThread.messages.edges.length - 1].cursor
                                    }),
                                    updateQuery: function(e, t) {
                                        var n = t.fetchMoreResult,
                                            i = n;
                                        if (!i.whisperThread) return {
                                            whisperThread: null
                                        };
                                        if (!e.whisperThread) return {
                                            whisperThread: i.whisperThread
                                        };
                                        var a = l.__assign({}, i.whisperThread.messages, {
                                            edges: Object(S.b)(e.whisperThread.messages.edges, i.whisperThread.messages.edges)
                                        });
                                        return {
                                            whisperThread: l.__assign({}, i.whisperThread, {
                                                messages: a
                                            })
                                        }
                                    }
                                })
                            }
                        })
                    }
                }), Object(k.a)([{
                    topic: function(e) {
                        return Object(_.p)(e.currentUserID)
                    },
                    mapMessageTypesToProps: {
                        whisper_received: "whisperReceived",
                        whisper_sent: "whisperSent"
                    }
                }]), Object(v.a)(be, {
                    name: "updateThread"
                })], t)
            }(c.Component),
            ke = ve,
            ye = Object(d.a)(null, s)(ke);
        n(481);
        n.d(t, "b", function() {
            return Se
        }), n.d(t, "a", function() {
            return _e
        });
        var Se, _e = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.resizeAnimationHandle = null, t.renderThread = function(e) {
                    return e ? c.createElement(ye, {
                        key: e.threadID,
                        currentUserID: t.props.currentUserID,
                        collapsed: e.collapsed,
                        hidden: e.hidden,
                        threadID: e.threadID,
                        onBlock: t.onBlock,
                        onCollapse: t.props.onCollapseThread,
                        emotes: t.props.emotes,
                        onClose: t.props.onCloseThread,
                        onExpand: t.props.onExpandThread,
                        onFocus: t.props.onFocusThread,
                        onUnfocus: t.props.onUnfocusThread,
                        focused: t.props.focusedThreadID === e.threadID,
                        reportThreadData: t.props.reportThreadData
                    }) : null
                }, t.onBlock = function(e) {
                    t.props.archiveThread(e), t.props.onBlockThread(e)
                }, t.setOpenThreadsRef = function(e) {
                    return Se = e
                }, t.handleContentResize = function() {
                    t.resizeAnimationHandle || (t.resizeAnimationHandle = requestAnimationFrame(function() {
                        t.props.onResizeContent(), t.resizeAnimationHandle = null
                    }))
                }, t
            }
            return l.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = this.props.openedThreads.map(function(t) {
                        return e.renderThread(t)
                    });
                return c.createElement(j.U, {
                    className: "whispers-open-threads",
                    display: j.H.Flex,
                    flexDirection: j.J.RowReverse,
                    alignItems: j.c.End,
                    position: j._2.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    refDelegate: this.setOpenThreadsRef
                }, t, c.createElement(u.a, {
                    onResize: this.handleContentResize
                }))
            }, t
        }(c.Component)
    },
    283: function(e, t, n) {
        "use strict";

        function i(e) {
            return r.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, p, m, h, f;
                return r.__generator(this, function(r) {
                    switch (r.label) {
                        case 0:
                            return (t = e.friendActivity) ? (n = Object(c.d)(e.friendLogin, t)) ? (i = "/" === n[0] ? n.slice(1) : n, t.type !== o.a.Streaming ? [3, 1] : (a = {
                                target_action: d.Streaming,
                                target_channel: e.friendLogin,
                                target_game: t.stream.game && t.stream.game.name || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7])) : (s.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2]) : (s.i.warn("[trackPresenceClick] Attempted to track a click with no activity."), [2]);
                        case 1:
                            if (t.type !== o.a.Watching) return [3, 6];
                            p = void 0, m = null, r.label = 2;
                        case 2:
                            return r.trys.push([2, 4, , 5]), [4, s.n.apollo.client.query({
                                query: u,
                                variables: {
                                    login: t.user.login
                                }
                            })];
                        case 3:
                            return m = r.sent(), [3, 5];
                        case 4:
                            return h = r.sent(), s.i.error(h, "[trackPresenceClick] Failed to query watched user data.", {
                                watchedUser: t.user.login
                            }), [3, 5];
                        case 5:
                            return f = m && m.data && m.data.user, f ? p = f.hosting.stream ? f.hosting.stream.game && f.hosting.stream.game.name || void 0 : f.stream && f.stream.game && f.stream.game.name || void 0 : s.i.error(new Error("GraphQL empty response"), "[trackPresenceClick] Query for watched user info returned no data.", {
                                watchedUser: t.user.login
                            }), a = {
                                target_action: d.Watching,
                                target_channel: t.user.login,
                                target_game: p,
                                target_hosted_channel: t.user.hosting && t.user.hosting.login || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7];
                        case 6:
                            return s.i.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2];
                        case 7:
                            return s.m.track(l.SpadeEventType.PresenceClick, a), [2]
                    }
                })
            })
        }
        n.d(t, "a", function() {
            return a
        }), t.b = i;
        var a, r = n(0),
            s = n(2),
            o = n(109),
            l = n(12),
            c = n(70),
            u = n(464);
        n.n(u);
        ! function(e) {
            e.FriendsListButton = "friends", e.WhisperHeaderButton = "convo_join", e.WhisperHeaderLink = "convo_link"
        }(a || (a = {}));
        var d;
        ! function(e) {
            e.Streaming = "streaming", e.Watching = "watching"
        }(d || (d = {}))
    },
    284: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(3),
            o = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onHistoryChange = function(e) {
                        n.setState({
                            currentPathname: e.pathname
                        })
                    }, n.shouldShow = function() {
                        return n.props.link && n.state.currentPathname !== n.props.link.pathname
                    }, n.state = {
                        currentPathname: location.pathname
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = r.n.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten()
                }, t.prototype.render = function() {
                    return this.props.link && this.shouldShow() ? a.createElement(s.u, {
                        linkTo: this.props.link,
                        onClick: this.props.onClick,
                        overlay: this.props.shouldHollowOverlay,
                        size: s.x.Small,
                        tabIndex: -1,
                        type: this.props.shouldHollowOverlay ? s.z.Hollow : s.z.Default
                    }, Object(r.d)("Join", "JoinButton")) : null
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return o
        })
    },
    285: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = e.split(/\s+/),
                n = [];
            return t.forEach(function(e, i) {
                var a = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w.\/@#%&()\-+=:?~]*)?)([^\w.\/@#%&()\-+=:?~]|\s|$)/g,
                    r = a.exec(e);
                if (r) {
                    var o = r.index,
                        l = !1,
                        c = !1,
                        u = r[1];
                    u && (o += 1, /\s/.test(u) || (l = !0)), 0 !== o && n.push({
                        type: s.Text,
                        content: (c ? " " : "") + e.slice(0, o) + (l ? " " : "")
                    }), c = !1;
                    var d = a.lastIndex,
                        p = r[3];
                    p && (d -= 1, /\s/.test(p) || (c = !0));
                    var m = e.slice(o, d);
                    if (m.indexOf("@") > -1 && (-1 === m.indexOf("/") || m.indexOf("@") < m.indexOf("/"))) n.push({
                        type: s.Link,
                        content: {
                            displayText: m,
                            url: "mailto:" + m,
                            shouldOpenInNewTab: !1
                        }
                    });
                    else {
                        var h = r[2],
                            f = (h ? "" : "https://") + e.slice(o, d);
                        n.push({
                            type: s.Link,
                            content: {
                                displayText: e.slice(o, d),
                                shouldOpenInNewTab: !0,
                                url: f
                            }
                        })
                    }
                    var g = e.slice(d),
                        b = "";
                    i < t.length - 1 && (b = " "), g && n.push({
                        type: s.Text,
                        content: (c ? " " : "") + g + b
                    })
                } else {
                    var v = n.length && n[n.length - 1],
                        b = "";
                    if (i < t.length - 1 && (b = " "), v && v.type === s.Text) v.content += e + b;
                    else {
                        var k = "";
                        i && (k = " "), n.push({
                            type: s.Text,
                            content: k + e + b
                        })
                    }
                }
            }), n
        }

        function a(e) {
            var t = i(e);
            return t.reduce(function(e, n, i) {
                if (n.type === s.Text) e.push(n.content);
                else if (n.type === s.Link) {
                    var a = t[i - 1] && t[i - 1].type === s.Link;
                    a && e.push(" "), e.push(o.createElement("a", {
                        key: i,
                        href: n.content.url,
                        target: "__blank"
                    }, n.content.displayText))
                }
                return e
            }, [])
        }

        function r(e, t, n) {
            var i = [],
                r = 0,
                s = Object(u.d)(e);
            if (t.forEach(function(t) {
                    var n = t.from,
                        l = t.to,
                        p = {
                            themed: !1,
                            sources: {
                                "1x": Object(u.e)("" + t.emoteID, 1),
                                "2x": Object(u.e)("" + t.emoteID, 2),
                                "4x": Object(u.e)("" + t.emoteID, 4)
                            }
                        };
                    if (n > r) {
                        var m = s ? s.slice(r, n).join("") : e.slice(r, n);
                        i.push(o.createElement("span", {
                            key: "str-" + r,
                            className: "thread-message__message--part"
                        }, a(m)))
                    }
                    var h = s ? s.slice(n, l + 1).join("") : e.slice(n, l + 1);
                    i.push(o.createElement(c.a, {
                        key: "emote-" + r,
                        tooltipDirection: d._32.Top,
                        className: "thread-message__message--emote",
                        srcSet: p,
                        srcKey: "1x",
                        alt: h
                    })), r = l + 1
                }), r < e.length) {
                var p = s ? s.slice(r, s.length).join("") : e.slice(r, e.length);
                i.push(o.createElement("span", {
                    key: "str-" + r,
                    className: "thread-message__message--part"
                }, a(p)))
            }
            if (n) {
                var m = Object(l.d)("edited", "ThreadMessage"),
                    h = Object(l.d)("{timestamp, date, full} {timestamp, time, long}", {
                        timestamp: new Date(n)
                    }, "ThreadMessage");
                i.push(o.createElement(d.P, {
                    key: "editedAt",
                    margin: {
                        left: 1
                    }
                }, o.createElement(d._21, {
                    type: d._26.Span,
                    className: "thread-message__message--edited",
                    title: h,
                    color: d.F.Alt2
                }, "(" + m + ")")))
            }
            return i
        }
        var s, o = n(1),
            l = n(2),
            c = n(388),
            u = n(130);
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Link = 1] = "Link"
        }(s || (s = {}));
        var d = n(3);
        t.a = r, n.d(t, "f", function() {
            return p
        }), n.d(t, "e", function() {
            return m
        }), n.d(t, "d", function() {
            return h
        }), n.d(t, "c", function() {
            return f
        }), n.d(t, "b", function() {
            return g
        });
        var p = function(e) {
                var t = r(e.content, e.emotes, e.editedAt);
                if (e.deletedAt) return null;
                var n = e.from && e.from.chatColor || "",
                    i = e.from && e.from.displayName || o.createElement(d._21, {
                        type: d._26.Span,
                        italic: !0
                    }, Object(l.d)("Unknown", "ThreadMessage"));
                return o.createElement(d.U, {
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, o.createElement("span", {
                    className: "thread-message__message--user-name",
                    style: {
                        color: n
                    }
                }, i), o.createElement("span", null, ": "), t)
            },
            m = function() {
                return o.createElement(d.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(l.d)("Please don't share passwords or personal information.", "whispers"))
            },
            h = function(e) {
                var t = new Date,
                    n = Object(l.d)("Today, {timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    i = Object(l.d)("{timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    a = e.timestamp.toDateString() === t.toDateString() ? n : i;
                return o.createElement(d.U, {
                    padding: {
                        y: 1
                    },
                    textAlign: d._22.Center
                }, "" + a)
            },
            f = function(e) {
                return o.createElement(d.U, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, o.createElement(d._21, {
                    type: d._26.Span,
                    color: d.F.Alt2
                }, e.content))
            },
            g = function() {
                return o.createElement(d.U, {
                    textAlign: d._22.Center,
                    padding: {
                        y: .5
                    }
                }, Object(l.d)("New Whispers", "whispers"))
            }
    },
    286: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                id: "" + e.id,
                start: e.start,
                end: e.end
            }
        }

        function a(e) {
            return {
                __typename: "WhisperMessageEdge",
                cursor: "" + e.data_object.id,
                node: {
                    __typename: "WhisperMessage",
                    id: e.data_object.message_id,
                    sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                    editedAt: null,
                    deletedAt: null,
                    content: {
                        __typename: "MessageBody",
                        content: e.data_object.body,
                        emotes: e.data_object.tags.emotes.map(function(e) {
                            return s(i(e))
                        })
                    },
                    from: {
                        __typename: "User",
                        id: "" + e.data_object.from_id
                    }
                }
            }
        }

        function r(e) {
            return e.map(function(e) {
                return s(i(e))
            })
        }

        function s(e) {
            return {
                from: e.start,
                to: e.end,
                emoteID: e.id,
                id: e.id + ";" + e.start + ";" + e.end,
                setID: "0",
                __typename: "EmbeddedEmote"
            }
        }
        t.c = a, t.b = r, t.a = s
    },
    30: function(e, t, n) {
        "use strict";

        function i(e) {
            return y.d.ImageUpload + "." + e
        }

        function a(e) {
            return y.d.UploadService + "." + e
        }

        function r(e) {
            return y.d.VideoPlaybackById + "." + e
        }

        function s(e) {
            return y.d.Presence + "." + e
        }

        function o(e, t) {
            return y.d.ModerationActionsByUserAndChannel + "." + e + "." + t
        }

        function l(e) {
            return y.d.Raid + "." + e
        }

        function c(e) {
            return y.d.Friendship + "." + e
        }

        function u(e) {
            return y.d.ChannelBitsPinEvents + "." + e
        }

        function d(e) {
            return y.d.UserSubscribeEvents + "." + e
        }

        function p(e) {
            return y.d.UserCrateEvents + "." + e
        }

        function m(e) {
            return y.d.UserCommerceEvents + "." + e
        }

        function h(e) {
            return y.d.Whispers + "." + e
        }

        function f(e) {
            return y.d.OnsiteNotifications + "." + e
        }

        function g(e) {
            return y.d.StreamChatRoom + "." + e
        }

        function b(e) {
            return k.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(S.d)(e.query, e.variables, function(n) {
                        return e.mutator(t, n)
                    }, function(n) {
                        return !!e.skipMessage && e.skipMessage(t, n)
                    })
                }
            })
        }

        function v(e) {
            return k.j.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && t.type !== e.type || Object(S.c)({
                        fragment: e.fragment,
                        id: e.id,
                        mutator: function(n) {
                            return e.mutator(t, n)
                        }
                    })
                }
            })
        }
        t.c = i, t.k = a, t.o = r, t.f = s, t.d = o, t.g = l, t.b = c, t.a = u, t.n = d, t.m = p, t.l = m, t.p = h, t.e = f, t.h = g, t.j = b, t.i = v;
        var k = n(2),
            y = n(37),
            S = n(21)
    },
    37: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "e", function() {
            return o
        });
        var i, a = {
                ChannelBitsEvents: "channel-bits-events-v1",
                ChannelBitsPinEvents: "channel-bit-events-public",
                ChannelSubscribeEvents: "channel-subscribe-events-v1",
                Friendship: "friendship",
                ImageUpload: "user-image-update",
                ModerationActionsByUserAndChannel: "chat_moderator_actions",
                OnsiteNotifications: "onsite-notifications",
                Presence: "presence",
                Raid: "raid",
                StreamChange: "stream-change-v1",
                StreamChatRoom: "stream-chat-room-v1",
                UploadService: "upload",
                UserCommerceEvents: "user-commerce-events",
                UserCrateEvents: "user-crate-events-v1",
                UserSubscribeEvents: "user-subscribe-events-v1",
                VideoPlayback: "video-playback",
                VideoPlaybackById: "video-playback-by-id",
                Whispers: "whispers"
            },
            r = {
                BitsPinEvent: "bits-pin-event",
                ChatNotification: "chat-notification",
                ImageUploadSuccess: "imageuploadsuccess",
                ModerationAction: "moderation_action",
                OnsiteNotificationCreate: "create-notification",
                OnsiteNotificationDelete: "delete-notification",
                OnsiteNotificationsRead: "read-notifications",
                OnsiteNotificationSummaryUpdate: "update-summary",
                OnsiteNotificationUpdate: "update-notification",
                Presence: "presence",
                PresenceSettings: "settings",
                RaidCancel: "raid_cancel",
                RaidUpdate: "raid_update",
                StreamChatRoomChatRichEmbed: "chat_rich_embed",
                StreamDown: "stream_down",
                StreamUp: "stream_up",
                UploadService: "upload",
                UserCrateEvent: "crate-event",
                ViewCount: "viewcount",
                Vodcast: "watchparty-vod",
                WhisperAllThreadsUpdate: "threads",
                WhisperDeleted: "whisper_deleted",
                WhisperEdited: "whisper_edited",
                WhisperReceived: "whisper_received",
                WhisperSent: "whisper_sent",
                WhisperThreadUpdate: "thread"
            },
            s = {
                Accepted: "accepted",
                Requested: "requested",
                Removed: "removed",
                SelfAccepted: "self_accepted",
                SelfRemoved: "self_removed",
                SelfRequested: "self_requested"
            };
        ! function(e) {
            e.Affiliate = "affiliate", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.Ban = "ban", e.Clear = "clear", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Untimeout = "untimeout"
        }(i || (i = {}));
        var o;
        ! function(e) {
            e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied"
        }(o || (o = {}));
        var l;
        ! function(e) {
            e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
        }(l || (l = {}));
        var c;
        ! function(e) {
            e.Private = "private", e.Public = "public"
        }(c || (c = {}))
    },
    372: function(e, t, n) {
        "use strict";

        function i(e, t) {
            var n = [],
                i = t.indexedActions,
                l = new RegExp("^(" + Object.keys(i).join("|") + ")(\\d+)$", "i"),
                c = e.split(/\s+/);
            return c.forEach(function(e, t) {
                var u = l.exec(e);
                if (u) {
                    var d = u[1].toLowerCase(),
                        p = +u[2],
                        m = i[d];
                    if (m || d !== r.e || (m = Object(s.b)()), m) {
                        var h = m.orderedTiers.find(function(e) {
                            return e.bits <= p
                        });
                        !h && p && (h = m.orderedTiers[0]), h && n.push({
                            type: o.a.Emote,
                            content: {
                                images: a(h),
                                alt: m.prefix,
                                cheerAmount: p,
                                cheerColor: h.color
                            }
                        })
                    }
                } else {
                    var f = n.length && n[n.length - 1],
                        g = "";
                    if (t < c.length - 1 && (g = " "), f && f.type === o.a.Text) f.content += e + g;
                    else {
                        var b = "";
                        t && (b = " "), n.push({
                            type: o.a.Text,
                            content: b + e + g
                        })
                    }
                }
            }), n
        }

        function a(e, t, n) {
            void 0 === n && (n = !0);
            var i = n ? "animated" : "static";
            return t ? {
                themed: !0,
                dark: (a = {}, a[t + "x"] = e.indexedImages.DARK[i].get(t), a),
                light: (r = {}, r[t + "x"] = e.indexedImages.LIGHT[i].get(t), r)
            } : {
                themed: !0,
                dark: {
                    "1x": e.indexedImages.DARK[i].get(1),
                    "1.5x": e.indexedImages.DARK[i].get(1.5),
                    "2x": e.indexedImages.DARK[i].get(2),
                    "3x": e.indexedImages.DARK[i].get(3),
                    "4x": e.indexedImages.DARK[i].get(4)
                },
                light: {
                    "1x": e.indexedImages.LIGHT[i].get(1),
                    "1.5x": e.indexedImages.LIGHT[i].get(1.5),
                    "2x": e.indexedImages.LIGHT[i].get(2),
                    "3x": e.indexedImages.LIGHT[i].get(3),
                    "4x": e.indexedImages.LIGHT[i].get(4)
                }
            };
            var a, r
        }
        n.d(t, "a", function() {
            return l
        }), t.c = i, t.b = a;
        var r = n(259),
            s = n(375),
            o = n(260),
            l = {
                indexedActions: {},
                orderedActions: []
            }
    },
    373: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                darkModeEnabled: Object(l.a)(e) === o.a.Dark
            }
        }
        var a = n(0),
            r = n(1),
            s = n(7),
            o = n(38),
            l = n(52),
            c = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = (e.defaultRes, e.sources),
                        n = (e.darkModeEnabled, a.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                        i = this.props.darkModeEnabled ? t.dark : t.light,
                        s = Object.keys(i);
                    delete n.dispatch;
                    var o = a.__assign({}, n, {
                        src: i[this.props.defaultRes || s[0]],
                        srcSet: s.map(function(e) {
                            return i[e] + " " + e
                        }).join(",")
                    });
                    return r.createElement("img", a.__assign({}, o, {
                        onLoad: this.props.onLoad
                    }))
                }, t
            }(r.Component),
            u = Object(s.a)(i)(c);
        n.d(t, "a", function() {
            return u
        })
    },
    374: function(e, t, n) {
        "use strict";

        function i(e) {
            return e ? "/directory/" + e : "/directory"
        }

        function a(e) {
            return "/directory/game/" + encodeURIComponent(e)
        }

        function r(e) {
            return "/communities/" + encodeURIComponent(e)
        }

        function s(e) {
            return "/settings/" + encodeURIComponent(e)
        }

        function o(e) {
            return "/events/" + encodeURIComponent(e)
        }
        t.b = i, t.d = a, t.a = r, t.e = s, t.c = o
    },
    375: function(e, t, n) {
        "use strict";

        function i() {
            if (!h) {
                var e = [],
                    t = {};
                Object.keys(d).forEach(function(n) {
                    var i = s(n, d[n]);
                    e.push(i), t[n.toLowerCase()] = i
                }), h = {
                    orderedActions: e,
                    indexedActions: t
                }
            }
            return h
        }

        function a() {
            return f || (f = r("Cheer")), f
        }

        function r(e) {
            return h ? h.indexedActions[e] : s(e, d[e])
        }

        function s(e, t) {
            var n = [c.a.Red, c.a.Blue, c.a.Green, c.a.Purple, c.a.Gray],
                i = new Map,
                a = n.map(function(t) {
                    var n = o(e, t);
                    return i.set(t, n), n
                });
            return {
                prefix: e,
                type: t,
                tiers: a,
                orderedTiers: a,
                indexedTiers: i
            }
        }

        function o(e, t) {
            for (var n = [], i = {}, a = 0, r = p; a < r.length; a++)
                for (var s = r[a], o = 0, c = m; o < c.length; o++) {
                    var d = c[o];
                    i[s] || (i[s] = {
                        animated: new Map,
                        static: new Map
                    });
                    var h = l(e, s, !0, t, d);
                    n.push(h), i[s].animated.set(d, h.url);
                    var f = l(e, s, !1, t, d);
                    n.push(f), i[s].static.set(d, f.url)
                }
            return {
                id: e + ";" + t,
                bits: t,
                color: u.d[t],
                images: n,
                indexedImages: i
            }
        }

        function l(e, t, n, i, a) {
            var r = n ? "gif" : "png";
            return {
                theme: t,
                isAnimated: n,
                dpiScale: a,
                url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + a + "." + r
            }
        }
        t.a = i, t.b = a;
        var c = n(270),
            u = n(259),
            d = {
                Cheer: u.b,
                Kreygasm: u.b,
                Kappa: u.b,
                Muxy: u.c,
                Streamlabs: u.c,
                SwiftRage: u.b,
                VoHiYo: u.b
            },
            p = ["LIGHT", "DARK"],
            m = [1, 1.5, 2, 3, 4],
            h = null,
            f = null
    },
    376: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        assignmentDetermined: !1,
                        assignment: ""
                    }, t.logger = r.n.logger.withCategory("component-experiment"), t.didUnmount = !1, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, r.n.experiments.getAssignment(this.props.name, this.props.channel ? {
                                        channel: this.props.channel
                                    } : {})];
                                case 1:
                                    return e = t.sent(), this.didUnmount ? [2] : (e && this.props.assignments[e] ? this.logger.debug("Displaying component for experiment", {
                                        name: this.props.name,
                                        assignment: e
                                    }) : this.logger.debug("Displaying fallback component for experiment", {
                                        name: this.props.name,
                                        assignment: e
                                    }), this.setState({
                                        assignment: e,
                                        assignmentDetermined: !0
                                    }), [2])
                            }
                        })
                    })
                }, t.prototype.componentWillUnmount = function() {
                    this.didUnmount = !0
                }, t.prototype.render = function() {
                    if (!this.state.assignmentDetermined) return this.props.loader();
                    if (this.props.assignments[this.state.assignment]) {
                        var e = this.props.assignments[this.state.assignment]();
                        return "string" == typeof e ? (window.location.replace(e), null) : e
                    }
                    return this.props.assignments.fallback()
                }, t
            }(a.Component),
            o = s;
        n.d(t, "a", function() {
            return o
        })
    },
    377: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object(l.bindActionCreators)({
                closeModal: u.c
            }, e)
        }
        var a = n(275),
            r = n(0),
            s = n(1),
            o = n(7),
            l = n(9),
            c = n(104),
            u = n(36),
            d = n(5),
            p = n(3),
            m = (n(497), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClose = function(e) {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(e)
                    }, t
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(p._17, {
                        className: "reporting-modal__container",
                        background: p.m.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, s.createElement(a.a, {
                        onClose: this.handleClose,
                        reportContext: this.props.reportContext,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    }), s.createElement(c.a, null))
                }, t
            }(s.Component)),
            h = Object(l.compose)(Object(d.c)("ReportUserModal"), Object(o.a)(null, i))(m);
        n.d(t, !1, function() {}), n.d(t, !1, function() {
            return a.a
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return h
        })
    },
    379: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return {
                type: T,
                channel: e,
                messages: t
            }
        }

        function a() {
            return {
                type: S
            }
        }

        function r() {
            return {
                type: P
            }
        }

        function s() {
            return {
                type: F
            }
        }

        function o() {
            return {
                type: _
            }
        }

        function l() {
            return {
                type: y
            }
        }

        function c() {
            return {
                type: I
            }
        }

        function u() {
            return {
                type: U
            }
        }

        function d() {
            return {
                type: E
            }
        }

        function p(e, t) {
            return {
                type: D,
                channelLogin: e,
                duration: t
            }
        }

        function m(e) {
            return {
                type: w,
                duration: e
            }
        }

        function h() {
            return {
                type: N
            }
        }

        function f() {
            return {
                type: O
            }
        }

        function g() {
            return {
                type: x
            }
        }

        function b() {
            return {
                type: M
            }
        }

        function v() {
            return {
                type: R
            }
        }

        function k(e) {
            return {
                type: C,
                emoteSets: e
            }
        }
        n.d(t, "a", function() {
            return y
        }), n.d(t, "b", function() {
            return S
        }), n.d(t, "c", function() {
            return _
        }), n.d(t, "d", function() {
            return C
        }), n.d(t, "h", function() {
            return E
        }), n.d(t, "e", function() {
            return N
        }), n.d(t, "f", function() {
            return w
        }), n.d(t, "g", function() {
            return D
        }), n.d(t, "i", function() {
            return T
        }), n.d(t, "k", function() {
            return I
        }), n.d(t, "j", function() {
            return U
        }), n.d(t, "m", function() {
            return O
        }), n.d(t, "l", function() {
            return x
        }), n.d(t, "o", function() {
            return M
        }), n.d(t, "n", function() {
            return R
        }), n.d(t, "q", function() {
            return P
        }), n.d(t, "p", function() {
            return F
        }), t.F = i, t.t = a, t.D = r, t.y = s, t.G = o, t.E = l, t.A = c, t.v = u, t.z = d, t.s = p, t.r = m, t.u = h, t.B = f, t.w = g, t.C = b, t.x = v, t.H = k;
        var y = "chat.CHAT_HIDDEN",
            S = "chat.CHAT_RESET",
            _ = "chat.CHAT_SHOWN",
            C = "chat.EMOTE_SETS_UPDATED",
            E = "chat.FOLLOWER_MODE_ENABLED",
            N = "chat.FOLLOWER_MODE_DISABLED",
            w = "chat.FOLLOWER_MODE_DURATION_CHANGED",
            D = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
            T = "chat.MESSAGES_UPDATED",
            I = "chat.MODICONS_ENABLED",
            U = "chat.MOD_ICONS_DISABLED",
            O = "chat.SLOW_MODE_ENABLED",
            x = "chat.SLOW_MODE_DISABLED",
            M = "chat.SUBS_ONLY_MODE_ENABLED",
            R = "chat.SUBS_ONLY_MODE_DISABLED",
            P = "chat.TIMESTAMPS_ENABLED",
            F = "chat.TIMESTAMPS_DISABLED"
    },
    380: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = (n(454), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = r.n.logger.withCategory("resize-detector"), t.onScroll = function() {
                        var e = t.container,
                            n = e.offsetWidth,
                            i = e.offsetHeight,
                            a = e.offsetLeft,
                            r = e.offsetTop;
                        t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && r === t.top && a === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, r, a)), t.reset()
                    }, t.setGrowDivRef = function(e) {
                        return t.growDiv = e
                    }, t.setGrowChildDivRef = function(e) {
                        return t.growChildDiv = e
                    }, t.setShrinkDivRef = function(e) {
                        return t.shrinkDiv = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("div", {
                        className: "resize-detector"
                    }, a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setGrowDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__grow",
                        ref: this.setGrowChildDivRef
                    })), a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setShrinkDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__shrink"
                    })))
                }, t.prototype.componentDidMount = function() {
                    if (!this.growDiv) return void this.logger.warn("growDiv is undefined!");
                    this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                    var e = this.container.style.position;
                    "relative" !== e && "absolute" !== e && "fixed" !== e && "static" === window.getComputedStyle(this.container).getPropertyValue("position") && (this.container.style.position = "relative"), this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                }, t.prototype.componentWillUnmount = function() {
                    this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                }, t.prototype.reset = function() {
                    var e = this,
                        t = e.growDiv,
                        n = e.shrinkDiv,
                        i = this.growChildDiv.style;
                    i.width = "100000px", i.height = "100000px", t.scrollLeft = 1e5, t.scrollTop = 1e5, n.scrollLeft = 1e5, n.scrollTop = 1e5
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return s
        })
    },
    382: function(e, t, n) {
        "use strict";

        function i(e) {
            return e.split("").map(function(e) {
                return e.charCodeAt(0) > 127
            }).reduce(function(e, t) {
                return e || t
            })
        }

        function a(e, t) {
            var n = e,
                a = !1;
            return n ? i(n) && (a = !0) : n = t, {
                userDisplayName: n,
                isIntl: a
            }
        }
        t.a = a
    },
    383: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded
            }
        }
        var a = n(7),
            r = n(0),
            s = n(1),
            o = n(64),
            l = n(2),
            c = n(3),
            u = function(e) {
                return s.createElement(c.v, {
                    icon: c._9.Emoticons,
                    ariaLabel: Object(l.d)("Emote picker", "EmotePickerButton"),
                    type: c.w.Secondary,
                    onClick: e.onClick,
                    "data-a-target": "emote-picker-button"
                })
            },
            d = n(271),
            p = n(5),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasInteracted: !1,
                        isEmotePickerMenuVisible: !1,
                        isEmotePickerButtonVisible: !1
                    }, t.onClickOut = function() {
                        t.setState({
                            isEmotePickerMenuVisible: !1
                        })
                    }, t.onClickEmote = function(e, n) {
                        t.props.onClickEmote && t.props.onClickEmote(e, n)
                    }, t.toggleEmotePicker = function() {
                        t.setState(function(e) {
                            return {
                                isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                            }
                        })
                    }, t.onEmotePickerDataLoaded = function(e) {
                        e && t.setState({
                            isEmotePickerButtonVisible: !0
                        })
                    }, t.onInteraction = function() {
                        return t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.isEmotePickerButtonVisible && (e = s.createElement(u, {
                        onClick: this.toggleEmotePicker
                    }));
                    var t = null;
                    this.hasInteractedOrPageload && (t = s.createElement(d.a, {
                        channelOwnerID: this.props.channelOwnerID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.toggleEmotePicker,
                        visible: this.state.isEmotePickerMenuVisible,
                        direction: this.props.direction
                    }));
                    var n = s.createElement(c.U, r.__assign({
                        className: "emote-picker-and-button"
                    }, this.layoutProps), e, t);
                    return this.props.shouldCloseOnClickOut ? s.createElement(o.a, {
                        onClickOut: this.onClickOut
                    }, n) : n
                }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                    get: function() {
                        return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "layoutProps", {
                    get: function() {
                        var e = {
                            attachTop: !!this.props.attachTop,
                            attachRight: !!this.props.attachRight,
                            attachBottom: !!this.props.attachBottom,
                            attachLeft: !!this.props.attachLeft,
                            padding: this.props.padding
                        };
                        return this.props.position && this.props.position in c._2 && (e.position = this.props.position), e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(s.Component),
            h = Object(p.c)("EmotePicker")(m),
            f = Object(a.a)(i)(h),
            g = n(267);
        n.d(t, "a", function() {
            return f
        }), n.d(t, "c", function() {
            return d.a
        }), n.d(t, !1, function() {
            return g.b
        }), n.d(t, !1, function() {
            return g.a
        }), n.d(t, "b", function() {
            return u
        })
    },
    384: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
        }(i || (i = {}))
    },
    385: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n(0),
            a = n(1),
            r = (n.n(a), n(18)),
            s = n(3),
            o = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showBalloon: !!t.props.openByDefault,
                        hasInteracted: !!t.props.openByDefault
                    }, t.toggleBalloonId = Object(r.a)(), t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                showBalloon: !e.showBalloon,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.handleGlobalClick = function(e) {
                        e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.setState({
                            showBalloon: !1
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.onMouseEnter = function() {
                        t.state.hasInteracted || t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = a.Children.toArray(this.props.children);
                    if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                    var t = e[0],
                        n = e[1];
                    if (n.type !== s.p) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                    var r = a.cloneElement(t, {
                            onClick: this.handleButtonClick
                        }),
                        o = null;
                    (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (o = a.cloneElement(n, {
                        show: this.state.showBalloon
                    }));
                    var l = r;
                    return this.props.tooltipProps && (l = a.createElement(s._30, i.__assign({}, this.props.tooltipProps), r)), a.createElement(s.U, {
                        "data-toggle-balloon-id": this.toggleBalloonId,
                        display: this.props.display,
                        position: s._2.Relative
                    }, a.createElement("div", {
                        style: {
                            display: "inherit"
                        },
                        onMouseEnter: this.onMouseEnter,
                        "data-test-selector": "toggle-balloon-wrapper__mouse-enter-detector"
                    }, l), o)
                }, t.prototype.toggleBalloon = function(e) {
                    void 0 === e && (e = !this.state.showBalloon), this.setState({
                        showBalloon: e,
                        hasInteracted: !0
                    })
                }, t
            }(a.Component)
    },
    388: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(4),
            r = n(1),
            s = n(373),
            o = n(3),
            l = (n(474), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onImageLoad = function() {
                        n.setState({
                            imageLoaded: !0
                        })
                    }, n.renderImage = function() {
                        var e = null,
                            t = a(n.props.className, {
                                hide: !n.state.imageLoaded
                            });
                        if (n.props.srcSet.themed) e = r.createElement(s.a, {
                            alt: n.props.alt,
                            className: t,
                            defaultRes: n.props.srcKey,
                            onLoad: n.onImageLoad,
                            sources: n.props.srcSet
                        });
                        else {
                            for (var i = [], o = 0, l = Object.keys(n.props.srcSet.sources); o < l.length; o++) {
                                var c = l[o];
                                i.push(n.props.srcSet.sources[c] + " " + c)
                            }
                            e = r.createElement("img", {
                                className: t,
                                onLoad: n.onImageLoad,
                                src: n.props.srcSet.sources[n.props.srcKey],
                                srcSet: i.join(","),
                                alt: n.props.alt
                            })
                        }
                        return e
                    }, n.renderPlaceholder = function() {
                        return n.state.imageLoaded ? null : r.createElement(o.P, {
                            display: o.H.InlineBlock
                        }, r.createElement(o._21, {
                            type: o._26.Span,
                            className: "chat-image__placeholder",
                            align: o._37.Top
                        }, r.createElement(o._1, {
                            height: 28,
                            width: 28
                        })))
                    }, n.state = {
                        imageLoaded: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = r.createElement(o._30, {
                        direction: this.props.tooltipDirection || o._32.Top,
                        label: this.props.alt,
                        display: o.H.Inline,
                        offsetY: "0.9rem",
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText);
                    return this.props.cheerText ? r.createElement(o._21, {
                        type: o._26.Span,
                        noWrap: !0
                    }, e) : e
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    439: function(e, t, n) {
        "use strict";
        var i, a = (n(455), n(0)),
            r = n(1),
            s = n(39),
            o = n(4),
            l = n(2),
            c = n(64),
            u = n(3),
            d = (n(456), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.messages = {
                        noMatches: Object(l.d)("No matches.", "AutocompleteBalloon")
                    }, t.logger = l.i.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                        return t.props.matches.map(function(e, n) {
                            var i = t.state.selectedMatch,
                                a = o("autocomplete-balloon__item", {
                                    "autocomplete-balloon__item--selected": i && i.replacement === e.replacement
                                });
                            return r.createElement(u.U, {
                                key: "autocomplete-match-" + n,
                                "data-test-selector": "autocomplete-balloon-matches"
                            }, r.createElement(u.P, {
                                display: u.H.Block,
                                fullWidth: !0
                            }, r.createElement("button", {
                                onMouseEnter: t.handleMatchMouseEnter,
                                className: a,
                                "data-a-target": e.replacement,
                                "data-click-index": n,
                                onClick: t.onMatchClick
                            }, r.createElement(u.U, {
                                padding: {
                                    x: .5
                                },
                                display: u.H.Flex,
                                alignItems: u.c.Center
                            }, e.element))))
                        })
                    }, t.handleMatchMouseEnter = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.setState({
                            selectedMatch: n
                        })
                    }, t.onMatchClick = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.props.onMatchSelect(n)
                    }, t.getMatchFromEvent = function(e) {
                        var n = t.props.matches,
                            i = e.currentTarget.getAttribute("data-click-index");
                        return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                    }, t.handleKeydown = function(e) {
                        var n = e.charCode || e.keyCode,
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                        switch (n) {
                            case s.a.Tab:
                            case s.a.Enter:
                                i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                break;
                            case s.a.Up:
                            case s.a.Down:
                                if (!t.state.selectedMatch || !t.props.matches.length) return;
                                var a = t.props.matches.indexOf(t.state.selectedMatch);
                                if (-1 === a) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                i();
                                var r = n === s.a.Up ? -1 : 1,
                                    o = t.getIndexWithinLength(a + r, t.props.matches.length),
                                    l = t.props.matches[o];
                                t.setState({
                                    selectedMatch: l
                                })
                        }
                    }, t.getIndexWithinLength = function(e, t) {
                        var n = e % t;
                        return n < 0 ? n + t : n
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("keydown", this.handleKeydown, !0), this.props.matches.length > 0 && this.setState({
                        selectedMatch: this.props.matches[0]
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("keydown", this.handleKeydown, !0)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this,
                        n = e.matches.reduce(function(e, n, i) {
                            return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                        }, 0);
                    this.setState({
                        selectedMatch: e.matches[n]
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = 0 === this.props.matches.length ? r.createElement(u.U, {
                        padding: {
                            x: .5
                        },
                        "data-test-selector": "autocomplete-balloon-no-matches"
                    }, r.createElement(u._21, {
                        type: u._26.Span,
                        color: u.F.Alt2
                    }, this.messages.noMatches)) : this.renderMatches(), r.createElement(u.U, {
                        position: u._2.Relative
                    }, r.createElement(c.a, {
                        onClickOut: this.props.onDismiss
                    }, r.createElement(u.p, {
                        direction: u.q.TopLeft,
                        "data-a-target": "autocomplete-balloon",
                        "data-test-selector": "autocomplete-balloon",
                        show: !0
                    }, r.createElement(u.U, {
                        className: "autocomplete-balloon",
                        overflow: u.Y.Auto,
                        padding: {
                            y: 1
                        }
                    }, r.createElement("div", {
                        className: "autocomplete-balloon__content"
                    }, e)))))
                }, t
            }(r.Component)),
            p = n(134),
            m = n(12),
            h = {
                Chat: "chat",
                Feed: "feed",
                Whisper: "whisper"
            },
            f = {
                Emote: ":",
                Hashtag: "#",
                Mention: "@",
                Tab: "Tab",
                Whisper: "/w"
            },
            g = function(e) {
                switch (e) {
                    case p.a.Emote:
                        return f.Emote;
                    case p.a.Mention:
                        return f.Mention;
                    default:
                        return void l.i.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                }
            },
            b = function(e) {
                var t = g(e.autocompleteType);
                if (t) {
                    var n = {
                        source: e.source,
                        start_character: t
                    };
                    l.m.track(m.SpadeEventType.ChatSuggestion, n)
                }
            },
            v = function(e) {
                var t = g(e.autocompleteType);
                if (t) {
                    var n = {
                        channel: e.channelLogin,
                        completed_text: e.completedText,
                        source: e.source,
                        start_character: t
                    };
                    l.m.track(m.SpadeEventType.ChatSuggestionComplete, n)
                }
            };
        ! function(e) {
            e.Input = "input", e.TextArea = "textarea"
        }(i || (i = {}));
        var k = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        autocompleteType: p.a.None,
                        matchedCursorPosition: 0,
                        matches: null,
                        value: ""
                    }, n.providers = [], n.onChange = function(e) {
                        n.setState({
                            value: e.target.value
                        }, function() {
                            n.getMatches()
                        }), n.props.onChange && n.props.onChange(e)
                    }, n.onKeyDown = function(e) {
                        var t = function() {
                                n.props.onKeyDown && n.props.onKeyDown(e)
                            },
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            },
                            a = e.charCode || e.keyCode;
                        if (a === s.a.Enter) return void t();
                        switch (a) {
                            case s.a.Tab:
                                n.state.matches || (i(), n.getMatches(!0));
                                break;
                            case s.a.Esc:
                                n.state.matches && (i(), n.resetDisplayState())
                        }
                        t()
                    }, n.setComponentRefDelegate = function(e) {
                        n.componentRef = e, n.props.componentRefDelegate && n.props.componentRefDelegate(e)
                    }, n.getMatches = function(e) {
                        var t = n.state.value;
                        if (0 === n.providers.length || 0 === t.length) return void n.resetDisplayState();
                        var i = n.getCurrentCursorPosition();
                        if (i > t.length);
                        else
                            for (; i < t.length && !/\s/.test(t.charAt(i));) i++;
                        var a = t.substring(0, i);
                        if (0 === a.length || /\s/.test(a.substring(a.length - 1))) return void n.resetDisplayState();
                        for (var r = a.split(/\s/), s = r[r.length - 1], o = 0, l = n.providers; o < l.length; o++) {
                            var c = l[o];
                            if (!e || c.canBeTriggeredByTab) {
                                var u = c.getMatches(s, e);
                                if (u) return void n.setState({
                                    autocompleteType: c.autocompleteType,
                                    matchedCursorPosition: i,
                                    matches: u
                                })
                            }
                        }
                        n.resetDisplayState()
                    }, n.resetDisplayState = function(e, t) {
                        var i = a.__assign({}, n.state, {
                            autocompleteType: p.a.None,
                            matches: null
                        }, e || {});
                        n.setState(i, t)
                    }, n.insertReplacement = function(e) {
                        var t = n.state.value,
                            i = n.state.matchedCursorPosition,
                            r = t.substring(0, i),
                            s = r.lastIndexOf(e.current);
                        if (-1 === s) r = r.concat(e.replacement + " "), i = r.length;
                        else {
                            var o = r.substring(0, s),
                                l = t.length > s + e.current.length ? t.substring(s + e.current.length) : "",
                                c = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                            r = "" + o + c + l, i = o.length + c.length
                        }
                        v(a.__assign({}, n.props.trackingParams || {}, {
                            autocompleteType: n.state.autocompleteType,
                            completedText: e.replacement,
                            source: n.props.suggestionSource
                        })), n.resetDisplayState({
                            value: r
                        }, function() {
                            n.setCursorPosition(i)
                        })
                    }, n.getCurrentCursorPosition = function() {
                        return n.componentRef.selectionStart
                    }, n.setCursorPosition = function(e) {
                        n.componentRef && (n.componentRef.setSelectionRange(e, e), n.componentRef.focus())
                    }, n.registerAutocompleteProvider = function(e) {
                        return n.providers.push(e),
                            function() {
                                var t = n.providers.indexOf(e);
                                n.providers.splice(t, 1)
                            }
                    }, t.refDelegate && t.refDelegate(n), n
                }
                return a.__extends(t, e), t.prototype.getChildContext = function() {
                    return {
                        registerAutocompleteProvider: this.registerAutocompleteProvider
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    !this.state.matches && t.matches && b({
                        autocompleteType: t.autocompleteType,
                        source: e.suggestionSource
                    })
                }, t.prototype.componentDidUpdate = function(e, t) {
                    t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                }, t.prototype.render = function() {
                    var e = a.__assign({}, this.props, {
                        onChange: this.onChange,
                        onKeyDown: this.onKeyDown,
                        refDelegate: this.setComponentRefDelegate,
                        value: this.state.value
                    });
                    return r.createElement(u.U, null, this.state.matches && r.createElement(d, {
                        matches: this.state.matches,
                        onMatchSelect: this.insertReplacement,
                        onDismiss: this.resetDisplayState
                    }), this.props.componentType === i.Input ? r.createElement(u.Q, a.__assign({}, e, {
                        type: e.type || u.R.Text
                    })) : r.createElement(u._23, a.__assign({}, e)), this.props.children)
                }, t.prototype.getValue = function() {
                    return this.state.value
                }, t.prototype.setValue = function(e) {
                    this.resetDisplayState({
                        value: e
                    })
                }, t.childContextTypes = {
                    registerAutocompleteProvider: r.PropTypes.func
                }, t
            }(r.Component),
            y = n(87),
            S = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = p.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                    }, t.getMatchedEmotes = function(e) {
                        var n = t.props.emotes;
                        if (!n || 0 === n.length) return null;
                        var i = e.substring(1),
                            a = n.reduce(function(e, n) {
                                var a = n.emotes.filter(function(e) {
                                    if (e.token) return t.doesEmoteMatchTerm(e, i)
                                });
                                return e.concat([a])
                            }, []).filter(function(e) {
                                return e.length > 0
                            }).reduce(function(e, t) {
                                return e.concat(t)
                            }, []);
                        return a = Object(y.d)(a), a = Object(y.e)(a, i), a.map(function(e) {
                            return {
                                current: ":" + i,
                                replacement: e.token,
                                element: t.renderEmoteSuggestion(e)
                            }
                        })
                    }, t.doesEmoteMatchTerm = function(e, t) {
                        var n = new RegExp("^" + t, "i");
                        if (e.token.match(n)) return !0;
                        var i = new RegExp("" + t.charAt(0).toUpperCase()),
                            a = new RegExp("^" + t.slice(1), "i"),
                            r = e.token.match(i);
                        return !!(r && r.index && e.token.slice(r.index + 1).match(a))
                    }, t.renderEmoteSuggestion = function(e) {
                        return [r.createElement(u.U, {
                            padding: {
                                right: .5
                            },
                            key: "emote-img-" + e.id
                        }, r.createElement("img", {
                            srcSet: e.srcSet
                        })), r.createElement(u._21, {
                            type: u._26.Span,
                            key: "emote-text-" + e.id
                        }, e.token)]
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: r.PropTypes.func
                }, t
            }(r.Component);
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return k
        }), n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {}), n.d(t, "d", function() {
            return S
        }), n.d(t, "c", function() {
            return h
        })
    },
    440: function(e, t, n) {
        "use strict";

        function i() {
            var e = this;
            return Object(o.a)(c, {
                props: function(t) {
                    return {
                        blockUserMutation: function(n, i, o, c) {
                            return r.__awaiter(e, void 0, void 0, function() {
                                var e;
                                return r.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            if (!t.mutate) return [3, 4];
                                            r.label = 1;
                                        case 1:
                                            return r.trys.push([1, 3, , 4]), [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n,
                                                        sourceContext: o,
                                                        reason: i
                                                    }
                                                },
                                                optimisticResponse: {
                                                    blockUser: {
                                                        __typename: "BlockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: a(c),
                                                        fragment: l
                                                    });
                                                    t && (t.blockedUsers.push({
                                                        id: n,
                                                        __typename: "User"
                                                    }), e.writeFragment({
                                                        id: a(c),
                                                        fragment: l,
                                                        data: t
                                                    }))
                                                }
                                            })];
                                        case 2:
                                            return r.sent(), [3, 4];
                                        case 3:
                                            return e = r.sent(), s.i.error(e, "Unable to block user"), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        }

        function a(e) {
            return e && s.n.apollo.client.dataIdFromObject ? s.n.apollo.client.dataIdFromObject(e) || "" : ""
        }
        t.a = i;
        var r = n(0),
            s = n(2),
            o = n(6),
            l = n(277),
            c = (n.n(l), n(463));
        n.n(c)
    },
    441: function(e, t, n) {
        "use strict";

        function i(e, t) {
            for (var n = [], i = /\S+/g, a = i.exec(e); a;) {
                var r = a[0],
                    s = t[r];
                if (s) {
                    var o = Object(d.d)(e.slice(0, a.index)),
                        l = o ? o.length : a.index;
                    n.push({
                        id: s.id,
                        start: l,
                        end: l + r.length - 1
                    })
                }
                a = i.exec(e)
            }
            return n
        }

        function a(e) {
            var t = e.currentUserID,
                n = e.emotes,
                a = e.message,
                d = e.recipientUserID;
            if ("" === t || "" === a || "" === d) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
            var f = Object(c.b)(),
                g = s.__assign({
                    mutation: p
                }, Object(l.a)({
                    message: a,
                    nonce: f,
                    recipientUserID: d
                })),
                b = Object(m.a)(t, d),
                v = r(b);
            if (v) {
                var k = i(a, n).map(u.a);
                g.optimisticResponse = {
                    sendWhisper: {
                        __typename: "SendWhisperPayload",
                        message: {
                            content: {
                                content: a,
                                emotes: k,
                                __typename: "MessageBody"
                            },
                            from: {
                                id: t,
                                __typename: "User"
                            },
                            id: f,
                            sentAt: (new Date).toISOString(),
                            deletedAt: null,
                            editedAt: null,
                            __typename: "WhisperMessage"
                        }
                    }
                };
                var y = "" + (parseInt(v.messages.edges[0].cursor, 10) + 1) || "";
                g.update = function(e, t) {
                    if (t.data) {
                        var n = r(b);
                        if (n) {
                            if (n.messages.edges.findIndex(function(e) {
                                    return e.cursor === y
                                }) < 0) {
                                var i = {
                                    cursor: y,
                                    node: t.data.sendWhisper.message,
                                    __typename: "WhisperMessageEdge"
                                };
                                n.messages.edges.unshift(i)
                            }
                            n.userLastMessageRead.sentAt = t.data.sendWhisper.message.sentAt, e.writeQuery({
                                query: h,
                                data: {
                                    whisperThread: n
                                }
                            })
                        }
                    }
                }
            }
            return o.n.apollo.client.mutate(g)
        }

        function r(e) {
            try {
                return o.n.apollo.client.readQuery({
                    query: h,
                    variables: {
                        id: e
                    }
                }).whisperThread
            } catch (e) {
                return null
            }
        }
        var s = n(0),
            o = n(2),
            l = n(21),
            c = n(18),
            u = n(286),
            d = n(130),
            p = n(475),
            m = n(55),
            h = n(476);
        t.a = a
    },
    442: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = n(2),
            s = n(6),
            o = n(5),
            l = n(3),
            c = n(488),
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        canGift: !1
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    e.data && e.data.user && e.data.user.self ? this.setState({
                        canGift: e.data.user.self.canGift
                    }) : this.setState({
                        canGift: !1
                    })
                }, t.prototype.render = function() {
                    return a.createElement(l.u, {
                        targetBlank: !0,
                        disabled: !this.state.canGift,
                        onClick: this.props.onClick,
                        linkTo: this.props.checkoutURL,
                        "data-test-selector": "gift-subscribe-button"
                    }, Object(r.d)("Gift Subscription", "GiftSubscribeButton"))
                }, t = i.__decorate([Object(o.c)("GiftSubscribeButton"), Object(s.a)(c, {
                    options: function(e) {
                        return {
                            variables: {
                                recipientLogin: e.giftRecipient,
                                subProductId: e.subProductId
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.giftRecipient || !e.subProductId
                    }
                })], t)
            }(a.Component),
            d = u;
        n.d(t, !1, function() {
            return "gift-subscribe-button"
        }), n.d(t, "a", function() {
            return d
        })
    },
    446: function(e, t, n) {
        e.exports = n.p + "assets/bg_glitch_pattern-34ca2e369aad1ed33b57f3d2d59c70eb.png"
    },
    447: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object(r.bindActionCreators)({
                openThread: function(e) {
                    return Object(s.l)({
                        collapsed: !1,
                        threadID: e,
                        ignoreCollapseIfOpen: !0
                    }, Object(o.a)())
                }
            }, e)
        }
        var a = n(7),
            r = n(9),
            s = n(57),
            o = n(71),
            l = n(0),
            c = n(1),
            u = n(2),
            d = n(3),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        t.props.onClick && t.props.onClick(), t.props.openThread(t.props.threadID)
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = Object(u.d)("Whisper", "WhisperButton");
                    return c.createElement(d.u, {
                        onClick: this.handleClick
                    }, e)
                }, t
            }(c.Component),
            m = p,
            h = Object(a.a)(null, i)(m);
        n.d(t, "a", function() {
            return h
        })
    },
    448: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                isLoggedIn: Object(c.d)(e)
            }
        }

        function a(e) {
            return Object(s.bindActionCreators)({
                onLoginClick: function() {
                    return l.f(o.a.FriendAdd)
                }
            }, e)
        }
        var r = n(7),
            s = n(9),
            o = n(48),
            l = n(32),
            c = n(17),
            u = n(0),
            d = n(1),
            p = n(2),
            m = n(6),
            h = n(21),
            f = n(5),
            g = n(3),
            b = n(482),
            v = n(483),
            k = n(484),
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hovered: !1
                    }, t.onClickAddFriend = function() {
                        t.props.onCreateFriendRequest(Object(h.a)({
                            targetID: t.props.channelID
                        }))
                    }, t.onClickUnfriend = function() {
                        t.props.onUnfriendUser(Object(h.a)({
                            targetID: t.props.channelID
                        }))
                    }, t.onToggleHover = function() {
                        t.setState(function(e) {
                            return {
                                hovered: !e.hovered
                            }
                        })
                    }, t
                }
                return u.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = Object(p.d)("Add Friend", "UserCard");
                    if (!this.props.isLoggedIn) return d.createElement(g.u, {
                        ariaLabel: e,
                        onClick: this.props.onLoginClick
                    }, e);
                    if (this.props.data.loading || this.props.data.error) return d.createElement(g._1, {
                        height: 30,
                        width: 60
                    });
                    if (!this.isFriend()) return d.createElement(g.u, {
                        onClick: this.onClickAddFriend
                    }, e);
                    var t = Object(p.d)("Unfriend", "UserCard"),
                        n = Object(p.d)("Friends", "UserCard"),
                        i = this.state.hovered ? t : n;
                    return d.createElement("div", {
                        onMouseEnter: this.onToggleHover,
                        onMouseLeave: this.onToggleHover
                    }, d.createElement(g.P, {
                        flexDirection: g.J.Row,
                        display: g.H.Flex,
                        alignItems: g.c.Center
                    }, d.createElement("button", {
                        "aria-label": t,
                        className: "user-card__status-btn",
                        onClick: this.onClickUnfriend,
                        "data-a-target": "unfriend-button"
                    }, d.createElement(g.U, {
                        display: g.H.Flex,
                        className: "user-card__status-btn--text",
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, d.createElement(g._21, null, i)))))
                }, t.prototype.isFriend = function() {
                    var e = this;
                    return !this.props.data.loading && !this.props.data.error && !!this.props.data.currentUser.friends.edges.find(function(t) {
                        return t.node.id === e.props.channelID
                    })
                }, t = u.__decorate([Object(f.c)("FriendButton"), Object(m.a)(v), Object(m.a)(k, {
                    name: "onUnfriendUser"
                }), Object(m.a)(b, {
                    name: "onCreateFriendRequest"
                })], t)
            }(d.Component),
            S = y,
            _ = Object(r.a)(i, a)(S);
        n.d(t, "a", function() {
            return _
        })
    },
    453: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "currentUser"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "availability"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "activity"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Watching"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "user"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Streaming"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Playing"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 323
            }
        };
        n.loc.source = {
            body: "fragment currentUser on User {\n  id\n  login\n  displayName\n  availability\n  activity {\n    type\n    ... on Watching {\n      user {\n        displayName\n      }\n    }\n    ... on Streaming {\n      stream {\n        game {\n          name\n        }\n      }\n    }\n    ... on Playing {\n      game {\n        name\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    454: function(e, t) {},
    455: function(e, t) {},
    456: function(e, t) {},
    457: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_SubEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withVideo"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withVideo"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 339
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_SubEvent_User($channelID: ID!, $withVideo: Boolean!, $videoID: ID) {\n  user(id: $channelID) {\n    id\n    self {\n      canPrimeSubscribe\n      subscriptionBenefit {\n        id\n        tier\n        purchasedWithPrime\n      }\n    }\n  }\n  video(id: $videoID) @include(if: $withVideo) {\n    id\n    broadcastType\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    458: function(e, t) {},
    459: function(e, t) {},
    460: function(e, t) {},
    461: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserEmotes"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 144
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserEmotes {\n  user {\n    id\n    emoteSets {\n      id\n      emotes {\n        id\n        token\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    462: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelOwnerID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelOwnerID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 265
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\n  user(id: $channelOwnerID) {\n    id\n    login\n    displayName\n    subscriptionProducts {\n      id\n      url\n      emotes {\n        id\n        token\n      }\n      emoteSetID\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    463: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 127
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_BlockUser($input: BlockUserInput!) {\n  blockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    464: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Presence_WatchingClick_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 279
            }
        };
        n.loc.source = {
            body: "query Presence_WatchingClick_User($login: String!) {\n  user(login: $login) {\n    id\n    stream {\n      id\n      game {\n        id\n        name\n      }\n    }\n    hosting {\n      id\n      stream {\n        id\n        game {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    465: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Tracking_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 107
            }
        };
        n.loc.source = {
            body: "query Whispers_Tracking_CurrentUser {\n  currentUser {\n    id\n    hasTurbo\n    availability\n    login\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    466: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation Thread_BlockUser($input: BlockUserInput!) {\n  blockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    467: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 137
            }
        };
        n.loc.source = {
            body: "mutation Thread_ReportUser($input: ReportWhisperThreadInput!) {\n  reportWhisperThread(input: $input) {\n    thread {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    468: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_SetMuteThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 154
            }
        };
        n.loc.source = {
            body: "mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      isMuted\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    469: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_UnblockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnblockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unblockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 126
            }
        };
        n.loc.source = {
            body: "mutation Thread_UnblockUser($input: UnblockUserInput!) {\n  unblockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    47: function(e, t, n) {
        "use strict";
        var i = n(385);
        n.d(t, "a", function() {
            return i.a
        })
    },
    470: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 144
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_ReportUser($input: ReportWhisperThreadInput!) {\n  reportWhisperThread(input: $input) {\n    thread {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    471: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_SetThreadSpamStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "spamInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "lastMarkedNotSpamAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "likelihood"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 225
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      spamInfo {\n        lastMarkedNotSpamAt\n        likelihood\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    472: function(e, t) {},
    473: function(e, t) {},
    474: function(e, t) {},
    475: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SendWhisper"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendWhisperInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sendWhisper"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "content"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emotes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "to"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "from"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "editedAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 334
            }
        };
        n.loc.source = {
            body: "mutation SendWhisper($input: SendWhisperInput!) {\n  sendWhisper(input: $input) {\n    message {\n      id\n      content {\n        content\n        emotes {\n          id\n          emoteID\n          setID\n          from\n          to\n        }\n      }\n      from {\n        id\n      }\n      sentAt\n      editedAt\n      deletedAt\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    476: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 515
            }
        };
        n.loc.source = {
            body: "query WhisperThread($id: ID!) {\n  whisperThread(id: $id) {\n    id\n    userLastMessageRead {\n      id\n      sentAt\n    }\n    messages(first: 20) {\n      edges {\n        cursor\n        node {\n          id\n          content {\n            content\n            emotes {\n              id\n              emoteID\n              setID\n              from\n              to\n            }\n          }\n          from {\n            id\n          }\n          sentAt\n          editedAt\n          deletedAt\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    477: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_Participants"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }, {
                                                                                kind: "Field",
                                                                                alias: null,
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: [],
                                                                                selectionSet: null
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "imageURL"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 1008
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_Participants($targetUserID: ID) {\n  currentUser {\n    id\n    blockedUsers {\n      id\n    }\n    chatColor\n    displayName\n    profileImageURL(width: 70)\n    login\n    friends {\n      edges {\n        node {\n          id\n        }\n        availability\n        activity {\n          type\n          ... on Playing {\n            game {\n              id\n              name\n            }\n          }\n          ... on Streaming {\n            stream {\n              id\n              game {\n                id\n                name\n              }\n            }\n          }\n          ... on Watching {\n            user {\n              id\n              displayName\n              login\n              hosting {\n                id\n                displayName\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  user(id: $targetUserID) {\n    id\n    displayBadges {\n      id\n      title\n      imageURL\n    }\n    chatColor\n    displayName\n    profileImageURL(width: 70)\n    login\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    478: function(e, t) {},
    479: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "participants"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "spamInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "lastMarkedNotSpamAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "likelihood"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isMuted"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isArchived"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 792
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_WhisperThread($id: ID!, $cursor: Cursor) {\n  whisperThread(id: $id) {\n    id\n    userLastMessageRead {\n      id\n      sentAt\n    }\n    participants {\n      id\n      chatColor\n      displayName\n      profileImageURL(width: 70)\n      login\n    }\n    spamInfo {\n      lastMarkedNotSpamAt\n      likelihood\n    }\n    isMuted\n    isArchived\n    messages(first: 20, after: $cursor) {\n      edges {\n        cursor\n        node {\n          id\n          content {\n            content\n            emotes {\n              id\n              emoteID\n              setID\n              from\n              to\n            }\n          }\n          from {\n            id\n          }\n          sentAt\n          editedAt\n          deletedAt\n        }\n      }\n    }\n    unreadMessagesCount\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    480: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_UpdateThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "unreadMessagesCount"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 165
            }
        };
        n.loc.source = {
            body: "mutation Thread_UpdateThread($input: UpdateWhisperThreadInput!) {\n  updateWhisperThread(input: $input) {\n    thread {\n      id\n      unreadMessagesCount\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    481: function(e, t) {},
    482: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 150
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_CreateFriendRequest($input: CreateFriendRequestInput!) {\n  createFriendRequest(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    483: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendButton"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 130
            }
        };
        n.loc.source = {
            body: "query FriendButton {\n  currentUser {\n    id\n    friends {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    484: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_UnfriendUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfriendUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unfriendUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation FriendButton_UnfriendUser($input: UnfriendUserInput!) {\n  unfriendUser(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    485: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportReasons"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "content"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentType"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportReasons"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 118
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\n  reportReasons(content: $content) {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    486: function(e, t) {},
    487: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_UserCommunities"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "directories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "directoryType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 201
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_UserCommunities($userId: ID!) {\n  user(id: $userId) {\n    id\n    directories {\n      nodes {\n        id\n        name\n        displayName\n        directoryType\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    488: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GiftSubscribeButton_Gift_Eligibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recipientLogin"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "subProductId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "recipientLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canGift"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "product"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "subProductId"
                                                }
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 195
            }
        };
        n.loc.source = {
            body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String, $subProductId: String!) {\n  user(login: $recipientLogin) {\n    id\n    self {\n      canGift(product: $subProductId)\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    489: function(e, t) {},
    49: function(e, t, n) {
        "use strict";

        function i(e) {
            return r.test(e)
        }
        n.d(t, "a", function() {
            return s
        });
        var a = n(1),
            r = (n.n(a), /^[\x00-\x7F]*$/),
            s = function(e, t, n) {
                return void 0 === n && (n = !1), t && e && !i(t) ? n ? t + " (" + e + ")" : a.createElement("span", null, t, " ", a.createElement("span", {
                    className: "intl-login"
                }, "(" + e + ")")) : t || (e || "")
            }
    },
    490: function(e, t) {},
    491: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_Promotion"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isEligibleForDiscount"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 246
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_Promotion($login: String!) {\n  user(login: $login) {\n    id\n    subscriptionProducts {\n      id\n      self {\n\t\t\t\tisEligibleForDiscount\n\t\t\t\tnewPrice\n\t\t\t\toldPrice\n\t\t\t\tdiscountType\n\t\t\t\tdiscountType\n\t\t\t}\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    492: function(e, t) {},
    493: function(e, t) {},
    494: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChannelPage_SubscribeButton_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "endsAt"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "paidUpgrade"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "price"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "startsAt"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "gift"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isGift"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "gifter"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "displayName"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "hasPrime"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "requestInfo"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "countryCode"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 673
            }
        };
        n.loc.source = {
            body: "query ChannelPage_SubscribeButton_User($login: String!) {\n  user(login: $login) {\n    id\n    login\n    displayName\n    subscriptionProducts {\n      id\n      price\n      url\n      emoteSetID\n      displayName\n      name\n      emotes {\n        id\n      }\n    }\n    self {\n      canPrimeSubscribe\n      subscriptionBenefit {\n        id\n        purchasedWithPrime\n        tier\n        endsAt\n        paidUpgrade {\n          price\n          startsAt\n        }\n        gift {\n          isGift\n          gifter {\n            id\n            displayName\n          }\n        }\n      }\n    }\n  }\n  currentUser {\n    id\n    login\n    hasPrime\n  }\n  requestInfo {\n    countryCode\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    495: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUserCommunity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportUserInCommunityInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportUserInCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\n  reportUserInCommunity(input: $input) {\n    user {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    496: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "reportContent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "contentID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\n  reportContent(input: $input) {\n    contentID\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    497: function(e, t) {},
    50: function(e, t, n) {
        "use strict";

        function i(e) {
            return a.__awaiter(this, void 0, void 0, function() {
                var t, n, i, c, u, d, p, m, h, f, g, b, v;
                return a.__generator(this, function(a) {
                    switch (a.label) {
                        case 0:
                            t = r.m.getVideoPlayerTrackingData().vodID, n = !!t, i = {
                                channelID: e.channelID,
                                withVideo: !1
                            }, n && (i.withVideo = !0, i.videoID = t), c = null, a.label = 1;
                        case 1:
                            return a.trys.push([1, 3, , 4]), [4, r.n.apollo.client.query({
                                query: l,
                                variables: i
                            })];
                        case 2:
                            return c = a.sent(), [3, 4];
                        case 3:
                            return u = a.sent(), r.i.error(u, "Failed to make query for channel info in FollowEvent reporting.", {
                                channelID: e.channelID
                            }), [3, 4];
                        case 4:
                            return d = c && c.data && c.data.user || null, c && !d && r.i.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                channelID: e.channelID
                            }), p = null, c && n && (m = c && c.data && c.data.video, m ? p = Object(o.a)(m.broadcastType) : r.i.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                currentVideoID: t
                            })), h = d && d.self, f = h ? !!h.subscriptionBenefit : null, g = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, b = h ? h.canPrimeSubscribe : null, v = {
                                action: e.action,
                                can_subscribe: b,
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                checkout_button_tier: e.checkoutButtonTier,
                                has_sub_credit: e.hasSubCredit,
                                host_channel: e.hostChannelLogin,
                                host_channel_id: e.hostChannelID,
                                is_menu_open: e.isMenuOpen,
                                is_subscribed: f,
                                is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                sub_location: e.sub_location,
                                sub_recipient: e.giftRecipient,
                                modal: e.modal,
                                modal_level: e.modalLevel || "",
                                show_prime_content: e.showPrimeContent,
                                show_resub: d ? b && g : null,
                                vod_id: t,
                                vod_type: p,
                                viewport_height: window.innerHeight,
                                viewport_width: window.innerWidth
                            }, r.m.track(s.SpadeEventType.Subscription, v), [2]
                    }
                })
            })
        }
        n.d(t, "a", function() {
            return c
        }), t.b = i;
        var a = n(0),
            r = n(2),
            s = n(12),
            o = n(137),
            l = n(457),
            c = (n.n(l), {
                BuyGiftSub: "buy_gift_sub",
                ClickCheckout: "click_checkout_button",
                ClickMoreSubOptions: "more_options_click",
                ClickGiftSubOptions: "gift_options_click",
                ClickPrimeFAQ: "click_prime_faq",
                ClickSignupForPrime: "click_signup_for_prime",
                ClickBack: "back_top_level",
                CloseSubMenu: "close_subscribe_menu",
                GiftASub: "gift_a_sub",
                OpenSubMenu: "open_subscribe_menu",
                SubWithPrime: "samus_spend_credit"
            })
    },
    503: function(e, t) {},
    51: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Away: "AWAY",
            Busy: "BUSY",
            Idle: "IDLE",
            Invisible: "INVISIBLE",
            Offline: "OFFLINE",
            Online: "ONLINE"
        }
    },
    55: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
        }

        function a(e, t) {
            return e.split("_").find(function(e) {
                return e !== t
            }) || null
        }
        t.a = i, t.b = a
    },
    57: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return {
                type: u,
                data: e,
                contentWidth: t
            }
        }

        function a(e, t) {
            return {
                type: d,
                threadID: e,
                contentWidth: t
            }
        }

        function r(e, t) {
            return {
                type: p,
                threadID: e,
                contentWidth: t
            }
        }

        function s(e, t) {
            return {
                type: m,
                threadID: e,
                contentWidth: t
            }
        }

        function o(e) {
            return {
                type: g,
                contentWidth: e
            }
        }

        function l(e, t) {
            return {
                type: h,
                threadID: e,
                contentWidth: t
            }
        }

        function c(e, t) {
            return {
                type: f,
                threadID: e,
                contentWidth: t
            }
        }
        n.d(t, "f", function() {
            return u
        }), n.d(t, "b", function() {
            return d
        }), n.d(t, "c", function() {
            return p
        }), n.d(t, "d", function() {
            return m
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "g", function() {
            return f
        }), n.d(t, "a", function() {
            return g
        }), t.l = i, t.h = a, t.i = r, t.j = s, t.m = o, t.k = l, t.n = c;
        var u = "whispers.THREAD_OPENED",
            d = "whispers.THREAD_CLOSED",
            p = "whispers.THREAD_COLLAPSED",
            m = "whispers.THREAD_EXPANDED",
            h = "whispers.THREAD_FOCUSED",
            f = "whispers.THREAD_UNFOCUSED",
            g = "whispers.CONTENT_RESIZED"
    },
    64: function(e, t, n) {
        "use strict";
        var i = n(0),
            a = n(1),
            r = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        t.container = e
                    }, t.handleGlobalClick = function(e) {
                        var n = e.target;
                        t.isParentOf(n) || t.props.onClickOut(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = (e.onClickOut, i.__rest(e, ["onClickOut"]));
                    return a.createElement("div", i.__assign({}, t, {
                        ref: this.setContainerRef
                    }), this.props.children)
                }, t.prototype.isParentOf = function(e) {
                    for (var t = e; t;) {
                        if (t === this.container) return !0;
                        t = t.parentElement
                    }
                    return !1
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return r
        })
    },
    67: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Games = "game", e.Videos = "vod", e.VideosNewest = "vod_by_created_at", e.Users = "user", e.Channels = "live_channel", e.Communities = "community"
        }(i || (i = {}))
    },
    70: function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (!e) return null;
            switch (e.type) {
                case u.a.Playing:
                    return e.game && e.game.name ? Object(c.d)("playing {game}", {
                        game: e.game.name
                    }, "PresenceActivity") : Object(c.d)("playing", "PresenceActivity");
                case u.a.Watching:
                    if (!t && e.user.hosting && e.user.hosting.displayName) return Object(c.d)("watching {user} with the {community} community", {
                        user: e.user.hosting.displayName,
                        community: e.user.displayName
                    }, "PresenceActivity");
                    if (!t && e.user.stream && e.user.stream.game && e.user.stream.game.name) return Object(c.d)("watching {user} stream {game}", {
                        user: e.user.displayName,
                        game: e.user.stream.game.name
                    }, "PresenceActivity");
                    var n = e.user.hosting && e.user.hosting.displayName ? e.user.hosting.displayName : e.user.displayName;
                    return Object(c.d)("watching {user}", {
                        user: n
                    }, "PresenceActivity");
                case u.a.Streaming:
                    return e.stream && e.stream.game && e.stream.game.name ? Object(c.d)("streaming {game}", {
                        game: e.stream.game.name
                    }, "PresenceActivity") : Object(c.d)("streaming", "PresenceActivity");
                default:
                    return null
            }
        }

        function a(e, t) {
            if (!t) return null;
            switch (t.type) {
                case u.a.Streaming:
                    return "/" + e;
                case u.a.Watching:
                    return "/" + t.user.login;
                default:
                    return null
            }
        }

        function r(e) {
            var t = Object(c.d)("Online", "PresenceAvailability");
            switch (e) {
                case d.a.Away:
                    return Object(c.d)("Away", "PresenceAvailability");
                case d.a.Busy:
                    return Object(c.d)("Busy", "PresenceAvailability");
                case d.a.Idle:
                    return Object(c.d)("Idle", "PresenceAvailability");
                case d.a.Offline:
                    return Object(c.d)("Offline", "PresenceAvailability");
                case d.a.Invisible:
                    return Object(c.d)("Invisible", "PresenceAvailability");
                case d.a.Online:
                default:
                    return t
            }
        }

        function s(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.options = e(t), i
                    }
                    return f.__extends(i, n), i.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, i.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, i.prototype.render = function() {
                        return l.createElement(t, f.__assign({}, this.props))
                    }, i.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(g.i)({
                            fragment: e.fragment,
                            id: e.id,
                            topic: e.topic,
                            type: e.type,
                            mutator: e.mutator
                        })
                    }, i.prototype.unsubscribe = function() {
                        this.unsubscriber && this.unsubscriber()
                    }, i
                }(l.Component)
            }
        }

        function o(e) {
            return function(t) {
                return s(function(t) {
                    var n = e(t);
                    return {
                        id: "User:" + n.id,
                        skip: n.skip,
                        fragment: k,
                        topic: Object(g.f)(n.currentUserID),
                        type: b.c.Presence,
                        mutator: function(e, t) {
                            if (!t) return null;
                            var i = n.id;
                            if (e.data.user_id !== +i) return t;
                            var a = "$User:" + i + ".activity";
                            return t.availability = e.data.availability.toUpperCase(), t.activity = Object(v.a)(e.data.activity, a), t
                        }
                    }
                })(t)
            }
        }
        var l = n(1),
            c = n(2),
            u = n(109),
            d = n(51),
            p = function(e) {
                return l.createElement("span", {
                    "data-a-target": "presence-text"
                }, i(e.activity, e.condensed) || r(e.availability))
            },
            m = n(3),
            h = function(e) {
                var t = m._4.Online;
                switch (e.availability) {
                    case d.a.Idle:
                    case d.a.Away:
                        t = m._4.Away;
                        break;
                    case d.a.Busy:
                        t = m._4.Busy;
                        break;
                    case d.a.Invisible:
                        t = m._4.Invisible;
                        break;
                    case d.a.Offline:
                        t = m._4.Offline;
                        break;
                    case d.a.Online:
                        t = m._4.Online;
                        break;
                    default:
                        t = m._4.Online
                }
                return l.createElement(m._3, {
                    status: t
                })
            },
            f = n(0),
            g = n(30),
            b = n(37),
            v = n(281),
            k = n(453);
        n.d(t, "b", function() {
            return p
        }), n.d(t, "a", function() {
            return h
        }), n.d(t, !1, function() {
            return o
        }), n.d(t, "c", function() {
            return i
        }), n.d(t, "d", function() {
            return a
        }), n.d(t, !1, function() {
            return r
        })
    },
    71: function(e, t, n) {
        "use strict";

        function i() {
            if (a.b) {
                return +window.getComputedStyle(a.b).getPropertyValue("width").replace("px", "")
            }
            return 0
        }
        t.a = i;
        var a = n(282)
    },
    805: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention", e[e.Ban = 3] = "Ban", e[e.Timeout = 4] = "Timeout", e[e.AutoModRejectedPrompt = 5] = "AutoModRejectedPrompt", e[e.AutoModMessageRejected = 6] = "AutoModMessageRejected", e[e.AutoModMessageAllowed = 7] = "AutoModMessageAllowed", e[e.AutoModMessageDenied = 8] = "AutoModMessageDenied", e[e.Connected = 9] = "Connected", e[e.Disconnected = 10] = "Disconnected", e[e.Reconnect = 11] = "Reconnect", e[e.Hosting = 12] = "Hosting", e[e.Unhost = 13] = "Unhost", e[e.Subscription = 14] = "Subscription", e[e.Resubscription = 15] = "Resubscription", e[e.SubGift = 16] = "SubGift", e[e.Clear = 17] = "Clear", e[e.SubscriberOnlyMode = 18] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 19] = "FollowerOnlyMode", e[e.SlowMode = 20] = "SlowMode", e[e.RoomMods = 21] = "RoomMods", e[e.RoomState = 22] = "RoomState", e[e.Raid = 23] = "Raid", e[e.Unraid = 24] = "Unraid", e[e.Notice = 25] = "Notice", e[e.Info = 26] = "Info", e[e.BadgesUpdated = 27] = "BadgesUpdated", e[e.Purchase = 28] = "Purchase"
        }(i || (i = {}))
    },
    806: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = {
                action_name: e.actionName,
                action_type: "click",
                client_time: (new Date).getTime(),
                displayed_balance: e.displayedBalance,
                emote_level: e.emoteLevel,
                emote_type: e.emoteType,
                bits_location: e.location || d.ChatTooltip
            };
            c.m.track(u.SpadeEventType.BitsCardInteraction, t)
        }

        function a(e) {
            return e && m[e] ? m[e] : (c.i.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), p.Buy100)
        }

        function r(e) {
            var t = {
                channel: e.channel,
                channel_id: e.channelID,
                available: e.available,
                host: "twitch.tv"
            };
            c.m.track(u.SpadeEventType.BitsAdsAvailability, t)
        }

        function s(e) {
            var t = {
                distinct_id: c.n.session.deviceID,
                host: "twitch.tv",
                request_id: e.requestID,
                campaign_id: e.campaignID,
                adblock: e.adblock
            };
            c.m.track(u.SpadeEventType.BitsAdsImpression, t)
        }

        function o(e) {
            var t = c.m.getLastPageview(),
                n = {
                    location: t ? t.location || "" : "",
                    ad_returned: null,
                    campaign_id: e.campaignID,
                    distinct_id: c.n.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    request_method: e.requestMethod
                };
            c.m.track(u.SpadeEventType.BitsAdsRequest, n)
        }
        t.h = i, n.d(t, "b", function() {
            return d
        }), n.d(t, "a", function() {
            return p
        }), t.d = a, t.e = r, t.f = s, n.d(t, "c", function() {
            return l
        }), t.g = o;
        var l, c = n(2),
            u = n(12),
            d = {
                ChatTooltip: "card",
                GetBitsButton: "get_bits_button",
                BitsLandingPage: "bits_landing_page"
            },
            p = {
                BuyMain: "buy_main",
                Buy100: "buy_100",
                Buy500: "buy_500",
                Buy1000: "buy_1000",
                Buy1500: "buy_1500",
                Buy5000: "buy_5000",
                Buy10000: "buy_10000",
                Buy25000: "buy_25000",
                CloseCard: "menu_close",
                OpenCard: "menu_open",
                PreviewEmote: "emote_preview",
                WatchAd: "watch_ad",
                WatchAnotherAd: "watch_another_ad"
            },
            m = {
                100: p.Buy100,
                500: p.Buy500,
                1e3: p.Buy1000,
                1500: p.Buy1500,
                5e3: p.Buy5000,
                1e4: p.Buy10000,
                25e3: p.Buy25000
            };
        ! function(e) {
            e.ShowAdButton = "show_ad_button"
        }(l || (l = {}))
    },
    807: function(e, t, n) {
        "use strict";

        function i(e) {
            return e + "-" + Date.now() + "}"
        }
        t.a = i
    },
    808: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            BrowseCommunities: "browse.communities",
            BrowseCreative: "browse.creative",
            BrowseForYou: "browse.for-you",
            ChannelIndex: "channel.index.index",
            ChannelDashboardAchievements: "channel.dashboard.achievements",
            ChannelDashboardModeration: "channel.dashboard.moderation",
            ChannelDashboardStreamSummary: "channel.dashboard.stream-summary",
            ChannelClips: "channel.clips",
            ChannelClipsManager: "videoManager.clips.channel",
            ChannelCollections: "channel.collections",
            ChannelEvents: "channel.events",
            ChatPopout: "chat",
            DevOnly: "dev",
            DirectoryCommunityByLanguage: "directory.community.language",
            DirectoryCommunityIndex: "directory.community.index",
            DirectoryCommunityDetails: "directory.community.details",
            DirectoryGames: "directory.games",
            DirectoryPopular: "directory.popular",
            DirectoryPopularByLanguage: "directory.popular.language",
            DirectoryGameIndex: "directory.game.index",
            DirectoryGameClips: "directory.game.clips",
            DirectoryGameDetails: "directory.game.details",
            DirectoryGameVideos: "directory.game.videos",
            DirectoryFollowingIndex: "directory.following.index",
            DirectoryFollowingGames: "directory.following.games",
            DirectoryFollowingVideos: "directory.following.videos.video-type",
            DirectoryFollowingHosts: "directory.following.hosts",
            DirectoryFollowingLiveChannels: "directory.following.channels",
            DirectoryFollowingCommunities: "directory.following.communities",
            EmailVerification: "emailVerification",
            EventDetails: "event.details",
            Index: "index",
            MyClipsManager: "videoManager.clips",
            NotificationSettingsPage: "settings.notificationSettings",
            OnboardingIndex: "onboarding.index",
            ReportUserPage: "reportUser.page",
            StoreMerchPage: "store.merch",
            SubsLandingPage: "subs.landing",
            SubsBroadcasterPage: "subs.broadcaster",
            TeamsDashboardBasicInfo: "teams.dashboard.basic-info",
            TeamsDashboardCustomize: "teams.dashboard.customize",
            TeamsDashboardFeaturedChannels: "teams.dashboard.featured-channels",
            TeamsDashboardMembers: "teams.dashboard.members",
            TeamsDashboardStats: "teams.dashboard.stats",
            TeamsDashboardRevenue: "teams.dashboard.revenue",
            VideosPage: "videos",
            VideoWatchPage: "video",
            VideoManagerPage: "videoManager.page",
            VideoManagerEditPropertiesPage: "videoManager.edit",
            VideoManagerUploadPage: "videoManager.upload",
            VideoManagerUploadListPage: "videoManager.upload-list"
        }
    },
    810: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n(0),
            a = n(2),
            r = n(17),
            s = function() {
                function e() {}
                return e.get = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.put = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.post = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.delete = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.request = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return t = this.constructOptions(t, n), a = t.headers ? t.headers["Content-Type"] : void 0, t.body = this.serialize(t.body, a), [4, this._fetch(e, t)];
                                case 1:
                                    return r = i.sent(), [4, this.constructLegacyAPIResponse(r)];
                                case 2:
                                    return [2, i.sent()]
                            }
                        })
                    })
                }, e.getAPIURL = function(e) {
                    return new URL(e, a.n.config.apiBaseURL)
                }, e.constructLegacyAPIResponse = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = {
                                        status: e.status
                                    }, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, e.json()];
                                case 2:
                                    return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                case 3:
                                    return a = i.sent(), t.requestError = a, [3, 4];
                                case 4:
                                    return [2, t]
                            }
                        })
                    })
                }, e._fetch = function(e, t) {
                    return void 0 === t && (t = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, fetch(this.getAPIURL(e).toString(), t)];
                                case 1:
                                    return [2, n.sent()]
                            }
                        })
                    })
                }, e.constructOptions = function(e, t) {
                    return e = Object.assign({}, e, {
                        headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                    })
                }, e.serialize = function(e, t) {
                    return "application/json; charset=UTF-8" === t ? JSON.stringify(e) : e
                }, e.getDefaultHeaders = function(e, t) {
                    var n = a.n.store.getState(),
                        i = {
                            Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                            "Accept-Language": "en-us",
                            "Client-ID": a.n.config.legacyClientID,
                            "X-Requested-With": "XMLHttpRequest"
                        };
                    e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = "application/json; charset=UTF-8");
                    var s = Object(r.c)(n);
                    return s && (i.Authorization = "OAuth " + s.authToken, s.legacyCSRFToken && (i["Twitch-Api-Token"] = s.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                        i[e] && delete i[e]
                    }), i
                }, e
            }()
    },
    811: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                var n = function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        return i.tracked = !1, i.referenceTracking = {}, i.trackPageview = function() {
                            if (!(i.tracked || e.skip && e.skip(i.props))) {
                                i.tracked = !0, l.n.adBlockSentinel.pageTransition();
                                var t = {};
                                "function" == typeof e.properties ? t = e.properties(i.props) : e.properties && (t = a.__assign({}, e.properties));
                                var n = a.__assign({}, i.props);
                                n.location && n.location.state && (t.medium = n.location.state.medium, t.content = n.location.state.content, t.content_index = n.location.state.content_index);
                                var r = i.referenceTracking,
                                    s = r.content,
                                    o = r.medium,
                                    c = r.content_index;
                                l.n.tracking.trackPageview(a.__assign({
                                    content: s,
                                    medium: o,
                                    content_index: c,
                                    location: e.location
                                }, t))
                            }
                        }, l.i.debug("pageViewTracking", e), t.rootLatencyTracker ? t.rootLatencyTracker.setLocation(e.location) : l.i.warn("No latency tracker exists! This means no data will be sent to Spade.", e), i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        var e = this;
                        this.referenceTracking = this.stripTTParams(this.props.history.location), this.trackPageview(), this.props.history.listen(function(t, n) {
                            "REPLACE" !== n && (e.tracked = !1, e.referenceTracking = {})
                        })
                    }, i.prototype.componentDidUpdate = function() {
                        this.trackPageview()
                    }, i.prototype.render = function() {
                        return s.createElement(t, a.__assign({}, this.props))
                    }, i.prototype.stripTTParams = function(e) {
                        var t = "" !== e.search ? r.parse(e.search) : {},
                            n = {
                                content: t.tt_content,
                                content_index: t.tt_content_index,
                                medium: t.tt_medium
                            };
                        if (delete t.tt_content, delete t.tt_content_index, delete t.tt_medium, n.medium || n.content) {
                            var i = "",
                                a = r.stringify(t);
                            a.length > 0 && (i = "?" + a), this.props.history.replace({
                                pathname: e.pathname,
                                hash: e.hash,
                                search: i
                            })
                        }
                        return n
                    }, i
                }(s.Component);
                return Object(o.f)(n)
            }
        }
        var a = n(0),
            r = n(20),
            s = n(1),
            o = n(10),
            l = n(2);
        n.d(t, "a", function() {
            return i
        })
    },
    812: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "c", function() {
            return o
        });
        var i = "AD",
            a = "BUNDLE",
            r = "first_time_purchase",
            s = "single_purchase",
            o = "black_friday_2017"
    },
    813: function(e, t, n) {
        "use strict";

        function i(e) {
            return e.type !== d.a && (r(e) && null !== e.promotion && e.promotion.type === d.d)
        }

        function a(e) {
            return e.type !== d.a && (r(e) && null !== e.promotion && e.promotion.type === d.e)
        }

        function r(e) {
            return e.type === d.b && null !== e.promotion && !!e.promotion
        }

        function s(e) {
            var t = 0,
                n = 0,
                i = 0;
            return e.forEach(function(e) {
                e.cheerAmount && (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, i += e.cheerAmount)
            }), {
                total: i,
                smallestCheermote: n,
                largestCheermote: t
            }
        }

        function o(e) {
            var t = e.messageBits,
                n = t.total,
                i = t.largestCheermote,
                a = t.smallestCheermote;
            if (n) {
                var r = {
                    cheerAboveMaxBitsPerEmote: i > p.k,
                    totalAboveBalance: n > e.balance,
                    totalBelowCheerMinimum: n < e.cheerMinimumBits,
                    totalBelowEmoteMinimum: a < e.emoteMinimumBits,
                    inputLongerThanMaxBitsMessage: e.inputValue.length > p.j,
                    inputStartsWithCommand: e.inputValue.startsWith("/")
                };
                if (Object.keys(r).some(function(e) {
                        return r[e]
                    })) return c.__assign({
                    canSpend: !1
                }, r)
            }
            return {
                canSpend: !0
            }
        }

        function l(e) {
            var t = e.purchaseUrl;
            if (t) {
                e.trackBitsCardInteraction(Object(m.d)(e.bitsAmount), {
                    location: e.location
                });
                var n = t.replace("{channelID}", e.channelID),
                    i = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
                return !i || Object(u.a)() ? (e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(m.a.CloseCard, {
                    location: e.location
                })) : (i.focus(), i)
            }
        }
        t.c = i, t.e = a, t.d = r, t.a = s, t.f = o, t.b = l;
        var c = n(0),
            u = n(829),
            d = n(812),
            p = n(259),
            m = n(806)
    },
    815: function(e, t, n) {
        "use strict";
        var i, a = n(4),
            r = n(1),
            s = n(372),
            o = n(375),
            l = n(373),
            c = n(3);
        n(859);
        ! function(e) {
            e[e.Normal = 0] = "Normal", e[e.Small = 1] = "Small", e[e.Medium = 2] = "Medium", e[e.ExtraSmall = 3] = "ExtraSmall"
        }(i || (i = {}));
        var u;
        ! function(e) {
            e[e.ImageAndText = 0] = "ImageAndText", e[e.ImageOnly = 1] = "ImageOnly", e[e.TextOnly = 2] = "TextOnly", e[e.InlineTextOnly = 3] = "InlineTextOnly", e[e.Inline = 4] = "Inline"
        }(u || (u = {}));
        var d = function(e) {
            var t = e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
            t || (t = Object(o.b)());
            var n = t.orderedTiers.find(function(t) {
                return t.bits <= (e.amount || 100)
            });
            n || (n = t.orderedTiers[0]);
            var d = null,
                p = a("cheermote-for-amount__cheer-amount", {
                    "cheermote-for-amount__cheer-amount--small": e.size === i.Small || e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-amount--medium": e.size === i.Medium
                }, {
                    "cheermote-for-amount__display--table-cell": e.display !== u.InlineTextOnly && e.display !== u.Inline
                });
            e.amount && e.display !== u.ImageOnly && (d = r.createElement(c.P, {
                padding: e.size === i.Small ? 0 : void 0,
                textAlign: e.size === i.Small ? c._22.Center : void 0
            }, r.createElement("strong", {
                className: p,
                style: {
                    color: n.color
                }
            }, e.amount)));
            var m = a("cheermote-for-amount__cheer-image", {
                    "cheermote-for-amount__cheer-image--inline": e.display === u.Inline
                }, {
                    "cheermote-for-amount__cheer-image--small": e.size === i.Small
                }, {
                    "cheermote-for-amount__cheer-image--extra-small": e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__display--table-cell": e.display !== u.InlineTextOnly && e.display !== u.Inline && e.size !== i.Small
                }),
                h = r.createElement(l.a, {
                    className: m,
                    sources: Object(s.b)(n, 4, e.animated)
                });
            return e.display !== u.TextOnly && e.display !== u.InlineTextOnly || (h = null), e.display === u.InlineTextOnly || e.display === u.Inline ? r.createElement(c.U, {
                className: "cheermote-for-amount",
                display: c.H.Inline
            }, h, d) : r.createElement(c.U, {
                className: "cheermote-for-amount"
            }, h, d)
        };
        n.d(t, "a", function() {
            return d
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return u
        })
    },
    816: function(e, t, n) {
        "use strict";

        function i() {
            return {
                type: r
            }
        }

        function a(e, t, n) {
            return {
                type: s,
                viewerCardOptions: {
                    targetLogin: e,
                    sourceType: t,
                    sourceID: n
                }
            }
        }
        n.d(t, "a", function() {
            return r
        }), n.d(t, "b", function() {
            return s
        }), t.c = i, t.d = a;
        var r = "viewer-card.VIEWER_CARD_HIDDEN",
            s = "viewer-card.VIEWER_CARD_SHOWN"
    },
    817: function(e, t, n) {
        "use strict";

        function i(e) {
            return "/ignore " + e
        }

        function a(e) {
            return "/unignore " + e
        }

        function r(e) {
            return "/mod " + e
        }

        function s(e) {
            return "/unmod " + e
        }

        function o(e) {
            return /^[\/]/.test(e)
        }

        function l() {
            return "/clear"
        }

        function c() {
            return "/followersoff"
        }

        function u() {
            return "/slowoff"
        }

        function d(e) {
            return "/followers " + e
        }

        function p() {
            return "/slow"
        }

        function m(e) {
            return "/color " + e
        }

        function h(e) {
            var t = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i,
                n = e.trim().match(t);
            return n ? {
                recipientLogin: n[1] || null,
                body: n[2] || null
            } : null
        }

        function f(e) {
            var t = e.trim().match(v);
            return t ? {
                login: t[1]
            } : null
        }

        function g(e) {
            var t = e.trim().match(k);
            return t ? {
                login: t[1]
            } : null
        }
        n.d(t, "a", function() {
            return b
        }), t.h = i, t.j = a, t.i = r, t.k = s, t.l = o, t.c = l, t.d = c, t.e = u, t.f = d, t.g = p, t.b = m, t.o = h, t.m = f, t.n = g;
        var b = "/unraid",
            v = /^\/ignore(?:$|\s+)(\S+)?(.+)?/i,
            k = /^\/unignore(?:$|\s+)(\S+)?(.+)?/i
    },
    818: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
        }(i || (i = {}))
    },
    819: function(e, t, n) {
        "use strict";

        function i() {
            return x.createElement("span", {
                key: "thankyou"
            }, Object(M.d)("Thank you for your feedback!", "ChatLine"))
        }

        function a(e, t, n, i, a) {
            var r = [],
                s = "";
            i && (s = s.concat(" "));
            var l = e.content.split(/\s+/);
            return l.forEach(function(e, i) {
                if ("" !== e) {
                    var a = i < l.length - 1 ? e + " " : e;
                    (t || n) && o(e, t, n) ? (r = r.concat(s), r = r.concat(x.createElement(W.U, {
                        className: "chat-line__message--mention-recipient",
                        display: W.H.InlineFlex,
                        key: "" + e + i,
                        "data-a-target": "chat-message-mention"
                    }, a)), s = "") : s = s.concat(a)
                }
            }), r = r.concat(s), x.createElement("span", {
                key: "chat-line__message-text-" + a,
                "data-a-target": "chat-message-text"
            }, r)
        }

        function r(e, t) {
            return x.createElement("a", {
                key: e,
                className: "chat-line__message--link",
                href: t.content.url,
                target: "_blank",
                rel: "noreferrer noopener"
            }, t.content.displayText)
        }

        function s(e, t, n) {
            var i = null,
                s = e.reduce(function(s, o, u) {
                    switch (o.type) {
                        case se.a.Text:
                            var d = u > 0;
                            return s.concat(a(o, t, n, d, u));
                        case se.a.Mention:
                            var p = "";
                            return l(o) && t && o.content.sender.toLowerCase() === t.toLowerCase() ? p = "chat-line__message--mention-sender" : c(o) && t && o.content.recipient.toLowerCase() === t.toLowerCase() && (p = "chat-line__message--mention-recipient"), s.concat(x.createElement(W.U, {
                                className: p,
                                display: W.H.InlineFlex,
                                key: u,
                                "data-a-target": "chat-message-mention"
                            }, "@" + o.content.recipient));
                        case se.a.Link:
                            return s = s.concat(r(u, o)), e.length > u + 1 && e[u + 1].type === se.a.Link && s.push(" "), s;
                        case se.a.Emote:
                            return s = s.concat(x.createElement(A.a, {
                                key: u,
                                emote: o.content
                            })), e.length > u + 1 && e[u + 1].type === se.a.Emote && s.push(" "), s;
                        case se.a.ClipLink:
                            return i ? s.concat(r(u, o)) : (i = x.createElement(Z, {
                                key: u,
                                slug: o.content.slug
                            }), s);
                        case se.a.VideoLink:
                            return i ? s.concat(r(u, o)) : (i = x.createElement(ae, {
                                key: u,
                                id: o.content.id,
                                url: o.content.url
                            }), s);
                        default:
                            return s.concat(x.createElement("span", {
                                key: u
                            }))
                    }
                }, []);
            return i && (s = s.concat(i)), s
        }

        function o(e, t, n) {
            var i = e.trim().toLowerCase();
            return t && i === t.toLowerCase() || n && i === n.toLowerCase()
        }

        function l(e) {
            return e.content && e.content.sender
        }

        function c(e) {
            return e.content && e.content.recipient
        }

        function u(e) {
            if (e.type === re.a.Ban) return e.reason ? x.createElement("span", {
                className: "chat-line__moderation--ban-with-reason"
            }, Object(M.d)("{userLogin} has been banned. Reason: {reason}", {
                userLogin: e.userLogin,
                reason: e.reason
            }, "ChatLine")) : x.createElement("span", {
                className: "chat-line__moderation--ban"
            }, Object(M.d)("{userLogin}  is now banned from this room.", {
                userLogin: e.userLogin
            }, "ChatLine"));
            if (e.reason && e.duration) {
                var t = Object(M.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                    duration: e.duration,
                    reason: e.reason,
                    userLogin: e.userLogin
                }, "ChatLine");
                return x.createElement("span", {
                    className: "chat-line__moderation--timeout-with-reason"
                }, t)
            }
            return e.duration ? x.createElement("span", {
                className: "chat-line__moderation--timeout"
            }, Object(M.d)("{userLogin} has been timed out for {duration} seconds.", {
                userLogin: e.userLogin,
                duration: e.duration
            }, "ChatLine")) : void 0
        }

        function d(e) {
            var t = Object(P.a)("https://twitch.amazon.com/prime", {
                ref: "subscriptionMessage",
                channel: e
            });
            return x.createElement("a", {
                className: "chat-line__subscribe--prime",
                href: t,
                target: "_blank",
                rel: "noopener"
            }, Object(M.d)("Twitch Prime", "ChatLine"))
        }

        function p(e, t) {
            return Object(M.d)("{userLogin} just subscribed with {service}!", {
                userLogin: e,
                service: t
            }, "ChatLine")
        }

        function m(e, t) {
            return Object(M.d)("{userLogin} just subscribed with a {subTier} sub!", {
                userLogin: e,
                subTier: t
            }, "ChatLine")
        }

        function h(e, t) {
            return Object(M.d)("{userLogin} gifted a subscription to {recipient}!", {
                userLogin: e,
                recipient: t
            }, "ChatLine")
        }

        function f(e, t, n) {
            return Object(M.d)("{userLogin} gifted a {subTier} sub to {recipient}!", {
                userLogin: e,
                subTier: t,
                recipient: n
            }, "ChatLine")
        }

        function g(e) {
            return e.isPrime ? x.createElement("span", null, p(e.userLogin, d(e.channel))) : x.createElement("span", null, m(e.userLogin, e.tier))
        }

        function b(e) {
            return "custom" === e.tier ? x.createElement("span", null, h(e.userLogin, e.recipient)) : x.createElement("span", null, f(e.userLogin, e.tier, e.recipient))
        }

        function v(e, t, n, i, a) {
            if (e.user) {
                var r = null;
                e.badges && (r = x.createElement(F.b, {
                    badgeSets: a,
                    badgesToRender: e.badges
                }));
                var o = e.isPrime ? p(e.user.userDisplayName, d(e.channel)) : m(e.user.userDisplayName, e.tier),
                    l = [x.createElement("span", {
                        key: "chat--resubbed"
                    }, o, x.createElement("span", {
                        key: "sub-separator"
                    }, " "), Object(M.d)("{userLogin} subscribed for {months} months in a row!", {
                        userLogin: e.user.userDisplayName,
                        months: e.months
                    }, "ChatLine"))];
                if (e.messageParts && e.user && !e.deleted) {
                    var c = null;
                    t && e.timestamp && (c = D(e.timestamp)), l.push(x.createElement("div", {
                        key: "resub-message",
                        className: "chat-line__subscribe--message"
                    }, c, r, x.createElement(j.a, {
                        userData: e.user
                    }), x.createElement("span", {
                        key: "separator"
                    }, " : "), s(e.messageParts, n, i)))
                }
                return l
            }
            return null
        }

        function k(e) {
            var t = e.enabled ? Object(M.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                length: e.length
            }, "ChatLine") : Object(M.d)("This room is no longer in slow mode.", "ChatLine");
            return x.createElement("span", null, t)
        }

        function y(e) {
            return x.createElement("span", null, e.message)
        }

        function S(e) {
            return x.createElement("span", null, e.message)
        }

        function _(e) {
            var t;
            if (e.length > 0) {
                var n = e.join(", ");
                t = Object(M.d)("The moderators of this room are: {moderatorList}", {
                    moderatorList: n
                }, "ChatLine")
            } else t = Object(M.d)("There are no moderators of this room.", "ChatLine");
            return x.createElement("span", null, t)
        }

        function C(e) {
            if (e.enabled) {
                var t = 0 === e.length ? Object(M.d)("This room is in followers-only mode.", "ChatLine") : Object(M.d)("This room is now in {length} followers-only mode.", {
                    length: Object(R.a)(60 * e.length)
                }, "ChatLine");
                return x.createElement("span", null, t)
            }
            return x.createElement("span", null, Object(M.d)("This room is no longer in followers-only mode.", "ChatLine"))
        }

        function E(e) {
            var t = e.enabled ? Object(M.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(M.d)("This room is no longer in subscriber-only mode.", "ChatLine");
            return x.createElement("span", null, t)
        }

        function N() {
            return x.createElement("span", null, Object(M.d)("Chat was cleared by a moderator", "ChatLine"))
        }

        function w(e) {
            var t = e.getHours() % 12;
            0 === t && (t = 12);
            var n = e.getMinutes(),
                i = n.toString();
            return n < 10 && (i = "0" + i), t + ":" + i
        }

        function D(e) {
            return x.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, w(new Date(e)))
        }

        function T(e) {
            return x.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, O(new Date(e), {
                hour: "numeric",
                minute: "numeric"
            }))
        }

        function I() {
            return x.createElement("span", null, Object(M.d)("The raid has been cancelled.", "RaidCancelMessage"))
        }

        function U(e, t, n) {
            return 0 === n ? Object(M.d)("<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}!</x:bold>", {
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return x.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage") : Object(M.d)("{numCrates, plural, one {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened a <x:bold>Twitch Crate!</x:bold>} other {<x:bold>{userName}</x:bold> bought <x:bold>{gameTitle}</x:bold> and opened # <x:bold>Twitch Crates!</x:bold>}}", {
                numCrates: n,
                userName: e,
                gameTitle: t,
                "x:bold": function(e) {
                    return x.createElement("strong", null, e)
                }
            }, "PurchaseNoticeSystemMessage")
        }

        function O(e, t) {
            void 0 === t && (t = {});
            var n = M.n.intl.getLanguageCode() || "en";
            return Intl.DateTimeFormat(n, t).format(e)
        }
        var x = n(1),
            M = n(2),
            R = n(870),
            P = n(88),
            F = n(821),
            j = n(825),
            A = n(871),
            L = n(0),
            B = n(6),
            H = n(10),
            V = n(12),
            W = n(3),
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasImageLoadingError: !1
                    }, t.handleImageError = function() {
                        t.setState({
                            hasImageLoadingError: !0
                        })
                    }, t
                }
                return L.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                    this.setState({
                        hasImageLoadingError: !1
                    })
                }, t.prototype.render = function() {
                    var e = M.a.defaultStreamPreviewURL;
                    return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), x.createElement(W.C, {
                        aspect: W.k.Aspect16x9,
                        imageAlt: this.props.altText,
                        imageSrc: e,
                        onImageError: this.handleImageError
                    })
                }, t
            }(x.Component),
            q = (n(882), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
            z = {
                ERROR: "chat-card-error",
                TITLE: "chat-card-title",
                DESCRIPTION: "chat-card-description"
            },
            $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderErrorCard = function() {
                        var e = x.createElement("img", {
                            "data-test-selector": z.ERROR,
                            src: q,
                            className: "chat-card__error-img"
                        });
                        return t.renderCardContent(e, t.props.error)
                    }, t.renderCardContent = function(e, t) {
                        var n, i;
                        return t ? (n = x.createElement(W._21, {
                            type: W._26.Span,
                            fontSize: W.L.Size5,
                            "data-test-selector": z.TITLE,
                            title: t.title
                        }, t.title), i = x.createElement(W._21, {
                            type: W._26.Span,
                            fontSize: W.L.Size6,
                            color: W.F.Alt2,
                            "data-test-selector": z.DESCRIPTION
                        }, t.description)) : (e = x.createElement(W._1, {
                            overlay: !0
                        }), n = x.createElement(W._1, {
                            width: 180
                        }), i = x.createElement(W._1, {
                            width: 120
                        })), x.createElement(W._17, {
                            background: W.m.Base,
                            display: W.H.Flex,
                            flexWrap: W.K.NoWrap,
                            padding: .5
                        }, x.createElement(W._17, {
                            className: "chat-card__preview-img",
                            background: W.m.Alt2,
                            display: W.H.Flex,
                            alignItems: W.c.Center,
                            justifyContent: W.T.Center,
                            flexShrink: 0
                        }, e), x.createElement(W.U, {
                            display: W.H.Flex,
                            alignItems: W.c.Center
                        }, x.createElement(W.U, {
                            margin: {
                                left: 1
                            },
                            fullWidth: !0
                        }, x.createElement(W.U, {
                            className: "chat-card__title",
                            ellipsis: !0
                        }, n), x.createElement(W.U, {
                            ellipsis: !0
                        }, i))))
                    }, t
                }
                return L.__extends(t, e), t.prototype.render = function() {
                    var e;
                    if (this.props.error) e = this.renderErrorCard();
                    else if (this.props.data) {
                        var t = Object(P.a)(this.props.data.contentURL, {
                                tt_medium: V.PageviewMedium.Chat,
                                tt_content: V.PageviewContent.ChatCard
                            }),
                            n = x.createElement(G, {
                                altText: this.props.data.title,
                                imageURL: this.props.data.previewImageURL
                            });
                        e = x.createElement(H.a, {
                            className: "chat-card__link",
                            to: t,
                            target: "_blank"
                        }, this.renderCardContent(n, {
                            title: this.props.data.title,
                            description: this.props.data.description
                        }))
                    } else e = this.renderCardContent();
                    return x.createElement(W._17, {
                        elevation: 1,
                        margin: {
                            top: .5
                        }
                    }, e)
                }, t
            }(x.Component),
            J = $,
            Q = n(848),
            K = {
                isTimedOut: !1
            },
            Y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = K, t.timeoutID = null, t
                }
                return L.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.data.clip || (this.timeoutID = setTimeout(function() {
                        e.setState({
                            isTimedOut: !0
                        })
                    }, 5e3))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                        isTimedOut: !1
                    }))
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.clip,
                        n = e.error,
                        i = e.loading;
                    return n || this.state.isTimedOut ? x.createElement(J, {
                        error: {
                            title: Object(M.d)("Something went wrong", "ClipsChatCard"),
                            description: Object(M.d)("We couldn't find that Clip", "ClipsChatCard")
                        }
                    }) : i || !t ? x.createElement(J, null) : x.createElement(J, {
                        data: {
                            title: t.title ? t.title : Object(M.d)("Clip of {broadcaster}", {
                                broadcaster: t.broadcaster.displayName
                            }, "ClipsChatCard"),
                            description: Object(M.d)("Clipped by {curator}", {
                                curator: t.curator.displayName
                            }, "ClipsChatCard"),
                            previewImageURL: t.thumbnailURL,
                            contentURL: t.url
                        }
                    })
                }, t
            }(x.Component),
            X = function(e) {
                return {
                    variables: {
                        slug: e.slug
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-only"
                }
            },
            Z = Object(B.a)(Q, {
                options: X
            })(Y),
            ee = n(49),
            te = n(883),
            ne = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return L.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.video,
                        n = e.error,
                        i = e.loading;
                    if (n || t && !t.owner) return x.createElement(J, {
                        error: {
                            title: Object(M.d)("Something went wrong", "VideoChatCard"),
                            description: Object(M.d)("We couldn't find that video", "VideoChatCard")
                        }
                    });
                    if (i || !t) return x.createElement(J, null);
                    var a = x.createElement(W._21, null, Object(M.c)(new Date(t.publishedAt), "medium"), x.createElement("span", null, " · "), Object(ee.a)(t.owner.login, t.owner.displayName));
                    return x.createElement(J, {
                        data: {
                            title: t.title,
                            description: a,
                            previewImageURL: t.previewThumbnailURL,
                            contentURL: this.props.url
                        }
                    })
                }, t
            }(x.Component),
            ie = function(e) {
                return {
                    variables: {
                        videoID: e.id
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-first"
                }
            },
            ae = Object(B.a)(te, {
                options: ie
            })(ne),
            re = n(805),
            se = n(260);
        t.b = i, t.e = s, t.f = u, t.n = g, t.m = b, t.i = v, t.k = k, t.g = y, t.d = S, t.j = _, t.c = C, t.l = E, t.a = N, t.o = D, t.p = T, t.q = I, t.h = U
    },
    820: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "badge"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Badge"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "version"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "title"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image1x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "NORMAL"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image2x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "DOUBLE"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image4x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "QUADRUPLE"
                            }
                        }],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clickAction"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clickURL"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "fragment badge on Badge {\n  id\n  setID\n  version\n  title\n  image1x: imageURL(size: NORMAL)\n  image2x: imageURL(size: DOUBLE)\n  image4x: imageURL(size: QUADRUPLE)\n  clickAction\n  clickURL\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    821: function(e, t, n) {
        "use strict";
        var i = n(847),
            a = n(839),
            r = n(827),
            s = (n(880), n(0)),
            o = function() {
                function e(e, t, n) {
                    this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                }
                return e.prototype.getBadge = function(e, t) {
                    var n = this.channelsBySet.get(e);
                    return n && n.has(t) ? n.get(t) || null : (n = this.globalsBySet.get(e), void 0 !== n ? n.get(t) || null : null)
                }, e.prototype.indexBadges = function(e, t, n) {
                    e.forEach(function(e) {
                        n && e.clickAction === r.b && (e = s.__assign({}, e, {
                            channelName: n
                        }));
                        var i = t.get(e.setID);
                        i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                    })
                }, e
            }();
        new o([], [], "");
        n.d(t, "b", function() {
            return i.a
        }), n.d(t, "a", function() {
            return a.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return o
        })
    },
    822: function(e, t, n) {
        "use strict";

        function i(e) {
            var t, n = Object(r.d)("{bitsAmount} Bits", {
                bitsAmount: e.count.toString()
            }, "Bits--BitsCount");
            if (e.withImage) {
                var i = e.bitsConfig.indexedActions[o.e];
                i || (i = Object(c.b)());
                var d = i.orderedTiers.find(function(t) {
                    return t.bits <= e.count
                });
                if (d) {
                    var p = Object(l.b)(d);
                    return void 0 !== e.themeOverride && (e.themeOverride === s.a.Light ? p.dark = p.light : p.light = p.dark), t = a.createElement(u.a, {
                        className: "bits-count--img",
                        sources: p
                    }), a.createElement("strong", {
                        className: "bits-count",
                        "data-a-target": "bits-count"
                    }, a.createElement("span", null, t, " ", e.withText ? n : ""))
                }
            }
            return a.createElement("strong", {
                className: "bits-count",
                "data-a-target": "bits-count"
            }, a.createElement("span", null, n))
        }
        var a = n(1),
            r = n(2),
            s = n(38),
            o = n(259),
            l = n(372),
            c = n(375),
            u = n(373);
        n(868);
        n.d(t, "a", function() {
            return i
        })
    },
    823: function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (!e) return void a.i.warn("[onPopupClose] Attempted to observe a window that failed to open.");
            var n = setInterval(function() {
                var i = !1,
                    a = !1;
                try {
                    i = e.closed, a = !!e.success
                } catch (e) {}
                if (i || a) {
                    t(a);
                    try {
                        e.close()
                    } catch (e) {}
                    clearInterval(n)
                }
            }, 500)
        }
        t.a = i;
        var a = n(2)
    },
    825: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n(4),
            a = (n.n(i), n(1)),
            r = (n.n(a), n(881)),
            s = (n.n(r), function(e) {
                var t = [a.createElement("span", {
                    key: "username-display",
                    className: "chat-author__display-name",
                    "data-a-target": "chat-message-username",
                    "data-test-selector": "message-username",
                    style: {
                        color: e.userData.color
                    }
                }, e.userData.userDisplayName)];
                if (e.userData.isIntl) {
                    var n = i((r = {}, r["chat-author__intl-login"] = !e.highlighted, r["chat-author__intl-login--highlighted"] = e.highlighted, r));
                    t.push(a.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.userData.color
                        },
                        className: n,
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.userData.userLogin + ")"))
                }
                return a.createElement("span", {
                    key: e.userData.userID + "-authorlabel"
                }, t);
                var r
            })
    },
    826: function(e, t, n) {
        "use strict";
        var i = n(2),
            a = n(12),
            r = {
                Public: "public"
            };
        n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return o
        });
        var s = function(e) {
                return {
                    channel: e.channelLogin,
                    is_host_mode: e.isHostMode,
                    is_using_web_sockets: !0,
                    room_type: r.Public
                }
            },
            o = function(e) {
                i.m.track(a.SpadeEventType.ChatRoomJoined, s(e))
            }
    },
    827: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "a", function() {
            return s
        });
        var i = "subscribe_to_channel",
            a = "turbo",
            r = "visit_url",
            s = "broadcaster"
    },
    828: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i;
        ! function(e) {
            e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.viewer_list = 2] = "viewer_list", e[e.test = 3] = "test"
        }(i || (i = {}))
    },
    829: function(e, t, n) {
        "use strict";

        function i(e) {
            return e || (e = navigator.userAgent), !!a.exec(e)
        }
        t.a = i;
        var a = /\scurse\/\d/
    },
    830: function(e, t, n) {
        "use strict";

        function i(e) {
            switch (e) {
                case 0:
                    return Object(r.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                case 10:
                    return Object(r.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                case 30:
                    return Object(r.d)("30 minutes", "FollowersOnlyLabel");
                case 60:
                    return Object(r.d)("1 hour", "FollowersOnlyLabel");
                case 1440:
                    return Object(r.d)("1 day", "FollowersOnlyLabel");
                case 10080:
                    return Object(r.d)("1 week", "FollowersOnlyLabel");
                case 43200:
                    return Object(r.d)("1 month", "FollowersOnlyLabel");
                case 129600:
                    return Object(r.d)("3 months", "FollowersOnlyLabel");
                default:
                    return r.i.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
            }
        }

        function a(e) {
            switch (e) {
                case 0:
                    return Object(r.d)("0 min", "FollowersOnlyShorthand");
                case 10:
                    return Object(r.d)("10 min", "FollowersOnlyShorthand");
                case 30:
                    return Object(r.d)("30 min", "FollowersOnlyShorthand");
                case 60:
                    return Object(r.d)("1 hr", "FollowersOnlyShorthand");
                case 1440:
                    return Object(r.d)("1 day", "FollowersOnlyShorthand");
                case 10080:
                    return Object(r.d)("1 wk", "FollowersOnlyShorthand");
                case 43200:
                    return Object(r.d)("1 mo", "FollowersOnlyShorthand");
                case 129600:
                    return Object(r.d)("3 mo", "FollowersOnlyShorthand");
                default:
                    return Object(r.d)("custom", "FollowersOnlyShorthand")
            }
        }
        n.d(t, "a", function() {
            return s
        }), n.d(t, "b", function() {
            return o
        }), t.c = i, t.d = a;
        var r = n(2),
            s = 30,
            o = [0, 10, 30, 60, 1440, 10080, 43200, 129600]
    },
    831: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = [],
                n = {};
            return e.forEach(function(e) {
                var i = e.tiers.map(function(e) {
                    var t = new Map,
                        n = new Map,
                        i = new Map,
                        r = new Map;
                    return e.images.forEach(function(e) {
                        "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? r.set(e.dpiScale, e.url) : i.set(e.dpiScale, e.url)
                    }), a.__assign({
                        indexedImages: {
                            LIGHT: {
                                static: t,
                                animated: n
                            },
                            DARK: {
                                static: i,
                                animated: r
                            }
                        }
                    }, e)
                });
                i.sort(function(e, t) {
                    return t.bits - e.bits
                });
                var r = a.__assign({}, e, {
                    indexedTiers: new Map(i.map(function(e) {
                        return [e.bits, e]
                    })),
                    orderedTiers: i
                });
                t.push(r), n[r.prefix.toLowerCase()] = r
            }), {
                indexedActions: n,
                orderedActions: t
            }
        }
        t.a = i;
        var a = n(0)
    },
    833: function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                type: a.a.Info,
                id: Object(r.a)("notice"),
                message: e
            }
        }
        t.a = i;
        var a = n(805),
            r = n(807)
    },
    834: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "bitsOffersFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsOffer"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bits"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "InlineFragment",
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BitsBundleOffer"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "price"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "discount"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPromo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "includesVAT"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "promotion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 197
            }
        };
        n.loc.source = {
            body: "fragment bitsOffersFragment on BitsOffer {\n  id\n  type\n  bits\n  ... on BitsBundleOffer {\n    price\n    discount\n    isPromo\n    url\n    includesVAT\n    promotion {\n      id\n      type \n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    835: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "cheer"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "cheer"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "prefix"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "tiers"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "color"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "images"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "theme"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "isAnimated"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "dpiScale"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 270
            }
        };
        n.loc.source = {
            body: "fragment cheer on User {\n  cheer {\n    id\n    emotes {\n      id\n      prefix\n      type\n      tiers {\n        id\n        bits\n        color\n        images {\n          id\n          url\n          theme\n          isAnimated\n          dpiScale\n        }\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    836: function(e, t, n) {
        "use strict";
        var i, a = n(0),
            r = n(1),
            s = n(2);
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(i || (i = {}));
        var o = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = s.b.get(this.props.name, i.Off);
                    return e === i.On || e === i.StaffOnly && this.props.isStaff ? r.Children.only(this.props.children) : null
                }, t
            }(r.Component),
            l = o;
        n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {
            return o
        }), n.d(t, "b", function() {
            return l
        })
    },
    838: function(e, t, n) {
        "use strict";

        function i(e) {
            return Object(h.bindActionCreators)({
                closeModal: c.c
            }, e)
        }

        function a(e) {
            return p.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, r;
                return p.__generator(this, function(s) {
                    switch (s.label) {
                        case 0:
                            if (t = f.b.get("bits_truex_partner_hash", ""), !(n = f.b.get("bits_truex_api_url", "")) || !t) return f.i.warn("Truex API info missing from dynamic settings"), [2, k.Error];
                            s.label = 1;
                        case 1:
                            return s.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                        case 2:
                            return i = s.sent(), i.ok ? [4, i.json()] : [3, 4];
                        case 3:
                            if ((a = s.sent()) && Array.isArray(a) && a.length) return [2, k.Available];
                            s.label = 4;
                        case 4:
                            return [2, k.Unavailable];
                        case 5:
                            return r = s.sent(), f.i.warn("Failed checking ad availability from TrueX, probably due to AdBlock", r), [2, k.AdBlocked];
                        case 6:
                            return [2]
                    }
                })
            })
        }

        function r(e) {
            return {
                adModalOpen: Object(u.b)(e, N),
                isLoggedIn: Object(d.d)(e)
            }
        }

        function s(e) {
            return {
                showWatchAdModal: function(t) {
                    return e(Object(c.d)(N, t))
                }
            }
        }
        var o, l = n(7),
            c = n(36),
            u = n(90),
            d = n(17),
            p = n(0),
            m = n(1),
            h = n(9),
            f = n(2),
            g = n(104),
            b = n(6),
            v = n(21);
        ! function(e) {
            e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
        }(o || (o = {}));
        var k, y = n(384),
            S = n(806),
            _ = n(3),
            C = n(855),
            E = (n(856), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                        return p.__awaiter(t, void 0, void 0, function() {
                            var t, n, i, a, a, r, s;
                            return p.__generator(this, function(l) {
                                switch (l.label) {
                                    case 0:
                                        if (e.origin !== window.location.origin) return [2];
                                        if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                        switch (n = t.type) {
                                            case y.a.Ready:
                                                return [3, 1];
                                            case y.a.RequestAd:
                                                return [3, 2];
                                            case y.a.Dimensions:
                                                return [3, 3];
                                            case y.a.OnStart:
                                                return [3, 4];
                                            case y.a.OnCredit:
                                                return [3, 5];
                                            case y.a.OnClose:
                                            case y.a.OnFinish:
                                            case y.a.LimitReached:
                                            case y.a.Adblock:
                                            case y.a.OnError:
                                                return [3, 9]
                                        }
                                        return [3, 10];
                                    case 1:
                                        return i = {
                                            msgSrc: "wateb-ad-modal",
                                            tuid: this.props.tuid
                                        }, e.source.postMessage(i, "*"), [2];
                                    case 2:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(S.g)({
                                                campaignID: a.campaign_id.toString(),
                                                requestID: t.requestID,
                                                requestMethod: this.props.requestRef
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 3:
                                        return t.height && t.width && this.setState({
                                            customDimensions: {
                                                height: t.height,
                                                width: t.width
                                            }
                                        }), [3, 10];
                                    case 4:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(S.f)({
                                                requestID: t.requestID,
                                                adblock: !1,
                                                campaignID: a.campaign_id.toString()
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 5:
                                        return l.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(v.a)({
                                            args: t.engagement.signature_argument_string,
                                            signature: t.engagement.signature,
                                            trueXAd: {
                                                creativeID: t.engagement.ad.creative_id,
                                                campaignID: t.engagement.ad.campaign_id,
                                                name: t.engagement.ad.name,
                                                currencyAmount: t.engagement.ad.currency_amount
                                            },
                                            targetID: this.props.channelID
                                        }))];
                                    case 6:
                                        return r = l.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(r.data.redeemTrueXAd.grantedBits), [3, 8];
                                    case 7:
                                        return s = l.sent(), f.i.warn("Error while redeeming bits for truex ad", s), this.props.onError && this.props.onError(o.Unknown), [3, 8];
                                    case 8:
                                        return [3, 10];
                                    case 9:
                                        return this.props.onError && (t.type === y.a.LimitReached ? this.props.onError(o.LimitReached) : t.type === y.a.Adblock ? this.props.onError(o.Adblock) : t.type === y.a.OnError ? this.props.onError(o.Unknown) : this.hasAwarded || this.props.onError(o.ExitEarly)), this.props.closeModal(), [3, 10];
                                    case 10:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return p.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.messageHandler)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.messageHandler)
                }, t.prototype.render = function() {
                    return m.createElement(_._17, {
                        background: _.m.Base
                    }, m.createElement("div", {
                        className: "t-watch-ads-modal",
                        style: this.state.customDimensions
                    }, m.createElement(g.a, null), m.createElement("iframe", {
                        src: "/products/bits/ad"
                    })))
                }, t = p.__decorate([Object(b.a)(C, {
                    name: "redeemTrueXAd"
                })], t)
            }(m.Component)),
            N = Object(l.a)(null, i)(E),
            w = n(4),
            D = n(823),
            T = n(28);
        ! function(e) {
            e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
        }(k || (k = {}));
        var I, U = function(e) {
                var t = null;
                return e.disableWatchAd && (t = Object(f.d)("Try again later", "Bits--WatchAdOffer")), m.createElement(_._17, {
                    className: "bits-buy-card__offer-row",
                    display: _.H.Flex,
                    flexShrink: 0,
                    borderBottom: !0,
                    justifyContent: _.T.Between,
                    flexWrap: _.K.NoWrap,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, m.createElement(_.U, {
                    padding: {
                        right: 4
                    }
                }, m.createElement("strong", null, Object(f.d)("Get {minBitsCount} or more Bits by watching short ads", {
                    minBitsCount: e.minPayout
                }, "Bits--WatchAdOffer"))), m.createElement(_.U, {
                    flexShrink: 0,
                    display: _.H.Flex,
                    flexDirection: _.J.Column,
                    alignItems: _.c.End
                }, m.createElement(_.u, {
                    type: _.z.Hollow,
                    "data-a-target": "bits-watch-ad",
                    onClick: e.onWatchAdClick,
                    disabled: e.disableWatchAd
                }, Object(f.d)("Watch Ad", "Bits--WatchAdOffer")), t && m.createElement(_.U, {
                    className: "bits-buy-card__sub-text",
                    alignSelf: _.d.Stretch,
                    textAlign: _._22.Center,
                    margin: {
                        top: .5
                    }
                }, t)))
            },
            O = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        enableWatchAd: !0
                    }, t
                }
                return p.__extends(t, e), t.prototype.componentWillMount = function() {
                    return p.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return p.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, a(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), Object(S.e)({
                                        channel: this.props.channelLogin,
                                        channelID: this.props.channelID,
                                        available: e === k.Available
                                    }), e !== k.Available && e !== k.AdBlocked && this.setState({
                                        enableWatchAd: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return O.test(navigator.userAgent) ? null : m.createElement(U, p.__assign({}, this.props, {
                        disableWatchAd: !this.state.enableWatchAd
                    }))
                }, t
            }(m.Component),
            M = n(812),
            R = n(259),
            P = n(372),
            F = n(813),
            j = n(375),
            A = n(373),
            L = (n(857), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleBuyClick = function(e) {
                        var n = t.props.channelID || "",
                            i = Object(F.b)({
                                trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                channelID: n,
                                purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                bitsAmount: e.currentTarget.dataset.bitsAmount,
                                closeAllBits: t.props.closeAllBits,
                                location: t.props.location
                            });
                        i && (t.props.onBuyPopupClose(i), t.props.onClose())
                    }, t
                }
                return p.__extends(t, e), t.prototype.render = function() {
                    if (this.props.offer.type === M.a) {
                        if (!this.props.channelLogin) return null;
                        var e = this.props.currentUserSHA || "";
                        return m.createElement(x, {
                            key: "wateb",
                            minPayout: this.props.offer.bits,
                            onWatchAdClick: this.props.handleWatchAdClick,
                            truexUserID: e,
                            channelID: this.props.channelID || "",
                            channelLogin: this.props.channelLogin
                        })
                    }
                    var t = null;
                    Object(F.c)(this.props.offer) ? t = m.createElement(_.U, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, m.createElement(_._21, {
                        type: _._26.Strong,
                        fontSize: _.L.Size6
                    }, Object(f.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(F.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === M.c && (t = m.createElement(_.U, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline"
                    }, m.createElement(_._21, {
                        type: _._26.Strong,
                        fontSize: _.L.Size6
                    }, Object(f.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))));
                    var n = null;
                    this.props.offer.discount && (n = m.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(f.d)("{percentOff,number,percent} discount", {
                        percentOff: this.props.offer.discount
                    }, "Bits--BuyCard")));
                    var i = null;
                    (Object(F.c)(this.props.offer) || Object(F.e)(this.props.offer)) && (i = m.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text"
                    }, Object(f.d)("one per account", "Bits--BuyCard")));
                    var a = this.props.isLastRow ? _._17 : _.U;
                    return m.createElement(a, {
                        className: "bits-buy-card-offer-row",
                        flexShrink: 0,
                        display: _.H.Flex,
                        justifyContent: _.T.Center,
                        borderBottom: this.props.isLastRow,
                        flexDirection: _.J.Column,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, t, m.createElement(_.U, {
                        display: _.H.Flex,
                        justifyContent: _.T.Between,
                        alignItems: _.c.Center
                    }, m.createElement(_.U, {
                        flexGrow: 1
                    }, m.createElement(_._21, {
                        type: _._26.H5,
                        color: _.F.Base,
                        bold: !0
                    }, this.props.offer.bits, " Bits"), this.getAvailableTiers(this.props.offer.bits)), m.createElement(_.U, {
                        flexShrink: 0,
                        display: _.H.Flex,
                        flexDirection: _.J.Column,
                        alignItems: _.c.End
                    }, m.createElement(_.u, {
                        onClick: this.handleBuyClick,
                        "data-purchase-url": this.props.offer.url,
                        "data-bits-amount": this.props.offer.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                    }, this.props.offer.price), (n || i) && m.createElement(_.U, {
                        alignSelf: _.d.Stretch,
                        textAlign: _._22.Right,
                        margin: {
                            top: .5
                        }
                    }, n, i))))
                }, t.prototype.getAvailableTiers = function(e) {
                    var t = this.props.bitsConfig.indexedActions[R.e];
                    t || (t = Object(j.b)());
                    var n = t.orderedTiers.filter(function(t) {
                        return t.bits <= e
                    }).reverse();
                    return m.createElement(_.U, {
                        padding: {
                            top: .5
                        },
                        className: "bits-buy-card-offer-row__tier-bits-images"
                    }, n.map(function(e) {
                        return m.createElement(A.a, {
                            key: e.bits,
                            sources: Object(P.b)(e, 2, !1)
                        })
                    }))
                }, t
            }(m.Component)),
            B = (n(858), function(e) {
                var t = [],
                    n = [],
                    i = null;
                return e.offers.forEach(function(a, r) {
                    var s = m.createElement(L, {
                            key: a.id,
                            offer: a,
                            isLastRow: r + 1 < e.offers.length,
                            bitsConfig: e.bitsConfig,
                            channelID: e.channelID,
                            channelLogin: e.channelLogin,
                            currentUserSHA: e.currentUserSHA,
                            location: e.location,
                            onClose: e.onClose,
                            onBuyPopupClose: e.onBuyPopupClose,
                            handleWatchAdClick: e.handleWatchAdClick,
                            closeAllBits: e.closeAllBits,
                            trackBitsCardInteraction: e.trackBitsCardInteraction
                        }),
                        o = Object(F.d)(a),
                        l = Object(F.c)(a),
                        c = a.type === M.a;
                    l && !e.hidePromos ? t.push(s) : o && !l ? t.push(s) : c && !e.hideWateb ? i = s : c || o || n.push(s)
                }), e.fullsize ? m.createElement(_.U, {
                    className: "bits-buy-card-offers__full-size",
                    flexGrow: 1,
                    flexWrap: _.K.NoWrap,
                    display: _.H.Flex,
                    flexDirection: _.J.Column
                }, i, t, n) : m.createElement(T.b, {
                    className: "bits-buy-card-offers__scroll-view"
                }, m.createElement(_.U, {
                    flexGrow: 1,
                    flexWrap: _.K.NoWrap,
                    display: _.H.Flex,
                    flexDirection: _.J.Column
                }, i, t, n))
            }),
            H = function(e) {
                var t = null;
                e.pricesIncludeVAT && (t = m.createElement(_._21, {
                    italic: !0,
                    type: _._26.P,
                    color: _.F.Alt
                }, Object(f.d)("Prices include VAT", "Bits--BuyCard")));
                var n = null;
                e.minBitsToCheer && e.minBitsToCheer > 1 && (n = m.createElement(_._21, {
                    color: _.F.Alt
                }, Object(f.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                    displayName: e.displayName,
                    minBits: e.minBitsToCheer
                }, "Bits--BuyCard")));
                var i = null;
                return void 0 !== e.bitsBalance && null !== e.bitsBalance && (i = m.createElement(_._21, {
                    color: _.F.Alt
                }, Object(f.d)("You have {totalBits} Bits", {
                    totalBits: m.createElement("strong", {
                        "data-a-target": "buy-card-bits-count"
                    }, e.bitsBalance)
                }, "Bits--BuyCard"))), m.createElement(_._17, {
                    className: "bits-buy-card-header",
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    borderBottom: !0,
                    flexShrink: 0
                }, m.createElement(_.U, {
                    margin: {
                        bottom: 1
                    }
                }, m.createElement(_._21, {
                    type: _._26.H4,
                    color: _.F.Alt
                }, Object(f.d)("Purchase Bits", "Bits--BuyCard")), t), i, n)
            },
            V = n(815),
            W = function(e) {
                return m.createElement(_.U, {
                    display: _.H.Flex,
                    flexGrow: 1,
                    flexDirection: _.J.Column,
                    alignItems: _.c.Center,
                    fullWidth: !0,
                    flexWrap: _.K.NoWrap,
                    padding: {
                        y: 1
                    }
                }, m.createElement(V.a, {
                    prefix: "cheer",
                    amount: e.amount,
                    bitsConfig: e.bitsConfig
                }), m.createElement(_.U, {
                    display: _.H.Flex,
                    padding: {
                        top: 1
                    },
                    flexGrow: 1,
                    flexDirection: _.J.Column,
                    alignItems: _.c.Center,
                    flexWrap: _.K.NoWrap
                }, m.createElement(_._21, {
                    type: _._26.H4,
                    bold: !0
                }, Object(f.d)("You got {bitsAmount,number} Bits!", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward")), m.createElement(_.P, {
                    padding: {
                        top: 1
                    }
                }, m.createElement(_._21, {
                    color: _.F.Alt2
                }, Object(f.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward"), m.createElement("br", null), Object(f.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), m.createElement(_.U, {
                    display: _.H.Flex,
                    padding: {
                        x: 1,
                        top: 3
                    },
                    alignSelf: _.d.Stretch,
                    justifyContent: _.T.Between
                }, m.createElement(_.u, {
                    onClick: e.onStartCheering
                }, Object(f.d)("Start Cheering", "Bits--WatchAdAward")), m.createElement(_.u, {
                    type: _.z.Hollow,
                    onClick: e.onWatchAnother,
                    disabled: !e.hasAdAvailable
                }, Object(f.d)("Watch Another", "Bits--WatchAdAward"))))
            },
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasAdAvailable: !0
                    }, t
                }
                return p.__extends(t, e), t.prototype.componentWillMount = function() {
                    return p.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return p.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, a(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), e !== k.Available && this.setState({
                                        hasAdAvailable: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return m.createElement(W, p.__assign({}, this.props, {
                        hasAdAvailable: this.state.hasAdAvailable
                    }))
                }, t
            }(m.Component),
            q = (n(860), function(e) {
                var t = Object(f.d)("Something's wrong!", "Bits--WatchAdError"),
                    n = Object(f.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                    i = "adserrorgeneric";
                switch (e.type) {
                    case o.Adblock:
                        i = "adserroradblock", n = Object(f.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                        break;
                    case o.LimitReached:
                        i = "adserrorlimit", t = Object(f.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(f.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                        break;
                    case o.ExitEarly:
                        n = Object(f.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                }
                var a = m.createElement(_.U, {
                    className: "watch-ad-error__footer",
                    display: _.H.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: _.d.Stretch,
                    justifyContent: _.T.Center
                }, m.createElement(_.u, {
                    onClick: e.onTryAgain
                }, Object(f.d)("Try Again", "Bits--WatchAdError")));
                return e.type === o.LimitReached && (a = m.createElement(_.U, {
                    className: "watch-ad-error__footer",
                    display: _.H.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: _.d.Stretch,
                    justifyContent: _.T.Between
                }, m.createElement(_.u, {
                    onClick: e.onClose
                }, Object(f.d)("Got It", "Bits--WatchAdError")), m.createElement(_.u, {
                    onClick: e.onTryAgain,
                    type: _.z.Hollow
                }, Object(f.d)("Buy Bits", "Bits--WatchAdError")))), m.createElement(_.U, {
                    padding: {
                        x: 1
                    },
                    display: _.H.Flex,
                    flexGrow: 1,
                    flexDirection: _.J.Column,
                    alignItems: _.c.Center,
                    fullWidth: !0,
                    flexWrap: _.K.NoWrap
                }, m.createElement(_.U, {
                    padding: {
                        y: 2
                    }
                }, m.createElement("img", {
                    className: "watch-ad-error__error-image",
                    src: R.a + "/light/static/1/" + i + ".png"
                })), m.createElement(_.U, {
                    padding: {
                        bottom: 1
                    }
                }, m.createElement(_._21, {
                    type: _._26.H4,
                    bold: !0
                }, t)), m.createElement(_._21, {
                    color: _.F.Alt2
                }, n), a)
            }),
            z = n(861);
        n(862);
        ! function(e) {
            e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
        }(I || (I = {}));
        var $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        wateb: I.Inactive,
                        watebError: null,
                        bitsAwarded: 0
                    }, t.onBuyPopupClose = function(e) {
                        Object(D.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t.onAdBitsAwarded = function(e) {
                        t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                            wateb: I.Awarded,
                            bitsAwarded: e
                        })
                    }, t.handleWatchAdClick = function() {
                        return p.__awaiter(t, void 0, void 0, function() {
                            return p.__generator(this, function(e) {
                                return this.props.data && this.props.data.currentUser && this.props.data.user ? (this.props.showWatchAdModal({
                                    tuid: this.props.data.currentUser.idSHA1,
                                    onBitsAwarded: this.onAdBitsAwarded,
                                    onError: this.receiveAdErrorState,
                                    requestRef: S.c.ShowAdButton,
                                    channelID: this.props.data.user.id
                                }), [2]) : [2]
                            })
                        })
                    }, t.receiveAdErrorState = function(e) {
                        t.setState({
                            wateb: I.Error,
                            watebError: e
                        })
                    }, t.resetAdErrorState = function() {
                        t.state.wateb === I.Error && (t.setState({
                            wateb: I.Inactive
                        }), t.props.data && t.props.data.refetch())
                    }, t
                }
                return p.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return !e.adModalOpen
                }, t.prototype.render = function() {
                    var e = {
                            border: !0,
                            background: _.m.Base,
                            fullWidth: !0,
                            elevation: 3
                        },
                        t = w({
                            "bits-buy-card": !0,
                            "bits-buy-card__chat-tooltip": this.props.location === S.b.ChatTooltip
                        }),
                        n = null;
                    if (this.props.location === S.b.ChatTooltip && (n = m.createElement("button", {
                            className: "bits-buy-card__close",
                            onClick: this.props.onClose,
                            "data-a-target": "bits-buy-card-close-button"
                        }, m.createElement(_._8, {
                            asset: _._9.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return m.createElement(_._17, p.__assign({
                        className: t,
                        "data-a-target": "bits-buy-card-loading",
                        display: _.H.Flex,
                        flexDirection: _.J.Column,
                        alignItems: _.c.Center,
                        justifyContent: _.T.Center,
                        textAlign: _._22.Center
                    }, e), m.createElement(_.X, {
                        delay: 0
                    }), m.createElement(_.U, {
                        padding: {
                            top: 2
                        }
                    }, m.createElement(_._21, {
                        italic: !0
                    }, Object(f.d)("Fetching bits", "Bits--BuyCard"))));
                    if (this.props.data.error) return m.createElement(_.U, p.__assign({
                        className: w(t, "bits-buy-card--shorter"),
                        display: _.H.Flex,
                        flexDirection: _.J.Column,
                        alignItems: _.c.Center,
                        justifyContent: _.T.Center,
                        padding: 2,
                        textAlign: _._22.Center,
                        "data-a-target": "bits-buy-card-error"
                    }, e), n, m.createElement(_._21, {
                        italic: !0
                    }, Object(f.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                    var i = this.renderWatebCard();
                    if (i) return m.createElement(_._17, p.__assign({
                        className: w(t, "bits-buy-card--shorter"),
                        display: _.H.Flex,
                        flexDirection: _.J.Column,
                        alignItems: _.c.Center,
                        justifyContent: _.T.Center,
                        textAlign: _._22.Center,
                        padding: 1
                    }, e), n, i);
                    var a = [];
                    this.props.data.currentUser ? a = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (a = this.props.data.bitsOffers);
                    var r = a.filter(function(e) {
                            return e.type === M.b
                        }).some(function(e) {
                            return e.includesVAT
                        }),
                        s = this.props.data.user ? this.props.data.user.id : "",
                        o = m.createElement(B, {
                            offers: a,
                            fullsize: this.props.fullsize,
                            hidePromos: this.props.hidePromos,
                            hideWateb: this.props.hideWateb,
                            bitsConfig: this.props.bitsConfig,
                            channelID: s,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.closeAllBits,
                            currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                            handleWatchAdClick: this.handleWatchAdClick,
                            location: this.props.location,
                            onBuyPopupClose: this.onBuyPopupClose,
                            onClose: this.props.onClose,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction
                        }),
                        l = null;
                    return this.props.location === S.b.ChatTooltip && (l = m.createElement(H, {
                        bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                        minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                        pricesIncludeVAT: r
                    })), m.createElement(_._17, p.__assign({
                        className: t,
                        padding: {
                            top: 1
                        },
                        display: _.H.Flex,
                        flexDirection: _.J.Column,
                        "data-a-target": "bits-buy-card"
                    }, e), n, l, o)
                }, t.prototype.renderWatebCard = function() {
                    if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                        case I.Awarded:
                            return m.createElement(G, {
                                bitsConfig: this.props.bitsConfig,
                                amount: this.state.bitsAwarded,
                                onStartCheering: this.props.onClose,
                                onWatchAnother: this.handleWatchAdClick,
                                truexUserID: this.props.data.currentUser.idSHA1
                            });
                        case I.Error:
                            return m.createElement(q, {
                                type: this.state.watebError || o.Unknown,
                                onClose: this.props.onClose,
                                onTryAgain: this.resetAdErrorState
                            });
                        default:
                            return !1
                    }
                }, t = p.__decorate([Object(b.a)(z, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(m.Component),
            J = $,
            Q = Object(l.a)(r, s)(J);
        n.d(t, !1, function() {
            return r
        }), n.d(t, !1, function() {
            return s
        }), n.d(t, "a", function() {
            return Q
        })
    },
    839: function(e, t, n) {
        "use strict";

        function i(e) {
            return "https://www.twitch.tv/" + e + "/subscribe?ref=in_chat_subscriber_link"
        }

        function a(e) {
            switch (e.clickAction) {
                case s.d:
                    return e.clickURL;
                case s.b:
                    return e.channelName ? i(e.channelName) : "";
                case s.c:
                    return c;
                default:
                    return ""
            }
        }
        n.d(t, "a", function() {
            return u
        });
        var r = n(1),
            s = (n.n(r), n(827)),
            o = n(3),
            l = n(879),
            c = (n.n(l), "https://www.twitch.tv/products/turbo?ref=chat_badge"),
            u = function(e) {
                var t = e.badge,
                    n = r.createElement("img", {
                        alt: t.title,
                        className: "chat-badge",
                        src: t.image1x,
                        srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                    }),
                    i = a(t);
                return "" !== i && (n = r.createElement("a", {
                    href: i,
                    target: "_blank"
                }, n)), r.createElement(o._30, {
                    key: t.image1x,
                    label: t.title,
                    display: o.H.Inline,
                    align: o._31.Left,
                    offsetY: "0.9rem",
                    "data-a-target": "chat-badge"
                }, n)
            }
    },
    840: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            DarkMode: "darkMode",
            FollowerDuration: "followerDuration",
            FollowerMode: "followerMode",
            HideChat: "hideChat",
            ShowMessageFlags: "showMessageFlags",
            ShowModActions: "showModerationActions",
            ShowModIcons: "showModIcons",
            ShowTimestamps: "showTimestamps",
            SlowMode: "slowMode"
        }
    },
    844: function(e, t, n) {
        "use strict";
        var i = n(1),
            a = n(2),
            r = n(259),
            s = n(373),
            o = n(3),
            l = (n(869), {
                themed: !0,
                dark: {
                    "1x": r.a + "/dark/animated/1/cheertutorial.gif"
                },
                light: {
                    "1x": r.a + "/light/animated/1/cheertutorial.gif"
                }
            }),
            c = function() {
                return i.createElement(o.U, {
                    display: o.H.Flex,
                    padding: {
                        top: 5
                    },
                    flexGrow: 1,
                    flexDirection: o.J.Column,
                    justifyContent: o.T.Center,
                    alignItems: o.c.Center
                }, i.createElement(o._21, {
                    type: o._26.H4,
                    bold: !0
                }, i.createElement(s.a, {
                    className: "cheermote-help__tutorial-image",
                    sources: l
                }), Object(a.d)("How to Cheer", "Bits--CheermoteHelp")), i.createElement("p", {
                    className: "t-bits-card__contents-body t-bits-card__contents-body--narrow"
                }, Object(a.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp")))
            };
        n.d(t, "a", function() {
            return c
        })
    },
    845: function(e, t, n) {
        "use strict";

        function i() {
            var e = o.k.get(c, {});
            return s.__assign({
                lastUsedFollowerDurations: {},
                showAutoModActions: !0,
                showMessageFlags: !0,
                showModerationActions: !0,
                showModIcons: !1,
                showTimestamps: !1,
                zachModeStatus: l
            }, e)
        }

        function a(e, t) {
            var n = i();
            n[e] = t, o.k.set(c, n)
        }

        function r(e, t) {
            var n = i();
            n.lastUsedFollowerDurations[e] = t, o.k.set(c, n)
        }
        var s = n(0),
            o = n(2),
            l = "control";
        t.a = i, t.b = a, t.c = r;
        var c = "chatSettings"
    },
    846: function(e, t, n) {
        "use strict";

        function i(e, t, n, i) {
            return {
                type: e,
                id: Object(a.a)(t + "-mod"),
                userLogin: t,
                reason: n,
                duration: i
            }
        }
        t.a = i;
        var a = n(807)
    },
    847: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n(1),
            a = (n.n(i), n(839)),
            r = function(e) {
                var t = Object.keys(e.badgesToRender).map(function(t) {
                        var n = e.badgesToRender[t],
                            r = e.badgeSets.getBadge(t, n);
                        return null === r ? null : i.createElement(a.a, {
                            key: r.setID + "/" + r.version,
                            badge: r
                        })
                    }),
                    n = t.filter(function(e) {
                        return null !== e
                    });
                return i.createElement("span", null, n)
            }
    },
    848: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsChatCard_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "curator"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcaster"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "game"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "thumbnailURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 233
            }
        };
        n.loc.source = {
            body: "query ClipsChatCard_Clip($slug: ID!) {\n  clip(slug: $slug) {\n    id\n    slug\n    url\n    curator {\n      displayName\n    }\n    broadcaster {\n      displayName\n    }\n    game {\n      displayName\n    }\n    title\n    thumbnailURL\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    849: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return c
        }), n.d(t, "c", function() {
            return u
        });
        var i = n(0),
            a = n(2),
            r = n(12),
            s = n(840),
            o = n(826),
            l = function(e) {
                a.m.track(r.SpadeEventType.ChatSettingsOpened, Object(o.a)(e))
            },
            c = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    setting_name: e.settingName,
                    new_value: e.newValue.toString()
                });
                a.m.track(r.SpadeEventType.ChatSettingsChanged, t)
            },
            u = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    setting_name: s.a.FollowerDuration,
                    new_value: e.newValue.toString(),
                    follower_mode_on: e.followerModeOn
                });
                a.m.track(r.SpadeEventType.ChatSettingsChanged, t)
            }
    },
    855: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WatchAdModal_Redeeem"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemTrueXAdInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "redeemTrueXAd"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "grantedBits"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 114
            }
        };
        n.loc.source = {
            body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\n  redeemTrueXAd(input:$input) {\n    grantedBits\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    856: function(e, t) {},
    857: function(e, t) {},
    858: function(e, t) {},
    859: function(e, t) {},
    86: function(e, t, n) {
        "use strict";

        function i(e) {
            return function(t) {
                return function(n) {
                    function i(t) {
                        var i = n.call(this, t) || this;
                        i.unsubscribers = {};
                        var a = {};
                        return e.map(function(e) {
                            e.skip && e.skip(t) || (a[i.getTopic(e.topic, t)] = {
                                isSubscribing: !0
                            })
                        }), i.state = {
                            status: a,
                            messages: {}
                        }, i
                    }
                    return a.__extends(i, n), i.prototype.componentDidMount = function() {
                        var t = this;
                        e.map(function(e) {
                            if (!e.skip || !e.skip(t.props)) {
                                var n = t.getTopic(e.topic, t.props);
                                t.unsubscribers[n] = s.j.subscribe({
                                    topic: n,
                                    success: function() {
                                        t.setState(function(e) {
                                            return {
                                                status: a.__assign({}, e.status, (t = {}, t[n] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        t.setState(function(t) {
                                            return {
                                                status: a.__assign({}, t.status, (i = {}, i[n] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, i))
                                            };
                                            var i
                                        })
                                    },
                                    onMessage: function(n) {
                                        e.mapMessageTypesToProps[n.type || ""] ? t.setState(function(t) {
                                            return {
                                                messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps[n.type || ""]] = n, i))
                                            };
                                            var i
                                        }) : e.mapMessageTypesToProps["*"] && t.setState(function(t) {
                                            return {
                                                messages: a.__assign({}, t.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = n, i))
                                            };
                                            var i
                                        })
                                    }
                                })
                            }
                        })
                    }, i.prototype.componentWillReceiveProps = function(t) {
                        var n = this,
                            i = {},
                            r = {};
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t)) {
                                var o = n.getTopic(e.topic, t);
                                i[o] || (i[o] = {
                                    isSubscribing: !0
                                }), n.unsubscribers[o] ? r[o] = n.unsubscribers[o] : r[o] = s.j.subscribe({
                                    topic: o,
                                    success: function() {
                                        n.setState(function(e) {
                                            return {
                                                status: a.__assign({}, e.status, (t = {}, t[o] = {
                                                    isSubscribing: !1
                                                }, t))
                                            };
                                            var t
                                        })
                                    },
                                    failure: function(e) {
                                        n.setState(function(t) {
                                            return {
                                                status: a.__assign({}, t.status, (n = {}, n[o] = {
                                                    error: e,
                                                    isSubscribing: !1
                                                }, n))
                                            };
                                            var n
                                        })
                                    },
                                    onMessage: function(t) {
                                        e.mapMessageTypesToProps[t.type || ""] ? n.setState(function(n) {
                                            return {
                                                messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps[t.type || ""]] = t, i))
                                            };
                                            var i
                                        }) : e.mapMessageTypesToProps["*"] && n.setState(function(n) {
                                            return {
                                                messages: a.__assign({}, n.messages, (i = {}, i[e.mapMessageTypesToProps["*"]] = t, i))
                                            };
                                            var i
                                        })
                                    }
                                })
                            }
                        }), Object.keys(this.unsubscribers).forEach(function(e) {
                            r[e] || n.unsubscribers[e]()
                        }), this.unsubscribers = r, this.setState(function(e) {
                            return {
                                status: a.__assign({}, e.status, i)
                            }
                        })
                    }, i.prototype.componentWillUnmount = function() {
                        var e = this;
                        Object.keys(this.unsubscribers).map(function(t) {
                            return e.unsubscribers[t]()
                        })
                    }, i.prototype.render = function() {
                        var e = {
                            pubsub: {
                                messages: this.state.messages,
                                status: this.state.status
                            }
                        };
                        return r.createElement(t, a.__assign({}, this.props, e))
                    }, i.prototype.getTopic = function(e, t) {
                        return "string" == typeof e ? e : e(t)
                    }, i
                }(r.Component)
            }
        }
        var a = n(0),
            r = n(1),
            s = n(2);
        n.d(t, "a", function() {
            return i
        })
    },
    860: function(e, t) {},
    861: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Bits_BuyCard_Offers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 528
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\n\nquery Bits_BuyCard_Offers($withChannel: Boolean!, $isLoggedIn: Boolean!, $channelLogin: String!) {\n  bitsOffers @skip(if: $isLoggedIn) {\n    ...bitsOffersFragment\n  }\n  currentUser @include(if: $isLoggedIn) {\n    id\n    idSHA1\n    bitsBalance\n    bitsOffers {\n      ...bitsOffersFragment\n    }\n  }\n  user(login: $channelLogin) @include(if: $withChannel) {\n    id\n    displayName\n    cheer {\n      id\n      settings {\n        cheerMinimumBits\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(834).definitions)), e.exports = i
    },
    862: function(e, t) {},
    864: function(e, t, n) {
        (function(e, i) {
            var a;
            (function() {
                function r(e, t) {
                    return e.set(t[0], t[1]), e
                }

                function s(e, t) {
                    return e.add(t), e
                }

                function o(e, t, n) {
                    switch (n.length) {
                        case 0:
                            return e.call(t);
                        case 1:
                            return e.call(t, n[0]);
                        case 2:
                            return e.call(t, n[0], n[1]);
                        case 3:
                            return e.call(t, n[0], n[1], n[2])
                    }
                    return e.apply(t, n)
                }

                function l(e, t, n, i) {
                    for (var a = -1, r = null == e ? 0 : e.length; ++a < r;) {
                        var s = e[a];
                        t(i, s, n(s), e)
                    }
                    return i
                }

                function c(e, t) {
                    for (var n = -1, i = null == e ? 0 : e.length; ++n < i && !1 !== t(e[n], n, e););
                    return e
                }

                function u(e, t) {
                    for (var n = null == e ? 0 : e.length; n-- && !1 !== t(e[n], n, e););
                    return e
                }

                function d(e, t) {
                    for (var n = -1, i = null == e ? 0 : e.length; ++n < i;)
                        if (!t(e[n], n, e)) return !1;
                    return !0
                }

                function p(e, t) {
                    for (var n = -1, i = null == e ? 0 : e.length, a = 0, r = []; ++n < i;) {
                        var s = e[n];
                        t(s, n, e) && (r[a++] = s)
                    }
                    return r
                }

                function m(e, t) {
                    return !!(null == e ? 0 : e.length) && E(e, t, 0) > -1
                }

                function h(e, t, n) {
                    for (var i = -1, a = null == e ? 0 : e.length; ++i < a;)
                        if (n(t, e[i])) return !0;
                    return !1
                }

                function f(e, t) {
                    for (var n = -1, i = null == e ? 0 : e.length, a = Array(i); ++n < i;) a[n] = t(e[n], n, e);
                    return a
                }

                function g(e, t) {
                    for (var n = -1, i = t.length, a = e.length; ++n < i;) e[a + n] = t[n];
                    return e
                }

                function b(e, t, n, i) {
                    var a = -1,
                        r = null == e ? 0 : e.length;
                    for (i && r && (n = e[++a]); ++a < r;) n = t(n, e[a], a, e);
                    return n
                }

                function v(e, t, n, i) {
                    var a = null == e ? 0 : e.length;
                    for (i && a && (n = e[--a]); a--;) n = t(n, e[a], a, e);
                    return n
                }

                function k(e, t) {
                    for (var n = -1, i = null == e ? 0 : e.length; ++n < i;)
                        if (t(e[n], n, e)) return !0;
                    return !1
                }

                function y(e) {
                    return e.split("")
                }

                function S(e) {
                    return e.match(Bt) || []
                }

                function _(e, t, n) {
                    var i;
                    return n(e, function(e, n, a) {
                        if (t(e, n, a)) return i = n, !1
                    }), i
                }

                function C(e, t, n, i) {
                    for (var a = e.length, r = n + (i ? 1 : -1); i ? r-- : ++r < a;)
                        if (t(e[r], r, e)) return r;
                    return -1
                }

                function E(e, t, n) {
                    return t === t ? Y(e, t, n) : C(e, w, n)
                }

                function N(e, t, n, i) {
                    for (var a = n - 1, r = e.length; ++a < r;)
                        if (i(e[a], t)) return a;
                    return -1
                }

                function w(e) {
                    return e !== e
                }

                function D(e, t) {
                    var n = null == e ? 0 : e.length;
                    return n ? x(e, t) / n : Pe
                }

                function T(e) {
                    return function(t) {
                        return null == t ? ae : t[e]
                    }
                }

                function I(e) {
                    return function(t) {
                        return null == e ? ae : e[t]
                    }
                }

                function U(e, t, n, i, a) {
                    return a(e, function(e, a, r) {
                        n = i ? (i = !1, e) : t(n, e, a, r)
                    }), n
                }

                function O(e, t) {
                    var n = e.length;
                    for (e.sort(t); n--;) e[n] = e[n].value;
                    return e
                }

                function x(e, t) {
                    for (var n, i = -1, a = e.length; ++i < a;) {
                        var r = t(e[i]);
                        r !== ae && (n = n === ae ? r : n + r)
                    }
                    return n
                }

                function M(e, t) {
                    for (var n = -1, i = Array(e); ++n < e;) i[n] = t(n);
                    return i
                }

                function R(e, t) {
                    return f(t, function(t) {
                        return [t, e[t]]
                    })
                }

                function P(e) {
                    return function(t) {
                        return e(t)
                    }
                }

                function F(e, t) {
                    return f(t, function(t) {
                        return e[t]
                    })
                }

                function j(e, t) {
                    return e.has(t)
                }

                function A(e, t) {
                    for (var n = -1, i = e.length; ++n < i && E(t, e[n], 0) > -1;);
                    return n
                }

                function L(e, t) {
                    for (var n = e.length; n-- && E(t, e[n], 0) > -1;);
                    return n
                }

                function B(e, t) {
                    for (var n = e.length, i = 0; n--;) e[n] === t && ++i;
                    return i
                }

                function H(e) {
                    return "\\" + Tn[e]
                }

                function V(e, t) {
                    return null == e ? ae : e[t]
                }

                function W(e) {
                    return kn.test(e)
                }

                function G(e) {
                    return yn.test(e)
                }

                function q(e) {
                    for (var t, n = []; !(t = e.next()).done;) n.push(t.value);
                    return n
                }

                function z(e) {
                    var t = -1,
                        n = Array(e.size);
                    return e.forEach(function(e, i) {
                        n[++t] = [i, e]
                    }), n
                }

                function $(e, t) {
                    return function(n) {
                        return e(t(n))
                    }
                }

                function J(e, t) {
                    for (var n = -1, i = e.length, a = 0, r = []; ++n < i;) {
                        var s = e[n];
                        s !== t && s !== ue || (e[n] = ue, r[a++] = n)
                    }
                    return r
                }

                function Q(e) {
                    var t = -1,
                        n = Array(e.size);
                    return e.forEach(function(e) {
                        n[++t] = e
                    }), n
                }

                function K(e) {
                    var t = -1,
                        n = Array(e.size);
                    return e.forEach(function(e) {
                        n[++t] = [e, e]
                    }), n
                }

                function Y(e, t, n) {
                    for (var i = n - 1, a = e.length; ++i < a;)
                        if (e[i] === t) return i;
                    return -1
                }

                function X(e, t, n) {
                    for (var i = n + 1; i--;)
                        if (e[i] === t) return i;
                    return i
                }

                function Z(e) {
                    return W(e) ? te(e) : qn(e)
                }

                function ee(e) {
                    return W(e) ? ne(e) : y(e)
                }

                function te(e) {
                    for (var t = bn.lastIndex = 0; bn.test(e);) ++t;
                    return t
                }

                function ne(e) {
                    return e.match(bn) || []
                }

                function ie(e) {
                    return e.match(vn) || []
                }
                var ae, re = 200,
                    se = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
                    oe = "Expected a function",
                    le = "__lodash_hash_undefined__",
                    ce = 500,
                    ue = "__lodash_placeholder__",
                    de = 1,
                    pe = 2,
                    me = 4,
                    he = 1,
                    fe = 2,
                    ge = 1,
                    be = 2,
                    ve = 4,
                    ke = 8,
                    ye = 16,
                    Se = 32,
                    _e = 64,
                    Ce = 128,
                    Ee = 256,
                    Ne = 512,
                    we = 30,
                    De = "...",
                    Te = 800,
                    Ie = 16,
                    Ue = 1,
                    Oe = 2,
                    xe = 1 / 0,
                    Me = 9007199254740991,
                    Re = 1.7976931348623157e308,
                    Pe = NaN,
                    Fe = 4294967295,
                    je = Fe - 1,
                    Ae = Fe >>> 1,
                    Le = [
                        ["ary", Ce],
                        ["bind", ge],
                        ["bindKey", be],
                        ["curry", ke],
                        ["curryRight", ye],
                        ["flip", Ne],
                        ["partial", Se],
                        ["partialRight", _e],
                        ["rearg", Ee]
                    ],
                    Be = "[object Arguments]",
                    He = "[object Array]",
                    Ve = "[object AsyncFunction]",
                    We = "[object Boolean]",
                    Ge = "[object Date]",
                    qe = "[object DOMException]",
                    ze = "[object Error]",
                    $e = "[object Function]",
                    Je = "[object GeneratorFunction]",
                    Qe = "[object Map]",
                    Ke = "[object Number]",
                    Ye = "[object Null]",
                    Xe = "[object Object]",
                    Ze = "[object Proxy]",
                    et = "[object RegExp]",
                    tt = "[object Set]",
                    nt = "[object String]",
                    it = "[object Symbol]",
                    at = "[object Undefined]",
                    rt = "[object WeakMap]",
                    st = "[object WeakSet]",
                    ot = "[object ArrayBuffer]",
                    lt = "[object DataView]",
                    ct = "[object Float32Array]",
                    ut = "[object Float64Array]",
                    dt = "[object Int8Array]",
                    pt = "[object Int16Array]",
                    mt = "[object Int32Array]",
                    ht = "[object Uint8Array]",
                    ft = "[object Uint8ClampedArray]",
                    gt = "[object Uint16Array]",
                    bt = "[object Uint32Array]",
                    vt = /\b__p \+= '';/g,
                    kt = /\b(__p \+=) '' \+/g,
                    yt = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
                    St = /&(?:amp|lt|gt|quot|#39);/g,
                    _t = /[&<>"']/g,
                    Ct = RegExp(St.source),
                    Et = RegExp(_t.source),
                    Nt = /<%-([\s\S]+?)%>/g,
                    wt = /<%([\s\S]+?)%>/g,
                    Dt = /<%=([\s\S]+?)%>/g,
                    Tt = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                    It = /^\w*$/,
                    Ut = /^\./,
                    Ot = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
                    xt = /[\\^$.*+?()[\]{}|]/g,
                    Mt = RegExp(xt.source),
                    Rt = /^\s+|\s+$/g,
                    Pt = /^\s+/,
                    Ft = /\s+$/,
                    jt = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                    At = /\{\n\/\* \[wrapped with (.+)\] \*/,
                    Lt = /,? & /,
                    Bt = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
                    Ht = /\\(\\)?/g,
                    Vt = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
                    Wt = /\w*$/,
                    Gt = /^[-+]0x[0-9a-f]+$/i,
                    qt = /^0b[01]+$/i,
                    zt = /^\[object .+?Constructor\]$/,
                    $t = /^0o[0-7]+$/i,
                    Jt = /^(?:0|[1-9]\d*)$/,
                    Qt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
                    Kt = /($^)/,
                    Yt = /['\n\r\u2028\u2029\\]/g,
                    Xt = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
                    Zt = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
                    en = "[" + Zt + "]",
                    tn = "[" + Xt + "]",
                    nn = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
                    an = "[^\\ud800-\\udfff" + Zt + "\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
                    rn = "\\ud83c[\\udffb-\\udfff]",
                    sn = "(?:\\ud83c[\\udde6-\\uddff]){2}",
                    on = "[\\ud800-\\udbff][\\udc00-\\udfff]",
                    ln = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
                    cn = "(?:" + nn + "|" + an + ")",
                    un = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",
                    dn = "(?:\\u200d(?:" + ["[^\\ud800-\\udfff]", sn, on].join("|") + ")[\\ufe0e\\ufe0f]?" + un + ")*",
                    pn = "[\\ufe0e\\ufe0f]?" + un + dn,
                    mn = "(?:" + ["[\\u2700-\\u27bf]", sn, on].join("|") + ")" + pn,
                    hn = "(?:" + ["[^\\ud800-\\udfff]" + tn + "?", tn, sn, on, "[\\ud800-\\udfff]"].join("|") + ")",
                    fn = RegExp("['’]", "g"),
                    gn = RegExp(tn, "g"),
                    bn = RegExp(rn + "(?=" + rn + ")|" + hn + pn, "g"),
                    vn = RegExp([ln + "?" + nn + "+(?:['’](?:d|ll|m|re|s|t|ve))?(?=" + [en, ln, "$"].join("|") + ")", "(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=" + [en, ln + cn, "$"].join("|") + ")", ln + "?" + cn + "+(?:['’](?:d|ll|m|re|s|t|ve))?", ln + "+(?:['’](?:D|LL|M|RE|S|T|VE))?", "\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)", "\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)", "\\d+", mn].join("|"), "g"),
                    kn = RegExp("[\\u200d\\ud800-\\udfff" + Xt + "\\ufe0e\\ufe0f]"),
                    yn = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
                    Sn = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"],
                    _n = -1,
                    Cn = {};
                Cn[ct] = Cn[ut] = Cn[dt] = Cn[pt] = Cn[mt] = Cn[ht] = Cn[ft] = Cn[gt] = Cn[bt] = !0, Cn[Be] = Cn[He] = Cn[ot] = Cn[We] = Cn[lt] = Cn[Ge] = Cn[ze] = Cn[$e] = Cn[Qe] = Cn[Ke] = Cn[Xe] = Cn[et] = Cn[tt] = Cn[nt] = Cn[rt] = !1;
                var En = {};
                En[Be] = En[He] = En[ot] = En[lt] = En[We] = En[Ge] = En[ct] = En[ut] = En[dt] = En[pt] = En[mt] = En[Qe] = En[Ke] = En[Xe] = En[et] = En[tt] = En[nt] = En[it] = En[ht] = En[ft] = En[gt] = En[bt] = !0, En[ze] = En[$e] = En[rt] = !1;
                var Nn = {
                        "À": "A",
                        "Á": "A",
                        "Â": "A",
                        "Ã": "A",
                        "Ä": "A",
                        "Å": "A",
                        "à": "a",
                        "á": "a",
                        "â": "a",
                        "ã": "a",
                        "ä": "a",
                        "å": "a",
                        "Ç": "C",
                        "ç": "c",
                        "Ð": "D",
                        "ð": "d",
                        "È": "E",
                        "É": "E",
                        "Ê": "E",
                        "Ë": "E",
                        "è": "e",
                        "é": "e",
                        "ê": "e",
                        "ë": "e",
                        "Ì": "I",
                        "Í": "I",
                        "Î": "I",
                        "Ï": "I",
                        "ì": "i",
                        "í": "i",
                        "î": "i",
                        "ï": "i",
                        "Ñ": "N",
                        "ñ": "n",
                        "Ò": "O",
                        "Ó": "O",
                        "Ô": "O",
                        "Õ": "O",
                        "Ö": "O",
                        "Ø": "O",
                        "ò": "o",
                        "ó": "o",
                        "ô": "o",
                        "õ": "o",
                        "ö": "o",
                        "ø": "o",
                        "Ù": "U",
                        "Ú": "U",
                        "Û": "U",
                        "Ü": "U",
                        "ù": "u",
                        "ú": "u",
                        "û": "u",
                        "ü": "u",
                        "Ý": "Y",
                        "ý": "y",
                        "ÿ": "y",
                        "Æ": "Ae",
                        "æ": "ae",
                        "Þ": "Th",
                        "þ": "th",
                        "ß": "ss",
                        "Ā": "A",
                        "Ă": "A",
                        "Ą": "A",
                        "ā": "a",
                        "ă": "a",
                        "ą": "a",
                        "Ć": "C",
                        "Ĉ": "C",
                        "Ċ": "C",
                        "Č": "C",
                        "ć": "c",
                        "ĉ": "c",
                        "ċ": "c",
                        "č": "c",
                        "Ď": "D",
                        "Đ": "D",
                        "ď": "d",
                        "đ": "d",
                        "Ē": "E",
                        "Ĕ": "E",
                        "Ė": "E",
                        "Ę": "E",
                        "Ě": "E",
                        "ē": "e",
                        "ĕ": "e",
                        "ė": "e",
                        "ę": "e",
                        "ě": "e",
                        "Ĝ": "G",
                        "Ğ": "G",
                        "Ġ": "G",
                        "Ģ": "G",
                        "ĝ": "g",
                        "ğ": "g",
                        "ġ": "g",
                        "ģ": "g",
                        "Ĥ": "H",
                        "Ħ": "H",
                        "ĥ": "h",
                        "ħ": "h",
                        "Ĩ": "I",
                        "Ī": "I",
                        "Ĭ": "I",
                        "Į": "I",
                        "İ": "I",
                        "ĩ": "i",
                        "ī": "i",
                        "ĭ": "i",
                        "į": "i",
                        "ı": "i",
                        "Ĵ": "J",
                        "ĵ": "j",
                        "Ķ": "K",
                        "ķ": "k",
                        "ĸ": "k",
                        "Ĺ": "L",
                        "Ļ": "L",
                        "Ľ": "L",
                        "Ŀ": "L",
                        "Ł": "L",
                        "ĺ": "l",
                        "ļ": "l",
                        "ľ": "l",
                        "ŀ": "l",
                        "ł": "l",
                        "Ń": "N",
                        "Ņ": "N",
                        "Ň": "N",
                        "Ŋ": "N",
                        "ń": "n",
                        "ņ": "n",
                        "ň": "n",
                        "ŋ": "n",
                        "Ō": "O",
                        "Ŏ": "O",
                        "Ő": "O",
                        "ō": "o",
                        "ŏ": "o",
                        "ő": "o",
                        "Ŕ": "R",
                        "Ŗ": "R",
                        "Ř": "R",
                        "ŕ": "r",
                        "ŗ": "r",
                        "ř": "r",
                        "Ś": "S",
                        "Ŝ": "S",
                        "Ş": "S",
                        "Š": "S",
                        "ś": "s",
                        "ŝ": "s",
                        "ş": "s",
                        "š": "s",
                        "Ţ": "T",
                        "Ť": "T",
                        "Ŧ": "T",
                        "ţ": "t",
                        "ť": "t",
                        "ŧ": "t",
                        "Ũ": "U",
                        "Ū": "U",
                        "Ŭ": "U",
                        "Ů": "U",
                        "Ű": "U",
                        "Ų": "U",
                        "ũ": "u",
                        "ū": "u",
                        "ŭ": "u",
                        "ů": "u",
                        "ű": "u",
                        "ų": "u",
                        "Ŵ": "W",
                        "ŵ": "w",
                        "Ŷ": "Y",
                        "ŷ": "y",
                        "Ÿ": "Y",
                        "Ź": "Z",
                        "Ż": "Z",
                        "Ž": "Z",
                        "ź": "z",
                        "ż": "z",
                        "ž": "z",
                        "Ĳ": "IJ",
                        "ĳ": "ij",
                        "Œ": "Oe",
                        "œ": "oe",
                        "ŉ": "'n",
                        "ſ": "s"
                    },
                    wn = {
                        "&": "&amp;",
                        "<": "&lt;",
                        ">": "&gt;",
                        '"': "&quot;",
                        "'": "&#39;"
                    },
                    Dn = {
                        "&amp;": "&",
                        "&lt;": "<",
                        "&gt;": ">",
                        "&quot;": '"',
                        "&#39;": "'"
                    },
                    Tn = {
                        "\\": "\\",
                        "'": "'",
                        "\n": "n",
                        "\r": "r",
                        "\u2028": "u2028",
                        "\u2029": "u2029"
                    },
                    In = parseFloat,
                    Un = parseInt,
                    On = "object" == typeof e && e && e.Object === Object && e,
                    xn = "object" == typeof self && self && self.Object === Object && self,
                    Mn = On || xn || Function("return this")(),
                    Rn = "object" == typeof t && t && !t.nodeType && t,
                    Pn = Rn && "object" == typeof i && i && !i.nodeType && i,
                    Fn = Pn && Pn.exports === Rn,
                    jn = Fn && On.process,
                    An = function() {
                        try {
                            return jn && jn.binding && jn.binding("util")
                        } catch (e) {}
                    }(),
                    Ln = An && An.isArrayBuffer,
                    Bn = An && An.isDate,
                    Hn = An && An.isMap,
                    Vn = An && An.isRegExp,
                    Wn = An && An.isSet,
                    Gn = An && An.isTypedArray,
                    qn = T("length"),
                    zn = I(Nn),
                    $n = I(wn),
                    Jn = I(Dn),
                    Qn = function e(t) {
                        function n(e) {
                            if (rl(e) && !gp(e) && !(e instanceof y)) {
                                if (e instanceof a) return e;
                                if (gu.call(e, "__wrapped__")) return ts(e)
                            }
                            return new a(e)
                        }

                        function i() {}

                        function a(e, t) {
                            this.__wrapped__ = e, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = ae
                        }

                        function y(e) {
                            this.__wrapped__ = e, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Fe, this.__views__ = []
                        }

                        function I() {
                            var e = new y(this.__wrapped__);
                            return e.__actions__ = ja(this.__actions__), e.__dir__ = this.__dir__, e.__filtered__ = this.__filtered__, e.__iteratees__ = ja(this.__iteratees__), e.__takeCount__ = this.__takeCount__, e.__views__ = ja(this.__views__), e
                        }

                        function Y() {
                            if (this.__filtered__) {
                                var e = new y(this);
                                e.__dir__ = -1, e.__filtered__ = !0
                            } else e = this.clone(), e.__dir__ *= -1;
                            return e
                        }

                        function te() {
                            var e = this.__wrapped__.value(),
                                t = this.__dir__,
                                n = gp(e),
                                i = t < 0,
                                a = n ? e.length : 0,
                                r = wr(0, a, this.__views__),
                                s = r.start,
                                o = r.end,
                                l = o - s,
                                c = i ? o : s - 1,
                                u = this.__iteratees__,
                                d = u.length,
                                p = 0,
                                m = zu(l, this.__takeCount__);
                            if (!n || !i && a == l && m == l) return va(e, this.__actions__);
                            var h = [];
                            e: for (; l-- && p < m;) {
                                c += t;
                                for (var f = -1, g = e[c]; ++f < d;) {
                                    var b = u[f],
                                        v = b.iteratee,
                                        k = b.type,
                                        y = v(g);
                                    if (k == Oe) g = y;
                                    else if (!y) {
                                        if (k == Ue) continue e;
                                        break e
                                    }
                                }
                                h[p++] = g
                            }
                            return h
                        }

                        function ne(e) {
                            var t = -1,
                                n = null == e ? 0 : e.length;
                            for (this.clear(); ++t < n;) {
                                var i = e[t];
                                this.set(i[0], i[1])
                            }
                        }

                        function Bt() {
                            this.__data__ = nd ? nd(null) : {}, this.size = 0
                        }

                        function Xt(e) {
                            var t = this.has(e) && delete this.__data__[e];
                            return this.size -= t ? 1 : 0, t
                        }

                        function Zt(e) {
                            var t = this.__data__;
                            if (nd) {
                                var n = t[e];
                                return n === le ? ae : n
                            }
                            return gu.call(t, e) ? t[e] : ae
                        }

                        function en(e) {
                            var t = this.__data__;
                            return nd ? t[e] !== ae : gu.call(t, e)
                        }

                        function tn(e, t) {
                            var n = this.__data__;
                            return this.size += this.has(e) ? 0 : 1, n[e] = nd && t === ae ? le : t, this
                        }

                        function nn(e) {
                            var t = -1,
                                n = null == e ? 0 : e.length;
                            for (this.clear(); ++t < n;) {
                                var i = e[t];
                                this.set(i[0], i[1])
                            }
                        }

                        function an() {
                            this.__data__ = [], this.size = 0
                        }

                        function rn(e) {
                            var t = this.__data__,
                                n = Kn(t, e);
                            return !(n < 0) && (n == t.length - 1 ? t.pop() : Uu.call(t, n, 1), --this.size, !0)
                        }

                        function sn(e) {
                            var t = this.__data__,
                                n = Kn(t, e);
                            return n < 0 ? ae : t[n][1]
                        }

                        function on(e) {
                            return Kn(this.__data__, e) > -1
                        }

                        function ln(e, t) {
                            var n = this.__data__,
                                i = Kn(n, e);
                            return i < 0 ? (++this.size, n.push([e, t])) : n[i][1] = t, this
                        }

                        function cn(e) {
                            var t = -1,
                                n = null == e ? 0 : e.length;
                            for (this.clear(); ++t < n;) {
                                var i = e[t];
                                this.set(i[0], i[1])
                            }
                        }

                        function un() {
                            this.size = 0, this.__data__ = {
                                hash: new ne,
                                map: new(Xu || nn),
                                string: new ne
                            }
                        }

                        function dn(e) {
                            var t = _r(this, e).delete(e);
                            return this.size -= t ? 1 : 0, t
                        }

                        function pn(e) {
                            return _r(this, e).get(e)
                        }

                        function mn(e) {
                            return _r(this, e).has(e)
                        }

                        function hn(e, t) {
                            var n = _r(this, e),
                                i = n.size;
                            return n.set(e, t), this.size += n.size == i ? 0 : 1, this
                        }

                        function bn(e) {
                            var t = -1,
                                n = null == e ? 0 : e.length;
                            for (this.__data__ = new cn; ++t < n;) this.add(e[t])
                        }

                        function vn(e) {
                            return this.__data__.set(e, le), this
                        }

                        function kn(e) {
                            return this.__data__.has(e)
                        }

                        function yn(e) {
                            var t = this.__data__ = new nn(e);
                            this.size = t.size
                        }

                        function Nn() {
                            this.__data__ = new nn, this.size = 0
                        }

                        function wn(e) {
                            var t = this.__data__,
                                n = t.delete(e);
                            return this.size = t.size, n
                        }

                        function Dn(e) {
                            return this.__data__.get(e)
                        }

                        function Tn(e) {
                            return this.__data__.has(e)
                        }

                        function On(e, t) {
                            var n = this.__data__;
                            if (n instanceof nn) {
                                var i = n.__data__;
                                if (!Xu || i.length < re - 1) return i.push([e, t]), this.size = ++n.size, this;
                                n = this.__data__ = new cn(i)
                            }
                            return n.set(e, t), this.size = n.size, this
                        }

                        function xn(e, t) {
                            var n = gp(e),
                                i = !n && fp(e),
                                a = !n && !i && vp(e),
                                r = !n && !i && !a && Cp(e),
                                s = n || i || a || r,
                                o = s ? M(e.length, cu) : [],
                                l = o.length;
                            for (var c in e) !t && !gu.call(e, c) || s && ("length" == c || a && ("offset" == c || "parent" == c) || r && ("buffer" == c || "byteLength" == c || "byteOffset" == c) || Rr(c, l)) || o.push(c);
                            return o
                        }

                        function Rn(e) {
                            var t = e.length;
                            return t ? e[Zi(0, t - 1)] : ae
                        }

                        function Pn(e, t) {
                            return Yr(ja(e), ni(t, 0, e.length))
                        }

                        function jn(e) {
                            return Yr(ja(e))
                        }

                        function An(e, t, n) {
                            (n === ae || qo(e[t], n)) && (n !== ae || t in e) || ei(e, t, n)
                        }

                        function qn(e, t, n) {
                            var i = e[t];
                            gu.call(e, t) && qo(i, n) && (n !== ae || t in e) || ei(e, t, n)
                        }

                        function Kn(e, t) {
                            for (var n = e.length; n--;)
                                if (qo(e[n][0], t)) return n;
                            return -1
                        }

                        function Yn(e, t, n, i) {
                            return hd(e, function(e, a, r) {
                                t(i, e, n(e), r)
                            }), i
                        }

                        function Xn(e, t) {
                            return e && Aa(t, Bl(t), e)
                        }

                        function Zn(e, t) {
                            return e && Aa(t, Hl(t), e)
                        }

                        function ei(e, t, n) {
                            "__proto__" == t && Ru ? Ru(e, t, {
                                configurable: !0,
                                enumerable: !0,
                                value: n,
                                writable: !0
                            }) : e[t] = n
                        }

                        function ti(e, t) {
                            for (var n = -1, i = t.length, a = nu(i), r = null == e; ++n < i;) a[n] = r ? ae : jl(e, t[n]);
                            return a
                        }

                        function ni(e, t, n) {
                            return e === e && (n !== ae && (e = e <= n ? e : n), t !== ae && (e = e >= t ? e : t)), e
                        }

                        function ii(e, t, n, i, a, r) {
                            var s, o = t & de,
                                l = t & pe,
                                u = t & me;
                            if (n && (s = a ? n(e, i, a, r) : n(e)), s !== ae) return s;
                            if (!al(e)) return e;
                            var d = gp(e);
                            if (d) {
                                if (s = Ir(e), !o) return ja(e, s)
                            } else {
                                var p = wd(e),
                                    m = p == $e || p == Je;
                                if (vp(e)) return Na(e, o);
                                if (p == Xe || p == Be || m && !a) {
                                    if (s = l || m ? {} : Ur(e), !o) return l ? Ba(e, Zn(s, e)) : La(e, Xn(s, e))
                                } else {
                                    if (!En[p]) return a ? e : {};
                                    s = Or(e, p, ii, o)
                                }
                            }
                            r || (r = new yn);
                            var h = r.get(e);
                            if (h) return h;
                            r.set(e, s);
                            var f = u ? l ? vr : br : l ? Hl : Bl,
                                g = d ? ae : f(e);
                            return c(g || e, function(i, a) {
                                g && (a = i, i = e[a]), qn(s, a, ii(i, t, n, a, e, r))
                            }), s
                        }

                        function ai(e) {
                            var t = Bl(e);
                            return function(n) {
                                return ri(n, e, t)
                            }
                        }

                        function ri(e, t, n) {
                            var i = n.length;
                            if (null == e) return !i;
                            for (e = ou(e); i--;) {
                                var a = n[i],
                                    r = t[a],
                                    s = e[a];
                                if (s === ae && !(a in e) || !r(s)) return !1
                            }
                            return !0
                        }

                        function si(e, t, n) {
                            if ("function" != typeof e) throw new uu(oe);
                            return Id(function() {
                                e.apply(ae, n)
                            }, t)
                        }

                        function oi(e, t, n, i) {
                            var a = -1,
                                r = m,
                                s = !0,
                                o = e.length,
                                l = [],
                                c = t.length;
                            if (!o) return l;
                            n && (t = f(t, P(n))), i ? (r = h, s = !1) : t.length >= re && (r = j, s = !1, t = new bn(t));
                            e: for (; ++a < o;) {
                                var u = e[a],
                                    d = null == n ? u : n(u);
                                if (u = i || 0 !== u ? u : 0, s && d === d) {
                                    for (var p = c; p--;)
                                        if (t[p] === d) continue e;
                                    l.push(u)
                                } else r(t, d, i) || l.push(u)
                            }
                            return l
                        }

                        function li(e, t) {
                            var n = !0;
                            return hd(e, function(e, i, a) {
                                return n = !!t(e, i, a)
                            }), n
                        }

                        function ci(e, t, n) {
                            for (var i = -1, a = e.length; ++i < a;) {
                                var r = e[i],
                                    s = t(r);
                                if (null != s && (o === ae ? s === s && !gl(s) : n(s, o))) var o = s,
                                    l = r
                            }
                            return l
                        }

                        function ui(e, t, n, i) {
                            var a = e.length;
                            for (n = _l(n), n < 0 && (n = -n > a ? 0 : a + n), i = i === ae || i > a ? a : _l(i), i < 0 && (i += a), i = n > i ? 0 : Cl(i); n < i;) e[n++] = t;
                            return e
                        }

                        function di(e, t) {
                            var n = [];
                            return hd(e, function(e, i, a) {
                                t(e, i, a) && n.push(e)
                            }), n
                        }

                        function pi(e, t, n, i, a) {
                            var r = -1,
                                s = e.length;
                            for (n || (n = Mr), a || (a = []); ++r < s;) {
                                var o = e[r];
                                t > 0 && n(o) ? t > 1 ? pi(o, t - 1, n, i, a) : g(a, o) : i || (a[a.length] = o)
                            }
                            return a
                        }

                        function mi(e, t) {
                            return e && gd(e, t, Bl)
                        }

                        function hi(e, t) {
                            return e && bd(e, t, Bl)
                        }

                        function fi(e, t) {
                            return p(t, function(t) {
                                return tl(e[t])
                            })
                        }

                        function gi(e, t) {
                            t = Ca(t, e);
                            for (var n = 0, i = t.length; null != e && n < i;) e = e[Xr(t[n++])];
                            return n && n == i ? e : ae
                        }

                        function bi(e, t, n) {
                            var i = t(e);
                            return gp(e) ? i : g(i, n(e))
                        }

                        function vi(e) {
                            return null == e ? e === ae ? at : Ye : Mu && Mu in ou(e) ? Nr(e) : qr(e)
                        }

                        function ki(e, t) {
                            return e > t
                        }

                        function yi(e, t) {
                            return null != e && gu.call(e, t)
                        }

                        function Si(e, t) {
                            return null != e && t in ou(e)
                        }

                        function _i(e, t, n) {
                            return e >= zu(t, n) && e < qu(t, n)
                        }

                        function Ci(e, t, n) {
                            for (var i = n ? h : m, a = e[0].length, r = e.length, s = r, o = nu(r), l = 1 / 0, c = []; s--;) {
                                var u = e[s];
                                s && t && (u = f(u, P(t))), l = zu(u.length, l), o[s] = !n && (t || a >= 120 && u.length >= 120) ? new bn(s && u) : ae
                            }
                            u = e[0];
                            var d = -1,
                                p = o[0];
                            e: for (; ++d < a && c.length < l;) {
                                var g = u[d],
                                    b = t ? t(g) : g;
                                if (g = n || 0 !== g ? g : 0, !(p ? j(p, b) : i(c, b, n))) {
                                    for (s = r; --s;) {
                                        var v = o[s];
                                        if (!(v ? j(v, b) : i(e[s], b, n))) continue e
                                    }
                                    p && p.push(b), c.push(g)
                                }
                            }
                            return c
                        }

                        function Ei(e, t, n, i) {
                            return mi(e, function(e, a, r) {
                                t(i, n(e), a, r)
                            }), i
                        }

                        function Ni(e, t, n) {
                            t = Ca(t, e), e = $r(e, t);
                            var i = null == e ? e : e[Xr(ys(t))];
                            return null == i ? ae : o(i, e, n)
                        }

                        function wi(e) {
                            return rl(e) && vi(e) == Be
                        }

                        function Di(e) {
                            return rl(e) && vi(e) == ot
                        }

                        function Ti(e) {
                            return rl(e) && vi(e) == Ge
                        }

                        function Ii(e, t, n, i, a) {
                            return e === t || (null == e || null == t || !rl(e) && !rl(t) ? e !== e && t !== t : Ui(e, t, n, i, Ii, a))
                        }

                        function Ui(e, t, n, i, a, r) {
                            var s = gp(e),
                                o = gp(t),
                                l = s ? He : wd(e),
                                c = o ? He : wd(t);
                            l = l == Be ? Xe : l, c = c == Be ? Xe : c;
                            var u = l == Xe,
                                d = c == Xe,
                                p = l == c;
                            if (p && vp(e)) {
                                if (!vp(t)) return !1;
                                s = !0, u = !1
                            }
                            if (p && !u) return r || (r = new yn), s || Cp(e) ? mr(e, t, n, i, a, r) : hr(e, t, l, n, i, a, r);
                            if (!(n & he)) {
                                var m = u && gu.call(e, "__wrapped__"),
                                    h = d && gu.call(t, "__wrapped__");
                                if (m || h) {
                                    var f = m ? e.value() : e,
                                        g = h ? t.value() : t;
                                    return r || (r = new yn), a(f, g, n, i, r)
                                }
                            }
                            return !!p && (r || (r = new yn), fr(e, t, n, i, a, r))
                        }

                        function Oi(e) {
                            return rl(e) && wd(e) == Qe
                        }

                        function xi(e, t, n, i) {
                            var a = n.length,
                                r = a,
                                s = !i;
                            if (null == e) return !r;
                            for (e = ou(e); a--;) {
                                var o = n[a];
                                if (s && o[2] ? o[1] !== e[o[0]] : !(o[0] in e)) return !1
                            }
                            for (; ++a < r;) {
                                o = n[a];
                                var l = o[0],
                                    c = e[l],
                                    u = o[1];
                                if (s && o[2]) {
                                    if (c === ae && !(l in e)) return !1
                                } else {
                                    var d = new yn;
                                    if (i) var p = i(c, u, l, e, t, d);
                                    if (!(p === ae ? Ii(u, c, he | fe, i, d) : p)) return !1
                                }
                            }
                            return !0
                        }

                        function Mi(e) {
                            return !(!al(e) || Lr(e)) && (tl(e) ? _u : zt).test(Zr(e))
                        }

                        function Ri(e) {
                            return rl(e) && vi(e) == et
                        }

                        function Pi(e) {
                            return rl(e) && wd(e) == tt
                        }

                        function Fi(e) {
                            return rl(e) && il(e.length) && !!Cn[vi(e)]
                        }

                        function ji(e) {
                            return "function" == typeof e ? e : null == e ? Uc : "object" == typeof e ? gp(e) ? Wi(e[0], e[1]) : Vi(e) : Ac(e)
                        }

                        function Ai(e) {
                            if (!Br(e)) return Gu(e);
                            var t = [];
                            for (var n in ou(e)) gu.call(e, n) && "constructor" != n && t.push(n);
                            return t
                        }

                        function Li(e) {
                            if (!al(e)) return Gr(e);
                            var t = Br(e),
                                n = [];
                            for (var i in e)("constructor" != i || !t && gu.call(e, i)) && n.push(i);
                            return n
                        }

                        function Bi(e, t) {
                            return e < t
                        }

                        function Hi(e, t) {
                            var n = -1,
                                i = zo(e) ? nu(e.length) : [];
                            return hd(e, function(e, a, r) {
                                i[++n] = t(e, a, r)
                            }), i
                        }

                        function Vi(e) {
                            var t = Cr(e);
                            return 1 == t.length && t[0][2] ? Vr(t[0][0], t[0][1]) : function(n) {
                                return n === e || xi(n, e, t)
                            }
                        }

                        function Wi(e, t) {
                            return Fr(e) && Hr(t) ? Vr(Xr(e), t) : function(n) {
                                var i = jl(n, e);
                                return i === ae && i === t ? Ll(n, e) : Ii(t, i, he | fe)
                            }
                        }

                        function Gi(e, t, n, i, a) {
                            e !== t && gd(t, function(r, s) {
                                if (al(r)) a || (a = new yn), qi(e, t, s, n, Gi, i, a);
                                else {
                                    var o = i ? i(e[s], r, s + "", e, t, a) : ae;
                                    o === ae && (o = r), An(e, s, o)
                                }
                            }, Hl)
                        }

                        function qi(e, t, n, i, a, r, s) {
                            var o = e[n],
                                l = t[n],
                                c = s.get(l);
                            if (c) return void An(e, n, c);
                            var u = r ? r(o, l, n + "", e, t, s) : ae,
                                d = u === ae;
                            if (d) {
                                var p = gp(l),
                                    m = !p && vp(l),
                                    h = !p && !m && Cp(l);
                                u = l, p || m || h ? gp(o) ? u = o : $o(o) ? u = ja(o) : m ? (d = !1, u = Na(l, !0)) : h ? (d = !1, u = xa(l, !0)) : u = [] : ml(l) || fp(l) ? (u = o, fp(o) ? u = Nl(o) : (!al(o) || i && tl(o)) && (u = Ur(l))) : d = !1
                            }
                            d && (s.set(l, u), a(u, l, i, r, s), s.delete(l)), An(e, n, u)
                        }

                        function zi(e, t) {
                            var n = e.length;
                            if (n) return t += t < 0 ? n : 0, Rr(t, n) ? e[t] : ae
                        }

                        function $i(e, t, n) {
                            var i = -1;
                            return t = f(t.length ? t : [Uc], P(Sr())), O(Hi(e, function(e, n, a) {
                                return {
                                    criteria: f(t, function(t) {
                                        return t(e)
                                    }),
                                    index: ++i,
                                    value: e
                                }
                            }), function(e, t) {
                                return Ra(e, t, n)
                            })
                        }

                        function Ji(e, t) {
                            return Qi(e, t, function(t, n) {
                                return Ll(e, n)
                            })
                        }

                        function Qi(e, t, n) {
                            for (var i = -1, a = t.length, r = {}; ++i < a;) {
                                var s = t[i],
                                    o = gi(e, s);
                                n(o, s) && ra(r, Ca(s, e), o)
                            }
                            return r
                        }

                        function Ki(e) {
                            return function(t) {
                                return gi(t, e)
                            }
                        }

                        function Yi(e, t, n, i) {
                            var a = i ? N : E,
                                r = -1,
                                s = t.length,
                                o = e;
                            for (e === t && (t = ja(t)), n && (o = f(e, P(n))); ++r < s;)
                                for (var l = 0, c = t[r], u = n ? n(c) : c;
                                    (l = a(o, u, l, i)) > -1;) o !== e && Uu.call(o, l, 1), Uu.call(e, l, 1);
                            return e
                        }

                        function Xi(e, t) {
                            for (var n = e ? t.length : 0, i = n - 1; n--;) {
                                var a = t[n];
                                if (n == i || a !== r) {
                                    var r = a;
                                    Rr(a) ? Uu.call(e, a, 1) : fa(e, a)
                                }
                            }
                            return e
                        }

                        function Zi(e, t) {
                            return e + Lu(Qu() * (t - e + 1))
                        }

                        function ea(e, t, n, i) {
                            for (var a = -1, r = qu(Au((t - e) / (n || 1)), 0), s = nu(r); r--;) s[i ? r : ++a] = e, e += n;
                            return s
                        }

                        function ta(e, t) {
                            var n = "";
                            if (!e || t < 1 || t > Me) return n;
                            do {
                                t % 2 && (n += e), (t = Lu(t / 2)) && (e += e)
                            } while (t);
                            return n
                        }

                        function na(e, t) {
                            return Ud(zr(e, t, Uc), e + "")
                        }

                        function ia(e) {
                            return Rn(Zl(e))
                        }

                        function aa(e, t) {
                            var n = Zl(e);
                            return Yr(n, ni(t, 0, n.length))
                        }

                        function ra(e, t, n, i) {
                            if (!al(e)) return e;
                            t = Ca(t, e);
                            for (var a = -1, r = t.length, s = r - 1, o = e; null != o && ++a < r;) {
                                var l = Xr(t[a]),
                                    c = n;
                                if (a != s) {
                                    var u = o[l];
                                    c = i ? i(u, l, o) : ae, c === ae && (c = al(u) ? u : Rr(t[a + 1]) ? [] : {})
                                }
                                qn(o, l, c), o = o[l]
                            }
                            return e
                        }

                        function sa(e) {
                            return Yr(Zl(e))
                        }

                        function oa(e, t, n) {
                            var i = -1,
                                a = e.length;
                            t < 0 && (t = -t > a ? 0 : a + t), n = n > a ? a : n, n < 0 && (n += a), a = t > n ? 0 : n - t >>> 0, t >>>= 0;
                            for (var r = nu(a); ++i < a;) r[i] = e[i + t];
                            return r
                        }

                        function la(e, t) {
                            var n;
                            return hd(e, function(e, i, a) {
                                return !(n = t(e, i, a))
                            }), !!n
                        }

                        function ca(e, t, n) {
                            var i = 0,
                                a = null == e ? i : e.length;
                            if ("number" == typeof t && t === t && a <= Ae) {
                                for (; i < a;) {
                                    var r = i + a >>> 1,
                                        s = e[r];
                                    null !== s && !gl(s) && (n ? s <= t : s < t) ? i = r + 1 : a = r
                                }
                                return a
                            }
                            return ua(e, t, Uc, n)
                        }

                        function ua(e, t, n, i) {
                            t = n(t);
                            for (var a = 0, r = null == e ? 0 : e.length, s = t !== t, o = null === t, l = gl(t), c = t === ae; a < r;) {
                                var u = Lu((a + r) / 2),
                                    d = n(e[u]),
                                    p = d !== ae,
                                    m = null === d,
                                    h = d === d,
                                    f = gl(d);
                                if (s) var g = i || h;
                                else g = c ? h && (i || p) : o ? h && p && (i || !m) : l ? h && p && !m && (i || !f) : !m && !f && (i ? d <= t : d < t);
                                g ? a = u + 1 : r = u
                            }
                            return zu(r, je)
                        }

                        function da(e, t) {
                            for (var n = -1, i = e.length, a = 0, r = []; ++n < i;) {
                                var s = e[n],
                                    o = t ? t(s) : s;
                                if (!n || !qo(o, l)) {
                                    var l = o;
                                    r[a++] = 0 === s ? 0 : s
                                }
                            }
                            return r
                        }

                        function pa(e) {
                            return "number" == typeof e ? e : gl(e) ? Pe : +e
                        }

                        function ma(e) {
                            if ("string" == typeof e) return e;
                            if (gp(e)) return f(e, ma) + "";
                            if (gl(e)) return pd ? pd.call(e) : "";
                            var t = e + "";
                            return "0" == t && 1 / e == -xe ? "-0" : t
                        }

                        function ha(e, t, n) {
                            var i = -1,
                                a = m,
                                r = e.length,
                                s = !0,
                                o = [],
                                l = o;
                            if (n) s = !1, a = h;
                            else if (r >= re) {
                                var c = t ? null : _d(e);
                                if (c) return Q(c);
                                s = !1, a = j, l = new bn
                            } else l = t ? [] : o;
                            e: for (; ++i < r;) {
                                var u = e[i],
                                    d = t ? t(u) : u;
                                if (u = n || 0 !== u ? u : 0, s && d === d) {
                                    for (var p = l.length; p--;)
                                        if (l[p] === d) continue e;
                                    t && l.push(d), o.push(u)
                                } else a(l, d, n) || (l !== o && l.push(d), o.push(u))
                            }
                            return o
                        }

                        function fa(e, t) {
                            return t = Ca(t, e), null == (e = $r(e, t)) || delete e[Xr(ys(t))]
                        }

                        function ga(e, t, n, i) {
                            return ra(e, t, n(gi(e, t)), i)
                        }

                        function ba(e, t, n, i) {
                            for (var a = e.length, r = i ? a : -1;
                                (i ? r-- : ++r < a) && t(e[r], r, e););
                            return n ? oa(e, i ? 0 : r, i ? r + 1 : a) : oa(e, i ? r + 1 : 0, i ? a : r)
                        }

                        function va(e, t) {
                            var n = e;
                            return n instanceof y && (n = n.value()), b(t, function(e, t) {
                                return t.func.apply(t.thisArg, g([e], t.args))
                            }, n)
                        }

                        function ka(e, t, n) {
                            var i = e.length;
                            if (i < 2) return i ? ha(e[0]) : [];
                            for (var a = -1, r = nu(i); ++a < i;)
                                for (var s = e[a], o = -1; ++o < i;) o != a && (r[a] = oi(r[a] || s, e[o], t, n));
                            return ha(pi(r, 1), t, n)
                        }

                        function ya(e, t, n) {
                            for (var i = -1, a = e.length, r = t.length, s = {}; ++i < a;) {
                                var o = i < r ? t[i] : ae;
                                n(s, e[i], o)
                            }
                            return s
                        }

                        function Sa(e) {
                            return $o(e) ? e : []
                        }

                        function _a(e) {
                            return "function" == typeof e ? e : Uc
                        }

                        function Ca(e, t) {
                            return gp(e) ? e : Fr(e, t) ? [e] : Od(Dl(e))
                        }

                        function Ea(e, t, n) {
                            var i = e.length;
                            return n = n === ae ? i : n, !t && n >= i ? e : oa(e, t, n)
                        }

                        function Na(e, t) {
                            if (t) return e.slice();
                            var n = e.length,
                                i = wu ? wu(n) : new e.constructor(n);
                            return e.copy(i), i
                        }

                        function wa(e) {
                            var t = new e.constructor(e.byteLength);
                            return new Nu(t).set(new Nu(e)), t
                        }

                        function Da(e, t) {
                            var n = t ? wa(e.buffer) : e.buffer;
                            return new e.constructor(n, e.byteOffset, e.byteLength)
                        }

                        function Ta(e, t, n) {
                            return b(t ? n(z(e), de) : z(e), r, new e.constructor)
                        }

                        function Ia(e) {
                            var t = new e.constructor(e.source, Wt.exec(e));
                            return t.lastIndex = e.lastIndex, t
                        }

                        function Ua(e, t, n) {
                            return b(t ? n(Q(e), de) : Q(e), s, new e.constructor)
                        }

                        function Oa(e) {
                            return dd ? ou(dd.call(e)) : {}
                        }

                        function xa(e, t) {
                            var n = t ? wa(e.buffer) : e.buffer;
                            return new e.constructor(n, e.byteOffset, e.length)
                        }

                        function Ma(e, t) {
                            if (e !== t) {
                                var n = e !== ae,
                                    i = null === e,
                                    a = e === e,
                                    r = gl(e),
                                    s = t !== ae,
                                    o = null === t,
                                    l = t === t,
                                    c = gl(t);
                                if (!o && !c && !r && e > t || r && s && l && !o && !c || i && s && l || !n && l || !a) return 1;
                                if (!i && !r && !c && e < t || c && n && a && !i && !r || o && n && a || !s && a || !l) return -1
                            }
                            return 0
                        }

                        function Ra(e, t, n) {
                            for (var i = -1, a = e.criteria, r = t.criteria, s = a.length, o = n.length; ++i < s;) {
                                var l = Ma(a[i], r[i]);
                                if (l) {
                                    if (i >= o) return l;
                                    return l * ("desc" == n[i] ? -1 : 1)
                                }
                            }
                            return e.index - t.index
                        }

                        function Pa(e, t, n, i) {
                            for (var a = -1, r = e.length, s = n.length, o = -1, l = t.length, c = qu(r - s, 0), u = nu(l + c), d = !i; ++o < l;) u[o] = t[o];
                            for (; ++a < s;)(d || a < r) && (u[n[a]] = e[a]);
                            for (; c--;) u[o++] = e[a++];
                            return u
                        }

                        function Fa(e, t, n, i) {
                            for (var a = -1, r = e.length, s = -1, o = n.length, l = -1, c = t.length, u = qu(r - o, 0), d = nu(u + c), p = !i; ++a < u;) d[a] = e[a];
                            for (var m = a; ++l < c;) d[m + l] = t[l];
                            for (; ++s < o;)(p || a < r) && (d[m + n[s]] = e[a++]);
                            return d
                        }

                        function ja(e, t) {
                            var n = -1,
                                i = e.length;
                            for (t || (t = nu(i)); ++n < i;) t[n] = e[n];
                            return t
                        }

                        function Aa(e, t, n, i) {
                            var a = !n;
                            n || (n = {});
                            for (var r = -1, s = t.length; ++r < s;) {
                                var o = t[r],
                                    l = i ? i(n[o], e[o], o, n, e) : ae;
                                l === ae && (l = e[o]), a ? ei(n, o, l) : qn(n, o, l)
                            }
                            return n
                        }

                        function La(e, t) {
                            return Aa(e, Ed(e), t)
                        }

                        function Ba(e, t) {
                            return Aa(e, Nd(e), t)
                        }

                        function Ha(e, t) {
                            return function(n, i) {
                                var a = gp(n) ? l : Yn,
                                    r = t ? t() : {};
                                return a(n, e, Sr(i, 2), r)
                            }
                        }

                        function Va(e) {
                            return na(function(t, n) {
                                var i = -1,
                                    a = n.length,
                                    r = a > 1 ? n[a - 1] : ae,
                                    s = a > 2 ? n[2] : ae;
                                for (r = e.length > 3 && "function" == typeof r ? (a--, r) : ae, s && Pr(n[0], n[1], s) && (r = a < 3 ? ae : r, a = 1), t = ou(t); ++i < a;) {
                                    var o = n[i];
                                    o && e(t, o, i, r)
                                }
                                return t
                            })
                        }

                        function Wa(e, t) {
                            return function(n, i) {
                                if (null == n) return n;
                                if (!zo(n)) return e(n, i);
                                for (var a = n.length, r = t ? a : -1, s = ou(n);
                                    (t ? r-- : ++r < a) && !1 !== i(s[r], r, s););
                                return n
                            }
                        }

                        function Ga(e) {
                            return function(t, n, i) {
                                for (var a = -1, r = ou(t), s = i(t), o = s.length; o--;) {
                                    var l = s[e ? o : ++a];
                                    if (!1 === n(r[l], l, r)) break
                                }
                                return t
                            }
                        }

                        function qa(e, t, n) {
                            function i() {
                                return (this && this !== Mn && this instanceof i ? r : e).apply(a ? n : this, arguments)
                            }
                            var a = t & ge,
                                r = Ja(e);
                            return i
                        }

                        function za(e) {
                            return function(t) {
                                t = Dl(t);
                                var n = W(t) ? ee(t) : ae,
                                    i = n ? n[0] : t.charAt(0),
                                    a = n ? Ea(n, 1).join("") : t.slice(1);
                                return i[e]() + a
                            }
                        }

                        function $a(e) {
                            return function(t) {
                                return b(Nc(rc(t).replace(fn, "")), e, "")
                            }
                        }

                        function Ja(e) {
                            return function() {
                                var t = arguments;
                                switch (t.length) {
                                    case 0:
                                        return new e;
                                    case 1:
                                        return new e(t[0]);
                                    case 2:
                                        return new e(t[0], t[1]);
                                    case 3:
                                        return new e(t[0], t[1], t[2]);
                                    case 4:
                                        return new e(t[0], t[1], t[2], t[3]);
                                    case 5:
                                        return new e(t[0], t[1], t[2], t[3], t[4]);
                                    case 6:
                                        return new e(t[0], t[1], t[2], t[3], t[4], t[5]);
                                    case 7:
                                        return new e(t[0], t[1], t[2], t[3], t[4], t[5], t[6])
                                }
                                var n = md(e.prototype),
                                    i = e.apply(n, t);
                                return al(i) ? i : n
                            }
                        }

                        function Qa(e, t, n) {
                            function i() {
                                for (var r = arguments.length, s = nu(r), l = r, c = yr(i); l--;) s[l] = arguments[l];
                                var u = r < 3 && s[0] !== c && s[r - 1] !== c ? [] : J(s, c);
                                return (r -= u.length) < n ? sr(e, t, Xa, i.placeholder, ae, s, u, ae, ae, n - r) : o(this && this !== Mn && this instanceof i ? a : e, this, s)
                            }
                            var a = Ja(e);
                            return i
                        }

                        function Ka(e) {
                            return function(t, n, i) {
                                var a = ou(t);
                                if (!zo(t)) {
                                    var r = Sr(n, 3);
                                    t = Bl(t), n = function(e) {
                                        return r(a[e], e, a)
                                    }
                                }
                                var s = e(t, n, i);
                                return s > -1 ? a[r ? t[s] : s] : ae
                            }
                        }

                        function Ya(e) {
                            return gr(function(t) {
                                var n = t.length,
                                    i = n,
                                    r = a.prototype.thru;
                                for (e && t.reverse(); i--;) {
                                    var s = t[i];
                                    if ("function" != typeof s) throw new uu(oe);
                                    if (r && !o && "wrapper" == kr(s)) var o = new a([], !0)
                                }
                                for (i = o ? i : n; ++i < n;) {
                                    s = t[i];
                                    var l = kr(s),
                                        c = "wrapper" == l ? Cd(s) : ae;
                                    o = c && Ar(c[0]) && c[1] == (Ce | ke | Se | Ee) && !c[4].length && 1 == c[9] ? o[kr(c[0])].apply(o, c[3]) : 1 == s.length && Ar(s) ? o[l]() : o.thru(s)
                                }
                                return function() {
                                    var e = arguments,
                                        i = e[0];
                                    if (o && 1 == e.length && gp(i)) return o.plant(i).value();
                                    for (var a = 0, r = n ? t[a].apply(this, e) : i; ++a < n;) r = t[a].call(this, r);
                                    return r
                                }
                            })
                        }

                        function Xa(e, t, n, i, a, r, s, o, l, c) {
                            function u() {
                                for (var b = arguments.length, v = nu(b), k = b; k--;) v[k] = arguments[k];
                                if (h) var y = yr(u),
                                    S = B(v, y);
                                if (i && (v = Pa(v, i, a, h)), r && (v = Fa(v, r, s, h)), b -= S, h && b < c) {
                                    var _ = J(v, y);
                                    return sr(e, t, Xa, u.placeholder, n, v, _, o, l, c - b)
                                }
                                var C = p ? n : this,
                                    E = m ? C[e] : e;
                                return b = v.length, o ? v = Jr(v, o) : f && b > 1 && v.reverse(), d && l < b && (v.length = l), this && this !== Mn && this instanceof u && (E = g || Ja(E)), E.apply(C, v)
                            }
                            var d = t & Ce,
                                p = t & ge,
                                m = t & be,
                                h = t & (ke | ye),
                                f = t & Ne,
                                g = m ? ae : Ja(e);
                            return u
                        }

                        function Za(e, t) {
                            return function(n, i) {
                                return Ei(n, e, t(i), {})
                            }
                        }

                        function er(e, t) {
                            return function(n, i) {
                                var a;
                                if (n === ae && i === ae) return t;
                                if (n !== ae && (a = n), i !== ae) {
                                    if (a === ae) return i;
                                    "string" == typeof n || "string" == typeof i ? (n = ma(n), i = ma(i)) : (n = pa(n), i = pa(i)), a = e(n, i)
                                }
                                return a
                            }
                        }

                        function tr(e) {
                            return gr(function(t) {
                                return t = f(t, P(Sr())), na(function(n) {
                                    var i = this;
                                    return e(t, function(e) {
                                        return o(e, i, n)
                                    })
                                })
                            })
                        }

                        function nr(e, t) {
                            t = t === ae ? " " : ma(t);
                            var n = t.length;
                            if (n < 2) return n ? ta(t, e) : t;
                            var i = ta(t, Au(e / Z(t)));
                            return W(t) ? Ea(ee(i), 0, e).join("") : i.slice(0, e)
                        }

                        function ir(e, t, n, i) {
                            function a() {
                                for (var t = -1, l = arguments.length, c = -1, u = i.length, d = nu(u + l), p = this && this !== Mn && this instanceof a ? s : e; ++c < u;) d[c] = i[c];
                                for (; l--;) d[c++] = arguments[++t];
                                return o(p, r ? n : this, d)
                            }
                            var r = t & ge,
                                s = Ja(e);
                            return a
                        }

                        function ar(e) {
                            return function(t, n, i) {
                                return i && "number" != typeof i && Pr(t, n, i) && (n = i = ae), t = Sl(t), n === ae ? (n = t, t = 0) : n = Sl(n), i = i === ae ? t < n ? 1 : -1 : Sl(i), ea(t, n, i, e)
                            }
                        }

                        function rr(e) {
                            return function(t, n) {
                                return "string" == typeof t && "string" == typeof n || (t = El(t), n = El(n)), e(t, n)
                            }
                        }

                        function sr(e, t, n, i, a, r, s, o, l, c) {
                            var u = t & ke,
                                d = u ? s : ae,
                                p = u ? ae : s,
                                m = u ? r : ae,
                                h = u ? ae : r;
                            t |= u ? Se : _e, (t &= ~(u ? _e : Se)) & ve || (t &= ~(ge | be));
                            var f = [e, t, a, m, d, h, p, o, l, c],
                                g = n.apply(ae, f);
                            return Ar(e) && Td(g, f), g.placeholder = i, Qr(g, e, t)
                        }

                        function or(e) {
                            var t = su[e];
                            return function(e, n) {
                                if (e = El(e), n = null == n ? 0 : zu(_l(n), 292)) {
                                    var i = (Dl(e) + "e").split("e");
                                    return i = (Dl(t(i[0] + "e" + (+i[1] + n))) + "e").split("e"), +(i[0] + "e" + (+i[1] - n))
                                }
                                return t(e)
                            }
                        }

                        function lr(e) {
                            return function(t) {
                                var n = wd(t);
                                return n == Qe ? z(t) : n == tt ? K(t) : R(t, e(t))
                            }
                        }

                        function cr(e, t, n, i, a, r, s, o) {
                            var l = t & be;
                            if (!l && "function" != typeof e) throw new uu(oe);
                            var c = i ? i.length : 0;
                            if (c || (t &= ~(Se | _e), i = a = ae), s = s === ae ? s : qu(_l(s), 0), o = o === ae ? o : _l(o), c -= a ? a.length : 0, t & _e) {
                                var u = i,
                                    d = a;
                                i = a = ae
                            }
                            var p = l ? ae : Cd(e),
                                m = [e, t, n, i, a, u, d, r, s, o];
                            if (p && Wr(m, p), e = m[0], t = m[1], n = m[2], i = m[3], a = m[4], o = m[9] = m[9] === ae ? l ? 0 : e.length : qu(m[9] - c, 0), !o && t & (ke | ye) && (t &= ~(ke | ye)), t && t != ge) h = t == ke || t == ye ? Qa(e, t, o) : t != Se && t != (ge | Se) || a.length ? Xa.apply(ae, m) : ir(e, t, n, i);
                            else var h = qa(e, t, n);
                            return Qr((p ? vd : Td)(h, m), e, t)
                        }

                        function ur(e, t, n, i) {
                            return e === ae || qo(e, mu[n]) && !gu.call(i, n) ? t : e
                        }

                        function dr(e, t, n, i, a, r) {
                            return al(e) && al(t) && (r.set(t, e), Gi(e, t, ae, dr, r), r.delete(t)), e
                        }

                        function pr(e) {
                            return ml(e) ? ae : e
                        }

                        function mr(e, t, n, i, a, r) {
                            var s = n & he,
                                o = e.length,
                                l = t.length;
                            if (o != l && !(s && l > o)) return !1;
                            var c = r.get(e);
                            if (c && r.get(t)) return c == t;
                            var u = -1,
                                d = !0,
                                p = n & fe ? new bn : ae;
                            for (r.set(e, t), r.set(t, e); ++u < o;) {
                                var m = e[u],
                                    h = t[u];
                                if (i) var f = s ? i(h, m, u, t, e, r) : i(m, h, u, e, t, r);
                                if (f !== ae) {
                                    if (f) continue;
                                    d = !1;
                                    break
                                }
                                if (p) {
                                    if (!k(t, function(e, t) {
                                            if (!j(p, t) && (m === e || a(m, e, n, i, r))) return p.push(t)
                                        })) {
                                        d = !1;
                                        break
                                    }
                                } else if (m !== h && !a(m, h, n, i, r)) {
                                    d = !1;
                                    break
                                }
                            }
                            return r.delete(e), r.delete(t), d
                        }

                        function hr(e, t, n, i, a, r, s) {
                            switch (n) {
                                case lt:
                                    if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset) return !1;
                                    e = e.buffer, t = t.buffer;
                                case ot:
                                    return !(e.byteLength != t.byteLength || !r(new Nu(e), new Nu(t)));
                                case We:
                                case Ge:
                                case Ke:
                                    return qo(+e, +t);
                                case ze:
                                    return e.name == t.name && e.message == t.message;
                                case et:
                                case nt:
                                    return e == t + "";
                                case Qe:
                                    var o = z;
                                case tt:
                                    var l = i & he;
                                    if (o || (o = Q), e.size != t.size && !l) return !1;
                                    var c = s.get(e);
                                    if (c) return c == t;
                                    i |= fe, s.set(e, t);
                                    var u = mr(o(e), o(t), i, a, r, s);
                                    return s.delete(e), u;
                                case it:
                                    if (dd) return dd.call(e) == dd.call(t)
                            }
                            return !1
                        }

                        function fr(e, t, n, i, a, r) {
                            var s = n & he,
                                o = br(e),
                                l = o.length;
                            if (l != br(t).length && !s) return !1;
                            for (var c = l; c--;) {
                                var u = o[c];
                                if (!(s ? u in t : gu.call(t, u))) return !1
                            }
                            var d = r.get(e);
                            if (d && r.get(t)) return d == t;
                            var p = !0;
                            r.set(e, t), r.set(t, e);
                            for (var m = s; ++c < l;) {
                                u = o[c];
                                var h = e[u],
                                    f = t[u];
                                if (i) var g = s ? i(f, h, u, t, e, r) : i(h, f, u, e, t, r);
                                if (!(g === ae ? h === f || a(h, f, n, i, r) : g)) {
                                    p = !1;
                                    break
                                }
                                m || (m = "constructor" == u)
                            }
                            if (p && !m) {
                                var b = e.constructor,
                                    v = t.constructor;
                                b != v && "constructor" in e && "constructor" in t && !("function" == typeof b && b instanceof b && "function" == typeof v && v instanceof v) && (p = !1)
                            }
                            return r.delete(e), r.delete(t), p
                        }

                        function gr(e) {
                            return Ud(zr(e, ae, ps), e + "")
                        }

                        function br(e) {
                            return bi(e, Bl, Ed)
                        }

                        function vr(e) {
                            return bi(e, Hl, Nd)
                        }

                        function kr(e) {
                            for (var t = e.name + "", n = ad[t], i = gu.call(ad, t) ? n.length : 0; i--;) {
                                var a = n[i],
                                    r = a.func;
                                if (null == r || r == e) return a.name
                            }
                            return t
                        }

                        function yr(e) {
                            return (gu.call(n, "placeholder") ? n : e).placeholder
                        }

                        function Sr() {
                            var e = n.iteratee || Oc;
                            return e = e === Oc ? ji : e, arguments.length ? e(arguments[0], arguments[1]) : e
                        }

                        function _r(e, t) {
                            var n = e.__data__;
                            return jr(t) ? n["string" == typeof t ? "string" : "hash"] : n.map
                        }

                        function Cr(e) {
                            for (var t = Bl(e), n = t.length; n--;) {
                                var i = t[n],
                                    a = e[i];
                                t[n] = [i, a, Hr(a)]
                            }
                            return t
                        }

                        function Er(e, t) {
                            var n = V(e, t);
                            return Mi(n) ? n : ae
                        }

                        function Nr(e) {
                            var t = gu.call(e, Mu),
                                n = e[Mu];
                            try {
                                e[Mu] = ae;
                                var i = !0
                            } catch (e) {}
                            var a = ku.call(e);
                            return i && (t ? e[Mu] = n : delete e[Mu]), a
                        }

                        function wr(e, t, n) {
                            for (var i = -1, a = n.length; ++i < a;) {
                                var r = n[i],
                                    s = r.size;
                                switch (r.type) {
                                    case "drop":
                                        e += s;
                                        break;
                                    case "dropRight":
                                        t -= s;
                                        break;
                                    case "take":
                                        t = zu(t, e + s);
                                        break;
                                    case "takeRight":
                                        e = qu(e, t - s)
                                }
                            }
                            return {
                                start: e,
                                end: t
                            }
                        }

                        function Dr(e) {
                            var t = e.match(At);
                            return t ? t[1].split(Lt) : []
                        }

                        function Tr(e, t, n) {
                            t = Ca(t, e);
                            for (var i = -1, a = t.length, r = !1; ++i < a;) {
                                var s = Xr(t[i]);
                                if (!(r = null != e && n(e, s))) break;
                                e = e[s]
                            }
                            return r || ++i != a ? r : !!(a = null == e ? 0 : e.length) && il(a) && Rr(s, a) && (gp(e) || fp(e))
                        }

                        function Ir(e) {
                            var t = e.length,
                                n = e.constructor(t);
                            return t && "string" == typeof e[0] && gu.call(e, "index") && (n.index = e.index, n.input = e.input), n
                        }

                        function Ur(e) {
                            return "function" != typeof e.constructor || Br(e) ? {} : md(Du(e))
                        }

                        function Or(e, t, n, i) {
                            var a = e.constructor;
                            switch (t) {
                                case ot:
                                    return wa(e);
                                case We:
                                case Ge:
                                    return new a(+e);
                                case lt:
                                    return Da(e, i);
                                case ct:
                                case ut:
                                case dt:
                                case pt:
                                case mt:
                                case ht:
                                case ft:
                                case gt:
                                case bt:
                                    return xa(e, i);
                                case Qe:
                                    return Ta(e, i, n);
                                case Ke:
                                case nt:
                                    return new a(e);
                                case et:
                                    return Ia(e);
                                case tt:
                                    return Ua(e, i, n);
                                case it:
                                    return Oa(e)
                            }
                        }

                        function xr(e, t) {
                            var n = t.length;
                            if (!n) return e;
                            var i = n - 1;
                            return t[i] = (n > 1 ? "& " : "") + t[i], t = t.join(n > 2 ? ", " : " "), e.replace(jt, "{\n/* [wrapped with " + t + "] */\n")
                        }

                        function Mr(e) {
                            return gp(e) || fp(e) || !!(Ou && e && e[Ou])
                        }

                        function Rr(e, t) {
                            return !!(t = null == t ? Me : t) && ("number" == typeof e || Jt.test(e)) && e > -1 && e % 1 == 0 && e < t
                        }

                        function Pr(e, t, n) {
                            if (!al(n)) return !1;
                            var i = typeof t;
                            return !!("number" == i ? zo(n) && Rr(t, n.length) : "string" == i && t in n) && qo(n[t], e)
                        }

                        function Fr(e, t) {
                            if (gp(e)) return !1;
                            var n = typeof e;
                            return !("number" != n && "symbol" != n && "boolean" != n && null != e && !gl(e)) || (It.test(e) || !Tt.test(e) || null != t && e in ou(t))
                        }

                        function jr(e) {
                            var t = typeof e;
                            return "string" == t || "number" == t || "symbol" == t || "boolean" == t ? "__proto__" !== e : null === e
                        }

                        function Ar(e) {
                            var t = kr(e),
                                i = n[t];
                            if ("function" != typeof i || !(t in y.prototype)) return !1;
                            if (e === i) return !0;
                            var a = Cd(i);
                            return !!a && e === a[0]
                        }

                        function Lr(e) {
                            return !!vu && vu in e
                        }

                        function Br(e) {
                            var t = e && e.constructor;
                            return e === ("function" == typeof t && t.prototype || mu)
                        }

                        function Hr(e) {
                            return e === e && !al(e)
                        }

                        function Vr(e, t) {
                            return function(n) {
                                return null != n && (n[e] === t && (t !== ae || e in ou(n)))
                            }
                        }

                        function Wr(e, t) {
                            var n = e[1],
                                i = t[1],
                                a = n | i,
                                r = a < (ge | be | Ce),
                                s = i == Ce && n == ke || i == Ce && n == Ee && e[7].length <= t[8] || i == (Ce | Ee) && t[7].length <= t[8] && n == ke;
                            if (!r && !s) return e;
                            i & ge && (e[2] = t[2], a |= n & ge ? 0 : ve);
                            var o = t[3];
                            if (o) {
                                var l = e[3];
                                e[3] = l ? Pa(l, o, t[4]) : o, e[4] = l ? J(e[3], ue) : t[4]
                            }
                            return o = t[5], o && (l = e[5], e[5] = l ? Fa(l, o, t[6]) : o, e[6] = l ? J(e[5], ue) : t[6]), o = t[7], o && (e[7] = o), i & Ce && (e[8] = null == e[8] ? t[8] : zu(e[8], t[8])), null == e[9] && (e[9] = t[9]), e[0] = t[0], e[1] = a, e
                        }

                        function Gr(e) {
                            var t = [];
                            if (null != e)
                                for (var n in ou(e)) t.push(n);
                            return t
                        }

                        function qr(e) {
                            return ku.call(e)
                        }

                        function zr(e, t, n) {
                            return t = qu(t === ae ? e.length - 1 : t, 0),
                                function() {
                                    for (var i = arguments, a = -1, r = qu(i.length - t, 0), s = nu(r); ++a < r;) s[a] = i[t + a];
                                    a = -1;
                                    for (var l = nu(t + 1); ++a < t;) l[a] = i[a];
                                    return l[t] = n(s), o(e, this, l)
                                }
                        }

                        function $r(e, t) {
                            return t.length < 2 ? e : gi(e, oa(t, 0, -1))
                        }

                        function Jr(e, t) {
                            for (var n = e.length, i = zu(t.length, n), a = ja(e); i--;) {
                                var r = t[i];
                                e[i] = Rr(r, n) ? a[r] : ae
                            }
                            return e
                        }

                        function Qr(e, t, n) {
                            var i = t + "";
                            return Ud(e, xr(i, es(Dr(i), n)))
                        }

                        function Kr(e) {
                            var t = 0,
                                n = 0;
                            return function() {
                                var i = $u(),
                                    a = Ie - (i - n);
                                if (n = i, a > 0) {
                                    if (++t >= Te) return arguments[0]
                                } else t = 0;
                                return e.apply(ae, arguments)
                            }
                        }

                        function Yr(e, t) {
                            var n = -1,
                                i = e.length,
                                a = i - 1;
                            for (t = t === ae ? i : t; ++n < t;) {
                                var r = Zi(n, a),
                                    s = e[r];
                                e[r] = e[n], e[n] = s
                            }
                            return e.length = t, e
                        }

                        function Xr(e) {
                            if ("string" == typeof e || gl(e)) return e;
                            var t = e + "";
                            return "0" == t && 1 / e == -xe ? "-0" : t
                        }

                        function Zr(e) {
                            if (null != e) {
                                try {
                                    return fu.call(e)
                                } catch (e) {}
                                try {
                                    return e + ""
                                } catch (e) {}
                            }
                            return ""
                        }

                        function es(e, t) {
                            return c(Le, function(n) {
                                var i = "_." + n[0];
                                t & n[1] && !m(e, i) && e.push(i)
                            }), e.sort()
                        }

                        function ts(e) {
                            if (e instanceof y) return e.clone();
                            var t = new a(e.__wrapped__, e.__chain__);
                            return t.__actions__ = ja(e.__actions__), t.__index__ = e.__index__, t.__values__ = e.__values__, t
                        }

                        function ns(e, t, n) {
                            t = (n ? Pr(e, t, n) : t === ae) ? 1 : qu(_l(t), 0);
                            var i = null == e ? 0 : e.length;
                            if (!i || t < 1) return [];
                            for (var a = 0, r = 0, s = nu(Au(i / t)); a < i;) s[r++] = oa(e, a, a += t);
                            return s
                        }

                        function is(e) {
                            for (var t = -1, n = null == e ? 0 : e.length, i = 0, a = []; ++t < n;) {
                                var r = e[t];
                                r && (a[i++] = r)
                            }
                            return a
                        }

                        function as() {
                            var e = arguments.length;
                            if (!e) return [];
                            for (var t = nu(e - 1), n = arguments[0], i = e; i--;) t[i - 1] = arguments[i];
                            return g(gp(n) ? ja(n) : [n], pi(t, 1))
                        }

                        function rs(e, t, n) {
                            var i = null == e ? 0 : e.length;
                            return i ? (t = n || t === ae ? 1 : _l(t), oa(e, t < 0 ? 0 : t, i)) : []
                        }

                        function ss(e, t, n) {
                            var i = null == e ? 0 : e.length;
                            return i ? (t = n || t === ae ? 1 : _l(t), t = i - t, oa(e, 0, t < 0 ? 0 : t)) : []
                        }

                        function os(e, t) {
                            return e && e.length ? ba(e, Sr(t, 3), !0, !0) : []
                        }

                        function ls(e, t) {
                            return e && e.length ? ba(e, Sr(t, 3), !0) : []
                        }

                        function cs(e, t, n, i) {
                            var a = null == e ? 0 : e.length;
                            return a ? (n && "number" != typeof n && Pr(e, t, n) && (n = 0, i = a), ui(e, t, n, i)) : []
                        }

                        function us(e, t, n) {
                            var i = null == e ? 0 : e.length;
                            if (!i) return -1;
                            var a = null == n ? 0 : _l(n);
                            return a < 0 && (a = qu(i + a, 0)), C(e, Sr(t, 3), a)
                        }

                        function ds(e, t, n) {
                            var i = null == e ? 0 : e.length;
                            if (!i) return -1;
                            var a = i - 1;
                            return n !== ae && (a = _l(n), a = n < 0 ? qu(i + a, 0) : zu(a, i - 1)), C(e, Sr(t, 3), a, !0)
                        }

                        function ps(e) {
                            return (null == e ? 0 : e.length) ? pi(e, 1) : []
                        }

                        function ms(e) {
                            return (null == e ? 0 : e.length) ? pi(e, xe) : []
                        }

                        function hs(e, t) {
                            return (null == e ? 0 : e.length) ? (t = t === ae ? 1 : _l(t), pi(e, t)) : []
                        }

                        function fs(e) {
                            for (var t = -1, n = null == e ? 0 : e.length, i = {}; ++t < n;) {
                                var a = e[t];
                                i[a[0]] = a[1]
                            }
                            return i
                        }

                        function gs(e) {
                            return e && e.length ? e[0] : ae
                        }

                        function bs(e, t, n) {
                            var i = null == e ? 0 : e.length;
                            if (!i) return -1;
                            var a = null == n ? 0 : _l(n);
                            return a < 0 && (a = qu(i + a, 0)), E(e, t, a)
                        }

                        function vs(e) {
                            return (null == e ? 0 : e.length) ? oa(e, 0, -1) : []
                        }

                        function ks(e, t) {
                            return null == e ? "" : Wu.call(e, t)
                        }

                        function ys(e) {
                            var t = null == e ? 0 : e.length;
                            return t ? e[t - 1] : ae
                        }

                        function Ss(e, t, n) {
                            var i = null == e ? 0 : e.length;
                            if (!i) return -1;
                            var a = i;
                            return n !== ae && (a = _l(n), a = a < 0 ? qu(i + a, 0) : zu(a, i - 1)), t === t ? X(e, t, a) : C(e, w, a, !0)
                        }

                        function _s(e, t) {
                            return e && e.length ? zi(e, _l(t)) : ae
                        }

                        function Cs(e, t) {
                            return e && e.length && t && t.length ? Yi(e, t) : e
                        }

                        function Es(e, t, n) {
                            return e && e.length && t && t.length ? Yi(e, t, Sr(n, 2)) : e
                        }

                        function Ns(e, t, n) {
                            return e && e.length && t && t.length ? Yi(e, t, ae, n) : e
                        }

                        function ws(e, t) {
                            var n = [];
                            if (!e || !e.length) return n;
                            var i = -1,
                                a = [],
                                r = e.length;
                            for (t = Sr(t, 3); ++i < r;) {
                                var s = e[i];
                                t(s, i, e) && (n.push(s), a.push(i))
                            }
                            return Xi(e, a), n
                        }

                        function Ds(e) {
                            return null == e ? e : Ku.call(e)
                        }

                        function Ts(e, t, n) {
                            var i = null == e ? 0 : e.length;
                            return i ? (n && "number" != typeof n && Pr(e, t, n) ? (t = 0, n = i) : (t = null == t ? 0 : _l(t), n = n === ae ? i : _l(n)), oa(e, t, n)) : []
                        }

                        function Is(e, t) {
                            return ca(e, t)
                        }

                        function Us(e, t, n) {
                            return ua(e, t, Sr(n, 2))
                        }

                        function Os(e, t) {
                            var n = null == e ? 0 : e.length;
                            if (n) {
                                var i = ca(e, t);
                                if (i < n && qo(e[i], t)) return i
                            }
                            return -1
                        }

                        function xs(e, t) {
                            return ca(e, t, !0)
                        }

                        function Ms(e, t, n) {
                            return ua(e, t, Sr(n, 2), !0)
                        }

                        function Rs(e, t) {
                            if (null == e ? 0 : e.length) {
                                var n = ca(e, t, !0) - 1;
                                if (qo(e[n], t)) return n
                            }
                            return -1
                        }

                        function Ps(e) {
                            return e && e.length ? da(e) : []
                        }

                        function Fs(e, t) {
                            return e && e.length ? da(e, Sr(t, 2)) : []
                        }

                        function js(e) {
                            var t = null == e ? 0 : e.length;
                            return t ? oa(e, 1, t) : []
                        }

                        function As(e, t, n) {
                            return e && e.length ? (t = n || t === ae ? 1 : _l(t), oa(e, 0, t < 0 ? 0 : t)) : []
                        }

                        function Ls(e, t, n) {
                            var i = null == e ? 0 : e.length;
                            return i ? (t = n || t === ae ? 1 : _l(t), t = i - t, oa(e, t < 0 ? 0 : t, i)) : []
                        }

                        function Bs(e, t) {
                            return e && e.length ? ba(e, Sr(t, 3), !1, !0) : []
                        }

                        function Hs(e, t) {
                            return e && e.length ? ba(e, Sr(t, 3)) : []
                        }

                        function Vs(e) {
                            return e && e.length ? ha(e) : []
                        }

                        function Ws(e, t) {
                            return e && e.length ? ha(e, Sr(t, 2)) : []
                        }

                        function Gs(e, t) {
                            return t = "function" == typeof t ? t : ae, e && e.length ? ha(e, ae, t) : []
                        }

                        function qs(e) {
                            if (!e || !e.length) return [];
                            var t = 0;
                            return e = p(e, function(e) {
                                if ($o(e)) return t = qu(e.length, t), !0
                            }), M(t, function(t) {
                                return f(e, T(t))
                            })
                        }

                        function zs(e, t) {
                            if (!e || !e.length) return [];
                            var n = qs(e);
                            return null == t ? n : f(n, function(e) {
                                return o(t, ae, e)
                            })
                        }

                        function $s(e, t) {
                            return ya(e || [], t || [], qn)
                        }

                        function Js(e, t) {
                            return ya(e || [], t || [], ra)
                        }

                        function Qs(e) {
                            var t = n(e);
                            return t.__chain__ = !0, t
                        }

                        function Ks(e, t) {
                            return t(e), e
                        }

                        function Ys(e, t) {
                            return t(e)
                        }

                        function Xs() {
                            return Qs(this)
                        }

                        function Zs() {
                            return new a(this.value(), this.__chain__)
                        }

                        function eo() {
                            this.__values__ === ae && (this.__values__ = yl(this.value()));
                            var e = this.__index__ >= this.__values__.length;
                            return {
                                done: e,
                                value: e ? ae : this.__values__[this.__index__++]
                            }
                        }

                        function to() {
                            return this
                        }

                        function no(e) {
                            for (var t, n = this; n instanceof i;) {
                                var a = ts(n);
                                a.__index__ = 0, a.__values__ = ae, t ? r.__wrapped__ = a : t = a;
                                var r = a;
                                n = n.__wrapped__
                            }
                            return r.__wrapped__ = e, t
                        }

                        function io() {
                            var e = this.__wrapped__;
                            if (e instanceof y) {
                                var t = e;
                                return this.__actions__.length && (t = new y(this)), t = t.reverse(), t.__actions__.push({
                                    func: Ys,
                                    args: [Ds],
                                    thisArg: ae
                                }), new a(t, this.__chain__)
                            }
                            return this.thru(Ds)
                        }

                        function ao() {
                            return va(this.__wrapped__, this.__actions__)
                        }

                        function ro(e, t, n) {
                            var i = gp(e) ? d : li;
                            return n && Pr(e, t, n) && (t = ae), i(e, Sr(t, 3))
                        }

                        function so(e, t) {
                            return (gp(e) ? p : di)(e, Sr(t, 3))
                        }

                        function oo(e, t) {
                            return pi(ho(e, t), 1)
                        }

                        function lo(e, t) {
                            return pi(ho(e, t), xe)
                        }

                        function co(e, t, n) {
                            return n = n === ae ? 1 : _l(n), pi(ho(e, t), n)
                        }

                        function uo(e, t) {
                            return (gp(e) ? c : hd)(e, Sr(t, 3))
                        }

                        function po(e, t) {
                            return (gp(e) ? u : fd)(e, Sr(t, 3))
                        }

                        function mo(e, t, n, i) {
                            e = zo(e) ? e : Zl(e), n = n && !i ? _l(n) : 0;
                            var a = e.length;
                            return n < 0 && (n = qu(a + n, 0)), fl(e) ? n <= a && e.indexOf(t, n) > -1 : !!a && E(e, t, n) > -1
                        }

                        function ho(e, t) {
                            return (gp(e) ? f : Hi)(e, Sr(t, 3))
                        }

                        function fo(e, t, n, i) {
                            return null == e ? [] : (gp(t) || (t = null == t ? [] : [t]), n = i ? ae : n, gp(n) || (n = null == n ? [] : [n]), $i(e, t, n))
                        }

                        function go(e, t, n) {
                            var i = gp(e) ? b : U,
                                a = arguments.length < 3;
                            return i(e, Sr(t, 4), n, a, hd)
                        }

                        function bo(e, t, n) {
                            var i = gp(e) ? v : U,
                                a = arguments.length < 3;
                            return i(e, Sr(t, 4), n, a, fd)
                        }

                        function vo(e, t) {
                            return (gp(e) ? p : di)(e, xo(Sr(t, 3)))
                        }

                        function ko(e) {
                            return (gp(e) ? Rn : ia)(e)
                        }

                        function yo(e, t, n) {
                            return t = (n ? Pr(e, t, n) : t === ae) ? 1 : _l(t), (gp(e) ? Pn : aa)(e, t)
                        }

                        function So(e) {
                            return (gp(e) ? jn : sa)(e)
                        }

                        function _o(e) {
                            if (null == e) return 0;
                            if (zo(e)) return fl(e) ? Z(e) : e.length;
                            var t = wd(e);
                            return t == Qe || t == tt ? e.size : Ai(e).length
                        }

                        function Co(e, t, n) {
                            var i = gp(e) ? k : la;
                            return n && Pr(e, t, n) && (t = ae), i(e, Sr(t, 3))
                        }

                        function Eo(e, t) {
                            if ("function" != typeof t) throw new uu(oe);
                            return e = _l(e),
                                function() {
                                    if (--e < 1) return t.apply(this, arguments)
                                }
                        }

                        function No(e, t, n) {
                            return t = n ? ae : t, t = e && null == t ? e.length : t, cr(e, Ce, ae, ae, ae, ae, t)
                        }

                        function wo(e, t) {
                            var n;
                            if ("function" != typeof t) throw new uu(oe);
                            return e = _l(e),
                                function() {
                                    return --e > 0 && (n = t.apply(this, arguments)), e <= 1 && (t = ae), n
                                }
                        }

                        function Do(e, t, n) {
                            t = n ? ae : t;
                            var i = cr(e, ke, ae, ae, ae, ae, ae, t);
                            return i.placeholder = Do.placeholder, i
                        }

                        function To(e, t, n) {
                            t = n ? ae : t;
                            var i = cr(e, ye, ae, ae, ae, ae, ae, t);
                            return i.placeholder = To.placeholder, i
                        }

                        function Io(e, t, n) {
                            function i(t) {
                                var n = p,
                                    i = m;
                                return p = m = ae, v = t, f = e.apply(i, n)
                            }

                            function a(e) {
                                return v = e, g = Id(o, t), k ? i(e) : f
                            }

                            function r(e) {
                                var n = e - b,
                                    i = e - v,
                                    a = t - n;
                                return y ? zu(a, h - i) : a
                            }

                            function s(e) {
                                var n = e - b,
                                    i = e - v;
                                return b === ae || n >= t || n < 0 || y && i >= h
                            }

                            function o() {
                                var e = ap();
                                if (s(e)) return l(e);
                                g = Id(o, r(e))
                            }

                            function l(e) {
                                return g = ae, S && p ? i(e) : (p = m = ae, f)
                            }

                            function c() {
                                g !== ae && Sd(g), v = 0, p = b = m = g = ae
                            }

                            function u() {
                                return g === ae ? f : l(ap())
                            }

                            function d() {
                                var e = ap(),
                                    n = s(e);
                                if (p = arguments, m = this, b = e, n) {
                                    if (g === ae) return a(b);
                                    if (y) return g = Id(o, t), i(b)
                                }
                                return g === ae && (g = Id(o, t)), f
                            }
                            var p, m, h, f, g, b, v = 0,
                                k = !1,
                                y = !1,
                                S = !0;
                            if ("function" != typeof e) throw new uu(oe);
                            return t = El(t) || 0, al(n) && (k = !!n.leading, y = "maxWait" in n, h = y ? qu(El(n.maxWait) || 0, t) : h, S = "trailing" in n ? !!n.trailing : S), d.cancel = c, d.flush = u, d
                        }

                        function Uo(e) {
                            return cr(e, Ne)
                        }

                        function Oo(e, t) {
                            if ("function" != typeof e || null != t && "function" != typeof t) throw new uu(oe);
                            var n = function() {
                                var i = arguments,
                                    a = t ? t.apply(this, i) : i[0],
                                    r = n.cache;
                                if (r.has(a)) return r.get(a);
                                var s = e.apply(this, i);
                                return n.cache = r.set(a, s) || r, s
                            };
                            return n.cache = new(Oo.Cache || cn), n
                        }

                        function xo(e) {
                            if ("function" != typeof e) throw new uu(oe);
                            return function() {
                                var t = arguments;
                                switch (t.length) {
                                    case 0:
                                        return !e.call(this);
                                    case 1:
                                        return !e.call(this, t[0]);
                                    case 2:
                                        return !e.call(this, t[0], t[1]);
                                    case 3:
                                        return !e.call(this, t[0], t[1], t[2])
                                }
                                return !e.apply(this, t)
                            }
                        }

                        function Mo(e) {
                            return wo(2, e)
                        }

                        function Ro(e, t) {
                            if ("function" != typeof e) throw new uu(oe);
                            return t = t === ae ? t : _l(t), na(e, t)
                        }

                        function Po(e, t) {
                            if ("function" != typeof e) throw new uu(oe);
                            return t = null == t ? 0 : qu(_l(t), 0), na(function(n) {
                                var i = n[t],
                                    a = Ea(n, 0, t);
                                return i && g(a, i), o(e, this, a)
                            })
                        }

                        function Fo(e, t, n) {
                            var i = !0,
                                a = !0;
                            if ("function" != typeof e) throw new uu(oe);
                            return al(n) && (i = "leading" in n ? !!n.leading : i, a = "trailing" in n ? !!n.trailing : a), Io(e, t, {
                                leading: i,
                                maxWait: t,
                                trailing: a
                            })
                        }

                        function jo(e) {
                            return No(e, 1)
                        }

                        function Ao(e, t) {
                            return up(_a(t), e)
                        }

                        function Lo() {
                            if (!arguments.length) return [];
                            var e = arguments[0];
                            return gp(e) ? e : [e]
                        }

                        function Bo(e) {
                            return ii(e, me)
                        }

                        function Ho(e, t) {
                            return t = "function" == typeof t ? t : ae, ii(e, me, t)
                        }

                        function Vo(e) {
                            return ii(e, de | me)
                        }

                        function Wo(e, t) {
                            return t = "function" == typeof t ? t : ae, ii(e, de | me, t)
                        }

                        function Go(e, t) {
                            return null == t || ri(e, t, Bl(t))
                        }

                        function qo(e, t) {
                            return e === t || e !== e && t !== t
                        }

                        function zo(e) {
                            return null != e && il(e.length) && !tl(e)
                        }

                        function $o(e) {
                            return rl(e) && zo(e)
                        }

                        function Jo(e) {
                            return !0 === e || !1 === e || rl(e) && vi(e) == We
                        }

                        function Qo(e) {
                            return rl(e) && 1 === e.nodeType && !ml(e)
                        }

                        function Ko(e) {
                            if (null == e) return !0;
                            if (zo(e) && (gp(e) || "string" == typeof e || "function" == typeof e.splice || vp(e) || Cp(e) || fp(e))) return !e.length;
                            var t = wd(e);
                            if (t == Qe || t == tt) return !e.size;
                            if (Br(e)) return !Ai(e).length;
                            for (var n in e)
                                if (gu.call(e, n)) return !1;
                            return !0
                        }

                        function Yo(e, t) {
                            return Ii(e, t)
                        }

                        function Xo(e, t, n) {
                            n = "function" == typeof n ? n : ae;
                            var i = n ? n(e, t) : ae;
                            return i === ae ? Ii(e, t, ae, n) : !!i
                        }

                        function Zo(e) {
                            if (!rl(e)) return !1;
                            var t = vi(e);
                            return t == ze || t == qe || "string" == typeof e.message && "string" == typeof e.name && !ml(e)
                        }

                        function el(e) {
                            return "number" == typeof e && Vu(e)
                        }

                        function tl(e) {
                            if (!al(e)) return !1;
                            var t = vi(e);
                            return t == $e || t == Je || t == Ve || t == Ze
                        }

                        function nl(e) {
                            return "number" == typeof e && e == _l(e)
                        }

                        function il(e) {
                            return "number" == typeof e && e > -1 && e % 1 == 0 && e <= Me
                        }

                        function al(e) {
                            var t = typeof e;
                            return null != e && ("object" == t || "function" == t)
                        }

                        function rl(e) {
                            return null != e && "object" == typeof e
                        }

                        function sl(e, t) {
                            return e === t || xi(e, t, Cr(t))
                        }

                        function ol(e, t, n) {
                            return n = "function" == typeof n ? n : ae, xi(e, t, Cr(t), n)
                        }

                        function ll(e) {
                            return pl(e) && e != +e
                        }

                        function cl(e) {
                            if (Dd(e)) throw new au(se);
                            return Mi(e)
                        }

                        function ul(e) {
                            return null === e
                        }

                        function dl(e) {
                            return null == e
                        }

                        function pl(e) {
                            return "number" == typeof e || rl(e) && vi(e) == Ke
                        }

                        function ml(e) {
                            if (!rl(e) || vi(e) != Xe) return !1;
                            var t = Du(e);
                            if (null === t) return !0;
                            var n = gu.call(t, "constructor") && t.constructor;
                            return "function" == typeof n && n instanceof n && fu.call(n) == yu
                        }

                        function hl(e) {
                            return nl(e) && e >= -Me && e <= Me
                        }

                        function fl(e) {
                            return "string" == typeof e || !gp(e) && rl(e) && vi(e) == nt
                        }

                        function gl(e) {
                            return "symbol" == typeof e || rl(e) && vi(e) == it
                        }

                        function bl(e) {
                            return e === ae
                        }

                        function vl(e) {
                            return rl(e) && wd(e) == rt
                        }

                        function kl(e) {
                            return rl(e) && vi(e) == st
                        }

                        function yl(e) {
                            if (!e) return [];
                            if (zo(e)) return fl(e) ? ee(e) : ja(e);
                            if (xu && e[xu]) return q(e[xu]());
                            var t = wd(e);
                            return (t == Qe ? z : t == tt ? Q : Zl)(e)
                        }

                        function Sl(e) {
                            if (!e) return 0 === e ? e : 0;
                            if ((e = El(e)) === xe || e === -xe) {
                                return (e < 0 ? -1 : 1) * Re
                            }
                            return e === e ? e : 0
                        }

                        function _l(e) {
                            var t = Sl(e),
                                n = t % 1;
                            return t === t ? n ? t - n : t : 0
                        }

                        function Cl(e) {
                            return e ? ni(_l(e), 0, Fe) : 0
                        }

                        function El(e) {
                            if ("number" == typeof e) return e;
                            if (gl(e)) return Pe;
                            if (al(e)) {
                                var t = "function" == typeof e.valueOf ? e.valueOf() : e;
                                e = al(t) ? t + "" : t
                            }
                            if ("string" != typeof e) return 0 === e ? e : +e;
                            e = e.replace(Rt, "");
                            var n = qt.test(e);
                            return n || $t.test(e) ? Un(e.slice(2), n ? 2 : 8) : Gt.test(e) ? Pe : +e
                        }

                        function Nl(e) {
                            return Aa(e, Hl(e))
                        }

                        function wl(e) {
                            return e ? ni(_l(e), -Me, Me) : 0 === e ? e : 0
                        }

                        function Dl(e) {
                            return null == e ? "" : ma(e)
                        }

                        function Tl(e, t) {
                            var n = md(e);
                            return null == t ? n : Xn(n, t)
                        }

                        function Il(e, t) {
                            return _(e, Sr(t, 3), mi)
                        }

                        function Ul(e, t) {
                            return _(e, Sr(t, 3), hi)
                        }

                        function Ol(e, t) {
                            return null == e ? e : gd(e, Sr(t, 3), Hl)
                        }

                        function xl(e, t) {
                            return null == e ? e : bd(e, Sr(t, 3), Hl)
                        }

                        function Ml(e, t) {
                            return e && mi(e, Sr(t, 3))
                        }

                        function Rl(e, t) {
                            return e && hi(e, Sr(t, 3))
                        }

                        function Pl(e) {
                            return null == e ? [] : fi(e, Bl(e))
                        }

                        function Fl(e) {
                            return null == e ? [] : fi(e, Hl(e))
                        }

                        function jl(e, t, n) {
                            var i = null == e ? ae : gi(e, t);
                            return i === ae ? n : i
                        }

                        function Al(e, t) {
                            return null != e && Tr(e, t, yi)
                        }

                        function Ll(e, t) {
                            return null != e && Tr(e, t, Si)
                        }

                        function Bl(e) {
                            return zo(e) ? xn(e) : Ai(e)
                        }

                        function Hl(e) {
                            return zo(e) ? xn(e, !0) : Li(e)
                        }

                        function Vl(e, t) {
                            var n = {};
                            return t = Sr(t, 3), mi(e, function(e, i, a) {
                                ei(n, t(e, i, a), e)
                            }), n
                        }

                        function Wl(e, t) {
                            var n = {};
                            return t = Sr(t, 3), mi(e, function(e, i, a) {
                                ei(n, i, t(e, i, a))
                            }), n
                        }

                        function Gl(e, t) {
                            return ql(e, xo(Sr(t)))
                        }

                        function ql(e, t) {
                            if (null == e) return {};
                            var n = f(vr(e), function(e) {
                                return [e]
                            });
                            return t = Sr(t), Qi(e, n, function(e, n) {
                                return t(e, n[0])
                            })
                        }

                        function zl(e, t, n) {
                            t = Ca(t, e);
                            var i = -1,
                                a = t.length;
                            for (a || (a = 1, e = ae); ++i < a;) {
                                var r = null == e ? ae : e[Xr(t[i])];
                                r === ae && (i = a, r = n), e = tl(r) ? r.call(e) : r
                            }
                            return e
                        }

                        function $l(e, t, n) {
                            return null == e ? e : ra(e, t, n)
                        }

                        function Jl(e, t, n, i) {
                            return i = "function" == typeof i ? i : ae, null == e ? e : ra(e, t, n, i)
                        }

                        function Ql(e, t, n) {
                            var i = gp(e),
                                a = i || vp(e) || Cp(e);
                            if (t = Sr(t, 4), null == n) {
                                var r = e && e.constructor;
                                n = a ? i ? new r : [] : al(e) && tl(r) ? md(Du(e)) : {}
                            }
                            return (a ? c : mi)(e, function(e, i, a) {
                                return t(n, e, i, a)
                            }), n
                        }

                        function Kl(e, t) {
                            return null == e || fa(e, t)
                        }

                        function Yl(e, t, n) {
                            return null == e ? e : ga(e, t, _a(n))
                        }

                        function Xl(e, t, n, i) {
                            return i = "function" == typeof i ? i : ae, null == e ? e : ga(e, t, _a(n), i)
                        }

                        function Zl(e) {
                            return null == e ? [] : F(e, Bl(e))
                        }

                        function ec(e) {
                            return null == e ? [] : F(e, Hl(e))
                        }

                        function tc(e, t, n) {
                            return n === ae && (n = t, t = ae), n !== ae && (n = El(n), n = n === n ? n : 0), t !== ae && (t = El(t), t = t === t ? t : 0), ni(El(e), t, n)
                        }

                        function nc(e, t, n) {
                            return t = Sl(t), n === ae ? (n = t, t = 0) : n = Sl(n), e = El(e), _i(e, t, n)
                        }

                        function ic(e, t, n) {
                            if (n && "boolean" != typeof n && Pr(e, t, n) && (t = n = ae), n === ae && ("boolean" == typeof t ? (n = t, t = ae) : "boolean" == typeof e && (n = e, e = ae)), e === ae && t === ae ? (e = 0, t = 1) : (e = Sl(e), t === ae ? (t = e, e = 0) : t = Sl(t)), e > t) {
                                var i = e;
                                e = t, t = i
                            }
                            if (n || e % 1 || t % 1) {
                                var a = Qu();
                                return zu(e + a * (t - e + In("1e-" + ((a + "").length - 1))), t)
                            }
                            return Zi(e, t)
                        }

                        function ac(e) {
                            return Qp(Dl(e).toLowerCase())
                        }

                        function rc(e) {
                            return (e = Dl(e)) && e.replace(Qt, zn).replace(gn, "")
                        }

                        function sc(e, t, n) {
                            e = Dl(e), t = ma(t);
                            var i = e.length;
                            n = n === ae ? i : ni(_l(n), 0, i);
                            var a = n;
                            return (n -= t.length) >= 0 && e.slice(n, a) == t
                        }

                        function oc(e) {
                            return e = Dl(e), e && Et.test(e) ? e.replace(_t, $n) : e
                        }

                        function lc(e) {
                            return e = Dl(e), e && Mt.test(e) ? e.replace(xt, "\\$&") : e
                        }

                        function cc(e, t, n) {
                            e = Dl(e), t = _l(t);
                            var i = t ? Z(e) : 0;
                            if (!t || i >= t) return e;
                            var a = (t - i) / 2;
                            return nr(Lu(a), n) + e + nr(Au(a), n)
                        }

                        function uc(e, t, n) {
                            e = Dl(e), t = _l(t);
                            var i = t ? Z(e) : 0;
                            return t && i < t ? e + nr(t - i, n) : e
                        }

                        function dc(e, t, n) {
                            e = Dl(e), t = _l(t);
                            var i = t ? Z(e) : 0;
                            return t && i < t ? nr(t - i, n) + e : e
                        }

                        function pc(e, t, n) {
                            return n || null == t ? t = 0 : t && (t = +t), Ju(Dl(e).replace(Pt, ""), t || 0)
                        }

                        function mc(e, t, n) {
                            return t = (n ? Pr(e, t, n) : t === ae) ? 1 : _l(t), ta(Dl(e), t)
                        }

                        function hc() {
                            var e = arguments,
                                t = Dl(e[0]);
                            return e.length < 3 ? t : t.replace(e[1], e[2])
                        }

                        function fc(e, t, n) {
                            return n && "number" != typeof n && Pr(e, t, n) && (t = n = ae), (n = n === ae ? Fe : n >>> 0) ? (e = Dl(e), e && ("string" == typeof t || null != t && !Sp(t)) && !(t = ma(t)) && W(e) ? Ea(ee(e), 0, n) : e.split(t, n)) : []
                        }

                        function gc(e, t, n) {
                            return e = Dl(e), n = null == n ? 0 : ni(_l(n), 0, e.length), t = ma(t), e.slice(n, n + t.length) == t
                        }

                        function bc(e, t, i) {
                            var a = n.templateSettings;
                            i && Pr(e, t, i) && (t = ae), e = Dl(e), t = Tp({}, t, a, ur);
                            var r, s, o = Tp({}, t.imports, a.imports, ur),
                                l = Bl(o),
                                c = F(o, l),
                                u = 0,
                                d = t.interpolate || Kt,
                                p = "__p += '",
                                m = lu((t.escape || Kt).source + "|" + d.source + "|" + (d === Dt ? Vt : Kt).source + "|" + (t.evaluate || Kt).source + "|$", "g"),
                                h = "//# sourceURL=" + ("sourceURL" in t ? t.sourceURL : "lodash.templateSources[" + ++_n + "]") + "\n";
                            e.replace(m, function(t, n, i, a, o, l) {
                                return i || (i = a), p += e.slice(u, l).replace(Yt, H), n && (r = !0, p += "' +\n__e(" + n + ") +\n'"), o && (s = !0, p += "';\n" + o + ";\n__p += '"), i && (p += "' +\n((__t = (" + i + ")) == null ? '' : __t) +\n'"), u = l + t.length, t
                            }), p += "';\n";
                            var f = t.variable;
                            f || (p = "with (obj) {\n" + p + "\n}\n"), p = (s ? p.replace(vt, "") : p).replace(kt, "$1").replace(yt, "$1;"), p = "function(" + (f || "obj") + ") {\n" + (f ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (r ? ", __e = _.escape" : "") + (s ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + p + "return __p\n}";
                            var g = Kp(function() {
                                return ru(l, h + "return " + p).apply(ae, c)
                            });
                            if (g.source = p, Zo(g)) throw g;
                            return g
                        }

                        function vc(e) {
                            return Dl(e).toLowerCase()
                        }

                        function kc(e) {
                            return Dl(e).toUpperCase()
                        }

                        function yc(e, t, n) {
                            if ((e = Dl(e)) && (n || t === ae)) return e.replace(Rt, "");
                            if (!e || !(t = ma(t))) return e;
                            var i = ee(e),
                                a = ee(t);
                            return Ea(i, A(i, a), L(i, a) + 1).join("")
                        }

                        function Sc(e, t, n) {
                            if ((e = Dl(e)) && (n || t === ae)) return e.replace(Ft, "");
                            if (!e || !(t = ma(t))) return e;
                            var i = ee(e);
                            return Ea(i, 0, L(i, ee(t)) + 1).join("")
                        }

                        function _c(e, t, n) {
                            if ((e = Dl(e)) && (n || t === ae)) return e.replace(Pt, "");
                            if (!e || !(t = ma(t))) return e;
                            var i = ee(e);
                            return Ea(i, A(i, ee(t))).join("")
                        }

                        function Cc(e, t) {
                            var n = we,
                                i = De;
                            if (al(t)) {
                                var a = "separator" in t ? t.separator : a;
                                n = "length" in t ? _l(t.length) : n, i = "omission" in t ? ma(t.omission) : i
                            }
                            e = Dl(e);
                            var r = e.length;
                            if (W(e)) {
                                var s = ee(e);
                                r = s.length
                            }
                            if (n >= r) return e;
                            var o = n - Z(i);
                            if (o < 1) return i;
                            var l = s ? Ea(s, 0, o).join("") : e.slice(0, o);
                            if (a === ae) return l + i;
                            if (s && (o += l.length - o), Sp(a)) {
                                if (e.slice(o).search(a)) {
                                    var c, u = l;
                                    for (a.global || (a = lu(a.source, Dl(Wt.exec(a)) + "g")), a.lastIndex = 0; c = a.exec(u);) var d = c.index;
                                    l = l.slice(0, d === ae ? o : d)
                                }
                            } else if (e.indexOf(ma(a), o) != o) {
                                var p = l.lastIndexOf(a);
                                p > -1 && (l = l.slice(0, p))
                            }
                            return l + i
                        }

                        function Ec(e) {
                            return e = Dl(e), e && Ct.test(e) ? e.replace(St, Jn) : e
                        }

                        function Nc(e, t, n) {
                            return e = Dl(e), t = n ? ae : t, t === ae ? G(e) ? ie(e) : S(e) : e.match(t) || []
                        }

                        function wc(e) {
                            var t = null == e ? 0 : e.length,
                                n = Sr();
                            return e = t ? f(e, function(e) {
                                if ("function" != typeof e[1]) throw new uu(oe);
                                return [n(e[0]), e[1]]
                            }) : [], na(function(n) {
                                for (var i = -1; ++i < t;) {
                                    var a = e[i];
                                    if (o(a[0], this, n)) return o(a[1], this, n)
                                }
                            })
                        }

                        function Dc(e) {
                            return ai(ii(e, de))
                        }

                        function Tc(e) {
                            return function() {
                                return e
                            }
                        }

                        function Ic(e, t) {
                            return null == e || e !== e ? t : e
                        }

                        function Uc(e) {
                            return e
                        }

                        function Oc(e) {
                            return ji("function" == typeof e ? e : ii(e, de))
                        }

                        function xc(e) {
                            return Vi(ii(e, de))
                        }

                        function Mc(e, t) {
                            return Wi(e, ii(t, de))
                        }

                        function Rc(e, t, n) {
                            var i = Bl(t),
                                a = fi(t, i);
                            null != n || al(t) && (a.length || !i.length) || (n = t, t = e, e = this, a = fi(t, Bl(t)));
                            var r = !(al(n) && "chain" in n && !n.chain),
                                s = tl(e);
                            return c(a, function(n) {
                                var i = t[n];
                                e[n] = i, s && (e.prototype[n] = function() {
                                    var t = this.__chain__;
                                    if (r || t) {
                                        var n = e(this.__wrapped__);
                                        return (n.__actions__ = ja(this.__actions__)).push({
                                            func: i,
                                            args: arguments,
                                            thisArg: e
                                        }), n.__chain__ = t, n
                                    }
                                    return i.apply(e, g([this.value()], arguments))
                                })
                            }), e
                        }

                        function Pc() {
                            return Mn._ === this && (Mn._ = Su), this
                        }

                        function Fc() {}

                        function jc(e) {
                            return e = _l(e), na(function(t) {
                                return zi(t, e)
                            })
                        }

                        function Ac(e) {
                            return Fr(e) ? T(Xr(e)) : Ki(e)
                        }

                        function Lc(e) {
                            return function(t) {
                                return null == e ? ae : gi(e, t)
                            }
                        }

                        function Bc() {
                            return []
                        }

                        function Hc() {
                            return !1
                        }

                        function Vc() {
                            return {}
                        }

                        function Wc() {
                            return ""
                        }

                        function Gc() {
                            return !0
                        }

                        function qc(e, t) {
                            if ((e = _l(e)) < 1 || e > Me) return [];
                            var n = Fe,
                                i = zu(e, Fe);
                            t = Sr(t), e -= Fe;
                            for (var a = M(i, t); ++n < e;) t(n);
                            return a
                        }

                        function zc(e) {
                            return gp(e) ? f(e, Xr) : gl(e) ? [e] : ja(Od(Dl(e)))
                        }

                        function $c(e) {
                            var t = ++bu;
                            return Dl(e) + t
                        }

                        function Jc(e) {
                            return e && e.length ? ci(e, Uc, ki) : ae
                        }

                        function Qc(e, t) {
                            return e && e.length ? ci(e, Sr(t, 2), ki) : ae
                        }

                        function Kc(e) {
                            return D(e, Uc)
                        }

                        function Yc(e, t) {
                            return D(e, Sr(t, 2))
                        }

                        function Xc(e) {
                            return e && e.length ? ci(e, Uc, Bi) : ae
                        }

                        function Zc(e, t) {
                            return e && e.length ? ci(e, Sr(t, 2), Bi) : ae
                        }

                        function eu(e) {
                            return e && e.length ? x(e, Uc) : 0
                        }

                        function tu(e, t) {
                            return e && e.length ? x(e, Sr(t, 2)) : 0
                        }
                        t = null == t ? Mn : Qn.defaults(Mn.Object(), t, Qn.pick(Mn, Sn));
                        var nu = t.Array,
                            iu = t.Date,
                            au = t.Error,
                            ru = t.Function,
                            su = t.Math,
                            ou = t.Object,
                            lu = t.RegExp,
                            cu = t.String,
                            uu = t.TypeError,
                            du = nu.prototype,
                            pu = ru.prototype,
                            mu = ou.prototype,
                            hu = t["__core-js_shared__"],
                            fu = pu.toString,
                            gu = mu.hasOwnProperty,
                            bu = 0,
                            vu = function() {
                                var e = /[^.]+$/.exec(hu && hu.keys && hu.keys.IE_PROTO || "");
                                return e ? "Symbol(src)_1." + e : ""
                            }(),
                            ku = mu.toString,
                            yu = fu.call(ou),
                            Su = Mn._,
                            _u = lu("^" + fu.call(gu).replace(xt, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
                            Cu = Fn ? t.Buffer : ae,
                            Eu = t.Symbol,
                            Nu = t.Uint8Array,
                            wu = Cu ? Cu.allocUnsafe : ae,
                            Du = $(ou.getPrototypeOf, ou),
                            Tu = ou.create,
                            Iu = mu.propertyIsEnumerable,
                            Uu = du.splice,
                            Ou = Eu ? Eu.isConcatSpreadable : ae,
                            xu = Eu ? Eu.iterator : ae,
                            Mu = Eu ? Eu.toStringTag : ae,
                            Ru = function() {
                                try {
                                    var e = Er(ou, "defineProperty");
                                    return e({}, "", {}), e
                                } catch (e) {}
                            }(),
                            Pu = t.clearTimeout !== Mn.clearTimeout && t.clearTimeout,
                            Fu = iu && iu.now !== Mn.Date.now && iu.now,
                            ju = t.setTimeout !== Mn.setTimeout && t.setTimeout,
                            Au = su.ceil,
                            Lu = su.floor,
                            Bu = ou.getOwnPropertySymbols,
                            Hu = Cu ? Cu.isBuffer : ae,
                            Vu = t.isFinite,
                            Wu = du.join,
                            Gu = $(ou.keys, ou),
                            qu = su.max,
                            zu = su.min,
                            $u = iu.now,
                            Ju = t.parseInt,
                            Qu = su.random,
                            Ku = du.reverse,
                            Yu = Er(t, "DataView"),
                            Xu = Er(t, "Map"),
                            Zu = Er(t, "Promise"),
                            ed = Er(t, "Set"),
                            td = Er(t, "WeakMap"),
                            nd = Er(ou, "create"),
                            id = td && new td,
                            ad = {},
                            rd = Zr(Yu),
                            sd = Zr(Xu),
                            od = Zr(Zu),
                            ld = Zr(ed),
                            cd = Zr(td),
                            ud = Eu ? Eu.prototype : ae,
                            dd = ud ? ud.valueOf : ae,
                            pd = ud ? ud.toString : ae,
                            md = function() {
                                function e() {}
                                return function(t) {
                                    if (!al(t)) return {};
                                    if (Tu) return Tu(t);
                                    e.prototype = t;
                                    var n = new e;
                                    return e.prototype = ae, n
                                }
                            }();
                        n.templateSettings = {
                            escape: Nt,
                            evaluate: wt,
                            interpolate: Dt,
                            variable: "",
                            imports: {
                                _: n
                            }
                        }, n.prototype = i.prototype, n.prototype.constructor = n, a.prototype = md(i.prototype), a.prototype.constructor = a, y.prototype = md(i.prototype), y.prototype.constructor = y, ne.prototype.clear = Bt, ne.prototype.delete = Xt, ne.prototype.get = Zt, ne.prototype.has = en, ne.prototype.set = tn, nn.prototype.clear = an, nn.prototype.delete = rn, nn.prototype.get = sn, nn.prototype.has = on, nn.prototype.set = ln, cn.prototype.clear = un, cn.prototype.delete = dn, cn.prototype.get = pn, cn.prototype.has = mn, cn.prototype.set = hn, bn.prototype.add = bn.prototype.push = vn, bn.prototype.has = kn, yn.prototype.clear = Nn, yn.prototype.delete = wn, yn.prototype.get = Dn, yn.prototype.has = Tn, yn.prototype.set = On;
                        var hd = Wa(mi),
                            fd = Wa(hi, !0),
                            gd = Ga(),
                            bd = Ga(!0),
                            vd = id ? function(e, t) {
                                return id.set(e, t), e
                            } : Uc,
                            kd = Ru ? function(e, t) {
                                return Ru(e, "toString", {
                                    configurable: !0,
                                    enumerable: !1,
                                    value: Tc(t),
                                    writable: !0
                                })
                            } : Uc,
                            yd = na,
                            Sd = Pu || function(e) {
                                return Mn.clearTimeout(e)
                            },
                            _d = ed && 1 / Q(new ed([, -0]))[1] == xe ? function(e) {
                                return new ed(e)
                            } : Fc,
                            Cd = id ? function(e) {
                                return id.get(e)
                            } : Fc,
                            Ed = Bu ? function(e) {
                                return null == e ? [] : (e = ou(e), p(Bu(e), function(t) {
                                    return Iu.call(e, t)
                                }))
                            } : Bc,
                            Nd = Bu ? function(e) {
                                for (var t = []; e;) g(t, Ed(e)), e = Du(e);
                                return t
                            } : Bc,
                            wd = vi;
                        (Yu && wd(new Yu(new ArrayBuffer(1))) != lt || Xu && wd(new Xu) != Qe || Zu && "[object Promise]" != wd(Zu.resolve()) || ed && wd(new ed) != tt || td && wd(new td) != rt) && (wd = function(e) {
                            var t = vi(e),
                                n = t == Xe ? e.constructor : ae,
                                i = n ? Zr(n) : "";
                            if (i) switch (i) {
                                case rd:
                                    return lt;
                                case sd:
                                    return Qe;
                                case od:
                                    return "[object Promise]";
                                case ld:
                                    return tt;
                                case cd:
                                    return rt
                            }
                            return t
                        });
                        var Dd = hu ? tl : Hc,
                            Td = Kr(vd),
                            Id = ju || function(e, t) {
                                return Mn.setTimeout(e, t)
                            },
                            Ud = Kr(kd),
                            Od = function(e) {
                                var t = Oo(e, function(e) {
                                        return n.size === ce && n.clear(), e
                                    }),
                                    n = t.cache;
                                return t
                            }(function(e) {
                                var t = [];
                                return Ut.test(e) && t.push(""), e.replace(Ot, function(e, n, i, a) {
                                    t.push(i ? a.replace(Ht, "$1") : n || e)
                                }), t
                            }),
                            xd = na(function(e, t) {
                                return $o(e) ? oi(e, pi(t, 1, $o, !0)) : []
                            }),
                            Md = na(function(e, t) {
                                var n = ys(t);
                                return $o(n) && (n = ae), $o(e) ? oi(e, pi(t, 1, $o, !0), Sr(n, 2)) : []
                            }),
                            Rd = na(function(e, t) {
                                var n = ys(t);
                                return $o(n) && (n = ae), $o(e) ? oi(e, pi(t, 1, $o, !0), ae, n) : []
                            }),
                            Pd = na(function(e) {
                                var t = f(e, Sa);
                                return t.length && t[0] === e[0] ? Ci(t) : []
                            }),
                            Fd = na(function(e) {
                                var t = ys(e),
                                    n = f(e, Sa);
                                return t === ys(n) ? t = ae : n.pop(), n.length && n[0] === e[0] ? Ci(n, Sr(t, 2)) : []
                            }),
                            jd = na(function(e) {
                                var t = ys(e),
                                    n = f(e, Sa);
                                return t = "function" == typeof t ? t : ae, t && n.pop(), n.length && n[0] === e[0] ? Ci(n, ae, t) : []
                            }),
                            Ad = na(Cs),
                            Ld = gr(function(e, t) {
                                var n = null == e ? 0 : e.length,
                                    i = ti(e, t);
                                return Xi(e, f(t, function(e) {
                                    return Rr(e, n) ? +e : e
                                }).sort(Ma)), i
                            }),
                            Bd = na(function(e) {
                                return ha(pi(e, 1, $o, !0))
                            }),
                            Hd = na(function(e) {
                                var t = ys(e);
                                return $o(t) && (t = ae), ha(pi(e, 1, $o, !0), Sr(t, 2))
                            }),
                            Vd = na(function(e) {
                                var t = ys(e);
                                return t = "function" == typeof t ? t : ae, ha(pi(e, 1, $o, !0), ae, t)
                            }),
                            Wd = na(function(e, t) {
                                return $o(e) ? oi(e, t) : []
                            }),
                            Gd = na(function(e) {
                                return ka(p(e, $o))
                            }),
                            qd = na(function(e) {
                                var t = ys(e);
                                return $o(t) && (t = ae), ka(p(e, $o), Sr(t, 2))
                            }),
                            zd = na(function(e) {
                                var t = ys(e);
                                return t = "function" == typeof t ? t : ae, ka(p(e, $o), ae, t)
                            }),
                            $d = na(qs),
                            Jd = na(function(e) {
                                var t = e.length,
                                    n = t > 1 ? e[t - 1] : ae;
                                return n = "function" == typeof n ? (e.pop(), n) : ae, zs(e, n)
                            }),
                            Qd = gr(function(e) {
                                var t = e.length,
                                    n = t ? e[0] : 0,
                                    i = this.__wrapped__,
                                    r = function(t) {
                                        return ti(t, e)
                                    };
                                return !(t > 1 || this.__actions__.length) && i instanceof y && Rr(n) ? (i = i.slice(n, +n + (t ? 1 : 0)), i.__actions__.push({
                                    func: Ys,
                                    args: [r],
                                    thisArg: ae
                                }), new a(i, this.__chain__).thru(function(e) {
                                    return t && !e.length && e.push(ae), e
                                })) : this.thru(r)
                            }),
                            Kd = Ha(function(e, t, n) {
                                gu.call(e, n) ? ++e[n] : ei(e, n, 1)
                            }),
                            Yd = Ka(us),
                            Xd = Ka(ds),
                            Zd = Ha(function(e, t, n) {
                                gu.call(e, n) ? e[n].push(t) : ei(e, n, [t])
                            }),
                            ep = na(function(e, t, n) {
                                var i = -1,
                                    a = "function" == typeof t,
                                    r = zo(e) ? nu(e.length) : [];
                                return hd(e, function(e) {
                                    r[++i] = a ? o(t, e, n) : Ni(e, t, n)
                                }), r
                            }),
                            tp = Ha(function(e, t, n) {
                                ei(e, n, t)
                            }),
                            np = Ha(function(e, t, n) {
                                e[n ? 0 : 1].push(t)
                            }, function() {
                                return [
                                    [],
                                    []
                                ]
                            }),
                            ip = na(function(e, t) {
                                if (null == e) return [];
                                var n = t.length;
                                return n > 1 && Pr(e, t[0], t[1]) ? t = [] : n > 2 && Pr(t[0], t[1], t[2]) && (t = [t[0]]), $i(e, pi(t, 1), [])
                            }),
                            ap = Fu || function() {
                                return Mn.Date.now()
                            },
                            rp = na(function(e, t, n) {
                                var i = ge;
                                if (n.length) {
                                    var a = J(n, yr(rp));
                                    i |= Se
                                }
                                return cr(e, i, t, n, a)
                            }),
                            sp = na(function(e, t, n) {
                                var i = ge | be;
                                if (n.length) {
                                    var a = J(n, yr(sp));
                                    i |= Se
                                }
                                return cr(t, i, e, n, a)
                            }),
                            op = na(function(e, t) {
                                return si(e, 1, t)
                            }),
                            lp = na(function(e, t, n) {
                                return si(e, El(t) || 0, n)
                            });
                        Oo.Cache = cn;
                        var cp = yd(function(e, t) {
                                t = 1 == t.length && gp(t[0]) ? f(t[0], P(Sr())) : f(pi(t, 1), P(Sr()));
                                var n = t.length;
                                return na(function(i) {
                                    for (var a = -1, r = zu(i.length, n); ++a < r;) i[a] = t[a].call(this, i[a]);
                                    return o(e, this, i)
                                })
                            }),
                            up = na(function(e, t) {
                                var n = J(t, yr(up));
                                return cr(e, Se, ae, t, n)
                            }),
                            dp = na(function(e, t) {
                                var n = J(t, yr(dp));
                                return cr(e, _e, ae, t, n)
                            }),
                            pp = gr(function(e, t) {
                                return cr(e, Ee, ae, ae, ae, t)
                            }),
                            mp = rr(ki),
                            hp = rr(function(e, t) {
                                return e >= t
                            }),
                            fp = wi(function() {
                                return arguments
                            }()) ? wi : function(e) {
                                return rl(e) && gu.call(e, "callee") && !Iu.call(e, "callee")
                            },
                            gp = nu.isArray,
                            bp = Ln ? P(Ln) : Di,
                            vp = Hu || Hc,
                            kp = Bn ? P(Bn) : Ti,
                            yp = Hn ? P(Hn) : Oi,
                            Sp = Vn ? P(Vn) : Ri,
                            _p = Wn ? P(Wn) : Pi,
                            Cp = Gn ? P(Gn) : Fi,
                            Ep = rr(Bi),
                            Np = rr(function(e, t) {
                                return e <= t
                            }),
                            wp = Va(function(e, t) {
                                if (Br(t) || zo(t)) return void Aa(t, Bl(t), e);
                                for (var n in t) gu.call(t, n) && qn(e, n, t[n])
                            }),
                            Dp = Va(function(e, t) {
                                Aa(t, Hl(t), e)
                            }),
                            Tp = Va(function(e, t, n, i) {
                                Aa(t, Hl(t), e, i)
                            }),
                            Ip = Va(function(e, t, n, i) {
                                Aa(t, Bl(t), e, i)
                            }),
                            Up = gr(ti),
                            Op = na(function(e) {
                                return e.push(ae, ur), o(Tp, ae, e)
                            }),
                            xp = na(function(e) {
                                return e.push(ae, dr), o(jp, ae, e)
                            }),
                            Mp = Za(function(e, t, n) {
                                e[t] = n
                            }, Tc(Uc)),
                            Rp = Za(function(e, t, n) {
                                gu.call(e, t) ? e[t].push(n) : e[t] = [n]
                            }, Sr),
                            Pp = na(Ni),
                            Fp = Va(function(e, t, n) {
                                Gi(e, t, n)
                            }),
                            jp = Va(function(e, t, n, i) {
                                Gi(e, t, n, i)
                            }),
                            Ap = gr(function(e, t) {
                                var n = {};
                                if (null == e) return n;
                                var i = !1;
                                t = f(t, function(t) {
                                    return t = Ca(t, e), i || (i = t.length > 1), t
                                }), Aa(e, vr(e), n), i && (n = ii(n, de | pe | me, pr));
                                for (var a = t.length; a--;) fa(n, t[a]);
                                return n
                            }),
                            Lp = gr(function(e, t) {
                                return null == e ? {} : Ji(e, t)
                            }),
                            Bp = lr(Bl),
                            Hp = lr(Hl),
                            Vp = $a(function(e, t, n) {
                                return t = t.toLowerCase(), e + (n ? ac(t) : t)
                            }),
                            Wp = $a(function(e, t, n) {
                                return e + (n ? "-" : "") + t.toLowerCase()
                            }),
                            Gp = $a(function(e, t, n) {
                                return e + (n ? " " : "") + t.toLowerCase()
                            }),
                            qp = za("toLowerCase"),
                            zp = $a(function(e, t, n) {
                                return e + (n ? "_" : "") + t.toLowerCase()
                            }),
                            $p = $a(function(e, t, n) {
                                return e + (n ? " " : "") + Qp(t)
                            }),
                            Jp = $a(function(e, t, n) {
                                return e + (n ? " " : "") + t.toUpperCase()
                            }),
                            Qp = za("toUpperCase"),
                            Kp = na(function(e, t) {
                                try {
                                    return o(e, ae, t)
                                } catch (e) {
                                    return Zo(e) ? e : new au(e)
                                }
                            }),
                            Yp = gr(function(e, t) {
                                return c(t, function(t) {
                                    t = Xr(t), ei(e, t, rp(e[t], e))
                                }), e
                            }),
                            Xp = Ya(),
                            Zp = Ya(!0),
                            em = na(function(e, t) {
                                return function(n) {
                                    return Ni(n, e, t)
                                }
                            }),
                            tm = na(function(e, t) {
                                return function(n) {
                                    return Ni(e, n, t)
                                }
                            }),
                            nm = tr(f),
                            im = tr(d),
                            am = tr(k),
                            rm = ar(),
                            sm = ar(!0),
                            om = er(function(e, t) {
                                return e + t
                            }, 0),
                            lm = or("ceil"),
                            cm = er(function(e, t) {
                                return e / t
                            }, 1),
                            um = or("floor"),
                            dm = er(function(e, t) {
                                return e * t
                            }, 1),
                            pm = or("round"),
                            mm = er(function(e, t) {
                                return e - t
                            }, 0);
                        return n.after = Eo, n.ary = No, n.assign = wp, n.assignIn = Dp, n.assignInWith = Tp, n.assignWith = Ip, n.at = Up, n.before = wo, n.bind = rp, n.bindAll = Yp, n.bindKey = sp, n.castArray = Lo, n.chain = Qs, n.chunk = ns, n.compact = is, n.concat = as, n.cond = wc, n.conforms = Dc, n.constant = Tc, n.countBy = Kd, n.create = Tl, n.curry = Do, n.curryRight = To, n.debounce = Io, n.defaults = Op, n.defaultsDeep = xp, n.defer = op, n.delay = lp, n.difference = xd, n.differenceBy = Md, n.differenceWith = Rd, n.drop = rs, n.dropRight = ss, n.dropRightWhile = os, n.dropWhile = ls, n.fill = cs, n.filter = so, n.flatMap = oo, n.flatMapDeep = lo, n.flatMapDepth = co, n.flatten = ps, n.flattenDeep = ms, n.flattenDepth = hs, n.flip = Uo, n.flow = Xp, n.flowRight = Zp, n.fromPairs = fs, n.functions = Pl, n.functionsIn = Fl, n.groupBy = Zd, n.initial = vs, n.intersection = Pd, n.intersectionBy = Fd, n.intersectionWith = jd, n.invert = Mp, n.invertBy = Rp, n.invokeMap = ep, n.iteratee = Oc, n.keyBy = tp, n.keys = Bl, n.keysIn = Hl, n.map = ho, n.mapKeys = Vl, n.mapValues = Wl, n.matches = xc, n.matchesProperty = Mc, n.memoize = Oo, n.merge = Fp, n.mergeWith = jp, n.method = em, n.methodOf = tm, n.mixin = Rc, n.negate = xo, n.nthArg = jc, n.omit = Ap, n.omitBy = Gl, n.once = Mo, n.orderBy = fo, n.over = nm, n.overArgs = cp, n.overEvery = im, n.overSome = am, n.partial = up, n.partialRight = dp, n.partition = np, n.pick = Lp, n.pickBy = ql, n.property = Ac, n.propertyOf = Lc, n.pull = Ad, n.pullAll = Cs, n.pullAllBy = Es, n.pullAllWith = Ns, n.pullAt = Ld, n.range = rm, n.rangeRight = sm, n.rearg = pp, n.reject = vo, n.remove = ws, n.rest = Ro, n.reverse = Ds, n.sampleSize = yo, n.set = $l, n.setWith = Jl, n.shuffle = So, n.slice = Ts, n.sortBy = ip, n.sortedUniq = Ps, n.sortedUniqBy = Fs, n.split = fc, n.spread = Po, n.tail = js, n.take = As, n.takeRight = Ls, n.takeRightWhile = Bs, n.takeWhile = Hs, n.tap = Ks, n.throttle = Fo, n.thru = Ys, n.toArray = yl, n.toPairs = Bp, n.toPairsIn = Hp, n.toPath = zc, n.toPlainObject = Nl, n.transform = Ql, n.unary = jo, n.union = Bd, n.unionBy = Hd, n.unionWith = Vd, n.uniq = Vs, n.uniqBy = Ws, n.uniqWith = Gs, n.unset = Kl, n.unzip = qs, n.unzipWith = zs, n.update = Yl, n.updateWith = Xl, n.values = Zl, n.valuesIn = ec, n.without = Wd, n.words = Nc, n.wrap = Ao, n.xor = Gd, n.xorBy = qd, n.xorWith = zd, n.zip = $d, n.zipObject = $s, n.zipObjectDeep = Js, n.zipWith = Jd, n.entries = Bp, n.entriesIn = Hp, n.extend = Dp, n.extendWith = Tp, Rc(n, n), n.add = om, n.attempt = Kp, n.camelCase = Vp, n.capitalize = ac, n.ceil = lm, n.clamp = tc, n.clone = Bo, n.cloneDeep = Vo, n.cloneDeepWith = Wo, n.cloneWith = Ho, n.conformsTo = Go, n.deburr = rc, n.defaultTo = Ic, n.divide = cm, n.endsWith = sc, n.eq = qo, n.escape = oc, n.escapeRegExp = lc, n.every = ro, n.find = Yd, n.findIndex = us, n.findKey = Il, n.findLast = Xd, n.findLastIndex = ds, n.findLastKey = Ul, n.floor = um, n.forEach = uo, n.forEachRight = po, n.forIn = Ol, n.forInRight = xl, n.forOwn = Ml, n.forOwnRight = Rl, n.get = jl, n.gt = mp, n.gte = hp, n.has = Al, n.hasIn = Ll, n.head = gs, n.identity = Uc, n.includes = mo, n.indexOf = bs, n.inRange = nc, n.invoke = Pp, n.isArguments = fp, n.isArray = gp, n.isArrayBuffer = bp, n.isArrayLike = zo, n.isArrayLikeObject = $o, n.isBoolean = Jo, n.isBuffer = vp, n.isDate = kp, n.isElement = Qo, n.isEmpty = Ko, n.isEqual = Yo, n.isEqualWith = Xo, n.isError = Zo, n.isFinite = el, n.isFunction = tl, n.isInteger = nl, n.isLength = il, n.isMap = yp, n.isMatch = sl, n.isMatchWith = ol, n.isNaN = ll, n.isNative = cl, n.isNil = dl, n.isNull = ul, n.isNumber = pl, n.isObject = al, n.isObjectLike = rl, n.isPlainObject = ml, n.isRegExp = Sp, n.isSafeInteger = hl, n.isSet = _p, n.isString = fl, n.isSymbol = gl, n.isTypedArray = Cp, n.isUndefined = bl, n.isWeakMap = vl, n.isWeakSet = kl, n.join = ks, n.kebabCase = Wp, n.last = ys, n.lastIndexOf = Ss, n.lowerCase = Gp, n.lowerFirst = qp, n.lt = Ep, n.lte = Np, n.max = Jc, n.maxBy = Qc, n.mean = Kc, n.meanBy = Yc, n.min = Xc, n.minBy = Zc, n.stubArray = Bc, n.stubFalse = Hc, n.stubObject = Vc, n.stubString = Wc, n.stubTrue = Gc, n.multiply = dm, n.nth = _s, n.noConflict = Pc, n.noop = Fc, n.now = ap, n.pad = cc, n.padEnd = uc, n.padStart = dc, n.parseInt = pc, n.random = ic, n.reduce = go, n.reduceRight = bo, n.repeat = mc, n.replace = hc, n.result = zl, n.round = pm, n.runInContext = e, n.sample = ko, n.size = _o, n.snakeCase = zp, n.some = Co, n.sortedIndex = Is, n.sortedIndexBy = Us, n.sortedIndexOf = Os, n.sortedLastIndex = xs, n.sortedLastIndexBy = Ms, n.sortedLastIndexOf = Rs, n.startCase = $p, n.startsWith = gc, n.subtract = mm, n.sum = eu, n.sumBy = tu, n.template = bc, n.times = qc, n.toFinite = Sl, n.toInteger = _l, n.toLength = Cl, n.toLower = vc, n.toNumber = El, n.toSafeInteger = wl, n.toString = Dl, n.toUpper = kc, n.trim = yc, n.trimEnd = Sc, n.trimStart = _c, n.truncate = Cc, n.unescape = Ec, n.uniqueId = $c, n.upperCase = Jp, n.upperFirst = Qp, n.each = uo, n.eachRight = po, n.first = gs, Rc(n, function() {
                            var e = {};
                            return mi(n, function(t, i) {
                                gu.call(n.prototype, i) || (e[i] = t)
                            }), e
                        }(), {
                            chain: !1
                        }), n.VERSION = "4.17.4", c(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(e) {
                            n[e].placeholder = n
                        }), c(["drop", "take"], function(e, t) {
                            y.prototype[e] = function(n) {
                                n = n === ae ? 1 : qu(_l(n), 0);
                                var i = this.__filtered__ && !t ? new y(this) : this.clone();
                                return i.__filtered__ ? i.__takeCount__ = zu(n, i.__takeCount__) : i.__views__.push({
                                    size: zu(n, Fe),
                                    type: e + (i.__dir__ < 0 ? "Right" : "")
                                }), i
                            }, y.prototype[e + "Right"] = function(t) {
                                return this.reverse()[e](t).reverse()
                            }
                        }), c(["filter", "map", "takeWhile"], function(e, t) {
                            var n = t + 1,
                                i = n == Ue || 3 == n;
                            y.prototype[e] = function(e) {
                                var t = this.clone();
                                return t.__iteratees__.push({
                                    iteratee: Sr(e, 3),
                                    type: n
                                }), t.__filtered__ = t.__filtered__ || i, t
                            }
                        }), c(["head", "last"], function(e, t) {
                            var n = "take" + (t ? "Right" : "");
                            y.prototype[e] = function() {
                                return this[n](1).value()[0]
                            }
                        }), c(["initial", "tail"], function(e, t) {
                            var n = "drop" + (t ? "" : "Right");
                            y.prototype[e] = function() {
                                return this.__filtered__ ? new y(this) : this[n](1)
                            }
                        }), y.prototype.compact = function() {
                            return this.filter(Uc)
                        }, y.prototype.find = function(e) {
                            return this.filter(e).head()
                        }, y.prototype.findLast = function(e) {
                            return this.reverse().find(e)
                        }, y.prototype.invokeMap = na(function(e, t) {
                            return "function" == typeof e ? new y(this) : this.map(function(n) {
                                return Ni(n, e, t)
                            })
                        }), y.prototype.reject = function(e) {
                            return this.filter(xo(Sr(e)))
                        }, y.prototype.slice = function(e, t) {
                            e = _l(e);
                            var n = this;
                            return n.__filtered__ && (e > 0 || t < 0) ? new y(n) : (e < 0 ? n = n.takeRight(-e) : e && (n = n.drop(e)), t !== ae && (t = _l(t), n = t < 0 ? n.dropRight(-t) : n.take(t - e)), n)
                        }, y.prototype.takeRightWhile = function(e) {
                            return this.reverse().takeWhile(e).reverse()
                        }, y.prototype.toArray = function() {
                            return this.take(Fe)
                        }, mi(y.prototype, function(e, t) {
                            var i = /^(?:filter|find|map|reject)|While$/.test(t),
                                r = /^(?:head|last)$/.test(t),
                                s = n[r ? "take" + ("last" == t ? "Right" : "") : t],
                                o = r || /^find/.test(t);
                            s && (n.prototype[t] = function() {
                                var t = this.__wrapped__,
                                    l = r ? [1] : arguments,
                                    c = t instanceof y,
                                    u = l[0],
                                    d = c || gp(t),
                                    p = function(e) {
                                        var t = s.apply(n, g([e], l));
                                        return r && m ? t[0] : t
                                    };
                                d && i && "function" == typeof u && 1 != u.length && (c = d = !1);
                                var m = this.__chain__,
                                    h = !!this.__actions__.length,
                                    f = o && !m,
                                    b = c && !h;
                                if (!o && d) {
                                    t = b ? t : new y(this);
                                    var v = e.apply(t, l);
                                    return v.__actions__.push({
                                        func: Ys,
                                        args: [p],
                                        thisArg: ae
                                    }), new a(v, m)
                                }
                                return f && b ? e.apply(this, l) : (v = this.thru(p), f ? r ? v.value()[0] : v.value() : v)
                            })
                        }), c(["pop", "push", "shift", "sort", "splice", "unshift"], function(e) {
                            var t = du[e],
                                i = /^(?:push|sort|unshift)$/.test(e) ? "tap" : "thru",
                                a = /^(?:pop|shift)$/.test(e);
                            n.prototype[e] = function() {
                                var e = arguments;
                                if (a && !this.__chain__) {
                                    var n = this.value();
                                    return t.apply(gp(n) ? n : [], e)
                                }
                                return this[i](function(n) {
                                    return t.apply(gp(n) ? n : [], e)
                                })
                            }
                        }), mi(y.prototype, function(e, t) {
                            var i = n[t];
                            if (i) {
                                var a = i.name + "";
                                (ad[a] || (ad[a] = [])).push({
                                    name: t,
                                    func: i
                                })
                            }
                        }), ad[Xa(ae, be).name] = [{
                            name: "wrapper",
                            func: ae
                        }], y.prototype.clone = I, y.prototype.reverse = Y, y.prototype.value = te, n.prototype.at = Qd, n.prototype.chain = Xs, n.prototype.commit = Zs, n.prototype.next = eo, n.prototype.plant = no, n.prototype.reverse = io, n.prototype.toJSON = n.prototype.valueOf = n.prototype.value = ao, n.prototype.first = n.prototype.head, xu && (n.prototype[xu] = to), n
                    }();
                Mn._ = Qn, (a = function() {
                    return Qn
                }.call(t, n, t, i)) !== ae && (i.exports = a)
            }).call(this)
        }).call(t, n(33), n(445)(e))
    },
    865: function(e, t, n) {
        "use strict";

        function i(e) {
            if (e.action && e.userId) {
                var t = {
                    location: s.PageviewLocation.Channel,
                    action: e.action,
                    target: e.target,
                    type: e.type,
                    channel_id: e.channelId,
                    user_id: e.userId,
                    time: Date.now()
                };
                r.n.tracking.track(s.SpadeEventType.CrateNotificationAction, t)
            }
        }
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return o
        }), n.d(t, "c", function() {
            return l
        }), t.d = i;
        var a, r = n(2),
            s = n(12);
        ! function(e) {
            e.Close = "close", e.DontShowThis = "dont_show_this", e.LearnMore = "learn_more", e.OpenLater = "open_later", e.OpenNow = "open_now", e.Timeout = "timeout", e.TryBeta = "try_beta", e.View = "view"
        }(a || (a = {}));
        var o;
        ! function(e) {
            e.Inventory = "inventory", e.OpenCrate = "open_crate"
        }(o || (o = {}));
        var l;
        ! function(e) {
            e.Ftue = "ftue", e.ReceiveCrate = "receive_crate", e.BitsIntro = "bits_intro"
        }(l || (l = {}))
    },
    868: function(e, t) {},
    869: function(e, t) {},
    87: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "c", function() {
            return c
        }), n.d(t, "a", function() {
            return d
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "d", function() {
            return f
        });
        var i = n(0),
            a = n(267),
            r = {
                "^B-?\\)$": "B)",
                "^:-?[z|Z|\\|]$": ":|",
                "^:-?\\)$": ":)",
                "^:-?\\($": ":(",
                "^:-?(p|P)$": ":P",
                "^;-?(p|P)$": ";P",
                "^:-?[\\\\/]$": ":/",
                "^;-?\\)$": ";)",
                "^R-?\\)$": "R)",
                "^:>$": ":>",
                "^[oO](_|\\.)[oO]$": "O_o",
                "^:-?D$": ":D",
                "^:-?(o|O)$": ":O",
                "^>\\($": ">(",
                "^:-?(?:7|L)$": ":7",
                "^:-?(S|s)$": ":S",
                "^#-?[\\\\/]$": "#/",
                "^<\\]$": "<]",
                "^<3$": "<3",
                "^&lt;3$": "<3",
                "^&lt;\\]$": "<]",
                "^&gt;\\($": ">("
            },
            s = ["1.0", "2.0", "3.0"],
            o = new Set([457, 33, 42, 0]),
            l = function(e) {
                return e.map(function(e) {
                    var t = m(e.token),
                        n = r[t] || t,
                        a = s.reduce(function(t, n) {
                            var i = t.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x");
                            return "3.0" !== n && (i = i.concat(", ")), i
                        }, "");
                    return i.__assign({
                        displayName: n,
                        srcSet: a
                    }, e)
                })
            },
            c = function(e) {
                var t = m(e);
                return r[t] || t
            },
            u = function(e) {
                return e.slice().sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            },
            d = function(e) {
                for (var t = [], n = [], i = 0, a = e; i < a.length; i++) {
                    var r = a[i];
                    o.has(parseInt(r.id, 10)) ? t.push({
                        id: r.id,
                        emotes: l(u(r.emotes))
                    }) : n.push({
                        id: r.id,
                        emotes: l(u(r.emotes))
                    })
                }
                return n.concat(t)
            },
            p = function(e) {
                return /[\|\\\^\$\*\+\?\:\#]/.test(e)
            },
            m = function(e) {
                return p(e) ? "^" + e.replace(/\\(?=[&;:])/g, "") + "$" : e
            },
            h = function(e, t) {
                var n = a.b,
                    i = [],
                    r = [],
                    s = [],
                    o = new RegExp("^" + t, "i");
                return e.forEach(function(e) {
                    n[e.token] ? s.push(e) : e.token.match(o) ? i.push(e) : r.push(e)
                }), i.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), r.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), s.sort(function(e, t) {
                    return n[t.token].count - n[e.token].count
                }), s.concat(i).concat(r)
            },
            f = function(e) {
                var t = {};
                return e.filter(function(e) {
                    return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                })
            }
    },
    870: function(e, t, n) {
        "use strict";

        function i(e, t) {
            return e === r.SECOND ? Object(s.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                secondCount: t
            }, "formatDuration") : e === r.MINUTE ? Object(s.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                minuteCount: t
            }, "formatDuration") : e === r.DAY ? Object(s.d)("{dayCount, plural, one {# day} other {# days}}", {
                dayCount: t
            }, "formatDuration") : e === r.HOUR ? Object(s.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                hourCount: t
            }, "formatDuration") : e === r.WEEK ? Object(s.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                weekCount: t
            }, "formatDuration") : e === r.MONTH ? Object(s.d)("{monthCount, plural, one {# month} other {# months}}", {
                monthCount: t
            }, "formatDuration") : ""
        }

        function a(e) {
            if (e < 60) return i(r.SECOND, e);
            var t = Math.floor(e / 60),
                n = e % 60;
            if (t < 60) return n ? i(r.MINUTE, t) + " " + i(r.SECOND, n) : i(r.MINUTE, t);
            var a = Math.floor(t / 60);
            if (t %= 60, a < 24) return t ? i(r.HOUR, a) + " " + i(r.MINUTE, t) : i(r.HOUR, a);
            var s = Math.floor(a / 24);
            if (a %= 24, s < 7) return a ? i(r.DAY, s) + " " + i(r.HOUR, a) : i(r.DAY, s);
            if (s <= 26) {
                var o = Math.floor(s / 7);
                return s %= 7, s ? i(r.WEEK, o) + " " + i(r.DAY, s) : i(r.WEEK, o)
            }
            var l = Math.round((s + 3) / 30);
            return i(r.MONTH, l)
        }
        t.a = a;
        var r, s = n(2);
        ! function(e) {
            e[e.SECOND = 0] = "SECOND", e[e.MINUTE = 1] = "MINUTE", e[e.HOUR = 2] = "HOUR", e[e.DAY = 3] = "DAY", e[e.WEEK = 4] = "WEEK", e[e.MONTH = 5] = "MONTH"
        }(r || (r = {}))
    },
    871: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n(1),
            a = (n.n(i), n(388)),
            r = function(e) {
                var t, n = e.emote,
                    r = n.alt || "";
                return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                    className: "chat-line__message--cheer-amount",
                    style: {
                        color: n.cheerColor
                    }
                }, n.cheerAmount)), i.createElement(a.a, {
                    alt: r,
                    cheerText: t,
                    className: "chat-line__message--emote",
                    srcKey: "1x",
                    srcSet: n.images
                })
            }
    },
    872: function(e, t, n) {
        e.exports = n.p + "assets/halloween_banner-4cd26b58841153f5c3fa6488f22e0082.png"
    },
    876: function(e, t, n) {
        "use strict";

        function i() {
            return Object(o.d)("Unable to ban user", "BlockUserMutation")
        }

        function a(e) {
            var t = this;
            return Object(l.a)(m, {
                props: function(n) {
                    return {
                        onBanUser: function(a, l) {
                            return void 0 === l && (l = null), s.__awaiter(t, void 0, void 0, function() {
                                var t, m, h, f, g, b;
                                return s.__generator(this, function(s) {
                                    switch (s.label) {
                                        case 0:
                                            if (t = l ? p.a.Timeout : p.a.Ban, m = e(n.ownProps), h = m.channelID, f = m.onPushMessage, !n.mutate) return [3, 5];
                                            s.label = 1;
                                        case 1:
                                            return s.trys.push([1, 3, , 4]), [4, n.mutate(Object(c.a)({
                                                channelID: h,
                                                bannedUserLogin: a,
                                                expiresIn: l && r(l)
                                            }))];
                                        case 2:
                                            return s.sent(), g = Object(d.a)(t, a, null, l), f && f(g), [2, g];
                                        case 3:
                                            throw b = s.sent(), o.i.error(b, "Unable to ban user"), f && f(Object(u.a)(i())), new Error(i());
                                        case 4:
                                            return [3, 6];
                                        case 5:
                                            throw f && f(Object(u.a)(i())), new Error(i());
                                        case 6:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        }

        function r(e) {
            if (!e) return "0s";
            var t = e,
                n = "";
            if (t > v) {
                var i = Math.floor(t / v);
                t -= i * v, n += i + "mo"
            }
            if (t > b) {
                var a = Math.floor(t / b);
                t -= a * b, n += a + "w"
            }
            if (t > g) {
                var r = Math.floor(t / g);
                t -= r * g, n += r + "d"
            }
            if (t > f) {
                var s = Math.floor(t / f);
                t -= s * f, n += s + "h"
            }
            if (t > h) {
                var o = Math.floor(t / h);
                t -= o * h, n += o + "m"
            }
            return t > 0 && (n += t + "s"), n
        }
        t.a = a;
        var s = n(0),
            o = n(2),
            l = n(6),
            c = n(21),
            u = n(833),
            d = n(846),
            p = n(805),
            m = n(884),
            h = (n.n(m), 60),
            f = 60 * h,
            g = 24 * f,
            b = 7 * g,
            v = 4 * b
    },
    879: function(e, t) {},
    880: function(e, t) {},
    881: function(e, t) {},
    882: function(e, t) {},
    883: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "VideoChatCard_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "previewThumbnailURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "90"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "51"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "publishedAt"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 210
            }
        };
        n.loc.source = {
            body: "query VideoChatCard_Video($videoID: ID!) {\n  video(id: $videoID) {\n    id\n    title\n    previewThumbnailURL(width: 90, height: 51)\n    publishedAt\n    owner {\n      id\n      login\n      displayName\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    884: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_BanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "createdAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 148
            }
        };
        n.loc.source = {
            body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\n  banUserFromChatRoom(input: $input) {\n    ban {\n      createdAt\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    885: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = c.createElement(R._21, {
                    bold: !0,
                    type: R._26.Span
                }, c.createElement("span", {
                    style: {
                        color: e.chatColor
                    }
                }, Object(L.a)(e.login, e.displayName))),
                n = null;
            return e.editAppearance || (n = c.createElement(R.U, {
                margin: {
                    top: 1
                }
            }, c.createElement("div", {
                className: "chat-settings__edit-button",
                onClick: e.onClickEdit,
                "data-a-target": V,
                "data-test-selector": H
            }, Object(T.d)("Edit Appearance", "ChatSettings")))), c.createElement(R._17, {
                background: R.m.Base,
                color: R.F.Base,
                display: R.H.InlineFlex,
                flexDirection: R.J.Column,
                fullWidth: !0
            }, c.createElement(R._21, {
                color: R.F.Alt2,
                transform: R._25.Uppercase
            }, Object(T.d)("Name Display", "ChatSettings")), c.createElement(R.U, {
                margin: {
                    top: 2
                }
            }, e.userBadges && e.userBadges.map(function(e) {
                return c.createElement(B.a, {
                    key: e.id,
                    badge: e
                })
            }), t), n)
        }

        function a() {
            return {}
        }

        function r(e) {
            return Object(p.bindActionCreators)({
                showReportUserModal: function(e) {
                    var t = l.__rest(e, []);
                    return Object(G.d)(q.a, t)
                }
            }, e)
        }

        function s(e) {
            return {
                darkModeEnabled: Object(y.a)(e) === m.a.Dark,
                followerModeDuration: e.chat.followerDuration,
                followerModeEnabled: e.chat.followerMode,
                lastUsedFollowerDurations: e.chat.lastUsedFollowerDurations,
                showModerationIcons: e.chat.showModIcons,
                showTimestamps: e.chat.showTimestamps,
                slowModeEnabled: e.chat.slowMode,
                theatreModeEnabled: e.ui.theatreModeEnabled,
                isLoggedIn: Object(k.d)(e)
            }
        }

        function o(e) {
            return Object(p.bindActionCreators)({
                onChatHide: function() {
                    return S.E()
                },
                onChatUnhide: function() {
                    return S.G()
                },
                onFollowerModeDisable: function() {
                    return S.u()
                },
                onFollowerModeDurationChange: function(e) {
                    return S.r(e)
                },
                onFollowerModeDurationPreferenceChange: function(e, t) {
                    return S.s(e, t)
                },
                onFollowerModeEnable: function() {
                    return S.z()
                },
                onModIconsDisable: function() {
                    return S.v()
                },
                onModIconsEnable: function() {
                    return S.A()
                },
                onSlowModeDisable: function() {
                    return S.w()
                },
                onSlowModeEnable: function() {
                    return S.B()
                },
                onTimestampsDisable: function() {
                    return S.y()
                },
                onTimestampsEnable: function() {
                    return S.D()
                },
                onShowViewerCard: _.d,
                onThemeChanged: function(e) {
                    return Object(v.b)(e, void 0, !1)
                },
                login: function() {
                    return Object(b.f)(g.a.Chat)
                }
            }, e)
        }
        var l = n(0),
            c = n(1),
            u = n(7),
            d = n(22),
            p = n(9),
            m = n(38),
            h = n(829),
            f = n(823),
            g = n(48),
            b = n(32),
            v = n(131),
            k = n(17),
            y = n(52),
            S = n(379),
            _ = n(816),
            C = n(830),
            E = n(840),
            N = n(817),
            w = n(845),
            D = n(849),
            T = n(2),
            I = n(28),
            U = n(47),
            O = n(6),
            x = n(4),
            M = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            R = n(3),
            P = (n(886), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onColorSelected = function(e) {
                        var n = e.currentTarget.getAttribute("data-color");
                        n && t.props.onColorSelected(n)
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = M.map(function(t) {
                            var n = {
                                "color-chooser": !0,
                                "color-chooser--selected": t === e.props.selectedColor
                            };
                            return c.createElement("div", {
                                key: t,
                                "data-color": t,
                                onClick: e.onColorSelected,
                                className: x(n),
                                style: {
                                    backgroundColor: t
                                },
                                "data-test-selector": "color_swatch_" + t
                            })
                        }),
                        n = c.createElement(R._21, {
                            transform: R._25.Uppercase,
                            color: R.F.Alt2
                        }, Object(T.d)("Name Color", "ChatSettings"));
                    return this.props.borderTop && (n = c.createElement(R._17, {
                        margin: {
                            top: 2
                        },
                        borderTop: !0,
                        padding: {
                            top: 2
                        }
                    }, n)), c.createElement("div", null, c.createElement(R._17, {
                        margin: {
                            bottom: 1
                        },
                        background: R.m.Base,
                        color: R.F.Base,
                        display: R.H.InlineFlex,
                        flexDirection: R.J.Column,
                        fullWidth: !0
                    }, n), c.createElement(R.U, {
                        margin: {
                            y: 1
                        }
                    }, t, c.createElement(R._21, {
                        fontSize: R.L.Size7
                    }, c.createElement("a", {
                        href: "https://twitch.tv/products/turbo?ref=more_colors_direct"
                    }, Object(T.d)("more colors →", "ChatSettings")))))
                }, t
            }(c.Component)),
            F = n(20),
            j = n(887),
            A = (n(888), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onGlobalBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setGlobalBadge(t.props.userLogin, n || "")
                    }, t.onChannelBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.currentUser ? c.createElement("div", null, c.createElement(P, {
                        selectedColor: this.props.userChatColor,
                        onColorSelected: this.props.onColorSelected,
                        borderTop: !0
                    }), this.getBadgeChooser()) : null
                }, t.prototype.getBadgeChooser = function() {
                    var e = this;
                    if (this.props.data) {
                        var t = this.props.data.user.self.availableBadges,
                            n = this.props.data.user.self.selectedBadge,
                            i = this.props.data.currentUser.availableBadges,
                            a = this.props.data.currentUser.selectedBadge;
                        if (!t) return null;
                        var r = void 0 === this.state.channelBadgeID && n ? n.setID : this.state.channelBadgeID,
                            s = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !r
                            },
                            o = Object(T.d)("No channel badges :(", "ChatSettings");
                        t && t.length > 0 && (o = t.map(function(t) {
                            var i = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": n && t.setID === r
                            };
                            return c.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onChannelBadgeClicked,
                                key: t.setID + "/" + t.version,
                                className: x(i),
                                "data-test-selector": "channel_badge_" + t.setID,
                                "data-a-target": "channel_badge_" + t.setID
                            }, c.createElement(R._30, {
                                label: t.title
                            }, c.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        }), o.push(c.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onChannelBadgeClicked,
                            className: x(s),
                            "data-test-selector": "channel_badge_none",
                            "data-a-target": "channel_badge_none"
                        }, c.createElement(R._30, {
                            label: Object(T.d)("Same as Global", "ChatSettings")
                        }, c.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, c.createElement(R._8, {
                            asset: R._9.Global
                        }))))));
                        var l = void 0 === this.state.globalBadgeID && a ? a.setID : this.state.globalBadgeID,
                            u = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": !l
                            },
                            d = Object(T.d)("No global badges :(", "ChatSettings");
                        return i && i.length > 0 && (d = i.map(function(t) {
                            var n = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": a && t.setID === l
                            };
                            return c.createElement("div", {
                                "data-badge": t.setID,
                                onClick: e.onGlobalBadgeClicked,
                                key: t.setID + "/" + t.version,
                                className: x(n),
                                "data-test-selector": "global_badge_" + t.setID,
                                "data-a-target": "global_badge_" + t.setID
                            }, c.createElement(R._30, {
                                label: t.title
                            }, c.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        }), d.push(c.createElement("div", {
                            key: "none",
                            "data-badge": "",
                            onClick: this.onGlobalBadgeClicked,
                            className: x(u),
                            "data-test-selector": "global_badge_none",
                            "data-a-target": "global_badge_none"
                        }, c.createElement(R._30, {
                            label: Object(T.d)("None", "ChatSettings")
                        }, c.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, c.createElement(R._8, {
                            asset: R._9.Ban
                        })))))), c.createElement("div", null, c.createElement(R._17, {
                            background: R.m.Base,
                            color: R.F.Base,
                            display: R.H.InlineFlex,
                            flexDirection: R.J.Column,
                            fullWidth: !0
                        }, c.createElement(R._17, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, c.createElement(R._30, {
                            align: R._31.Left,
                            label: Object(T.d)("Your global badge is shown when chatting and whispering.", "ChatSettings"),
                            width: 175
                        }, c.createElement(R._21, {
                            color: R.F.Alt2,
                            transform: R._25.Uppercase
                        }, Object(T.d)("Global Badge [?]", "ChatSettings")))), c.createElement(R.U, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: R.H.Flex,
                            "data-a-target": "global-badge-selector"
                        }, d)), c.createElement(R._17, {
                            background: R.m.Base,
                            color: R.F.Base,
                            display: R.H.InlineFlex,
                            flexDirection: R.J.Column,
                            fullWidth: !0
                        }, c.createElement(R._17, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, c.createElement(R._30, {
                            align: R._31.Left,
                            label: Object(T.d)("Change the badge shown when chatting in this channel.", "ChatSettings"),
                            width: 175
                        }, c.createElement(R._21, {
                            color: R.F.Alt2,
                            transform: R._25.Uppercase
                        }, Object(T.d)("Channel Badge [?]", "ChatSettings")))), c.createElement(R.U, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: R.H.Flex,
                            "data-a-target": "channel-badge-selector"
                        }, o)))
                    }
                }, t.prototype.setChannelBadge = function(e, t, n) {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var i, a, r;
                        return l.__generator(this, function(s) {
                            switch (s.label) {
                                case 0:
                                    return i = {
                                        "Client-ID": T.n.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, a = "https://api.twitch.tv/kraken/users/" + t + "/chat/channels/" + e + "/badges", [4, fetch(a, {
                                        method: "PUT",
                                        body: F.stringify({
                                            selected_badge: n
                                        }),
                                        headers: i
                                    })];
                                case 1:
                                    return r = s.sent(), r && r.ok && (this.props.onBadgesChanged(), this.setState({
                                        channelBadgeID: n
                                    })), [2]
                            }
                        })
                    })
                }, t.prototype.setGlobalBadge = function(e, t) {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var n, i, a;
                        return l.__generator(this, function(r) {
                            switch (r.label) {
                                case 0:
                                    return n = {
                                        "Client-ID": T.n.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, i = "https://api.twitch.tv/kraken/users/" + e + "/chat/badges", [4, fetch(i, {
                                        method: "PUT",
                                        body: F.stringify({
                                            selected_badge: t
                                        }),
                                        headers: n
                                    }).catch(console.error)];
                                case 1:
                                    return a = r.sent(), a && a.ok && (this.props.onBadgesChanged(), this.setState({
                                        globalBadgeID: t
                                    })), [2]
                            }
                        })
                    })
                }, t = l.__decorate([Object(O.a)(j, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(c.Component)),
            L = n(49),
            B = n(821),
            H = "edit-appearance-button",
            V = "edit-appearance-button",
            W = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return c.createElement(R.U, {
                        "data-toggle-balloon-id": "raids-follower-only-tooltip",
                        margin: {
                            left: .5
                        },
                        position: R._2.Relative
                    }, c.createElement(R._30, {
                        align: R._31.Right,
                        direction: R._32.Top,
                        display: R.H.InlineFlex,
                        label: this.props.text,
                        width: 175,
                        show: !0
                    }, c.createElement(R.P, {
                        alignItems: R.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: R.H.InlineFlex,
                        justifyContent: R.T.Center
                    }, c.createElement(R._21, {
                        color: R.F.Overlay,
                        fontSize: R.L.Size8,
                        type: R._26.Span,
                        "data-test-selector": "raids-follower-only-tooltip"
                    }, "i"))))
                }, t
            }(c.Component),
            G = n(36),
            q = n(377),
            z = n(10),
            $ = n(810),
            J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.targetChannelID = t.props.targetChannelID, t
                }
                return l.__extends(t, e), t.fetchRecentRaidsList = function(e) {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return l.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, $.a.get("/kraken/raids?client_id=" + T.a.authClientID + "&api_version=" + T.a.defaultAPIVersion + "&target_id=" + e)];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), T.i.error(n, "Couldn't fetch raids list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.deserialize = function(e) {
                    var t = [];
                    if (e.body && e.body.raids) {
                        for (var n in e.body.raids)
                            if (n.hasOwnProperty) {
                                var i = {
                                    raidID: e.body.raids[n]._id,
                                    raidAt: e.body.raids[n].raid_at,
                                    userID: e.body.raids[n].creator_user._id,
                                    name: e.body.raids[n].creator_user.name
                                };
                                t.push(i)
                            }
                        return t
                    }
                    return []
                }, t
            }(c.Component),
            Q = n(21),
            K = n(819),
            Y = n(828),
            X = n(889),
            Z = n(890),
            ee = (n(891), n(892)),
            te = function(e, t, n) {
                var i = e.readQuery({
                    query: Z,
                    variables: {
                        targetUserID: n.raiderUserID,
                        channelID: n.channelID
                    }
                });
                t && t.data && (i.chatRoomBanStatus = {
                    isPermanent: !0,
                    __typename: "ChatRoomBanStatus"
                }), e.writeQuery({
                    query: Z,
                    variables: {
                        targetUserID: n.raiderUserID,
                        channelID: n.channelID
                    },
                    data: i
                })
            },
            ne = function(e, t) {
                var n = e.readQuery({
                        query: Z,
                        variables: {
                            targetUserID: t.raiderUserID,
                            channelID: t.channelID
                        }
                    }),
                    i = l.__assign({}, n, {
                        chatRoomBanStatus: null
                    });
                e.writeQuery({
                    query: Z,
                    variables: {
                        targetUserID: t.raiderUserID,
                        channelID: t.channelID
                    },
                    data: i
                })
            },
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onUsernameClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-username"),
                            i = e.currentTarget.getAttribute("data-raid-id") || "";
                        n && t.props.onUsernameClick(n, Y.a.recent_raids, i)
                    }, t.onBanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.banUser)(Object(Q.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t.onUnbanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.unbanUser)(Object(Q.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return c.createElement(R.U, {
                        key: "recent-raids-layout2-" + this.props.raiderUserID,
                        className: "recent-raids-item",
                        flexDirection: R.J.Row,
                        display: R.H.Flex,
                        fullWidth: !0
                    }, c.createElement(R.U, {
                        flexDirection: R.J.Row,
                        display: R.H.Flex,
                        fullWidth: !0,
                        justifyContent: R.T.Between
                    }, c.createElement(R._21, {
                        bold: !0
                    }, c.createElement("a", {
                        className: "recent-raids-item__name",
                        "data-username": this.props.channelLogin,
                        "data-raid-id": this.props.raidID,
                        onClick: this.onUsernameClick,
                        href: "#"
                    }, this.props.channelLogin)), c.createElement(R.U, {
                        position: R._2.Relative
                    }, c.createElement(R.U, {
                        className: "recent-raids-item__timestamp"
                    }, Object(K.p)(Date.parse(this.props.timestamp))), this.getCardSlideInContent())))
                }, t.prototype.getCardSlideInContent = function() {
                    if (!this.props.slideInContent) return null;
                    var e = null;
                    return e = this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? c.createElement(R.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: R.x.Small,
                        type: R.z.Text,
                        onClick: this.onUnbanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(T.d)("Unban", "RecentRaid")) : c.createElement(R.u, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: R.x.Small,
                        type: R.z.Text,
                        onClick: this.onBanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(T.d)("Ban", "RecentRaid")), c.createElement(R.U, {
                        key: "recent-raids-layout-" + this.props.raiderUserID,
                        className: "recent-raids-item__hover-content",
                        zIndex: R._38.Above,
                        "data-a-target": "recent-raids-item-hover"
                    }, this.props.slideInContent, e)
                }, t = l.__decorate([Object(O.a)(Z, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.raiderUserID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(O.a)(X, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                te(t, n, e)
                            }
                        }
                    }
                }), Object(O.a)(ee, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ne(t, e)
                            }
                        }
                    }
                })], t)
            }(c.Component),
            ae = ie,
            re = n(261),
            se = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onReportButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-raid-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: re.a.Raid,
                                targetUserID: i,
                                contentID: n,
                                extra: JSON.stringify({
                                    channel_id: i.toString()
                                })
                            },
                            title: Object(T.d)("Report {channelDisplayName}", {
                                channelDisplayName: a
                            }, "ReportUserModal")
                        })
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return l.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, J.fetchRecentRaidsList(this.props.targetChannelID)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        raidChannels: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = [],
                        t = [],
                        n = {};
                    if (void 0 !== this.state.raidChannels) {
                        0 === this.state.raidChannels.length && e.push(c.createElement(R._21, {
                            key: "recent-raids-no-raids",
                            type: R._26.P
                        }, Object(T.d)("You have no recent raids", "RecentRaids")));
                        for (var i in this.state.raidChannels)
                            if (i.hasOwnProperty) {
                                var a = this.state.raidChannels[i];
                                this.state.raidChannels.hasOwnProperty(i) && void 0 === n[a.userID] && (t.push(c.createElement(ae, {
                                    key: "recent-raids-item-" + a.userID,
                                    slideInContent: [c.createElement(R._17, {
                                        key: "recent-raids-item-report-area-" + a.userID,
                                        color: R.F.Alt2,
                                        display: R.H.InlineFlex
                                    }, c.createElement(R.u, {
                                        key: "recent-raid-report-button",
                                        size: R.x.Small,
                                        type: R.z.Text,
                                        onClick: this.onReportButtonClick,
                                        "data-a-target": "recent-raid-item-button",
                                        "data-raid-id": a.raidID,
                                        "data-target-user-login": a.name,
                                        "data-target-user-id": a.userID
                                    }, Object(T.d)("Report", "RecentRaid")), c.createElement(R._30, {
                                        align: R._31.Right,
                                        width: 150,
                                        label: Object(T.d)("Banning a user prevents them from future chatting or raiding", "RecentRaid")
                                    }))],
                                    timestamp: a.raidAt,
                                    channelLogin: a.name,
                                    raiderUserID: a.userID,
                                    channelID: this.props.targetChannelID,
                                    raiderLogin: a.name,
                                    raidID: a.raidID,
                                    onUsernameClick: this.props.onUsernameClick,
                                    showReportUserModal: this.props.showReportUserModal
                                })), n[a.userID] = !0)
                            }
                    }
                    var r = null;
                    return this.props.recentRaids ? c.createElement(R.U, {
                        key: "recent-raids"
                    }, c.createElement(R.U, {
                        margin: {
                            bottom: 2
                        }
                    }, c.createElement(R._21, {
                        color: R.F.Link,
                        type: R._26.Span
                    }, c.createElement(z.a, {
                        to: {
                            pathname: "/broadcast/dashboard/settings/raids"
                        }
                    }, Object(T.d)("Manage Raid Settings", "RecentRaids")))), e, t) : (r = c.createElement(R.U, {
                        key: "recent-raids",
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: R.H.Flex,
                        justifyContent: R.T.Between,
                        alignItems: R.c.Center
                    }, c.createElement("span", {
                        className: "chat-settings__edit-button",
                        onClick: this.props.onClickRecentRaids,
                        "data-test-selector": "recent-raids-button"
                    }, Object(T.d)("See Recent Raids", "ChatSettings")), this.props.tooltipText && c.createElement(R.U, {
                        position: R._2.Relative
                    }, c.createElement(R._30, {
                        align: R._31.Right,
                        direction: R._32.Top,
                        display: R.H.InlineFlex,
                        label: this.props.tooltipText,
                        width: 175,
                        show: !0
                    }, c.createElement(R.P, {
                        alignItems: R.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: R.H.InlineFlex,
                        justifyContent: R.T.Center,
                        margin: {
                            left: .5
                        }
                    }, c.createElement(R._21, {
                        color: R.F.Overlay,
                        fontSize: R.L.Size8,
                        type: R._26.Span
                    }, "i"))))), c.createElement(R.U, null, r))
                }, t
            }(c.Component),
            oe = Object(u.a)(a, r)(se),
            le = n(893),
            ce = (n(894), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        recentRaids: !1,
                        chatColor: null,
                        raidsTooltipDismissed: !1
                    }, t.dismissRaidsTooltip = function() {
                        t.setState({
                            raidsTooltipDismissed: !0
                        })
                    }, t.handleFollowerDurationClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-duration");
                        n && t.props.onFollowerDurationChange(parseInt(n, 10))
                    }, t.onClickEdit = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickEditAppearance()
                    }, t.onClickRecentRaids = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.setState({
                            recentRaids: !0
                        })
                    }, t.onClickBack = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onLeaveEditAppearance(), t.setState({
                            recentRaids: !1
                        })
                    }, t.onColorSelected = function(e) {
                        t.setState({
                            chatColor: e
                        }), t.props.onColorSelected(e)
                    }, t.onBadgesChanged = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return l.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return !this.props.data || this.props.data.loading ? [3, 2] : [4, this.props.data.refetch()];
                                    case 1:
                                        if (e = i.sent(), e.data) {
                                            if (t = e.data, !t.user.self) return [2];
                                            n = {}, t.user.self.displayBadges.forEach(function(e) {
                                                n[e.setID] = e.version
                                            }), T.n.tmi.client.updateChannelBadges(this.props.channelLogin, n)
                                        }
                                        i.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading) return null;
                    var e = null;
                    if (this.props.isLoggedIn && this.props.data.currentUser) {
                        var t = this.props.data.user.self ? this.props.data.user.self.displayBadges : [];
                        e = c.createElement(i, {
                            key: "name-display",
                            login: this.props.data.currentUser.login,
                            displayName: this.props.data.currentUser.displayName,
                            chatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                            editAppearance: this.props.editAppearance,
                            userBadges: t,
                            onClickEdit: this.onClickEdit
                        })
                    }
                    var n = [];
                    return this.props.isLoggedIn ? this.props.editAppearance ? n = [c.createElement(R.P, {
                        margin: {
                            bottom: 2
                        },
                        key: "chat-settings-edit-inject"
                    }, c.createElement("div", {
                        key: "chat-settings-edit",
                        className: "chat-settings__edit-button",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, c.createElement(R._21, {
                        color: R.F.Link,
                        type: R._26.Span
                    }, c.createElement(R._8, {
                        asset: R._9.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(T.d)("Back", "ChatSettingsAppearance")))), e, c.createElement(A, {
                        key: "edit-appearance",
                        onColorSelected: this.onColorSelected,
                        editAppearance: this.props.editAppearance,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        userChatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                        userLogin: this.props.data.currentUser.login,
                        onBadgesChanged: this.onBadgesChanged
                    })] : this.state.recentRaids ? n = [c.createElement(R.P, {
                        key: "chat-settings-recent-raids"
                    }, c.createElement("div", {
                        key: "chat-settings-edit",
                        className: "chat-settings__recent-raids-button",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, c.createElement(R._21, {
                        color: R.F.Link,
                        type: R._26.Span
                    }, c.createElement(R._8, {
                        asset: R._9.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(T.d)("Back", "ChatSettingsRecentRaids")), c.createElement(R.U, {
                        margin: {
                            top: 2
                        }
                    }, c.createElement(R._21, {
                        key: "recent-raids-title",
                        color: R.F.Alt2,
                        transform: R._25.Uppercase
                    }, Object(T.d)("Recent Raids", "ChatSettings"))))), c.createElement(oe, {
                        key: "recent-raids",
                        targetChannelID: this.props.channelID,
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard
                    })] : (n = [e, this.renderUniversalOptions()], this.props.isCurrentUserModerator && n.push(this.renderModTools())) : n = [c.createElement(P, {
                        key: "color-chooser",
                        onColorSelected: this.props.onColorSelected
                    }), this.renderUniversalOptions()], c.createElement(I.b, {
                        className: "chat-settings"
                    }, c.createElement("div", {
                        onClick: this.dismissRaidsTooltip
                    }, c.createElement(R._17, {
                        key: "chat-settings",
                        className: "chat-settings__content",
                        background: R.m.Base,
                        color: R.F.Base,
                        padding: 2
                    }, n)))
                }, t.prototype.renderUniversalOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && c.createElement(R.E, {
                            checked: this.props.darkModeEnabled,
                            "data-a-target": "darkmode-checkbox",
                            "data-test-selector": "dark-mode-checkbox",
                            id: "chat-settings-dark-mode",
                            label: Object(T.d)("Dark Mode", "ChatSettings"),
                            onChange: this.props.onDarkModeToggle
                        }),
                        t = !this.props.isPopout && c.createElement("button", {
                            onClick: this.props.onChatPopout,
                            "data-a-target": "popout-chat-button",
                            "data-test-selector": "popout-button"
                        }, Object(T.d)("Popout", "ChatSettings")),
                        n = !this.props.isPopout && (window.BetterTTV || window.FrankerFaceZ) && c.createElement("button", {
                            onClick: this.props.onLegacyChatPopout,
                            "data-test-selector": "legacy-popout-button"
                        }, Object(T.d)("Legacy Popout", "ChatSettings"));
                    return c.createElement(R.U, {
                        key: "chat-options"
                    }, c.createElement(R._17, {
                        borderTop: !0,
                        margin: {
                            top: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, c.createElement(R._21, {
                        color: R.F.Alt2,
                        transform: R._25.Uppercase
                    }, Object(T.d)("Chat Options", "ChatSettings"))), c.createElement(R.U, {
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement(R.E, {
                        checked: this.props.showTimestamps,
                        "data-a-target": "timestamp-checkbox",
                        "data-test-selector": "timestamps-selector",
                        id: "chat-settings-timestamp",
                        label: Object(T.d)("Timestamps", "ChatSettings"),
                        onChange: this.props.onTimestampToggle
                    })), c.createElement(R.U, {
                        margin: {
                            bottom: 1
                        }
                    }, e), c.createElement(R.U, {
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement("button", {
                        onClick: this.props.onChatHide,
                        "data-a-target": "hide-chat-button",
                        "data-test-selector": "hide-chat-button"
                    }, Object(T.d)("Hide Chat", "ChatSettings"))), c.createElement(R.U, {
                        margin: {
                            bottom: 1
                        }
                    }, t), n && c.createElement(R.U, null, n))
                }, Object.defineProperty(t.prototype, "showRaidsTooltip", {
                    get: function() {
                        return this.props.sawFirstRaidPrompt && !this.state.raidsTooltipDismissed
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.renderModTools = function() {
                    return c.createElement(R._17, {
                        key: "mod-tools",
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, c.createElement(R.U, {
                        margin: {
                            bottom: 2
                        }
                    }, c.createElement(R._21, {
                        color: R.F.Alt2,
                        transform: R._25.Uppercase
                    }, Object(T.d)("Mod Tools", "ChatSettings"))), c.createElement(R.U, {
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement(R.E, {
                        checked: this.props.showModerationIcons,
                        "data-a-target": "mod-icons-checkbox",
                        "data-test-selector": "mod-icons-checkbox",
                        id: "chat-settings-mod-icons",
                        label: Object(T.d)("Mod Icons", "ChatSettings"),
                        onChange: this.props.onModIconsToggle
                    })), c.createElement(R._17, {
                        margin: {
                            bottom: 1
                        },
                        display: R.H.Flex,
                        justifyContent: R.T.Between
                    }, c.createElement(R.E, {
                        checked: this.props.followerModeEnabled,
                        "data-a-target": "follower-mode-checkbox",
                        "data-test-selector": "follower-mode-checkbox",
                        id: "chat-settings-followers-only",
                        label: Object(T.d)("Followers-Only Chat", "ChatSettings"),
                        onChange: this.props.onFollowerModeToggle
                    }), this.showRaidsTooltip ? c.createElement(W, {
                        text: Object(T.d)("Prevent offensive raiders from chatting.", "RaidReportingChat")
                    }) : null, c.createElement(R.U, {
                        alignItems: R.c.Center,
                        display: R.H.Flex,
                        flexWrap: R.K.NoWrap,
                        justifyContent: R.T.Between
                    }, c.createElement(R.U, {
                        margin: {
                            right: .5
                        }
                    }, c.createElement(R._21, {
                        color: R.F.Alt2,
                        fontSize: R.L.Size7,
                        type: R._26.Span
                    }, Object(T.d)("Must have followed for", "ChatSettings"))), c.createElement(R.U, {
                        className: "chat-settings__mod-tools-follower-button",
                        flexShrink: 0
                    }, c.createElement(U.a, {
                        display: R.H.InlineBlock
                    }, c.createElement(R.u, {
                        size: R.x.Small,
                        type: R.z.Text,
                        "data-a-target": "follower-mode-dropdown",
                        "data-test-selector": "follower-mode-duration-menu",
                        dropdown: !0
                    }, Object(C.d)(this.props.selectedFollowerModeDuration)), c.createElement(R.p, {
                        direction: R.q.TopRight
                    }, c.createElement(R.U, {
                        padding: .5
                    }, c.createElement(R._21, {
                        color: R.F.Alt2
                    }, Object(T.d)("Followers can chat if they have followed for at least", "ChatSettings"))), c.createElement(R._17, {
                        color: R.F.Link
                    }, this.renderFollowerModeOptions())))))), c.createElement(R.U, {
                        margin: {
                            bottom: 1
                        }
                    }, c.createElement(R.E, {
                        checked: this.props.slowModeEnabled,
                        "data-a-target": "slow-mode-checkbox",
                        "data-test-selector": "slow-mode-checkbox",
                        id: "chat-settings-slow-mode",
                        label: Object(T.d)("Slow Mode", "ChatSettings"),
                        onChange: this.props.onSlowModeToggle
                    })), c.createElement(oe, {
                        key: "recent-raids",
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: _.d,
                        targetChannelID: this.props.channelID,
                        tooltipText: this.showRaidsTooltip ? Object(T.d)("View recent raids with option to report or ban.", "RaidReportingChat") : ""
                    }), c.createElement("button", {
                        onClick: this.props.onChatClear,
                        "data-a-target": "clear-chat-button",
                        "data-test-selector": "clear-chat-button"
                    }, Object(T.d)("Clear Chat", "ChatSettings")))
                }, t.prototype.renderFollowerModeOptions = function() {
                    var e = this;
                    return C.b.map(function(t) {
                        return c.createElement(R.S, {
                            "data-duration": t,
                            key: t,
                            onClick: e.handleFollowerDurationClick,
                            selected: t === e.props.selectedFollowerModeDuration
                        }, c.createElement(R.U, {
                            padding: .5
                        }, Object(C.c)(t)))
                    })
                }, t = l.__decorate([Object(O.a)(le, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(c.Component)),
            ue = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        editAppearance: !1
                    }, t.handleSettingsToggle = function(e) {
                        t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                            editAppearance: !1
                        })
                    }, t.onEdit = function() {
                        t.setState({
                            editAppearance: !0
                        })
                    }, t.onLeaveEdit = function() {
                        t.setState({
                            editAppearance: !1
                        })
                    }, t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? m.a.Light : m.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout), Object(D.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.darkModeEnabled,
                            settingName: E.a.DarkMode
                        })
                    }, t.onTimestampToggle = function() {
                        Object(w.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(D.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showTimestamps,
                            settingName: E.a.ShowTimestamps
                        })
                    }, t.onChatHide = function() {
                        t.props.onChatHide(), Object(D.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !0,
                            settingName: E.a.HideChat
                        })
                    }, t.onChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(h.a)() && (e.focus(), Object(f.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onLegacyChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("https://www.twitch.tv/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(h.a)() && (e.focus(), Object(f.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onModIconsToggle = function() {
                        Object(w.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable(), Object(D.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showModerationIcons,
                            settingName: E.a.ShowModIcons
                        })
                    }, t.onFollowerModeToggle = function() {
                        if (t.props.followerModeEnabled) t.props.onChatCommand(Object(N.d)()), t.props.onFollowerModeDisable();
                        else {
                            var e = t.getSelectedFollowerDuration();
                            t.props.onChatCommand(Object(N.f)(e)), t.props.onFollowerModeDurationChange(e), t.props.onFollowerModeEnable()
                        }
                        Object(D.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.followerModeEnabled,
                            settingName: E.a.FollowerMode
                        })
                    }, t.onFollowerDurationChange = function(e) {
                        Object(w.c)(t.props.channelLogin, e), t.props.onFollowerModeDurationPreferenceChange(t.props.channelLogin, e), t.props.followerModeEnabled && (t.props.onChatCommand(Object(N.f)(e)), t.props.onFollowerModeDurationChange(e)), Object(D.c)({
                            channelLogin: t.props.channelLogin,
                            followerModeOn: t.props.followerModeEnabled,
                            isHostMode: t.props.isHostMode,
                            newValue: e
                        })
                    }, t.onSlowModeToggle = function() {
                        t.props.slowModeEnabled ? (t.props.onChatCommand(Object(N.e)()), t.props.onSlowModeDisable()) : (t.props.onChatCommand(Object(N.g)()), t.props.onSlowModeEnable()), Object(D.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.slowModeEnabled,
                            settingName: E.a.SlowMode
                        })
                    }, t.onChatClear = function() {
                        t.props.onChatCommand(Object(N.c)())
                    }, t.getSelectedFollowerDuration = function() {
                        if (t.props.followerModeEnabled) return t.props.followerModeDuration;
                        var e = t.props.lastUsedFollowerDurations[t.props.channelLogin];
                        return "number" == typeof e ? e : C.a
                    }, t.onColorSelected = function(e) {
                        if (!t.props.isLoggedIn) return void t.props.login();
                        t.props.onChatCommand(Object(N.b)(e))
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    return c.createElement(me, {
                        disabled: this.props.disabled,
                        onToggle: this.handleSettingsToggle
                    }, c.createElement(ce, {
                        darkModeEnabled: this.props.darkModeEnabled,
                        followerModeEnabled: this.props.followerModeEnabled,
                        editAppearance: this.state.editAppearance,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isPopout: this.props.isPopout,
                        onChatClear: this.onChatClear,
                        onChatHide: this.onChatHide,
                        onChatPopout: this.onChatPopout,
                        onDarkModeToggle: this.onDarkModeToggle,
                        onFollowerDurationChange: this.onFollowerDurationChange,
                        onFollowerModeToggle: this.onFollowerModeToggle,
                        onLegacyChatPopout: this.onLegacyChatPopout,
                        onModIconsToggle: this.onModIconsToggle,
                        onSlowModeToggle: this.onSlowModeToggle,
                        onTimestampToggle: this.onTimestampToggle,
                        selectedFollowerModeDuration: this.getSelectedFollowerDuration(),
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        slowModeEnabled: this.props.slowModeEnabled,
                        theatreModeEnabled: this.props.theatreModeEnabled,
                        onColorSelected: this.onColorSelected,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isLoggedIn: this.props.isLoggedIn,
                        onClickEditAppearance: this.onEdit,
                        onLeaveEditAppearance: this.onLeaveEdit,
                        sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                        onShowViewerCard: this.props.onShowViewerCard
                    }))
                }, t
            }(c.Component),
            de = Object(u.a)(s, o)(ue),
            pe = Object(d.e)(de),
            me = function(e) {
                return c.createElement(U.a, {
                    onToggle: e.onToggle
                }, c.createElement(R.v, {
                    icon: R._9.Gear,
                    ariaLabel: Object(T.d)("Chat settings", "ChatInput"),
                    "data-a-target": "chat-settings",
                    disabled: !!e.disabled
                }), c.createElement(R.p, {
                    direction: R.q.Top,
                    noTail: !0,
                    offsetY: "11px",
                    "data-a-target": "chat-settings-balloon"
                }, e.children))
            };
        n.d(t, "a", function() {
            return pe
        }), n.d(t, "b", function() {
            return me
        })
    },
    886: function(e, t) {},
    887: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "selectedBadge"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "availableBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "availableBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 382
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery ChatSettings_Badges($channelLogin: String!) {\n  currentUser {\n    id\n    selectedBadge {\n      ...badge\n    }\n    availableBadges {\n      ...badge\n    }\n  }\n  user(login: $channelLogin) {\n    id\n    self {\n      selectedBadge {\n        ...badge\n      }\n      availableBadges {\n        ...badge\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(820).definitions)), e.exports = i
    },
    888: function(e, t) {},
    889: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 155
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_BanUser($input: BanUserFromChatRoomInput!) {\n  banUserFromChatRoom(input: $input) {\n    ban {\n      isPermanent\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    89: function(e, t, n) {
        "use strict";
        var i = n(278);
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return i.c
        }), n.d(t, "c", function() {
            return i.d
        }), n.d(t, "d", function() {
            return i.e
        }), n.d(t, "e", function() {
            return i.f
        }), n.d(t, "f", function() {
            return i.g
        }), n.d(t, "g", function() {
            return i.h
        }), n.d(t, "h", function() {
            return i.i
        }), n.d(t, "i", function() {
            return i.j
        }), n.d(t, "j", function() {
            return i.k
        }), n.d(t, "k", function() {
            return i.m
        }), n.d(t, "l", function() {
            return i.p
        }), n.d(t, "m", function() {
            return i.q
        })
    },
    890: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 203
            }
        };
        n.loc.source = {
            body: "query RecentRaidsModActions($targetUserID: ID!, $channelID: ID!) {\n  # This is currently backwards on the server\n  chatRoomBanStatus(channelID: $targetUserID, userID: $channelID) {\n    isPermanent\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    891: function(e, t) {},
    892: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 161
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\n  unbanUserFromChatRoom(input: $input) {\n    ban {\n      isPermanent\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    893: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 294
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery ChatSettings_CurrentUser($channelLogin: String!) {\n  currentUser {\n    id\n    login\n    displayName\n    chatColor\n  }\n  user(login: $channelLogin) {\n    id\n    self {\n      displayBadges {\n        ...badge\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(820).definitions)), e.exports = i
    },
    894: function(e, t) {},
    902: function(e, t, n) {
        "use strict";

        function i(e) {
            var t = [];
            return e.forEach(function(e) {
                t[e.from] = {
                    startIndex: e.from,
                    endIndex: e.to + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(c.e)(e.emoteID, 1),
                                "2x": Object(c.e)(e.emoteID, 2),
                                "4x": Object(c.e)(e.emoteID, 4)
                            }
                        }
                    }
                }
            }), t
        }

        function a(e, t, n) {
            var a = i(e.body.emotes),
                r = e.badges.reduce(function(e, t) {
                    return e[t.setID] = t.version, e
                }, {});
            return {
                type: l.a.Post,
                id: e.id,
                badges: r,
                bits: e.bitsUsed,
                timestamp: 0,
                deleted: !1,
                user: s.__assign({
                    userID: e.author.id,
                    userLogin: e.author.login,
                    userType: o.a.User,
                    color: e.authorColor
                }, Object(u.a)(e.authorName, e.author.login)),
                messageParts: Object(c.f)(e.body.content, a, e.bitsUsed, t, n, e.authorName)
            }
        }

        function r(e) {
            var t = "ChatMessage:" + e.tags.msg_id;
            return {
                __typename: "ChatMessage",
                "Symbol(id)": t,
                id: e.tags.msg_id,
                authorName: e.tags.display_name,
                authorColor: e.tags.color,
                author: {
                    __typename: "User",
                    "Symbol(id)": "User:" + e.user_id,
                    id: e.user_id,
                    login: e.username
                },
                body: {
                    __typename: "MessageBody",
                    "Symbol(id)": "$" + t + ".body",
                    content: e.message,
                    emotes: e.tags.emotes.map(function(e, n) {
                        return {
                            __typename: "EmbeddedEmote",
                            "Symbol(id)": t + ".body.emotes." + n,
                            emoteID: e.id.toString(),
                            from: e.start,
                            to: e.end,
                            setID: e.set
                        }
                    })
                },
                badges: e.tags.badges.map(function(e, n) {
                    return {
                        __typename: "Badge",
                        "Symbol(id)": t + ".badges." + n,
                        setID: e.badge_set_id,
                        version: e.badge_set_version
                    }
                }),
                bitsUsed: e.bits_used
            }
        }
        t.b = i, t.a = a, t.c = r;
        var s = n(0),
            o = n(818),
            l = n(805),
            c = n(130),
            u = n(382)
    },
    903: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "embeddedEmote"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "EmbeddedEmote"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "emoteID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "from"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "to"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 74
            }
        };
        n.loc.source = {
            body: "fragment embeddedEmote on EmbeddedEmote {\n  emoteID\n  setID\n  from\n  to\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    924: function(e, t, n) {
        "use strict";

        function i(e) {
            return a.createElement(r.U, null, a.createElement(r.U, {
                padding: 1
            }, a.createElement(r.U, null, e.title && a.createElement(r._21, {
                fontSize: r.L.Size6,
                bold: !0
            }, e.title), a.createElement(r.P, {
                position: r._2.Absolute,
                margin: {
                    top: 1,
                    right: 1
                },
                attachTop: !0,
                attachRight: !0
            }, a.createElement("button", {
                onClick: e.onClearCrateNotification
            }, a.createElement(r._8, {
                asset: r._9.Close
            }))), a.createElement(r.U, {
                margin: {
                    top: 1
                }
            }, e.cardBody)), e.cardFooter), a.createElement(r._5, {
                onCountdownEnd: e.onCrateNotifactionTimeout,
                countdown: e.countdownTimeSec,
                size: r._6.ExtraSmall,
                mask: !0
            }))
        }
        var a = n(1),
            r = n(3),
            s = i;
        n.d(t, !1, function() {
            return i
        }), n.d(t, "a", function() {
            return s
        })
    },
    933: function(e, t, n) {
        "use strict";

        function i() {
            var e = Object(Ee.a)();
            return ke.__assign({}, e, {
                emoteSets: [],
                followerDuration: Ce.a,
                followerMode: !1,
                isHidden: !1,
                messages: {},
                slowMode: !1,
                subsOnlyMode: !1
            })
        }

        function a(e, t) {
            switch (void 0 === e && (e = i()), t.type) {
                case _e.a:
                    return ke.__assign({}, e, {
                        isHidden: !0
                    });
                case _e.b:
                    return ke.__assign({}, e, {
                        emoteSets: [],
                        messages: {}
                    });
                case _e.c:
                    return ke.__assign({}, e, {
                        isHidden: !1
                    });
                case _e.d:
                    return ke.__assign({}, e, {
                        emoteSets: t.emoteSets
                    });
                case _e.e:
                    return ke.__assign({}, e, {
                        followerMode: !1
                    });
                case _e.f:
                    return ke.__assign({}, e, {
                        followerDuration: t.duration
                    });
                case _e.g:
                    return ke.__assign({}, e, {
                        lastUsedFollowerDurations: ke.__assign({}, e.lastUsedFollowerDurations, (n = {}, n[t.channelLogin] = t.duration, n))
                    });
                case _e.h:
                    return ke.__assign({}, e, {
                        followerMode: !0
                    });
                case _e.i:
                    return ye(e, function(e) {
                        return e.messages
                    }, function(e) {
                        return e[t.channel] = t.messages, e
                    });
                case _e.j:
                    return ke.__assign({}, e, {
                        showModIcons: !1
                    });
                case _e.k:
                    return ke.__assign({}, e, {
                        showModIcons: !0
                    });
                case _e.l:
                    return ke.__assign({}, e, {
                        slowMode: !1
                    });
                case _e.m:
                    return ke.__assign({}, e, {
                        slowMode: !0
                    });
                case _e.n:
                    return ke.__assign({}, e, {
                        subsOnlyMode: !1
                    });
                case _e.o:
                    return ke.__assign({}, e, {
                        subsOnlyMode: !0
                    });
                case _e.p:
                    return ke.__assign({}, e, {
                        showTimestamps: !1
                    });
                case _e.q:
                    return ke.__assign({}, e, {
                        showTimestamps: !0
                    });
                default:
                    return e
            }
            var n
        }

        function r(e, t) {
            return e.chat && e.chat.messages ? e.chat.messages[t] || [] : []
        }

        function s() {
            return {
                viewerCardOptions: null
            }
        }

        function o(e, t) {
            switch (void 0 === e && (e = s()), t.type) {
                case Ne.a:
                    return ke.__assign({}, e, {
                        viewerCardOptions: null
                    });
                case Ne.b:
                    return t.viewerCardOptions ? ke.__assign({}, e, {
                        viewerCardOptions: ke.__assign({}, t.viewerCardOptions)
                    }) : e;
                default:
                    return e
            }
        }

        function l(e) {
            return {
                currentUserID: e.session.user && "" + e.session.user.id || ""
            }
        }

        function c(e, t, n, i) {
            return ke.__awaiter(this, void 0, void 0, function() {
                var a, r, s, o, l;
                return ke.__generator(this, function(c) {
                    switch (c.label) {
                        case 0:
                            a = "https://api.twitch.tv/api/channels/" + e + "/use_chat_notification_token", r = 1, c.label = 1;
                        case 1:
                            if (!(r <= it)) return [3, 7];
                            c.label = 2;
                        case 2:
                            return c.trys.push([2, 5, , 6]), [4, fetch(a, {
                                body: JSON.stringify({
                                    token_id: t,
                                    custom_message: n
                                }),
                                method: "POST",
                                headers: {
                                    "Client-ID": Se.n.config.legacyClientID,
                                    Accept: "application/json; charset=UTF-8",
                                    "content-type": "application/json; charset=UTF-8",
                                    Authorization: "OAuth " + i
                                }
                            })];
                        case 3:
                            return s = c.sent(), [4, s.json()];
                        case 4:
                            return o = c.sent(), [2, o];
                        case 5:
                            if (l = c.sent(), r === it) throw l;
                            return [3, 6];
                        case 6:
                            return ++r, [3, 1];
                        case 7:
                            return [2]
                    }
                })
            })
        }

        function u() {
            return [{
                text: Object(Se.d)("Select One...", "BlockUser"),
                canonical: ft
            }, {
                text: Object(Se.d)("Harassment", "BlockUser"),
                canonical: mt.b.Harassment
            }, {
                text: Object(Se.d)("Spam", "BlockUser"),
                canonical: mt.b.Spam
            }, {
                text: Object(Se.d)("Other", "BlockUser"),
                canonical: mt.b.Other
            }]
        }

        function d(e) {
            return Object(Me.bindActionCreators)({
                closeModal: Pe.c
            }, e)
        }

        function p(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded,
                isLoggedIn: Object(Ie.d)(e)
            }
        }

        function m() {
            return Math.round(Math.random() * Rt * 2 - Rt)
        }

        function h(e, t) {
            var n = {
                headers: {
                    "Client-ID": Se.n.config.legacyClientID,
                    Authorization: "OAuth " + t,
                    Accept: "application/vnd.twitchtv.v5+json"
                },
                method: "POST"
            };
            return fetch(At + "/raids/" + e + "/join", n)
        }

        function f(e, t) {
            var n = {
                headers: {
                    "Client-ID": Se.n.config.legacyClientID,
                    Authorization: "OAuth " + t,
                    Accept: "application/vnd.twitchtv.v5+json"
                },
                method: "POST"
            };
            return fetch(At + "/raids/" + e + "/leave", n)
        }

        function g(e) {
            k(Vt.SpadeEventType.RaidPromptJoin, e)
        }

        function b(e) {
            k(Vt.SpadeEventType.RaidPromptLeave, e)
        }

        function v(e) {
            k(Vt.SpadeEventType.RaidPromptImpression, e)
        }

        function k(e, t) {
            var n = {
                raid_creator_id: Number(t.creatorID),
                raid_source_id: Number(t.sourceChannelID),
                raid_target_id: Number(t.targetChannelID),
                raid_id: t.id
            };
            Se.m.track(e, n)
        }

        function y(e) {
            if (e.data.loading || e.data.error) return Ue.createElement("div", null);
            var t = e.component,
                n = ke.__rest(e, ["component"]);
            return Ue.createElement(t, ke.__assign({}, n))
        }

        function S(e, t) {
            var n;
            if (C(e.pathname)) n = "/" + t;
            else {
                if (!_(e.pathname)) return "";
                n = "/" + t + "/chat"
            }
            var i = ke.__assign({}, nn.parse(e.search), {
                referrer: "raid"
            });
            return n + "?" + nn.stringify(i)
        }

        function _(e) {
            return /^\/.+\/chat$/.test(e)
        }

        function C(e) {
            return !e.split("/")[2]
        }

        function E(e) {
            return {
                authToken: Object(Ie.a)(e)
            }
        }

        function N(e) {
            return Object(Me.bindActionCreators)({
                login: function() {
                    return Object(Ut.f)(It.a.RaidJoin)
                }
            }, e)
        }

        function w() {
            return {
                type: mn.a.Clear,
                id: Object(En.a)("clear")
            }
        }

        function D(e, t) {
            return {
                type: mn.a.BadgesUpdated,
                id: Object(En.a)("updateBadges"),
                userName: e,
                badges: t
            }
        }

        function T(e, t, n, i, a, r, s) {
            return void 0 === s && (s = !1), ke.__assign({}, Object(wn.a)(t, n, i, a, r, s), {
                type: e,
                id: n.id || Object(En.a)(n.username)
            })
        }

        function I(e, t, n) {
            return {
                type: mn.a.Notice,
                id: Object(En.a)("notice"),
                channel: e,
                msgid: t,
                message: n
            }
        }

        function U(e, t, n, i) {
            return {
                bitsConfig: i,
                message: t,
                purchase: e,
                timestamp: n,
                id: Object(En.a)(t.user.userLogin + "-purchase"),
                type: mn.a.Purchase
            }
        }

        function O(e, t, n) {
            return {
                type: mn.a.Raid,
                id: Object(En.a)("raid"),
                channel: e,
                userLogin: t,
                params: n
            }
        }

        function x(e, t, n) {
            return {
                type: mn.a.Unraid,
                id: Object(En.a)("unraid"),
                channel: e,
                userLogin: t,
                message: n
            }
        }

        function M() {
            return {
                type: mn.a.Connected,
                id: Object(En.a)("connected")
            }
        }

        function R(e) {
            return {
                type: mn.a.Disconnected,
                id: Object(En.a)("disconnected"),
                reason: e
            }
        }

        function P() {
            return {
                type: mn.a.Reconnect,
                id: Object(En.a)("reconnect")
            }
        }

        function F(e) {
            return {
                type: mn.a.Hosting,
                id: Object(En.a)("hosting"),
                hostedChannel: e
            }
        }

        function j(e) {
            return {
                type: mn.a.Unhost,
                id: Object(En.a)("unhost-" + e)
            }
        }

        function A(e) {
            return {
                type: mn.a.RoomMods,
                id: Object(En.a)("roommods"),
                moderatorLogins: e
            }
        }

        function L(e) {
            return {
                type: mn.a.RoomState,
                id: Object(En.a)("roomstate"),
                state: e
            }
        }

        function B(e, t) {
            return {
                type: mn.a.SlowMode,
                id: Object(En.a)("slowmode"),
                enabled: e,
                length: t
            }
        }

        function H(e, t) {
            return {
                type: mn.a.FollowerOnlyMode,
                id: Object(En.a)("follower-only"),
                enabled: e,
                length: t
            }
        }

        function V(e) {
            return {
                type: mn.a.SubscriberOnlyMode,
                id: Object(En.a)("subscriber-only"),
                enabled: e
            }
        }

        function W(e, t, n, i) {
            return {
                type: mn.a.Subscription,
                id: Object(En.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                userLogin: t,
                tier: i
            }
        }

        function G(e, t, n, i, a) {
            return {
                type: mn.a.SubGift,
                id: Object(En.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                userLogin: t,
                tier: i,
                recipient: a
            }
        }

        function q(e) {
            return {
                user: {
                    userDisplayName: e,
                    userLogin: e,
                    userID: null,
                    userType: Nn.a.User,
                    color: void 0,
                    isIntl: !1
                }
            }
        }

        function z(e, t, n, i, a, r, s, o) {
            var l = r && s ? Object(wn.a)(r, s, Ae.a, !1, o) : q(t);
            return ke.__assign({}, l, {
                type: mn.a.Resubscription,
                id: Object(En.a)(t + "-sub"),
                channel: e.slice(1),
                isPrime: n,
                months: i,
                tier: a
            })
        }

        function $(e) {
            return e + "-automod-rejected"
        }

        function J(e, t, n, i) {
            var a = {
                    badges: null,
                    bits: 0,
                    color: "",
                    displayName: "",
                    id: "",
                    userID: n,
                    username: n,
                    userType: Nn.a.User,
                    emotes: null
                },
                r = Object(wn.a)(t, a, Ae.a, !1);
            return {
                type: mn.a.AutoModRejectedPrompt,
                id: $(e),
                category: i,
                isAutoModAction: !0,
                rejectedMessage: ke.__assign({}, r, {
                    type: mn.a.Post,
                    id: e
                })
            }
        }

        function Q() {
            return {
                id: Object(En.a)("automod-message-rejected"),
                type: mn.a.AutoModMessageRejected,
                isTargeted: !0,
                isAutoModAction: !0
            }
        }

        function K() {
            return {
                id: Object(En.a)("automod-message-allowed"),
                type: mn.a.AutoModMessageAllowed,
                isTargeted: !0,
                isAutoModAction: !0
            }
        }

        function Y() {
            return {
                id: Object(En.a)("automod-message-denied"),
                type: mn.a.AutoModMessageDenied,
                isTargeted: !0,
                isAutoModAction: !0
            }
        }

        function X(e) {
            return ke.__awaiter(this, void 0, void 0, function() {
                var t, n;
                return ke.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, Se.n.apollo.client.query({
                                query: On,
                                variables: {
                                    login: e
                                }
                            })];
                        case 2:
                            return t = i.sent(), [3, 4];
                        case 3:
                            return n = i.sent(), Se.i.warn(n, "Failed to fetch user targeted by chat command.", {
                                userLogin: e
                            }), [3, 4];
                        case 4:
                            return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                    }
                })
            })
        }

        function Z(e, t) {
            Se.m.track(e, ke.__assign({
                time: Date.now()
            }, t))
        }

        function ee(e) {
            return Object(Se.d)("{bannedUserLogin} is no longer banned from this room.", {
                bannedUserLogin: e
            }, "UnbanUserMutation")
        }

        function te() {
            return Object(Se.d)("Unable to unban user", "UnbanUserMutation")
        }

        function ne(e) {
            return Object(Me.bindActionCreators)({
                onUsernameClick: Ne.d
            }, e)
        }

        function ie(e) {
            var t;
            switch (e) {
                case "aggressive":
                    t = Object(Se.d)("aggressive", "AutoModLine");
                    break;
                case "sexual":
                    t = Object(Se.d)("sexual", "AutoModLine");
                    break;
                case "profanity":
                    t = Object(Se.d)("profanity", "AutoModLine");
                    break;
                case "identity":
                    t = Object(Se.d)("identity", "AutoModLine");
                    break;
                default:
                    return Object(Se.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
            }
            return Object(Se.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                category: t
            }, "AutoModLine")
        }

        function ae() {
            return {
                raid_error_self: Object(Se.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                raid_error_forbidden: Object(Se.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                raid_error_already_raiding: Object(Se.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                raid_error_unexpected: Object(Se.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                unraid_error_unexpected: Object(Se.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                unraid_error_no_active_raid: Object(Se.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                raid_notice_restricted_chat: Object(Se.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                raid_notice_mature: Object(Se.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                raid_notice_owner: Object(Se.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                    unraidCommand: "/unraid"
                }, "RaidNoticeOwnerMessage")
            }
        }

        function re(e) {
            return e.msgid in ae()
        }

        function se(e) {
            return e.type === mn.a.Post || e.type === mn.a.PostWithMention || e.type === mn.a.Action
        }

        function oe(e) {
            return {
                darkModeEnabled: Object(je.a)(e) === Re.a.Dark
            }
        }

        function le(e) {
            return {
                isSubsOnlyModeEnabled: e.chat.subsOnlyMode,
                sessionUser: Object(Ie.c)(e)
            }
        }

        function ce(e) {
            return Object(Me.bindActionCreators)({
                login: function() {
                    return Object(Ut.f)(It.a.Chat)
                }
            }, e)
        }

        function ue(e, t) {
            return {
                messages: r(e, t.channelLogin),
                showModerationIcons: e.chat.showModIcons,
                showTimestamps: e.chat.showTimestamps
            }
        }

        function de(e) {
            return ke.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, r;
                return ke.__generator(this, function(s) {
                    switch (s.label) {
                        case 0:
                            t = "https://tmi.twitch.tv/group/user/" + e.toLowerCase() + "/chatters", n = 1, s.label = 1;
                        case 1:
                            if (!(n <= qa)) return [3, 7];
                            s.label = 2;
                        case 2:
                            return s.trys.push([2, 5, , 6]), [4, fetch(t, {
                                method: "GET",
                                headers: {
                                    Accept: "application/json; charset=UTF-8",
                                    "content-type": "application/json; charset=UTF-8"
                                }
                            })];
                        case 3:
                            return i = s.sent(), [4, i.json()];
                        case 4:
                            return a = s.sent(), Se.i.debug("[update] getViewers done."), [2, a];
                        case 5:
                            if (r = s.sent(), n === qa) throw r;
                            return [3, 6];
                        case 6:
                            return ++n, [3, 1];
                        case 7:
                            return [2]
                    }
                })
            })
        }

        function pe(e, t) {
            if (!t) return e;
            var n = Object.assign({}, e);
            return Object.keys(n).forEach(function(e) {
                var i = n[e];
                Array.isArray(i) && (n[e] = i.filter(function(e) {
                    return -1 !== e.toLowerCase().indexOf(t)
                }))
            }), n
        }

        function me(e) {
            return Object(Me.bindActionCreators)({
                onShowViewerCard: Ne.d
            }, e)
        }

        function he(e) {
            return {
                viewerCardOptions: e.viewerCard.viewerCardOptions
            }
        }

        function fe(e) {
            return Object(Me.bindActionCreators)({
                hideViewerCard: Ne.c,
                showReportUserModal: function(e) {
                    var t = ke.__rest(e, []);
                    return Object(Pe.d)(Ka.a, t)
                }
            }, e)
        }

        function ge(e, t) {
            return Object(Me.bindActionCreators)({
                onChatMessagesReset: function() {
                    return _e.t()
                },
                onChatMessagesUpdate: function(e) {
                    return _e.F(t.channelLogin, e)
                },
                onChatUnhide: function() {
                    return _e.G()
                },
                onFollowerModeDisable: function() {
                    return _e.u()
                },
                onFollowerModeDurationChange: function(e) {
                    return _e.r(e)
                },
                onFollowerModeEnable: function() {
                    return _e.z()
                },
                onSlowModeDisable: function() {
                    return _e.w()
                },
                onSlowModeEnable: function() {
                    return _e.B()
                },
                onSubsOnlyModeDisable: function() {
                    return _e.x()
                },
                onSubsOnlyModeEnable: function() {
                    return _e.C()
                },
                onThemeChange: function(e) {
                    return Object(Fe.b)(e, Fe.a.TypedCommand)
                },
                onThreadSelect: function(e) {
                    return Object(Mn.l)({
                        threadID: e,
                        collapsed: !0
                    }, Object(Fn.a)())
                },
                showBlockUser: function(e) {
                    var t = ke.__rest(e, []);
                    return Object(Pe.d)(St, t)
                }
            }, e)
        }

        function be(e) {
            return {
                emoteSets: e.chat.emoteSets,
                firstPageLoaded: e.session.firstPageLoaded,
                isHidden: e.chat.isHidden,
                rightColumnExpanded: e.ui.rightColumnExpanded,
                theme: Object(je.a)(e)
            }
        }

        function ve(e) {
            return {
                user: Object(Ie.c)(e)
            }
        }
        var ke = n(0),
            ye = n(138),
            Se = n(2),
            _e = n(379),
            Ce = n(830),
            Ee = n(845);
        Se.n.store.registerReducer("chat", a);
        var Ne = n(816);
        Se.n.store.registerReducer("viewerCard", o);
        var we, De, Te = n(7),
            Ie = n(17),
            Ue = n(1),
            Oe = n(6),
            xe = n(31),
            Me = n(9),
            Re = n(38),
            Pe = n(36),
            Fe = n(131),
            je = n(52),
            Ae = n(372),
            Le = n(831),
            Be = n(4),
            He = n(86),
            Ve = n(37),
            We = n(21),
            Ge = n(30),
            qe = n(822),
            ze = n(3),
            $e = (n(934), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        formInputValue: "",
                        sharing: !1
                    }, t.hasUnmounted = !1, t.handleShareClick = function() {
                        return ke.__awaiter(t, void 0, void 0, function() {
                            return ke.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            sharing: !0
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, , 3, 4]), [4, this.props.onShare(this.state.formInputValue)];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return this.hasUnmounted || this.setState({
                                            sharing: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.onInputChange = function(e) {
                        t.setState({
                            formInputValue: e.currentTarget.value
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.hasUnmounted = !1
                }, t.prototype.componentWillUnmount = function() {
                    this.hasUnmounted = !0
                }, t.prototype.render = function() {
                    var e = Be("share-input", {
                            "share-input--hidden": this.props.hide
                        }),
                        t = this.state.formInputValue.length > 255,
                        n = t ? "-" + (this.state.formInputValue.length - 255) : Object(Se.d)("Share", "ChatResubNotification"),
                        i = Object(Se.d)("Close", "ChatResubNotification"),
                        a = Object(Se.d)("Add a message to the streamer", "ChatResubNotification"),
                        r = this.state.sharing ? ze.y.Loading : ze.y.Default;
                    return Ue.createElement(ze.U, {
                        className: e,
                        padding: 1,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: ze._2.Absolute
                    }, Ue.createElement(ze._17, {
                        className: "share-input__container",
                        position: ze._2.Relative,
                        border: !0,
                        background: ze.m.Base,
                        padding: 1
                    }, Ue.createElement(ze.U, {
                        position: ze._2.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, Ue.createElement(ze.v, {
                        ariaLabel: i,
                        onClick: this.props.onClose,
                        type: ze.w.Secondary,
                        icon: ze._9.Close,
                        "data-a-target": "resub-notification-close-form-btn",
                        "data-test-selector": "share-input__close-form-btn"
                    })), Ue.createElement(ze.U, {
                        textAlign: ze._22.Center,
                        padding: {
                            top: 1,
                            bottom: 2
                        }
                    }, this.props.children), Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        flexWrap: ze.K.NoWrap
                    }, Ue.createElement(ze.U, {
                        fullWidth: !0
                    }, Ue.createElement(ze.Q, {
                        autoFocus: !0,
                        type: ze.R.Text,
                        value: this.state.formInputValue,
                        onChange: this.onInputChange,
                        placeholder: a,
                        "data-a-target": "resub-notification-share-message-input",
                        "data-test-selector": "share-input__share-message-input"
                    })), Ue.createElement(ze.u, {
                        disabled: t,
                        onClick: this.handleShareClick,
                        "data-a-target": "resub-notification-send-msg-btn",
                        "data-test-selector": "share-input__send-msg-btn",
                        state: r
                    }, n))))
                }, t
            }(Ue.Component)),
            Je = (n(935), function(e) {
                var t = Object(Se.d)("Share", "Chat--SharePrompt"),
                    n = Object(Se.d)("Close", "Chat--SharePrompt"),
                    i = Be("chat-share-prompt", {
                        "chat-share-prompt--hidden": e.hide || !e.children
                    });
                return Ue.createElement(ze.U, {
                    position: ze._2.Absolute,
                    fullWidth: !0,
                    className: i,
                    padding: {
                        y: .5,
                        left: .5
                    }
                }, Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    padding: 1,
                    justifyContent: ze.T.Between,
                    alignItems: ze.c.Center,
                    flexWrap: ze.K.NoWrap
                }, Ue.createElement(ze._21, {
                    "data-a-target": "resub-notification-months-subbed-text",
                    "data-test-selector": "share-prompt__text"
                }, e.children), Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexWrap: ze.K.NoWrap,
                    alignItems: ze.c.Center,
                    flexShrink: 0,
                    padding: {
                        left: .5
                    }
                }, Ue.createElement(ze.U, {
                    display: ze.H.Inline,
                    padding: {
                        right: .5
                    },
                    flexShrink: 0
                }, Ue.createElement(ze.u, {
                    onClick: e.onClickShare,
                    size: ze.x.Small,
                    "data-a-target": "resub-notification-share-notification-btn",
                    "data-test-selector": "share-prompt__share-btn"
                }, t)), Ue.createElement(ze.U, {
                    flexShrink: 0
                }, Ue.createElement(ze.v, {
                    ariaLabel: n,
                    onClick: e.onClickClose,
                    type: ze.w.Secondary,
                    icon: ze._9.Close,
                    "data-a-target": "resub-notification-close-notification-btn",
                    "data-test-selector": "share-prompt__close-btn"
                })))))
            }),
            Qe = n(87),
            Ke = n(936),
            Ye = n(937),
            Xe = n(938),
            Ze = (n(939), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.purchaseTokensExist = function(e) {
                        return e.data.user.self && e.data.user.self.purchaseTokens.length > 0
                    }, t.manageParentSpace = function(e) {
                        if (!t.dataIsReady(e) || !t.purchaseTokensExist(e)) return void t.props.dismissSpace();
                        t.props.requestSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissPurchaseToken = function() {
                        return ke.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return ke.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), e = this.props.data.user.self.purchaseTokens[0].id, t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(We.d)(Ye, {
                                            channelLogin: this.props.channelLogin
                                        }, t), [4, this.props.dismissPurchaseToken(Object(We.a)({
                                            token: e,
                                            channelID: this.props.data.user.id
                                        }))];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.sharePurchase = function(e) {
                        return ke.__awaiter(t, void 0, void 0, function() {
                            var t;
                            return ke.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), [4, this.props.sharePurchaseTokenInChat(Object(We.a)({
                                            token: this.props.data.user.self.purchaseTokens[0].id,
                                            channelID: this.props.data.user.id,
                                            message: e
                                        }))];
                                    case 2:
                                        return n.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(We.d)(Ye, {
                                            channelLogin: this.props.channelLogin
                                        }, t), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.dataIsReady(e)) {
                        var t = e.pubsub.messages.userCommerceUpdateEvent,
                            n = this.props.pubsub.messages.userCommerceUpdateEvent,
                            i = !n && t,
                            a = n && t && n.time !== t.time;
                        (i || a) && this.props.data && this.props.data.refetch()
                    }
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.purchaseTokensExist(this.props) && this.props.data.user.self ? this.renderPurchaseToken(this.props.data.user.self.purchaseTokens[0]) : null
                }, t.prototype.renderPurchaseToken = function(e) {
                    var t;
                    t = this.props.data.user.isCommerceRevShareEnabled ? Object(Se.d)("You bought {product} and supported {channelName}!", {
                        product: Ue.createElement("strong", null, e.title),
                        channelName: Ue.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat") : Object(Se.d)("You bought {product} while watching {channelName}!", {
                        product: Ue.createElement("strong", null, e.title),
                        channelName: Ue.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat");
                    var n, i = e.inGameContents.map(this.renderLootInGameContent),
                        a = e.badges.map(this.renderLootBadge),
                        r = e.emoteSets.map(this.renderLootEmoteSet),
                        s = e.bits.map(this.renderLootBits, this);
                    return (i.length || a.length || r.length || s.length) && (n = Ue.createElement(ze.U, {
                        "data-test-selector": "share-purchase__loot",
                        padding: {
                            bottom: 1
                        },
                        display: ze.H.Flex,
                        justifyContent: ze.T.Center
                    }, i, a, r, s), t = Object(Se.d)("You bought {product} and opened a Twitch Crate! Let {channelName} know you shared the love.", {
                        product: Ue.createElement("strong", null, e.title),
                        channelName: Ue.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat")), Ue.createElement(ze.U, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: ze._2.Absolute
                    }, Ue.createElement(Je, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissPurchaseToken
                    }, t), Ue.createElement($e, {
                        hide: !this.state.showMessageInput,
                        onShare: this.sharePurchase,
                        onClose: this.toggleContentShown
                    }, Ue.createElement(ze.U, {
                        padding: {
                            bottom: 1
                        }
                    }, Ue.createElement("figure", {
                        height: 40,
                        width: 40
                    }, Ue.createElement("img", {
                        src: e.imageThumbnail
                    }))), n, Ue.createElement(ze._21, null, Object(Se.d)("Score! Give a shout out to {channelName} in Chat about all your sweet loot!", {
                        channelName: Ue.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat"))))
                }, t.prototype.renderLootInGameContent = function(e) {
                    return Ue.createElement(ze.U, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__igc"
                    }, Ue.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.imageURL
                    }))
                }, t.prototype.renderLootEmoteSet = function(e) {
                    return Object(Qe.b)(e.emoteSet.emotes).map(function(e) {
                        return Ue.createElement(ze.U, {
                            key: e.id,
                            margin: {
                                top: .5,
                                right: 1
                            },
                            "data-test-selector": "share-purchase__emoticon"
                        }, Ue.createElement("img", {
                            className: "share-to-chat__loot",
                            srcSet: e.srcSet,
                            alt: e.displayName
                        }))
                    })
                }, t.prototype.renderLootBadge = function(e) {
                    return Ue.createElement(ze.U, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__badge"
                    }, Ue.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.badge.image2x
                    }))
                }, t.prototype.renderLootBits = function(e) {
                    if (this.props.bitsConfig) return Ue.createElement(ze.U, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__bits"
                    }, Ue.createElement(qe.a, {
                        count: e.quantity,
                        bitsConfig: this.props.bitsConfig,
                        withImage: !0
                    }))
                }, t = ke.__decorate([Object(Oe.a)(Ye, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(He.a)([{
                    topic: function(e) {
                        return Object(Ge.l)(e.currentUserID)
                    },
                    mapMessageTypesToProps: (we = {}, we[Ve.c.ChatNotification] = "userCommerceUpdateEvent", we)
                }])], t)
            }(Ue.Component)),
            et = Object(Oe.a)(Ke, {
                name: "dismissPurchaseToken"
            })(Object(Oe.a)(Xe, {
                name: "sharePurchaseTokenInChat"
            })(Ze)),
            tt = Object(Te.a)(l)(et),
            nt = (n(940), function(e) {
                var t = Be("rare-emote__face", {
                        "rare-emote__face--animate": !!e.animate
                    }),
                    n = Be("rare-emote__neck", {
                        "rare-emote__neck--animate": !!e.animate
                    });
                return Ue.createElement(ze.U, {
                    overflow: ze.Y.Hidden,
                    className: "rare-emote"
                }, Ue.createElement(ze.P, {
                    zIndex: ze._38.Above,
                    position: ze._2.Relative
                }, Ue.createElement("img", {
                    className: t,
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.emoteID + "/2.0"
                })), Ue.createElement(ze.U, {
                    position: ze._2.Relative,
                    zIndex: ze._38.Default,
                    className: n
                }, Ue.createElement(ze._8, {
                    width: 28,
                    height: 28,
                    asset: ze._9.Neck
                })))
            }),
            it = 3,
            at = n(267),
            rt = n(941),
            st = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        resubDismissed: !1,
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.randomEmoteId = t.getRandomEmoteId(), t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.resubExists = function(e, t) {
                        return e.data.user.self && e.data.user.self.resubNotification && !t.resubDismissed
                    }, t.manageParentSpace = function() {
                        if (!t.dataIsReady(t.props) || !t.resubExists(t.props, t.state)) return void t.props.dismissSpace();
                        t.props.requestSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissResubNotification = function() {
                        t.setState({
                            resubDismissed: !0
                        })
                    }, t.shareResub = function(e) {
                        return ke.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return ke.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.resubNotification) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 4, 5, 6]), this.props.authToken ? [4, c(this.props.channelLogin, this.props.data.user.self.resubNotification.token, e, this.props.authToken)] : [3, 3];
                                    case 2:
                                        i.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.resubNotification = null), e
                                        }, Object(We.d)(rt, {
                                            channelLogin: this.props.channelLogin
                                        }, t), this.dismissResubNotification(), i.label = 3;
                                    case 3:
                                        return [3, 6];
                                    case 4:
                                        return n = i.sent(), Se.i.error(n, "Failed to post resub message"), [3, 6];
                                    case 5:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 6:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace()
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.dataIsReady(e) && e.data.user.self && e.data.user.self.resubNotification && !this.randomEmoteId && (this.randomEmoteId = this.getRandomEmoteId())
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.resubExists(this.props, this.state) && this.props.data.user.self && this.props.data.user.self.resubNotification ? this.renderResubToken(this.props.data.user.self.resubNotification) : null
                }, t.prototype.renderResubToken = function(e) {
                    return Ue.createElement(ze.U, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: ze._2.Absolute
                    }, Ue.createElement(Je, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissResubNotification
                    }, Object(Se.d)("It's your {monthsSubbed, number} month anniversary!", {
                        monthsSubbed: e.months
                    }, "ChatResubNotification")), Ue.createElement($e, {
                        hide: !this.state.showMessageInput,
                        onShare: this.shareResub,
                        onClose: this.toggleContentShown
                    }, Ue.createElement(nt, {
                        emoteID: this.randomEmoteId,
                        animate: this.state.showMessageInput
                    }), Ue.createElement(ze._21, null, Object(Se.d)("Hooray! Let {channelName} know it's your {monthsSubbed, number} month anniversary.", {
                        channelName: Ue.createElement("strong", null, this.props.channelDisplayName),
                        monthsSubbed: e.months
                    }, "ChatResubNotification"))))
                }, t.prototype.getRandomEmoteId = function() {
                    var e = Math.floor(Math.random() * at.a.length);
                    return at.a[e]
                }, t = ke.__decorate([Object(Oe.a)(rt, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })], t)
            }(Ue.Component),
            ot = st;
        n(942);
        ! function(e) {
            e[e.Resub = 1] = "Resub", e[e.Purchase = 2] = "Purchase"
        }(De || (De = {}));
        var lt, ct = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestedSpaces: new Set
                    }, t.addSpace = function(e) {
                        t.state.requestedSpaces.has(e) || t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.add(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.removeSpace = function(e) {
                        t.state.requestedSpaces.has(e) && t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.delete(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.requestResubSpace = function() {
                        t.addSpace(De.Resub)
                    }, t.dismissResubSpace = function() {
                        t.removeSpace(De.Resub)
                    }, t.requestPurchaseSpace = function() {
                        t.addSpace(De.Purchase)
                    }, t.dismissPurchaseSpace = function() {
                        t.removeSpace(De.Purchase)
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    this.state.requestedSpaces.size && (e = Array.from(this.state.requestedSpaces.values()).sort()[0]);
                    var t = Be({
                            "share-to-chat__space--hidden": e !== De.Resub
                        }),
                        n = Be({
                            "share-to-chat__space--hidden": e !== De.Purchase
                        });
                    return Ue.createElement(ze.U, null, Ue.createElement(ze.U, {
                        className: t
                    }, Ue.createElement(ot, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        requestSpace: this.requestResubSpace,
                        dismissSpace: this.dismissResubSpace
                    })), Ue.createElement(ze.U, {
                        className: n
                    }, Ue.createElement(tt, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig,
                        requestSpace: this.requestPurchaseSpace,
                        dismissSpace: this.dismissPurchaseSpace
                    })))
                }, t
            }(Ue.Component),
            ut = ct,
            dt = n(104),
            pt = n(440),
            mt = n(264),
            ht = n(5),
            ft = "select-one";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError"
        }(lt || (lt = {}));
        var gt, bt, vt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        reason: null
                    }, t.blockSelectOptions = u(), t.onSubmit = function(e) {
                        e.preventDefault(), t.props.onSubmit(t.state.reason)
                    }, t.onChangeReason = function(e) {
                        var n = e.target.value;
                        n === ft ? t.setState({
                            reason: null
                        }) : t.setState({
                            reason: n
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    return Ue.createElement(ze.U, {
                        fullHeight: !0,
                        fullWidth: !0,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        alignItems: ze.c.Center,
                        justifyContent: ze.T.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    if (this.props.submitStatus === lt.Success) return Ue.createElement(ze.u, {
                        onClick: this.props.onClose
                    }, Ue.createElement(ze.U, {
                        padding: {
                            x: 2
                        }
                    }, Object(Se.d)("Close", "BlockUser")));
                    var e = Object(Se.d)("You've chosen to ignore this user from chatting or whispering you. Please tell us your concern with this user to determine whether there has been a violation of the terms of service.", "BlockUser"),
                        t = Object(Se.d)("Report {channel}", {
                            channel: this.props.blockedUserDisplayName
                        }, "BlockUser");
                    return Ue.createElement("div", null, Ue.createElement(ze._21, {
                        type: ze._26.H4
                    }, t), Ue.createElement(ze._17, {
                        color: ze.F.Alt2,
                        margin: {
                            y: 1
                        }
                    }, e), Ue.createElement("a", {
                        href: "https://www.twitch.tv/p/terms-of-service",
                        target: "_blank"
                    }, Object(Se.d)("View the Terms of Service", "BlockUser")), Ue.createElement("form", null, Ue.createElement(ze._17, {
                        borderTop: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, Ue.createElement(ze.M, {
                        label: Object(Se.d)("Select Reason (required)", "BlockUser")
                    }, Ue.createElement(ze._14, {
                        "data-test-selector": "block-user-dropdown",
                        onChange: this.onChangeReason,
                        defaultValue: ft
                    }, this.renderReasons()))), Ue.createElement(ze._17, {
                        display: ze.H.Flex,
                        justifyContent: ze.T.Center
                    }, Ue.createElement(ze.u, {
                        "data-test-selector": "block-user-submit-button",
                        onClick: this.onSubmit
                    }, Ue.createElement(ze.U, {
                        padding: {
                            x: 2
                        }
                    }, Object(Se.d)("Send", "BlockUser"))))))
                }, t.prototype.renderReasons = function() {
                    return this.blockSelectOptions.map(function(e) {
                        return Ue.createElement("option", {
                            key: e.canonical,
                            value: e.canonical,
                            name: e.text
                        }, e.text)
                    })
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case lt.FormError:
                            e = Object(Se.d)("Please select a reason.", "BlockUser");
                            break;
                        case lt.MutationError:
                            e = Object(Se.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "BlockUser");
                            break;
                        case lt.Success:
                            e = Object(Se.d)("Thank you for your report.", "BlockUser");
                            break;
                        default:
                            return null
                    }
                    var t = Be({
                        "reporting__error-container": this.props.submitStatus !== lt.Success,
                        "reporting__success-container": this.props.submitStatus === lt.Success
                    });
                    return Ue.createElement(ze._17, {
                        className: t,
                        fullWidth: this.props.submitStatus !== lt.Success,
                        margin: {
                            bottom: 2
                        },
                        padding: 1,
                        "data-test-selector": "block-user-status-message"
                    }, e)
                }, t
            }(Ue.Component),
            kt = (n(943), n(944)),
            yt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        submitStatus: lt.Unsubmitted
                    }, t.onClose = function() {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(t.state.submitStatus)
                    }, t.onSubmit = function(e) {
                        return ke.__awaiter(t, void 0, void 0, function() {
                            var t;
                            return ke.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (!e) return this.setState({
                                            submitStatus: lt.FormError
                                        }), [2];
                                        n.label = 1;
                                    case 1:
                                        return n.trys.push([1, 3, , 4]), [4, this.props.blockUserMutation(this.props.data.user.id, e, mt.a.Chat)];
                                    case 2:
                                        return n.sent(), this.setState({
                                            submitStatus: lt.Success
                                        }), [3, 4];
                                    case 3:
                                        return t = n.sent(), Se.i.error(t, "BlockUser Mutation failed"), this.setState({
                                            submitStatus: lt.MutationError
                                        }), [3, 4];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    return Ue.createElement(ze._17, {
                        className: "block-user__container",
                        background: ze.m.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, this.renderBody(), Ue.createElement(dt.a, null))
                }, t.prototype.renderBody = function() {
                    return this.props.data.loading ? Ue.createElement(ze.X, {
                        fillContent: !0
                    }) : Ue.createElement(vt, {
                        blockedUserDisplayName: this.props.data.user.displayName,
                        submitStatus: this.state.submitStatus,
                        onClose: this.onClose,
                        onSubmit: this.onSubmit
                    })
                }, t
            }(Ue.Component),
            St = Object(Me.compose)(Object(ht.c)("BlockUser"), Object(Oe.a)(kt, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: e.targetUserID
                        }
                    }
                }
            }), Object(pt.a)(), Object(Te.a)(null, d))(yt),
            _t = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        show: !0
                    }, t.dismiss = function() {
                        t.setState({
                            show: !1
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                        show: !0
                    })
                }, t.prototype.render = function() {
                    return this.state.show ? Ue.createElement(ze._17, {
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        background: ze.m.AccentAlt2,
                        color: ze.F.Overlay,
                        position: ze._2.Absolute,
                        className: "hosting-notification",
                        padding: {
                            y: .5,
                            left: .5
                        },
                        "data-a-target": "hosting-notification-container"
                    }, Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        padding: 1,
                        justifyContent: ze.T.Between,
                        alignItems: ze.c.Center,
                        flexWrap: ze.K.NoWrap
                    }, Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        flexWrap: ze.K.NoWrap
                    }, Ue.createElement(ze.U, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, Ue.createElement(ze._21, null, Object(Se.d)("Hosting", "ChatHostingNotification"))), Ue.createElement(ze.U, {
                        ellipsis: !0,
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, Ue.createElement(ze._21, {
                        type: ze._26.Strong,
                        "data-test-selector": "hosting-notification__text",
                        "data-a-target": "hosting-notification-channel-name"
                    }, "" + this.props.hostedChannelDisplayName))), Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        flexWrap: ze.K.NoWrap,
                        flexShrink: 0
                    }, Ue.createElement(ze.U, {
                        display: ze.H.Inline,
                        padding: {
                            right: .5
                        }
                    }, Ue.createElement(ze.u, {
                        linkTo: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                content: "host_channel",
                                medium: "chat_bar_notification"
                            }
                        },
                        size: ze.x.Small,
                        "data-a-target": "hosting-notification-gotochannel-button"
                    }, Object(Se.d)("Go to Channel", "ChatHostingNotification"))), Ue.createElement(ze.v, {
                        onClick: this.dismiss,
                        ariaLabel: Object(Se.d)("Close", "HostingNotification"),
                        size: ze.x.Small,
                        overlay: !0,
                        icon: ze._9.Close,
                        "data-a-target": "hosting-notification-close-button"
                    })))) : null
                }, t
            }(Ue.Component),
            Ct = n(47),
            Et = n(810),
            Nt = (n(945), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestFailed: !1
                    }, t.logger = Se.n.logger.withCategory("orbis"), t.onClickInteraction = function(e) {
                        t.props.sendMessage(":act " + e.currentTarget.getAttribute("data-action")), t.toggleBalloonRef.toggleBalloon()
                    }, t.setToggleBalloonRef = function(e) {
                        return t.toggleBalloonRef = e
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.isLoggedIn && this.props.firstPageLoaded && this.getChatProperties()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.isLoggedIn && !this.props.firstPageLoaded && e.firstPageLoaded && this.getChatProperties()
                }, t.prototype.render = function() {
                    return this.props.isLoggedIn && !this.state.requestFailed && this.hasInteractions() ? Ue.createElement(ze._17, {
                        className: "orbis",
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        alignItems: ze.c.Stretch,
                        background: ze.m.Base,
                        flexShrink: 0,
                        borderBottom: !0
                    }, Ue.createElement(Ct.a, {
                        ref: this.setToggleBalloonRef
                    }, Ue.createElement("div", {
                        className: "orbis__dropdown-container",
                        "data-test-selector": "orbis-dropdown-container"
                    }, Ue.createElement(ze.U, {
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: ze.H.Flex,
                        justifyContent: ze.T.Between,
                        flexWrap: ze.K.NoWrap
                    }, Ue.createElement(ze.U, {
                        ellipsis: !0,
                        padding: {
                            right: 1
                        }
                    }, Ue.createElement(ze._21, {
                        type: ze._26.Span
                    }, Object(Se.d)("Interactions Available", "Orbis"))), Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        justifyContent: ze.T.Between,
                        alignItems: ze.c.Center,
                        flexShrink: 0
                    }, Ue.createElement(ze.U, {
                        className: "orbis__dropdown-icon",
                        display: ze.H.Flex,
                        justifyContent: ze.T.Between,
                        alignItems: ze.c.Center
                    }, Ue.createElement(ze._8, {
                        asset: ze._9.AngleRight
                    }))))), Ue.createElement(ze.p, {
                        offsetY: "1px",
                        noTail: !0
                    }, Ue.createElement(ze.U, {
                        className: "orbis__dropdown-content",
                        padding: 1
                    }, this.renderInteractions())))) : null
                }, t.prototype.renderInteractions = function() {
                    return this.state.chatProperties ? [this.renderInteraction(this.state.chatProperties.sce_title_preset_text_1), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_2), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_3), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_4), this.renderInteraction(this.state.chatProperties.sce_title_preset_text_5)] : null
                }, t.prototype.renderInteraction = function(e) {
                    return e ? Ue.createElement(ze.S, {
                        onClick: this.onClickInteraction,
                        key: e,
                        "data-action": e,
                        "data-test-selector": "orbis-interaction"
                    }, Ue.createElement(ze.P, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, Ue.createElement(ze._21, {
                        ellipsis: !0
                    }, e))) : null
                }, t.prototype.getChatProperties = function() {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return ke.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, Et.a.get("/api/channels/" + this.props.channelLogin + "/chat_properties?on_site=1")];
                                case 1:
                                    return e = n.sent(), e.requestError ? (this.logger.error(e.requestError, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.error ? (this.logger.error(new Error("Chat Properties Error"), "The API returned a non-200 response", e.error), this.setState({
                                        requestFailed: !0
                                    }), [2]) : e.body ? (this.setState({
                                        chatProperties: e.body
                                    }), [3, 3]) : (this.logger.error(new Error("Chat Properties Error"), "Body is undefined"), this.setState({
                                        requestFailed: !0
                                    }), [2]);
                                case 2:
                                    return t = n.sent(), this.logger.error(t, "Unable to fetch chat properties"), this.setState({
                                        requestFailed: !0
                                    }), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.prototype.hasInteractions = function() {
                    return !!this.state.chatProperties && !!(this.state.chatProperties.sce_title_preset_text_1 || this.state.chatProperties.sce_title_preset_text_2 || this.state.chatProperties.sce_title_preset_text_3 || this.state.chatProperties.sce_title_preset_text_4 || this.state.chatProperties.sce_title_preset_text_5)
                }, t
            }(Ue.Component)),
            wt = Nt,
            Dt = Object(Te.a)(p)(wt),
            Tt = n(22),
            It = n(48),
            Ut = n(32),
            Ot = function() {
                function e() {}
                return e
            }(),
            xt = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.joinedRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.joinedRaids = t.joinedRaids), n
                }
                return ke.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e)
                }, t.prototype.hasJoined = function(e) {
                    return this.joinedRaids.has(e) || this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e), new t({
                        expiredRaids: n,
                        joinedRaids: this.joinedRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.add(e);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.delete(e);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    Se.k.set("raid", e)
                }, t.prototype.getStorageData = function() {
                    return Se.k.get("raid", {})
                }, t
            }(Ot),
            Mt = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.leftRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.leftRaids = t.leftRaids), n
                }
                return ke.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e)
                }, t.prototype.hasJoined = function(e) {
                    return !this.leftRaids.has(e) && !this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e), new t({
                        expiredRaids: n,
                        leftRaids: this.leftRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.delete(e);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.add(e);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    Se.k.set("raids-left", e)
                }, t.prototype.getStorageData = function() {
                    return Se.k.get("raids-left", {})
                }, t
            }(Ot),
            Rt = 3,
            Pt = 5,
            Ft = "raid_update",
            jt = function() {
                function e(e, t) {
                    this.message = e, this.id = e.raid.id, this.creatorID = e.raid.creator_id, this.sourceChannelID = e.raid.source_id, this.targetChannelID = e.raid.target_id, this.viewerCount = e.raid.viewer_count, t ? (this.varianceSeconds = t.varianceSeconds, this.totalDurationInSeconds = t.totalDurationInSeconds, this.clientCreatedAtTimestamp = t.clientCreatedAtTimestamp) : (this.varianceSeconds = m(), this.totalDurationInSeconds = this.getTotalDurationInSeconds(e.raid.remaining_duration_seconds), this.clientCreatedAtTimestamp = (new Date).getTime()), this.isAnnouncing = e.type === Ft && this.totalDurationInSeconds > 0, this.hasTimeToJoin = this.totalDurationInSeconds > Pt
                }
                return e.prototype.withMessage = function(t) {
                    return this.message === t ? this : this.id !== t.raid.id ? new e(t) : new e(t, this)
                }, e.prototype.getRemainingJoinTime = function(e) {
                    void 0 === e && (e = new Date);
                    var t = e.getTime() - this.clientCreatedAtTimestamp;
                    return 1e3 * this.totalDurationInSeconds - t
                }, e.prototype.getTotalDurationInSeconds = function(e) {
                    var t = e + this.varianceSeconds;
                    return Math.max(t, 0)
                }, e
            }(),
            At = "https://api.twitch.tv/kraken",
            Lt = n(817),
            Bt = (n(946), {
                "data-test-selector": "countdown-fill-width"
            }),
            Ht = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = this.props.startPolling || setInterval;
                    this.intervalID = t(function() {
                        return e.forceUpdate()
                    }, 1e3)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.intervalID)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.getRemainingTime() <= 0 && this.props.onCountdownEnd()
                }, t.prototype.render = function() {
                    var e = this.countdownPercentage + "%";
                    return Ue.createElement("div", {
                        className: "raid-countdown-bar"
                    }, Ue.createElement("div", ke.__assign({
                        className: "raid-countdown-bar__fill",
                        style: {
                            width: e
                        }
                    }, Bt)))
                }, Object.defineProperty(t.prototype, "countdownPercentage", {
                    get: function() {
                        return this.props.getRemainingTime() / this.props.totalCountdownTime * 100
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(Ue.PureComponent),
            Vt = (n(947), n(12)),
            Wt = {
                medium: "twitch_channel",
                content: "raid_channel"
            },
            Gt = n(948),
            qt = Object(Oe.a)(Gt, {
                options: function(e) {
                    return {
                        variables: {
                            sourceChannelID: e.raid.sourceChannelID,
                            targetChannelID: e.raid.targetChannelID
                        }
                    }
                }
            })(y),
            zt = {
                "data-test-selector": "current-raiders"
            },
            $t = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRemainingTime = function() {
                        return t.props.raid.getRemainingJoinTime()
                    }, t.handleCountdownEnd = function() {
                        t.props.onRaidInvitePeriodOver(t.props.data.targetChannel.displayName)
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    v(this.props.raid)
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.sourceChannel,
                        n = e.targetChannel;
                    return Ue.createElement(ze._17, {
                        className: "raid-notification",
                        background: ze.m.AccentAlt2,
                        color: ze.F.Overlay,
                        position: ze._2.Absolute,
                        zIndex: ze._38.Above,
                        fullWidth: !0
                    }, Ue.createElement(ze.U, {
                        className: "raid-notification__content",
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: ze.H.Flex,
                        justifyContent: ze.T.Between
                    }, Ue.createElement(ze.U, {
                        alignItems: ze.c.Center,
                        display: ze.H.Flex
                    }, Ue.createElement(ze.l, {
                        size: 36,
                        imageSrc: t.profileImageURL,
                        imageAlt: t.displayName
                    }), Ue.createElement(ze._8, {
                        asset: ze._9.AngleRight,
                        height: 10
                    }), Ue.createElement(ze.l, {
                        size: 36,
                        imageSrc: n.profileImageURL,
                        imageAlt: n.displayName
                    }), Ue.createElement(ze.U, {
                        padding: {
                            left: 1
                        }
                    }, Ue.createElement(ze._21, {
                        color: ze.F.OverlayAlt,
                        type: ze._26.P,
                        className: "raid-notification__channel-name"
                    }, Object(Se.d)("{sourceDisplayName} is", {
                        sourceDisplayName: t.displayName
                    }, "RaidCTASourceChannel")), Ue.createElement(ze._21, null, Object(Se.d)("raiding {targetDisplayName}", {
                        targetDisplayName: n.displayName
                    }, "RaidCTATargetChannel")), Ue.createElement(ze._21, ke.__assign({
                        bold: !0
                    }, zt), Object(Se.d)("{viewerCount, plural, one {# raider} other {# raiders}}", {
                        viewerCount: this.props.raid.viewerCount
                    }, "RaidCTATotalRaiders")))), this.props.children), Ue.createElement(Ht, {
                        totalCountdownTime: 1e3 * this.props.raid.totalDurationInSeconds,
                        getRemainingTime: this.getRemainingTime,
                        onCountdownEnd: this.handleCountdownEnd
                    }))
                }, t
            }(Ue.Component),
            Jt = function(e) {
                return function(t) {
                    return Ue.createElement(qt, ke.__assign({}, t, {
                        component: e
                    }))
                }
            }($t),
            Qt = {
                "data-test-selector": "raid-cancel-button"
            },
            Kt = function(e) {
                return Ue.createElement(ze.U, {
                    alignSelf: ze.d.Center
                }, Ue.createElement(ze.u, ke.__assign({
                    size: ze.x.Large,
                    type: ze.z.Hollow,
                    overlay: !0,
                    onClick: e.onCancelRaid
                }, Qt), Object(Se.d)("Cancel", "RaidCTACancel")))
            },
            Yt = n(864),
            Xt = {
                "data-test-selector": "join-raid-button"
            },
            Zt = {
                "data-test-selector": "leave-raid-button"
            },
            en = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.timerID = 0, t.handleLeaveRaid = function() {
                        clearTimeout(t.timerID), t.props.onLeaveRaid()
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.hasJoined && (this.timerID = setTimeout(this.props.onJoinRaid, Object(Yt.random)(5e3)))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.timerID)
                }, t.prototype.render = function() {
                    return this.props.hasJoined ? Ue.createElement(ze.U, {
                        alignSelf: ze.d.Center
                    }, Ue.createElement(ze.u, ke.__assign({
                        size: ze.x.Large,
                        type: ze.z.Hollow,
                        overlay: !0,
                        onClick: this.handleLeaveRaid
                    }, Zt), Object(Se.d)("Leave", "RaidCTALeave"))) : Ue.createElement(ze.U, {
                        alignSelf: ze.d.Center
                    }, Ue.createElement(ze.u, ke.__assign({
                        size: ze.x.Large,
                        onClick: this.props.onJoinRaid
                    }, Xt), Object(Se.d)("Join", "RaidCTAJoin")))
                }, t
            }(Ue.Component),
            tn = n(949),
            nn = n(20),
            an = n(376),
            rn = function() {
                return Ue.createElement("div", null)
            },
            sn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        raidStorage: new xt
                    }, t.handleRaidInvitePeriodOver = function(e) {
                        var n = t.hasJoinedCurrentRaid;
                        if (t.currentRaid && t.setState({
                                raidStorage: t.state.raidStorage.expireRaid(t.currentRaid)
                            }, function() {
                                t._currentRaid = void 0
                            }), n) {
                            var i = t.props.history.location || window.location,
                                a = S(i, e);
                            a && t.props.history.push(a, Wt)
                        }
                    }, t.handleJoinRaid = function() {
                        if (t.currentRaid) {
                            var e = t.currentRaid.id;
                            if (!t.props.authToken) return void t.props.login();
                            h(e, t.props.authToken), g(t.currentRaid), t.setState({
                                raidStorage: t.state.raidStorage.joinRaid(t.currentRaid)
                            })
                        }
                    }, t.handleLeaveRaid = function() {
                        if (t.currentRaid) {
                            f(t.currentRaid.id, t.props.authToken), b(t.currentRaid), t.setState({
                                raidStorage: t.state.raidStorage.leaveRaid(t.currentRaid)
                            })
                        }
                    }, t.handleCancelRaid = function() {
                        t.currentRaid && t.props.send(Lt.a)
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return ke.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, Se.n.experiments.getAssignment("TWILIGHT_RAID_AUTO_JOIN")];
                                case 1:
                                    return e = t.sent(), "yes" === e && this.setState({
                                        raidStorage: new Mt
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return this.shouldRenderRaidNotification ? Ue.createElement(Jt, {
                        raid: this.currentRaid,
                        onRaidInvitePeriodOver: this.handleRaidInvitePeriodOver
                    }, this.renderCTAButton()) : null
                }, t.prototype.renderCTAButton = function() {
                    return this.isRaidCreator ? Ue.createElement(Kt, {
                        onCancelRaid: this.handleCancelRaid
                    }) : Ue.createElement(en, {
                        onJoinRaid: this.handleJoinRaid,
                        onLeaveRaid: this.handleLeaveRaid,
                        hasJoined: this.hasJoinedCurrentRaid
                    })
                }, Object.defineProperty(t.prototype, "shouldRenderRaidNotification", {
                    get: function() {
                        var e = this.currentRaid;
                        return e && e.isAnnouncing && e.sourceChannelID === this.props.channelID && !this.state.raidStorage.isExpired(e) && (e.hasTimeToJoin || this.hasJoinedCurrentRaid)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isRaidCreator", {
                    get: function() {
                        var e = this.currentRaid;
                        return e && this.props.data && this.props.data.user && this.props.data.user.id === e.creatorID
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "currentRaid", {
                    get: function() {
                        var e = this.props.pubsub.messages.raidMessage;
                        return e && (this._currentRaid ? this._currentRaid = this._currentRaid.withMessage(e) : this._currentRaid = new jt(e)), this._currentRaid
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "hasJoinedCurrentRaid", {
                    get: function() {
                        var e = this.currentRaid;
                        return !(!e || !this.props.authToken) && (this.isRaidCreator || this.state.raidStorage.hasJoined(e))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(Ue.Component),
            on = Object(Oe.a)(tn, {
                skip: function(e) {
                    return !e.authToken
                }
            })(sn),
            ln = Object(Te.a)(E, N)(on),
            cn = Object(He.a)([{
                topic: function(e) {
                    return Object(Ge.g)(e.channelID)
                },
                mapMessageTypesToProps: (gt = {}, gt[Ve.c.RaidUpdate] = "raidMessage", gt[Ve.c.RaidCancel] = "raidMessage", gt)
            }])(ln),
            un = Object(Tt.e)(cn),
            dn = function(e) {
                return function(t) {
                    var n = {
                        fallback: rn,
                        yes: function() {
                            return Ue.createElement(e, ke.__assign({}, t))
                        }
                    };
                    return Ue.createElement(an.a, {
                        name: "TWILIGHT_LEEROY_JENKINS",
                        loader: rn,
                        assignments: n
                    })
                }
            }(un),
            pn = n(833),
            mn = n(805),
            hn = n(950),
            fn = n(951),
            gn = 200,
            bn = function() {
                function e(e) {
                    var t = this;
                    this.getActiveChatters = function() {
                        return t.isDirty = !1, Object.keys(t.activeChatters).map(function(e) {
                            return t.activeChatters[e]
                        })
                    }, this.setCurrentUserID = function(e) {
                        t.currentUserID = e, t.activeChatterIDs.has(e) && (t.isDirty = !0, t.removeActiveChatter(e))
                    }, this.consumeChatEvent = function(e) {
                        switch (e.type) {
                            case mn.a.Action:
                            case mn.a.Post:
                            case mn.a.PostWithMention:
                                var n = e;
                                t.handleActiveChatter(n.user)
                        }
                    }, this.handleActiveChatter = function(e) {
                        e.userID && e.userID !== t.channelID && e.userID !== t.currentUserID && (t.activeChatterIDs.has(e.userID) ? (t.activeChatterIDs.delete(e.userID), t.addActiveChatter(e)) : (t.addActiveChatter(e), t.trimActiveChatters(), t.isDirty = !0))
                    }, this.addActiveChatter = function(e) {
                        e.userID && (t.activeChatterIDs.add(e.userID), t.activeChatters[e.userID] = e)
                    }, this.removeActiveChatter = function(e) {
                        t.activeChatterIDs.delete(e), delete t.activeChatters[e]
                    }, this.trimActiveChatters = function() {
                        if (!(t.activeChatterIDs.size <= gn))
                            for (var e = t.activeChatterIDs.size - gn, n = t.activeChatterIDs.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveChatter(a)
                            }
                    }, this.activeChatterIDs = new Set, this.activeChatters = {}, this.channelID = e, this.currentUserID = null
                }
                return e
            }(),
            vn = n(260),
            kn = 1e3,
            yn = 250,
            Sn = 0,
            _n = 200,
            Cn = function() {
                function e(e) {
                    void 0 === e && (e = yn);
                    var t = this;
                    this.maxSize = e, this.setDelay = function(e) {
                        t.delayDuration = e
                    }, this.setCurrentUserLogin = function(e) {
                        t.currentUserLogin = e
                    }, this.consumeChatEvent = function(e) {
                        var n = !1;
                        switch (e.type) {
                            case mn.a.Action:
                            case mn.a.Post:
                            case mn.a.PostWithMention:
                                var i = e;
                                if (i.user.userID && t.blockedUsers.has(i.user.userID)) return;
                                var a = i.messageParts[0];
                                if (a && a.type === vn.a.Text && a.content.startsWith(":act ")) return;
                                n = !t.isOwnMessage(i);
                                break;
                            case mn.a.Resubscription:
                                var r = e;
                                n = !t.isOwnMessage(r) && void 0 !== r.messageParts;
                                break;
                            case mn.a.Ban:
                            case mn.a.Timeout:
                                var s = e,
                                    o = s.userLogin;
                                if (t.moderatedUsers.has(o)) return;
                                [t.buffer, t.delayedMessageBuffer.map(function(e) {
                                    return e.event
                                })].forEach(function(e) {
                                    e.forEach(function(e) {
                                        e.user && o === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0)
                                    })
                                }), t.moderatedUsers.add(o), setTimeout(t.unmoderateUser(o), kn);
                                break;
                            case mn.a.Disconnected:
                                return;
                            case mn.a.Reconnect:
                                if (t.buffer.find(function(t) {
                                        return t.id === e.id
                                    }) || t.delayedMessageBuffer.find(function(t) {
                                        return t.event.id === e.id
                                    })) return;
                                break;
                            case mn.a.Clear:
                                t.delayedMessageBuffer = [], t.buffer = []
                        }
                        t.delayedMessageBuffer.push({
                            event: e,
                            time: Date.now(),
                            shouldDelay: n
                        })
                    }, this.unmoderateUser = function(e) {
                        return function() {
                            t.moderatedUsers.delete(e)
                        }
                    }, this.isOwnMessage = function(e) {
                        var n = e.user;
                        return !(!t.currentUserLogin || !n || n.userLogin !== t.currentUserLogin)
                    }, this.delayedMessageBuffer = [], this.buffer = [], this.moderatedUsers = new Set, this.blockedUsers = new Set, this._isDirty = !1, this.throttlingDuration = _n, this.delayDuration = Sn, this.currentUserLogin = null, this.flushInterval = setInterval(function() {
                        return t.flushRawMessages()
                    }, this.throttlingDuration), this.setBlockedUsers = this.setBlockedUsers.bind(this)
                }
                return e.prototype.shutdown = function() {
                    this.flushInterval && clearInterval(this.flushInterval)
                }, e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e.prototype.toArray = function() {
                    return this.buffer = this.buffer.slice(-this.maxSize), this._isDirty = !1, this.buffer
                }, e.prototype.isDeletable = function(e) {
                    return void 0 !== e.deleted
                }, e.prototype.flushRawMessages = function() {
                    var e = this,
                        t = [],
                        n = Date.now();
                    this.delayedMessageBuffer.forEach(function(i) {
                        var a = i.event,
                            r = i.time,
                            s = i.shouldDelay;
                        r <= n - e.delayDuration || !s ? e.isDeletable(a) && a.deleted || (e.buffer.push(a), e._isDirty = !0) : t.push({
                            event: a,
                            time: r,
                            shouldDelay: s
                        })
                    }), this.delayedMessageBuffer = t
                }, Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "moderatedUserCount", {
                    get: function() {
                        return this.moderatedUsers.size
                    },
                    enumerable: !0,
                    configurable: !0
                }), e
            }(),
            En = n(807),
            Nn = n(818),
            wn = n(130),
            Dn = n(846),
            Tn = n(266),
            In = function() {
                function e(e, t, n) {
                    var i = this;
                    this.onJoinedEvent = function(e) {
                        return i.postMessage(M())
                    }, this.onDisconnectedEvent = function(e) {
                        return i.postMessage(R(e.reason))
                    }, this.onReconnectingEvent = function(e) {
                        return i.postMessage(P())
                    }, this.onHostingEvent = function(e) {
                        return i.postMessage(F(e.target))
                    }, this.onUnhostEvent = function(e) {
                        return i.postMessage(j(e.channel))
                    }, this.onChatMessageEvent = function(e) {
                        i.postMessage(i.convertMessage(e))
                    }, this.onChatActionEvent = function(e) {
                        var t = i.bitsConfig || Ae.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0,
                            a = T(mn.a.Action, e.action, e.message.user, t, i.shouldBlockLinks(e.message.user), n);
                        i.postMessage(a)
                    }, this.onChatNoticeEvent = function(e) {
                        var t = I(e.channel, e.msgid, e.body);
                        i.postMessage(t)
                    }, this.onTimeoutEvent = function(e) {
                        i.onModerationEvent(mn.a.Timeout, e)
                    }, this.onBanEvent = function(e) {
                        i.onModerationEvent(mn.a.Ban, e)
                    }, this.onModerationEvent = function(e, t) {
                        i.postMessage(Object(Dn.a)(e, t.userLogin, t.reason, t.duration))
                    }, this.onSubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "$4.99"
                        }
                        i.postMessage(W(e.channel, e.user.displayName, e.methods.prime, t))
                    }, this.onSubscriptionGiftEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "custom"
                        }
                        i.postMessage(G(e.channel, e.user.displayName, e.methods.prime, t, e.recipientName))
                    }, this.onResubscriptionEvent = function(e) {
                        var t;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "$4.99";
                                break;
                            case "2000":
                                t = "$9.99";
                                break;
                            case "3000":
                                t = "$24.99";
                                break;
                            default:
                                t = "$4.99"
                        }
                        i.postMessage(z(e.channel, e.user.displayName, e.methods.prime, e.months, t, e.body, e.user))
                    }, this.onRoomModsEvent = function(e) {
                        return i.postMessage(A(e.usernames))
                    }, this.onRoomStateEvent = function(e) {
                        return i.postMessage(L(e.state))
                    }, this.onSlowModeEvent = function(e) {
                        return i.postMessage(B(e.enabled, e.length))
                    }, this.onFollowerOnlyModeEvent = function(e) {
                        return i.postMessage(H(e.enabled, e.length))
                    }, this.onSubscriberOnlyModeEvent = function(e) {
                        return i.postMessage(V(e.enabled))
                    }, this.onClearChatEvent = function(e) {
                        return i.postMessage(w())
                    }, this.onRaidEvent = function(e) {
                        return i.postMessage(O(e.channel, e.userLogin, e.params))
                    }, this.onUnraidEvent = function(e) {
                        return i.postMessage(x(e.channel, e.userLogin, e.message))
                    }, this.onBadgesUpdatedEvent = function(e) {
                        return i.postMessage(D(e.username, e.badges))
                    }, this.onPurchaseEvent = function(e) {
                        var t = i.bitsConfig || Ae.a;
                        i.postMessage(U(e.purchase, i.convertMessage(e), e.timestamp, t))
                    }, this.convertMessage = function(e) {
                        var t = i.bitsConfig || Ae.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0;
                        return T(mn.a.Post, e.message.body, e.message.user, t, i.shouldBlockLinks(e.message.user), n)
                    }, this.logger = Se.i.withCategory("chat-service"), this.logger.debug("Created"), this.userLogin = e, this.channelLogin = t, this.service = Se.n.tmi, this.client = Se.n.tmi.client, this.postMessage = n, this.disabled = Se.n.tmi.disabled
                }
                return e.prototype.join = function() {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        return ke.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Joining channel and binding all event listeners"), [4, this.service.awaitParted()];
                                case 1:
                                    return e.sent(), this.connectHandlers(), [4, this.service.join(this.channelLogin)];
                                case 2:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.part = function() {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        return ke.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Parting channel and unbinding all event listeners"), this.client.events.removeAll(), [4, this.service.part(this.channelLogin)];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.sendMessage = function(e) {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        var t;
                        return ke.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, this.client.sendCommand(this.channelLogin, e)];
                                case 1:
                                    return n.sent(), [3, 3];
                                case 2:
                                    return t = n.sent(), Se.i.warn("Failed to send message, or message timeout", t), [3, 3];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.prototype.updateEmotes = function(e) {
                    this.selfEmotes = Object(Tn.a)(e), this.client.updateEmoteSets(e)
                }, e.prototype.updateChannelBadges = function(e) {
                    this.client.updateChannelBadges(this.channelLogin, e)
                }, e.prototype.updateBitsConfig = function(e) {
                    this.bitsConfig = e
                }, e.prototype.updateBlockLinks = function(e) {
                    this.blockLinks = e
                }, e.prototype.connectHandlers = function() {
                    this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.followersonly(this.onFollowerOnlyModeEvent), this.client.events.slowmode(this.onSlowModeEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent)
                }, e.prototype.shouldBlockLinks = function(e) {
                    return e.username !== this.channelLogin && e.userType !== Nn.a.Staff && e.userType !== Nn.a.GlobalMod && e.userType !== Nn.a.Moderator && this.blockLinks
                }, e
            }(),
            Un = function() {
                function e(e, t, n) {
                    this.channelID = e, this.sessionUserID = t, this.unsubscribe = Se.j.subscribe({
                        topic: Object(Ge.d)(this.sessionUserID, this.channelID),
                        onMessage: function(e) {
                            switch (e.data.moderation_action) {
                                case Ve.b.AutoModRejected:
                                    var t = J(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    n(t);
                                    break;
                                case Ve.e.AutoModMessageRejected:
                                    n(Q());
                                    break;
                                case Ve.e.AutoModMessageApproved:
                                    n(K());
                                    break;
                                case Ve.e.AutoModMessageDenied:
                                    n(Y())
                            }
                        }
                    })
                }
                return e
            }(),
            On = n(952),
            xn = n(826),
            Mn = n(57),
            Rn = n(441),
            Pn = n(55),
            Fn = n(71),
            jn = n(953),
            An = n(40),
            Ln = function() {
                function e() {}
                return e.fetchChannelsList = function() {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return ke.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, Et.a.get("/kraken/autohost/list")];
                                case 1:
                                    return e = n.sent(), [2, this.deserialize(e)];
                                case 2:
                                    return t = n.sent(), Se.i.error(t, "Couldn't fetch autohost list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.setChannelsList = function(e) {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return ke.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, Et.a.put("/kraken/autohost/list", {
                                        body: {
                                            targets: e.join(",")
                                        }
                                    })];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), Se.i.error(n, "Couldn't update autohost list"), [2, e];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.deserialize = function(e) {
                    return e.body ? e.body.targets.map(function(e) {
                        return e._id.toString()
                    }) : []
                }, e
            }(),
            Bn = (n(954), n(955)),
            Hn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.dismiss = function() {
                        t.setState({
                            isDismissed: !0
                        }), t.track(Vt.SpadeEventType.AutohostChatDismiss);
                        var e = t.getAutohostNotificationsDismissed();
                        e[t.props.data.user.id] = {
                            dismissedDate: (new Date).getTime()
                        }, t.setAutohostNotificationsDismissed(e)
                    }, t.addChannelToAutohost = function() {
                        return ke.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return ke.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, Ln.fetchChannelsList()];
                                    case 1:
                                        return e = t.sent().concat([this.props.data.user.id]), this.setState({
                                            autohostChannels: e
                                        }), Ln.setChannelsList(e), this.track(Vt.SpadeEventType.AutohostChatYes), [2]
                                }
                            })
                        })
                    }, t.trackSettingsClick = function() {
                        t.track(Vt.SpadeEventType.AutohostChatSettings)
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return ke.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, Ln.fetchChannelsList()];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        autohostChannels: e
                                    }), this.isShowing && this.track(Vt.SpadeEventType.AutohostChatImpression), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    if (!this.isShowing) return null;
                    var e = Object(Se.d)("You are now hosting {channel}", {
                            channel: this.props.data.user.displayName
                        }, "AutohostPrompt"),
                        t = Object(Se.d)("Auto host this channel whenever you're offline?", "AutohostPrompt"),
                        n = Object(Se.d)("Yes", "AutohostPrompt"),
                        i = Object(Se.d)("Settings", "AutohostPrompt");
                    return Ue.createElement(ze._17, {
                        background: ze.m.Base,
                        className: "autohost-prompt",
                        margin: {
                            x: 2
                        },
                        position: ze._2.Relative
                    }, Ue.createElement(ze.p, {
                        size: ze.r.Medium,
                        direction: ze.q.TopLeft,
                        show: !0
                    }, Ue.createElement(ze._17, {
                        alignItems: ze.c.Center,
                        borderBottom: !0,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        justifyContent: ze.T.Around,
                        padding: 1
                    }, Ue.createElement(ze.U, {
                        position: ze._2.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, Ue.createElement(ze.v, {
                        ariaLabel: Object(Se.d)("Close", "AutohostPrompt"),
                        size: ze.x.Small,
                        type: ze.w.Secondary,
                        "data-test-selector": "autohost-dismiss-button",
                        icon: ze._9.Close,
                        onClick: this.dismiss
                    })), Ue.createElement(ze.l, {
                        imageAlt: this.props.data.user.displayName,
                        imageSrc: this.props.data.user.profileImageURL,
                        size: 30
                    }), Ue.createElement(ze.U, {
                        className: "autohost-prompt__hosting-message",
                        display: ze.H.Flex,
                        padding: {
                            top: .5
                        }
                    }, Ue.createElement(ze._8, {
                        asset: ze._9.Check
                    }), Ue.createElement(ze.P, {
                        margin: {
                            left: .5
                        }
                    }, Ue.createElement(ze._21, null, e)))), Ue.createElement(ze.U, {
                        className: "autohost-prompt__prompt",
                        justifyContent: ze.T.Center,
                        display: ze.H.Flex,
                        padding: 1
                    }, Ue.createElement(ze._21, null, t), Ue.createElement(ze._33, {
                        gutterSize: ze._35.ExtraSmall,
                        childWidth: ze._34.Large
                    }, Ue.createElement("div", null, Ue.createElement(ze.u, {
                        "data-test-selector": "autohost-yes-button",
                        fullWidth: !0,
                        onClick: this.addChannelToAutohost
                    }, n)), Ue.createElement("div", null, Ue.createElement(ze.u, {
                        "data-test-selector": "autohost-settings-button",
                        fullWidth: !0,
                        onClick: this.trackSettingsClick,
                        type: ze.z.Hollow,
                        linkTo: "https://twitch.tv/settings/profile"
                    }, i))))))
                }, Object.defineProperty(t.prototype, "isShowing", {
                    get: function() {
                        return !this.state.isDismissed && !!this.props.hostedChannelLogin && !this.props.data.loading && !this.props.data.error && this.props.data.user && !!this.state.autohostChannels && !this.state.autohostChannels.includes(this.props.data.user.id) && !this.getAutohostNotificationsDismissed()[this.props.data.user.id]
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.track = function(e) {
                    Z(e, {
                        user_id: this.props.data.currentUser.id,
                        hosting_channel_id: this.props.data.currentUser.id,
                        hosted_channel_id: this.props.data.user.id
                    })
                }, t.prototype.getAutohostNotificationsDismissed = function() {
                    return Se.k.get("autohost-notifications-dismissed", {})
                }, t.prototype.setAutohostNotificationsDismissed = function(e) {
                    return Se.k.set("autohost-notifications-dismissed", e)
                }, t = ke.__decorate([Object(Oe.a)(Bn, {
                    skip: function(e) {
                        return !e.hostedChannelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.hostedChannelLogin
                            }
                        }
                    }
                })], t)
            }(Ue.Component),
            Vn = Hn,
            Wn = n(821),
            Gn = n(106),
            qn = n(847),
            zn = n(825),
            $n = n(819),
            Jn = n(828),
            Qn = n(876),
            Kn = n(956),
            Yn = (n(957), "chat-ban-button"),
            Xn = "chat-unban-button",
            Zn = "chat-timeout-button",
            ei = "chat-deleted-message-placeholder",
            ti = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        alwaysShowMessage: !1
                    }, t.renderModerationIcons = function() {
                        if (!t.props.isCurrentUserModerator || !t.props.showModerationIcons) return null;
                        var e = t.onBanUser,
                            n = ze._9.Ban,
                            i = Object(Se.d)("Ban", "ChatMessageEvent"),
                            a = Yn;
                        return t.props.message.deleted && !t.state.alwaysShowMessage && (e = t.onUnbanUser, n = ze._9.FollowCheck, i = Object(Se.d)("Unban", "ChatMessageEvent"), a = Xn), Ue.createElement(ze.U, {
                            display: ze.H.Inline,
                            className: "chat-line__mod-icons"
                        }, Ue.createElement("button", {
                            className: "mod-icon",
                            onClick: e,
                            "data-a-target": a
                        }, Ue.createElement(ze._30, {
                            label: i
                        }, Ue.createElement(ze._8, {
                            width: 16,
                            height: 16,
                            type: ze._10.Inherit,
                            asset: n
                        }))), Ue.createElement("button", {
                            className: "mod-icon",
                            onClick: t.timeoutUser,
                            "data-a-target": Zn
                        }, Ue.createElement(ze._30, {
                            label: Object(Se.d)("Timeout", "ChatMessageEvent")
                        }, Ue.createElement(ze._8, {
                            width: 16,
                            height: 16,
                            type: ze._10.Inherit,
                            asset: ze._9.Timeout
                        }))))
                    }, t.renderMessageBody = function() {
                        if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                            var e = Object(Se.d)("message deleted", "ChatLine");
                            return t.props.isCurrentUserModerator ? Ue.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": ei
                            }, Ue.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + e + ">")) : Ue.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": ei
                            }, "<" + e + ">")
                        }
                        return Object($n.e)(t.props.message.messageParts, t.props.currentUserDisplayName, t.props.currentUserLogin)
                    }, t.onBanUser = function() {
                        t.props.onBanUser(t.props.message.user.userLogin)
                    }, t.onUnbanUser = function() {
                        t.props.onUnbanUser(t.props.message.user.userLogin)
                    }, t.timeoutUser = function() {
                        t.props.onBanUser(t.props.message.user.userLogin, 600)
                    }, t.alwaysShowMessage = function(e) {
                        e && e.preventDefault(), t.setState({
                            alwaysShowMessage: !0
                        })
                    }, t.usernameClickHandler = function() {
                        t.props.onUsernameClick(t.props.message.user.userLogin, Jn.a.chat_message, t.props.message.id)
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.badgeSets,
                        n = e.className,
                        i = e.message,
                        a = e.showTimestamps,
                        r = {},
                        s = ": ";
                    i.type === mn.a.Action && (r = {
                        color: i.user.color
                    }, s = " ");
                    var o = null;
                    return a && (o = Object($n.o)(i.timestamp)), Ue.createElement("div", {
                        className: Be(n, "chat-line__message"),
                        style: r,
                        "data-a-target": "chat-line-message"
                    }, o, this.renderModerationIcons(), Ue.createElement(Wn.b, {
                        badgeSets: t,
                        badgesToRender: i.badges
                    }), Ue.createElement("button", {
                        onClick: this.usernameClickHandler,
                        className: "chat-line__username"
                    }, Ue.createElement(zn.a, {
                        userData: i.user
                    })), Ue.createElement("span", {
                        key: "separator"
                    }, s), this.renderMessageBody())
                }, t
            }(Ue.Component),
            ni = function(e) {
                return {
                    channelID: e.channelID,
                    onPushMessage: e.onPushMessage
                }
            },
            ii = Object(xe.compose)(function(e) {
                return e
            }, Object(Qn.a)(ni), function() {
                var e = this;
                return Object(Oe.a)(Kn, {
                    props: function(t) {
                        return {
                            onUnbanUser: function(n) {
                                return ke.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return ke.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 5];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate(Object(We.a)({
                                                    channelID: t.ownProps.channelID,
                                                    bannedUserLogin: n
                                                }))];
                                            case 2:
                                                return i.sent(), t.ownProps.onPushMessage(Object(pn.a)(ee(n))), [3, 4];
                                            case 3:
                                                return e = i.sent(), Se.i.error(e, "Unable to ban user"), t.ownProps.onPushMessage(Object(pn.a)(te())), [3, 4];
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                t.ownProps.onPushMessage(Object(pn.a)(te())), i.label = 6;
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), Object(Te.a)(void 0, ne))(ti),
            ai = n(958),
            ri = n(959),
            si = {
                badges: {
                    twitchbot: "1"
                },
                bits: 0,
                color: "#6441A5",
                displayName: "AutoMod",
                id: "automod",
                userID: "automod",
                username: "automod",
                userType: Nn.a.GlobalMod,
                emotes: null
            },
            oi = {
                VoHiYo: {
                    displayName: "VoHiYo",
                    id: "81274",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/81274/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/3.0 3.0x",
                    token: "VoHiYo"
                }
            },
            li = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isResolved: !1
                    }, t.allowAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        }), t.props.allowRejectedChatMessage && t.props.message.type === mn.a.AutoModRejectedPrompt && t.props.allowRejectedChatMessage(Object(We.a)({
                            id: t.props.message.rejectedMessage.id
                        }))
                    }, t.denyAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        }), t.props.denyRejectedChatMessage && t.props.message.type === mn.a.AutoModRejectedPrompt && t.props.denyRejectedChatMessage(Object(We.a)({
                            id: t.props.message.rejectedMessage.id
                        }))
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e;
                    switch (this.props.message.type) {
                        case mn.a.AutoModRejectedPrompt:
                            e = ie(this.props.message.category);
                            break;
                        case mn.a.AutoModMessageRejected:
                            e = Object(Se.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                            break;
                        case mn.a.AutoModMessageAllowed:
                            e = Object(Se.d)("Mods have allowed your message. Happy chatting!", "AutoModLine"), e += " VoHiYo";
                            break;
                        case mn.a.AutoModMessageDenied:
                            e = Object(Se.d)("Mods have removed your message.", "AutoModLine");
                            break;
                        default:
                            throw new Error("Invalid message type")
                    }
                    var t = Object(wn.a)(e, si, Ae.a, !1, oi);
                    switch (this.props.message.type) {
                        case mn.a.AutoModRejectedPrompt:
                            if (this.state.isResolved) return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.b)());
                            var n = ["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"];
                            return Ue.createElement(ze.U, {
                                className: "chat-line__message"
                            }, Ue.createElement(qn.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: t.badges
                            }), Ue.createElement(zn.a, {
                                userData: t.user
                            }), Ue.createElement("span", {
                                key: "separator"
                            }, ": "), Object($n.e)(t.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin), Ue.createElement(ze.U, {
                                key: "automod-prompt",
                                className: "chat-line__nested-component--float-right"
                            }, Ue.createElement(ze.u, {
                                size: ze.x.Small,
                                onClick: this.allowAutoModRejectedMessage,
                                type: ze.z.Text
                            }, Object(Se.d)("Allow", "AutoModLine")), Ue.createElement(ze._21, {
                                type: ze._26.Span
                            }, "•"), Ue.createElement(ze.u, {
                                size: ze.x.Small,
                                onClick: this.denyAutoModRejectedMessage,
                                type: ze.z.Text
                            }, Object(Se.d)("Deny", "AutoModLine"))), Ue.createElement(ii, ke.__assign({}, this.props, {
                                isDeleted: !1,
                                showTimestamps: !1,
                                className: Be(n),
                                message: this.props.message.rejectedMessage
                            })));
                        case mn.a.AutoModMessageRejected:
                        case mn.a.AutoModMessageAllowed:
                        case mn.a.AutoModMessageDenied:
                            var i = ["chat-line__message", "chat-line__message--special", "chat-line__message--alert"];
                            return Ue.createElement(ze.U, {
                                className: Be(i)
                            }, Ue.createElement(qn.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: t.badges
                            }), Ue.createElement(zn.a, {
                                userData: t.user
                            }), Ue.createElement("span", {
                                key: "separator"
                            }, ": "), Object($n.e)(t.messageParts, this.props.currentUserDisplayName, this.props.currentUserLogin));
                        default:
                            throw new Error("Invalid message type")
                    }
                }, t
            }(Ue.Component),
            ci = Object(xe.compose)(Object(Oe.a)(ai, {
                name: "allowRejectedChatMessage",
                options: {}
            }), Object(Oe.a)(ri, {
                name: "denyRejectedChatMessage",
                options: {}
            }))(li),
            ui = n(960),
            di = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.params,
                        t = this.props.data,
                        n = t.channel,
                        i = t.loading,
                        a = t.error;
                    if (i || a) return null;
                    var r = Object(Se.d)("{displayName} is raiding with a party of {viewerCount}.", {
                        displayName: Ue.createElement("strong", null, n.displayName),
                        viewerCount: Ue.createElement("strong", null, e.viewerCount)
                    }, "RaidIncomingMessage");
                    return Ue.createElement(ze.U, {
                        className: "chat-line__raid",
                        "data-test-selector": "incoming-raid"
                    }, Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        alignItems: ze.c.Center
                    }, Ue.createElement(ze.l, {
                        imageAlt: n.displayName,
                        imageSrc: n.profileImageURL,
                        size: 30
                    }), Ue.createElement(ze.U, {
                        className: "c-text",
                        margin: {
                            left: 1
                        }
                    }, r)))
                }, t
            }(Ue.Component),
            pi = Object(Oe.a)(ui, {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.message.params.login
                        }
                    }
                }
            })(di),
            mi = function(e) {
                return Ue.createElement("span", null, ae()[e.message.msgid])
            },
            hi = n(498),
            fi = (n(961), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        drawerOpen: !1
                    }, t.renderBitsLoot = function(e) {
                        return Ue.createElement(ze.U, {
                            key: e.quantity,
                            className: "chat-line__purchase-loot"
                        }, Ue.createElement(qe.a, {
                            bitsConfig: t.props.bitsConfig,
                            count: e.quantity,
                            withImage: !0
                        }))
                    }, t.toggleDrawer = function() {
                        t.setState(function(e) {
                            return {
                                drawerOpen: !e.drawerOpen
                            }
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e, t = this,
                        n = this.props.purchase,
                        i = n.crateLoot,
                        a = n.numCrates,
                        r = n.purchased;
                    if (a > 0) {
                        var s = Object(Se.d)("{numCrates, plural, one {Plus # Twitch Crate with {lootCount} rewards!} other {Plus # Twitch Crates with {lootCount} rewards!}}", {
                            numCrates: a,
                            lootCount: i.length
                        }, "SharePurchaseLineRewardText");
                        e = Ue.createElement(ze.U, {
                            className: "chat-line__purchase-reward-text",
                            margin: {
                                top: .5
                            }
                        }, s)
                    }
                    var o, l = i.map(function(e) {
                        switch (e.type) {
                            case hi.a.Badge:
                                return t.renderBadgeLoot(e);
                            case hi.a.Bits:
                                return t.renderBitsLoot(e);
                            case hi.a.Emote:
                                return t.renderEmoteLoot(e);
                            case hi.a.InGameContent:
                                return t.renderIGCLoot(e);
                            default:
                                return ""
                        }
                    });
                    if (i.length <= 2) o = 0 === i.length ? "" : Ue.createElement(ze._17, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: ze.c.Center,
                        borderLeft: !0,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row,
                        flexShrink: 0,
                        flexWrap: ze.K.NoWrap,
                        justifyContent: ze.T.Center,
                        padding: .5
                    }, l);
                    else if (this.state.drawerOpen) o = Ue.createElement("span", {
                        className: "chat-line__purchase-loot-toggle",
                        onClick: this.toggleDrawer,
                        "data-test-selector": "purchase-loot-toggle"
                    }, Ue.createElement(ze._17, {
                        className: "chat-line__purchase-loot-box",
                        alignItems: ze.c.Center,
                        borderLeft: !0,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row,
                        flexShrink: 0,
                        flexWrap: ze.K.NoWrap,
                        justifyContent: ze.T.Center,
                        padding: .5
                    }, Ue.createElement(ze._8, {
                        asset: ze._9.GlyphArrUp
                    })));
                    else {
                        var c = "+" + (i.length - 1);
                        o = Ue.createElement("span", {
                            className: "chat-line__purchase-loot-toggle",
                            onClick: this.toggleDrawer,
                            "data-test-selector": "purchase-loot-toggle"
                        }, Ue.createElement(ze._17, {
                            className: "chat-line__purchase-loot-box",
                            alignItems: ze.c.Center,
                            borderLeft: !0,
                            display: ze.H.Flex,
                            flexDirection: ze.J.Row,
                            flexShrink: 0,
                            flexWrap: ze.K.NoWrap,
                            justifyContent: ze.T.Center,
                            padding: .5
                        }, l[0], Ue.createElement(ze.Z, {
                            label: c,
                            type: ze._0.Notification
                        })))
                    }
                    var u = i.length <= 2 || !this.state.drawerOpen ? "" : Ue.createElement(ze._17, {
                        className: "chat-line__purchase-loot-drawer",
                        alignItems: ze.c.Center,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row,
                        flexShrink: 0,
                        flexWrap: ze.K.NoWrap,
                        justifyContent: ze.T.End,
                        padding: .5,
                        "data-test-selector": "purchase-loot-drawer"
                    }, l);
                    return Ue.createElement(ze._17, {
                        className: "chat-line__purchase",
                        elevation: 1,
                        margin: {
                            bottom: .5,
                            left: 2,
                            right: 2,
                            top: 0
                        }
                    }, Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row,
                        flexWrap: ze.K.NoWrap
                    }, Ue.createElement(ze.U, {
                        flexGrow: 0,
                        flexShrink: 0,
                        margin: .5
                    }, Ue.createElement("img", {
                        className: "chat-line__purchase-boxart",
                        src: r.boxart
                    })), Ue.createElement(ze.U, {
                        flexGrow: 1,
                        margin: .5
                    }, Ue.createElement(ze._17, {
                        fontSize: ze.L.Size4
                    }, r.title), e), o), u)
                }, t.prototype.renderBadgeLoot = function(e) {
                    return Ue.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t.prototype.renderEmoteLoot = function(e) {
                    var t = "//static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/2.0";
                    return Ue.createElement("img", {
                        key: e.id,
                        className: "chat-line__purchase-loot",
                        src: t
                    })
                }, t.prototype.renderIGCLoot = function(e) {
                    return Ue.createElement("img", {
                        key: e.img,
                        className: "chat-line__purchase-loot",
                        src: e.img
                    })
                }, t
            }(Ue.Component)),
            gi = fi,
            bi = (n(962), {
                timeout_success: "timeout_success",
                ban_success: "ban_success"
            }),
            vi = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case mn.a.AutoModMessageRejected:
                        case mn.a.AutoModMessageAllowed:
                        case mn.a.AutoModMessageDenied:
                        case mn.a.AutoModRejectedPrompt:
                            return Ue.createElement(ci, {
                                channelID: this.props.channelID,
                                message: e,
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                showModerationIcons: this.props.showModerationIcons,
                                currentUserLogin: this.props.currentUserLogin
                            });
                        case mn.a.Connected:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status",
                                "data-a-target": "chat-welcome-message"
                            }, Ue.createElement(ze._21, {
                                type: ze._26.Span
                            }, Object(Se.d)("Welcome to the chat room!", "ChatLine")));
                        case mn.a.Disconnected:
                            return e.reason ? Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Ue.createElement(ze._21, {
                                type: ze._26.Span
                            }, Object(Se.d)("You have been disconnected from chat for the following reason: {reason}", {
                                reason: e.reason
                            }, "ChatLine"))) : Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Ue.createElement(ze._21, {
                                type: ze._26.Span
                            }, Object(Se.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                        case mn.a.Hosting:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Ue.createElement(ze._21, {
                                type: ze._26.Span
                            }, Object(Se.d)("Now hosting {channel}", {
                                channel: e.hostedChannel
                            }, "ChatLine")));
                        case mn.a.Unhost:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Ue.createElement(ze._21, {
                                type: ze._26.Span
                            }, Object(Se.d)("No longer hosting.", "ChatLine")));
                        case mn.a.Post:
                        case mn.a.PostWithMention:
                        case mn.a.Action:
                            return se(e) ? Ue.createElement(ii, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e,
                                isDeleted: e.deleted,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }) : null;
                        case mn.a.Ban:
                        case mn.a.Timeout:
                            return this.props.isCurrentUserModerator ? Ue.createElement(ze.U, {
                                className: "chat-line__moderation"
                            }, Object($n.f)(e)) : null;
                        case mn.a.Subscription:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__subscribe"
                            }, Object($n.n)(e));
                        case mn.a.SubGift:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__subscribe"
                            }, Object($n.m)(e));
                        case mn.a.Resubscription:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__subscribe"
                            }, Object($n.i)(e, this.props.showTimestamps, this.props.currentUserDisplayName, this.props.currentUserLogin, this.props.badgeSets));
                        case mn.a.RoomMods:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.j)(e.moderatorLogins));
                        case mn.a.SlowMode:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.k)(e));
                        case mn.a.SubscriberOnlyMode:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.l)(e));
                        case mn.a.FollowerOnlyMode:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.c)(e));
                        case mn.a.Clear:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.a)());
                        case mn.a.Notice:
                            if (re(e)) return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Ue.createElement(mi, {
                                message: e
                            }));
                            if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                case bi.timeout_success:
                                case bi.ban_success:
                                    return null
                            }
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.g)(e));
                        case mn.a.Info:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.d)(e));
                        case mn.a.Purchase:
                            var t = e.message.user.isIntl ? e.message.user.userDisplayName + " (" + e.message.user.userLogin + ")" : e.message.user.userDisplayName;
                            return Ue.createElement(ze.U, {
                                className: "chat-line__message--special"
                            }, Ue.createElement(ze.U, {
                                className: "chat-line__status"
                            }, Object($n.h)(t, e.purchase.purchased.title, e.purchase.numCrates)), Ue.createElement(ii, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e.message,
                                isDeleted: !1,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            }), Ue.createElement(gi, {
                                bitsConfig: e.bitsConfig,
                                purchase: e.purchase
                            }));
                        case mn.a.Raid:
                            return Ue.createElement(pi, {
                                message: e
                            });
                        case mn.a.Unraid:
                            return Ue.createElement(ze.U, {
                                className: "chat-line__raid"
                            }, Object($n.q)());
                        default:
                            return null
                    }
                }, t
            }(Ue.Component),
            ki = n(902),
            yi = n(963),
            Si = (n(965), "pinned-cheer--collapse"),
            _i = /(\d+)$/,
            Ci = Se.i.withCategory("pinned-cheer"),
            Ei = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null
                    }, t.collapseCheer = !0, t.root = null, t.renderedMessage = null, t.recentCheerTimeout = 0, t.saveRenderedMessageRef = function(e) {
                        t.renderedMessage = e
                    }, t.saveRootRef = function(e) {
                        t.root = e
                    }, t.handleHeadlineClick = function() {
                        t.collapseCheer = !t.collapseCheer, t.root && t.root.classList.toggle(Si, t.collapseCheer)
                    }, t.handleProgressExpired = function() {
                        Ci.debug("setTimeout expired, forcing re-render"), t.forceUpdate()
                    }, t.onProgressAnimationEnd = function() {
                        Ci.debug("Animation end event fired")
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.calcRecentCheerExpiry(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.calcRecentCheerExpiry(e)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    var n = this.getDisplayData(this.props, this.state),
                        i = this.getDisplayData(e, t);
                    return (n.displayCheer && n.displayCheer.id) !== (i.displayCheer && i.displayCheer.id)
                }, t.prototype.componentDidUpdate = function() {
                    var e = this.getDisplayData(this.props, this.state),
                        t = e.isRecent,
                        n = e.remainingRecentCheerTime;
                    if (t && (clearTimeout(this.recentCheerTimeout), this.recentCheerTimeout = setTimeout(this.handleProgressExpired, n + 100)), this.renderedMessage) {
                        var i = this.renderedMessage.getElementsByClassName("pinned-cheer__rendered-message-inner");
                        if (i.length) {
                            var a = i[0].getBoundingClientRect(),
                                r = a.height > 42;
                            this.state.cheerIsTall !== r && this.setState({
                                cheerIsTall: r
                            })
                        }
                    }
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.recentCheerTimeout)
                }, t.prototype.render = function() {
                    var e = this.getDisplayData(this.props, this.state),
                        t = e.isRecent,
                        n = e.remainingRecentCheerTime,
                        i = e.displayCheer,
                        a = e.isExpandable;
                    if (!i) return null;
                    for (var r = "", s = 0, o = 0, l = i.messageParts; o < l.length; o++) {
                        var c = l[o];
                        if (c.type === vn.a.Emote && c.content.cheerAmount && c.content.alt) {
                            var u = c.content.alt.replace(_i, "").toLowerCase();
                            s += c.content.cheerAmount, r ? r !== u && (r = "cheer") : r = u
                        }
                    }
                    var d, p = {
                            "pinned-cheer__rendered-message": !0,
                            "pinned-cheer__rendered-message--recent": t,
                            "pinned-cheer__rendered-message--top": !t
                        },
                        m = Ue.createElement(zn.a, {
                            userData: i.user
                        }),
                        h = Ue.createElement("div", {
                            ref: this.saveRenderedMessageRef,
                            className: Be(p)
                        }, Ue.createElement(ze._17, {
                            margin: {
                                x: 2
                            },
                            borderTop: !0
                        }), Ue.createElement(ze.U, {
                            padding: {
                                y: .5
                            },
                            className: "pinned-cheer__rendered-message-inner"
                        }, Ue.createElement(vi, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeData,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isCurrentUserModerator: !1,
                            message: i,
                            showModerationIcons: !1,
                            showTimestamps: !1
                        }))),
                        f = null;
                    if (t) d = Ue.createElement(ze._21, {
                        type: ze._26.Strong
                    }, Object(Se.d)("Recent Cheer", "Bits--PinnedCheer"));
                    else {
                        d = Ue.createElement(ze._21, {
                            type: ze._26.Strong
                        }, Object(Se.d)("Top Cheer by {user}", {
                            user: m
                        }, "Bits--PinnedCheer"), " :");
                        var g = Object($n.e)(Object(Ae.c)(r + s.toString(), this.props.bitsConfig), this.props.currentUserDisplayName, this.props.currentUserLogin);
                        f = Ue.createElement(ze.U, {
                            display: ze.H.Inline,
                            margin: {
                                left: .5
                            }
                        }, g)
                    }
                    var b = (y = {
                            "pinned-cheer__bounding-box": !0
                        }, y[Si] = this.collapseCheer, y),
                        v = {
                            "pinned-cheer__headline": !0,
                            "pinned-cheer__headline--clickable": a
                        },
                        k = null;
                    return t && (k = Ue.createElement(ze.U, {
                        className: "pinned-cheer__progress-bar-placeholder"
                    }, Ue.createElement(ze.U, {
                        className: "pinned-cheer__progress-bar",
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        justifyContent: ze.T.End
                    }, Ue.createElement(ze._5, {
                        key: i.id,
                        countdown: n / 1e3,
                        size: ze._6.ExtraSmall,
                        onCountdownEnd: this.onProgressAnimationEnd
                    })))), Ci.debug("Rendering pinned cheer", {
                        remainingRecentCheerTime: n,
                        isRecent: t,
                        recentCheerExpireTime: this.state.recentCheerExpireTime
                    }), Ue.createElement(ze.U, {
                        className: "pinned-cheer",
                        flexGrow: 0,
                        flexShrink: 0,
                        zIndex: ze._38.Default
                    }, Ue.createElement("div", {
                        className: Be(b),
                        ref: this.saveRootRef
                    }, Ue.createElement(ze.P, {
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row,
                        flexWrap: ze.K.NoWrap
                    }, Ue.createElement("div", {
                        className: Be(v),
                        onClick: a ? this.handleHeadlineClick : void 0
                    }, Ue.createElement(ze.U, {
                        flexGrow: 1,
                        flexShrink: 1,
                        display: ze.H.Flex,
                        alignItems: ze.c.Center
                    }, Ue.createElement(ze._8, {
                        asset: t ? ze._9.HourGlass : ze._9.Trophy,
                        height: 18,
                        width: 18
                    }), Ue.createElement(ze.U, {
                        margin: {
                            left: .5
                        },
                        display: ze.H.Inline
                    }, d), f), Ue.createElement(ze.U, {
                        className: "pinned-cheer__expand-caret",
                        flexShrink: 0,
                        flexGrow: 0,
                        display: ze.H.Flex,
                        justifyContent: ze.T.Between,
                        alignItems: ze.c.Center
                    }, a ? Ue.createElement(ze._8, {
                        asset: ze._9.AngleLeft
                    }) : null))), h, k));
                    var y
                }, t.prototype.calcRecentCheerExpiry = function(e) {
                    var t = e.recentCheer ? e.recentCheer.id : null;
                    e.recentTimeoutMs && this.state.recentCheerID !== t && this.setState({
                        recentCheerID: t,
                        recentCheerExpireTime: t ? Date.now() + e.recentTimeoutMs : null
                    })
                }, t.prototype.getDisplayData = function(e, t) {
                    var n = 0;
                    t.recentCheerExpireTime && (n = Math.max(0, t.recentCheerExpireTime - Date.now()));
                    var i = !!e.recentCheer && !!e.topCheer && e.recentCheer.id === e.topCheer.id,
                        a = !!n && !!e.recentCheer && !i;
                    return {
                        remainingRecentCheerTime: n,
                        isRecent: a,
                        displayCheer: a ? e.recentCheer : e.topCheer,
                        isExpandable: !a || t.cheerIsTall
                    }
                }, t = ke.__decorate([Object(Oe.a)(yi, {
                    props: function(e) {
                        var t, n, i;
                        return e.data && e.data.user && e.data.user.cheer && (i = e.data.user.cheer.recentTimeoutMs, e.data.user.cheer.top && (t = Object(ki.a)(e.data.user.cheer.top, e.ownProps.bitsConfig, e.ownProps.blockLinks)), e.data.user.cheer.recent && (n = Object(ki.a)(e.data.user.cheer.recent, e.ownProps.bitsConfig, e.ownProps.blockLinks))), {
                            topCheer: t,
                            recentCheer: n,
                            recentTimeoutMs: i
                        }
                    },
                    options: function(e) {
                        return {
                            name: "data",
                            fetchPolicy: "network-only",
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }), Object(Gn.a)(function(e) {
                    return {
                        query: yi,
                        variables: {
                            channelID: e.channelID
                        },
                        topic: Object(Ge.a)(e.channelID),
                        type: Ve.c.BitsPinEvent,
                        mutator: function(t, n) {
                            if (n.user.cheer) {
                                var i = JSON.parse(t.msg);
                                if (i.channel_id === e.channelID) return Ci.debug("Received pubsub update", {
                                    hasTopCheer: !!i.top && i.top.has_top_event,
                                    hasNewTopCheer: !n.user.cheer.top || n.user.cheer.top.id !== i.top.tags.msg_id,
                                    hasRecentCheer: !!i.recent && i.recent.has_recent_event,
                                    hasNewRecentCheer: !n.user.cheer.recent || n.user.cheer.recent.id !== i.recent.tags.msg_id
                                }), i.top && i.top.has_top_event ? n.user.cheer.top && n.user.cheer.top.id === i.top.tags.msg_id || (n.user.cheer.top = Object(ki.c)(i.top)) : n.user.cheer.top = null, i.recent && i.recent.has_recent_event ? n.user.cheer.recent && n.user.cheer.recent.id === i.recent.tags.msg_id || (n.user.cheer.recent = Object(ki.c)(i.recent), n.user.cheer.recentTimeoutMs = n.user.cheer.settings.recentTimeoutMs) : n.user.cheer.recent = null, n
                            }
                        }
                    }
                })], t)
            }(Ue.Component),
            Ni = Ei,
            wi = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    return this.props.bitsConfig && (e = Ue.createElement(Ni, {
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelID: this.props.channelID,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin
                    })), e
                }, t
            }(Ue.Component),
            Di = wi,
            Ti = n(39),
            Ii = n(18),
            Ui = n(439),
            Oi = (n(966), function(e) {
                var t = void 0 !== e.progress,
                    n = Ue.createElement("img", {
                        className: "cheer-badge__image",
                        src: e.badge.image1x,
                        alt: e.badge.title,
                        srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                    });
                if (!t) return n;
                var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                return Ue.createElement("div", {
                    className: "cheer-badge__progress-container"
                }, n, Ue.createElement("div", {
                    className: "cheer-badge__progress-overlay",
                    style: {
                        width: i + "px"
                    },
                    "data-test-selector": "cheer-progress"
                }))
            }),
            xi = n(259),
            Mi = function(e) {
                var t;
                e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = Ue.createElement(ze.U, {
                    padding: {
                        bottom: .5
                    }
                }, e.selfBitsBadge.current && Ue.createElement(ze.U, {
                    display: ze.H.Inline,
                    margin: {
                        right: .5
                    }
                }, Ue.createElement(Oi, {
                    badge: e.selfBitsBadge.current
                })), e.selfBitsBadge.next && Ue.createElement(Oi, {
                    badge: e.selfBitsBadge.next,
                    progress: e.selfBitsBadge.progress
                }), e.selfBitsBadge.nextBits && Object(Se.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                    bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                }, "Bits--BalanceFooter")));
                var n = Object(Se.d)("{bitsGem} Log in to see your Bits balance", {
                    bitsGem: Ue.createElement(qe.a, {
                        count: 100,
                        withImage: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: Re.a.Dark
                    })
                }, "Bits--BalanceFooter");
                return void 0 !== e.balance && null !== e.balance && (n = Object(Se.d)("You have {currentBits}", {
                    currentBits: Ue.createElement(qe.a, {
                        count: e.balance,
                        withImage: !0,
                        withText: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: Re.a.Dark
                    })
                }, "Bits--BalanceFooter")), Ue.createElement(ze.U, {
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-balance-footer"
                }, t, Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexGrow: 1,
                    alignItems: ze.c.Center,
                    justifyContent: ze.T.Between
                }, Ue.createElement("div", null, n), Ue.createElement(ze.u, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > xi.i,
                    onClick: e.onClickGetBits,
                    "data-test-selector": "get-bits-button",
                    "data-a-target": "get-bits-button"
                }, Object(Se.d)("Get Bits", "Bits--BalanceFooter"))))
            },
            Ri = function() {
                return Ue.createElement(ze._17, {
                    className: "t-bits-card",
                    display: ze.H.Flex,
                    flexDirection: ze.J.Column,
                    alignItems: ze.c.Center,
                    justifyContent: ze.T.Center,
                    textAlign: ze._22.Center,
                    padding: 1,
                    border: !0,
                    background: ze.m.Base,
                    elevation: 3,
                    fullWidth: !0
                }, Ue.createElement(ze._21, {
                    italic: !0
                }, Object(Se.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
            },
            Pi = n(836),
            Fi = n(844),
            ji = function(e) {
                return Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexGrow: 1,
                    flexDirection: ze.J.Column,
                    justifyContent: ze.T.Center,
                    alignItems: ze.c.Center
                }, Ue.createElement(ze.U, {
                    padding: {
                        top: 2,
                        bottom: 2
                    }
                }, Ue.createElement(ze._21, {
                    type: ze._26.H5,
                    color: ze.F.Link,
                    bold: !0
                }, Object(Se.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), Ue.createElement(ze._21, null, Object(Se.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), Ue.createElement(ze.U, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, Ue.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(Se.d)("How do I cheer?", "Bits--CheermoteIntro"))))
            },
            Ai = n(815),
            Li = function(e) {
                var t = e.headline || e.prefix + (e.tier || "");
                if (e.tournament && e.tier <= 0) {
                    var n = e.tournament.teams.find(function(t) {
                        return t.id === e.prefix
                    });
                    n && (t = n.name + " - " + e.prefix)
                }
                var i = e.tier,
                    a = Ai.c.ImageAndText;
                return e.event && !e.tier && (a = Ai.c.ImageOnly, i = 1), Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexDirection: ze.J.Column,
                    alignItems: ze.c.Center
                }, Ue.createElement(ze._21, {
                    type: ze._26.H4,
                    bold: !0
                }, t), Ue.createElement(Ai.a, {
                    prefix: e.prefix,
                    amount: i,
                    bitsConfig: e.bitsConfig,
                    display: a
                }))
            },
            Bi = (n(967), function(e) {
                var t = null;
                e.minToCheer > 1 && (t = Ue.createElement(ze._21, {
                    color: ze.F.Alt2,
                    italic: !0
                }, Object(Se.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                    minToCheer: e.minToCheer
                }, "Bits--CheermoteTierIntro")));
                var n = null;
                return e.minToPin > 0 && (n = Ue.createElement(ze._21, {
                    color: ze.F.Alt2,
                    italic: !0
                }, Object(Se.d)("Pinning your Cheer is a minimum of {minToPin} Bits", {
                    minToPin: e.minToPin
                }, "Bits--CheermoteTierIntro"))), Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexGrow: 1,
                    flexDirection: ze.J.Column,
                    alignItems: ze.c.Center,
                    justifyContent: ze.T.Center,
                    className: "cheermote-tier-intro"
                }, Ue.createElement(ze.U, {
                    padding: {
                        x: 4
                    },
                    margin: {
                        bottom: 1
                    }
                }, Ue.createElement(ze._21, {
                    color: ze.F.Alt2
                }, Object(Se.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t, n)
            }),
            Hi = n(872),
            Vi = n.n(Hi),
            Wi = n(865),
            Gi = function(e) {
                return Object(Wi.d)({
                    action: Wi.a.View,
                    type: Wi.c.BitsIntro,
                    channelId: e.channelID
                }), Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexGrow: 1,
                    flexDirection: ze.J.Column,
                    justifyContent: ze.T.Center,
                    alignItems: ze.c.Center
                }, Ue.createElement(ze.U, {
                    "data-test-selector": "crate-intro"
                }, Ue.createElement(ze._21, {
                    type: ze._26.H4,
                    bold: !0
                }, Object(Se.d)("The Zombie Apocalypse is Coming!", "Crates--Bits-Intro")), Ue.createElement("figure", {
                    className: "crates-intro-banner"
                }, Ue.createElement("img", {
                    src: Vi.a
                })), Ue.createElement(ze.U, {
                    margin: {
                        y: 1
                    },
                    padding: {
                        x: 1
                    }
                }, Ue.createElement(ze._21, null, Object(Se.d)("For a limited time, Cheer at least {numBits, number} Bits and get a Halloween Crate with one of {numEmotes, number} temporary zombie emotes. Collect all {numEmotes, number} to permanently unlock Zombie Lord Kappa!", {
                    numBits: 250,
                    numEmotes: 6
                }, "Crates--Bits-Intro"), " ", Ue.createElement("a", {
                    href: "https://blog.twitch.tv/bring-the-zombie-apocalypse-to-twitch-7a5bf4ecff42",
                    target: "_blank",
                    rel: "noreferrer noopener"
                }, Object(Se.d)("Learn More", "Crates--Bits-Intro")))), Ue.createElement(ze._21, null, Object(Se.d)("Select a Cheermote to start your Cheer", "Crates--CheermoteIntro"), Ue.createElement("br", null), Ue.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(Se.d)("How do I cheer?", "Crates--CheermoteIntro")))))
            },
            qi = (n(968), function() {
                return Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    className: "hgc-2017-intro"
                }, Ue.createElement(ze.P, {
                    padding: 1,
                    attachTop: !0,
                    attachLeft: !0,
                    position: ze._2.Absolute
                }, Ue.createElement("img", {
                    className: "hgc-cheer__brand-banner",
                    src: xi.g + "/hgc-logo-large.png"
                })), Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    className: "hgc-cheer__cheer-intro",
                    textAlign: ze._22.Center
                }, Ue.createElement(ze._21, {
                    color: ze.F.Alt,
                    type: ze._26.P
                }, Object(Se.d)("Select the logo of the team you want to Cheer for, followed by the number of Bits you want to use and any message you’d like to add.", "HGC2017--CheerIntro"))))
            });
        ! function(e) {
            e.CratesHalloween = "CratesHalloween"
        }(bt || (bt = {}));
        var zi, $i = function(e) {
                return e.event === xi.h ? Ue.createElement(qi, null) : e.event === bt.CratesHalloween ? Ue.createElement(Gi, {
                    onClickHelp: e.onClickHelp,
                    channelID: e.channelID
                }) : Ue.createElement(ji, {
                    onClickHelp: e.onClickHelp
                })
            },
            Ji = n(69),
            Qi = function(e) {
                var t = e.prefixes.map(function(t, n) {
                    if (t.alt && t.cheerAmount) return Ue.createElement(ze.P, {
                        key: n,
                        padding: {
                            x: 1
                        }
                    }, Ue.createElement("li", null, Ue.createElement(Ai.a, {
                        prefix: t.alt,
                        amount: t.cheerAmount,
                        bitsConfig: e.bitsConfig,
                        size: Ai.b.Small
                    })))
                });
                return Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexDirection: ze.J.Row,
                    alignItems: ze.c.End,
                    justifyContent: ze.T.Center,
                    flexWrap: ze.K.Wrap,
                    margin: {
                        top: 1
                    },
                    className: "pending-cheer-list"
                }, t)
            },
            Ki = (n(969), function(e) {
                var t;
                if (e.prefixes && 1 === e.prefixes.length) {
                    var n = e.prefixes[0].alt;
                    n && (t = Ue.createElement(ze.U, {
                        padding: {
                            top: 2
                        }
                    }, Ue.createElement(Ai.a, {
                        prefix: n,
                        amount: e.amount,
                        bitsConfig: e.bitsConfig
                    })))
                } else if (e.prefixes) t = Ue.createElement(ze.U, {
                    margin: {
                        top: 1
                    }
                }, Ue.createElement(Ji.b, {
                    className: "pending-cheer__scroll-container"
                }, Ue.createElement(Qi, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = Object(Se.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                        totalBits: Ue.createElement("strong", null, e.amount),
                        channelName: e.channelDisplayName
                    }, "Bits--PendingCheer");
                    t = Ue.createElement(ze.U, {
                        padding: {
                            top: 2,
                            x: 5
                        }
                    }, Ue.createElement(ze._21, {
                        color: ze.F.Alt2,
                        "data-a-target": "total-bits-message"
                    }, i))
                }
                var a = null;
                e.purchaseMore && e.purchaseMore > 0 && (a = Ue.createElement(ze._21, {
                    "data-a-target": "need-more-bits-error"
                }, Object(Se.d)("Please purchase {neededBits} more Bits to Cheer", {
                    neededBits: e.purchaseMore
                }, "Bits--PendingCheer")));
                var r = null;
                if (e.largestCheermote > xi.k) {
                    var s = Object(Se.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                        maximumCheerSize: xi.k
                    }, "Bits--PendingCheer");
                    a = Ue.createElement(ze._21, {
                        "data-a-target": "max-cheer-bits-error"
                    }, s)
                }
                if (e.amount < e.minToCheer) {
                    var o = Object(Se.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                        moreBitsAmount: e.minToCheer - e.amount
                    }, "Bits--PendingCheer");
                    a = Ue.createElement(ze._21, {
                        "data-a-target": "min-cheer-bits-error"
                    }, o)
                }
                if (e.smallestCheermote < e.minPerEmote) {
                    var l = Object(Se.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                        minPerEmote: e.minPerEmote
                    }, "Bits--PendingCheer");
                    r = Ue.createElement(ze._21, {
                        color: ze.F.Alt2,
                        italic: !0,
                        "data-a-target": "min-emote-bits-error"
                    }, l)
                }
                var c = Ue.createElement(Ai.a, {
                    amount: e.amount,
                    prefix: "",
                    bitsConfig: e.bitsConfig,
                    display: Ai.c.InlineTextOnly,
                    size: Ai.b.Medium
                });
                return Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexDirection: ze.J.Column,
                    alignItems: ze.c.Center,
                    className: "pending-cheer"
                }, Ue.createElement(ze._21, {
                    fontSize: ze.L.Size4,
                    bold: !0
                }, Object(Se.d)("Cheering {totalBits} Bits", {
                    totalBits: c
                }, "Bits--PendingCheer")), !r && t, !r && a && Ue.createElement(ze.U, {
                    padding: {
                        top: 1
                    }
                }, a), r && Ue.createElement(ze.U, {
                    padding: {
                        top: 3,
                        x: 3
                    }
                }, r))
            }),
            Yi = n(373),
            Xi = (n(970), {
                themed: !0,
                dark: {
                    "1x": xi.a + "/dark/animated/promo/intro.gif"
                },
                light: {
                    "1x": xi.a + "/light/animated/promo/intro.gif"
                }
            }),
            Zi = function() {
                return Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexDirection: ze.J.Column,
                    alignItems: ze.c.Center,
                    justifyContent: ze.T.Center,
                    flexGrow: 1,
                    className: "bits-sending"
                }, Ue.createElement(ze.U, {
                    padding: {
                        bottom: 1
                    }
                }, Ue.createElement(Yi.a, {
                    sources: Xi
                })), Ue.createElement(ze._21, {
                    italic: !0
                }, Object(Se.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
            },
            ea = (n(971), function(e) {
                var t = Object(Se.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                        totalBits: e.totalBits,
                        channelName: e.channelDisplayName
                    }, "Bits--UndoPrompt"),
                    n = null;
                if (e.prefixes && e.prefixes.length > 1) n = Ue.createElement(Ji.b, {
                    className: "bits-undo-prompt__scroll-container"
                }, Ue.createElement(ze.U, {
                    margin: {
                        top: 1
                    }
                }, Ue.createElement(Qi, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = e.prefixes[0].alt;
                    i && (n = Ue.createElement(ze.U, {
                        padding: {
                            bottom: 1
                        }
                    }, Ue.createElement(Ai.a, {
                        prefix: i,
                        amount: e.totalBits,
                        bitsConfig: e.bitsConfig
                    })))
                }
                return Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexDirection: ze.J.Column,
                    alignItems: ze.c.Center,
                    justifyContent: ze.T.Center,
                    flexGrow: 1,
                    className: "bits-undo-prompt"
                }, n, Ue.createElement(ze._21, null, t))
            }),
            ta = function(e) {
                var t = Se.b.get("crate_trickster_launch", Pi.a.Off);
                if (e.isSending) return e.totalBits < xi.l ? Ue.createElement(Zi, null) : Ue.createElement(ea, {
                    bitsConfig: e.bitsConfig,
                    channelDisplayName: e.displayName,
                    prefixes: e.currentCheers,
                    totalBits: e.totalBits
                });
                if (e.hoveredCheermote) return Ue.createElement(Li, {
                    event: e.event,
                    tournament: e.tournament,
                    bitsConfig: e.bitsConfig,
                    prefix: e.hoveredCheermote,
                    tier: e.hoveredTier
                });
                if (e.totalBits) return Ue.createElement(Ki, {
                    bitsConfig: e.bitsConfig,
                    prefixes: e.currentCheers,
                    amount: e.totalBits,
                    channelDisplayName: e.displayName,
                    purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                    largestCheermote: e.largestCheermote,
                    smallestCheermote: e.smallestCheermote,
                    minPerEmote: e.emoteMinimumBits,
                    minToCheer: e.cheerMinimumBits,
                    event: e.event
                });
                if (e.helpRequested) return Ue.createElement(Fi.a, null);
                if (e.chosenCheermote) {
                    var n = e.recentMinimumBits,
                        i = e.cheerMinimumBits;
                    return Ue.createElement(Bi, {
                        minToPin: n,
                        minToCheer: i
                    })
                }
                if (e.event || t === Pi.a.On) {
                    var a = e.event || bt.CratesHalloween;
                    return Ue.createElement($i, {
                        event: a,
                        onClickHelp: e.showHelp,
                        channelID: e.channelID
                    })
                }
                return Ue.createElement(ji, {
                    onClickHelp: e.showHelp
                })
            },
            na = n(838),
            ia = (n(972), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        startingIndex: 0
                    }, t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (this.props.hide) return null;
                    var t = this.props.cheermotes,
                        n = t.map(function(t, n) {
                            if (!t) return Ue.createElement("li", {
                                key: "null-cheermote-" + n
                            }, Ue.createElement("button", {
                                className: "cheermote-list__item-button",
                                disabled: !0
                            }, Ue.createElement("div", {
                                className: "cheermote-list__placeholder"
                            })));
                            var i = "";
                            t.key && (i = t.key.replace(":", ""));
                            var a = null;
                            e.props.showCheermoteAmount && t.key && (a = Ue.createElement(Ai.a, {
                                bitsConfig: e.props.bitsConfig,
                                prefix: "",
                                amount: +t.key.split(":")[1],
                                display: Ai.c.TextOnly,
                                size: Ai.b.Small
                            }));
                            var r = Ue.createElement("li", {
                                key: t.key,
                                className: "cheermote-list__cheermote"
                            }, Ue.createElement("button", {
                                className: "cheermote-list__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + i
                            }, Ue.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })), a);
                            return e.props.showCheermoteAmount ? r : Ue.createElement(ze.P, {
                                key: t.key,
                                margin: {
                                    bottom: 1
                                }
                            }, r)
                        }),
                        i = null;
                    this.props.showCheermoteAmount && (i = Ue.createElement(ze.U, {
                        padding: {
                            right: 2
                        },
                        fullWidth: !0,
                        className: "cheermote-list__back-button"
                    }, Ue.createElement(ze.u, {
                        "data-a-target": "bits-card-back-button",
                        type: ze.z.Text,
                        fullWidth: !0,
                        onClick: this.props.onClose
                    }, Object(Se.d)("Show All Cheermotes", "CheermoteCarousel"))));
                    var a = Ue.createElement(ze.P, {
                            className: "cheermote-list__cheermotes",
                            display: ze.H.Flex,
                            flexWrap: ze.K.Wrap,
                            flexDirection: ze.J.Row,
                            justifyContent: this.props.showCheermoteAmount ? ze.T.Between : ze.T.Start,
                            alignItems: ze.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, Ue.createElement("ul", null, n, i)),
                        r = Be("cheermote-list", {
                            "cheermote-list__tier-selection": this.props.showCheermoteAmount
                        }, {
                            "cheermote-list__cheermote-selection": !this.props.showCheermoteAmount
                        });
                    return this.props.showCheermoteAmount ? Ue.createElement(ze.U, {
                        flexGrow: 1,
                        overflow: ze.Y.Hidden,
                        className: r
                    }, a) : Ue.createElement(ze.U, {
                        flexGrow: 1,
                        overflow: ze.Y.Hidden,
                        className: r
                    }, Ue.createElement(Ji.b, null, a))
                }, t
            }(Ue.Component)),
            aa = Object(Te.a)(oe)(ia),
            ra = n(129),
            sa = (n(973), function(e) {
                return Ue.createElement(ze.U, {
                    flexGrow: 1,
                    padding: 1
                }, Ue.createElement(ze.U, {
                    display: ze.H.Flex,
                    flexGrow: 1,
                    alignItems: ze.c.Center,
                    justifyContent: ze.T.Between
                }, Ue.createElement(qe.a, {
                    count: e.balance || 0,
                    withImage: !0,
                    withText: !0,
                    bitsConfig: e.bitsConfig,
                    themeOverride: Re.a.Dark
                }), Ue.createElement(ze.P, {
                    display: ze.H.Flex,
                    alignItems: ze.c.Center
                }, Ue.createElement("a", {
                    href: Object(ra.a)("/blizzheroes/esports/hgc-2017")
                }, Ue.createElement(ze.P, {
                    margin: {
                        right: .5
                    }
                }, Ue.createElement("img", {
                    src: xi.g + "/nexus-icon/1x.png",
                    className: "hgc-inventory-footer__nexus-icon"
                })), Ue.createElement("span", {
                    className: "hgc-inventory-footer__progress-link"
                }, Object(Se.d)("Check Progress!", "HGC2017--FooterCheckProgress")))), Ue.createElement(ze.u, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > xi.i,
                    onClick: e.onClickGetBits
                }, Object(Se.d)("Get Bits", "HGC2017--BalanceFooter"))))
            }),
            oa = function(e) {
                return e.event === xi.h ? Ue.createElement(sa, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance
                }) : Ue.createElement(Mi, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance,
                    selfBitsBadge: e.selfBitsBadge
                })
            },
            la = function(e) {
                return Ue.createElement(ze.U, {
                    flexGrow: 1
                }, Ue.createElement(ze.U, {
                    className: "undo-prompt__footer",
                    padding: 1,
                    display: ze.H.Flex,
                    justifyContent: ze.T.Between
                }, Ue.createElement(ze.u, {
                    onClick: e.onCancel || void 0,
                    type: ze.z.Hollow,
                    overlay: !0,
                    "data-test-selector": "cancel-button"
                }, Object(Se.d)("Cancel", "Bits--UndoPrompt")), Ue.createElement(ze.u, {
                    onClick: e.onConfirm || void 0,
                    "data-test-selector": "confirm-button"
                }, Object(Se.d)("Send", "Bits--UndoPrompt"))), Ue.createElement(ze._5, {
                    size: ze._6.ExtraSmall,
                    countdown: xi.m.UNDO_PROMPT_DURATION / 1e3
                }))
            },
            ca = n(813),
            ua = n(806),
            da = n(974),
            pa = (n(975), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        chosenCheermote: null,
                        hoveredCheermote: null,
                        hoveredTier: 0,
                        helpRequested: !1,
                        totalBits: 0,
                        largestCheermote: 0,
                        smallestCheermote: 0,
                        buyingBits: !1
                    }, t.unhoverTimeout = 0, t.lastRefetchTime = 0, t.handleTierHover = function(e) {
                        clearTimeout(t.unhoverTimeout);
                        var n = e.split(":");
                        n.length < 2 || (t.setState({
                            hoveredTier: +n[1],
                            hoveredCheermote: n[0]
                        }), t.props.trackBitsCardInteraction(ua.a.PreviewEmote, {
                            emoteType: n[0],
                            emoteLevel: +n[1]
                        }))
                    }, t.handleUnhover = function() {
                        t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                    }, t.clearHovered = function() {
                        t.setState({
                            hoveredTier: 0,
                            hoveredCheermote: null
                        })
                    }, t.handleTierClick = function(e) {
                        t.props.onClickCheermote(e.split(":").join(""))
                    }, t.handleCheermoteHover = function(e) {
                        clearTimeout(t.unhoverTimeout), t.setState({
                            hoveredCheermote: e,
                            hoveredTier: 0
                        }), t.props.trackBitsCardInteraction(ua.a.PreviewEmote, {
                            emoteType: e,
                            emoteLevel: 100
                        })
                    }, t.handleCheermoteClick = function(e) {
                        t.setState({
                            chosenCheermote: e,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.clearChosenCheermote = function() {
                        t.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.showHelp = function(e) {
                        e.preventDefault(), t.setState({
                            helpRequested: !0
                        })
                    }, t.closeHelp = function() {
                        return t.setState({
                            helpRequested: !1
                        })
                    }, t.handleClickBuy = function() {
                        t.setState({
                            buyingBits: !0
                        }), t.props.trackBitsCardInteraction(ua.a.BuyMain)
                    }, t.handleCloseBuy = function() {
                        return t.setState({
                            buyingBits: !1
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.visible || !!this.props.currentCheers.length,
                        n = e.visible || !!e.currentCheers.length;
                    if (!t && n) {
                        var i = Date.now();
                        i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                    }
                    if (t && !n && this.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            buyingBits: !1
                        }), this.props.currentCheers !== e.currentCheers) {
                        var a = Object(ca.a)(e.currentCheers),
                            r = a.total,
                            s = a.largestCheermote,
                            o = a.smallestCheermote;
                        this.setState({
                            totalBits: r,
                            largestCheermote: s,
                            smallestCheermote: o
                        })
                    }
                }, t.prototype.render = function() {
                    var e = this;
                    if (!this.props.visible && !this.props.currentCheers.length) return null;
                    var t, n = {
                        border: !0,
                        background: ze.m.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    if (this.props.currentCheers.length || (t = Ue.createElement("button", {
                            className: "t-bits-card__close t-bits-card__top-controls",
                            onClick: this.props.onUserClose,
                            "data-test-selector": "cancel-button",
                            "data-a-target": "bits-card-close-button"
                        }, Ue.createElement(ze._8, {
                            asset: ze._9.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return Ue.createElement(ze._17, ke.__assign({
                        className: "t-bits-card",
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        alignItems: ze.c.Center,
                        justifyContent: ze.T.Center
                    }, n), Ue.createElement(ze.X, {
                        delay: 0
                    }), Ue.createElement(ze.U, {
                        padding: {
                            top: 2
                        }
                    }, Ue.createElement(ze._21, {
                        italic: !0
                    }, Object(Se.d)("Fetching Bits", "BitsCard"))));
                    if (this.props.data.error || !this.props.bitsConfig) return Ue.createElement(Ri, null);
                    if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return Ue.createElement(ze._17, ke.__assign({
                        className: "t-bits-card",
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        alignItems: ze.c.Center,
                        justifyContent: ze.T.Center,
                        textAlign: ze._22.Center,
                        padding: 1
                    }, n), t, Ue.createElement(ze._21, {
                        color: ze.F.Error,
                        italic: !0
                    }, Object(Se.d)("You cannot Cheer in your own channel.", "BitsCard")));
                    if (this.state.buyingBits) return Ue.createElement(na.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.props.onUserClose,
                        onClose: this.handleCloseBuy,
                        trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                        location: ua.b.ChatTooltip
                    });
                    var i = null,
                        a = this.state.helpRequested && !this.props.currentCheers.length,
                        r = null;
                    if (this.props.data.user.cheer.settings.event && (r = this.props.data.user.cheer.settings.event.toLowerCase().replace("_", "-")), this.state.chosenCheermote) {
                        var s = this.props.bitsConfig.indexedActions[this.state.chosenCheermote.toLowerCase()];
                        if (s) {
                            var o = s.orderedTiers.map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: s.prefix + ":" + e.bits
                                }
                            }).reverse();
                            i = Ue.createElement(aa, {
                                bitsConfig: this.props.bitsConfig,
                                hide: a,
                                cheermotes: o,
                                showCheermoteAmount: !0,
                                event: r,
                                onHover: this.handleTierHover,
                                onHoverLeave: this.handleUnhover,
                                onClick: this.handleTierClick,
                                onClose: this.clearChosenCheermote
                            })
                        }
                    }
                    if (!i) {
                        var o = this.props.bitsConfig.orderedActions.filter(function(e) {
                            return e.type !== xi.c
                        }).map(function(t) {
                            var n = xi.f;
                            e.props.data && e.props.data.user.cheer.settings.event && (n = 1);
                            var i = t.indexedTiers.get(n);
                            return i ? {
                                imgSrc: i.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: i.indexedImages.DARK.static.get(2),
                                key: t.prefix
                            } : null
                        });
                        i = Ue.createElement(aa, {
                            bitsConfig: this.props.bitsConfig,
                            hide: a,
                            cheermotes: o,
                            event: r,
                            onHover: this.handleCheermoteHover,
                            onHoverLeave: this.handleUnhover,
                            onClick: this.handleCheermoteClick
                        })
                    }
                    var l = null;
                    this.props.isSending ? this.state.totalBits >= xi.l && (l = Ue.createElement(la, {
                        onCancel: this.props.onCancelSend,
                        onConfirm: this.props.onConfirmSend
                    })) : l = r ? Ue.createElement(oa, {
                        event: r,
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    }) : Ue.createElement(Mi, {
                        selfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.handleClickBuy,
                        balance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance
                    });
                    var c;
                    a && (c = Ue.createElement("button", {
                        className: "t-bits-card__go-back t-bits-card__top-controls",
                        onClick: this.closeHelp,
                        "data-a-target": "bits-card-back-button"
                    }, Ue.createElement(ze._8, {
                        asset: ze._9.Play,
                        height: 8
                    }), " ", Object(Se.d)("Back", "BitsCard")));
                    var u = Be("t-bits-card", {
                        "t-bits-card--tall": !this.props.isSending
                    });
                    return Ue.createElement(ze._17, ke.__assign({
                        className: u,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        "data-a-target": "bits-card"
                    }, n), !this.props.isSending && c, t, Ue.createElement(ze._17, {
                        className: "t-bits-card__contents",
                        display: ze.H.Flex,
                        flexGrow: 0,
                        flexDirection: ze.J.Column,
                        alignContent: ze.b.Stretch,
                        padding: {
                            top: 1
                        },
                        borderBottom: !this.props.isSending
                    }, Ue.createElement(ta, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        displayName: this.props.data.user.displayName,
                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                        event: r,
                        helpRequested: this.state.helpRequested,
                        hoveredCheermote: this.state.hoveredCheermote,
                        hoveredTier: this.state.hoveredTier,
                        isSending: this.props.isSending,
                        largestCheermote: this.state.largestCheermote,
                        recentMinimumBits: this.props.data.user.cheer.settings.recentMinimumBits,
                        smallestCheermote: this.state.smallestCheermote,
                        totalBits: this.state.totalBits,
                        tournament: this.props.data.user.tournament,
                        channelID: this.props.channelID,
                        showHelp: this.showHelp
                    })), !this.props.isSending && i, l && Ue.createElement(ze.U, {
                        className: "t-bits-card__footer",
                        display: ze.H.Flex
                    }, l))
                }, t = ke.__decorate([Object(Oe.a)(da, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                })], t)
            }(Ue.Component)),
            ma = pa,
            ha = n(885),
            fa = n(49),
            ga = n(134),
            ba = n(382),
            va = 5,
            ka = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = ga.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var i = t ? e : e.substring(1),
                            a = new RegExp("^" + i, "i");
                        return n.state.sortedChatMembers.filter(function(e) {
                            return a.test(e.userLogin) || a.test(e.userDisplayName)
                        }).slice(0, va).map(function(i) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + i.userDisplayName,
                                element: n.renderMention(i)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return Ue.createElement("span", null, Object(fa.a)(e.userLogin, e.userDisplayName))
                    }, n.sortChatMembers = function(e) {
                        var t = [ke.__assign({}, Object(ba.a)(e.channelDisplayName, e.channelLogin), {
                                userID: e.channelID,
                                userLogin: e.channelLogin,
                                userType: Nn.a.Owner
                            })],
                            n = e.chatMembers;
                        return n.sort(function(e, t) {
                            return e.userLogin < t.userLogin ? -1 : e.userLogin > t.userLogin ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedChatMembers: n.sortChatMembers(t)
                    }, n
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.chatMembers === e.chatMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin && this.props.channelID === e.channelID || this.setState({
                        sortedChatMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: Ue.PropTypes.func
                }, t
            }(Ue.Component),
            ya = function() {
                return Ue.createElement(ze.p, {
                    direction: ze.q.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, Ue.createElement(ze.U, {
                    padding: 1,
                    "data-test-selector": "raids-settings-tooltip"
                }, Object(Se.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
            },
            Sa = {
                Embed: "embed",
                Web: "web"
            },
            _a = n(976),
            Ca = this,
            Ea = function(e) {
                return ke.__awaiter(Ca, void 0, void 0, function() {
                    var t, n;
                    return ke.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return [4, Se.n.apollo.client.query({
                                    query: _a,
                                    variables: {
                                        id: e.channelID
                                    }
                                })];
                            case 1:
                                return t = i.sent(), t.data || Se.i.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), n = ke.__assign({}, Object(xn.a)(e), {
                                    broadcast_id: Se.m.getVideoPlayerTrackingData().broadcastID,
                                    channel_id: e.channelID,
                                    game: t.data && t.data.user.stream && t.data.user.stream.game && t.data.user.stream.game.name,
                                    live: !!(t.data && t.data.user.stream && t.data.user.stream.id.length > 0),
                                    partner: t.data && t.data.user.isPartner,
                                    play_session_id: Se.m.getVideoPlayerTrackingData().playSessionID,
                                    player: e.player,
                                    sub_only_mode: e.subOnlyMode
                                }), Se.m.track(Vt.SpadeEventType.Chat, n), [2]
                        }
                    })
                })
            },
            Na = function(e) {
                var t = ke.__assign({}, Object(xn.a)(e), {
                    mentioned_user_display_name: e.mentionedUserDisplayName,
                    user: e.userLogin
                });
                Se.m.track(Vt.SpadeEventType.ChatMentionUsed, t)
            },
            wa = n(849),
            Da = n(383),
            Ta = n(977),
            Ia = n(978),
            Ua = /\S/,
            Oa = 3;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(zi || (zi = {}));
        var xa, Ma, Ra = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.onChatSettingsToggle = function(e) {
                        n.handleRaidReportingToggle(e), e || Object(wa.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode
                        })
                    }, n.handleRaidReportingToggle = function(e) {
                        n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                            showRaidsSettingsTooltip: !1
                        }), Se.k.set("raidsModerationTooltipsSeenNumTimes", Oa)), e && n.setState({
                            showRaidsFollowerOnlyTooltip: !1
                        }))
                    }, n.onKeyDown = function(e) {
                        var t = e.charCode || e.keyCode;
                        switch (n.props.onKeyDown && t !== Ti.a.Enter && n.props.onKeyDown(e), t) {
                            case Ti.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                            case Ti.a.Esc:
                                return void(n.state.showCard === zi.Bits && n.setState({
                                    showCard: zi.None
                                }));
                            case Ti.a.Tab:
                                return void e.preventDefault();
                            default:
                                return
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            value: e
                        })
                    }, n.onInputFocus = function() {
                        n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onMouseEnterInput = function() {
                        n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onChatCommand = function(e) {
                        n.props.onChatCommand(e), n.trackChatEvent()
                    }, n.confirmEmbedAction = function(e, t, i) {
                        var a = n,
                            r = a.hasConfirmedInEmbed;
                        if (a.hasSeenConfirmationPrompt) return r;
                        var s = window.confirm(n.confirmationMessage(e, t, i));
                        return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = s, s
                    }, n.confirmationMessage = function(e, t, n) {
                        return Object(Se.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                            displayName: e,
                            message: t,
                            channelLogin: n
                        }, "ChatInput")
                    }, n.onMessageSend = function() {
                        return ke.__awaiter(n, void 0, void 0, function() {
                            var e, t, n, i, a, r, s = this;
                            return ke.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        return this.props.authToken ? this.props.channelID ? (e = Ua.test(this.state.value)) ? this.state.isSendingBits ? (Se.i.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (Se.i.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : this.props.data && this.props.data.currentUser ? (t = Object(ca.a)(this.state.messageCheers), 0 === t.total ? (this.sendRegularMessage(), [2]) : this.props.data.user ? this.props.data.user.cheer ? (n = Object(ca.f)({
                                            messageBits: t,
                                            balance: this.props.data.currentUser.bitsBalance,
                                            cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                                            emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                                            inputValue: this.state.value
                                        }), n.canSpend ? this.props.sendCheer ? (this.setState({
                                            isSendingBits: !0
                                        }), t.total >= xi.l ? [4, new Promise(function(e) {
                                            var t = setTimeout(e, xi.m.UNDO_PROMPT_DURATION),
                                                n = function(n) {
                                                    void 0 === n && (n = !1), clearTimeout(t), s.cancelDelayedSend = null, s.confirmDelayedSend = null, e(n)
                                                };
                                            s.cancelDelayedSend = function() {
                                                return n(!0)
                                            }, s.confirmDelayedSend = function() {
                                                return n(!1)
                                            }
                                        })] : [3, 2]) : (Se.i.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (Se.i.warn("[Chat Input] Spending bits forbidden.", n), [2])) : (Se.i.warn("[Chat Input] Cheer is null."), [2]) : (Se.i.warn("[Chat Input] User is null."), [2])) : (this.sendRegularMessage(), [2]) : (Se.i.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                            hasSendableInput: e,
                                            value: this.state.value
                                        }), [2]) : (Se.i.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                    case 1:
                                        if (i = o.sent()) return this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                        o.label = 2;
                                    case 2:
                                        a = Object(Ii.a)(), o.label = 3;
                                    case 3:
                                        return o.trys.push([3, 5, , 6]), [4, this.props.sendCheer({
                                            variables: {
                                                input: {
                                                    id: a,
                                                    targetID: this.props.channelID,
                                                    bits: t.total,
                                                    content: this.state.value
                                                }
                                            }
                                        })];
                                    case 4:
                                        return o.sent(), [3, 6];
                                    case 5:
                                        return r = o.sent(), this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                    case 6:
                                        return this.setState({
                                            isSendingBits: !1,
                                            showCard: zi.None,
                                            value: ""
                                        }), this.chatInputRef.focus(), this.autocompleteInputRef.setValue(""), [2]
                                }
                            })
                        })
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            if (!e.messageCheers.length) return {
                                showCard: e.showCard === zi.Emotes ? zi.None : zi.Emotes
                            }
                        })
                    }, n.onBitsIconClick = function() {
                        n.state.showCard === zi.Bits ? n.trackBitsCardInteraction(ua.a.CloseCard) : n.trackBitsCardInteraction(ua.a.OpenCard), n.setState({
                            showCard: n.state.showCard === zi.Bits ? zi.None : zi.Bits
                        })
                    }, n.onShowViewersList = function() {
                        n.state.showCard !== zi.None && n.setState({
                            showCard: zi.None
                        }), n.props.showViewersList()
                    }, n.onBitsClose = function() {
                        n.state.showCard === zi.Bits && n.setState({
                            showCard: zi.None
                        }), n.trackBitsCardInteraction(ua.a.CloseCard)
                    }, n.onClickEmote = function(e) {
                        var t = n.state.value;
                        n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef.setValue(t)
                    }, n.onEmotePickerDataLoaded = function(e) {
                        e && n.setState({
                            showEmotePickerButton: !0
                        })
                    }, n.trackBitsCardInteraction = function(e, t) {
                        var i = {
                            actionName: e,
                            emoteType: t && t.emoteType,
                            emoteLevel: t && t.emoteLevel,
                            location: t && t.location,
                            displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                        };
                        Object(ua.h)(i)
                    }, n.state = {
                        hasInteractedOrPageload: t.firstPageLoaded,
                        isSendingBits: !1,
                        messageCheers: [],
                        showBuyBits: !1,
                        showCard: zi.None,
                        showEmotePickerButton: !!t.authToken,
                        showRaidsSettingsTooltip: !1,
                        showRaidsFollowerOnlyTooltip: !1,
                        value: ""
                    }, n
                }
                return ke.__extends(t, e), t.prototype.componentWillUpdate = function(e, t) {
                    var n = this;
                    if (t.value !== this.state.value && this.props.bitsConfig) {
                        var i = [];
                        Object(Ae.c)(t.value, this.props.bitsConfig).forEach(function(e) {
                            e.type === vn.a.Emote && i.push(e.content)
                        }), i.length && t.showCard === zi.Emotes && this.setState({
                            showCard: zi.None
                        }), this.setState({
                            messageCheers: i
                        })
                    }
                    this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && (Se.k.get("raidsModerationTooltipsSeenNumTimes", 0), Number(Se.k.get("raidsModerationTooltipsSeenNumTimes", 0)) < Oa && this.setState({
                        showRaidsSettingsTooltip: !0,
                        showRaidsFollowerOnlyTooltip: !0
                    }, function() {
                        setTimeout(function() {
                            Se.k.set("raidsModerationTooltipsSeenNumTimes", Se.k.get("raidsModerationTooltipsSeenNumTimes", 0) + 1), n.setState({
                                showRaidsSettingsTooltip: !1
                            })
                        }, 2e4)
                    }))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.firstPageLoaded && e.firstPageLoaded && this.setState({
                        hasInteractedOrPageload: !0
                    })
                }, t.prototype.render = function() {
                    var e = [];
                    this.props.bitsConfig && e.push(Ue.createElement(ze.v, {
                        key: "bits",
                        icon: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.event ? ze._9.HGCNexus : ze._9.Bits,
                        ariaLabel: Object(Se.d)("Bits", "ChatInput"),
                        type: ze.w.Secondary,
                        onClick: this.onBitsIconClick,
                        "data-a-target": "bits-button"
                    })), this.state.showEmotePickerButton && e.push(Ue.createElement(Da.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle
                    }));
                    var t = null;
                    this.state.hasInteractedOrPageload && (t = Ue.createElement(Da.c, {
                        channelOwnerID: this.props.channelID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === zi.Emotes
                    }));
                    var n = null;
                    return this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = Ue.createElement(ma, {
                        bitsConfig: this.props.bitsConfig,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentCheers: this.state.messageCheers,
                        isSending: this.state.isSendingBits,
                        onCancelSend: this.cancelDelayedSend,
                        onClickCheermote: this.onClickEmote,
                        onConfirmSend: this.confirmDelayedSend,
                        onUserClose: this.onBitsClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        visible: this.state.showCard === zi.Bits
                    })), Ue.createElement(ze.U, {
                        className: "chat-input",
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, Ue.createElement(ze.P, {
                        position: ze._2.Relative,
                        zIndex: ze._38.Above
                    }, Ue.createElement("div", {
                        onMouseEnter: this.onMouseEnterInput
                    }, t, n, Ue.createElement(Ui.b, {
                        componentType: Ui.a.TextArea,
                        suggestionSource: Ui.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onFocus: this.onInputFocus,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        paddingRight: 30 * e.length,
                        placeholder: Object(Se.d)("Send a message", "ChatInput"),
                        noResize: !0,
                        "data-a-target": "chat-input",
                        "data-test-selector": "chat-input",
                        disabled: this.state.isSendingBits
                    }, Ue.createElement(Ui.d, {
                        emotes: this.props.emotes
                    }), Ue.createElement(ka, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        chatMembers: this.props.chatMembers
                    })), Ue.createElement(ze.U, {
                        position: ze._2.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e))), Ue.createElement(ze.U, {
                        className: "chat-input__buttons-container",
                        display: ze.H.Flex,
                        justifyContent: ze.T.Between,
                        margin: {
                            top: 1
                        }
                    }, Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row
                    }, Ue.createElement(ze.U, {
                        position: ze._2.Relative
                    }, Ue.createElement(ha.a, {
                        disabled: this.props.isEmbedded,
                        onToggle: this.onChatSettingsToggle,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        authToken: this.props.authToken,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onChatCommand: this.onChatCommand,
                        isPopout: this.props.isPopout,
                        channelID: this.props.channelID,
                        sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip
                    }), this.state.showRaidsSettingsTooltip ? Ue.createElement(ya, null) : null), Ue.createElement(ze.v, {
                        ariaLabel: Object(Se.d)("Viewer list", "ChatInput"),
                        "data-a-target": "chat-viewer-list",
                        "data-test-selector": "chat-viewer-list",
                        icon: ze._9.ViewerList,
                        onClick: this.onShowViewersList
                    })), this.renderSendButton()))
                }, t.prototype.renderSendButton = function() {
                    var e;
                    return e = this.state.value && null !== Object(Lt.o)(this.state.value) ? Object(Se.d)("Whisper", "ChatInput") : Object(Se.d)("Chat", "ChatInput"), Ue.createElement(ze.u, {
                        onClick: this.onMessageSend,
                        "data-a-target": "chat-send-button",
                        "data-test-selector": "chat-send-button",
                        disabled: this.state.isSendingBits
                    }, e)
                }, t.prototype.sendRegularMessage = function() {
                    this.props.onSendMessage && this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef.setValue(""), this.setState({
                        showCard: zi.None
                    }))
                }, t.prototype.trackChatEvent = function() {
                    Ea({
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        player: this.props.isPopout ? Sa.Embed : Sa.Web,
                        subOnlyMode: this.props.isSubsOnlyModeEnabled
                    })
                }, t.prototype.trackMentions = function() {
                    if (!this.state.value || !this.props.sessionUser) return void Se.i.warn("[ChatInput] trackMentions was called in a nonsensical state.");
                    for (var e = Object(wn.c)(this.state.value, this.props.sessionUser.displayName, !1), t = 0, n = e; t < n.length; t++) {
                        var i = n[t];
                        i.type === vn.a.Mention && i.content.recipient !== i.content.sender && Na({
                            channelLogin: this.props.channelLogin,
                            isHostMode: this.props.isHostMode,
                            mentionedUserDisplayName: i.content.recipient,
                            userLogin: this.props.sessionUser.login
                        })
                    }
                }, t
            }(Ue.Component),
            Pa = Object(xe.compose)(Object(Oe.a)(Ia, {
                name: "sendCheer"
            }), Object(Oe.a)(Ta), Object(ht.c)("ChatInput", {
                autoReportInteractive: !0
            }), Object(Te.a)(le, ce))(Ra),
            Fa = n(848),
            ja = function(e) {
                var t = e.data.twitch_metadata.clip_metadata,
                    n = {
                        clip: {
                            slug: t.slug,
                            id: t.id,
                            url: e.data.request_url,
                            title: e.data.title,
                            thumbnailURL: e.data.thumbnail_url,
                            curator: {
                                displayName: e.data.author_name,
                                __typename: "User"
                            },
                            broadcaster: {
                                displayName: t.channel_display_name,
                                __typename: "User"
                            },
                            game: null,
                            __typename: "Clip"
                        }
                    };
                return t.game && (n.clip.game = {
                    displayName: t.game,
                    __typename: "Game"
                }), n
            },
            Aa = n(28),
            La = (n(979), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            Ba = 10,
            Ha = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        if (t.scroll && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type)) {
                            t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= Ba ? t.setState({
                                isAutoScrolling: !0
                            }) : t.setState({
                                isAutoScrolling: !1
                            })
                        }
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom)
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    La.forEach(function(t) {
                        return e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    La.forEach(function(t) {
                        return e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.props.messages,
                        n = t.map(function(t) {
                            return Ue.createElement(vi, {
                                badgeSets: e.props.badgeSets,
                                channelID: e.props.channelID,
                                isCurrentUserModerator: e.props.isCurrentUserModerator,
                                message: t,
                                key: t.id,
                                showModerationIcons: e.props.showModerationIcons && !e.props.isEmbedded,
                                showTimestamps: e.props.showTimestamps,
                                currentUserDisplayName: e.props.currentUserDisplayName,
                                currentUserLogin: e.props.currentUserLogin,
                                onPushMessage: e.props.onPushMessage
                            })
                        });
                    return Ue.createElement(ze.U, {
                        className: "chat-list",
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        flexWrap: ze.K.NoWrap,
                        overflow: ze.Y.Hidden,
                        flexGrow: 1
                    }, Ue.createElement(Aa.b, {
                        className: "chat-list__lines",
                        scrollRef: this.saveScrollRef,
                        "data-a-target": "chat-scroller"
                    }, Ue.createElement(ze.U, {
                        flexGrow: 1,
                        fullHeight: !0,
                        padding: {
                            bottom: 1
                        }
                    }, n)), Ue.createElement(ze.U, {
                        className: "chat-list__more-messages-placeholder",
                        position: ze._2.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : Ue.createElement(ze.P, {
                        display: ze.H.Flex,
                        justifyContent: ze.T.Center,
                        alignItems: ze.c.Center,
                        position: ze._2.Absolute,
                        padding: .5,
                        attachBottom: !0,
                        fullWidth: !0
                    }, Ue.createElement("div", {
                        className: "chat-list__more-messages",
                        onClick: this.handleClickMoreMessages
                    }, Object(Se.d)("More messages below.", "ChatList")))
                }, t.prototype.scrollToBottom = function() {
                    this.scroll.scrollContent.scrollTop = this.scroll.scrollContent.scrollHeight
                }, t
            }(Ue.Component),
            Va = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return ke.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = e.pubsub.messages.chatRichEmbedInfo;
                    t && this.props.pubsub.messages.chatRichEmbedInfo !== t && Se.n.apollo.client.writeQuery({
                        query: Fa,
                        variables: {
                            slug: t.data.twitch_metadata.clip_metadata.slug
                        },
                        data: ja(t)
                    })
                }, t.prototype.render = function() {
                    return Ue.createElement(Ha, {
                        channelID: this.props.channelID,
                        badgeSets: this.props.badgeSets,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        channelLogin: this.props.channelLogin,
                        onPushMessage: this.props.onPushMessage,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        messages: this.props.messages,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        currentUserLogin: this.props.currentUserLogin
                    })
                }, t
            }(Ue.Component),
            Wa = Object(Me.compose)(Object(Te.a)(ue), Object(He.a)([{
                skip: function(e) {
                    return !e.channelID
                },
                topic: function(e) {
                    return e.channelID ? Object(Ge.h)(e.channelID) : ""
                },
                mapMessageTypesToProps: (xa = {}, xa[Ve.c.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", xa)
            }]))(Va),
            Ga = (n(980), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickConfirm = function() {
                        n.markRoomSeen(), n.setState({
                            showRules: !1
                        })
                    };
                    var i = n.getRoomsSeen();
                    return n.state = {
                        showRules: n.props.chatRules && n.props.chatRules.length > 0 && !i[n.props.channelLogin]
                    }, n
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    return this.state.showRules ? Ue.createElement(ze.U, {
                        className: "chat-rules",
                        position: ze._2.Relative
                    }, Ue.createElement(ze._17, {
                        border: !0,
                        background: ze.m.Base,
                        margin: {
                            bottom: 1
                        }
                    }, Ue.createElement(ze.U, {
                        padding: 1
                    }, Ue.createElement(ze.U, {
                        margin: {
                            bottom: 1
                        }
                    }, Ue.createElement(ze._21, {
                        type: ze._26.H6
                    }, Object(Se.d)("Chat Rules:", "ChatRules"))), Ue.createElement(ze.U, null, Ue.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                        return Ue.createElement("li", {
                            key: t
                        }, e)
                    }))), Ue.createElement(ze.U, {
                        margin: {
                            top: 1
                        },
                        display: ze.H.Flex,
                        justifyContent: ze.T.Center
                    }, Ue.createElement(ze.u, {
                        size: ze.x.Small,
                        onClick: this.onClickConfirm
                    }, Object(Se.d)("Ok, got it!", "ChatRules")))))) : null
                }, t.prototype.getRoomsSeen = function() {
                    return Se.k.get("chat_rules_shown", {})
                }, t.prototype.markRoomSeen = function() {
                    var e = this.getRoomsSeen();
                    e[this.props.channelLogin] = !0, Se.k.set("chat_rules_shown", e)
                }, t
            }(Ue.Component)),
            qa = 3,
            za = (n(981), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, Jn.a.viewer_list, "")
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        a = n.map(function(t) {
                            return Ue.createElement("div", {
                                key: "chat-viewers-list-item-" + t
                            }, Ue.createElement("button", {
                                className: "chat-viewers-list__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, Ue.createElement(ze._21, {
                                transform: ze._25.Capitalize
                            }, t)))
                        });
                    return Ue.createElement(ze.U, {
                        className: "chat-viewers-list",
                        padding: {
                            bottom: 2
                        }
                    }, Ue.createElement("div", null, Ue.createElement(ze._21, {
                        transform: ze._25.Uppercase
                    }, i)), a)
                }, t
            }(Ue.Component)),
            $a = (n(982), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        filter: "",
                        inputValue: "",
                        filteredViewers: {},
                        viewersPage: 0,
                        renderedViewers: [],
                        isLoading: !1
                    }, t.filterTimeout = 0, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.loadMore = function() {
                        return ke.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return ke.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, new Promise(function(t) {
                                            e.setState(function(t) {
                                                return {
                                                    renderedViewers: e.getRenderedViewers(t.filteredViewers.viewers, t.viewersPage + 1),
                                                    viewersPage: t.viewersPage + 1
                                                }
                                            }, function() {
                                                t()
                                            })
                                        })];
                                    case 1:
                                        return t.sent(), [2]
                                }
                            })
                        })
                    }, t.getRenderedViewers = function(e, t) {
                        return e ? e.slice(0, 100 * (t || 1)) : []
                    }, t.handleFilter = function(e, n) {
                        var i = pe(n, e),
                            a = t.getRenderedViewers(i.viewers, 1);
                        t.scroll && t.scroll.scrollToTop(), t.setState({
                            filteredViewers: i,
                            isLoading: !1,
                            renderedViewers: a,
                            viewersPage: 1
                        })
                    }, t.handleFilterChange = function(e) {
                        var n = e.target.value,
                            i = n.toLowerCase().trim();
                        t.setState({
                            filter: i,
                            inputValue: n,
                            isLoading: !0
                        }), clearTimeout(t.filterTimeout), t.filterTimeout = setTimeout(function() {
                            t.handleFilter(i, t.props.viewers)
                        }, 350)
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.handleFilter(this.state.filter, e.viewers)
                }, t.prototype.render = function() {
                    var e = this.props.onShowViewerCard,
                        t = [],
                        n = this.state.filteredViewers;
                    n.staff && n.staff.length > 0 && t.push(Ue.createElement(za, {
                        key: "chat-viewers-list-staff",
                        header: Object(Se.d)("Staff", "ChatViewers"),
                        viewers: n.staff,
                        onUsernameClick: e
                    })), n.admins && n.admins.length > 0 && t.push(Ue.createElement(za, {
                        key: "chat-viewers-list-admins",
                        header: Object(Se.d)("Admins", "ChatViewers"),
                        viewers: n.admins,
                        onUsernameClick: e
                    })), n.global_mods && n.global_mods.length > 0 && t.push(Ue.createElement(za, {
                        key: "chat-viewers-list-global-mods",
                        header: Object(Se.d)("Global Moderators", "ChatViewers"),
                        viewers: n.global_mods,
                        onUsernameClick: e
                    })), n.moderators && n.moderators.length > 0 && t.push(Ue.createElement(za, {
                        key: "chat-viewers-list-moderators",
                        header: Object(Se.d)("Moderators", "ChatViewers"),
                        viewers: n.moderators,
                        onUsernameClick: e
                    })), n.viewers && n.viewers.length > 0 && t.push(Ue.createElement(za, {
                        key: "chat-viewers-list-viewers",
                        "data-test-selector": "chat-viewers-list-viewers",
                        header: Object(Se.d)("Viewers", "ChatViewers"),
                        viewers: this.state.renderedViewers,
                        onUsernameClick: e
                    }));
                    var i = this.props.isLoading || this.state.isLoading,
                        a = i && Ue.createElement(ze.U, {
                            className: "chat-viewers__loading",
                            display: ze.H.Flex,
                            alignItems: ze.c.Center,
                            justifyContent: ze.T.Center,
                            zIndex: ze._38.Above,
                            position: ze._2.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, Ue.createElement(ze.X, null));
                    return Ue.createElement(ze.U, {
                        className: "chat-viewers__container",
                        fullWidth: !0,
                        fullHeight: !0,
                        flexShrink: 0,
                        zIndex: ze._38.Default
                    }, Ue.createElement(ze.U, {
                        className: "chat-viewers__pane",
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        flexWrap: ze.K.NoWrap,
                        position: ze._2.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0
                    }, Ue.createElement(ze.U, {
                        className: "chat-viewers__header",
                        display: ze.H.Flex,
                        justifyContent: ze.T.Center,
                        alignItems: ze.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, Ue.createElement(ze.U, {
                        position: ze._2.Absolute,
                        attachLeft: !0,
                        margin: {
                            left: 1
                        }
                    }, Ue.createElement(ze.v, {
                        icon: ze._9.Close,
                        ariaLabel: Object(Se.d)("Close", "ChatViewers"),
                        "data-a-target": "chat-viewer-list",
                        onClick: this.props.closeViewersList
                    })), Ue.createElement("p", {
                        "data-a-target": "chat-viewers_header-channel-name"
                    }, Object(Se.d)("Viewer List", "ChatViewers"))), Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        flexWrap: ze.K.NoWrap,
                        fullHeight: !0
                    }, Ue.createElement(ze.U, {
                        className: "chat-viewers__filter",
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }, Ue.createElement(ze.Q, {
                        type: ze.R.Search,
                        name: "viewers-filter",
                        placeholder: Object(Se.d)("Filter Viewers", "ChatViewers"),
                        readOnly: this.props.isLoading,
                        onChange: this.handleFilterChange,
                        value: this.state.inputValue
                    })), Ue.createElement(Aa.b, {
                        className: "chat-viewers__list",
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0,
                        scrollContentClassName: "chat-viewers__scroll-container"
                    }, Ue.createElement(ze.U, {
                        padding: {
                            x: 2
                        }
                    }, t, Ue.createElement(Aa.a, {
                        key: this.state.filter,
                        enabled: !i,
                        loadMore: this.loadMore
                    })))), a))
                }, t
            }(Ue.Component)),
            Ja = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        viewers: {},
                        viewerCount: 0,
                        isLoading: !1
                    }, n.logger = Se.i.withCategory("chat-viewers"), n
                }
                return ke.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.channelLogin !== e.channelLogin && this.updateViewers(e.channelLogin)
                }, t.prototype.componentDidMount = function() {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        return ke.__generator(this, function(e) {
                            return this.updateViewers(this.props.channelLogin), [2]
                        })
                    })
                }, t.prototype.render = function() {
                    return Ue.createElement($a, {
                        channelLogin: this.props.channelLogin,
                        closeViewersList: this.props.closeViewersList,
                        viewers: this.state.viewers,
                        viewerCount: this.state.viewerCount,
                        isLoading: this.state.isLoading,
                        onShowViewerCard: this.props.onShowViewerCard
                    })
                }, t.prototype.updateViewers = function(e) {
                    return ke.__awaiter(this, void 0, void 0, function() {
                        var t, n, i;
                        return ke.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return this.setState({
                                        isLoading: !0
                                    }), [4, de(e)];
                                case 1:
                                    return t = a.sent(), n = t ? t.chatters : {}, i = t ? t.chatter_count : 0, Se.i.debug("Updated viewers list with " + i + " viewers"), this.setState({
                                        viewers: n,
                                        viewerCount: i,
                                        isLoading: !1
                                    }), [2]
                            }
                        })
                    })
                }, t
            }(Ue.Component),
            Qa = Object(Te.a)(null, me)(Ja),
            Ka = n(377),
            Ya = n(446),
            Xa = n(447),
            Za = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIgnored: !1
                    }, t.ignoreUser = function() {
                        t.props.sendMessageToTMI(Object(Lt.h)(t.props.targetLogin)), t.setState({
                            isIgnored: !0
                        })
                    }, t.unignoreUser = function() {
                        t.props.sendMessageToTMI(Object(Lt.j)(t.props.targetLogin)), t.setState({
                            isIgnored: !1
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.state.isIgnored ? Ue.createElement(ze.v, {
                        icon: ze._9.Ignore,
                        ariaLabel: Object(Se.d)("Unblock {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.unignoreUser,
                        overlay: !0
                    }) : Ue.createElement(ze.v, {
                        icon: ze._9.Ignore,
                        ariaLabel: Object(Se.d)("Block {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.ignoreUser,
                        overlay: !0
                    })
                }, t = ke.__decorate([Object(ht.c)("ViewerCardIgnoreAction")], t)
            }(Ue.Component),
            er = Za,
            tr = n(983),
            nr = n(984),
            ir = n(985),
            ar = "10 minutes",
            rr = function(e, t, n) {
                var i = e.readQuery({
                    query: ir,
                    variables: {
                        targetUserID: n.userID,
                        channelID: n.channelID
                    }
                });
                t && t.data && (i.chatRoomBanStatus = {
                    isPermanent: !0,
                    __typename: "ChatRoomBanStatus"
                }), e.writeQuery({
                    query: ir,
                    variables: {
                        targetUserID: n.userID,
                        channelID: n.channelID
                    },
                    data: i
                })
            },
            sr = function(e, t) {
                var n = e.readQuery({
                        query: ir,
                        variables: {
                            targetUserID: t.userID,
                            channelID: t.channelID
                        }
                    }),
                    i = ke.__assign({}, n, {
                        chatRoomBanStatus: null
                    });
                e.writeQuery({
                    query: ir,
                    variables: {
                        targetUserID: t.userID,
                        channelID: t.channelID
                    },
                    data: i
                })
            },
            or = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(We.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t.onTimeoutClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(We.a)({
                            channelID: i,
                            bannedUserLogin: a,
                            expiresIn: ar
                        }))
                    }, t.onUnbanClick = function() {
                        var e = t.props,
                            n = e.unbanUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(We.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return Ue.createElement(ze.U, {
                        display: ze.H.InlineFlex
                    }, this.getContent())
                }, t.prototype.getContent = function() {
                    return this.props.data.loading || this.props.data.error ? [this.renderBanAction(!0), this.renderTimeoutAction(!0)] : this.props.data.chatRoomBanStatus ? this.props.data.chatRoomBanStatus.isPermanent ? [this.renderUnbanAction(), this.renderTimeoutAction(!0)] : [this.renderBanAction(), this.renderUntimeoutAction()] : [this.renderBanAction(), this.renderTimeoutAction()]
                }, t.prototype.renderTimeoutAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(Se.d)("Timeout User", "ViewerCardModActions");
                    return Ue.createElement(ze._30, {
                        key: "Timeout",
                        label: t,
                        direction: ze._32.Top,
                        align: ze._31.Center
                    }, Ue.createElement(ze.U, {
                        padding: {
                            right: 1
                        }
                    }, Ue.createElement(ze.v, {
                        icon: ze._9.Timeout,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onTimeoutClick
                    })))
                }, t.prototype.renderUntimeoutAction = function() {
                    var e = Object(Se.d)("Untimeout User", "ViewerCardModActions");
                    return Ue.createElement(ze._30, {
                        key: "Untimeout",
                        label: e,
                        direction: ze._32.Top,
                        align: ze._31.Center
                    }, Ue.createElement(ze.U, {
                        padding: {
                            right: 1
                        }
                    }, Ue.createElement(ze.v, {
                        icon: ze._9.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t.prototype.renderBanAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(Se.d)("Ban User", "ViewerCardModActions");
                    return Ue.createElement(ze._30, {
                        key: "Ban",
                        label: t,
                        direction: ze._32.Top,
                        align: ze._31.Center
                    }, Ue.createElement(ze.U, {
                        padding: {
                            right: 1,
                            left: 1
                        }
                    }, Ue.createElement(ze.v, {
                        icon: ze._9.Ban,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onBanClick
                    })))
                }, t.prototype.renderUnbanAction = function() {
                    var e = Object(Se.d)("Unban User", "ViewerCardModActions");
                    return Ue.createElement(ze._30, {
                        key: "Unban",
                        label: e,
                        direction: ze._32.Top,
                        align: ze._31.Center
                    }, Ue.createElement(ze.U, {
                        padding: {
                            right: 1,
                            left: 1
                        }
                    }, Ue.createElement(ze.v, {
                        icon: ze._9.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t = ke.__decorate([Object(ht.c)("ViewerCardModActions"), Object(Oe.a)(ir, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.userID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(Oe.a)(tr, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                rr(t, n, e)
                            }
                        }
                    }
                }), Object(Oe.a)(nr, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                sr(t, e)
                            }
                        }
                    }
                })], t)
            }(Ue.Component),
            lr = or,
            cr = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.modUser = function() {
                        n.props.sendMessageToTMI(Object(Lt.i)(n.props.targetLogin)), n.setState({
                            isModerator: !0
                        })
                    }, n.unmodUser = function() {
                        n.props.sendMessageToTMI(Object(Lt.k)(n.props.targetLogin)), n.setState({
                            isModerator: !1
                        })
                    }, n.state = {
                        isModerator: !1
                    }, n
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isModerator) {
                        var e = Object(Se.d)("Unmod User", "ViewerCardOwnerActions");
                        return Ue.createElement(ze._30, {
                            label: e,
                            direction: ze._32.Top,
                            align: ze._31.Center
                        }, Ue.createElement(ze.U, {
                            key: "OP",
                            padding: {
                                right: 1
                            }
                        }, Ue.createElement(ze.v, {
                            icon: ze._9.FollowCheck,
                            ariaLabel: e,
                            onClick: this.unmodUser
                        })))
                    }
                    var e = Object(Se.d)("Mod User", "ViewerCardOwnerActions");
                    return Ue.createElement(ze._30, {
                        label: e,
                        direction: ze._32.Top,
                        align: ze._31.Center
                    }, Ue.createElement(ze.U, {
                        key: "OP",
                        padding: {
                            right: 1
                        }
                    }, Ue.createElement(ze.v, {
                        icon: ze._9.OP,
                        ariaLabel: e,
                        onClick: this.modUser
                    })))
                }, t = ke.__decorate([Object(ht.c)("ViewerCardOwnerActions")], t)
            }(Ue.Component),
            ur = cr,
            dr = n(448),
            pr = n(261),
            mr = n(442),
            hr = n(268),
            fr = n(50),
            gr = (n(986), n(987));
        ! function(e) {
            e[e.ActionsPage = 0] = "ActionsPage", e[e.SubGiftSelectPage = 1] = "SubGiftSelectPage"
        }(Ma || (Ma = {}));
        var br = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentPage: Ma.ActionsPage
                    }, t.getContent = function() {
                        if (t.props.data.loading || t.props.data.error) return t.renderHideButton();
                        var e = {
                                backgroundImage: "url(" + (t.props.data.targetUser.bannerImageURL || Ya)
                            },
                            n = t.state.currentPage === Ma.ActionsPage ? t.renderActions() : t.renderSubGiftSelect();
                        return Ue.createElement(ze.U, null, Ue.createElement(ze._17, {
                            elevation: 1,
                            border: !0
                        }, Ue.createElement("div", {
                            className: "viewer-card",
                            style: e
                        }, Ue.createElement(ze.U, {
                            display: ze.H.Flex,
                            flexDirection: ze.J.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            className: "viewer-card__overlay"
                        }, Ue.createElement(ze.U, {
                            padding: 1,
                            alignItems: ze.c.Start,
                            justifyContent: ze.T.Start,
                            display: ze.H.Flex,
                            flexDirection: ze.J.Row,
                            textAlign: ze._22.Center,
                            fullWidth: !0,
                            flexGrow: 1
                        }, Ue.createElement(ze.l, {
                            imageSrc: t.props.data.targetUser.profileImageURL,
                            size: 50,
                            imageAlt: t.props.data.targetUser.displayName
                        }), Ue.createElement(ze.U, {
                            alignItems: ze.c.Center,
                            margin: 1,
                            className: "viewer-card__display-name",
                            ellipsis: !0
                        }, Ue.createElement(ze._21, {
                            type: ze._26.H4
                        }, Ue.createElement("a", {
                            className: "viewer-card__display-name__link color-text-pill",
                            href: "/" + t.props.targetLogin,
                            target: "_blank"
                        }, t.props.data.targetUser.displayName))), t.renderHideButton(), t.renderIgnoreButton()))), n))
                    }, t.toggleGiftPage = function() {
                        var e = t.state.currentPage === Ma.ActionsPage ? Ma.SubGiftSelectPage : Ma.ActionsPage;
                        e === Ma.SubGiftSelectPage && t.trackGiftEvent(), t.setState({
                            currentPage: e
                        })
                    }, t.onWhisperButtonClick = function() {
                        t.props.hideViewerCard()
                    }, t.handleReportUserClick = function() {
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: t.reportContentTypeFromSourceType(t.props.sourceType),
                                targetUserID: t.props.data.targetUser.id,
                                contentID: t.props.sourceID,
                                extra: JSON.stringify({
                                    channel_id: t.props.channelID.toString()
                                })
                            },
                            title: Object(Se.d)("Report {channelDisplayName}", {
                                channelDisplayName: t.props.data.targetUser.displayName
                            }, "ReportUserModalTitle")
                        })
                    }, t.trackBuyGiftSubEvent = function(e) {
                        Object(fr.b)(ke.__assign({}, e, {
                            action: fr.a.BuyGiftSub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        }))
                    }, t.trackGiftEvent = function() {
                        Object(fr.b)({
                            action: fr.a.GiftASub,
                            channelID: t.props.channelID || "",
                            channelLogin: t.props.data.channelUser.login || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "viewer_card",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: t.props.data.targetUser.login
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.error ? null : this.getContent()
                }, t.prototype.renderIgnoreButton = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : Ue.createElement(ze.U, {
                        key: "Ignore",
                        position: ze._2.Absolute,
                        attachRight: !0,
                        margin: {
                            top: 3,
                            right: .5
                        }
                    }, Ue.createElement(er, {
                        targetDisplayName: this.props.data.targetUser.displayName,
                        targetLogin: this.props.targetLogin,
                        sendMessageToTMI: this.props.sendMessageToTMI
                    }))
                }, t.prototype.renderHideButton = function() {
                    return Ue.createElement(ze.U, {
                        className: "viewer-card__hide",
                        position: ze._2.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        margin: {
                            top: .5,
                            right: .5
                        }
                    }, Ue.createElement(ze.v, {
                        icon: ze._9.Close,
                        onClick: this.props.hideViewerCard,
                        ariaLabel: Object(Se.d)("Hide", "ViewerCard"),
                        overlay: !0
                    }))
                }, t.prototype.renderActions = function() {
                    var e = this.props.data.currentUser;
                    return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : Ue.createElement(ze._17, {
                        className: "viewer-card__actions",
                        "data-test-selector": "viewer-card-actions",
                        background: ze.m.Base,
                        attachBottom: !0,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row,
                        justifyContent: ze.T.Between,
                        fullWidth: !0,
                        flexGrow: 0
                    }, Ue.createElement(ze.U, {
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row,
                        fullWidth: !0,
                        margin: {
                            left: .5,
                            right: 1,
                            bottom: 1,
                            top: .5
                        }
                    }, this.renderSocialActions()), Ue.createElement(ze._17, {
                        display: ze.H.Flex,
                        background: ze.m.Alt2,
                        fullWidth: !0
                    }, Ue.createElement(ze.U, {
                        display: ze.H.InlineFlex,
                        flexDirection: ze.J.Row
                    }, this.renderChatActions())))
                }, t.prototype.renderSocialActions = function() {
                    var e = null;
                    return this.isModeratorOrHigher && (e = Ue.createElement(Ct.a, {
                        key: "MoreOptionsButton"
                    }, Ue.createElement(ze.v, {
                        type: ze.w.Hollow,
                        ariaLabel: Object(Se.d)("More options", "ViewerCard"),
                        icon: ze._9.More,
                        "data-a-target": "viewer-card-more-button"
                    }), Ue.createElement(ze.p, {
                        direction: ze.q.BottomRight,
                        "data-a-target": "viewer-card-more-balloon"
                    }, Ue.createElement(ze.U, {
                        padding: {
                            y: 1
                        }
                    }, Ue.createElement(ze.S, {
                        onClick: this.handleReportUserClick,
                        "data-a-target": "viewer-card-report-button"
                    }, Ue.createElement(ze.U, {
                        padding: {
                            x: 1
                        }
                    }, Object(Se.d)("Report {user}", {
                        user: this.props.targetLogin
                    }, "ViewerCard"))))))), [Ue.createElement(ze.U, {
                        key: "FriendButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, Ue.createElement(dr.a, {
                        channelID: this.props.data.targetUser.id
                    })), this.renderWhisperButton(), this.renderGiftSubscriptionButton(), Ue.createElement(ze.U, {
                        key: "ReportButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, e)]
                }, t.prototype.renderWhisperButton = function() {
                    if (!this.props.data.currentUser || !this.props.data.targetUser) return null;
                    var e = Object(Pn.a)(this.props.data.currentUser.id, this.props.data.targetUser.id);
                    return Ue.createElement(ze.U, {
                        key: "WhisperButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, Ue.createElement(Xa.a, {
                        onClick: this.onWhisperButtonClick,
                        threadID: e
                    }))
                }, t.prototype.renderGiftSubscriptionButton = function() {
                    return !this.props.data.channelUser || !this.props.data.channelUser.subscriptionProducts || this.props.data.channelUser.subscriptionProducts.length < 1 ? null : Ue.createElement(ze.U, {
                        key: "GiftButton",
                        padding: {
                            top: .5,
                            left: .5
                        }
                    }, Ue.createElement(mr.a, {
                        onClick: this.toggleGiftPage,
                        subProductId: this.props.data.channelUser.subscriptionProducts[0].id,
                        giftRecipient: this.props.targetLogin
                    }))
                }, t.prototype.renderSubGiftSelect = function() {
                    return Ue.createElement(ze._17, {
                        background: ze.m.Base,
                        attachBottom: !0,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Row,
                        justifyContent: ze.T.Between,
                        fullWidth: !0,
                        flexGrow: 0,
                        padding: 2
                    }, Ue.createElement(hr.a, {
                        onBack: this.toggleGiftPage,
                        channelDisplayName: this.props.data.channelUser.displayName,
                        subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                        giftRecipient: this.props.data.targetUser.login,
                        reportSubMenuAction: this.trackBuyGiftSubEvent
                    }))
                }, t.prototype.renderChatActions = function() {
                    var e = [];
                    return this.isModeratorOrHigher() && e.push(Ue.createElement(lr, {
                        key: "ModActions",
                        channelID: this.props.data.channelUser.id,
                        userID: this.props.data.targetUser.id,
                        userLogin: this.props.targetLogin
                    })), this.isOwnerOrHigher() && e.push(Ue.createElement(ur, {
                        key: "OwnerActions",
                        sendMessageToTMI: this.props.sendMessageToTMI,
                        targetLogin: this.props.targetLogin
                    })), e
                }, t.prototype.isOwnerOrHigher = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && (e.currentUser.roles.isGlobalMod || e.currentUser.roles.isSiteAdmin || e.currentUser.roles.isStaff || this.isOwner())
                }, t.prototype.isModeratorOrHigher = function() {
                    return this.isOwnerOrHigher() || this.props.data.channelUser.self && this.props.data.channelUser.self.isModerator
                }, t.prototype.isOwner = function() {
                    var e = this.props.data;
                    return !(e.loading || e.error || !e.currentUser) && e.currentUser.id === e.channelUser.id
                }, t.prototype.reportContentTypeFromSourceType = function(e) {
                    switch (e) {
                        case Jn.a.chat_message:
                            return pr.a.Chat;
                        case Jn.a.recent_raids:
                            return pr.a.Raid;
                        case Jn.a.viewer_list:
                        default:
                            return pr.a.User
                    }
                }, t = ke.__decorate([Object(ht.c)("ViewerCard"), Object(Oe.a)(gr, {
                    options: function(e) {
                        return {
                            variables: {
                                targetLogin: e.targetLogin,
                                channelID: e.channelID
                            }
                        }
                    }
                })], t)
            }(Ue.Component),
            vr = br,
            kr = (n(988), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return ke.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.hideViewerCard()
                }, t.prototype.render = function() {
                    var e = null;
                    return this.props.viewerCardOptions && (e = Ue.createElement(ze.U, {
                        className: "viewer-card-layer",
                        position: ze._2.Relative
                    }, Ue.createElement(vr, {
                        isEmbedded: this.props.isEmbedded,
                        targetLogin: this.props.viewerCardOptions.targetLogin,
                        hideViewerCard: this.props.hideViewerCard,
                        sendMessageToTMI: this.props.onSendMessage,
                        channelID: this.props.channelID,
                        showReportUserModal: this.props.showReportUserModal,
                        sourceType: this.props.viewerCardOptions.sourceType,
                        sourceID: this.props.viewerCardOptions.sourceID
                    }))), e
                }, t
            }(Ue.Component)),
            yr = Object(Te.a)(he, fe)(kr),
            Sr = n(924),
            _r = "disable_crate_ftue",
            Cr = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showNotification: !0
                    }, t.clearCrateNotification = function() {
                        Se.k.set(_r, !0), t.setState({
                            showNotification: !1
                        })
                    }, t.closeCrateNotification = function() {
                        t.clearCrateNotification(), Object(Wi.d)({
                            action: Wi.a.Close,
                            type: Wi.c.Ftue,
                            channelId: t.props.channelID,
                            userId: t.props.userID
                        })
                    }, t.crateNotificationTimeout = function() {
                        t.clearCrateNotification(), Object(Wi.d)({
                            action: Wi.a.Timeout,
                            type: Wi.c.Ftue,
                            channelId: t.props.channelID,
                            userId: t.props.userID
                        })
                    }, t.isFtueDisabled = function() {
                        var e = Se.b.get("crate_trickster_launch", "off"),
                            n = Se.k.get(_r, !1);
                        return "staff" === e ? n || !t.props.isStaff : "on" !== e || n
                    }, t.trackEvent = function() {
                        Object(Wi.d)({
                            action: Wi.a.LearnMore,
                            type: Wi.c.Ftue,
                            channelId: t.props.channelID,
                            userId: t.props.userID
                        })
                    }, t
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    if (!this.state.showNotification || this.isFtueDisabled() || !this.props.bitsConfig) return null;
                    var e = Ue.createElement(ze.U, null, Ue.createElement("figure", {
                            className: "crates-intro-banner"
                        }, Ue.createElement("img", {
                            src: Vi.a
                        })), Ue.createElement(ze.U, null, Ue.createElement(ze._21, {
                            color: ze.F.Alt2,
                            fontSize: ze.L.Size6
                        }, Object(Se.d)("For a limited time, Cheer at least {numBits, number} Bits and get a Halloween Crate with one of {numEmotes, number} temporary zombie emotes. Collect all {numEmotes, number} to permanently unlock Zombie Lord Kappa!", {
                            numBits: 250,
                            numEmotes: 6
                        }, "Crates")))),
                        t = Ue.createElement(ze.U, {
                            margin: {
                                top: 2,
                                bottom: 1
                            }
                        }, Ue.createElement(ze.u, {
                            "data-test-selector": "crate-notification__learn-more-button",
                            onClick: this.trackEvent,
                            linkTo: "https://blog.twitch.tv/bring-the-zombie-apocalypse-to-twitch-7a5bf4ecff42",
                            targetBlank: !0
                        }, Object(Se.d)("Learn More", "Crates")));
                    return Object(Wi.d)({
                        action: Wi.a.View,
                        type: Wi.c.Ftue,
                        channelId: this.props.channelID,
                        userId: this.props.userID
                    }), Ue.createElement(ze.U, {
                        className: "crate-notification",
                        position: ze._2.Relative
                    }, Ue.createElement(Sr.a, {
                        onClearCrateNotification: this.closeCrateNotification,
                        onCrateNotifactionTimeout: this.crateNotificationTimeout,
                        countdownTimeSec: 20,
                        title: Object(Se.d)("Halloween Twitch Crates", "Crates"),
                        cardBody: e,
                        cardFooter: t
                    }))
                }, t
            }(Ue.Component),
            Er = Cr,
            Nr = n(989),
            wr = (n(990), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.closeViewersList = function() {
                        n.setState({
                            showViewersList: !1
                        })
                    }, n.showViewersList = function() {
                        n.setState({
                            showViewersList: !0
                        })
                    }, n.onChatInputFocus = function() {
                        n.props.authToken && !n.state.showChatRules && n.setState({
                            showChatRules: !0
                        })
                    }, n.state = {
                        showChatRules: !1,
                        showViewersList: !1
                    }, n
                }
                return ke.__extends(t, e), t.prototype.render = function() {
                    var e = nn.parse(this.props.location.search),
                        t = void 0 !== e.darkpopout,
                        n = (l = {}, l[Object(An.c)(Re.a.Dark)] = t, l);
                    if (this.props.isHidden) return Ue.createElement(ze._17, {
                        alignItems: ze.c.Center,
                        background: ze.m.Alt,
                        className: Be("chat-room__pane", n),
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: ze.T.Center,
                        color: ze.F.Base,
                        position: ze._2.Relative
                    }, Ue.createElement(ze.U, {
                        margin: {
                            bottom: 1
                        }
                    }, Ue.createElement(ze._21, {
                        fontSize: ze.L.Size5
                    }, Object(Se.d)("Chat is hidden.", "ChatRoom"))), Ue.createElement(ze.u, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(Se.d)("Show Chat", "ChatRoom")));
                    var i = this.props.bitsConfig && this.props.firstPageLoaded && Ue.createElement(Di, {
                            badgeData: this.props.badgeSets,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelID: this.props.channelID,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin
                        }),
                        a = this.state.showViewersList && Ue.createElement(Qa, {
                            channelLogin: this.props.channelLogin,
                            closeViewersList: this.closeViewersList
                        }),
                        r = this.props.bitsConfig && Ue.createElement(Er, {
                            bitsConfig: this.props.bitsConfig,
                            isStaff: this.props.isStaff,
                            userID: this.props.userID,
                            channelID: this.props.channelID
                        }),
                        s = !!this.props.authToken && !this.props.isEmbedded,
                        o = null;
                    return this.state.showChatRules && (o = Ue.createElement(ze.U, {
                        padding: {
                            x: 2
                        }
                    }, Ue.createElement(Ga, {
                        chatRules: this.props.chatRules,
                        channelLogin: this.props.channelLogin
                    }))), Ue.createElement(ze.U, {
                        className: Be("chat-room__container", n),
                        "data-a-target": this.props.theme === Re.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                        flexShrink: 1,
                        flexGrow: 1,
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        overflow: ze.Y.Hidden,
                        fullWidth: !0,
                        fullHeight: !0
                    }, r, Ue.createElement(ze._17, {
                        className: "chat-room__pane",
                        display: ze.H.Flex,
                        flexDirection: ze.J.Column,
                        flexWrap: ze.K.NoWrap,
                        position: ze._2.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: ze.Y.Hidden,
                        color: ze.F.Base
                    }, Ue.createElement(ze.U, {
                        className: "chat-room__header",
                        display: ze.H.Flex,
                        justifyContent: ze.T.Center,
                        alignItems: ze.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, Ue.createElement("p", {
                        "data-a-target": "chat-room__header-channel-name"
                    }, this.props.channelLogin)), this.props.chatRoomHeader, i, Ue.createElement(Wa, {
                        badgeSets: this.props.badgeSets,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        isEmbedded: this.props.isEmbedded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onPushMessage: this.props.onPushMessage
                    }), Ue.createElement(ze.U, {
                        className: "chat-room__viewer-card",
                        position: ze._2.Absolute
                    }, Ue.createElement(yr, {
                        isEmbedded: this.props.isEmbedded,
                        onSendMessage: this.props.onSendMessage,
                        channelID: this.props.channelID
                    })), Ue.createElement(ze.U, {
                        className: "chat-room__notifications",
                        position: ze._2.Absolute,
                        zIndex: ze._38.Default,
                        fullWidth: !0
                    }, this.props.children), o, this.props.isOwnChannel && !this.props.isEmbedded && Ue.createElement(Vn, {
                        hostedChannelLogin: this.props.hostedChannelLogin
                    }), a, Ue.createElement(Pa, {
                        authToken: this.props.authToken,
                        bitsConfig: s ? this.props.bitsConfig : void 0,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        chatMembers: this.props.chatMembers,
                        emotes: this.props.emotes,
                        firstPageLoaded: this.props.firstPageLoaded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onChatCommand: this.props.onSendMessage,
                        badgeSets: this.props.badgeSets,
                        userBadges: this.props.userBadges,
                        showViewersList: this.showViewersList,
                        raidReceived: this.props.raidReceived,
                        onSendMessage: this.props.onSendMessage,
                        onInputFocus: this.onChatInputFocus
                    })));
                    var l
                }, t = ke.__decorate([Object(Oe.a)(Nr, {
                    props: function(e) {
                        var t = new Wn.c([], [], e.ownProps.channelLogin);
                        return e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && (t = new Wn.c(e.data.badges, e.data.user.broadcastBadges, e.ownProps.channelLogin)), {
                            badgeSets: t
                        }
                    },
                    options: function(e) {
                        return {
                            name: "data",
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(Ue.Component)),
            Dr = Object(Tt.e)(wr),
            Tr = "(?:\\W|^)",
            Ir = "(?:$|\\W)",
            Ur = 150,
            Or = "PowerUpL DarkMode PowerUpR",
            xr = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        activeChatters: [],
                        hasEnteredChatRoom: !1,
                        hostedChannelLogin: null,
                        raidReceived: !1,
                        userBadges: null
                    }, n.getInvalidUserMessage = function() {
                        return Object(Se.d)("No user matching that login.", "ChatRoom")
                    }, n.sendMessage = function(e) {
                        if (!e || 0 === e.length || !n.props.authToken) return !1;
                        var t = Object(Lt.o)(e);
                        if (t) return !(!t.recipientLogin || !t.body) && (n.props.isEmbedded || n.props.isPopout ? (n.pushMessage(Object(pn.a)(Object(Se.d)("Please use the whisper window for whispers.", "ChatRoom"))), !1) : t.recipientLogin === n.props.userLogin ? (n.pushMessage(Object(pn.a)(Object(Se.d)("You cannot whisper to yourself.", "ChatRoom"))), !0) : (n.sendWhisper(t.recipientLogin, t.body), !0));
                        var i = Object(Lt.m)(e);
                        if (i) return n.blockUser(i.login), !0;
                        var a = Object(Lt.n)(e);
                        return a ? (n.unblockUser(a.login), !0) : (n.parseOutgoingMessage(e), n.chatService.sendMessage(e), !0)
                    }, n.blockUser = function(e) {
                        return ke.__awaiter(n, void 0, void 0, function() {
                            var t;
                            return ke.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return e ? [3, 1] : (this.pushMessage(Object(pn.a)(Object(Se.d)("Please specify a user to ignore", "ChatRoom"))), [3, 4]);
                                    case 1:
                                        return e !== this.props.userLogin ? [3, 2] : (this.pushMessage(Object(pn.a)(Object(Se.d)("You cannot ignore yourself.", "ChatRoom"))), [3, 4]);
                                    case 2:
                                        return [4, X(e)];
                                    case 3:
                                        if (!(t = n.sent())) return this.pushMessage(Object(pn.a)(this.getInvalidUserMessage())), [2];
                                        this.props.showBlockUser({
                                            targetUserID: t,
                                            onClose: this.onCloseBlockUser
                                        }), n.label = 4;
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, n.onCloseBlockUser = function(e) {
                        e === lt.Success && n.pushMessage(Object(pn.a)(Object(Se.d)("User successfully ignored.", "ChatRoom")))
                    }, n.unblockUser = function(e) {
                        return ke.__awaiter(n, void 0, void 0, function() {
                            var t;
                            return ke.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return e ? [3, 1] : (this.pushMessage(Object(pn.a)(Object(Se.d)("Please specify a user to unignore", "ChatRoom"))), [3, 4]);
                                    case 1:
                                        return e !== this.props.userLogin ? [3, 2] : (this.pushMessage(Object(pn.a)(Object(Se.d)("You cannot unignore yourself.", "ChatRoom"))), [3, 4]);
                                    case 2:
                                        return [4, X(e)];
                                    case 3:
                                        if (!(t = n.sent())) return this.pushMessage(Object(pn.a)(this.getInvalidUserMessage())), [2];
                                        this.props.onUnblockUser(t), this.pushMessage(Object(pn.a)(Object(Se.d)("User successfully unignored", "ChatRoom"))), n.label = 4;
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, n.sendWhisper = function(e, t) {
                        return ke.__awaiter(n, void 0, void 0, function() {
                            var n, i, a;
                            return ke.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return this.props.userID ? [4, X(e)] : [2];
                                    case 1:
                                        if (!(n = r.sent())) return this.pushMessage(Object(pn.a)(this.getInvalidUserMessage())), [2];
                                        this.userEmotes || (this.userEmotes = Object(Tn.a)(this.props.emoteSets)), r.label = 2;
                                    case 2:
                                        return r.trys.push([2, 4, , 5]), [4, Object(Rn.a)({
                                            currentUserID: this.props.userID,
                                            emotes: this.userEmotes || {},
                                            message: t,
                                            recipientUserID: n
                                        })];
                                    case 3:
                                        return r.sent(), [3, 5];
                                    case 4:
                                        return i = r.sent(), Se.i.error(i, "Failed to send whisper using whisper command.", {
                                            currentUserID: this.props.userID,
                                            recipientUserID: n
                                        }), [2];
                                    case 5:
                                        return a = Object(Pn.a)(this.props.userID, n), this.props.onThreadSelect(a), [2]
                                }
                            })
                        })
                    }, n.pushMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e)
                    }, n.onChatMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e), n.onChatEvent(e)
                    }, n.connect = function(e) {
                        n.setState({
                            hasEnteredChatRoom: !1
                        }), e.userID && e.channelID && (n.moderationActionService = new Un(e.channelID, e.userID, n.chatBuffer.consumeChatEvent)), n.syncBufferHandle = requestAnimationFrame(n.syncBufferedMessages), n.chatService.join()
                    }, n.disconnect = function() {
                        n.syncBufferHandle && cancelAnimationFrame(n.syncBufferHandle), n.moderationActionService && n.moderationActionService.unsubscribe(), n.chatService.part()
                    }, n.updateEmoteSets = function(e) {
                        n.chatService.updateEmotes(e), n.userEmotes && (n.userEmotes = Object(Tn.a)(e))
                    }, n.updateBitsConfig = function(e) {
                        void 0 === e && (e = Ae.a), n.chatService.updateBitsConfig(e)
                    }, n.updateBlockLinks = function(e) {
                        n.chatService.updateBlockLinks(e)
                    }, n.syncBufferedMessages = function() {
                        n.chatBuffer && n.chatBuffer.isDirty && n.props.onChatMessagesUpdate(n.chatBuffer.toArray()), n.activeChatters.isDirty && n.setState({
                            activeChatters: n.activeChatters.getActiveChatters()
                        }), n.syncBufferHandle = requestAnimationFrame(n.syncBufferedMessages)
                    }, n.onChatEvent = function(e) {
                        switch (e.type) {
                            case mn.a.Hosting:
                                n.hostingHandler(e.hostedChannel);
                                break;
                            case mn.a.Unhost:
                                n.hostingHandler(null);
                                break;
                            case mn.a.Connected:
                                n.onConnected();
                                break;
                            case mn.a.RoomState:
                                n.roomStateHandler(e.state);
                                break;
                            case mn.a.BadgesUpdated:
                                n.onBadgesUpdated(e);
                                break;
                            case mn.a.Raid:
                                n.setState({
                                    raidReceived: !0
                                })
                        }
                    }, n.hostingHandler = function(e) {
                        n.setState({
                            hostedChannelLogin: e
                        }), n.props.onHostingChange && n.props.onHostingChange(e)
                    }, n.roomStateHandler = function(e) {
                        e.slowMode ? n.props.onSlowModeEnable() : n.props.onSlowModeDisable(), void 0 !== e.followersOnly && (e.followersOnly ? (n.props.onFollowerModeDurationChange(e.followersOnlyRequirement), n.props.onFollowerModeEnable()) : n.props.onFollowerModeDisable()), void 0 !== e.subsOnly && (e.subsOnly ? n.props.onSubsOnlyModeEnable() : n.props.onSubsOnlyModeDisable())
                    }, n.onConnected = function() {
                        Se.i.debug("Connected"), n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.state.hasEnteredChatRoom || Object(xn.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: !!n.state.hostedChannelLogin
                        }), n.setState({
                            hasEnteredChatRoom: !0
                        }), n.props.latencyTracking.reportInteractive()
                    }, n.createOutgoingTokenMatchers = function(e) {
                        n.outgoingTokenMatchers = e.map(function(e) {
                            return {
                                token: e,
                                regex: new RegExp("" + Tr + e + Ir)
                            }
                        })
                    }, n.parseOutgoingMessage = function(e) {
                        n.outgoingTokenMatchers.forEach(function(t) {
                            t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                        })
                    }, n.onOutgoingTokenMatch = function(e, t) {
                        switch (e) {
                            case Or:
                                var i = n.props.theme === Re.a.Light ? Re.a.Dark : Re.a.Light;
                                n.props.onThemeChange(i);
                                break;
                            default:
                                return
                        }
                    }, n.onBadgesUpdated = function(e) {
                        n.setState({
                            userBadges: e.badges
                        })
                    }, n.chatService = new In(t.userLogin, t.channelLogin, n.onChatMessage), n.logger = Se.i.withCategory("chat-room"), n.registerCustomLatencyEvents(), n.createOutgoingTokenMatchers([Or]), n.userEmotes = null, n.activeChatters = new bn(t.channelID), n.chatBuffer = new Cn(Ur), n.chatBuffer.setBlockedUsers(t.blockedUsers), t.userLogin && n.chatBuffer.setCurrentUserLogin(t.userLogin), t.userID && n.activeChatters.setCurrentUserID(t.userID), n
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.connect(this.props), this.props.emoteSets && this.updateEmoteSets(this.props.emoteSets), this.props.bitsConfig && this.updateBitsConfig(this.props.bitsConfig), this.updateBlockLinks(this.props.blockLinks), this.chatService.disabled && this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillUnmount = function() {
                    this.disconnect(), this.chatBuffer && this.chatBuffer.shutdown(), this.props.onChatMessagesReset()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props,
                        n = e.isHidden && !t.isHidden || !e.rightColumnExpanded && t.rightColumnExpanded,
                        i = !1;
                    n ? this.disconnect() : (i = e.channelLogin !== t.channelLogin || e.userLogin !== t.userLogin || e.authToken !== t.authToken || !e.isHidden && t.isHidden || e.rightColumnExpanded && !t.rightColumnExpanded) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.connect(e), this.setState({
                        hostedChannelLogin: null
                    })), (e.emoteSets !== t.emoteSets || i) && (this.logger.debug("Updating emote sets", {
                        shouldReconnect: i,
                        prevSets: t.emoteSets.slice(0),
                        nextSet: e.emoteSets.slice(0)
                    }), this.updateEmoteSets(e.emoteSets)), (e.bitsConfig !== t.bitsConfig || i) && this.updateBitsConfig(e.bitsConfig), (e.blockLinks !== t.blockLinks || i) && this.updateBlockLinks(e.blockLinks);
                    var a = e.isCurrentUserModerator ? 0 : e.chatDelayMS;
                    this.chatBuffer.setDelay(a), e.userLogin && t.userLogin !== e.userLogin && this.chatBuffer.setCurrentUserLogin(e.userLogin), e.userID && t.userID !== e.userID && this.activeChatters.setCurrentUserID(e.userID), t.channelID !== e.channelID && (this.activeChatters = new bn(e.channelID), this.setState({
                        activeChatters: []
                    })), t.blockedUsers !== e.blockedUsers && this.chatBuffer.setBlockedUsers(e.blockedUsers), !this.moderationActionService && e.userID && e.channelID && (this.moderationActionService = new Un(e.channelID, e.userID, this.chatBuffer.consumeChatEvent))
                }, t.prototype.render = function() {
                    return Ue.createElement(Dr, {
                        authToken: this.props.authToken,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        chatMembers: this.state.activeChatters,
                        chatRoomHeader: Ue.createElement(Dt, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        }),
                        chatRules: this.props.chatRules,
                        currentUserDisplayName: this.props.userDisplayName,
                        currentUserLogin: this.props.userLogin,
                        emotes: this.props.emoteSets,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hostedChannelLogin: this.state.hostedChannelLogin,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHidden: this.props.isHidden,
                        isHostMode: !!this.state.hostedChannelLogin,
                        isOwnChannel: this.isOwnChannel,
                        isPopout: this.props.isPopout,
                        onChatUnhide: this.props.onChatUnhide,
                        onPushMessage: this.pushMessage,
                        onSendMessage: this.sendMessage,
                        raidReceived: this.state.raidReceived,
                        theme: this.props.theme,
                        isStaff: this.props.isStaff,
                        userBadges: this.state.userBadges,
                        userID: this.props.userID
                    }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && Ue.createElement(ut, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig
                    }), this.props.hostedChannelDisplayName && !this.props.isPopout && Ue.createElement(_t, {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                        hostedChannelLogin: this.state.hostedChannelLogin || ""
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && Ue.createElement(dn, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }))
                }, t.prototype.registerCustomLatencyEvents = function() {
                    this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents("Chat"), this.chatInitialized = this.registerInitEvent(), this.chatConnected = this.registerConnectedEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized)
                }, t.prototype.registerInitEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Chat", "chat-init", "Init", 3e3)
                }, t.prototype.registerConnectedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent("Chat", "chat-connected", "Connected", 4e3)
                }, Object.defineProperty(t.prototype, "isOwnChannel", {
                    get: function() {
                        return this.props.userID === this.props.channelID
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(Ue.Component),
            Mr = Object(xe.compose)(Object(ht.c)("ChatRoom"), Object(Oe.a)(jn, {
                props: function(e) {
                    var t;
                    return e.data && e.data.user && e.data.user.cheer && (t = Object(Le.a)(e.data.user.cheer.emotes)), {
                        bitsConfig: t
                    }
                },
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), function() {
                return Object(Oe.a)(fn, {
                    props: function(e) {
                        return e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers ? {
                            blockedUsers: e.data.currentUser.blockedUsers.map(function(e) {
                                return e.id
                            })
                        } : {
                            blockedUsers: []
                        }
                    },
                    skip: function(e) {
                        return !e.authToken
                    }
                })
            }(), function() {
                var e = this;
                return Object(Oe.a)(hn, {
                    props: function(t) {
                        return {
                            onUnblockUser: function(n) {
                                return ke.__awaiter(e, void 0, void 0, function() {
                                    var e, i;
                                    return ke.__generator(this, function(a) {
                                        switch (a.label) {
                                            case 0:
                                                if (!t.mutate) return [2];
                                                a.label = 1;
                                            case 1:
                                                return a.trys.push([1, 3, , 4]), e = ke.__assign({}, Object(We.a)({
                                                    targetUserID: n
                                                }), {
                                                    optimisticResponse: {
                                                        unblockUser: {
                                                            __typename: "UnblockUserPayload",
                                                            targetUser: {
                                                                id: n,
                                                                __typename: "User"
                                                            }
                                                        }
                                                    }
                                                }), [4, t.mutate(e)];
                                            case 2:
                                                return a.sent(), [3, 4];
                                            case 3:
                                                return i = a.sent(), Se.i.error(i, "Unable to unblock user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), Object(Te.a)(be, ge))(xr),
            Rr = n(991),
            Pr = n(992),
            Fr = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return ke.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.channelData.channel,
                        t = this.props.userData && this.props.userData.user,
                        n = !1,
                        i = !1;
                    if (t && e && e.self) {
                        var a = t.login === e.login,
                            r = t.roles.isGlobalMod || t.roles.isSiteAdmin || t.roles.isStaff;
                        n = e.self.isModerator || r || a, i = t.roles.isStaff
                    }
                    var s = e && e.chatSettings && e.chatSettings.rules,
                        o = e && e.chatSettings && e.chatSettings.chatDelayMs,
                        l = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                    return Ue.createElement(Mr, {
                        key: this.props.channelLogin,
                        authToken: this.props.user && this.props.user.authToken,
                        blockLinks: l,
                        channelDisplayName: e && e.displayName,
                        channelID: e && e.id,
                        channelLogin: this.props.channelLogin,
                        chatRules: s,
                        chatDelayMS: o,
                        clientID: this.props.clientID,
                        isCurrentUserModerator: n,
                        isEmbedded: !!this.props.isEmbedded,
                        isPopout: !!this.props.isPopout,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                        onHostingChange: this.props.onHostingChange,
                        userDisplayName: this.props.user && this.props.user.displayName,
                        userID: this.props.user && this.props.user.id.toString(),
                        userLogin: this.props.user && this.props.user.login,
                        isStaff: i
                    })
                }, t = ke.__decorate([Object(Oe.a)(Rr, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(Oe.a)(Pr, {
                    name: "userData",
                    skip: function(e) {
                        return !e.user
                    }
                }), Object(ht.c)("Chat")], t)
            }(Ue.Component),
            jr = Fr,
            Ar = Object(Te.a)(ve)(jr);
        n.d(t, "a", function() {
            return Ar
        })
    },
    934: function(e, t) {},
    935: function(e, t) {},
    936: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissPurchaseToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPurchaseTokenInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "dismissPurchaseToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 122
            }
        };
        n.loc.source = {
            body: "mutation DismissPurchaseToken($input:DismissPurchaseTokenInput!) {\n  dismissPurchaseToken(input:$input) {\n    token\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    937: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_SharePurchase_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isCommerceRevShareEnabled"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "purchaseTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "imageThumbnail"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "40"
                                                    }
                                                }],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteSets"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteSet"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: null
                                                            }, {
                                                                kind: "Field",
                                                                alias: null,
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }, {
                                                                        kind: "Field",
                                                                        alias: null,
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "token"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: null
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "badge"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "quantity"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "inGameContents"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: null
                                                    }, {
                                                        kind: "Field",
                                                        alias: null,
                                                        name: {
                                                            kind: "Name",
                                                            value: "imageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: [],
                                                        selectionSet: null
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 721
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery Chat_SharePurchase_ChannelData($channelLogin: String!) {\n  user(login: $channelLogin) {\n    id\n    isCommerceRevShareEnabled\n    self {\n      purchaseTokens {\n        id\n        title\n        imageThumbnail: imageURL(width: 40)\n        imageURL\n        emoteSets {\n          id\n          emoteSet {\n            id\n            emotes {\n              id\n              token\n            }\n          }\n        }\n        badges {\n          id\n          badge{\n            ...badge\n          }\n        }\n        bits {\n          id\n          quantity\n        }\n        inGameContents {\n          id\n          imageURL(width: 30)\n        }\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(820).definitions)), e.exports = i
    },
    938: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SharePurchaseTokenInChat"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SharePurchaseTokenInChatInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sharePurchaseTokenInChat"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation SharePurchaseTokenInChat($input:SharePurchaseTokenInChatInput!) {\n  sharePurchaseTokenInChat(input:$input) {\n    token\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    939: function(e, t) {},
    940: function(e, t) {},
    941: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ShareResub_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "resubNotification"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "months"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 195
            }
        };
        n.loc.source = {
            body: "query Chat_ShareResub_ChannelData($channelLogin: String!) {\n  user(login: $channelLogin) {\n    id\n    self {\n      resubNotification {\n        id\n        months\n        token\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    942: function(e, t) {},
    943: function(e, t) {},
    944: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BlockUser_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "query BlockUser_User($targetUserID: ID!) {\n  user(id: $targetUserID) {\n    id\n    displayName\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    945: function(e, t) {},
    946: function(e, t) {},
    947: function(e, t) {},
    948: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_Channels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sourceChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "sourceChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sourceChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 290
            }
        };
        n.loc.source = {
            body: "query RaidNotification_Channels($sourceChannelID: ID!, $targetChannelID: ID!) {\n  sourceChannel: user(id: $sourceChannelID) {\n    id\n    displayName\n    profileImageURL(width: 70)\n  }\n  targetChannel: user(id: $targetChannelID) {\n    id\n    displayName\n    profileImageURL(width: 70)\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    949: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 52
            }
        };
        n.loc.source = {
            body: "query RaidNotification_User {\n  user {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    950: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatRoom_UnblockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnblockUserInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unblockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 128
            }
        };
        n.loc.source = {
            body: "mutation ChatRoom_UnblockUser($input: UnblockUserInput!) {\n  unblockUser(input: $input) {\n    targetUser {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    951: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_BlockedUsers"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "query Chat_BlockedUsers {\n  currentUser {\n    id\n    blockedUsers {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    952: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatWhisperCommand_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 86
            }
        };
        n.loc.source = {
            body: "query ChatWhisperCommand_User($login: String!) {\n  user(login: $login) {\n    id\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    953: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 163
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/cheer-fragment.gql"\n\nquery ChatList_Bits($channelLogin: String!) {\n  user(login: $channelLogin) {\n    id\n    ...cheer\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(835).definitions)), e.exports = i
    },
    954: function(e, t) {},
    955: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatRoom_AutohostPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 161
            }
        };
        n.loc.source = {
            body: "query ChatRoom_AutohostPrompt($login: String!) {\n  currentUser {\n    id\n  }\n\n  user(login: $login) {\n    id\n    displayName\n    profileImageURL(width: 70)\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    956: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UnbanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "createdAt"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 154
            }
        };
        n.loc.source = {
            body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\n  unbanUserFromChatRoom(input: $input) {\n    ban {\n      createdAt\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    957: function(e, t) {},
    958: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_AllowRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AllowRejectedChatMessageInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "allowRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 160
            }
        };
        n.loc.source = {
            body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\n  allowRejectedChatMessage(input: $input) {\n    message {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    959: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_DenyRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DenyRejectedChatMessageInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "denyRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\n  denyRejectedChatMessage(input: $input) {\n    message {\n      id\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    960: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "IncomingRaidLine_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 157
            }
        };
        n.loc.source = {
            body: "query IncomingRaidLine_Channel($channelLogin: String!) {\n  channel: user(login: $channelLogin) {\n    id\n    displayName\n    profileImageURL(width: 50)\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    961: function(e, t) {},
    962: function(e, t) {},
    963: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PinnedCheer_Cheers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "top"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "isTopEnabled"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 381
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/chat-message-fragment.gql"\n\nquery PinnedCheer_Cheers($channelID: ID!) {\n  user(id: $channelID) {\n    id\n    cheer {\n      id\n      top {\n        ...chatMessage\n      }\n      recent {\n        ...chatMessage\n      }\n      recentTimeoutMs\n      settings {\n        isRecentEnabled\n        isTopEnabled\n        recentTimeoutMs\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(964).definitions)), e.exports = i
    },
    964: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "chatMessage"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ChatMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "authorName"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "authorColor"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "author"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "body"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "embeddedEmote"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "setID"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "version"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "bitsUsed"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: null
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 288
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\n\nfragment chatMessage on ChatMessage {\n  id\n  authorName\n  authorColor\n  author {\n    id\n    login\n  }\n  body {\n    content\n    emotes {\n      ...embeddedEmote\n    }\n  }\n  badges {\n    setID\n    version\n  }\n  bitsUsed\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(903).definitions)), e.exports = i
    },
    965: function(e, t) {},
    966: function(e, t) {},
    967: function(e, t) {},
    968: function(e, t) {},
    969: function(e, t) {},
    970: function(e, t) {},
    971: function(e, t) {},
    972: function(e, t) {},
    973: function(e, t) {},
    974: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsCard_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "recentMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "bitsBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "totalBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "nextBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "progress"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "current"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "next"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "teams"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 615
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery BitsCard_Bits($name: ID!) {\n  currentUser {\n    id\n    bitsBalance\n    login\n  }\n  user(id: $name) {\n    id\n    displayName\n    cheer {\n      id\n      settings {\n        emoteMinimumBits\n        cheerMinimumBits\n        recentMinimumBits\n        event\n      }\n    }\n    self {\n      bitsBadge {\n        id\n        totalBits\n        nextBits\n        progress\n        current {\n          ...badge\n        }\n        next {\n          ...badge\n        }\n      }\n    }\n    tournament {\n      id\n      teams {\n        id\n        name\n      }\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(820).definitions)), e.exports = i
    },
    975: function(e, t) {},
    976: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_ChatEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 171
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\n  user(id: $id) {\n    id\n    isPartner\n    stream {\n      id\n      game {\n        id\n        name\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    977: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatInput"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isEmbedded"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isEmbedded"
                                            }
                                        }
                                    }]
                                }],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }, {
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 308
            }
        };
        n.loc.source = {
            body: "query ChatInput($channelLogin: String!, $isEmbedded: Boolean!) {\n  currentUser {\n    id\n    bitsBalance\n    isPartner @include(if: $isEmbedded)\n  }\n  user(login: $channelLogin) {\n    id\n    cheer {\n      id\n      settings {\n        emoteMinimumBits\n        cheerMinimumBits\n        event\n      }\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    978: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatInput_SendCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendCheerInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "sendCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "currentUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "bitsBalance"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        n.loc.source = {
            body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\n  sendCheer(input: $input) {\n    id\n    currentUser {\n      id\n      bitsBalance\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    979: function(e, t) {},
    980: function(e, t) {},
    981: function(e, t) {},
    982: function(e, t) {},
    983: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 154
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_BanUser($input: BanUserFromChatRoomInput!) {\n  banUserFromChatRoom(input: $input) {\n    ban {\n      isPermanent\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    984: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 160
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\n  unbanUserFromChatRoom(input: $input) {\n    ban {\n      isPermanent\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    985: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 202
            }
        };
        n.loc.source = {
            body: "query ViewerCardModActions($targetUserID: ID!, $channelID: ID!) {\n  # This is currently backwards on the server\n  chatRoomBanStatus(channelID: $targetUserID, userID: $channelID) {\n    isPermanent\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    986: function(e, t) {},
    987: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: [],
                                selectionSet: null
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channelUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                alias: null,
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: null
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 521
            }
        };
        n.loc.source = {
            body: "query ViewerCard($targetLogin: String!, $channelID: ID!) {\n  targetUser: user(login: $targetLogin) {\n    id\n    login\n    bannerImageURL\n    displayName\n    profileImageURL(width: 70)\n  }\n  channelUser: user(id: $channelID) {\n    id\n    login\n    displayName,\n    subscriptionProducts {\n      id\n      price\n      url\n      emoteSetID\n      emotes {\n        id\n      }\n    }\n    self {\n      isModerator\n    }\n  }\n  currentUser {\n    login\n    id\n    roles {\n      isSiteAdmin\n      isStaff\n      isGlobalMod\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    988: function(e, t) {},
    989: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 225
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n\nquery ChatList_Badges($channelLogin: String!) {\n  badges {\n    ...badge\n  }\n  user(login: $channelLogin) {\n    id\n    broadcastBadges {\n      ...badge\n    }\n  }\n}\n',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(function(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }(n(820).definitions)), e.exports = i
    },
    990: function(e, t) {},
    991: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    },
                    defaultValue: null
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "chatSettings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "blockLinks"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "rules"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "chatDelayMs"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 235
            }
        };
        n.loc.source = {
            body: "query Chat_ChannelData($channelLogin: String!) {\n  channel: user(login: $channelLogin) {\n    id\n    login\n    displayName\n    chatSettings {\n      blockLinks\n      rules\n      chatDelayMs\n    }\n    self {\n      isModerator\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    992: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_UserData"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: null,
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: null
                            }, {
                                kind: "Field",
                                alias: null,
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }, {
                                        kind: "Field",
                                        alias: null,
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: null
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "query Chat_UserData {\n  user {\n    id\n    displayName\n    login\n    roles {\n      isGlobalMod\n      isSiteAdmin\n      isStaff\n    }\n  }\n}\n",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    }
});
//# sourceMappingURL=pages.popout-chat-1b1c9ca4abb879690e5df81f4e7447ae.js.map