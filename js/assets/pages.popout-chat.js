(window.webpackJsonp = window.webpackJsonp || []).push([
    [94], {
        "+LJB": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("0Log"),
                r = n("/aPz"),
                a = n("0Lz3");

            function o(e, t, n, o) {
                return {
                    topic: n ? Object(r.c)(n) : "",
                    type: i.PubsubMessageType.BitsLeaderboardEvent,
                    mutator: function(e, t) {
                        if (!t || !n) return t;
                        var i = e.top.map(function(e) {
                            return Object(a.b)(e, n.id)
                        });
                        if (t.user) {
                            if (t.user.tournament && t.user.tournament.teamLeaderboard && (t.user.tournament.teamLeaderboard.items.edges = i), t.user.tournament && t.user.tournament.globalLeaderboard && (t.user.tournament.globalLeaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.tournament.self && t.user.tournament.self.globalLeaderboardItem)) {
                                var r = Object(a.b)(e.entry_context.entry, n.id);
                                t.user.tournament.self.globalLeaderboardItem = r.node
                            }
                            if (t.user.cheer && t.user.cheer.leaderboard && (t.user.cheer.leaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.self && t.user.self.bitsLeaderboardItem)) {
                                var s = Object(a.b)(e.entry_context.entry, n.id);
                                t.user.self.bitsLeaderboardItem = s.node
                            }
                        }
                        return t
                    },
                    skip: !n,
                    query: e,
                    variables: {
                        channelID: t
                    }
                }
            }
        },
        "+kC+": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatLine_SubsOnlyUpsell_UserSubscriptionProducts"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 121
                }
            };
            n.loc.source = {
                body: "query ChatLine_SubsOnlyUpsell_UserSubscriptionProducts($id: ID!) {\nuser(id: $id) {\nid\nsubscriptionProducts {\nid\nurl\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "+pBb": function(e, t, n) {
            "use strict";
            n.d(t, "d", function() {
                return i
            }), n.d(t, "e", function() {
                return r
            }), n.d(t, "i", function() {
                return a
            }), n.d(t, "j", function() {
                return o
            }), n.d(t, "q", function() {
                return s
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "g", function() {
                return d
            }), n.d(t, "h", function() {
                return u
            }), n.d(t, "f", function() {
                return m
            }), n.d(t, "l", function() {
                return p
            }), n.d(t, "k", function() {
                return h
            }), n.d(t, "n", function() {
                return f
            }), n.d(t, "m", function() {
                return g
            }), n.d(t, "r", function() {
                return b
            }), n.d(t, "t", function() {
                return v
            }), n.d(t, "s", function() {
                return E
            }), n.d(t, "w", function() {
                return k
            }), n.d(t, "v", function() {
                return C
            }), n.d(t, "a", function() {
                return S
            }), n.d(t, "o", function() {
                return y
            }), n.d(t, "p", function() {
                return N
            }), n.d(t, "u", function() {
                return _
            }), n.d(t, "J", function() {
                return O
            }), n.d(t, "E", function() {
                return I
            }), n.d(t, "K", function() {
                return T
            }), n.d(t, "F", function() {
                return A
            }), n.d(t, "O", function() {
                return D
            }), n.d(t, "L", function() {
                return R
            }), n.d(t, "H", function() {
                return M
            }), n.d(t, "C", function() {
                return L
            }), n.d(t, "I", function() {
                return w
            }), n.d(t, "D", function() {
                return U
            }), n.d(t, "G", function() {
                return B
            }), n.d(t, "B", function() {
                return P
            }), n.d(t, "y", function() {
                return F
            }), n.d(t, "A", function() {
                return j
            }), n.d(t, "M", function() {
                return x
            }), n.d(t, "z", function() {
                return V
            }), n.d(t, "P", function() {
                return H
            }), n.d(t, "S", function() {
                return G
            }), n.d(t, "x", function() {
                return W
            }), n.d(t, "N", function() {
                return Y
            }), n.d(t, "R", function() {
                return z
            }), n.d(t, "Q", function() {
                return q
            });
            var i = "chat.CHAT_HIDDEN",
                r = "chat.CHAT_SHOWN",
                a = "chat.EMOTE_SETS_UPDATED",
                o = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
                s = "chat.ROOM_STATE_UPDATED",
                c = "chat.AUTOMOD_ACTIONS_ENABLED",
                l = "chat.AUTOMOD_ACTIONS_DISABLED",
                d = "chat.EMOTE_PICKER_CLOSED",
                u = "chat.EMOTE_PICKER_OPENED",
                m = "chat.CLOSE_CHAT_RULES",
                p = "chat.MODERATION_ACTIONS_ENABLED",
                h = "chat.MODERATION_ACTIONS_DISABLED",
                f = "chat.MOD_ICONS_ENABLED",
                g = "chat.MOD_ICONS_DISABLED",
                b = "chat.SHOW_CHAT_RULES",
                v = "chat.TIMESTAMPS_ENABLED",
                E = "chat.TIMESTAMPS_DISABLED",
                k = "chat.USERNAME_CONTRAST_ENABLED",
                C = "chat.USERNAME_CONTRAST_DISABLED",
                S = "chat.ADD_COMMAND",
                y = "chat.REMOVE_COMMAND",
                N = "chat.RENDER_SENT_CHAT_MESSAGE",
                _ = "chat.UNHIDE_IGNORED_COMMAND";

            function O() {
                return {
                    type: v
                }
            }

            function I() {
                return {
                    type: E
                }
            }

            function T() {
                return {
                    type: k
                }
            }

            function A() {
                return {
                    type: C
                }
            }

            function D() {
                return {
                    type: r
                }
            }

            function R() {
                return {
                    type: i
                }
            }

            function M() {
                return {
                    type: c
                }
            }

            function L() {
                return {
                    type: l
                }
            }

            function w() {
                return {
                    type: p
                }
            }

            function U() {
                return {
                    type: h
                }
            }

            function B() {
                return {
                    type: f
                }
            }

            function P() {
                return {
                    type: g
                }
            }

            function F(e, t) {
                return {
                    type: o,
                    channelLogin: e,
                    duration: t
                }
            }

            function j() {
                return {
                    type: d
                }
            }

            function x() {
                return {
                    type: u
                }
            }

            function V() {
                return {
                    type: m
                }
            }

            function H() {
                return {
                    type: b
                }
            }

            function G(e) {
                return {
                    type: s,
                    roomState: e
                }
            }

            function W(e, t) {
                return {
                    type: S,
                    command: e.toLowerCase(),
                    handler: t
                }
            }

            function Y(e, t) {
                return {
                    type: y,
                    command: e.toLowerCase(),
                    handler: t
                }
            }

            function z(e) {
                return {
                    type: N,
                    customEvent: e
                }
            }

            function q(e) {
                return {
                    type: _,
                    userID: e
                }
            }
        },
        "/Kya": function(e, t, n) {},
        "/aPz": function(e, t, n) {
            "use strict";
            n.d(t, "e", function() {
                return o
            }), n.d(t, "h", function() {
                return s
            }), n.d(t, "i", function() {
                return c
            }), n.d(t, "j", function() {
                return l
            }), n.d(t, "G", function() {
                return d
            }), n.d(t, "H", function() {
                return u
            }), n.d(t, "n", function() {
                return m
            }), n.d(t, "A", function() {
                return p
            }), n.d(t, "F", function() {
                return h
            }), n.d(t, "r", function() {
                return f
            }), n.d(t, "s", function() {
                return g
            }), n.d(t, "o", function() {
                return b
            }), n.d(t, "t", function() {
                return v
            }), n.d(t, "v", function() {
                return E
            }), n.d(t, "l", function() {
                return k
            }), n.d(t, "d", function() {
                return C
            }), n.d(t, "c", function() {
                return S
            }), n.d(t, "B", function() {
                return y
            }), n.d(t, "b", function() {
                return N
            }), n.d(t, "a", function() {
                return _
            }), n.d(t, "E", function() {
                return O
            }), n.d(t, "m", function() {
                return I
            }), n.d(t, "C", function() {
                return T
            }), n.d(t, "D", function() {
                return A
            }), n.d(t, "I", function() {
                return D
            }), n.d(t, "q", function() {
                return R
            }), n.d(t, "w", function() {
                return M
            }), n.d(t, "f", function() {
                return L
            }), n.d(t, "g", function() {
                return w
            }), n.d(t, "x", function() {
                return U
            }), n.d(t, "k", function() {
                return B
            }), n.d(t, "p", function() {
                return P
            }), n.d(t, "u", function() {
                return F
            }), n.d(t, "z", function() {
                return j
            }), n.d(t, "y", function() {
                return x
            });
            var i = n("/7QA"),
                r = n("0Log"),
                a = n("geRD");

            function o(e) {
                return r.PubsubTopic.BroadcastSettingsUpdate + "." + e
            }

            function s(e) {
                return r.PubsubTopic.ChatRoom + "." + e
            }

            function c(e) {
                return r.PubsubTopic.ChatRoomsChannel + "." + e
            }

            function l(e) {
                return r.PubsubTopic.ChatRoomsUser + "." + e
            }

            function d(e) {
                return r.PubsubTopic.VideoPlayback + "." + e
            }

            function u(e) {
                return r.PubsubTopic.VideoThumbnailProcessing + "." + e
            }

            function m(e) {
                return r.PubsubTopic.ImageUpload + "." + e
            }

            function p(e) {
                return r.PubsubTopic.UploadService + "." + e
            }

            function h(e) {
                return r.PubsubTopic.VideoPlaybackById + "." + e
            }

            function f(e) {
                return r.PubsubTopic.PayoutOnboardingEvents + "." + e
            }

            function g(e) {
                return r.PubsubTopic.Presence + "." + e
            }

            function b(e, t) {
                return r.PubsubTopic.ModerationActionsByUserAndChannel + "." + e + "." + t
            }

            function v(e) {
                return r.PubsubTopic.Raid + "." + e
            }

            function E(e) {
                return r.PubsubTopic.StreamChange + "." + e
            }

            function k(e) {
                return r.PubsubTopic.Friendship + "." + e
            }

            function C(e) {
                return r.PubsubTopic.ChannelBitsPinEvents + "." + e
            }

            function S(e) {
                return r.PubsubTopic.BitsLeaderboardEvents + "." + e.id
            }

            function y(e) {
                return r.PubsubTopic.UserBitsUpdates + "." + e
            }

            function N() {
                return r.PubsubTopic.BitsCampaignEvents + ".updates"
            }

            function _(e) {
                return r.PubsubTopic.ChannelBitsPinEvents + "." + e
            }

            function O(e) {
                return r.PubsubTopic.UserSubscribeEvents + "." + e
            }

            function I(e) {
                return r.PubsubTopic.CampaignGlobalEvents + "." + e
            }

            function T(e) {
                return r.PubsubTopic.CampaignUserEvents + "." + e
            }

            function A(e) {
                return r.PubsubTopic.UserCommerceEvents + "." + e
            }

            function D(e) {
                return r.PubsubTopic.Whispers + "." + e
            }

            function R(e) {
                return r.PubsubTopic.OnsiteNotifications + "." + e
            }

            function M(e) {
                return r.PubsubTopic.StreamChatRoom + "." + e
            }

            function L(e) {
                return r.PubsubTopic.ChannelEventUpdates + "." + e
            }

            function w(e) {
                return r.PubsubTopic.ChannelSquadUpdates + "." + e
            }

            function U(e) {
                return r.PubsubTopic.SubscribersCSV + "." + e
            }

            function B(e) {
                return r.PubsubTopic.CheerbombEventsTopic + "." + e
            }

            function P(e) {
                return r.PubsubTopic.MysteryGift + "." + e
            }

            function F(e) {
                return r.PubsubTopic.SquadUpdates + "." + e
            }

            function j(e) {
                return i.k.subscribe({
                    topic: e.topic,
                    onMessage: function(t) {
                        t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(a.e)(e.query, e.variables, function(n) {
                            return e.mutator(t, n)
                        }, function(n) {
                            return !!e.skipMessage && e.skipMessage(t, n)
                        })
                    }
                })
            }

            function x(e) {
                return i.k.subscribe({
                    topic: e.topic,
                    onMessage: function(t) {
                        t.type && t.type !== e.type || Object(a.d)({
                            fragment: e.fragment,
                            id: e.id,
                            mutator: function(n) {
                                return e.mutator(t, n)
                            }
                        })
                    }
                })
            }
        },
        "/gva": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "CurrentUserBannedStatus"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 135
                }
            };
            n.loc.source = {
                body: "query CurrentUserBannedStatus($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nself {\nbanStatus {\nisPermanent\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "04j6": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Core_Services_Spade_ChatEvent_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPartner"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "game"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 116
                }
            };
            n.loc.source = {
                body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "0FG4": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "c", function() {
                return s
            }), n.d(t, "b", function() {
                return l
            });
            var i, r = n("RcPG"),
                a = n("a1OF");
            ! function(e) {
                e[e.Position = 0] = "Position", e[e.Token = 1] = "Token"
            }(i || (i = {}));
            var o = "0";

            function s(e, t, n) {
                var o = n.type === i.Position ? t : e,
                    s = n.map[o];
                if (s) {
                    var c = function(e, t) {
                        return {
                            images: {
                                sources: {
                                    "1x": Object(a.d)(t, 1),
                                    "2x": Object(a.d)(t, 2),
                                    "4x": Object(a.d)(t, 4)
                                },
                                themed: !1
                            },
                            alt: e
                        }
                    }(e, s.id);
                    return {
                        type: r.a.Emote,
                        content: c
                    }
                }
                return null
            }
            var c = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            };

            function l(e) {
                for (var t = {}, n = 0, i = e; n < i.length; n++) {
                    var r = i[n];
                    if (r && r.emotes)
                        for (var a = 0, s = r.emotes; a < s.length; a++) {
                            var l = s[a];
                            if (l && l.id && l.token)
                                for (var d = 0, u = c[l.token] || [l.token]; d < u.length; d++) {
                                    var m = u[d];
                                    t[m] && r.id === o || (t[m] = {
                                        id: l.id,
                                        token: m
                                    })
                                }
                        }
                }
                return t
            }
        },
        "0Log": function(e, t, n) {
            "use strict";
            var i = n("VSaV");
            n.o(i, "FrienshipChangeType") && n.d(t, "FrienshipChangeType", function() {
                return i.FrienshipChangeType
            }), n.o(i, "ModerationActions") && n.d(t, "ModerationActions", function() {
                return i.ModerationActions
            }), n.o(i, "PubsubMessageType") && n.d(t, "PubsubMessageType", function() {
                return i.PubsubMessageType
            }), n.o(i, "PubsubTopic") && n.d(t, "PubsubTopic", function() {
                return i.PubsubTopic
            }), n.o(i, "SquadStatus") && n.d(t, "SquadStatus", function() {
                return i.SquadStatus
            }), n.o(i, "TargetedModerationActions") && n.d(t, "TargetedModerationActions", function() {
                return i.TargetedModerationActions
            });
            var r = n("By5U");
            n.o(r, "FrienshipChangeType") && n.d(t, "FrienshipChangeType", function() {
                return r.FrienshipChangeType
            }), n.o(r, "ModerationActions") && n.d(t, "ModerationActions", function() {
                return r.ModerationActions
            }), n.o(r, "PubsubMessageType") && n.d(t, "PubsubMessageType", function() {
                return r.PubsubMessageType
            }), n.o(r, "PubsubTopic") && n.d(t, "PubsubTopic", function() {
                return r.PubsubTopic
            }), n.o(r, "SquadStatus") && n.d(t, "SquadStatus", function() {
                return r.SquadStatus
            }), n.o(r, "TargetedModerationActions") && n.d(t, "TargetedModerationActions", function() {
                return r.TargetedModerationActions
            });
            var a = n("WQCf");
            n.d(t, "FrienshipChangeType", function() {
                return a.a
            }), n.d(t, "ModerationActions", function() {
                return a.b
            }), n.d(t, "PubsubMessageType", function() {
                return a.c
            }), n.d(t, "PubsubTopic", function() {
                return a.d
            }), n.d(t, "SquadStatus", function() {
                return a.e
            }), n.d(t, "TargetedModerationActions", function() {
                return a.f
            })
        },
        "0Lz3": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("uYEN"),
                a = n("5zXJ");

            function o(e) {
                var t = [],
                    n = {};
                return e.forEach(function(e) {
                    var o = e.tiers.map(function(e) {
                        return c(e)
                    });
                    "Cheer" === e.prefix && o.push(function() {
                        var e = ["DARK", "LIGHT"],
                            t = ["static", "animated"],
                            n = [];
                        return [1, 1.5, 2, 3, 4].forEach(function(i) {
                            e.forEach(function(e) {
                                t.forEach(function(t) {
                                    n.push({
                                        url: a.a + "/cheer/" + e.toLowerCase() + "/" + t + "/100000/" + i + "." + ("static" === t ? "png" : "gif"),
                                        isAnimated: "animated" === t,
                                        theme: e,
                                        dpiScale: i
                                    })
                                })
                            })
                        }), c({
                            id: "Cheer:100000",
                            bits: 1e5,
                            canCheer: !1,
                            canShowInBitsCard: !1,
                            color: a.k[r.a.Yellow],
                            images: n
                        })
                    }()), o.sort(function(e, t) {
                        return t.bits - e.bits
                    });
                    var s = i.__assign({}, e, {
                        indexedTiers: new Map(o.map(function(e) {
                            return [e.bits, e]
                        })),
                        orderedTiers: o
                    });
                    t.push(s), n[s.prefix.toLowerCase()] = s
                }), {
                    indexedActions: n,
                    orderedActions: t
                }
            }

            function s(e, t) {
                return {
                    cursor: "" + e.rank,
                    node: {
                        id: t + "_" + e.entry_key,
                        entryKey: e.entry_key,
                        rank: e.rank,
                        score: e.score,
                        __typename: "BitsLeaderboardItem"
                    },
                    __typename: "BitsLeaderboardItemEdge"
                }
            }

            function c(e) {
                var t = new Map,
                    n = new Map,
                    r = new Map,
                    a = new Map;
                return e.images.forEach(function(e) {
                    "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? a.set(e.dpiScale, e.url) : r.set(e.dpiScale, e.url)
                }), i.__assign({
                    indexedImages: {
                        LIGHT: {
                            static: t,
                            animated: n
                        },
                        DARK: {
                            static: r,
                            animated: a
                        }
                    }
                }, e)
            }
        },
        "0WFu": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("3Bft");

            function r(e) {
                return [i.b.Prime, i.b.Custom].includes(e) ? null : parseInt(e, 10) / 1e3
            }
        },
        "1Rv/": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_UnbanUserFromChatRoom"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnbanUserFromChatRoomInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unbanUserFromChatRoom"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 132
                }
            };
            n.loc.source = {
                body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "1rIY": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("2Ygb");

            function s(e, t) {
                var n = r.createContext(t),
                    s = n.Consumer,
                    c = n.Provider;
                return {
                    withContext: function(t) {
                        return function(n) {
                            var a;
                            return (a = function(e) {
                                function a() {
                                    return null !== e && e.apply(this, arguments) || this
                                }
                                return i.__extends(a, e), a.prototype.render = function() {
                                    var e = this;
                                    return r.createElement(s, null, function(a) {
                                        var o = t(a);
                                        return r.createElement(n, i.__assign({}, e.props, o))
                                    })
                                }, a
                            }(r.Component)).displayName = Object(o.a)("With" + e, n), a
                        }
                    },
                    InnerProvider: function(t) {
                        function n() {
                            return null !== t && t.apply(this, arguments) || this
                        }
                        return i.__extends(n, t), n.prototype.componentDidMount = function() {
                            "object" === typeof this.props.value && this.props.value || a.j.error(new Error(n.displayName + " rendered without an appropriate initial value"), "Set an initial value in your provider component at mount time.")
                        }, n.prototype.render = function() {
                            return r.createElement(c, {
                                value: this.props.value
                            }, this.props.children)
                        }, n.displayName = "Inner" + e + "Provider", n
                    }(r.Component)
                }
            }
        },
        "2+sX": function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("Ue10"),
                c = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.state = {
                            isError: !1,
                            options: null,
                            balloonID: ""
                        }, n.logger = o.o.logger.withCategory("balloon-layer"), n.historyUnlisten = null, n.handleHistoryChange = function() {
                            n.hideBalloon()
                        }, i = n, n
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.historyUnlisten = o.o.history.listen(this.handleHistoryChange)
                    }, t.prototype.componentDidCatch = function(e, t) {
                        var n = this;
                        this.setState({
                            isError: !0
                        }, function() {
                            o.o.stats.recordComponentError("BalloonLayer"), n.logger.error(e, "A unhandled exception occurred in the component hierarchy", {
                                info: t
                            })
                        })
                    }, t.prototype.componentDidUpdate = function(e, t) {
                        var n = t.options,
                            i = n && n.onBalloonUpdate,
                            r = this.state.options,
                            a = r && r.onBalloonUpdate;
                        n !== r && (i && i(this.state.balloonID), a && a !== i && a(this.state.balloonID))
                    }, t.prototype.componentWillUnmount = function() {
                        this.historyUnlisten && this.historyUnlisten()
                    }, t.prototype.render = function() {
                        if (this.state.isError) return null;
                        var e = null;
                        if (this.state.options) {
                            var t = {
                                left: this.state.options.from.x,
                                top: this.state.options.from.y
                            };
                            e = a.createElement(s.Na, {
                                className: "balloon-layer",
                                position: s.db.Fixed,
                                zIndex: s.ac.Above
                            }, a.createElement("div", {
                                style: t
                            }, a.createElement(s.u, {
                                direction: this.state.options.direction ? this.state.options.direction : s.v.Right,
                                size: this.state.options.size || s.w.Large,
                                show: !0,
                                tailOffset: this.state.options.tailOffset
                            }, this.state.options.content)))
                        }
                        return e
                    }, t.prototype.showBalloon = function(e, t) {
                        this.setState({
                            options: e,
                            balloonID: t
                        })
                    }, t.prototype.hideBalloon = function() {
                        this.setState({
                            options: null,
                            balloonID: ""
                        })
                    }, t
                }(a.Component);

            function l(e, t) {
                if (i && e.ref) {
                    var n = function(e, t) {
                        var n = r.__assign({}, e),
                            i = 0;
                        e.y + t + 20 > window.innerHeight && (n.y = window.innerHeight - t - 20, i = e.y - n.y);
                        return {
                            coords: n,
                            offset: i
                        }
                    }(function(e, t) {
                        var n = t.getBoundingClientRect();
                        switch (e) {
                            case s.v.Bottom:
                            case s.v.BottomLeft:
                                return {
                                    x: n.left,
                                    y: n.bottom
                                };
                            case s.v.BottomCenter:
                                return {
                                    x: n.left + n.width / 2,
                                    y: n.bottom
                                };
                            case s.v.BottomRight:
                                return {
                                    x: n.right,
                                    y: n.bottom
                                };
                            case s.v.Left:
                            case s.v.Top:
                            case s.v.TopLeft:
                                return {
                                    x: n.left,
                                    y: n.top
                                };
                            case s.v.LeftCenter:
                                return {
                                    x: n.left,
                                    y: n.top + n.height / 2
                                };
                            case s.v.TopCenter:
                                return {
                                    x: n.left + n.width / 2,
                                    y: n.top
                                };
                            case s.v.TopRight:
                            case s.v.Right:
                                return {
                                    x: n.right,
                                    y: n.top
                                };
                            case s.v.RightCenter:
                                return {
                                    x: n.right,
                                    y: n.top + n.height / 2
                                };
                            default:
                                return {
                                    x: n.left,
                                    y: n.bottom
                                }
                        }
                    }(e.direction, e.ref), e.contentHeight);
                    i.showBalloon({
                        content: e.content,
                        direction: e.direction,
                        size: e.size,
                        from: {
                            x: n.coords.x,
                            y: n.coords.y
                        },
                        tailOffset: n.offset,
                        timeout: e.timeout,
                        onBalloonUpdate: e.onBalloonUpdate
                    }, t)
                }
            }

            function d() {
                i && i.hideBalloon()
            }
            var u = n("17x9"),
                m = n("4VQm"),
                p = n("2Ygb"),
                h = n("f00E"),
                f = 400;

            function g() {
                return function(e) {
                    return function(t) {
                        function n() {
                            var e = null !== t && t.apply(this, arguments) || this;
                            return e.balloonID = Object(h.a)(), e.scrollListenerRegistered = !1, e.hoveringBalloon = !1, e.currentBalloonID = "", e.show = function(t) {
                                e.clearTimeoutAndRun(function() {
                                    t.closeOnScroll ? e.addScrollListener() : e.scrollListenerRegistered && e.removeScrollListener(), e.autoclose = t.autoclose, l({
                                        direction: t.direction,
                                        ref: t.ref,
                                        content: e.getBalloonContent(t.content),
                                        contentHeight: t.contentHeight,
                                        autoclose: t.autoclose,
                                        size: t.size,
                                        onBalloonUpdate: e.handleBalloonUpdate
                                    }, e.balloonID)
                                }, t.timeout)
                            }, e.hide = function(t) {
                                e.clearTimeoutAndRun(function() {
                                    (!e.hoveringBalloon || t && t.force) && (e.removeScrollListener(), e.balloonID === e.currentBalloonID && d())
                                }, t && t.timeout)
                            }, e.clearTimeoutAndRun = function(t, n) {
                                void 0 === n && (n = 0), e.displayTimeout && (clearTimeout(e.displayTimeout), e.displayTimeout = 0), e.displayTimeout = setTimeout(function() {
                                    t(), e.displayTimeout = 0
                                }, n)
                            }, e.setRef = function(t) {
                                e.balloonRef !== t && (e.removeMouseoverListeners(), e.balloonRef = t, e.addMouseoverListeners(t))
                            }, e.addMouseoverListeners = function(t) {
                                t && (t.addEventListener("mouseenter", e.handleMouseEnter, !0), t.addEventListener("mouseleave", e.handleMouseLeave))
                            }, e.removeMouseoverListeners = function() {
                                e.balloonRef && (e.balloonRef.removeEventListener("mouseenter", e.handleMouseEnter, !0), e.balloonRef.removeEventListener("mouseleave", e.handleMouseLeave))
                            }, e.handleMouseEnter = function() {
                                e.hoveringBalloon = !0
                            }, e.handleMouseLeave = function() {
                                e.hoveringBalloon = !1, e.displayTimeout || e.hide({
                                    timeout: f
                                })
                            }, e.handleBalloonUpdate = function(t) {
                                e.balloonID !== t && (e.removeScrollListener(), e.hoveringBalloon = !1, e.removeMouseoverListeners()), e.currentBalloonID = t
                            }, e
                        }
                        return r.__extends(n, t), n.prototype.componentWillUnmount = function() {
                            this.removeScrollListener()
                        }, n.prototype.render = function() {
                            var t = {
                                balloonLayer: {
                                    show: this.show,
                                    hide: this.hide
                                }
                            };
                            return a.createElement(e, r.__assign({}, this.props, t))
                        }, n.prototype.checkVisible = function(e, t) {
                            t && t.type !== m.a.Resize && this.scrollListenerRegistered && this.hide()
                        }, n.prototype.getBalloonContent = function(e) {
                            return a.createElement("div", {
                                ref: this.autoclose && this.setRef || void 0
                            }, e)
                        }, n.prototype.addScrollListener = function() {
                            this.context && this.context.registerReceiver && (this.unregister = this.context.registerReceiver(this), this.scrollListenerRegistered = !0)
                        }, n.prototype.removeScrollListener = function() {
                            this.unregister && (this.unregister(), this.scrollListenerRegistered = !1)
                        }, n.displayName = Object(p.a)(n.name, e), n.contextTypes = {
                            registerReceiver: u.func
                        }, n
                    }(a.Component)
                }
            }
            n.d(t, "a", function() {
                return c
            }), n.d(t, !1, function() {}), n.d(t, "d", function() {
                return l
            }), n.d(t, "c", function() {
                return d
            }), n.d(t, !1, function() {}), n.d(t, "e", function() {
                return g
            }), n.d(t, !1, function() {}), n.d(t, "b", function() {
                return f
            })
        },
        "222m": function(e, t, n) {},
        "26nv": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_ChannelData"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "chatSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "blockLinks"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "rules"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isModerator"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 166
                }
            };
            n.loc.source = {
                body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\n}\nself {\nisModerator\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "2C+f": function(e, t, n) {},
        "2D+f": function(e, t, n) {},
        "2Dht": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "WhisperThread"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "whisperThread"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "userLastMessageRead"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sentAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "unreadMessagesCount"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "messages"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "20"
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cursor"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "nonce"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "content"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "emotes"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "emoteID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "setID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "from"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "to"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "__typename"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "__typename"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "from"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "sentAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "editedAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "deletedAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "__typename"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 347
                }
            };
            n.loc.source = {
                body: "query WhisperThread($id: ID!) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n__typename\n}\nunreadMessagesCount\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n__typename\n}\n__typename\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n__typename\n}\n__typename\n}\n__typename\n}\n__typename\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "2EzP": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                r = Object(i.a)("MessageHandler"),
                a = (r.InnerProvider, r.withChatServiceProvider),
                o = (0, r.withContext)(function(e) {
                    return {
                        messageHandlerAPI: e.serviceAPI,
                        setMessageHandlerAPI: e.setServiceAPI
                    }
                })
        },
        "2e6W": function(e, t, n) {},
        "3Bft": function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return a
                }),
                function(e) {
                    e.Week = "WEEK", e.Month = "MONTH", e.Year = "YEAR", e.OneTime = "ONE_TIME"
                }(i || (i = {})),
                function(e) {
                    e.PercentOff = "percent_off", e.FixedValueOff = "fixed_value_off"
                }(r || (r = {}));
            var a = {
                Prime: "prime",
                Tier1: "1000",
                Tier2: "2000",
                Tier3: "3000",
                Custom: "Custom"
            }
        },
        "3GF+": function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("Ue10");
            n("jPLR");

            function a(e) {
                e.stopPropagation()
            }
            var o = function(e) {
                return i.createElement(r.Na, {
                    display: r.W.InlineBlock
                }, i.createElement("div", {
                    className: "viewer-card-drag-cancel",
                    onMouseDown: a
                }, e.children))
            };
            n.d(t, "a", function() {
                return o
            })
        },
        "3HtZ": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Mods"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "mods"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "100"
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "login"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 94
                }
            };
            n.loc.source = {
                body: "query Mods($id: ID!) {\nuser(id: $id) {\nid\nmods(first: 100) {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "3YIm": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "SendWhisper"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SendWhisperInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "sendWhisper"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "nonce"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "content"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "content"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emotes"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "emoteID"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "setID"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "from"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "to"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "__typename"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "from"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "__typename"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "sentAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "editedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "deletedAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "thread"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "participants"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "self"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "whisperPermissions"
                                                                    },
                                                                    arguments: [],
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "receive"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "__typename"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "__typename"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 352
                }
            };
            n.loc.source = {
                body: "mutation SendWhisper($input: SendWhisperInput!) {\nsendWhisper(input: $input) {\nmessage {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n__typename\n}\n__typename\n}\nfrom {\nid\n__typename\n}\nsentAt\neditedAt\ndeletedAt\nthread {\nid\nparticipants {\nid\nself {\nwhisperPermissions {\nreceive\n}\n}\n}\n}\n__typename\n}\nerror {\ncode\n__typename\n}\n__typename\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4HoE": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ModUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ModUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "modUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "target"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 119
                }
            };
            n.loc.source = {
                body: "mutation ModUser($input: ModUserInput!){\nmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4Wd7": function(e, t, n) {
            "use strict";
            var i, r = n("TSYQ"),
                a = n("q1tI"),
                o = n("/7QA"),
                s = n("XmgI"),
                c = n("4h+t"),
                l = n("x1M1"),
                d = n("Ue10");
            n("RRSb");
            ! function(e) {
                e[e.Large = 4] = "Large", e[e.Medium = 3] = "Medium", e[e.Small = 2] = "Small", e[e.ExtraSmall = 1.5] = "ExtraSmall", e[e.ExtremelySmall = 1] = "ExtremelySmall"
            }(i || (i = {}));
            var u = function(e) {
                var t = e.bitsConfig && e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
                t || (t = Object(c.b)());
                var n = t.orderedTiers.find(function(t) {
                    return t.bits <= (e.amount || 100)
                });
                n || (n = t.orderedTiers[0]);
                var u = e.display === d.W.Inline || e.display === d.W.InlineFlex || e.display === d.W.InlineBlock,
                    m = null,
                    p = r("cheermote-for-amount__cheer-amount", {
                        "cheermote-for-amount__display--table-cell": !u
                    }, {
                        "cheermote-for-amount__cheer-amount--medium": e.size === i.Medium
                    }, {
                        "cheermote-for-amount__cheer-amount--small": e.size === i.Small || e.size === i.ExtraSmall
                    }, {
                        "cheermote-for-amount__cheer-amount--extremely-small": e.size === i.ExtremelySmall
                    });
                if (void 0 !== e.amount && e.showAmount) {
                    var h = e.formattedNumber ? Object(o.e)(e.amount) : e.amount;
                    m = a.createElement(d.Na, {
                        padding: e.size === i.Small ? 0 : void 0,
                        textAlign: e.size === i.Small ? d.Jb.Center : void 0
                    }, a.createElement("strong", {
                        className: p,
                        style: {
                            color: n.color
                        }
                    }, h))
                }
                var f = r("cheermote-for-amount__cheer-image", {
                        "cheermote-for-amount__display--table-cell": !u
                    }, {
                        "cheermote-for-amount__cheer--inline": u
                    }, {
                        "cheermote-for-amount__cheer-image--small": e.size === i.Small
                    }, {
                        "cheermote-for-amount__cheer-image--extra-small": e.size === i.ExtraSmall
                    }, {
                        "cheermote-for-amount__cheer-image--extremely-small": e.size === i.ExtremelySmall
                    }),
                    g = a.createElement(l.a, {
                        className: f,
                        sources: Object(s.c)(n, e.size || i.Large, e.animated)
                    });
                return e.showImage || (g = null), a.createElement(d.Na, {
                    className: "cheermote-for-amount",
                    alignItems: e.alignItems,
                    display: e.display
                }, a.createElement("span", null, g, m))
            };
            n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return u
            })
        },
        "4h+t": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return u
            });
            var i = n("uYEN"),
                r = n("5zXJ"),
                a = {
                    Cheer: r.g,
                    Kreygasm: r.g,
                    Kappa: r.g,
                    Muxy: r.h,
                    Streamlabs: r.h,
                    SwiftRage: r.g,
                    VoHiYo: r.g
                },
                o = ["LIGHT", "DARK"],
                s = [1, 1.5, 2, 3, 4],
                c = null;

            function l() {
                if (!c) {
                    var e = [],
                        t = {};
                    Object.keys(a).forEach(function(n) {
                        var i = m(n, a[n]);
                        e.push(i), t[n.toLowerCase()] = i
                    }), c = {
                        orderedActions: e,
                        indexedActions: t
                    }
                }
                return c
            }
            var d = null;

            function u() {
                return d || (d = function(e) {
                    if (c) return c.indexedActions[e.toLowerCase()];
                    return m(e, a[e])
                }("Cheer")), d
            }

            function m(e, t) {
                var n = [i.a.Red, i.a.Blue, i.a.Green, i.a.Purple, i.a.Gray],
                    r = new Map,
                    a = [];
                if ("Cheer" === e) {
                    var o = p(e, i.a.Yellow);
                    r.set(i.a.Yellow, o), a.push(o)
                }
                return a.push.apply(a, n.map(function(t) {
                    var n = p(e, t);
                    return r.set(t, n), n
                })), {
                    prefix: e,
                    type: t,
                    tiers: a,
                    orderedTiers: a,
                    indexedTiers: r
                }
            }

            function p(e, t) {
                for (var n = [], i = {}, a = 0, c = o; a < c.length; a++)
                    for (var l = c[a], d = 0, u = s; d < u.length; d++) {
                        var m = u[d];
                        i[l] || (i[l] = {
                            animated: new Map,
                            static: new Map
                        });
                        var p = h(e, l, !0, t, m);
                        n.push(p), i[l].animated.set(m, p.url);
                        var f = h(e, l, !1, t, m);
                        n.push(f), i[l].static.set(m, f.url)
                    }
                return {
                    id: e + ";" + t,
                    canCheer: t <= r.p,
                    canShowInBitsCard: !0,
                    bits: t,
                    color: r.k[t],
                    images: n,
                    indexedImages: i
                }
            }

            function h(e, t, n, i, r) {
                var a = n ? "gif" : "png";
                return {
                    theme: t,
                    isAnimated: n,
                    dpiScale: r,
                    url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + r + "." + a
                }
            }
        },
        "4w0E": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_BanUserFromChatRoom"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BanUserFromChatRoomInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "banUserFromChatRoom"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 126
                }
            };
            n.loc.source = {
                body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "4zGI": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_DenyRejectedCheerMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DenyRejectedCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "denyRejectedCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 115
                }
            };
            n.loc.source = {
                body: "mutation Chat_DenyRejectedCheerMessage($input: DenyRejectedCheerInput!) {\ndenyRejectedCheer(input: $input) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "5Siz": function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "b", function() {
                    return i
                }), n.d(t, "a", function() {
                    return r
                }),
                function(e) {
                    e.PopoutChat = "popout_chat", e.Chat = "chat", e.LiveDashButton = "live_dashboard_button", e.LiveDashHotkey = "live_dashboard_hotkey", e.LiveDashChat = "live_dashboard_chat"
                }(i || (i = {}));
            var r = 140
        },
        "5g1g": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("wUQP"),
                o = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return this.props.incremental && Object(a.c)(this.props.name) || Object(a.b)(this.props.name) ? this.props.children : null
                    }, t
                }(r.Component),
                s = o;
            n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            })
        },
        "5zXJ": function(e, t, n) {
            "use strict";
            n.d(t, "v", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "t", function() {
                return l
            }), n.d(t, "n", function() {
                return d
            }), n.d(t, "p", function() {
                return u
            }), n.d(t, "q", function() {
                return m
            }), n.d(t, "o", function() {
                return p
            }), n.d(t, "r", function() {
                return h
            }), n.d(t, "l", function() {
                return f
            }), n.d(t, "m", function() {
                return g
            }), n.d(t, "j", function() {
                return b
            }), n.d(t, "g", function() {
                return v
            }), n.d(t, "e", function() {
                return E
            }), n.d(t, "i", function() {
                return k
            }), n.d(t, "h", function() {
                return C
            }), n.d(t, "f", function() {
                return S
            }), n.d(t, "k", function() {
                return y
            }), n.d(t, "u", function() {
                return N
            }), n.d(t, "s", function() {
                return _
            }), n.d(t, "d", function() {
                return O
            });
            var i, r = n("uYEN"),
                a = {
                    ERROR_DISPLAY_TIMEOUT: 5e3,
                    GET_BALANCE_RATE_LIMIT: 5e3,
                    UNDO_PROMPT_DURATION: 5e3
                },
                o = "https://d3aqoihi2n8ty8.cloudfront.net",
                s = o + "/cheer",
                c = o + "/actions",
                l = "bonus",
                d = 8e5,
                u = 1e5,
                m = 25e4,
                p = 500,
                h = 1e3,
                f = "cheer",
                g = r.a.Purple,
                b = "UNKNOWN",
                v = "FIRST_PARTY",
                E = "CUSTOM",
                k = "SPONSORED",
                C = "THIRD_PARTY",
                S = "DISPLAY_ONLY",
                y = ((i = {})[r.a.Gray] = "#979797", i[r.a.Purple] = "#9c3ee8", i[r.a.Green] = "#1db2a5", i[r.a.Blue] = "#0099fe", i[r.a.Red] = "#f43021", i[r.a.Yellow] = "#f3a71a", i),
                N = "bits_sponsored_cheermotes",
                _ = "bits_sponsored_cheermotes_announcement",
                O = "bits_charity_event"
        },
        "5zf8": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return c
            });
            var i, r, a = n("/7QA");

            function o(e, t) {
                switch (e) {
                    case i.Second:
                        return Object(a.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                            secondCount: t
                        }, "formatDuration");
                    case i.Minute:
                        return Object(a.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                            minuteCount: t
                        }, "formatDuration");
                    case i.Hour:
                        return Object(a.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                            hourCount: t
                        }, "formatDuration");
                    case i.Day:
                        return Object(a.d)("{dayCount, plural, one {# day} other {# days}}", {
                            dayCount: t
                        }, "formatDuration");
                    case i.Week:
                        return Object(a.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                            weekCount: t
                        }, "formatDuration");
                    case i.Month:
                        return Object(a.d)("{monthCount, plural, one {# month} other {# months}}", {
                            monthCount: t
                        }, "formatDuration");
                    default:
                        return ""
                }
            }

            function s(e, t) {
                switch (e) {
                    case i.Second:
                        return Object(a.d)("{secondCount}s", {
                            secondCount: t
                        }, "formatDuration");
                    case i.Minute:
                        return Object(a.d)("{minuteCount}m", {
                            minuteCount: t
                        }, "formatDuration");
                    case i.Hour:
                        return Object(a.d)("{hourCount}h", {
                            hourCount: t
                        }, "formatDuration");
                    case i.Day:
                        return Object(a.d)("{dayCount}d", {
                            dayCount: t
                        }, "formatDuration");
                    case i.Week:
                        return Object(a.d)("{weekCount}w", {
                            weekCount: t
                        }, "formatDuration");
                    case i.Month:
                        return Object(a.d)("{monthCount}mo", {
                            monthCount: t
                        }, "formatDuration");
                    default:
                        return ""
                }
            }

            function c(e, t) {
                var n;
                switch (void 0 === t && (t = r.Humanized), t === r.ClockAuto && (t = e >= 3600 ? r.ClockHMS : r.ClockMS), t) {
                    case r.ClockHM:
                    case r.ClockHMS:
                        n = i.Hour;
                        break;
                    case r.ClockMS:
                        n = i.Minute
                }
                var c = 2;
                t === r.ClockHMS && (c = 3);
                var d = function(e, t) {
                        void 0 === t && (t = i.Month);
                        var n = {};
                        return n.seconds = e, e < 60 || t === i.Second ? n : (n.minutes = Math.floor(e / 60), n.seconds = e % 60, n.minutes < 60 || t === i.Minute ? n : (n.hours = Math.floor(n.minutes / 60), n.minutes = n.minutes % 60, n.hours < 24 || t === i.Hour ? n : (n.days = Math.floor(n.hours / 24), n.hours = n.hours % 24, n.days < 7 || t === i.Day ? n : n.days <= 26 || t === i.Week ? (n.weeks = Math.floor(n.days / 7), n.days = n.days % 7, n) : (n.months = Math.round((n.days + 3) / 30), n))))
                    }(e, n),
                    u = Object.keys(d);
                if (u.forEach(function(e, n) {
                        t !== r.Humanized && t !== r.HumanizedShort || d[e] || delete d[e], n < u.length - c && delete d[e]
                    }), t === r.Humanized) return function(e) {
                    return e.months ? o(i.Month, e.months) : e.weeks && e.days ? o(i.Week, e.weeks) + " " + o(i.Day, e.days) : e.weeks ? o(i.Week, e.weeks) : e.days && e.hours ? o(i.Day, e.days) + " " + o(i.Hour, e.hours) : e.days ? o(i.Day, e.days) : e.hours && e.minutes ? o(i.Hour, e.hours) + " " + o(i.Minute, e.minutes) : e.hours ? o(i.Hour, e.hours) : e.minutes && e.seconds ? o(i.Minute, e.minutes) + " " + o(i.Second, e.seconds) : e.minutes ? o(i.Minute, e.minutes) : o(i.Second, e.seconds || 0)
                }(d);
                if (t === r.HumanizedShort) return function(e) {
                    return e.months ? s(i.Month, e.months) : e.weeks && e.days ? "" + s(i.Week, e.weeks) + s(i.Day, e.days) : e.weeks ? s(i.Week, e.weeks) : e.days && e.hours ? "" + s(i.Day, e.days) + s(i.Hour, e.hours) : e.days ? s(i.Day, e.days) : e.hours && e.minutes ? "" + s(i.Hour, e.hours) + s(i.Minute, e.minutes) : e.hours ? s(i.Hour, e.hours) : e.minutes && e.seconds ? "" + s(i.Minute, e.minutes) + s(i.Second, e.seconds) : e.minutes ? s(i.Minute, e.minutes) : s(i.Second, e.seconds || 0)
                }(d);
                var m = ":",
                    p = !1;
                switch (a.o.intl.getLanguageCode()) {
                    case "cy":
                    case "da":
                    case "fi":
                    case "id":
                    case "nb":
                    case "si":
                        m = ".";
                        break;
                    case "af":
                    case "fr":
                    case "lt":
                        p = !0
                }
                var h = d.seconds || 0,
                    f = d.minutes || 0,
                    g = d.hours || 0;
                switch (t) {
                    case r.ClockHM:
                    case r.ClockHMS:
                        var b = (p ? l(g, 2) : g) + m + l(f, 2);
                        return t === r.ClockHMS && (b += m + l(h, 2)), b;
                    case r.ClockMS:
                        return (p ? l(f, 2) : f) + m + l(h, 2)
                }
            }

            function l(e, t) {
                var n = e.toString();
                return n.length < t ? "0".repeat(t - n.length) + n : n
            }! function(e) {
                e[e.Second = 0] = "Second", e[e.Minute = 1] = "Minute", e[e.Hour = 2] = "Hour", e[e.Day = 3] = "Day", e[e.Week = 4] = "Week", e[e.Month = 5] = "Month"
            }(i || (i = {})),
            function(e) {
                e[e.Humanized = 0] = "Humanized", e[e.HumanizedShort = 1] = "HumanizedShort", e[e.ClockAuto = 2] = "ClockAuto", e[e.ClockHM = 3] = "ClockHM", e[e.ClockMS = 4] = "ClockMS", e[e.ClockHMS = 5] = "ClockHMS"
            }(r || (r = {}))
        },
        "60o1": function(e, t, n) {
            "use strict";

            function i(e, t) {
                var n = e,
                    i = !1;
                return n ? function(e) {
                    return e.split("").map(function(e) {
                        return e.charCodeAt(0) > 127
                    }).reduce(function(e, t) {
                        return e || t
                    })
                }(n) && (i = !0) : n = t, {
                    userDisplayName: n,
                    isIntl: i
                }
            }
            n.d(t, "a", function() {
                return i
            })
        },
        "6MRn": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsPinnedCheerV2_LeaderboardEntry"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "userID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "profileImageWidth"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Int"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "userID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "profileImageWidth"
                                            }
                                        }
                                    }],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 168
                }
            };
            n.loc.source = {
                body: "query BitsPinnedCheerV2_LeaderboardEntry($userID: ID! $profileImageWidth: Int!) {\nuser(id: $userID) {\nid\ndisplayName\nlogin\nprofileImageURL(width:$profileImageWidth)\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "6j5V": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("RcPG");

            function r(e) {
                return {
                    type: i.a.Text,
                    content: e
                }
            }
        },
        "7APm": function(e, t, n) {},
        "7NxT": function(e, t, n) {
            "use strict";
            n("DLhE");
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("tY8L");
            r.o.store.registerReducer("viewerCard", function(e, t) {
                switch (void 0 === e && (e = {
                    viewerCardOptions: null
                }), t.type) {
                    case a.a:
                        return i.__assign({}, e, {
                            viewerCardOptions: null
                        });
                    case a.b:
                        return t.viewerCardOptions ? i.__assign({}, e, {
                            viewerCardOptions: i.__assign({}, t.viewerCardOptions)
                        }) : e;
                    default:
                        return e
                }
            })
        },
        "7SjK": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("TSYQ"),
                o = n("/7QA"),
                s = n("GnwI"),
                c = n("Ue10"),
                l = (n("GOKC"), r.createElement(c.xb, {
                    alignItems: c.f.Center,
                    background: c.r.Overlay,
                    borderRadius: c.x.Small,
                    className: "emote-button__lock",
                    color: c.O.Overlay,
                    "data-test-selector": "emote-button-lock",
                    display: c.W.InlineFlex,
                    justifyContent: c.Ua.Center,
                    position: c.db.Absolute,
                    zIndex: c.ac.Above
                }, r.createElement(c.mb, {
                    asset: c.nb.Lock,
                    height: 10,
                    width: 10
                }))),
                d = function(e) {
                    var t = a("emote-button__link", {
                            "emote-button__link--locked": !e.onClick
                        }),
                        n = e.emote,
                        i = n.displayName,
                        d = n.srcSet;
                    if (!d) return null;
                    var u = r.createElement("img", {
                        className: "emote-picker__image",
                        srcSet: d,
                        alt: i
                    });
                    if (e.isCriticalImage) {
                        for (var m = d.split(" ")[0], p = {}, h = 0, f = d.split(","); h < f.length; h++) {
                            var g = f[h].trim().split(" "),
                                b = g[1],
                                v = g[0];
                            p[b] = v
                        }
                        u = r.createElement(s.b, {
                            className: "emote-picker__emote-image",
                            src: m,
                            srcSet: p,
                            alt: i || ""
                        })
                    }
                    return r.createElement("div", {
                        className: "emote-button"
                    }, r.createElement(c.Qb, {
                        label: i || Object(o.d)("Emote", "EmoteButton"),
                        direction: c.Sb.Bottom
                    }, r.createElement(c.Na, {
                        display: c.W.Flex,
                        alignItems: c.f.Center,
                        justifyContent: c.Ua.Center
                    }, r.createElement("button", {
                        "data-test-selector": "emote-button-clickable",
                        className: t,
                        "aria-label": i,
                        name: i,
                        onClick: e.onClick ? e.onClick.bind(null, e.emote) : void 0,
                        "data-a-target": i
                    }, r.createElement("figure", null, e.locked ? l : null, u)))))
                },
                u = (n("VrOd"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleClickEmote = function(e) {
                            t.props.onClickEmote && t.props.onClickEmote(e)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.emotes.map(function(t, n) {
                                return r.createElement(d, {
                                    key: "emote-button-" + t.id + "--" + t.setID,
                                    emote: t,
                                    isCriticalImage: 0 === n,
                                    locked: e.props.locked || t.isLocked,
                                    onClick: e.props.locked ? void 0 : e.handleClickEmote
                                })
                            });
                        return r.createElement(c.Va, {
                            display: c.W.Flex,
                            flexWrap: c.Z.Wrap,
                            justifyContent: c.Ua.Center
                        }, t)
                    }, t
                }(r.Component));
            n.d(t, "a", function() {
                return u
            })
        },
        "7TkE": function(e, t, n) {
            e.exports = n.p + "assets/gift-open-ba127d9c110a18648ca1.png"
        },
        "8Ad5": function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Backspace = 8] = "Backspace", e[e.Tab = 9] = "Tab", e[e.Enter = 13] = "Enter", e[e.Esc = 27] = "Esc", e[e.Space = 32] = "Space", e[e.Left = 37] = "Left", e[e.Up = 38] = "Up", e[e.Right = 39] = "Right", e[e.Down = 40] = "Down", e[e.Digit0 = 48] = "Digit0", e[e.Digit1 = 49] = "Digit1", e[e.Digit2 = 50] = "Digit2", e[e.Digit3 = 51] = "Digit3", e[e.Digit4 = 52] = "Digit4", e[e.Digit5 = 53] = "Digit5", e[e.Digit6 = 54] = "Digit6", e[e.Digit7 = 55] = "Digit7", e[e.Digit8 = 56] = "Digit8", e[e.Digit9 = 57] = "Digit9", e[e.Colon = 58] = "Colon", e[e.At = 64] = "At", e[e.A = 65] = "A", e[e.B = 66] = "B", e[e.C = 67] = "C", e[e.D = 68] = "D", e[e.E = 69] = "E", e[e.F = 70] = "F", e[e.G = 71] = "G", e[e.H = 72] = "H", e[e.I = 73] = "I", e[e.J = 74] = "J", e[e.K = 75] = "K", e[e.L = 76] = "L", e[e.M = 77] = "M", e[e.N = 78] = "N", e[e.O = 79] = "O", e[e.P = 80] = "P", e[e.Q = 81] = "Q", e[e.R = 82] = "R", e[e.S = 83] = "S", e[e.T = 84] = "T", e[e.U = 85] = "U", e[e.V = 86] = "V", e[e.W = 87] = "W", e[e.X = 88] = "X", e[e.Y = 89] = "Y", e[e.Z = 90] = "Z", e[e.Comma = 188] = "Comma", e[e.Period = 190] = "Period"
                }(i || (i = {}))
        },
        "8SX2": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/MKj"),
                s = n("fvjX"),
                c = n("tY8L"),
                l = n("Ue10"),
                d = (n("rVcM"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.usernameClickHandler = function(e) {
                            t.props.onUsernameClick(t.props.login, t.props.sourceType, t.props.contentID, e.currentTarget.getBoundingClientRect().bottom)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("button", {
                            className: "chatter-name",
                            onClick: this.usernameClickHandler
                        }, r.createElement(l.V, {
                            bold: !0,
                            color: l.O.Base,
                            type: l.Nb.Span
                        }, this.props.children))
                    }, t
                }(r.Component));
            var u = Object(a.compose)(Object(o.connect)(void 0, function(e) {
                return Object(s.bindActionCreators)({
                    onUsernameClick: c.e
                }, e)
            }))(d);
            n.d(t, !1, function() {
                return d
            }), n.d(t, "a", function() {
                return u
            })
        },
        "8in3": function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("fvjX"),
                a = n("tY8L"),
                o = n("mrSG"),
                s = n("TSYQ"),
                c = n("q1tI"),
                l = n("ZS2+"),
                d = n("uy8m"),
                u = n("4rCz"),
                m = n("3GF+"),
                p = n("oK83"),
                h = n("Ue10"),
                f = (n("2D+f"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            dragging: !1,
                            viewerCardComponentLoaded: !1
                        }, t.ViewerCard = l.a.wrap(function() {
                            return Promise.all([n.e(0), n.e(191)]).then(n.bind(null, "q3Qz"))
                        }, "ViewerCard", {
                            placeholder: c.createElement(h.xb, {
                                background: h.r.Base,
                                fullHeight: !0,
                                fullWidth: !0,
                                padding: 2
                            }, c.createElement(h.Xa, {
                                fillContent: !0
                            })),
                            onRendered: function() {
                                return t.setState({
                                    viewerCardComponentLoaded: !0
                                })
                            }
                        }), t.ExtensionMessageCard = l.a.wrap(function() {
                            return n.e(190).then(n.bind(null, "n3tJ"))
                        }, "ExtensionMessageCard", {
                            placeholder: c.createElement(h.xb, {
                                background: h.r.Base,
                                fullHeight: !0,
                                fullWidth: !0,
                                padding: 2
                            }, c.createElement(h.Xa, {
                                fillContent: !0
                            })),
                            onRendered: function() {
                                return t.setState({
                                    viewerCardComponentLoaded: !0
                                })
                            }
                        }), t.onDragStart = function(e) {
                            t.cardContainerRef && t.layerRef && e.button === d.a.Left && (window.addEventListener("mousemove", t.onDrag), window.addEventListener("mouseup", t.onDragEnd), window.addEventListener("selectstart", t.cancelSelection), t.setState({
                                dragging: !0
                            }), t.initCardX = t.cardContainerRef.offsetLeft, t.initCardY = t.cardContainerRef.offsetTop, t.initMouseX = e.clientX, t.initMouseY = e.clientY)
                        }, t.onDrag = function(e) {
                            t.nextTop = t.initCardY + e.clientY - t.initMouseY, t.nextLeft = t.initCardX + e.clientX - t.initMouseX, t.rafHandle || (t.rafHandle = requestAnimationFrame(function() {
                                t.rafHandle = 0, t.cardContainerRef && (t.cardContainerRef.style.top = t.nextTop + "px", t.cardContainerRef.style.left = t.nextLeft + "px")
                            }))
                        }, t.onDragEnd = function() {
                            t.removeDragListeners(), t.setState({
                                dragging: !1
                            })
                        }, t.removeDragListeners = function() {
                            window.removeEventListener("mousemove", t.onDrag), window.removeEventListener("mouseup", t.onDragEnd), window.removeEventListener("selectstart", t.cancelSelection)
                        }, t.cancelSelection = function(e) {
                            e.preventDefault()
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillUnmount = function() {
                        this.props.hideViewerCard(), this.rafHandle && cancelAnimationFrame(this.rafHandle), this.removeDragListeners()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.viewerCardOptions && e.viewerCardOptions && (e.viewerCardOptions.targetID === this.props.viewerCardOptions.targetID && e.viewerCardOptions.initialTopOffset === this.props.viewerCardOptions.initialTopOffset || this.cardContainerRef && (this.cardContainerRef.style.left = "0px"))
                    }, t.prototype.render = function() {
                        var e = this,
                            t = {
                                "viewer-card-layer": !0,
                                "viewer-card-layer--dragging": this.state.dragging
                            },
                            n = {
                                "viewer-card-layer__draggable": !0,
                                "viewer-card-layer__draggable--dragging": this.state.dragging
                            },
                            i = null,
                            r = {};
                        if (this.props.viewerCardOptions) {
                            if (this.layerRef) {
                                var a = this.layerRef.getBoundingClientRect();
                                r = {
                                    top: Math.max(this.props.viewerCardOptions.initialTopOffset - a.top, 0) + "px"
                                }
                            }
                            switch (this.props.viewerCardOptions.viewerCardType) {
                                case p.b.Extension:
                                    i = c.createElement(this.ExtensionMessageCard, {
                                        channelID: this.props.channelID,
                                        extensionID: this.props.viewerCardOptions.targetID,
                                        extensionVersion: this.props.viewerCardOptions.extensionVersion,
                                        hideMessageCard: this.props.hideViewerCard
                                    });
                                    break;
                                case p.b.Viewer:
                                    i = c.createElement(this.ViewerCard, {
                                        channelID: this.props.channelID,
                                        isPopout: this.props.isPopout,
                                        isEmbedded: this.props.isEmbedded,
                                        targetLogin: this.props.viewerCardOptions.targetID,
                                        sourceType: this.props.viewerCardOptions.sourceType,
                                        sourceID: this.props.viewerCardOptions.sourceID,
                                        confirmModerationAction: this.props.confirmModerationAction,
                                        hideViewerCard: this.props.hideViewerCard,
                                        sendMessageToTMI: this.props.onSendMessage
                                    });
                                    break;
                                default:
                                    i = null
                            }
                        }
                        var o = null;
                        return i && (o = c.createElement(h.Oa, {
                            background: h.r.Base,
                            className: s(n),
                            position: h.db.Absolute
                        }, c.createElement("div", {
                            onMouseDown: this.onDragStart,
                            ref: function(t) {
                                e.cardContainerRef = t
                            },
                            style: r,
                            "data-a-target": "viewer-card-positioner"
                        }, i, c.createElement(h.Va, {
                            position: h.db.Absolute,
                            attachRight: !0,
                            attachTop: !0,
                            margin: {
                                top: .5,
                                right: .5
                            },
                            "data-a-target": "viewer-card-close-button"
                        }, c.createElement(m.a, null, c.createElement(h.A, {
                            icon: h.nb.Close,
                            onClick: this.props.hideViewerCard,
                            ariaLabel: Object(u.d)("Hide", "ViewerCard"),
                            overlay: this.state.viewerCardComponentLoaded,
                            "data-test-selector": "close-viewer-card"
                        })))))), c.createElement(h.Na, {
                            className: s(t),
                            fullHeight: !0,
                            fullWidth: !0,
                            position: h.db.Relative,
                            zIndex: h.ac.Above
                        }, c.createElement("div", {
                            onMouseUp: this.onDragEnd,
                            ref: function(t) {
                                e.layerRef = t
                            }
                        }, o))
                    }, t
                }(c.Component));
            var g = Object(i.connect)(function(e) {
                return {
                    viewerCardOptions: e.viewerCard.viewerCardOptions
                }
            }, function(e) {
                return Object(r.bindActionCreators)({
                    hideViewerCard: a.c
                }, e)
            })(f);
            n.d(t, "a", function() {
                return g
            })
        },
        "8jSG": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "blockedUsers"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "blockedUsers"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 56
                }
            };
            n.loc.source = {
                body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "986b": function(e, t, n) {},
        "9KaG": function(e, t, n) {},
        "9P+5": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_UserData"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "roles"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isGlobalMod"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isSiteAdmin"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isStaff"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 95
                }
            };
            n.loc.source = {
                body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "9Rmp": function(e, t, n) {},
        "9yes": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_AllowRejectedChatMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "AllowRejectedChatMessageInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "allowRejectedChatMessage"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 141
                }
            };
            n.loc.source = {
                body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        AREq: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("/7QA"),
                r = n("iyGE");

            function a(e, t, n) {
                if (void 0 === n && (n = !1), n) switch (t) {
                    case r.a.Forbidden:
                        return Object(i.d)("You don't have permissions to timeout {login}.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsAdmin:
                        return Object(i.d)("You cannot timeout admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsAlreadyBanned:
                        return Object(i.d)("{login} is already banned in this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsAnonymous:
                        return Object(i.d)("You cannot timeout anonymous users.", "BanUserErrorCode");
                    case r.a.TargetIsBroadcaster:
                        return Object(i.d)("You cannot timeout the broadcaster.", "BanUserErrorCode");
                    case r.a.TargetIsGlobalMod:
                        return Object(i.d)("You cannot timeout global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsMod:
                        return Object(i.d)("You cannot timeout moderator {login} unless you are the owner of this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsSelf:
                        return Object(i.d)("You cannot timeout yourself.", "BanUserErrorCode");
                    case r.a.TargetIsStaff:
                        return Object(i.d)("You cannot timeout staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetNotFound:
                        return Object(i.d)("The user you are trying to timeout doesn't exist.", "BanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result.")
                } else switch (t) {
                    case r.a.Forbidden:
                        return Object(i.d)("You don't have permissions to ban {login}.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsAdmin:
                        return Object(i.d)("You cannot ban admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsAlreadyBanned:
                        return Object(i.d)("{login} is currently banned in this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsAnonymous:
                        return Object(i.d)("You cannot ban anonymous users.", "BanUserErrorCode");
                    case r.a.TargetIsBroadcaster:
                        return Object(i.d)("You cannot ban the broadcaster.", "BanUserErrorCode");
                    case r.a.TargetIsGlobalMod:
                        return Object(i.d)("You cannot ban global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsMod:
                        return Object(i.d)("You cannot ban moderator {login} unless you are the owner of this channel.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetIsSelf:
                        return Object(i.d)("You cannot ban yourself.", "BanUserErrorCode");
                    case r.a.TargetIsStaff:
                        return Object(i.d)("You cannot ban staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                            login: e
                        }, "BanUserErrorCode");
                    case r.a.TargetNotFound:
                        return Object(i.d)("The user you are trying to ban doesn't exist.", "BanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result.")
                }
            }
        },
        "Aa/l": function(e, t, n) {},
        AcdH: function(e, t, n) {},
        Av0x: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("/7QA"),
                r = n("a2UF");

            function a(e, t, n) {
                if (void 0 === n && (n = !1), n) switch (t) {
                    case r.a.Forbidden:
                        return Object(i.d)("You don't have permissions to untimeout {login}.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    case r.a.TargetNotFound:
                        return Object(i.d)("The user you are trying to untimeout doesn't exist.", "UnbanUserErrorCode");
                    case r.a.TargetNotBanned:
                        return Object(i.d)("{login} is not currently timed out from this channel.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result")
                } else switch (t) {
                    case r.a.Forbidden:
                        return Object(i.d)("You don't have permissions to unban {login}.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    case r.a.TargetNotFound:
                        return Object(i.d)("The user you are trying to unban doesn't exist.", "UnbanUserErrorCode");
                    case r.a.TargetNotBanned:
                        return Object(i.d)("{login} is not currently banned from this channel.", {
                            login: e
                        }, "UnbanUserErrorCode");
                    default:
                        throw new Error("Unrecognized operation result")
                }
            }
        },
        BJwa: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("9C/b"),
                s = n("fvjX"),
                c = n("/7QA"),
                l = n("ZS2+"),
                d = n("yR8l"),
                u = n("eDVu"),
                m = n("0Log"),
                p = n("/0dD"),
                h = n("/aPz"),
                f = n("DMoW"),
                g = n("uIkQ"),
                b = n("4rCz"),
                v = n("ZVTe"),
                E = n("Ue10"),
                k = (n("e7rh"), function(e) {
                    return a.createElement(E.xb, {
                        padding: {
                            top: 1,
                            bottom: .5
                        },
                        margin: {
                            x: 2
                        },
                        borderTop: !0,
                        display: E.W.Block,
                        flexDirection: E.Y.Column
                    }, a.createElement(E.Va, {
                        padding: {
                            bottom: .5
                        }
                    }, a.createElement(g.b, {
                        badgeSets: e.badgeSets,
                        badgesToRender: {
                            twitchbot: "1"
                        }
                    }), a.createElement(v.a, {
                        userData: {
                            color: "#6441A5",
                            isIntl: !1,
                            userDisplayName: "AutoMod",
                            userID: "automod",
                            userLogin: "automod",
                            userType: "global_mod"
                        }
                    }), a.createElement(E.V, {
                        type: E.Nb.Span,
                        color: E.O.Alt2
                    }, Object(b.d)(": Your text may be removed by moderation. Bits will still be sent to the streamer. Review the highlighted text or continue below.", "BitsAutoModOffenderPrompt"))), a.createElement(E.Va, {
                        display: E.W.Flex,
                        flexDirection: E.Y.Row
                    }, a.createElement(E.Va, {
                        padding: {
                            right: .5
                        }
                    }, a.createElement(E.z, {
                        onClick: e.onEditCheer
                    }, a.createElement(E.Va, {
                        padding: {
                            x: 2
                        }
                    }, Object(b.d)("Edit", "BitsAutoModOffender")))), a.createElement(E.z, {
                        onClick: e.onCheerAnyway,
                        type: E.F.Hollow
                    }, Object(b.d)("Cheer Anyway", "BitsAutoModOffender")), a.createElement(E.Va, {
                        className: "bits-auto-mod-offender-prompt__notification-icon",
                        display: E.W.Flex,
                        flexDirection: E.Y.Column,
                        justifyContent: E.Ua.End,
                        alignSelf: E.g.End,
                        margin: {
                            left: "auto",
                            right: .5
                        }
                    }, a.createElement(E.mb, {
                        asset: E.nb.NotificationWarning
                    }))))
                }),
                C = n("qnat"),
                S = n("H31v"),
                y = n("oJmH"),
                N = n("/MKj"),
                _ = n("x7UT"),
                O = n("8Ad5"),
                I = n("wUQP"),
                T = n("oe5X"),
                A = n("1/iK"),
                D = n("f00E"),
                R = n("y5D0"),
                M = n("kz7j"),
                L = n("kRBY"),
                w = n("okS7"),
                U = n("ry0r"),
                B = n("17x9"),
                P = n("uu1w"),
                F = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = P.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                            return e.startsWith("#") && null !== t.props.hashTags.edges ? t.props.hashTags.edges.filter(function(t) {
                                return t.node.id.includes(e)
                            }).map(function(n) {
                                return {
                                    current: e,
                                    replacement: n.node.id,
                                    element: t.genearateHashtagDisplay(n.node.id)
                                }
                            }) : null
                        }, t.genearateHashtagDisplay = function(e) {
                            return a.createElement(E.Va, {
                                padding: {
                                    right: .5
                                },
                                key: "hashtag:" + e
                            }, a.createElement(E.V, null, e))
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: B.func
                    }, t
                }(a.Component),
                j = n("5zXJ"),
                x = n("XmgI"),
                V = n("ebRM"),
                H = n("RiD7"),
                G = n("tFCv"),
                W = n("+pBb"),
                Y = n("QVaV"),
                z = n("vSeP"),
                q = 5,
                K = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = P.a.Mention, t.canBeTriggeredByTab = !0, t.getMatches = function(e, n) {
                            return n || e.startsWith("@") ? t.getMentions(e, n) : null
                        }, t.getMentions = function(e, n) {
                            if (!t.props.activeChattersAPI) return [];
                            var i = n ? e : e.substring(1);
                            return t.props.activeChattersAPI.getActiveChatters(i, q).map(function(i) {
                                return {
                                    current: e,
                                    replacement: (n ? "" : "@") + (i.displayName || i.login),
                                    element: t.renderMention(i)
                                }
                            })
                        }, t.renderMention = function(e) {
                            return a.createElement("span", null, Object(Y.a)(e.login, e.displayName || null))
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: B.func
                    }, t
                }(a.Component),
                Q = Object(z.a)(K),
                X = n("u5aL"),
                $ = n("2xye");

            function Z(e, t) {
                return t.isBanned ? i.ChannelBanned : t.isStaff || t.isChannelOwner || t.canModerate ? i.None : e.subsOnlyMode && !t.isSubscribed ? i.NotSubscribed : i.None
            }! function(e) {
                e[e.None = 0] = "None", e[e.ChannelBanned = 1] = "ChannelBanned", e[e.NotSubscribed = 2] = "NotSubscribed"
            }(i || (i = {}));
            var J, ee = n("GnwI"),
                te = n("QjI3");
            ! function(e) {
                e.ChatRestrictedHeader = "chat-restricted-header"
            }(J || (J = {}));
            var ne, ie = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderBalloon = function(e, n) {
                            return t.props.showBalloon ? a.createElement(X.a, {
                                onClickOut: t.handleBalloonClickOut
                            }, a.createElement(E.u, {
                                direction: E.v.TopLeft,
                                offsetY: "-0.5rem",
                                size: E.w.Medium,
                                show: t.props.showBalloon,
                                tailOffset: 50
                            }, a.createElement(E.xb, {
                                color: E.O.Base,
                                padding: 1
                            }, e, a.createElement(E.Va, {
                                display: E.W.Flex,
                                margin: {
                                    top: 1
                                }
                            }, n, a.createElement(E.Va, null))))) : null
                        }, t.handleBalloonClickOut = function(e) {
                            t.rootRef && t.rootRef.contains(e.target) && e.stopPropagation(), t.props.closeBalloon()
                        }, t.handleActionClick = function() {
                            ! function(e) {
                                var t;
                                switch (e.restriction) {
                                    case i.NotSubscribed:
                                        t = "subscribe";
                                        break;
                                    default:
                                        return
                                }
                                var n = {
                                    action_type: t,
                                    channel: e.channelLogin,
                                    channel_id: e.channelID
                                };
                                c.n.track($.SpadeEventType.ChatInputRestrictedAction, n)
                            }({
                                channelID: t.props.channelID,
                                channelLogin: t.props.channelLogin,
                                restriction: t.props.reason
                            })
                        }, t.setRootRef = function(e) {
                            return t.rootRef = e
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.showBalloon && this.trackImpression()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.showBalloon && !this.props.showBalloon && this.trackImpression()
                    }, t.prototype.render = function() {
                        var e = "",
                            t = null,
                            n = null;
                        switch (this.props.reason) {
                            case i.NotSubscribed:
                                e = Object(c.d)("Subscribers-Only Chat", "ChatModeHeader"), t = Object(c.d)("Only {streamer}'s subscribers can chat right now. Subscribe and join in!", {
                                    streamer: this.props.channelDisplayName
                                }, "ChatModeHeader"), n = a.createElement("div", {
                                    onClick: this.handleActionClick
                                }, a.createElement(te.a, {
                                    balloonDirection: E.v.TopRight,
                                    channelLogin: this.props.channelLogin
                                }));
                                break;
                            case i.ChannelBanned:
                            case i.None:
                            default:
                                return null
                        }
                        return a.createElement("div", {
                            ref: this.setRootRef
                        }, a.createElement(E.xb, {
                            borderTop: !0,
                            color: E.O.Alt2,
                            display: E.W.Flex,
                            fontSize: E.Aa.Size6,
                            padding: {
                                y: .5
                            },
                            position: E.db.Relative,
                            "data-test-selector": J.ChatRestrictedHeader
                        }, a.createElement(E.T, {
                            hoverColorInherit: !0,
                            hoverUnderlineNone: !0,
                            onClick: this.props.openBalloon,
                            type: E.U.Inherit
                        }, a.createElement(E.V, {
                            bold: !0
                        }, e)), a.createElement(E.Va, {
                            margin: {
                                left: .5
                            }
                        }, a.createElement(E.A, {
                            icon: E.nb.NotificationInfo,
                            onClick: this.props.openBalloon,
                            type: E.C.Secondary
                        })), this.renderBalloon(t, n)))
                    }, t.prototype.trackImpression = function() {
                        ! function(e) {
                            var t;
                            switch (e.restriction) {
                                case i.NotSubscribed:
                                    t = "subscriber_mode";
                                    break;
                                default:
                                    return
                            }
                            var n = {
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                impression_type: t
                            };
                            c.n.track($.SpadeEventType.ChatInputRestrictedImpression, n)
                        }({
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            restriction: this.props.reason
                        })
                    }, t
                }(a.Component),
                re = Object(ee.c)("ChatRestrictedHeader")(ie),
                ae = function() {
                    return a.createElement(E.u, {
                        direction: E.v.TopLeft,
                        offsetY: "11px",
                        show: !0
                    }, a.createElement(E.Va, {
                        padding: 1,
                        "data-test-selector": "manage-moderation-settings-tooltip"
                    }, Object(c.d)("Mods can now update AutoMod levels as well as Blocked and Permitted Terms.", "ManageModerationSettingsChat")))
                },
                oe = function() {
                    return a.createElement(E.u, {
                        direction: E.v.TopLeft,
                        offsetY: "11px",
                        show: !0
                    }, a.createElement(E.Va, {
                        padding: 1,
                        "data-test-selector": "raids-settings-tooltip"
                    }, Object(c.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
                },
                se = n("cys1"),
                ce = (n("ZuCe"), function(e) {
                    return a.createElement(E.xb, {
                        position: E.db.Relative,
                        borderRadius: E.x.Medium,
                        className: "moderated-message-fake-input__container"
                    }, a.createElement(E.xb, {
                        className: "moderated-message-fake-input__content",
                        display: E.W.Block,
                        overflow: E.Ya.Auto,
                        color: E.O.Alt,
                        background: E.r.Alt,
                        fullWidth: !0
                    }, a.createElement(E.Oa, {
                        padding: {
                            y: .5,
                            left: 1
                        },
                        fullHeight: !0
                    }, a.createElement("div", {
                        style: {
                            paddingRight: "6rem"
                        }
                    }, Object(se.f)(e.moderatedMessageParts)))), a.createElement(E.xb, {
                        position: E.db.Absolute,
                        display: E.W.Flex,
                        flexDirection: E.Y.Row,
                        attachRight: !0,
                        attachTop: !0
                    }, a.createElement(E.Va, {
                        display: E.W.InlineFlex,
                        alignItems: E.f.Center,
                        className: "moderated-message-fake-input__icon",
                        padding: .5
                    }, a.createElement(E.mb, {
                        asset: E.nb.Bits,
                        type: E.ob.Inherit
                    })), a.createElement(E.Va, {
                        display: E.W.InlineFlex,
                        alignItems: E.f.Center,
                        className: "moderated-message-fake-input__icon",
                        padding: .5
                    }, a.createElement(E.mb, {
                        asset: E.nb.Emoticons,
                        type: E.ob.Inherit
                    }))))
                }),
                le = n("ilCE");
            n("MVDO");

            function de(e, t) {
                var n = t.action ? {
                        action: t.action
                    } : {},
                    i = r.__assign({
                        raid_upsell_source_id: Number(t.sourceChannelID),
                        raid_upsell_target_id: Number(t.targetChannelID)
                    }, n);
                c.n.track(e, i)
            }! function(e) {
                e.Host = "host", e.Raid = "raid", e.Dismiss = "dismiss"
            }(ne || (ne = {}));
            var ue = n("D7An"),
                me = "raid-now-upsell";
            var pe, he = {
                    "data-test-selector": "dismiss"
                },
                fe = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleDismissUpsell = function() {
                            ! function(e) {
                                de($.SpadeEventType.RaidUpsellClick, r.__assign({}, e, {
                                    action: ne.Dismiss
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.props.closeRaidUpsell()
                        }, t.handleSendHostMsgFromUpsell = function() {
                            ! function(e) {
                                de($.SpadeEventType.RaidUpsellClick, r.__assign({}, e, {
                                    action: ne.Host
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.handleSendHostMsg()
                        }, t.handleSendHostMsg = function() {
                            t.props.send("/host " + t.props.targetChannelLogin), t.props.closeRaidUpsell()
                        }, t.handleSendRaidMsg = function() {
                            ! function(e) {
                                de($.SpadeEventType.RaidUpsellClick, r.__assign({}, e, {
                                    action: ne.Raid
                                }))
                            }({
                                sourceChannelID: t.props.data.sourceChannel.id,
                                targetChannelID: t.props.data.targetChannel.id
                            }), t.props.send("/raid " + t.props.targetChannelLogin), t.props.closeRaidUpsell()
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.data.refetch()
                    }, t.prototype.componentDidUpdate = function(e) {
                        if (e.data.loading !== this.props.data.loading && !this.props.data.loading) {
                            if (!this.channelDisplayName || !this.isViewersCountWithinRange || this.isAttemptingToHostSelf) return this.handleSendHostMsg();
                            ! function(e) {
                                de($.SpadeEventType.RaidUpsellImpression, e)
                            }({
                                sourceChannelID: this.props.data.sourceChannel.id,
                                targetChannelID: this.props.data.targetChannel.id
                            }), c.l.set(me, !0)
                        }
                    }, t.prototype.render = function() {
                        var e = this.props.data.loading,
                            t = this.channelDisplayName;
                        return e || !t || !this.isViewersCountWithinRange || this.isAttemptingToHostSelf ? null : a.createElement(E.Va, {
                            className: "raid-upsell-prompt",
                            padding: 1,
                            margin: {
                                x: 2
                            }
                        }, a.createElement(E.Va, {
                            display: E.W.Flex,
                            justifyContent: E.Ua.Between
                        }, a.createElement(E.Va, {
                            display: E.W.Flex
                        }, a.createElement(E.Va, {
                            className: "raid-upsell-prompt__notification",
                            margin: {
                                top: .5
                            }
                        }, a.createElement(E.mb, {
                            asset: E.nb.NotificationInfo
                        })), a.createElement(E.Va, {
                            margin: {
                                x: 1
                            }
                        }, a.createElement(E.V, {
                            type: E.Nb.H6,
                            bold: !0
                        }, Object(c.d)("How about raiding {channelDisplayName}?", {
                            channelDisplayName: t
                        }, "RaidUpsellPrompt")), a.createElement(E.V, {
                            type: E.Nb.P,
                            color: E.O.Alt2
                        }, Object(c.d)("Now you can raid whenever you want instead of waiting 30 seconds.", "RaidUpsellPrompt")))), a.createElement(E.xb, {
                            color: E.O.OverlayAlt
                        }, a.createElement(E.A, r.__assign({}, he, {
                            icon: E.nb.Close,
                            size: E.B.Small,
                            ariaLabel: Object(c.d)("Dismiss", "RaidUpsellPrompt"),
                            onClick: this.handleDismissUpsell
                        })))), a.createElement(ge, {
                            onSendHostMsg: this.handleSendHostMsgFromUpsell,
                            onSendRaidMsg: this.handleSendRaidMsg
                        }))
                    }, Object.defineProperty(t.prototype, "channelDisplayName", {
                        get: function() {
                            var e = this.props.data.targetChannel;
                            return e && e.displayName
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isViewersCountWithinRange", {
                        get: function() {
                            var e = this.props.data.sourceChannel,
                                t = e && e.stream && e.stream.viewersCount;
                            return t && t >= 3 && t < 1e5
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isAttemptingToHostSelf", {
                        get: function() {
                            return this.props.targetChannelLogin === this.props.sourceChannelLogin
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(a.Component),
                ge = function(e) {
                    return a.createElement(E.Va, {
                        display: E.W.Flex,
                        justifyContent: E.Ua.End,
                        margin: {
                            top: 1
                        }
                    }, a.createElement(E.Va, {
                        margin: {
                            right: 1
                        }
                    }, a.createElement(E.z, {
                        type: E.F.Hollow,
                        size: E.D.Small,
                        onClick: e.onSendHostMsg
                    }, a.createElement(E.Va, {
                        padding: {
                            x: 2
                        }
                    }, Object(c.d)("Host", "RaidUpsellPrompt")))), a.createElement(E.Va, null, a.createElement(E.z, {
                        size: E.D.Small,
                        onClick: e.onSendRaidMsg
                    }, a.createElement(E.Va, {
                        padding: {
                            x: 2
                        }
                    }, Object(c.d)("Raid", "RaidUpsellPrompt")))))
                },
                be = Object(d.a)(le, {
                    options: function(e) {
                        return {
                            variables: {
                                targetChannelLogin: e.targetChannelLogin,
                                sourceChannelLogin: e.sourceChannelLogin
                            }
                        }
                    }
                })(fe),
                ve = n("gTu3"),
                Ee = n("RcPG"),
                ke = n("YXxK"),
                Ce = n("WytW"),
                Se = function() {
                    return c.l.get("overrideRestrictedChatInputFeatureFlag", c.b.get("chat_input_box_restrictions_enabled", !1))
                },
                ye = n("lNGo"),
                Ne = n("ySk3"),
                _e = n("x0gr"),
                Oe = n("mmRu"),
                Ie = n("cpJf"),
                Te = n("GzyO"),
                Ae = n("EOIh"),
                De = n("FS60"),
                Re = "bits_automod_cheering_enabled",
                Me = /\S/,
                Le = 3;
            ! function(e) {
                e[e.Bits = 0] = "Bits", e[e.ChatRestriction = 1] = "ChatRestriction", e[e.Emotes = 2] = "Emotes", e[e.None = 3] = "None"
            }(pe || (pe = {}));
            var we = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.incrementAndHideAutomodTooltipCounter = function() {
                        var e = c.l.get("automodChatCogTooltipSeenNumTimes", 0) + 1;
                        c.l.set("automodChatCogTooltipSeenNumTimes", e), n.setState({
                            showAutomodSettingsTooltip: !1
                        })
                    }, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.onChatSettingsToggle = function(e) {
                        n.handleRaidReportingToggle(e), n.handleModerationSettingsToggle(e), e || Object(_e.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode
                        })
                    }, n.handleModerationSettingsToggle = function(e) {
                        if (!e) {
                            var t = c.l.get("autoModToolTipSeen", 0) + 1;
                            n.setState({
                                showAutomodSettingsTooltip: !1
                            }), c.l.set("autoModToolTipSeen", t)
                        }
                    }, n.handleRaidReportingToggle = function(e) {
                        n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                            showRaidsSettingsTooltip: !1
                        }), c.l.set("raidsModerationTooltipsSeenNumTimes", Le)), e && n.setState({
                            showRaidsFollowerOnlyTooltip: !1
                        }))
                    }, n.onKeyDown = function(e) {
                        var t = e.charCode || e.keyCode;
                        switch (n.props.onKeyDown && t !== O.a.Enter && n.props.onKeyDown(e), n.props.bitsSendHasError && n.props.clearBitsSendError(), t) {
                            case O.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                            case O.a.Esc:
                                return void(n.state.showCard === pe.Bits && n.setState({
                                    showCard: pe.None
                                }));
                            default:
                                return
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            value: e
                        })
                    }, n.onInputFocus = function() {
                        n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onMouseEnterInput = function() {
                        n.state.hasInteractedOrPageload || n.setState({
                            hasInteractedOrPageload: !0
                        })
                    }, n.onChatCommand = function(e) {
                        n.props.onChatCommand(e), n.trackChatEvent()
                    }, n.confirmEmbedAction = function(e, t, i) {
                        var r = n,
                            a = r.hasConfirmedInEmbed;
                        if (r.hasSeenConfirmationPrompt) return a;
                        var o = window.confirm(n.confirmationMessage(e, t, i));
                        return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = o, n.setState({
                            hasSeenAndRejectedEmbedPrompt: !o
                        }), o
                    }, n.confirmationMessage = function(e, t, n) {
                        return Object(c.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                            displayName: e,
                            message: t,
                            channelLogin: n
                        }, "ChatInput")
                    }, n.onMessageSend = function() {
                        return r.__awaiter(n, void 0, void 0, function() {
                            var e, t, n, a, o, s, l, d, u, m = this;
                            return r.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        return e = Z(this.chatState(), this.userState()), t = this.isTypingCommand() || this.isTypingCheer(), this.chatRestrictionsEnabled() && !t && e !== i.None ? (this.setState({
                                            showCard: pe.ChatRestriction
                                        }), [2]) : this.props.authToken ? this.props.channelID ? (n = Me.test(this.state.value)) ? this.state.isSendingBits ? (c.j.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (c.j.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : (this.resetAndUpdateRenderSentChatMessageEvent(), this.state.value.split(/\s+/).forEach(function(e) {
                                            var t = m.props.emoteMap && m.props.emoteMap[e];
                                            t && Object(Te.a)(t)
                                        }), this.props.data && this.props.data.currentUser ? 0 === (a = Object(V.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.channel ? this.props.data.channel.cheer ? this.props.data.channel.cheer.settings ? (o = Object(V.f)({
                                            messageBits: a,
                                            balance: this.props.data.currentUser.bitsBalance,
                                            cheerMinimumBits: this.props.data.channel.cheer.settings.cheerMinimumBits,
                                            emoteMinimumBits: this.props.data.channel.cheer.settings.emoteMinimumBits,
                                            inputValue: this.state.value
                                        })).canSpend ? this.props.sendCheer ? (this.setState({
                                            isSendingBits: !0
                                        }), a.total >= j.r ? [4, new Promise(function(e) {
                                            var t = setTimeout(e, j.v.UNDO_PROMPT_DURATION),
                                                n = function(n) {
                                                    void 0 === n && (n = !1), clearTimeout(t), m.cancelDelayedSend = null, m.confirmDelayedSend = null, e(n)
                                                };
                                            m.cancelDelayedSend = function() {
                                                return n(!0)
                                            }, m.confirmDelayedSend = function() {
                                                return n(!1)
                                            }
                                        })] : [3, 2]) : (c.j.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (c.j.warn("[Chat Input] Spending bits forbidden.", o), [2]) : (c.j.warn("[Chat Input] Cheer Settings are undefined."), [2]) : (c.j.warn("[Chat Input] Cheer is null."), [2]) : (c.j.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2])) : (c.j.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                            hasSendableInput: n,
                                            value: this.state.value
                                        }), [2]) : (c.j.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                    case 1:
                                        if (r.sent()) return this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef.focus(), [2];
                                        r.label = 2;
                                    case 2:
                                        s = Object(D.a)(), l = b.b.get(Re, I.a.Off), r.label = 3;
                                    case 3:
                                        return r.trys.push([3, 5, , 6]), d = {
                                            id: s,
                                            targetID: this.props.channelID,
                                            bits: a.total,
                                            content: this.state.value,
                                            isAutoModEnabled: l === I.a.On
                                        }, l === I.a.On && (d.shouldCheerAnyway = this.props.shouldSendAutoModdedCheer), this.props.clearBitsSendError(), [4, this.props.sendCheer({
                                            variables: {
                                                input: d
                                            }
                                        })];
                                    case 4:
                                        return (u = r.sent()).data.sendCheer && u.data.sendCheer.validationError ? (this.props.onSendCheerError && this.props.onSendCheerError(u.data.sendCheer.validationError), this.setState({
                                            isSendingBits: !1,
                                            showCard: pe.None
                                        }), this.chatInputRef && this.chatInputRef.focus(), [2]) : [3, 6];
                                    case 5:
                                        return r.sent(), this.props.onSendCheerError && this.props.onSendCheerError({
                                            code: f.F.UNKNOWN
                                        }), this.setState({
                                            isSendingBits: !1
                                        }), this.chatInputRef && this.chatInputRef.focus(), [2];
                                    case 6:
                                        return this.props.onSendCheerSuccess(), this.setState({
                                            isSendingBits: !1,
                                            showCard: pe.None,
                                            value: ""
                                        }), this.chatInputRef && this.chatInputRef.focus(), this.autocompleteInputRef && this.autocompleteInputRef.setValue(""), [2]
                                }
                            })
                        })
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            return e.messageCheers.length ? e : {
                                showCard: e.showCard === pe.Emotes ? pe.None : pe.Emotes
                            }
                        })
                    }, n.onBitsIconClick = function() {
                        n.state.showCard === pe.Bits ? n.trackBitsCardInteraction(H.a.CloseCard) : n.trackBitsCardInteraction(H.a.OpenCard), n.setState({
                            showCard: n.state.showCard === pe.Bits ? pe.None : pe.Bits
                        })
                    }, n.onShowViewersList = function() {
                        n.state.showCard !== pe.None && n.setState({
                            showCard: pe.None
                        }), n.props.showViewersList()
                    }, n.onBitsClose = function() {
                        n.state.showCard === pe.Bits && n.setState({
                            showCard: pe.None
                        }), n.trackBitsCardInteraction(H.a.CloseCard)
                    }, n.onChatRestrictionBalloonClose = function() {
                        n.state.showCard === pe.ChatRestriction && n.setState({
                            showCard: pe.None
                        })
                    }, n.onChatRestrictionBalloonOpen = function() {
                        n.setState({
                            showCard: pe.ChatRestriction
                        })
                    }, n.onClickEmote = function(e) {
                        var t = n.state.value;
                        n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef.setValue(t)
                    }, n.onEmotePickerDataLoaded = function(e) {
                        e && n.setState({
                            showEmotePickerButton: !0
                        })
                    }, n.trackBitsCardInteraction = function(e, t) {
                        var i = {
                            actionName: e,
                            emoteType: t && t.emoteType,
                            emoteLevel: t && t.emoteLevel,
                            location: t && t.location,
                            displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                        };
                        Object(H.h)(i)
                    }, n.resetAndUpdateRenderSentChatMessageEvent = function() {
                        n.props.latencyTracking.resetCustomEvents(M.a.Chat);
                        var e = n.props.latencyTracking.registerCustomEvent({
                            benchmark: 400,
                            group: M.a.Chat,
                            key: M.b.ChatRenderSent,
                            label: M.c.RenderSent,
                            start: M.d.Registration
                        });
                        n.props.updateRenderSentChatMessageEvent(e)
                    }, n.isCurrentUserBanned = function() {
                        if (n.props.data && !n.props.data.loading && !n.props.data.error && n.props.data.channel) {
                            var e = n.props.data.channel.self;
                            if (e && e.banStatus && e.banStatus.isPermanent) return !0
                        }
                        return !1
                    }, n.userState = function() {
                        var e = !!(n.props.data && n.props.data.channel && n.props.data.channel.self && n.props.data.channel.self.subscriptionBenefit),
                            t = !(!n.props.data || !n.props.data.currentUser || n.props.data.currentUser.id !== n.props.channelID);
                        return {
                            isStaff: !!n.props.isStaff,
                            canModerate: !!n.props.isCurrentUserModerator,
                            isBanned: n.isCurrentUserBanned(),
                            isSubscribed: e,
                            isChannelOwner: t
                        }
                    }, n.chatState = function() {
                        return {
                            verifiedOnlyMode: !1,
                            followerDuration: n.props.followerDuration,
                            followerMode: n.props.followerMode,
                            slowMode: n.props.slowMode,
                            slowModeDuration: n.props.slowModeDuration,
                            subsOnlyMode: n.props.subsOnlyMode
                        }
                    }, n.isTypingCommand = function() {
                        return "/" === n.state.value.substr(0, 1) && "/me" !== n.state.value.substr(0, 3)
                    }, n.isTypingCheer = function() {
                        return n.state.messageCheers.length > 0
                    }, n.chatRestrictionsEnabled = function() {
                        return Se() || n.props.isStaff
                    }, n.state = {
                        hasInteractedOrPageload: t.firstPageLoaded,
                        hasSeenAndRejectedEmbedPrompt: !1,
                        isSendingBits: !1,
                        messageCheers: [],
                        showBuyBits: !1,
                        showCard: pe.None,
                        showEmotePickerButton: !!t.authToken,
                        showRaidsSettingsTooltip: !1,
                        showRaidsFollowerOnlyTooltip: !1,
                        showAutomodSettingsTooltip: !1,
                        value: ""
                    }, n
                }
                return r.__extends(t, e), t.prototype.componentWillUpdate = function(e, t) {
                    if (t.value !== this.state.value && this.props.bitsConfig) {
                        var n = [];
                        Object(x.e)(t.value, this.props.bitsConfig).forEach(function(e) {
                            e.type === Ee.a.Emote && n.push(e.content)
                        }), n.length && t.showCard === pe.Emotes && this.setState({
                            showCard: pe.None
                        }), this.setState({
                            messageCheers: Object(x.b)(n, this.props.bitsConfig)
                        })
                    }
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    !this.props.firstPageLoaded && e.firstPageLoaded && (this.setState({
                        hasInteractedOrPageload: !0
                    }), this.props.isCurrentUserModerator && c.l.get("automodChatCogTooltipSeenNumTimes", 0) < 3 && this.setState({
                        showAutomodSettingsTooltip: !0
                    }, function() {
                        setTimeout(t.incrementAndHideAutomodTooltipCounter, 15e3)
                    })), this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && c.l.get("raidsModerationTooltipsSeenNumTimes", 0) < Le && this.setState({
                        showRaidsSettingsTooltip: !0,
                        showRaidsFollowerOnlyTooltip: !0
                    }, function() {
                        setTimeout(function() {
                            var e = c.l.get("raidsModerationTooltipsSeenNumTimes", 0) + 1;
                            c.l.set("raidsModerationTooltipsSeenNumTimes", e), t.setState({
                                showRaidsSettingsTooltip: !1
                            })
                        }, 2e4)
                    }), this.props.data && this.props.data.channel && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.shouldSendAutoModdedCheer && this.onMessageSend()
                }, t.prototype.render = function() {
                    if (this.isCurrentUserBanned()) return a.createElement(E.Va, {
                        padding: {
                            bottom: 2,
                            x: 2
                        }
                    }, a.createElement(E.xb, {
                        padding: {
                            bottom: 1,
                            x: 2
                        },
                        borderTop: !0
                    }), a.createElement(E.Va, {
                        textAlign: E.Jb.Center
                    }, a.createElement(E.V, {
                        color: E.O.Alt,
                        "data-test-selector": "current-user-banned-text",
                        bold: !0
                    }, Object(c.d)("You are currently banned from this channel.", "ChatInput"))), this.renderButtonContainer(!0));
                    if (this.state.hasSeenAndRejectedEmbedPrompt) return a.createElement(E.Va, {
                        className: "chat-input",
                        display: this.props.hidden ? E.W.Hide : E.W.Block,
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, a.createElement(E.V, {
                        "data-test-selector": "chat-embed-denied-text"
                    }, Object(c.d)("You rejected the prompt to send messages in this embedded version of Twitch Chat. If this was done in error, please refresh the page.", "ChatInput")), this.renderButtonContainer(!0));
                    var e = [];
                    this.props.bitsConfig && e.push(a.createElement(E.A, {
                        key: "bits",
                        icon: E.nb.Bits,
                        ariaLabel: Object(c.d)("Bits", "ChatInput"),
                        type: E.C.Secondary,
                        onClick: this.onBitsIconClick,
                        "data-a-target": "bits-button"
                    })), this.state.showEmotePickerButton && e.push(a.createElement(Oe.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle
                    }));
                    var t = null;
                    this.state.hasInteractedOrPageload && (t = a.createElement(Oe.c, {
                        channelOwnerID: this.props.channelID,
                        emotePickerSource: Ie.a.Chat,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === pe.Emotes
                    }));
                    var n = null;
                    this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = a.createElement(U.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentCheers: this.state.messageCheers,
                        isSending: this.state.isSendingBits,
                        isStaff: this.props.isStaff,
                        onCancelSend: this.cancelDelayedSend,
                        onClickCheermote: this.onClickEmote,
                        onConfirmSend: this.confirmDelayedSend,
                        onUserClose: this.onBitsClose,
                        trackBitsCardInteraction: this.trackBitsCardInteraction,
                        visible: this.state.showCard === pe.Bits,
                        cheerMessageAutoModded: this.props.isTextInputDisabled,
                        bitsSendErrorCode: this.props.bitsSendErrorCode,
                        bitsSendHasError: this.props.bitsSendHasError
                    }));
                    var r = null;
                    this.props.data && this.props.data.channel && this.props.data.channel.cheer && this.props.data.channel.cheer.hashtags && this.state.messageCheers.length > 0 && (r = a.createElement(F, {
                        hashTags: this.props.data.channel.cheer.hashtags
                    }));
                    var o = null;
                    this.props.moderatedMessageParts && this.props.moderatedMessageParts.length > 0 && (o = a.createElement(ce, {
                        moderatedMessageParts: this.props.moderatedMessageParts
                    }));
                    var s = this.userState(),
                        l = Z(this.chatState(), s),
                        d = this.isTypingCommand() || this.isTypingCheer(),
                        u = !1;
                    this.chatRestrictionsEnabled() && (u = !d && l !== i.None);
                    var m = null;
                    return this.chatRestrictionsEnabled() && this.props.data && !this.props.data.loading && (m = a.createElement(re, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        closeBalloon: this.onChatRestrictionBalloonClose,
                        openBalloon: this.onChatRestrictionBalloonOpen,
                        reason: l,
                        showBalloon: this.state.showCard === pe.ChatRestriction
                    })), a.createElement(E.Va, {
                        className: "chat-input",
                        display: this.props.hidden ? E.W.Hide : E.W.Block,
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, o, m, a.createElement(E.Oa, {
                        display: this.props.moderatedMessageParts ? E.W.Hide : E.W.Block,
                        position: E.db.Relative,
                        zIndex: E.ac.Default
                    }, a.createElement("div", {
                        onMouseEnter: this.onMouseEnterInput
                    }, t, n, a.createElement(w.b, {
                        componentType: w.a.TextArea,
                        suggestionSource: w.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onFocus: this.onInputFocus,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        paddingRight: 30 * e.length,
                        placeholder: Object(c.d)("Send a message", "ChatInput"),
                        noResize: !0,
                        "data-a-target": "chat-input",
                        "data-test-selector": "chat-input",
                        disabled: this.state.isSendingBits || this.props.isTextInputDisabled,
                        containerElement: this.props.containerElement
                    }, a.createElement(w.d, {
                        emotes: this.props.emotes
                    }), a.createElement(Q, null), r), a.createElement(E.Va, {
                        position: E.db.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e))), this.renderButtonContainer(u))
                }, t.prototype.renderButtonContainer = function(e) {
                    return void 0 === e && (e = !1), a.createElement(E.Va, {
                        className: "chat-input__buttons-container",
                        display: E.W.Flex,
                        justifyContent: E.Ua.Between,
                        margin: {
                            top: 1
                        }
                    }, a.createElement(E.Va, {
                        display: E.W.Flex,
                        flexDirection: E.Y.Row
                    }, a.createElement(E.Va, {
                        position: E.db.Relative
                    }, a.createElement(G.a, {
                        onToggle: this.onChatSettingsToggle,
                        onShowChatRules: this.props.onShowChatRules,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        authToken: this.props.authToken,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        onChatCommand: this.onChatCommand,
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        channelID: this.props.channelID,
                        sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip,
                        containerElement: this.props.containerElement
                    }), this.renderChatCogTooltips()), a.createElement(E.A, {
                        ariaLabel: Object(c.d)("Users in Chat", "ChatInput"),
                        "data-a-target": "chat-viewer-list",
                        "data-test-selector": "chat-viewer-list",
                        icon: E.nb.ViewerList,
                        onClick: this.onShowViewersList
                    })), this.renderSendButton(e))
                }, t.prototype.renderSendButton = function(e) {
                    var t;
                    return void 0 === e && (e = !1), t = this.state.value && null !== Object(Ce.o)(this.state.value) ? Object(c.d)("Whisper", "ChatInput") : Object(c.d)("Chat", "ChatInput"), a.createElement(E.z, {
                        onClick: this.onMessageSend,
                        "data-a-target": "chat-send-button",
                        "data-test-selector": "chat-send-button",
                        disabled: this.state.isSendingBits || this.props.isTextInputDisabled || e
                    }, t)
                }, t.prototype.renderChatCogTooltips = function() {
                    return this.state.showRaidsSettingsTooltip ? a.createElement(oe, null) : this.state.showAutomodSettingsTooltip ? a.createElement(ae, null) : null
                }, t.prototype.sendRegularMessage = function() {
                    var e = this;
                    if (this.props.onSendMessage) {
                        var t = Object(Ce.m)(this.state.value);
                        if (t && function() {
                                var e = "test" === c.o.experiments.getAssignment(ue.b.RaidUpsell),
                                    t = c.l.get(me, !1);
                                return e && !t
                            }()) return this.setState({
                            showCard: pe.None
                        }, function() {
                            e.trackChatEvent(), e.autocompleteInputRef.setValue(""), e.props.openRaidUpsellFromHost(t.recipientLogin)
                        });
                        this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef.setValue(""), this.setState({
                            showCard: pe.None
                        }))
                    }
                }, t.prototype.trackChatEvent = function() {
                    Object(ye.a)({
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isHostMode: this.props.isHostMode,
                        player: this.props.isPopout ? ke.a.Embed : ke.a.Web,
                        subOnlyMode: this.props.subsOnlyMode,
                        emotePickerSessionID: this.props.emotePickerSessionID
                    })
                }, t.prototype.trackMentions = function() {
                    if (this.state.value && this.props.sessionUser)
                        for (var e = 0, t = Object(T.a)(this.state.value, {
                                mentions: {
                                    senderLogin: this.props.sessionUser.login,
                                    sessionUser: this.props.sessionUser
                                }
                            }); e < t.length; e++) {
                            var n = t[e];
                            n.type === Ee.a.Mention && n.content.currentUserMentionRelation !== ve.a.Recipient && Object(Ne.a)({
                                channelLogin: this.props.channelLogin,
                                isHostMode: this.props.isHostMode,
                                mentionedUserDisplayName: n.content.recipient,
                                userLogin: this.props.sessionUser.login
                            })
                        } else c.j.warn("[ChatInput] trackMentions was called in a nonsensical state.")
                }, t
            }(a.Component);
            var Ue = Object(y.compose)(Object(d.a)(De, {
                    name: "sendCheer"
                }), Object(d.a)(Ae, {
                    skip: function(e) {
                        return !e.firstPageLoaded
                    }
                }), Object(_.a)([{
                    topic: function(e) {
                        return Object(h.E)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }]), Object(ee.c)("ChatInput", {
                    autoReportInteractive: !0
                }), Object(N.connect)(function(e) {
                    return {
                        followerDuration: e.chat.followerDuration,
                        followerMode: e.chat.followerMode,
                        slowMode: e.chat.slowMode,
                        slowModeDuration: e.chat.slowModeDuration,
                        subsOnlyMode: e.chat.subsOnlyMode,
                        emotePickerSessionID: e.chat.emotePickerSessionID,
                        sessionUser: Object(L.e)(e)
                    }
                }, function(e) {
                    return Object(s.bindActionCreators)({
                        login: function() {
                            return Object(R.e)(A.a.Chat)
                        },
                        updateRenderSentChatMessageEvent: W.R
                    }, e)
                }))(we),
                Be = n("r2XO"),
                Pe = (n("9Rmp"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onClickConfirm = function() {
                            t.markRoomSeen(), t.props.onCloseChatRules()
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(E.Va, {
                            className: "chat-rules",
                            position: E.db.Relative
                        }, a.createElement(E.xb, {
                            border: !0,
                            background: E.r.Base,
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(E.Va, {
                            padding: 1
                        }, a.createElement(E.Va, {
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(E.V, {
                            type: E.Nb.H6
                        }, Object(c.d)("Chat Rules:", "ChatRules"))), a.createElement(E.Va, null, a.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                            return a.createElement("li", {
                                key: t
                            }, e)
                        }))), a.createElement(E.Va, {
                            margin: {
                                top: 1
                            },
                            display: E.W.Flex,
                            justifyContent: E.Ua.Center
                        }, a.createElement(E.z, {
                            size: E.D.Small,
                            onClick: this.onClickConfirm
                        }, Object(c.d)("Ok, got it!", "ChatRules"))))))
                    }, t.prototype.markRoomSeen = function() {
                        var e = c.l.get("chat_rules_shown", {});
                        e[this.props.channelLogin] = !0, c.l.set("chat_rules_shown", e)
                    }, t
                }(a.Component)),
                Fe = n("8in3"),
                je = n("Y3y8"),
                xe = (n("7NxT"), n("VS9Q")),
                Ve = n("j+2s");
            n("kPCN");
            n.d(t, "a", function() {
                return He
            }), n.d(t, "b", function() {
                return Ke
            });
            var He = "chat-room-header-label",
                Ge = "chat_rules_shown",
                We = c.j.withCategory("chat-room"),
                Ye = l.a.wrap(function() {
                    return n.e(189).then(n.bind(null, "A39y"))
                }, "ChatViewers"),
                ze = l.a.wrap(function() {
                    return Promise.all([n.e(0), n.e(188)]).then(n.bind(null, "Y9qK"))
                }, "NewChatterRitual", {
                    failSilently: !0,
                    placeholder: null
                }),
                qe = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        n.hasAcceptedModerationConfirmation = !1, n.closeViewersList = function() {
                            n.setState({
                                showViewersList: !1
                            })
                        }, n.showViewersList = function() {
                            n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                                showViewersList: !0
                            })
                        }, n.confirmModerationAction = function() {
                            return !(n.props.isEmbedded && !n.hasAcceptedModerationConfirmation) || (n.hasAcceptedModerationConfirmation = window.confirm(Object(c.d)("Do you want to enable the ability to timeout and ban on embedded version of Twitch Chat? This setting will persist until you refresh the page.", "ChatRoom")), n.hasAcceptedModerationConfirmation)
                        }, n.onChatInputFocus = function() {
                            var e = c.l.get(Ge, {});
                            n.props.chatRules && n.props.chatRules.length > 0 && !e[n.props.channelLogin] && n.onShowChatRules()
                        }, n.onShowChatRules = function() {
                            n.props.authToken && n.props.onShowChatRules()
                        }, n.setChatListElement = function(e) {
                            n.setState({
                                chatListElement: e
                            })
                        }, n.shouldHideChatInput = function() {
                            return n.state.showViewersList
                        }, n.openRaidUpsellFromHost = function(e) {
                            return n.closeRaidUpsell(function() {
                                n.setState({
                                    raidUpsellTarget: e
                                })
                            })
                        }, n.closeRaidUpsell = function(e) {
                            return n.setState({
                                raidUpsellTarget: null
                            }, function() {
                                e && e()
                            })
                        }, n.onSendCheerError = function(e) {
                            e.code !== f.F.AUTO_MOD_MESSAGE ? n.setState({
                                bitsSendErrorCode: e.code,
                                bitsSendHasError: !0
                            }) : n.setState({
                                showCheerAutoModPrompt: !0,
                                shouldSendAutoModdedCheer: !1,
                                moderatedMessageParts: Object(xe.e)(e.messageContent.fragments)
                            })
                        }, n.clearBitsSendError = function() {
                            n.setState({
                                bitsSendErrorCode: f.F.UNKNOWN,
                                bitsSendHasError: !1
                            })
                        }, n.clearCheerAutoModPrompt = function() {
                            n.setState({
                                showCheerAutoModPrompt: !1,
                                shouldSendAutoModdedCheer: !1,
                                moderatedMessageParts: null
                            })
                        }, n.onCheerAnyway = function() {
                            n.setState({
                                showCheerAutoModPrompt: !1,
                                shouldSendAutoModdedCheer: !0
                            })
                        };
                        var i = new g.c([], [], n.props.channelLogin);
                        return n.state = {
                            showViewersList: !1,
                            raidUpsellTarget: null,
                            badgeSets: i,
                            showCheerAutoModPrompt: !1,
                            shouldSendAutoModdedCheer: !1,
                            bitsSendErrorCode: f.F.UNKNOWN,
                            bitsSendHasError: !1,
                            moderatedMessageParts: null
                        }, n
                    }
                    return r.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        this.props.channelLogin !== e.channelLogin && this.props.onCloseChatRules()
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.onCloseChatRules()
                    }, t.prototype.render = function() {
                        if (this.props.isBackground) return null;
                        if (this.props.isHidden && !this.props.isPopout) return a.createElement(E.xb, {
                            alignItems: E.f.Center,
                            background: E.r.Alt2,
                            borderLeft: !0,
                            display: E.W.Flex,
                            flexDirection: E.Y.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: E.Ua.Center,
                            color: E.O.Base,
                            position: E.db.Relative
                        }, a.createElement(E.Va, {
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(E.V, {
                            fontSize: E.Aa.Size5
                        }, Object(c.d)("Chat is hidden.", "ChatRoom"))), a.createElement(E.z, {
                            onClick: this.props.onChatUnhide,
                            "data-a-target": "show-chat-button",
                            "data-test-selector": "show-chat-button"
                        }, Object(c.d)("Show Chat", "ChatRoom")));
                        var e = this.props.bitsConfig && this.props.firstPageLoaded && a.createElement(C.a, {
                                badgeData: this.state.badgeSets,
                                bitsConfig: this.props.bitsConfig,
                                blockLinks: this.props.blockLinks,
                                channelID: this.props.channelID,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                userID: this.props.userID
                            }),
                            t = this.state.showViewersList && a.createElement(E.xb, {
                                attachBottom: !0,
                                attachLeft: !0,
                                attachRight: !0,
                                attachTop: !0,
                                background: E.r.Alt2,
                                position: E.db.Absolute,
                                zIndex: E.ac.Default
                            }, a.createElement(E.Va, {
                                padding: {
                                    y: 1
                                }
                            }, a.createElement(E.Va, {
                                position: E.db.Absolute,
                                attachLeft: !0,
                                margin: {
                                    left: 1
                                }
                            }, a.createElement(E.A, {
                                icon: E.nb.Close,
                                ariaLabel: Object(c.d)("Close", "ChatRoom"),
                                onClick: this.closeViewersList,
                                "data-test-selector": "close-viewer-list"
                            }))), a.createElement(Ye, {
                                channelLogin: this.props.channelLogin,
                                closeViewersList: this.closeViewersList,
                                isCurrentUserBanned: this.props.currentUserBannedStatusData && this.props.currentUserBannedStatusData.channel && this.props.currentUserBannedStatusData.channel.self && this.props.currentUserBannedStatusData.channel.self.banStatus && this.props.currentUserBannedStatusData.channel.self.banStatus.isPermanent || !1,
                                "data-test-selector": "chat-viewers"
                            })),
                            n = !!this.props.authToken && !this.props.isEmbedded,
                            i = null;
                        return this.props.isChatRulesOpen && this.props.chatRules && this.props.chatRules.length && (i = a.createElement(E.Va, {
                            padding: {
                                x: 2
                            }
                        }, a.createElement(Pe, {
                            chatRules: this.props.chatRules,
                            channelLogin: this.props.channelLogin,
                            onCloseChatRules: this.props.onCloseChatRules
                        }))), a.createElement(E.Na, {
                            "data-test-selector": "chat-room-component-layout",
                            "data-a-target": this.props.theme === p.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                            flexShrink: 1,
                            flexGrow: 1,
                            display: E.W.Flex,
                            flexDirection: E.Y.Column,
                            fullWidth: !0
                        }, a.createElement("section", {
                            className: "chat-room",
                            role: "complementary",
                            "aria-labelledby": He
                        }, a.createElement(E.xb, {
                            background: E.r.Alt2,
                            borderLeft: !this.props.isEmbedded,
                            display: E.W.Flex,
                            flexDirection: E.Y.Column,
                            flexWrap: E.Z.NoWrap,
                            position: E.db.Relative,
                            flexGrow: 1,
                            fullHeight: !0,
                            color: E.O.Base,
                            className: "chat-room__content"
                        }, this.props.chatRoomHeader, e, a.createElement(Be.a, {
                            badgeSets: this.state.badgeSets,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isEmbedded: this.props.isEmbedded,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isCurrentUserStaff: this.props.isStaff,
                            onPushMessage: this.props.onPushMessage,
                            containerRef: this.setChatListElement,
                            confirmModerationAction: this.confirmModerationAction,
                            theme: this.props.theme
                        }), a.createElement(E.Va, {
                            className: "chat-room__notifications",
                            position: E.db.Absolute,
                            zIndex: E.ac.Default,
                            fullWidth: !0
                        }, this.props.children), i, t, this.state.raidUpsellTarget && a.createElement(be, {
                            send: this.props.onSendMessage,
                            targetChannelLogin: this.state.raidUpsellTarget,
                            sourceChannelLogin: this.props.channelLogin,
                            closeRaidUpsell: this.closeRaidUpsell
                        }), this.props.firstPageLoaded && a.createElement(ze, {
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            isEmbedded: this.props.isEmbedded,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            onPushMessage: this.props.onPushMessage,
                            onSendMessage: this.props.onSendMessage
                        }), this.state.showCheerAutoModPrompt && a.createElement(k, {
                            badgeSets: this.state.badgeSets,
                            onEditCheer: this.clearCheerAutoModPrompt,
                            onCheerAnyway: this.onCheerAnyway
                        }), a.createElement(Ue, {
                            authToken: this.props.authToken,
                            bitsConfig: n ? this.props.bitsConfig : void 0,
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            emotes: this.props.emotes,
                            emoteMap: this.props.emoteMap,
                            firstPageLoaded: this.props.firstPageLoaded,
                            hidden: this.shouldHideChatInput(),
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isEmbedded: this.props.isEmbedded,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            isStaff: this.props.isStaff,
                            onChatCommand: this.props.onSendMessage,
                            onShowChatRules: this.props.authToken && this.props.chatRules && this.props.chatRules.length ? this.onShowChatRules : void 0,
                            badgeSets: this.state.badgeSets,
                            userBadges: this.props.userBadges,
                            showViewersList: this.showViewersList,
                            raidReceived: this.props.raidReceived,
                            onSendMessage: this.props.onSendMessage,
                            onInputFocus: this.onChatInputFocus,
                            containerElement: this.state.chatListElement,
                            openRaidUpsellFromHost: this.openRaidUpsellFromHost,
                            onSendCheerError: this.onSendCheerError,
                            onSendCheerSuccess: this.clearCheerAutoModPrompt,
                            isTextInputDisabled: this.state.showCheerAutoModPrompt,
                            shouldSendAutoModdedCheer: this.state.shouldSendAutoModdedCheer,
                            moderatedMessageParts: this.state.moderatedMessageParts,
                            bitsSendErrorCode: this.state.bitsSendErrorCode,
                            bitsSendHasError: this.state.bitsSendHasError,
                            clearBitsSendError: this.clearBitsSendError
                        }), a.createElement(E.Va, {
                            className: "chat-room__viewer-card",
                            fullHeight: !0,
                            fullWidth: !0,
                            position: E.db.Absolute,
                            "data-a-target": "chat-user-card"
                        }, a.createElement(Fe.a, {
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            confirmModerationAction: this.confirmModerationAction,
                            onSendMessage: this.props.onSendMessage,
                            channelID: this.props.channelID
                        })))))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        if (e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && this.setState({
                                badgeSets: new g.c(e.data.badges, e.data.user.broadcastBadges, e.channelLogin)
                            }), e.data && e.data.user && e.data.user.self && e.data.user.self.displayBadges) {
                            var t = {};
                            e.data.user.self.displayBadges.forEach(function(e) {
                                t[e.setID] = e.version
                            }), c.o.tmi.client.updateChannelBadges(e.channelLogin, t)
                        }
                    }, t
                }(a.Component),
                Ke = Object(s.compose)(Object(d.a)(Ve, {
                    options: function(e) {
                        return {
                            name: "data",
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(je.a)(), Object(u.a)(function(e) {
                    return {
                        query: Ve,
                        variables: {
                            channelLogin: e.channelLogin
                        },
                        topic: Object(h.B)(e.userID),
                        type: m.PubsubMessageType.UserBitsBadgeUpdate,
                        skip: !e.userID,
                        mutator: function(t, n) {
                            if (We.debug("Received bits-user-update-v1 pubsub update", {
                                    data: n,
                                    event: t
                                }), !n.badges || t.message_type === S.b.Balance || null === t.data.newest_version || t.data.channel_id !== e.channelID) return n;
                            var i = n.badges.find(function(e) {
                                return e.setID === t.data.set_id && e.version === t.data.newest_version
                            });
                            return void 0 !== i && n.user.self && n.user.self.displayBadges && (n.user.self.displayBadges = n.user.self.displayBadges.map(function(e) {
                                return e.setID === i.setID && e.version !== i.version ? i : e
                            }), (!n.user.self.selectedBadge || i.setID === S.a.Bits && n.user.self.selectedBadge.setID === S.a.Bits) && (n.user.self.selectedBadge = i), n.user.self.selectedBadge && (i.setID !== S.a.Leaderboard || n.user.self.selectedBadge.setID !== S.a.Bits && n.user.self.selectedBadge.setID !== S.a.Leaderboard) || (n.user.self.selectedBadge = i)), n
                        }
                    }
                }), o.a)(qe)
        },
        BhFH: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("8jSG"),
                o = n("cMjZ"),
                s = n("kSkr");

            function c() {
                var e = this;
                return Object(r.a)(s, {
                    props: function(t) {
                        return {
                            blockUserMutation: function(n, r, s, c) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            sourceContext: s,
                                                            reason: r
                                                        }
                                                    },
                                                    optimisticResponse: {
                                                        blockUser: {
                                                            __typename: "BlockUserPayload",
                                                            targetUser: {
                                                                __typename: "User",
                                                                id: n
                                                            }
                                                        }
                                                    },
                                                    update: function(e) {
                                                        var t = e.readFragment({
                                                            id: Object(o.a)(c),
                                                            fragment: a
                                                        });
                                                        t && (t.blockedUsers.push({
                                                            id: n,
                                                            __typename: "User"
                                                        }), e.writeFragment({
                                                            id: Object(o.a)(c),
                                                            fragment: a,
                                                            data: t
                                                        }))
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return e.sent(), [3, 3];
                                            case 2:
                                                throw new Error("blockUserMutation is not ready");
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        By5U: function(e, t) {},
        CK1f: function(e, t, n) {},
        CzFK: function(e, t, n) {
            "use strict";
            n.d(t, "f", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return a
            }), n.d(t, "d", function() {
                return o
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "g", function() {
                return c
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "l", function() {
                return d
            }), n.d(t, "h", function() {
                return u
            }), n.d(t, "i", function() {
                return m
            }), n.d(t, "j", function() {
                return p
            }), n.d(t, "m", function() {
                return h
            }), n.d(t, "k", function() {
                return f
            }), n.d(t, "n", function() {
                return g
            });
            var i = "whispers.THREAD_OPENED",
                r = "whispers.THREAD_CLOSED",
                a = "whispers.THREAD_COLLAPSED",
                o = "whispers.THREAD_EXPANDED",
                s = "whispers.THREAD_FOCUSED",
                c = "whispers.THREAD_UNFOCUSED",
                l = "whispers.CONTENT_RESIZED";

            function d(e, t) {
                return {
                    type: i,
                    data: e,
                    contentWidth: t
                }
            }

            function u(e, t) {
                return {
                    type: r,
                    threadID: e,
                    contentWidth: t
                }
            }

            function m(e, t) {
                return {
                    type: a,
                    threadID: e,
                    contentWidth: t
                }
            }

            function p(e, t) {
                return {
                    type: o,
                    threadID: e,
                    contentWidth: t
                }
            }

            function h(e) {
                return {
                    type: l,
                    contentWidth: e
                }
            }

            function f(e, t) {
                return {
                    type: s,
                    threadID: e,
                    contentWidth: t
                }
            }

            function g(e, t) {
                return {
                    type: c,
                    threadID: e,
                    contentWidth: t
                }
            }
        },
        D91L: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/7QA"),
                s = n("gcd7"),
                c = n("yR8l"),
                l = n("BhFH"),
                d = n("iS14"),
                u = n("DMoW"),
                m = n("TvOw"),
                p = n("NNSq"),
                h = n("sAMt"),
                f = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.getInvalidUserMessage = function() {
                            return Object(o.d)("No user matching that login.", "IgnoreCommandHandler")
                        }, t.blockUser = function(e) {
                            return e ? e === t.props.currentUserLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                                })
                            } : {
                                deferred: Object(p.a)(e).then(function(e) {
                                    if (!e) return {
                                        notice: t.getInvalidUserMessage()
                                    };
                                    try {
                                        t.props.blockUserMutation(e, m.a.Other, u.c.CHAT, t.props.data && t.props.data.user)
                                    } catch (e) {
                                        return {
                                            notice: Object(o.d)("Unable to ignore user", "IgnoreCommandHandler")
                                        }
                                    }
                                    return {
                                        notice: Object(o.d)("User successfully ignored", "IgnoreCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                                })
                            }
                        }, t.unblockUser = function(e) {
                            return e ? e === t.props.currentUserLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                                })
                            } : {
                                deferred: Object(p.a)(e).then(function(e) {
                                    if (!e) return {
                                        notice: t.getInvalidUserMessage()
                                    };
                                    try {
                                        t.props.unblockUserMutation(e, t.props.data && t.props.data.user)
                                    } catch (e) {
                                        return {
                                            notice: Object(o.d)("Unable to unignore user", "IgnoreCommandHandler")
                                        }
                                    }
                                    return {
                                        notice: Object(o.d)("User successfully unignored", "IgnoreCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(o.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("span", {
                            style: {
                                display: "none"
                            }
                        }, r.createElement(s.a, {
                            command: "ignore",
                            handler: this.blockUser
                        }), r.createElement(s.a, {
                            command: "unignore",
                            handler: this.unblockUser
                        }))
                    }, t
                }(r.Component),
                g = Object(a.compose)(Object(c.a)(h, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.currentUserLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.currentUserLogin
                    }
                }), Object(d.a)(), Object(l.a)())(f);
            n.d(t, "a", function() {
                return g
            })
        },
        "DB+C": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelOwnerID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelOwnerID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "campaignProperties"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "domains"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tier"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "url"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "platform"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 280
                }
            };
            n.loc.source = {
                body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ncampaignProperties {\ndomains\n}\ndisplayName\nsubscriptionProducts {\nid\nname\ntier\nurl\nemotes {\nid\ntoken\n}\nemoteSetID\n}\nself {\nsubscriptionBenefit {\nid\nplatform\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        DLhE: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return d
            }), n.d(t, "a", function() {
                return u
            });
            var i = n("mrSG"),
                r = n("G1cX"),
                a = n("/7QA"),
                o = n("f00E"),
                s = n("+pBb"),
                c = n("W/3w"),
                l = n("F6GT");

            function d(e) {
                return e.chat.renderSent
            }

            function u(e) {
                var t = [];
                if (e.chat && e.chat.commandHandlers)
                    for (var n in e.chat.commandHandlers) e.chat.commandHandlers[n] && t.push(n);
                return t.sort()
            }
            a.o.store.registerReducer("chat", function(e, t) {
                var n;
                switch (void 0 === e && (e = function() {
                    var e = Object(l.a)();
                    return i.__assign({}, e, {
                        commandHandlers: {},
                        emoteSets: [],
                        emotePickerSessionID: null,
                        followerDuration: c.a,
                        followerMode: !1,
                        isChatRulesOpen: !1,
                        isHidden: !1,
                        renderSent: null,
                        slowMode: !1,
                        slowModeDuration: 120,
                        subsOnlyMode: !1,
                        unhideIgnoredUsers: []
                    })
                }()), t.type) {
                    case s.d:
                        return i.__assign({}, e, {
                            isHidden: !0
                        });
                    case s.e:
                        return i.__assign({}, e, {
                            isHidden: !1
                        });
                    case s.f:
                        return i.__assign({}, e, {
                            isChatRulesOpen: !1
                        });
                    case s.i:
                        return i.__assign({}, e, {
                            emoteSets: t.emoteSets
                        });
                    case s.g:
                        return i.__assign({}, e, {
                            emotePickerSessionID: null
                        });
                    case s.h:
                        return i.__assign({}, e, {
                            emotePickerSessionID: Object(o.b)()
                        });
                    case s.j:
                        return i.__assign({}, e, {
                            lastUsedFollowerDurations: i.__assign({}, e.lastUsedFollowerDurations, (n = {}, n[t.channelLogin] = t.duration, n))
                        });
                    case s.r:
                        return i.__assign({}, e, {
                            isChatRulesOpen: !0
                        });
                    case s.q:
                        var a = i.__assign({}, e);
                        return void 0 !== t.roomState.followersOnly && (a.followerMode = t.roomState.followersOnly), void 0 !== t.roomState.followersOnlyRequirement && (a.followerDuration = t.roomState.followersOnlyRequirement), void 0 !== t.roomState.slowMode && (a.slowMode = t.roomState.slowMode), void 0 !== t.roomState.slowModeDuration && (a.slowModeDuration = t.roomState.slowModeDuration), void 0 !== t.roomState.subsOnly && (a.subsOnlyMode = t.roomState.subsOnly), a;
                    case s.b:
                        return i.__assign({}, e, {
                            showAutoModActions: !1
                        });
                    case s.c:
                        return i.__assign({}, e, {
                            showAutoModActions: !0
                        });
                    case s.k:
                        return i.__assign({}, e, {
                            showModerationActions: !1
                        });
                    case s.l:
                        return i.__assign({}, e, {
                            showModerationActions: !0
                        });
                    case s.m:
                        return i.__assign({}, e, {
                            showModIcons: !1
                        });
                    case s.n:
                        return i.__assign({}, e, {
                            showModIcons: !0
                        });
                    case s.s:
                        return i.__assign({}, e, {
                            showTimestamps: !1
                        });
                    case s.t:
                        return i.__assign({}, e, {
                            showTimestamps: !0
                        });
                    case s.v:
                        return i.__assign({}, e, {
                            useHighContrastColors: !1
                        });
                    case s.w:
                        return i.__assign({}, e, {
                            useHighContrastColors: !0
                        });
                    case s.a:
                        return r(e, function(e) {
                            return e.commandHandlers
                        }, function(e) {
                            return t.command in e ? e[t.command].push(t.handler) : e[t.command] = [t.handler], e
                        });
                    case s.o:
                        return r(e, function(e) {
                            return e.commandHandlers
                        }, function(e) {
                            if (!(t.command in e)) return e;
                            var n = e[t.command].indexOf(t.handler);
                            return e[t.command].splice(n, 1), 0 === e[t.command].length && delete e[t.command], e
                        });
                    case s.p:
                        return i.__assign({}, e, {
                            renderSent: t.customEvent
                        });
                    case s.u:
                        return i.__assign({}, e, {
                            unhideIgnoredUsers: e.unhideIgnoredUsers.concat([t.userID])
                        });
                    default:
                        return e
                }
            })
        },
        DMoW: function(e, t, n) {
            "use strict";
            var i, r, a, o, s, c, l, d, u, m, p, h, f, g, b, v, E, k, C, S, y, N, _, O, I, T, A, D, R, M, L, w, U, B, P, F, j, x, V, H, G, W, Y, z, q, K, Q, X, $, Z, J, ee, te, ne, ie, re, ae, oe, se, ce, le, de, ue, me, pe, he, fe, ge, be, ve, Ee, ke, Ce, Se, ye, Ne, _e, Oe, Ie, Te, Ae, De, Re, Me, Le, we, Ue, Be, Pe, Fe, je, xe, Ve, He, Ge, We, Ye, ze, qe, Ke, Qe, Xe, $e, Ze, Je, et, tt, nt, it, rt, at, ot, st, ct;
            n.d(t, "c", function() {
                    return r
                }), n.d(t, "E", function() {
                    return s
                }), n.d(t, "x", function() {
                    return c
                }), n.d(t, "g", function() {
                    return f
                }), n.d(t, "e", function() {
                    return E
                }), n.d(t, "f", function() {
                    return k
                }), n.d(t, "j", function() {
                    return y
                }), n.d(t, "N", function() {
                    return N
                }), n.d(t, "G", function() {
                    return _
                }), n.d(t, "o", function() {
                    return O
                }), n.d(t, "F", function() {
                    return A
                }), n.d(t, "b", function() {
                    return U
                }), n.d(t, "p", function() {
                    return P
                }), n.d(t, "I", function() {
                    return F
                }), n.d(t, "K", function() {
                    return j
                }), n.d(t, "z", function() {
                    return x
                }), n.d(t, "L", function() {
                    return V
                }), n.d(t, "q", function() {
                    return W
                }), n.d(t, "n", function() {
                    return Y
                }), n.d(t, "J", function() {
                    return z
                }), n.d(t, "a", function() {
                    return q
                }), n.d(t, "t", function() {
                    return K
                }), n.d(t, "v", function() {
                    return Q
                }), n.d(t, "B", function() {
                    return $
                }), n.d(t, "C", function() {
                    return Z
                }), n.d(t, "A", function() {
                    return ee
                }), n.d(t, "D", function() {
                    return te
                }), n.d(t, "M", function() {
                    return pe
                }), n.d(t, "l", function() {
                    return Se
                }), n.d(t, "k", function() {
                    return ye
                }), n.d(t, "O", function() {
                    return Ie
                }), n.d(t, "m", function() {
                    return we
                }), n.d(t, "y", function() {
                    return Ue
                }), n.d(t, "s", function() {
                    return je
                }), n.d(t, "i", function() {
                    return Ve
                }), n.d(t, "h", function() {
                    return He
                }), n.d(t, "u", function() {
                    return Ge
                }), n.d(t, "H", function() {
                    return Ye
                }), n.d(t, "w", function() {
                    return Ze
                }), n.d(t, "d", function() {
                    return ot
                }), n.d(t, "r", function() {
                    return st
                }),
                function(e) {
                    e.CHANNEL_FEED_COMMENT_REPORT = "CHANNEL_FEED_COMMENT_REPORT", e.CHANNEL_FEED_POST_REPORT = "CHANNEL_FEED_POST_REPORT", e.CHAT_REPORT = "CHAT_REPORT", e.CLIP_REPORT = "CLIP_REPORT", e.COLLECTION_REPORT = "COLLECTION_REPORT", e.CURSE_PRIVATE_GROUP = "CURSE_PRIVATE_GROUP", e.CURSE_PUBLIC_GROUP = "CURSE_PUBLIC_GROUP", e.CURSE_WHISPER = "CURSE_WHISPER", e.EVENT_REPORT = "EVENT_REPORT", e.EXTENSION_REPORT = "EXTENSION_REPORT", e.LIVE_UP_REPORT = "LIVE_UP_REPORT", e.RAID_REPORT = "RAID_REPORT", e.ROOM_REPORT = "ROOM_REPORT", e.SINGS_DUET_SEED_REPORT = "SINGS_DUET_SEED_REPORT", e.SINGS_GROUP_BIO_REPORT = "SINGS_GROUP_BIO_REPORT", e.SINGS_GROUP_CHAT_REPORT = "SINGS_GROUP_CHAT_REPORT", e.SINGS_GROUP_NAME_REPORT = "SINGS_GROUP_NAME_REPORT", e.SINGS_VOD_COMMENT_REPORT = "SINGS_VOD_COMMENT_REPORT", e.USER_REPORT = "USER_REPORT", e.VOD_COMMENT_REPORT = "VOD_COMMENT_REPORT", e.VOD_REPORT = "VOD_REPORT", e.WHISPER_REPORT = "WHISPER_REPORT"
                }(i || (i = {})),
                function(e) {
                    e.CHAT = "CHAT", e.WHISPER = "WHISPER"
                }(r || (r = {})),
                function(e) {
                    e.CHANNEL_NOT_FOUND = "CHANNEL_NOT_FOUND", e.FORBIDDEN = "FORBIDDEN", e.TARGET_ALREADY_MOD = "TARGET_ALREADY_MOD", e.TARGET_IS_CHAT_BANNED = "TARGET_IS_CHAT_BANNED", e.TARGET_NOT_FOUND = "TARGET_NOT_FOUND"
                }(a || (a = {})),
                function(e) {
                    e.CHANNEL_NOT_FOUND = "CHANNEL_NOT_FOUND", e.FORBIDDEN = "FORBIDDEN", e.TARGET_NOT_FOUND = "TARGET_NOT_FOUND", e.TARGET_NOT_MOD = "TARGET_NOT_MOD"
                }(o || (o = {})),
                function(e) {
                    e.CHANNEL_NOT_FOUND = "CHANNEL_NOT_FOUND", e.FORBIDDEN = "FORBIDDEN", e.REVOKEE_NOT_FOUND = "REVOKEE_NOT_FOUND", e.REVOKEE_NOT_VIP = "REVOKEE_NOT_VIP"
                }(s || (s = {})),
                function(e) {
                    e.CHANNEL_NOT_FOUND = "CHANNEL_NOT_FOUND", e.FORBIDDEN = "FORBIDDEN", e.GRANTEE_ALREADY_VIP = "GRANTEE_ALREADY_VIP", e.GRANTEE_CHAT_BANNED = "GRANTEE_CHAT_BANNED", e.GRANTEE_NOT_FOUND = "GRANTEE_NOT_FOUND", e.MAX_VIPS_REACHED = "MAX_VIPS_REACHED", e.VIP_ACHIEVEMENT_INCOMPLETE = "VIP_ACHIEVEMENT_INCOMPLETE"
                }(c || (c = {})),
                function(e) {
                    e.PLAYING = "PLAYING", e.STREAMING = "STREAMING", e.WATCHING = "WATCHING"
                }(l || (l = {})),
                function(e) {
                    e.AWAY = "AWAY", e.BUSY = "BUSY", e.IDLE = "IDLE", e.OFFLINE = "OFFLINE", e.ONLINE = "ONLINE"
                }(d || (d = {})),
                function(e) {
                    e.IDLE = "IDLE", e.OFFLINE = "OFFLINE", e.ONLINE = "ONLINE"
                }(u || (u = {})),
                function(e) {
                    e.AWAY = "AWAY", e.BUSY = "BUSY", e.OFFLINE = "OFFLINE", e.ONLINE = "ONLINE"
                }(m || (m = {})),
                function(e) {
                    e.AR = "AR", e.BG = "BG", e.CS = "CS", e.DA = "DA", e.DE = "DE", e.EL = "EL", e.EN = "EN", e.EN_GB = "EN_GB", e.ES = "ES", e.ES_MX = "ES_MX", e.FI = "FI", e.FR = "FR", e.HI = "HI", e.HU = "HU", e.IT = "IT", e.JA = "JA", e.KO = "KO", e.NL = "NL", e.NO = "NO", e.PL = "PL", e.PT = "PT", e.PT_BR = "PT_BR", e.RO = "RO", e.RU = "RU", e.SK = "SK", e.SV = "SV", e.TH = "TH", e.TR = "TR", e.VI = "VI", e.ZH = "ZH", e.ZH_CN = "ZH_CN", e.ZH_TW = "ZH_TW"
                }(p || (p = {})),
                function(e) {
                    e.AR = "AR", e.ASL = "ASL", e.BG = "BG", e.CS = "CS", e.DA = "DA", e.DE = "DE", e.EL = "EL", e.EN = "EN", e.ES = "ES", e.FI = "FI", e.FR = "FR", e.HU = "HU", e.IT = "IT", e.JA = "JA", e.KO = "KO", e.NL = "NL", e.NO = "NO", e.OTHER = "OTHER", e.PL = "PL", e.PT = "PT", e.RO = "RO", e.RU = "RU", e.SK = "SK", e.SV = "SV", e.TH = "TH", e.TR = "TR", e.VI = "VI", e.ZH = "ZH", e.ZH_HK = "ZH_HK"
                }(h || (h = {})),
                function(e) {
                    e.ARCHIVE = "ARCHIVE", e.HIGHLIGHT = "HIGHLIGHT", e.PAST_PREMIERE = "PAST_PREMIERE", e.PREMIERE_UPLOAD = "PREMIERE_UPLOAD", e.UPLOAD = "UPLOAD"
                }(f || (f = {})),
                function(e) {
                    e.GET_BITS = "GET_BITS", e.GET_TURBO = "GET_TURBO", e.SUBSCRIBE = "SUBSCRIBE", e.VISIT_URL = "VISIT_URL"
                }(g || (g = {})),
                function(e) {
                    e.ALLTIME = "ALLTIME", e.MONTH = "MONTH", e.WEEK = "WEEK"
                }(b || (b = {})),
                function(e) {
                    e.AD = "AD", e.BUNDLE = "BUNDLE"
                }(v || (v = {})),
                function(e) {
                    e.GAME_TRAILER = "GAME_TRAILER", e.MISC_TRAILER = "MISC_TRAILER", e.PAY_TO_STREAM = "PAY_TO_STREAM"
                }(E || (E = {})),
                function(e) {
                    e.AVAILABLE = "AVAILABLE", e.CANCELLED = "CANCELLED", e.COMPLETED = "COMPLETED", e.LIVE = "LIVE"
                }(k || (k = {})),
                function(e) {
                    e.FIXED_VALUE_OFF = "FIXED_VALUE_OFF", e.NONE = "NONE", e.PERCENT_OFF = "PERCENT_OFF"
                }(C || (C = {})),
                function(e) {
                    e.CHEER = "CHEER"
                }(S || (S = {})),
                function(e) {
                    e.CREATED = "CREATED", e.CREATING = "CREATING", e.FAILED = "FAILED"
                }(y || (y = {})),
                function(e) {
                    e.PRIVATE = "PRIVATE", e.PUBLIC = "PUBLIC"
                }(N || (N = {})),
                function(e) {
                    e.ENDED = "ENDED", e.LIVE = "LIVE", e.PENDING = "PENDING", e.UNKNOWN = "UNKNOWN"
                }(_ || (_ = {})),
                function(e) {
                    e.ARCHIVES_DISABLED = "ARCHIVES_DISABLED", e.BROADCASTER_NOT_LIVE = "BROADCASTER_NOT_LIVE", e.BROADCAST_FORMAT_INVALID_PREMIERE = "BROADCAST_FORMAT_INVALID_PREMIERE", e.BROADCAST_FORMAT_INVALID_RERUN = "BROADCAST_FORMAT_INVALID_RERUN", e.INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR", e.MAX_DESCRIPTION_LENGTH_EXCEEDED = "MAX_DESCRIPTION_LENGTH_EXCEEDED", e.USER_UNAUTHORIZED = "USER_UNAUTHORIZED", e.VOD_NOT_READY = "VOD_NOT_READY"
                }(O || (O = {})),
                function(e) {
                    e.DARK = "DARK", e.LIGHT = "LIGHT"
                }(I || (I = {})),
                function(e) {
                    e.CUSTOM = "CUSTOM", e.DISPLAY_ONLY = "DISPLAY_ONLY", e.FIRST_PARTY = "FIRST_PARTY", e.RENDER_ONLY = "RENDER_ONLY", e.SPONSORED = "SPONSORED", e.THIRD_PARTY = "THIRD_PARTY", e.UNKNOWN = "UNKNOWN"
                }(T || (T = {})),
                function(e) {
                    e.AMOUNT_BELOW_MIN_BITS = "AMOUNT_BELOW_MIN_BITS", e.AUTO_MOD_MESSAGE = "AUTO_MOD_MESSAGE", e.AUTO_MOD_PENDING = "AUTO_MOD_PENDING", e.CHANNEL_BLOCKED_TERMS = "CHANNEL_BLOCKED_TERMS", e.CHANNEL_INELIGIBLE = "CHANNEL_INELIGIBLE", e.EMOTE_AMOUNT_BELOW_MIN_BITS = "EMOTE_AMOUNT_BELOW_MIN_BITS", e.INSUFFICIENT_BALANCE = "INSUFFICIENT_BALANCE", e.INVALID_BITS_AMOUNT = "INVALID_BITS_AMOUNT", e.INVALID_BITS_MESSAGE = "INVALID_BITS_MESSAGE", e.INVALID_EVENT_ID = "INVALID_EVENT_ID", e.MESSAGE_LENGTH_EXCEEDED = "MESSAGE_LENGTH_EXCEEDED", e.REQUEST_THROTTLED = "REQUEST_THROTTLED", e.TOO_LARGE_BITS_EMOTE = "TOO_LARGE_BITS_EMOTE", e.TOO_LARGE_CHEER = "TOO_LARGE_CHEER", e.UNKNOWN = "UNKNOWN", e.USER_BANNED = "USER_BANNED", e.USER_INELIGIBLE = "USER_INELIGIBLE", e.USER_SUSPENDED = "USER_SUSPENDED", e.ZALGO_MESSAGE = "ZALGO_MESSAGE"
                }(A || (A = {})),
                function(e) {
                    e.NEW_CHATTER = "NEW_CHATTER"
                }(D || (D = {})),
                function(e) {
                    e.TOKEN_NOT_AVAILABLE = "TOKEN_NOT_AVAILABLE", e.TOKEN_NOT_FOUND = "TOKEN_NOT_FOUND"
                }(R || (R = {})),
                function(e) {
                    e.FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED = "FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED", e.SUB_ONLY_MODE_ENFORCEMENT_FAILED = "SUB_ONLY_MODE_ENFORCEMENT_FAILED", e.TOKEN_NOT_AVAILABLE = "TOKEN_NOT_AVAILABLE", e.TOKEN_NOT_FOUND = "TOKEN_NOT_FOUND", e.USER_CHAT_BANNED = "USER_CHAT_BANNED", e.USER_CHAT_TIMED_OUT = "USER_CHAT_TIMED_OUT"
                }(M || (M = {})),
                function(e) {
                    e.TOKEN_NOT_AVAILABLE = "TOKEN_NOT_AVAILABLE", e.TOKEN_NOT_FOUND = "TOKEN_NOT_FOUND"
                }(L || (L = {})),
                function(e) {
                    e.AVAILABLE = "AVAILABLE", e.DISMISSED = "DISMISSED", e.ELIGIBLE = "ELIGIBLE", e.REDEEMED = "REDEEMED"
                }(w || (w = {})),
                function(e) {
                    e.DURATION_INVALID = "DURATION_INVALID", e.FORBIDDEN = "FORBIDDEN", e.TARGET_ALREADY_BANNED = "TARGET_ALREADY_BANNED", e.TARGET_IS_ADMIN = "TARGET_IS_ADMIN", e.TARGET_IS_ANONYMOUS = "TARGET_IS_ANONYMOUS", e.TARGET_IS_BROADCASTER = "TARGET_IS_BROADCASTER", e.TARGET_IS_GLOBAL_MOD = "TARGET_IS_GLOBAL_MOD", e.TARGET_IS_MOD = "TARGET_IS_MOD", e.TARGET_IS_SELF = "TARGET_IS_SELF", e.TARGET_IS_STAFF = "TARGET_IS_STAFF", e.TARGET_NOT_FOUND = "TARGET_NOT_FOUND"
                }(U || (U = {})),
                function(e) {
                    e.FORBIDDEN = "FORBIDDEN", e.TARGET_NOT_BANNED = "TARGET_NOT_BANNED", e.TARGET_NOT_FOUND = "TARGET_NOT_FOUND"
                }(B || (B = {})),
                function(e) {
                    e.EUR = "EUR", e.GBP = "GBP", e.USD = "USD"
                }(P || (P = {})),
                function(e) {
                    e.MONTH = "MONTH", e.ONE_TIME = "ONE_TIME", e.WEEK = "WEEK", e.YEAR = "YEAR"
                }(F || (F = {})),
                function(e) {
                    e.CHANSUB = "CHANSUB", e.TEAMSUB = "TEAMSUB", e.TURBO = "TURBO"
                }(j || (j = {})),
                function(e) {
                    e.GOOGLE_IAB = "GOOGLE_IAB", e.PRIME = "PRIME", e.RECURLY = "RECURLY", e.XSOLLA_V3 = "XSOLLA_V3", e.ZUORA = "ZUORA"
                }(x || (x = {})),
                function(e) {
                    e.ACTIVE = "ACTIVE", e.CANCELLED = "CANCELLED", e.INACTIVE = "INACTIVE"
                }(V || (V = {})),
                function(e) {
                    e.AMAZON = "AMAZON", e.CREDIT_CARD = "CREDIT_CARD", e.GOOGLE_IAB = "GOOGLE_IAB", e.PAYPAL = "PAYPAL"
                }(H || (H = {})),
                function(e) {
                    e.AMERICAN_EXPRESS = "AMERICAN_EXPRESS", e.DISCOVER = "DISCOVER", e.MASTERCARD = "MASTERCARD", e.VISA = "VISA"
                }(G || (G = {})),
                function(e) {
                    e.COMMUNITY = "COMMUNITY", e.GAME = "GAME"
                }(W || (W = {})),
                function(e) {
                    e.CATEGORY = "CATEGORY", e.CLIP = "CLIP", e.LIVE_CHANNEL = "LIVE_CHANNEL", e.VOD = "VOD"
                }(Y || (Y = {})),
                function(e) {
                    e.ANDROID = "ANDROID", e.IOS = "IOS", e.WEB = "WEB"
                }(z || (z = {})),
                function(e) {
                    e.ACTIVE = "ACTIVE", e.INACTIVE = "INACTIVE", e.REJECTED_PERMISSIONS = "REJECTED_PERMISSIONS"
                }(q || (q = {})),
                function(e) {
                    e.COMPONENT = "COMPONENT", e.HIDDEN = "HIDDEN", e.PANEL = "PANEL", e.VIDEO_OVERLAY = "VIDEO_OVERLAY"
                }(K || (K = {})),
                function(e) {
                    e.APPROVED = "APPROVED", e.ASSETS_UPLOADED = "ASSETS_UPLOADED", e.DELETED = "DELETED", e.DEPRECATED = "DEPRECATED", e.IN_REVIEW = "IN_REVIEW", e.IN_TEST = "IN_TEST", e.PENDING_ACTION = "PENDING_ACTION", e.READY_FOR_REVIEW = "READY_FOR_REVIEW", e.REJECTED = "REJECTED", e.RELEASED = "RELEASED", e.UPLOADING = "UPLOADING"
                }(Q || (Q = {})),
                function(e) {
                    e.GAME_COMMERCE = "GAME_COMMERCE", e.GAME_COMMERCE_V2 = "GAME_COMMERCE_V2"
                }(X || (X = {})),
                function(e) {
                    e.AFFILIATE = "AFFILIATE", e.CUSTOM_PARTNER = "CUSTOM_PARTNER", e.EXTENSIONS_DEVELOPER = "EXTENSIONS_DEVELOPER", e.PREMIUM_PARTNER = "PREMIUM_PARTNER", e.STANDARD_PARTNER = "STANDARD_PARTNER", e.UNPAID_PARTNER = "UNPAID_PARTNER"
                }($ || ($ = {})),
                function(e) {
                    e.AGREEMENT_NOT_STARTED = "AGREEMENT_NOT_STARTED", e.AGREEMENT_PENDING_UPGRADE = "AGREEMENT_PENDING_UPGRADE", e.CANCELED = "CANCELED", e.COMPLETED = "COMPLETED", e.PAYOUT_METHOD_NOT_STARTED = "PAYOUT_METHOD_NOT_STARTED", e.PAYOUT_METHOD_PENDING = "PAYOUT_METHOD_PENDING", e.REGISTRATION_NOT_STARTED = "REGISTRATION_NOT_STARTED", e.REVIEW_PENDING = "REVIEW_PENDING", e.ROYALTY_TAX_INTERVIEW_ACTION_REQUIRED = "ROYALTY_TAX_INTERVIEW_ACTION_REQUIRED", e.ROYALTY_TAX_INTERVIEW_FAILED = "ROYALTY_TAX_INTERVIEW_FAILED", e.ROYALTY_TAX_INTERVIEW_MISMATCH = "ROYALTY_TAX_INTERVIEW_MISMATCH", e.ROYALTY_TAX_INTERVIEW_NOT_STARTED = "ROYALTY_TAX_INTERVIEW_NOT_STARTED", e.ROYALTY_TAX_INTERVIEW_PENDING = "ROYALTY_TAX_INTERVIEW_PENDING", e.SERVICE_TAX_INTERVIEW_ACTION_REQUIRED = "SERVICE_TAX_INTERVIEW_ACTION_REQUIRED", e.SERVICE_TAX_INTERVIEW_FAILED = "SERVICE_TAX_INTERVIEW_FAILED", e.SERVICE_TAX_INTERVIEW_MISMATCH = "SERVICE_TAX_INTERVIEW_MISMATCH", e.SERVICE_TAX_INTERVIEW_NOT_STARTED = "SERVICE_TAX_INTERVIEW_NOT_STARTED", e.SERVICE_TAX_INTERVIEW_PENDING = "SERVICE_TAX_INTERVIEW_PENDING"
                }(Z || (Z = {})),
                function(e) {
                    e.FORBIDDEN = "FORBIDDEN", e.INTERNAL_ERROR = "INTERNAL_ERROR", e.INVALID_AGREEMENT_VERSION = "INVALID_AGREEMENT_VERSION", e.UNAUTHENTICATED = "UNAUTHENTICATED"
                }(J || (J = {})),
                function(e) {
                    e.AFFILIATE = "AFFILIATE", e.EXTENSIONS_DEVELOPER = "EXTENSIONS_DEVELOPER", e.PARTNER = "PARTNER"
                }(ee || (ee = {})),
                function(e) {
                    e.CUSTOM = "CUSTOM", e.LEGACY = "LEGACY", e.PREMIUM = "PREMIUM", e.STANDARD = "STANDARD"
                }(te || (te = {})),
                function(e) {
                    e.CITY = "CITY", e.COUNTRY = "COUNTRY", e.EMAIL = "EMAIL", e.NAME = "NAME", e.POSTAL = "POSTAL", e.STATE = "STATE", e.STREET_ADDRESS = "STREET_ADDRESS", e.STREET_ADDRESS_2 = "STREET_ADDRESS_2"
                }(ne || (ne = {})),
                function(e) {
                    e.FORBIDDEN = "FORBIDDEN", e.INTERNAL_ERROR = "INTERNAL_ERROR", e.INVALID_FORMAT = "INVALID_FORMAT", e.UNAUTHENTICATED = "UNAUTHENTICATED"
                }(ie || (ie = {})),
                function(e) {
                    e.BIRTHDATE = "BIRTHDATE", e.CITY = "CITY", e.COMPANY_NAME = "COMPANY_NAME", e.COUNTRY_CODE = "COUNTRY_CODE", e.EMAIL = "EMAIL", e.FIRST_NAME = "FIRST_NAME", e.LAST_NAME = "LAST_NAME", e.MIDDLE_NAME = "MIDDLE_NAME", e.PARENT_EMAIL = "PARENT_EMAIL", e.PARENT_NAME = "PARENT_NAME", e.POSTAL = "POSTAL", e.STATE_CODE = "STATE_CODE", e.STREET_ADDRESS = "STREET_ADDRESS", e.STREET_ADDRESS_2 = "STREET_ADDRESS_2"
                }(re || (re = {})),
                function(e) {
                    e.ROYALTY = "ROYALTY", e.SERVICE = "SERVICE"
                }(ae || (ae = {})),
                function(e) {
                    e.BROADCASTER = "BROADCASTER", e.EVERYONE = "EVERYONE", e.MODERATOR = "MODERATOR", e.SUBSCRIBER = "SUBSCRIBER"
                }(oe || (oe = {})),
                function(e) {
                    e.MAX_ROOMS_LIMIT_EXCEEDED = "MAX_ROOMS_LIMIT_EXCEEDED", e.NAME_CONTAINS_INVALID_CHARACTERS = "NAME_CONTAINS_INVALID_CHARACTERS", e.NAME_INAPPROPRIATE = "NAME_INAPPROPRIATE", e.NAME_LENGTH_INVALID = "NAME_LENGTH_INVALID", e.NAME_NOT_UNIQUE = "NAME_NOT_UNIQUE", e.ROLES_INVALID = "ROLES_INVALID", e.TOPIC_INAPPROPRIATE = "TOPIC_INAPPROPRIATE", e.TOPIC_LENGTH_INVALID = "TOPIC_LENGTH_INVALID"
                }(se || (se = {})),
                function(e) {
                    e.ADMIN = "ADMIN", e.BROADCASTER = "BROADCASTER", e.GLOBALMOD = "GLOBALMOD", e.MOD = "MOD", e.REGULAR = "REGULAR", e.STAFF = "STAFF"
                }(ce || (ce = {})),
                function(e) {
                    e.FORBIDDEN = "FORBIDDEN", e.NAME_CONTAINS_INVALID_CHARACTERS = "NAME_CONTAINS_INVALID_CHARACTERS", e.NAME_INAPPROPRIATE = "NAME_INAPPROPRIATE", e.NAME_LENGTH_INVALID = "NAME_LENGTH_INVALID", e.NAME_NOT_UNIQUE = "NAME_NOT_UNIQUE", e.ROLES_INVALID = "ROLES_INVALID", e.ROOM_NOT_FOUND = "ROOM_NOT_FOUND", e.TOPIC_INAPPROPRIATE = "TOPIC_INAPPROPRIATE", e.TOPIC_LENGTH_INVALID = "TOPIC_LENGTH_INVALID"
                }(le || (le = {})),
                function(e) {
                    e.AUTO_MOD_ENFORCEMENT_FAILED = "AUTO_MOD_ENFORCEMENT_FAILED", e.EMOTE_ONLY_MODE_ENFORCEMENT_FAILED = "EMOTE_ONLY_MODE_ENFORCEMENT_FAILED", e.FORBIDDEN = "FORBIDDEN", e.R9K_MODE_ENFORCEMENT_FAILED = "R9K_MODE_ENFORCEMENT_FAILED", e.RATE_LIMIT_FAILED = "RATE_LIMIT_FAILED", e.SLOW_MODE_ENFORCEMENT_FAILED = "SLOW_MODE_ENFORCEMENT_FAILED", e.SPAM_ENFORCEMENT_FAILED = "SPAM_ENFORCEMENT_FAILED", e.USER_CHAT_BANNED = "USER_CHAT_BANNED", e.USER_CHAT_TIMED_OUT = "USER_CHAT_TIMED_OUT", e.USER_SUSPENDED = "USER_SUSPENDED", e.ZALGO_ENFORCEMENT_FAILED = "ZALGO_ENFORCEMENT_FAILED"
                }(de || (de = {})),
                function(e) {
                    e.FORBIDDEN = "FORBIDDEN", e.ROOM_NOT_FOUND = "ROOM_NOT_FOUND", e.SLOW_MODE_DURATION_INVALID = "SLOW_MODE_DURATION_INVALID"
                }(ue || (ue = {})),
                function(e) {
                    e.CSGO_SKILL = "CSGO_SKILL", e.LOL_SUMMONER_RANK = "LOL_SUMMONER_RANK", e.RELEVANCE = "RELEVANCE", e.VIEWER_COUNT = "VIEWER_COUNT"
                }(me || (me = {})),
                function(e) {
                    e.CONTENT = "CONTENT", e.TOP = "TOP"
                }(pe || (pe = {})),
                function(e) {
                    e.AWAY = "AWAY", e.BUSY = "BUSY", e.OFFLINE = "OFFLINE", e.ONLINE = "ONLINE"
                }(he || (he = {})),
                function(e) {
                    e.CLAIMABLE_GIFT_CREATION_ERROR = "CLAIMABLE_GIFT_CREATION_ERROR", e.GIFT_CREATION_ERROR = "GIFT_CREATION_ERROR", e.MAX_GIFTS_FOR_OFFER_EXCEEDED = "MAX_GIFTS_FOR_OFFER_EXCEEDED", e.UNKNOWN_ERROR = "UNKNOWN_ERROR"
                }(fe || (fe = {})),
                function(e) {
                    e.CLAIM_CODE = "CLAIM_CODE", e.DIRECT_ENTITLEMENT = "DIRECT_ENTITLEMENT", e.EXTERNAL = "EXTERNAL"
                }(ge || (ge = {})),
                function(e) {
                    e.ERROR_STATUS = "ERROR_STATUS", e.GIFT_CLAIMED = "GIFT_CLAIMED", e.GIFT_CLAIM_PENDING = "GIFT_CLAIM_PENDING"
                }(be || (be = {})),
                function(e) {
                    e.GIFT_NOT_CLAIMABLE = "GIFT_NOT_CLAIMABLE", e.NON_EXISTENT_GIFT = "NON_EXISTENT_GIFT", e.UNKNOWN_ERROR = "UNKNOWN_ERROR", e.USER_DOES_NOT_OWN_GIFT = "USER_DOES_NOT_OWN_GIFT"
                }(ve || (ve = {})),
                function(e) {
                    e.OFFERS_FAILED_TO_UPDATE = "OFFERS_FAILED_TO_UPDATE", e.UNKNOWN = "UNKNOWN"
                }(Ee || (Ee = {})),
                function(e) {
                    e.TOO_MANY_RECENT_SPENDS = "TOO_MANY_RECENT_SPENDS", e.UNABLE_TO_SPEND = "UNABLE_TO_SPEND"
                }(ke || (ke = {})),
                function(e) {
                    e.OFFER_ALREADY_CLAIMED = "OFFER_ALREADY_CLAIMED", e.UNKNOWN = "UNKNOWN"
                }(Ce || (Ce = {})),
                function(e) {
                    e.DEFAULT = "DEFAULT", e.SERIES = "SERIES"
                }(Se || (Se = {})),
                function(e) {
                    e.ALL_TIME = "ALL_TIME", e.LAST_DAY = "LAST_DAY", e.LAST_MONTH = "LAST_MONTH", e.LAST_WEEK = "LAST_WEEK", e.TRENDING = "TRENDING"
                }(ye || (ye = {})),
                function(e) {
                    e.ALL_TIME = "ALL_TIME", e.LAST_DAY = "LAST_DAY", e.LAST_MONTH = "LAST_MONTH", e.LAST_WEEK = "LAST_WEEK"
                }(Ne || (Ne = {})),
                function(e) {
                    e.CREATED_AT_ASC = "CREATED_AT_ASC", e.CREATED_AT_DESC = "CREATED_AT_DESC", e.TRENDING = "TRENDING", e.VIEWS_ASC = "VIEWS_ASC", e.VIEWS_DESC = "VIEWS_DESC"
                }(_e || (_e = {})),
                function(e) {
                    e.HIGH = "HIGH", e.LOW = "LOW", e.MEDIUM = "MEDIUM"
                }(Oe || (Oe = {})),
                function(e) {
                    e.NOT_PERMITTED = "NOT_PERMITTED", e.NOT_RESTRICTED = "NOT_RESTRICTED", e.PERMITTED = "PERMITTED", e.TEMPORARY = "TEMPORARY"
                }(Ie || (Ie = {})),
                function(e) {
                    e.BODY_EMPTY = "BODY_EMPTY", e.NOT_DELIVERED = "NOT_DELIVERED", e.TARGET_BANNED = "TARGET_BANNED", e.TARGET_RESTRICTED = "TARGET_RESTRICTED"
                }(Te || (Te = {})),
                function(e) {
                    e.ALREADY_LINKED = "ALREADY_LINKED", e.CODE_EXPIRED = "CODE_EXPIRED", e.CODE_INCORRECT = "CODE_INCORRECT"
                }(Ae || (Ae = {})),
                function(e) {
                    e.all = "all", e.ps4 = "ps4", e.xbox = "xbox"
                }(De || (De = {})),
                function(e) {
                    e.COMMUNITIES = "COMMUNITIES", e.CREATIVE = "CREATIVE", e.GAMES = "GAMES"
                }(Re || (Re = {})),
                function(e) {
                    e.ASC = "ASC", e.DESC = "DESC"
                }(Me || (Me = {})),
                function(e) {
                    e.TIME = "TIME", e.VIEWS = "VIEWS"
                }(Le || (Le = {})),
                function(e) {
                    e.CREATIVE = "CREATIVE", e.GAME = "GAME", e.OTHER = "OTHER"
                }(we || (we = {})),
                function(e) {
                    e.DEFAULT = "DEFAULT", e.EXTENSION = "EXTENSION"
                }(Ue || (Ue = {})),
                function(e) {
                    e.BITS_KEY_CODE = "BITS_KEY_CODE"
                }(Be || (Be = {})),
                function(e) {
                    e.DESCRIPTION_TOO_LONG = "DESCRIPTION_TOO_LONG", e.DISPLAY_NAME_INVALID = "DISPLAY_NAME_INVALID", e.REQUESTING_USER_NOT_PERMITTED = "REQUESTING_USER_NOT_PERMITTED", e.RULES_TOO_LONG = "RULES_TOO_LONG", e.SUMMARY_TOO_LONG = "SUMMARY_TOO_LONG"
                }(Pe || (Pe = {})),
                function(e) {
                    e.ACCOUNT_TOO_YOUNG = "ACCOUNT_TOO_YOUNG", e.COMMUNITY_NAME_EXISTS = "COMMUNITY_NAME_EXISTS", e.COMMUNITY_NAME_INVALID = "COMMUNITY_NAME_INVALID", e.COMMUNITY_NAME_RESERVED = "COMMUNITY_NAME_RESERVED", e.DESCRIPTION_TOO_LONG = "DESCRIPTION_TOO_LONG", e.DISPLAY_NAME_INVALID = "DISPLAY_NAME_INVALID", e.INVALID_LANGUAGE = "INVALID_LANGUAGE", e.OWN_TO_MANY_COMMUNITIES = "OWN_TO_MANY_COMMUNITIES", e.RULES_TOO_LONG = "RULES_TOO_LONG", e.SUMMARY_TOO_LONG = "SUMMARY_TOO_LONG", e.TWO_FACTOR_NOT_ENABLED = "TWO_FACTOR_NOT_ENABLED", e.UNVERIFIED_EMAIL = "UNVERIFIED_EMAIL"
                }(Fe || (Fe = {})),
                function(e) {
                    e.ACTIVE = "ACTIVE", e.PENDING = "PENDING", e.REJECTED = "REJECTED", e.UNKNOWN = "UNKNOWN", e.UNSET = "UNSET"
                }(je || (je = {})),
                function(e) {
                    e.ACTIVE = "ACTIVE", e.PENDING = "PENDING"
                }(xe || (xe = {})),
                function(e) {
                    e.BOUNTY_ALREADY_CLAIMED = "BOUNTY_ALREADY_CLAIMED", e.BOUNTY_LIMIT_REACHED = "BOUNTY_LIMIT_REACHED", e.INVALID_PARAMETER = "INVALID_PARAMETER", e.UNKNOWN_ERROR = "UNKNOWN_ERROR"
                }(Ve || (Ve = {})),
                function(e) {
                    e.BOUNTY_NOT_LIVE = "BOUNTY_NOT_LIVE", e.INVALID_PARAMETER = "INVALID_PARAMETER", e.UNKNOWN_ERROR = "UNKNOWN_ERROR"
                }(He || (He = {})),
                function(e) {
                    e.PROMPT_FOR_PERMISSIONS = "PROMPT_FOR_PERMISSIONS", e.REQUIRES_CONFIGURATION = "REQUIRES_CONFIGURATION"
                }(Ge || (Ge = {})),
                function(e) {
                    e.INVALID_PARAMETER = "INVALID_PARAMETER", e.UNAUTHORIZED = "UNAUTHORIZED", e.UNKNOWN_ERROR = "UNKNOWN_ERROR"
                }(We || (We = {})),
                function(e) {
                    e.BOUNTY_NOT_LIVE = "BOUNTY_NOT_LIVE", e.INVALID_PARAMETER = "INVALID_PARAMETER", e.UNAUTHORIZED = "UNAUTHORIZED", e.UNKNOWN_ERROR = "UNKNOWN_ERROR"
                }(Ye || (Ye = {})),
                function(e) {
                    e.BASELINE = "BASELINE", e.HIGH = "HIGH", e.MAIN = "MAIN"
                }(ze || (ze = {})),
                function(e) {
                    e.NOT_PERMITTED = "NOT_PERMITTED", e.TARGET_USER_MOD = "TARGET_USER_MOD", e.TARGET_USER_OWNER = "TARGET_USER_OWNER", e.TARGET_USER_SELF = "TARGET_USER_SELF", e.TARGET_USER_STAFF = "TARGET_USER_STAFF"
                }(qe || (qe = {})),
                function(e) {
                    e.NOT_PERMITTED = "NOT_PERMITTED", e.TARGET_USER_MOD = "TARGET_USER_MOD", e.TARGET_USER_OWNER = "TARGET_USER_OWNER", e.TARGET_USER_SELF = "TARGET_USER_SELF", e.TARGET_USER_STAFF = "TARGET_USER_STAFF"
                }(Ke || (Ke = {})),
                function(e) {
                    e.HYPE = "HYPE", e.STARTTIME = "STARTTIME"
                }(Qe || (Qe = {})),
                function(e) {
                    e.CANCELLED = "CANCELLED", e.FAILED = "FAILED", e.SCHEDULED = "SCHEDULED", e.STARTED = "STARTED", e.SUCCESS = "SUCCESS", e.UNKNOWN = "UNKNOWN", e.UNSCHEDULED = "UNSCHEDULED"
                }(Xe || (Xe = {})),
                function(e) {
                    e.PREMIERE = "PREMIERE", e.SEGMENT = "SEGMENT", e.SINGLE = "SINGLE", e.TIMETABLE = "TIMETABLE"
                }($e || ($e = {})),
                function(e) {
                    e.ALL = "ALL", e.LIVE = "LIVE"
                }(Ze || (Ze = {})),
                function(e) {
                    e.PRICE_ASC = "PRICE_ASC", e.PRICE_DESC = "PRICE_DESC", e.PURCHASE_DATE_ASC = "PURCHASE_DATE_ASC", e.PURCHASE_DATE_DESC = "PURCHASE_DATE_DESC"
                }(Je || (Je = {})),
                function(e) {
                    e.ALL = "ALL", e.SUBSCRIPTIONS = "SUBSCRIPTIONS"
                }(et || (et = {})),
                function(e) {
                    e.SUBSCRIPTION = "SUBSCRIPTION"
                }(tt || (tt = {})),
                function(e) {
                    e.MONKEYS = "MONKEYS", e.PURPLE = "PURPLE", e.ROBOTS = "ROBOTS"
                }(nt || (nt = {})),
                function(e) {
                    e.ALL = "ALL", e.GIFT = "GIFT", e.PLATFORM = "PLATFORM"
                }(it || (it = {})),
                function(e) {
                    e.INVALID_USER_ID = "INVALID_USER_ID", e.UNAUTHORIZED = "UNAUTHORIZED"
                }(rt || (rt = {})),
                function(e) {
                    e.DELETED = "DELETED", e.PENDING_REVIEW = "PENDING_REVIEW", e.PENDING_REVIEW_SPAM = "PENDING_REVIEW_SPAM", e.PUBLISHED = "PUBLISHED", e.UNPUBLISHED = "UNPUBLISHED"
                }(at || (at = {})),
                function(e) {
                    e.APPROVED = "APPROVED", e.COMPLETED = "COMPLETED", e.LIVE = "LIVE", e.PENDING = "PENDING", e.REJECTED = "REJECTED"
                }(ot || (ot = {})),
                function(e) {
                    e.ITEM = "ITEM", e.LINK_NOTIFICATION = "LINK_NOTIFICATION"
                }(st || (st = {})),
                function(e) {
                    e.SERVICE_DEPENDENCY_FAILURE = "SERVICE_DEPENDENCY_FAILURE", e.UNKNOWN = "UNKNOWN", e.USER_UNAUTHORIZED = "USER_UNAUTHORIZED"
                }(ct || (ct = {}))
        },
        DnOo: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/7QA"),
                s = n("UUve"),
                c = n("D7An"),
                l = n("GnwI"),
                d = n("br9A"),
                u = n("Ue10"),
                m = "subscribe-button__subscribe-tier-button",
                p = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        if (n.state = {
                                hasPopupExperiment: !1
                            }, n.handleClick = function() {
                                n.openCheckout(), n.props.handleSubAction({
                                    action: d.a.ClickCheckout,
                                    checkoutButtonTier: n.props.tierPrice
                                })
                            }, n.openCheckout = function() {
                                n.state.hasPopupExperiment && o.m.set(s.b, n.props.productName)
                            }, !1 === n.props.targetBlank) return n;
                        var i = o.o.experiments.getAssignment(c.b.InstreamCheckout);
                        return n.state = {
                            hasPopupExperiment: "yes" === i
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (this.props.isSubbedToTier) {
                            var e = Object(o.d)("Subscribed", "SubTierButton");
                            return r.createElement(u.z, {
                                ariaLabel: e,
                                "data-test-selector": m,
                                disabled: !0,
                                icon: u.nb.Star
                            }, e)
                        }
                        var t = this.props.isEsportChannel ? Object(o.d)("Get the All-Access Pass", "SubTierButton") : Object(o.d)("Subscribe Now", "SubTierButton");
                        return r.createElement(u.z, i.__assign({
                            ariaLabel: t + " " + this.props.tierPrice,
                            "data-test-selector": m,
                            linkTo: this.state.hasPopupExperiment ? void 0 : this.props.url,
                            onClick: this.handleClick,
                            purchase: this.props.tierPrice
                        }, Object(u.bc)(this.props), {
                            targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                        }), t)
                    }, t
                }(r.Component),
                h = Object(a.compose)(Object(l.c)("SubTierButton", {
                    autoReportInteractive: !0
                }))(p);
            n.d(t, !1, function() {
                return m
            }), n.d(t, "a", function() {
                return h
            })
        },
        E78O: function(e, t, n) {},
        ECxT: function(e, t, n) {},
        EE1E: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return E
            });
            var i = n("EN5X"),
                r = n("G7cy"),
                a = n("m7BI"),
                o = n("E8D/"),
                s = n("DtRd"),
                c = n("R4sh"),
                l = n("/0dD"),
                d = n("76Lv"),
                u = 4.5,
                m = [239, 238, 241],
                p = [14, 12, 19],
                h = .1,
                f = 50,
                g = "7A7A7A",
                b = 36,
                v = {};

            function E(e, t) {
                var n = s(e),
                    E = k(r(n));
                if (void 0 === t && (t = Object(d.d)()), E in v[t]) return v[t][E];
                if (t === l.a.Dark && n.every(function(e) {
                        return e < b
                    })) return g;
                var C = t === l.a.Light ? m : p,
                    S = Object(c.a)(n, C);
                if (S > u) return E;
                for (var y = [n[0], n[1], n[2]], N = f; N >= 0 && S < u; N--) {
                    var _ = a(y);
                    t === l.a.Light ? _[0] -= _[0] * h : _[0] += _[0] * h, y = o(i(_)), S = Object(c.a)(y, C)
                }
                var O = k(r(y));
                return v[t][E] = O, O
            }

            function k(e) {
                return "#" === e[0] ? e.substr(1) : e
            }
            v[l.a.Dark] = {}, v[l.a.Light] = {}
        },
        EOIh: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatInput"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "isEmbedded"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPartner"
                                    },
                                    arguments: [],
                                    directives: [{
                                        kind: "Directive",
                                        name: {
                                            kind: "Name",
                                            value: "include"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "if"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "isEmbedded"
                                                }
                                            }
                                        }]
                                    }]
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "hashtags"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "edges"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "cursor"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "node"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emoteMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cheerMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "event"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 345
                }
            };
            n.loc.source = {
                body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nchannel: user(login: $channelLogin) {\nid\nself {\nbanStatus {\nisPermanent\n}\nsubscriptionBenefit {\nid\n}\n}\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        Epr8: function(e, t, n) {},
        F6GT: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("/7QA"),
                a = "control";
            n.d(t, "a", function() {
                return s
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "c", function() {
                return l
            });
            var o = "chatSettings";

            function s() {
                var e = r.l.get(o, {});
                return i.__assign({
                    lastUsedFollowerDurations: {},
                    showAutoModActions: !0,
                    showMessageFlags: !0,
                    showModerationActions: !0,
                    showModIcons: !1,
                    showTimestamps: !1,
                    useHighContrastColors: !1,
                    zachModeStatus: a
                }, e)
            }

            function c(e, t) {
                var n = s();
                n[e] = t, r.l.set(o, n)
            }

            function l(e, t) {
                var n = s();
                n.lastUsedFollowerDurations[e] = t, r.l.set(o, n)
            }
        },
        F9eG: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "cheer"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "User"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "cheer"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emotes"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "includeUpperTiers"
                                        },
                                        value: {
                                            kind: "BooleanValue",
                                            value: !0
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "includeSponsored"
                                        },
                                        value: {
                                            kind: "BooleanValue",
                                            value: !0
                                        }
                                    }],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "prefix"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "campaign"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "brandImageURL"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "brandName"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "thresholds"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "minimumBits"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "matchedPercent"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "minimumBitsAmount"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "bitsTotal"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "bitsUsed"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "bitsPercentageRemaining"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "userLimit"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "self"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "bitsUsed"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "canBeSponsored"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "tiers"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "bits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "color"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "canCheer"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "canShowInBitsCard"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "images"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "url"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "theme"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isAnimated"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "dpiScale"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 401
                }
            };
            n.loc.source = {
                body: "fragment cheer on User {\ncheer {\nid\nemotes (includeUpperTiers: true includeSponsored: true) {\nid\nprefix\ntype\ncampaign {\nid\nbrandImageURL\nbrandName\nthresholds {\nid\nminimumBits\nmatchedPercent\n}\nminimumBitsAmount\nbitsTotal\nbitsUsed\nbitsPercentageRemaining\nuserLimit\nself {\nid\nbitsUsed\ncanBeSponsored\n}\n}\ntiers {\nid\nbits\ncolor\ncanCheer\ncanShowInBitsCard\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        FAYk: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnmodUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnmodUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unmodUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "target"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 119
                }
            };
            n.loc.source = {
                body: "mutation UnmodUser($input: UnmodUserInput!){\nunmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        FS60: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "ChatInput_SendCheer"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "SendCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "sendCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "currentUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsBalance"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "validationError"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "message"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "messageContent"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "text"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "fragments"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "text"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "AutoMod"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "topics"
                                                                            },
                                                                            arguments: [],
                                                                            directives: [],
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [{
                                                                                    kind: "Field",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "type"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: []
                                                                                }, {
                                                                                    kind: "Field",
                                                                                    name: {
                                                                                        kind: "Name",
                                                                                        value: "weight"
                                                                                    },
                                                                                    arguments: [],
                                                                                    directives: []
                                                                                }]
                                                                            }
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "CheermoteToken"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "bitsAmount"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "prefix"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "tier"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "Emote"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            alias: {
                                                                                kind: "Name",
                                                                                value: "emoteID"
                                                                            },
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "setID"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "token"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }, {
                                                                    kind: "InlineFragment",
                                                                    typeCondition: {
                                                                        kind: "NamedType",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "User"
                                                                        }
                                                                    },
                                                                    directives: [],
                                                                    selectionSet: {
                                                                        kind: "SelectionSet",
                                                                        selections: [{
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "id"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "login"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }, {
                                                                            kind: "Field",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "displayName"
                                                                            },
                                                                            arguments: [],
                                                                            directives: []
                                                                        }]
                                                                    }
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 377
                }
            };
            n.loc.source = {
                body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\nvalidationError {\ncode\nmessage\nmessageContent {\ntext\nfragments {\ntext\ncontent {\n... on AutoMod {\ntopics {\ntype\nweight\n}\n}\n... on CheermoteToken {\nbitsAmount\nprefix\ntier\n}\n... on Emote {\nemoteID: id\nsetID\ntoken\n}\n... on User {\nid\nlogin\ndisplayName\n}\n}\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        GOKC: function(e, t, n) {},
        Gcqi: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsCard_Bits"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 60
                }
            };
            n.loc.source = {
                body: "query BitsCard_Bits {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        GzyO: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return l
            }), n.d(t, "b", function() {
                return d
            }), n.d(t, "c", function() {
                return u
            }), n.d(t, "d", function() {
                return m
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("OpME"),
                o = "twilight.emote_picker_history",
                s = 24,
                c = [{
                    id: "64138",
                    token: "SeemsGood"
                }, {
                    id: "41",
                    token: "Kreygasm"
                }, {
                    id: "245",
                    token: "ResidentSleeper"
                }, {
                    id: "28087",
                    token: "WutFace"
                }, {
                    id: "86",
                    token: "BibleThump"
                }, {
                    id: "9",
                    token: "<3"
                }, {
                    id: "58765",
                    token: "NotLikeThis"
                }, {
                    id: "81274",
                    token: "VoHiYo"
                }, {
                    id: "88",
                    token: "PogChamp"
                }, {
                    id: "425618",
                    token: "LUL"
                }, {
                    id: "25",
                    token: "Kappa"
                }, {
                    id: "30259",
                    token: "HeyGuys"
                }];

            function l(e) {
                var t = r.l.get(o, {}),
                    n = t[e.id];
                n ? (n.uses++, n.lastUpdatedAt = Date.now()) : t[e.id] = {
                    emote: e,
                    lastUpdatedAt: Date.now(),
                    uses: 1
                }, r.l.set(o, t)
            }

            function d() {
                var e = r.l.get(o, {});
                if (!(Object.keys(e).length >= s)) {
                    for (var t = {}, n = 0; n < c.length; n++) {
                        var a = c[n];
                        e[a.id] || (t[a.id] = {
                            emote: a,
                            lastUpdatedAt: n,
                            uses: 0
                        })
                    }
                    var l = i.__assign({}, t, e);
                    r.l.set(o, l)
                }
            }

            function u() {
                var e = r.l.get(o, {}) || {},
                    t = [];
                return Object.keys(e).forEach(function(n) {
                    var i = e[n];
                    void 0 !== i && t.push(i)
                }), t.sort(function(e, t) {
                    return e.uses > t.uses ? -1 : t.uses > e.uses ? 1 : e.lastUpdatedAt > t.lastUpdatedAt ? -1 : t.lastUpdatedAt > e.lastUpdatedAt ? 1 : 0
                }), Object(a.b)(t.slice(0, 24).map(function(e) {
                    return e.emote
                }))
            }

            function m() {
                var e = r.l.get(o, {}) || {},
                    t = {};
                return Object.keys(e).forEach(function(n) {
                    void 0 !== e[n] && (t[e[n].emote.token] = {
                        count: e[n].uses
                    })
                }), t
            }
        },
        H0r1: function(e, t, n) {},
        H31v: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return r
                }),
                function(e) {
                    e.Bits = "bits", e.Leaderboard = "bits-leader"
                }(i || (i = {})),
                function(e) {
                    e.Badge = "badge_update", e.Balance = "balance_update"
                }(r || (r = {}))
        },
        HjUq: function(e, t, n) {},
        IIop: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                r = Object(i.a)("ChatConnection"),
                a = r.withChatServiceProvider,
                o = (0, r.withContext)(function(e) {
                    return {
                        chatConnectionAPI: e.serviceAPI,
                        setChatConnectionAPI: e.setServiceAPI
                    }
                })
        },
        IKE4: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "badge"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Badge"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "setID"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "version"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "title"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image1x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "NORMAL"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image2x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "DOUBLE"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "image4x"
                            },
                            name: {
                                kind: "Name",
                                value: "imageURL"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "size"
                                },
                                value: {
                                    kind: "EnumValue",
                                    value: "QUADRUPLE"
                                }
                            }],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clickAction"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clickURL"
                            },
                            arguments: [],
                            directives: []
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 170
                }
            };
            n.loc.source = {
                body: "fragment badge on Badge {\nid\nsetID\nversion\ntitle\nimage1x: imageURL(size: NORMAL)\nimage2x: imageURL(size: DOUBLE)\nimage4x: imageURL(size: QUADRUPLE)\nclickAction\nclickURL\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        IRJ5: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("oJmH"),
                o = n("/7QA"),
                s = n("gcd7"),
                c = n("yR8l"),
                l = n("5zf8"),
                d = n("DMoW"),
                u = n("2xye"),
                m = n("eAdp"),
                p = n("gMwc"),
                h = n("5Siz"),
                f = n("Y5lD");

            function g() {
                return Object(o.d)("An unexpected error occurred. Try again.", "BookmarkCommandHandler")
            }

            function b() {
                return Object(o.d)("You can only add stream markers during live streams. Try again when the channel is live streaming.", "BookmarkCommandHandler")
            }
            var v = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.bookmark = function(e) {
                            return void 0 === e && (e = ""), {
                                deferred: t.props.markersData.refetch().then(function() {
                                    var n = t.props.markersData,
                                        i = n.user && n.user.stream && n.user.stream.id,
                                        r = n.user && n.user.stream && n.user.stream.createdAt;
                                    return i ? t.createBookmarkHelper(i, e, r) : Promise.resolve({
                                        notice: b()
                                    })
                                })
                            }
                        }, t.createBookmarkHelper = function(e, n, i) {
                            var r = n.substring(0, h.a).trim();
                            return t.props.createVideoBookmark({
                                variables: {
                                    input: {
                                        broadcastID: e,
                                        description: r,
                                        medium: t.props.isPopout ? "popout_chat" : "chat",
                                        platform: u.SpadePlatform.Web
                                    }
                                }
                            }).then(function(e) {
                                var t = e.data && e.data.createVideoBookmark;
                                if (t && t.error && t.error.code) switch (t.error.code) {
                                    case d.o.ARCHIVES_DISABLED:
                                        return {
                                            notice: Object(o.d)("Past Broadcast storage must be enabled in order to add stream markers. Enable via Channel Settings and try again.", "BookmarkCommandHandler")
                                        };
                                    case d.o.BROADCAST_FORMAT_INVALID_PREMIERE:
                                    case d.o.BROADCAST_FORMAT_INVALID_RERUN:
                                        return {
                                            notice: Object(o.d)("You can only add stream markers during live streams. Try again when the channel is live streaming and not running a Premiere or Rerun.", "BookmarkCommandHandler")
                                        };
                                    case d.o.BROADCASTER_NOT_LIVE:
                                        return {
                                            notice: b()
                                        };
                                    case d.o.USER_UNAUTHORIZED:
                                        return {
                                            notice: Object(o.d)("You don't have permission to create stream markers for this channel.", "BookmarkCommandHandler")
                                        };
                                    case d.o.INTERNAL_SERVER_ERROR:
                                    case d.o.VOD_NOT_READY:
                                    default:
                                        return {
                                            notice: g()
                                        }
                                }
                                var n = null === i ? null : Object(l.b)(Object(f.a)(i), l.a.ClockHMS),
                                    a = "" !== r;
                                return {
                                    notice: n && a ? Object(o.d)('Successfully added a stream marker at {time}: "{description}"', {
                                        description: r,
                                        time: n
                                    }, "BookmarkCommandHandler") : n ? Object(o.d)("Successfully added a stream marker at {time}", {
                                        time: n
                                    }, "BookmarkCommandHandler") : a ? Object(o.d)('Successfully added a stream marker: "{description}"', {
                                        description: r
                                    }, "BookmarkCommandHandler") : Object(o.d)("Successfully added a stream marker", "BookmarkCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: g()
                                }
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(s.a, {
                            command: "marker",
                            handler: this.bookmark
                        })
                    }, t
                }(r.Component),
                E = Object(a.compose)(Object(c.a)(m, {
                    name: "createVideoBookmark"
                }), Object(c.a)(p, {
                    name: "markersData"
                }))(v);
            n.d(t, "a", function() {
                return E
            })
        },
        JGCS: function(e, t, n) {},
        JiJH: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnVIPUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "RevokeVIPInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "revokeVIP"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "revokee"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 126
                }
            };
            n.loc.source = {
                body: "mutation UnVIPUser($input: RevokeVIPInput!){\nrevokeVIP(input: $input) {\nchannel {\nid\n}\nrevokee {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        JzSO: function(e, t, n) {},
        KGti: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "h", function() {
                return u
            }), n.d(t, "c", function() {
                return m
            }), n.d(t, "g", function() {
                return p
            }), n.d(t, "e", function() {
                return h
            }), n.d(t, "f", function() {
                return f
            }), n.d(t, "b", function() {
                return g
            }), n.d(t, "d", function() {
                return b
            }), n.d(t, "i", function() {
                return v
            }), n.d(t, "j", function() {
                return E
            });
            var i, r = n("mrSG"),
                a = n("XmgI"),
                o = n("p52R"),
                s = n("ZtEv"),
                c = n("a1OF"),
                l = n("aF6k");

            function d(e) {
                return e + "-automod-rejected"
            }

            function u(e, t, n, i) {
                var l = {
                        badges: null,
                        bits: 0,
                        color: "",
                        displayName: "",
                        id: "",
                        userID: n,
                        username: n,
                        userType: o.a.User,
                        emotes: {}
                    },
                    u = Object(c.a)(t, l, a.a, !1);
                return {
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageRejectedPrompt,
                    id: d(e),
                    category: i,
                    rejectedMessage: r.__assign({}, u, {
                        type: s.b.Message,
                        messageType: s.c.Post,
                        id: e
                    })
                }
            }

            function m(e, t, n, i, l) {
                var u = {
                        badges: null,
                        bits: 0,
                        color: "",
                        displayName: "",
                        id: "",
                        userID: n,
                        username: n,
                        userType: o.a.User,
                        emotes: {}
                    },
                    m = Object(c.a)(t, u, a.a, !1);
                return {
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageRejectedPrompt,
                    id: d(e),
                    messageID: e,
                    category: i,
                    targetUserID: l,
                    originalMessage: t,
                    rejectedMessage: r.__assign({}, m, {
                        type: s.b.Message,
                        messageType: s.c.Post,
                        id: e
                    })
                }
            }

            function p() {
                return {
                    id: Object(l.a)("automod-message-rejected"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageRejected
                }
            }

            function h() {
                return {
                    id: Object(l.a)("automod-message-allowed"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageAllowed
                }
            }

            function f() {
                return {
                    id: Object(l.a)("automod-message-denied"),
                    type: s.b.AutoMod,
                    autoModType: s.a.MessageDenied
                }
            }

            function g() {
                return {
                    id: Object(l.a)("automod-cheer-message-denied"),
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageDenied
                }
            }

            function b() {
                return {
                    id: Object(l.a)("automod-cheer-message-timeout"),
                    type: s.b.AutoMod,
                    autoModType: s.a.CheerMessageTimeout
                }
            }

            function v(e, t, n, r) {
                return {
                    id: Object(l.a)("channel-moderation-action"),
                    type: s.b.ModerationAction,
                    moderationActionType: e,
                    level: i.Channel,
                    createdByLogin: t,
                    createdByUserID: n,
                    args: r
                }
            }

            function E(e, t, n, r, a, o, c) {
                return {
                    id: Object(l.a)("channel-moderation-action"),
                    type: s.b.ModerationAction,
                    moderationActionType: e,
                    level: i.User,
                    createdByLogin: t,
                    createdByUserID: n,
                    targetUserID: r,
                    targetUserLogin: a,
                    duration: o,
                    reason: c
                }
            }! function(e) {
                e[e.Channel = 0] = "Channel", e[e.User = 1] = "User"
            }(i || (i = {}))
        },
        KtNF: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("/0dD"),
                o = n("5zXJ"),
                s = n("XmgI"),
                c = n("4h+t"),
                l = n("x1M1");
            n("oijJ");

            function d(e) {
                var t, n = Object(r.d)("{bitsAmount} Bits", {
                    bitsAmount: e.count.toString()
                }, "Bits--BitsCount");
                if (e.withImage) {
                    var d = e.bitsConfig && e.bitsConfig.indexedActions[o.l];
                    d || (d = Object(c.b)());
                    var u = d.orderedTiers.find(function(t) {
                        return t.bits <= e.count
                    });
                    if (u) {
                        var m = Object(s.c)(u, void 0, e.animated);
                        return void 0 !== e.themeOverride && (e.themeOverride === a.a.Light ? m.dark = m.light : m.light = m.dark), t = i.createElement(l.a, {
                            className: "bits-count--img",
                            sources: m
                        }), i.createElement("strong", {
                            className: "bits-count",
                            "data-a-target": "bits-count"
                        }, i.createElement("span", null, t, " ", e.withText ? n : ""))
                    }
                }
                return i.createElement("strong", {
                    className: "bits-count",
                    "data-a-target": "bits-count"
                }, i.createElement("span", null, n))
            }
            n.d(t, "a", function() {
                return d
            })
        },
        KwB3: function(e, t, n) {
            "use strict";
            n("7NxT");
            var i = n("oJmH"),
                r = n("/MKj"),
                a = n("yR8l"),
                o = n("kRBY"),
                s = n("vSeP"),
                c = n("IIop"),
                l = n("nInp"),
                d = n("2EzP"),
                u = n("GnwI"),
                m = n("26nv"),
                p = n("mrSG"),
                h = n("q1tI"),
                f = n("fvjX"),
                g = n("ZS2+"),
                b = n("/0dD"),
                v = n("Mj6i"),
                E = n("jZLd"),
                k = n("XDQu"),
                C = n("IRJ5"),
                S = n("bhOa"),
                y = n("D91L"),
                N = n("PtXu"),
                _ = n("gcd7"),
                O = n("+pBb"),
                I = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.showChatRules = function() {
                            t.props.showChatRules()
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.render = function() {
                        return h.createElement(_.a, {
                            command: "rules",
                            handler: this.showChatRules
                        })
                    }, t
                }(h.Component);
            var T = Object(r.connect)(null, function(e) {
                    return Object(f.bindActionCreators)({
                        showChatRules: function() {
                            return O.P()
                        }
                    }, e)
                })(I),
                A = n("/7QA"),
                D = n("JiJH");
            var R = n("sMoq");
            var M = n("k/I/");
            var L, w, U = n("DMoW"),
                B = n("Ue10");
            ! function(e) {
                e.QUERY_ERROR = "QUERY_ERROR"
            }(L || (L = {})),
            function(e) {
                e.UnVIP = "vip-command-handler_unvip", e.VIP = "vip-command-handler_vip", e.VIPs = "vip-command-handler_vips"
            }(w || (w = {}));
            var P = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.vips = function() {
                            return {
                                deferred: t.props.data.refetch().then(function(e) {
                                    var n = e.data;
                                    if (!n || !n.user || !n.user.vips) return {
                                        notice: t.getVIPsErrorMessage()
                                    };
                                    if (0 === n.user.vips.edges.length) return {
                                        notice: Object(A.d)("This channel does not have any VIPs.", "VIPCommandHandler")
                                    };
                                    var i = n.user.vips.edges.reduce(function(e, t) {
                                        var n = t.node && t.node.login;
                                        return n && e.push(n), e
                                    }, []).join(", ");
                                    return {
                                        notice: Object(A.d)("VIPs for this channel are: {vips}.", {
                                            vips: i
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getVIPsErrorMessage()
                                    }
                                })
                            }
                        }, t.unVIPUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                i = t.getLogin(e);
                            return 1 === n.length && i && 0 !== i.length ? {
                                deferred: t.props.unVIPUserMutation(i).then(function(e) {
                                    var n = e.revokeVIP;
                                    if (!n || !n.revokee || !n.revokee.login) return {
                                        notice: t.getUnVIPErrorMessage(L.QUERY_ERROR)
                                    };
                                    var r = n.error,
                                        a = r && r.code;
                                    return a ? {
                                        notice: t.getUnVIPErrorMessage(a, i)
                                    } : {
                                        notice: Object(A.d)("You have removed {login} as a VIP of this channel.", {
                                            login: i
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getUnVIPErrorMessage(L.QUERY_ERROR)
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(A.d)('Usage: "/unvip [login]" - Revoke VIP status to a user. Use "vips" to list the VIPs of this channel.', "VIPCommandHandler")
                                })
                            }
                        }, t.vipUser = function(e) {
                            var n = t.getLogin(e);
                            return 1 === e.trim().split(/\s+/).length && n && 0 !== n.length ? {
                                deferred: t.props.vipUserMutation(n).then(function(e) {
                                    var i = e.grantVIP;
                                    if (!i || !i.grantee || !i.grantee.login) return {
                                        notice: t.getVIPErrorMessage(L.QUERY_ERROR)
                                    };
                                    var r = i.error,
                                        a = r && r.code;
                                    return a ? {
                                        notice: t.getVIPErrorMessage(a, n)
                                    } : {
                                        notice: Object(A.d)("You have added {login} as a VIP of this channel.", {
                                            login: n
                                        }, "VIPCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: t.getVIPErrorMessage(L.QUERY_ERROR)
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(A.d)('Usage: "/vip [login]" - Grant VIP status to a user. Use "vips" to list the VIPs of this channel.', "VIPCommandHandler")
                                })
                            }
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.render = function() {
                        return h.createElement(B.Va, {
                            display: B.W.Hide
                        }, h.createElement(_.a, {
                            "data-test-selector": w.UnVIP,
                            command: "unvip",
                            handler: this.unVIPUser
                        }), h.createElement(_.a, {
                            "data-test-selector": w.VIP,
                            command: "vip",
                            handler: this.vipUser
                        }), h.createElement(_.a, {
                            "data-test-selector": w.VIPs,
                            command: "vips",
                            handler: this.vips
                        }))
                    }, t.prototype.getLogin = function(e) {
                        var t = this.props.activeChattersAPI;
                        return t && t.getActiveChatterLoginFromDisplayName(e) || e
                    }, t.prototype.getCommonErrorMessage = function(e, t) {
                        switch (e) {
                            default: return "";
                            case U.x.GRANTEE_NOT_FOUND:
                                    case U.E.REVOKEE_NOT_FOUND:
                                    return Object(A.d)("Invalid username: {login}.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case U.x.FORBIDDEN:
                                    case U.E.FORBIDDEN:
                                    return Object(A.d)("You don't have permission to perform that action.", "VIPCommandHandler")
                        }
                    }, t.prototype.getVIPErrorMessage = function(e, t) {
                        switch (void 0 === t && (t = ""), e) {
                            case U.x.FORBIDDEN:
                            case U.x.GRANTEE_NOT_FOUND:
                                return this.getCommonErrorMessage(e, t);
                            case U.x.GRANTEE_ALREADY_VIP:
                                return Object(A.d)("{login} is already a VIP of this channel.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case U.x.GRANTEE_CHAT_BANNED:
                                return Object(A.d)("{login} is banned in this channel. You must unban this user before granting VIP status.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case U.x.MAX_VIPS_REACHED:
                                return Object(A.d)("Unable to add VIP. Visit the Achievements page on your dashboard to learn how to unlock additional VIP slots.", "VIPCommandHandler");
                            case U.x.VIP_ACHIEVEMENT_INCOMPLETE:
                                return Object(A.d)("Unable to add VIP. Visit the Achievements page on your dashboard to learn how to unlock this feature.", "VIPCommandHandler");
                            case L.QUERY_ERROR:
                            case U.x.CHANNEL_NOT_FOUND:
                            default:
                                return Object(A.d)("Unable to add VIP.", "VIPCommandHandler")
                        }
                    }, t.prototype.getUnVIPErrorMessage = function(e, t) {
                        switch (void 0 === t && (t = ""), e) {
                            case U.E.FORBIDDEN:
                            case U.E.REVOKEE_NOT_FOUND:
                                return this.getCommonErrorMessage(e, t);
                            case U.E.REVOKEE_NOT_VIP:
                                return Object(A.d)("{login} is not a VIP of this channel.", {
                                    login: t
                                }, "VIPCommandHandler");
                            case L.QUERY_ERROR:
                            case U.E.CHANNEL_NOT_FOUND:
                            default:
                                return Object(A.d)("Unable to remove VIP.", "VIPCommandHandler")
                        }
                    }, t.prototype.getVIPsErrorMessage = function() {
                        return Object(A.d)("There was a problem fetching the list of VIPs. Please try again.", "VIPCommandHandler")
                    }, t
                }(h.Component),
                F = Object(f.compose)(function() {
                    var e = this;
                    return Object(a.a)(D, {
                        props: function(t) {
                            return {
                                unVIPUserMutation: function(n) {
                                    return p.__awaiter(e, void 0, void 0, function() {
                                        return p.__generator(this, function(e) {
                                            switch (e.label) {
                                                case 0:
                                                    return t.mutate ? [4, t.mutate({
                                                        variables: {
                                                            input: {
                                                                channelID: t.ownProps.channelID,
                                                                revokeeLogin: n
                                                            }
                                                        }
                                                    })] : [3, 2];
                                                case 1:
                                                    return [2, e.sent().data];
                                                case 2:
                                                    return [2]
                                            }
                                        })
                                    })
                                }
                            }
                        }
                    })
                }(), function() {
                    var e = this;
                    return Object(a.a)(R, {
                        props: function(t) {
                            return {
                                vipUserMutation: function(n) {
                                    return p.__awaiter(e, void 0, void 0, function() {
                                        return p.__generator(this, function(e) {
                                            switch (e.label) {
                                                case 0:
                                                    return t.mutate ? [4, t.mutate({
                                                        variables: {
                                                            input: {
                                                                channelID: t.ownProps.channelID,
                                                                granteeLogin: n
                                                            }
                                                        }
                                                    })] : [3, 2];
                                                case 1:
                                                    return [2, e.sent().data];
                                                case 2:
                                                    return [2]
                                            }
                                        })
                                    })
                                }
                            }
                        }
                    })
                }(), Object(a.a)(M, {
                    options: function(e) {
                        return {
                            fetchPolicy: "network-only",
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                }), s.a)(P),
                j = n("vKai"),
                x = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            show: !0
                        }, t.dismiss = function() {
                            t.setState({
                                show: !1
                            })
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                            show: !0
                        })
                    }, t.prototype.render = function() {
                        return this.state.show ? h.createElement(B.xb, {
                            attachTop: !0,
                            attachLeft: !0,
                            attachRight: !0,
                            background: B.r.AccentAlt2,
                            color: B.O.Overlay,
                            position: B.db.Absolute,
                            className: "hosting-notification",
                            padding: {
                                y: .5,
                                left: .5
                            },
                            "data-a-target": "hosting-notification-container"
                        }, h.createElement(B.Va, {
                            display: B.W.Flex,
                            padding: 1,
                            justifyContent: B.Ua.Between,
                            alignItems: B.f.Center,
                            flexWrap: B.Z.NoWrap
                        }, h.createElement(B.Va, {
                            display: B.W.Flex,
                            flexWrap: B.Z.NoWrap
                        }, h.createElement(B.Va, {
                            margin: {
                                right: .5
                            },
                            flexShrink: 0
                        }, h.createElement(B.V, null, Object(A.d)("Hosting", "ChatHostingNotification"))), h.createElement(B.Va, {
                            ellipsis: !0,
                            flexShrink: 1,
                            margin: {
                                right: .5
                            }
                        }, h.createElement(B.V, {
                            type: B.Nb.Strong,
                            "data-test-selector": "hosting-notification__text",
                            "data-a-target": "hosting-notification-channel-name"
                        }, "" + this.props.hostedChannelDisplayName))), h.createElement(B.Va, {
                            display: B.W.Flex,
                            flexWrap: B.Z.NoWrap,
                            flexShrink: 0
                        }, h.createElement(B.Va, {
                            display: B.W.Inline,
                            padding: {
                                right: .5
                            }
                        }, h.createElement(B.z, {
                            linkTo: {
                                pathname: "/" + this.props.hostedChannelLogin,
                                state: {
                                    content: "host_channel",
                                    medium: "chat_bar_notification"
                                }
                            },
                            size: B.D.Small,
                            "data-a-target": "hosting-notification-gotochannel-button"
                        }, Object(A.d)("Go to Channel", "ChatHostingNotification"))), h.createElement(B.A, {
                            onClick: this.dismiss,
                            ariaLabel: Object(A.d)("Close", "HostingNotification"),
                            size: B.B.Small,
                            overlay: !0,
                            icon: B.nb.Close,
                            "data-a-target": "hosting-notification-close-button"
                        })))) : null
                    }, t
                }(h.Component),
                V = n("ZtEv"),
                H = n("aF6k");
            var G = n("lZdE"),
                W = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.getActiveChatters = function(e, t) {
                            if (void 0 === e && (e = ""), void 0 === t && (t = 1 / 0), n.isDirty && n.sortChatters(), !e) return n.sortedChatters.slice(0, t);
                            var i = new RegExp("^" + Object(G.a)(e), "i");
                            return n.sortedChatters.filter(function(e) {
                                return i.test(e.login) || e.displayName && i.test(e.displayName)
                            }).slice(0, t)
                        }, n.handleMessage = function(e) {
                            n.getUsersFromEvent(e).forEach(function(e) {
                                n.handleActiveChatter(e)
                            })
                        }, n.getActiveChatterLoginFromDisplayName = function(e) {
                            return Object.keys(n.activeChatters).find(function(t) {
                                return n.activeChatters[t] && n.activeChatters[t].displayName === e
                            }) || null
                        }, n.reset(), n
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setActiveChattersAPI({
                            getActiveChatters: this.getActiveChatters,
                            getActiveChatterLoginFromDisplayName: this.getActiveChatterLoginFromDisplayName
                        }), this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.handleMessage)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setActiveChattersAPI(), this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage)
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelLogin !== this.props.channelLogin && this.reset(), e.currentUserLogin && e.currentUserLogin !== this.props.currentUserLogin && this.activeChatterLogins.has(e.currentUserLogin) && (this.isDirty = !0, this.removeActiveChatter(e.currentUserLogin)), this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.handleMessage))
                    }, t.prototype.reset = function() {
                        this.activeChatterLogins = new Set, this.activeChatters = {}, this.isDirty = !0, this.sortedChatters = []
                    }, t.prototype.getUsersFromEvent = function(e) {
                        switch (e.type) {
                            case V.b.Message:
                                return [{
                                    login: e.user.userLogin,
                                    displayName: e.user.userDisplayName
                                }];
                            case V.b.Ritual:
                                return [{
                                    login: e.message.user.userLogin,
                                    displayName: e.message.user.userDisplayName
                                }];
                            case V.b.Raid:
                                return [{
                                    login: e.params.login,
                                    displayName: e.params.displayName
                                }];
                            case V.b.Resubscription:
                            case V.b.Subscription:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }];
                            case V.b.SubGift:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }, {
                                    displayName: e.recipientDisplayName,
                                    login: e.recipientLogin
                                }];
                            default:
                                return []
                        }
                    }, t.prototype.handleActiveChatter = function(e) {
                        e.login !== this.props.channelLogin && e.login !== this.props.currentUserLogin && (this.activeChatterLogins.has(e.login) ? (this.activeChatterLogins.delete(e.login), this.addActiveChatter(e)) : (this.addActiveChatter(e), this.trimActiveChatters(), this.isDirty = !0))
                    }, t.prototype.addActiveChatter = function(e) {
                        this.activeChatterLogins.add(e.login), this.activeChatters[e.login] = e
                    }, t.prototype.removeActiveChatter = function(e) {
                        this.activeChatterLogins.delete(e), delete this.activeChatters[e]
                    }, t.prototype.trimActiveChatters = function() {
                        if (!(this.activeChatterLogins.size <= 300))
                            for (var e = this.activeChatterLogins.size - 300, t = this.activeChatterLogins.values(), n = 0; n < e; n++) {
                                var i = t.next().value;
                                this.removeActiveChatter(i)
                            }
                    }, t.prototype.sortChatters = function() {
                        var e = this,
                            t = [{
                                displayName: this.props.channelDisplayName,
                                login: this.props.channelLogin
                            }],
                            n = Object.keys(this.activeChatters).map(function(t) {
                                return e.activeChatters[t]
                            });
                        n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), this.sortedChatters = t.concat(n), this.isDirty = !1
                    }, t
                }(h.Component);
            var Y = Object(f.compose)(Object(r.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        currentUserLogin: t && t.login
                    }
                }), s.a, d.a)(W),
                z = n("kz7j"),
                q = n("XmgI");
            var K = n("p52R");
            var Q = n("TApp"),
                X = n("a1OF");

            function $(e, t, n, i, r, a, o) {
                return void 0 === a && (a = !1), void 0 === o && (o = !1), p.__assign({}, Object(X.a)(t, n, i, r, a, o), {
                    type: V.b.Message,
                    messageType: e,
                    id: n.id || Object(H.a)(n.username)
                })
            }
            var Z = n("sblI");
            var J = n("oK83");
            var ee = n("WytW"),
                te = n("oi4T"),
                ne = n("OpME"),
                ie = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.hasConnected = !1, n.sendMessage = function(e) {
                            var t = Object(ee.i)(e, n.props.channelLogin);
                            return t.handled ? t.result && t.result.deferred && t.result.deferred.then(function(e) {
                                var t = e.notice;
                                t && n.addMessage(Object(Q.a)(t))
                            }) : n.client.sendCommand(n.props.channelLogin, e).catch(function(e) {
                                A.j.warn("Failed to send message, or message timeout", e)
                            }), t.result
                        }, n.onJoinedEvent = function(e) {
                            n.logger.debug("Connected", n.props.channelLogin), n.props.latencyTracking.reportInteractive(), n.hasConnected || (Object(te.b)({
                                channelLogin: n.props.channelLogin,
                                isHostMode: n.props.isHostMode
                            }), n.hasConnected = !0), n.chatConnected && n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.postMessageToCurrentChannel(e, {
                                type: V.b.Connected,
                                id: Object(H.a)("connected")
                            })
                        }, n.onDisconnectedEvent = function(e) {
                            return n.addMessage(function(e) {
                                return {
                                    type: V.b.Disconnected,
                                    id: Object(H.a)("disconnected"),
                                    reason: e
                                }
                            }(e.reason))
                        }, n.onReconnectingEvent = function(e) {
                            return n.addMessage({
                                type: V.b.Reconnect,
                                id: Object(H.a)("reconnect")
                            })
                        }, n.onHostedEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: V.b.Hosted,
                                    id: Object(H.a)("hosted-" + e),
                                    hostingChannel: e,
                                    isAutohost: t,
                                    viewerCount: n
                                }
                            }(e.from, e.isAuto, e.viewers))
                        }, n.onHostingEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.Hosting,
                                    id: Object(H.a)("hosting"),
                                    hostedChannel: e
                                }
                            }(e.target))
                        }, n.onUnhostEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.Unhost,
                                    id: Object(H.a)("unhost-" + e)
                                }
                            }(e.channel))
                        }, n.onChatMessageEvent = function(e) {
                            n.postMessageToCurrentChannel(e, n.convertMessage(e))
                        }, n.onChatActionEvent = function(e) {
                            var t = n.props.bitsConfig || q.a,
                                i = $(V.c.Action, e.action, e.message.user, t, n.shouldBlockLinks(e.message.user));
                            n.postMessageToCurrentChannel(e, i)
                        }, n.onChatNoticeEvent = function(e) {
                            if ("msg_rejected" !== e.msgid) {
                                var t = function(e, t, n) {
                                    return {
                                        type: V.b.Notice,
                                        id: Object(H.a)("notice"),
                                        channel: e,
                                        msgid: t,
                                        message: n
                                    }
                                }(e.channel, e.msgid, e.body);
                                n.postMessageToCurrentChannel(e, t)
                            }
                        }, n.onTimeoutEvent = function(e) {
                            n.onModerationEvent(V.e.Timeout, e)
                        }, n.onBanEvent = function(e) {
                            n.onModerationEvent(V.e.Ban, e)
                        }, n.onModerationEvent = function(e, t) {
                            n.postMessageToCurrentChannel(t, Object(Z.a)(e, t.userLogin, t.reason, t.duration))
                        }, n.onSubscriptionEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.Subscription,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods
                            }))
                        }, n.onSubscriptionGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.SubGift,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods,
                                    recipientDisplayName: e.recipientDisplayName,
                                    recipientID: e.recipientID,
                                    recipientLogin: e.recipientLogin,
                                    senderCount: e.senderCount
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods,
                                recipientDisplayName: e.recipientName,
                                recipientID: e.recipientID,
                                recipientLogin: e.recipientLogin,
                                senderCount: e.senderCount
                            }))
                        }, n.onSubscriptionMysteryGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.SubMysteryGift,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    plan: e.plan,
                                    massGiftCount: e.massGiftCount,
                                    senderCount: e.senderCount
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                plan: e.plan,
                                massGiftCount: e.massGiftCount,
                                senderCount: e.senderCount
                            }))
                        }, n.onBitsCharityEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t, n, i, r, a) {
                                return {
                                    type: V.b.BitsCharity,
                                    id: Object(H.a)("charity"),
                                    total: e,
                                    charityName: t,
                                    daysLeft: n,
                                    hoursLeft: i,
                                    hashtag: r,
                                    learnMore: a
                                }
                            }(e.total, e.charityName, e.daysLeft, e.hoursLeft, e.hashtag, e.learnMore))
                        }, n.onResubscriptionEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                var t = void 0;
                                return e.messageBody && (t = $(V.c.Post, e.messageBody, e.user, q.a, !1)), {
                                    type: V.b.Resubscription,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    user: e.user,
                                    methods: e.methods,
                                    message: t,
                                    months: e.months
                                }
                            }({
                                channel: e.channel,
                                user: e.user,
                                methods: e.methods,
                                months: e.months,
                                messageBody: e.body
                            }))
                        }, n.onGiftPaidUpgradeEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.GiftPaidUpgrade,
                                    id: Object(H.a)(e.user.username + "-sub"),
                                    channel: e.channel.slice(1),
                                    promoGiftTotal: e.promoGiftTotal,
                                    promoName: e.promoName,
                                    senderLogin: e.senderLogin,
                                    senderName: e.senderName,
                                    user: e.user
                                }
                            }({
                                channel: e.channel,
                                promoGiftTotal: e.promoGiftTotal,
                                promoName: e.promoName,
                                senderLogin: e.senderLogin,
                                senderName: e.senderName,
                                user: e.user
                            }))
                        }, n.onRoomModsEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.RoomMods,
                                    id: Object(H.a)("roommods"),
                                    moderatorLogins: e
                                }
                            }(e.usernames))
                        }, n.onRoomStateEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.RoomState,
                                    id: Object(H.a)("roomstate"),
                                    state: e
                                }
                            }(e.state))
                        }, n.onEmoteOnlyModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.EmoteOnlyMode,
                                    id: Object(H.a)("emoteonlymode"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onSubscriberOnlyModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.SubscriberOnlyMode,
                                    id: Object(H.a)("subscriber-only"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onR9KModeEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e) {
                                return {
                                    type: V.b.R9KMode,
                                    id: Object(H.a)("r9kmode"),
                                    enabled: e
                                }
                            }(e.enabled))
                        }, n.onClearChatEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, {
                                type: V.b.Clear,
                                id: Object(H.a)("clear")
                            })
                        }, n.onRaidEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: V.b.Raid,
                                    id: Object(H.a)("raid"),
                                    channel: e,
                                    userLogin: t,
                                    params: n
                                }
                            }(e.channel, e.userLogin, e.params))
                        }, n.onUnraidEvent = function(e) {
                            return n.postMessageToCurrentChannel(e, function(e, t, n) {
                                return {
                                    type: V.b.Unraid,
                                    id: Object(H.a)("unraid"),
                                    channel: e,
                                    userLogin: t,
                                    message: n
                                }
                            }(e.channel, e.userLogin, e.message))
                        }, n.onRitualEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t) {
                                return {
                                    type: V.b.Ritual,
                                    id: Object(H.a)(t.user.userLogin + "-" + e + "-ritual"),
                                    ritualType: e,
                                    message: t
                                }
                            }(e.type, n.convertMessage(e)))
                        }, n.onBadgesUpdatedEvent = function(e) {
                            return n.addMessage(function(e, t) {
                                return {
                                    type: V.b.BadgesUpdated,
                                    id: Object(H.a)("updateBadges"),
                                    userName: e,
                                    badges: t
                                }
                            }(e.username, e.badges))
                        }, n.onPurchaseEvent = function(e) {
                            var t = n.props.bitsConfig || q.a;
                            n.postMessageToCurrentChannel(e, function(e, t, n, i) {
                                return {
                                    bitsConfig: i,
                                    message: t,
                                    purchase: e,
                                    timestamp: n,
                                    id: Object(H.a)(t.user.userLogin + "-purchase"),
                                    type: V.b.Purchase
                                }
                            }(e.purchase, n.convertMessage(e), e.timestamp, t))
                        }, n.onCrateEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t) {
                                return {
                                    type: V.b.CrateGift,
                                    id: Object(H.a)("crate"),
                                    message: e,
                                    selectedCount: t
                                }
                            }(n.convertMessage(e), e.selectedCount))
                        }, n.onRewardGiftEvent = function(e) {
                            n.postMessageToCurrentChannel(e, function(e, t, n, i, r) {
                                return {
                                    type: V.b.RewardGift,
                                    id: Object(H.a)("rewardGift"),
                                    selectedCount: t,
                                    bitsAmount: n,
                                    minCheerAmount: i,
                                    messageID: e ? e.id : null,
                                    userID: e ? e.userID : null,
                                    userLogin: e ? e.username : null,
                                    displayName: e ? e.displayName : null,
                                    domain: r,
                                    sourceType: J.a.chat_message
                                }
                            }(e.user, e.selectedCount, e.bitsAmount, e.minCheerAmount, e.domain))
                        }, n.convertMessage = function(e) {
                            var t = n.props.bitsConfig || q.a;
                            return $(V.c.Post, e.message.body, e.message.user, t, n.shouldBlockLinks(e.message.user))
                        }, n.logger = A.j.withCategory("chat-service"), n.logger.debug("Created"), n.service = A.o.tmi, n.client = A.o.tmi.client, n.disabled = A.o.tmi.disabled, n.registerCustomLatencyEvents(), n
                    }
                    return p.__extends(t, e), t.prototype.render = function() {
                        return null
                    }, t.prototype.componentDidMount = function() {
                        this.props.setChatConnectionAPI({
                            sendMessage: this.sendMessage
                        }), this.shouldConnectOnMount() ? this.join(this.props.channelLogin) : this.props.latencyTracking.reportInteractive(), this.props.emoteSets && this.client.updateEmoteMap(Object(ne.c)(this.props.emoteSets))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setChatConnectionAPI(), this.disconnect(this.props.channelLogin)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        (e.emoteSets && e.emoteSets !== this.props.emoteSets && this.client.updateEmoteMap(Object(ne.c)(e.emoteSets)), !e.shouldConnect && this.props.shouldConnect) ? this.disconnect(this.props.channelLogin): (e.authToken !== this.props.authToken || e.channelLogin !== this.props.channelLogin || e.currentUserLogin !== this.props.currentUserLogin || e.shouldConnect && !this.props.shouldConnect) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.join(e.channelLogin))
                    }, t.prototype.join = function(e) {
                        this.logger.debug("Joining channel and binding all event listeners", this.props.channelLogin), this.hasConnected = !1, this.joinedChannel && this.joinedChannel !== e && this.service.part(this.props.channelLogin), this.joinedChannel = e, this.connectHandlers(), this.service.join(e)
                    }, t.prototype.disconnect = function(e) {
                        this.logger.debug("Parting channel and unbinding all event listeners", e), this.disconnectHandlers(), this.service.part(e)
                    }, t.prototype.connectHandlers = function() {
                        this.disconnectHandlers(), this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosted(this.onHostedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.rewardgift(this.onRewardGiftEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.giftpaidupgrade(this.onGiftPaidUpgradeEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.submysterygift(this.onSubscriptionMysteryGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.r9kmode(this.onR9KModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                    }, t.prototype.disconnectHandlers = function() {
                        this.client.events.remove("joined", this.onJoinedEvent), this.client.events.remove("disconnected", this.onDisconnectedEvent), this.client.events.remove("reconnecting", this.onReconnectingEvent), this.client.events.remove("chat", this.onChatMessageEvent), this.client.events.remove("usernotice", this.onChatMessageEvent), this.client.events.remove("notice", this.onChatNoticeEvent), this.client.events.remove("action", this.onChatActionEvent), this.client.events.remove("badgesupdated", this.onBadgesUpdatedEvent), this.client.events.remove("hosted", this.onHostedEvent), this.client.events.remove("hosting", this.onHostingEvent), this.client.events.remove("unhost", this.onUnhostEvent), this.client.events.remove("purchase", this.onPurchaseEvent), this.client.events.remove("crate", this.onCrateEvent), this.client.events.remove("rewardgift", this.onRewardGiftEvent), this.client.events.remove("ritual", this.onRitualEvent), this.client.events.remove("subscription", this.onSubscriptionEvent), this.client.events.remove("resub", this.onResubscriptionEvent), this.client.events.remove("subgift", this.onSubscriptionGiftEvent), this.client.events.remove("submysterygift", this.onSubscriptionMysteryGiftEvent), this.client.events.remove("timeout", this.onTimeoutEvent), this.client.events.remove("ban", this.onBanEvent), this.client.events.remove("clearchat", this.onClearChatEvent), this.client.events.remove("raid", this.onRaidEvent), this.client.events.remove("unraid", this.onUnraidEvent), this.client.events.remove("mods", this.onRoomModsEvent), this.client.events.remove("roomstate", this.onRoomStateEvent), this.client.events.remove("subscribers", this.onSubscriberOnlyModeEvent), this.client.events.remove("emoteonlymode", this.onEmoteOnlyModeEvent), this.client.events.remove("r9kmode", this.onR9KModeEvent), this.client.events.remove("charity", this.onBitsCharityEvent)
                    }, t.prototype.shouldBlockLinks = function(e) {
                        return e.username !== this.props.channelLogin && e.userType !== K.a.Staff && e.userType !== K.a.GlobalMod && e.userType !== K.a.Moderator && this.props.blockLinks
                    }, t.prototype.postMessageToCurrentChannel = function(e, t) {
                        e.channel.toLowerCase().replace("#", "") === this.props.channelLogin.toLowerCase() && this.addMessage(t)
                    }, t.prototype.addMessage = function(e) {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.handleMessage(e)
                    }, t.prototype.shouldConnectOnMount = function() {
                        return this.props.shouldConnect && !this.disabled
                    }, t.prototype.registerCustomLatencyEvents = function() {
                        this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents(z.a.Chat), this.chatInitialized = this.registerInitEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized), this.shouldConnectOnMount() && (this.chatConnected = this.registerConnectedEvent())
                    }, t.prototype.registerInitEvent = function() {
                        return this.props.latencyTracking.registerCustomEvent({
                            benchmark: 3e3,
                            group: z.a.Chat,
                            key: z.b.ChatInit,
                            label: z.c.Init
                        })
                    }, t.prototype.registerConnectedEvent = function() {
                        return this.props.latencyTracking.registerCustomEvent({
                            benchmark: 4e3,
                            group: z.a.Chat,
                            key: z.b.ChatConnected,
                            label: z.c.Connected
                        })
                    }, t
                }(h.Component);
            var re = Object(f.compose)(Object(r.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        authToken: Object(o.a)(e),
                        currentUserLogin: t && t.login
                    }
                }), Object(u.c)("ChatConnectionService"), c.a, d.a)(ie),
                ae = n("lw3P"),
                oe = n("nkgB"),
                se = n("RcPG"),
                ce = 1e3,
                le = 1e3,
                de = 200,
                ue = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.delayedMessageBuffer = [], n.updateHandlers = [], n.handleMessage = function(e) {
                            var t = !1;
                            switch (e.type) {
                                case V.b.Message:
                                    if (n.uncountedMessages++, e.user.userID && n.blockedUsers.has(e.user.userID)) {
                                        if (!n.props.shouldSeeBlockedAndDeletedMessages) return;
                                        e.hidden = !n.unhideUsers.has(e.user.userID)
                                    }
                                    var i = e.messageParts[0];
                                    if (i && i.type === se.a.Text && i.content.startsWith(":act ")) return;
                                    t = !n.isOwnMessage(e);
                                    break;
                                case V.b.Resubscription:
                                    t = !!e.message && !n.isOwnMessage(e.message);
                                    break;
                                case V.b.Moderation:
                                    var r = e.userLogin;
                                    if (n.moderatedUsers.has(r)) return;
                                    [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                        return e.event
                                    })].forEach(function(e) {
                                        e.forEach(function(e) {
                                            switch (e.type) {
                                                case V.b.Message:
                                                    e.user && r === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0);
                                                    break;
                                                case V.b.Resubscription:
                                                case V.b.Ritual:
                                                    e.message && r === e.message.user.userLogin && !e.message.deleted && (e.message.deleted = !0)
                                            }
                                        })
                                    }), n.moderatedUsers.add(r), setTimeout(n.unmoderateUser(r), ce);
                                    break;
                                case V.b.Disconnected:
                                    return;
                                case V.b.Reconnect:
                                    if (n.buffer.find(function(t) {
                                            return t.id === e.id
                                        }) || n.delayedMessageBuffer.find(function(t) {
                                            return t.event.id === e.id
                                        })) return;
                                    break;
                                case V.b.Clear:
                                    n.clear()
                            }
                            n.delayedMessageBuffer.push({
                                event: e,
                                time: Date.now(),
                                shouldDelay: t
                            })
                        }, n.getMessages = function() {
                            return n.buffer
                        }, n.unmoderateUser = function(e) {
                            return function() {
                                n.moderatedUsers.delete(e)
                            }
                        }, n.isOwnMessage = function(e) {
                            var t = e.user;
                            return !(!n.props.currentUserLogin || !t || t.userLogin !== n.props.currentUserLogin)
                        }, n.addUpdateHandler = function(e) {
                            -1 === n.updateHandlers.indexOf(e) && (n.updateHandlers = n.updateHandlers.concat(e))
                        }, n.removeUpdateHandler = function(e) {
                            n.updateHandlers = n.updateHandlers.filter(function(t) {
                                return t !== e
                            })
                        }, n.delayedMessageBuffer = [], n.buffer = [], n.moderatedUsers = new Set, n.blockedUsers = new Set(n.props.blockedUsers), n.unhideUsers = new Set, n.flushInterval = setInterval(function() {
                            return n.flushRawMessages()
                        }, de), n.uncountedMessages = 0, n.chatRateMeasurements = [], n.chatRateMeasurementInterval = setInterval(function() {
                            return n.measureChatRate()
                        }, le), n
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setMessageBufferAPI({
                            addUpdateHandler: this.addUpdateHandler,
                            removeUpdateHandler: this.removeUpdateHandler,
                            getMessages: this.getMessages
                        }), this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.handleMessage)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setMessageBufferAPI(), this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), clearInterval(this.flushInterval), clearInterval(this.chatRateMeasurementInterval)
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.handleMessage), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.handleMessage)), e.blockedUsers !== this.props.blockedUsers && (this.blockedUsers = new Set(e.blockedUsers)), e.unhideIgnoredUsers !== this.props.unhideIgnoredUsers && (this.unhideUsers = new Set(e.unhideIgnoredUsers)), this.props.isBackground && !e.isBackground && (this.chatRate > 5 && this.clear(20), this.notifySubscribers())
                    }, t.prototype.clear = function(e) {
                        if (void 0 === e && (e = 0), e <= 0) return this.buffer = [], void(this.delayedMessageBuffer = []);
                        this.buffer = this.buffer.slice(-e)
                    }, t.prototype.isDeletable = function(e) {
                        return void 0 !== e.deleted
                    }, t.prototype.flushRawMessages = function() {
                        var e = this,
                            t = [],
                            n = Date.now(),
                            i = !1;
                        this.delayedMessageBuffer.forEach(function(r) {
                            var a = r.event,
                                o = r.time,
                                s = r.shouldDelay;
                            o <= n - e.delayDuration || !s ? !e.props.shouldSeeBlockedAndDeletedMessages && e.isDeletable(a) && a.deleted || (e.buffer.push(a), i = !0) : t.push({
                                event: a,
                                time: o,
                                shouldDelay: s
                            })
                        }), this.delayedMessageBuffer = t, i && (this.clear(150), this.props.isBackground || this.notifySubscribers())
                    }, t.prototype.measureChatRate = function() {
                        3 === this.chatRateMeasurements.length && this.chatRateMeasurements.shift(), this.chatRateMeasurements.push(this.uncountedMessages), this.uncountedMessages = 0
                    }, Object.defineProperty(t.prototype, "chatRate", {
                        get: function() {
                            return 0 === this.chatRateMeasurements.length ? 0 : this.chatRateMeasurements.reduce(function(e, t) {
                                return e + t
                            }) / this.chatRateMeasurements.length
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "delayDuration", {
                        get: function() {
                            return this.props.isCurrentUserModerator ? 0 : this.props.data.user && this.props.data.user.chatSettings && this.props.data.user.chatSettings.chatDelayMs || 0
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t.prototype.notifySubscribers = function() {
                        this.updateHandlers.forEach(function(e) {
                            return e()
                        })
                    }, t
                }(h.Component);
            var me = Object(f.compose)(Object(r.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        authToken: Object(o.a)(e),
                        currentUserLogin: t && t.login,
                        isLoggedIn: Object(o.f)(e)
                    }
                }), Object(a.a)(oe, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(ae.a)(), l.a, d.a)(ue),
                pe = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.messageHandlers = [], t.addMessageHandler = function(e) {
                            -1 === t.messageHandlers.indexOf(e) && (t.messageHandlers = t.messageHandlers.concat(e))
                        }, t.removeMessageHandler = function(e) {
                            t.messageHandlers = t.messageHandlers.filter(function(t) {
                                return t !== e
                            })
                        }, t.handleMessage = function(e) {
                            for (var n = t.messageHandlers.length, i = 0; i < n; i++) t.messageHandlers[i](e)
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.setMessageHandlerAPI({
                            addMessageHandler: this.addMessageHandler,
                            removeMessageHandler: this.removeMessageHandler,
                            handleMessage: this.handleMessage
                        })
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.setMessageHandlerAPI()
                    }, t
                }(h.Component),
                he = Object(f.compose)(d.a)(pe),
                fe = n("0Log"),
                ge = n("/aPz"),
                be = n("KGti"),
                ve = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.subscribe = function(e) {
                            t.unsubscribe(), e.channelID && e.currentUserID && (t.unsubscriber = A.k.subscribe({
                                topic: Object(ge.o)(e.currentUserID, e.channelID),
                                onMessage: t.handleMessage
                            }))
                        }, t.unsubscribe = function() {
                            t.unsubscriber && (t.unsubscriber(), t.unsubscriber = null)
                        }, t.handleMessage = function(e) {
                            switch (e.data.moderation_action) {
                                case fe.ModerationActions.AutoModRejected:
                                    var n = Object(be.h)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    t.addMessage(n);
                                    break;
                                case fe.ModerationActions.AutoModCheerRejected:
                                    var i = Object(be.c)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2], e.data.target_user_id);
                                    t.addMessage(i);
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageRejected:
                                    t.addMessage(Object(be.g)());
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageApproved:
                                    t.addMessage(Object(be.e)());
                                    break;
                                case fe.TargetedModerationActions.AutoModMessageDenied:
                                    t.addMessage(Object(be.f)());
                                    break;
                                case fe.TargetedModerationActions.AutoModCheerDenied:
                                    t.addMessage(Object(be.b)());
                                    break;
                                case fe.TargetedModerationActions.AutoModCheerTimeout:
                                    t.addMessage(Object(be.d)());
                                    break;
                                case fe.ModerationActions.Ban:
                                    t.addMessage(Object(be.j)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, e.data.args[1]));
                                    break;
                                case fe.ModerationActions.Unban:
                                case fe.ModerationActions.Timeout:
                                case fe.ModerationActions.Untimeout:
                                case fe.ModerationActions.Mod:
                                case fe.ModerationActions.Unmod:
                                    t.addMessage(Object(be.j)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], e.data.args[1], e.data.args[2]));
                                    break;
                                case fe.ModerationActions.AutoModEnabled:
                                case fe.ModerationActions.Clear:
                                case fe.ModerationActions.EmoteOnly:
                                case fe.ModerationActions.EmoteOnlyOff:
                                case fe.ModerationActions.FollowersOnly:
                                case fe.ModerationActions.FollowersOnlyOff:
                                case fe.ModerationActions.Host:
                                case fe.ModerationActions.R9kBeta:
                                case fe.ModerationActions.R9kBetaOff:
                                case fe.ModerationActions.Raid:
                                case fe.ModerationActions.Slow:
                                case fe.ModerationActions.SlowOff:
                                case fe.ModerationActions.SubsBeta:
                                case fe.ModerationActions.SubscribersOnly:
                                case fe.ModerationActions.SubscribersOnlyOff:
                                case fe.ModerationActions.Unhost:
                                case fe.ModerationActions.AddBlockedTerm:
                                case fe.ModerationActions.AddPermittedTerm:
                                case fe.ModerationActions.DeleteBlockedTerm:
                                case fe.ModerationActions.DeletePermittedTerm:
                                case fe.ModerationActions.ModifiedAutoModProperties:
                                case fe.ModerationActions.Unraid:
                                    t.addMessage(Object(be.i)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.args));
                                    break;
                                default:
                                    A.j.warn("Unknown moderation action type", e.data.moderation_action)
                            }
                        }, t
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.subscribe(this.props)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelID === this.props.channelID && e.currentUserID === this.props.currentUserID || this.subscribe(e)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, t.prototype.render = function() {
                        return null
                    }, t.prototype.addMessage = function(e) {
                        this.props.messageHandlerAPI ? this.props.messageHandlerAPI.handleMessage(e) : A.j.warn("ModerationActionService received an event before the MessageHandlerAPI was available.")
                    }, t
                }(h.Component);
            var Ee = Object(f.compose)(Object(r.connect)(function(e) {
                    var t = Object(o.e)(e);
                    return {
                        currentUserID: t && t.id
                    }
                }), d.a)(ve),
                ke = n("gq0V"),
                Ce = n("BJwa"),
                Se = "(?:\\W|^)",
                ye = "(?:$|\\W)",
                Ne = "PowerUpL DarkMode PowerUpR",
                _e = {
                    failSilently: !0,
                    placeholder: null
                },
                Oe = g.a.wrap(function() {
                    return n.e(184).then(n.bind(null, "Gnts"))
                }, "MysteryGiftChatBannerQueue", _e),
                Ie = g.a.wrap(function() {
                    return n.e(183).then(n.bind(null, "KSjr"))
                }, "NativeBroadcastNotification", _e),
                Te = g.a.wrap(function() {
                    return n.e(182).then(n.bind(null, "T3fw"))
                }, "Orbis", _e),
                Ae = g.a.wrap(function() {
                    return n.e(181).then(n.bind(null, "7htX"))
                }, "RaidNotification", _e),
                De = g.a.wrap(function() {
                    return n.e(180).then(n.bind(null, "rg60"))
                }, "RitualsOnboardingSticky", _e),
                Re = g.a.wrap(function() {
                    return n.e(179).then(n.bind(null, "miqE"))
                }, "ShareToChat", _e),
                Me = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.state = {
                            hasReceivedInitialRoomState: !1,
                            hostedChannelLogin: null,
                            raidReceived: !1,
                            userBadges: null
                        }, n.sendMessage = function(e) {
                            if (!e || 0 === e.length || !n.props.authToken) return !1;
                            if (!n.props.chatConnectionAPI) return !1;
                            var t = n.props.chatConnectionAPI.sendMessage(e);
                            return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                        }, n.pushMessage = function(e) {
                            n.props.messageHandlerAPI && n.props.messageHandlerAPI.handleMessage(e)
                        }, n.onChatEvent = function(e) {
                            switch (e.type) {
                                case V.b.Hosting:
                                    n.hostingHandler(e.hostedChannel);
                                    break;
                                case V.b.Unhost:
                                    n.hostingHandler(null);
                                    break;
                                case V.b.RoomState:
                                    n.onRoomStateUpdated(e.state);
                                    break;
                                case V.b.BadgesUpdated:
                                    n.onBadgesUpdated(e);
                                    break;
                                case V.b.Raid:
                                    n.setState({
                                        raidReceived: !0
                                    })
                            }
                        }, n.hostingHandler = function(e) {
                            n.setState({
                                hostedChannelLogin: e
                            }), n.props.onHostingChange && n.props.onHostingChange(e)
                        }, n.createOutgoingTokenMatchers = function(e) {
                            n.outgoingTokenMatchers = e.map(function(e) {
                                return {
                                    token: e,
                                    regex: new RegExp("" + Se + e + ye)
                                }
                            })
                        }, n.parseOutgoingMessage = function(e) {
                            n.outgoingTokenMatchers.forEach(function(t) {
                                t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                            })
                        }, n.onOutgoingTokenMatch = function(e, t) {
                            switch (e) {
                                case Ne:
                                    var i = n.props.theme === b.a.Light ? b.a.Dark : b.a.Light;
                                    n.props.onThemeChange(i);
                                    break;
                                default:
                                    return
                            }
                        }, n.onBadgesUpdated = function(e) {
                            n.setState({
                                userBadges: e.badges
                            })
                        }, n.onRoomStateUpdated = function(e) {
                            n.props.onRoomStateUpdate(e), n.setState({
                                hasReceivedInitialRoomState: !0
                            })
                        }, n.createOutgoingTokenMatchers([Ne]), n
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.addMessageHandler(this.onChatEvent)
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.onChatEvent)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        e.channelLogin !== this.props.channelLogin && this.setState({
                            hostedChannelLogin: null
                        }), this.state.hasReceivedInitialRoomState && (this.props.followerModeDuration === e.followerModeDuration && this.props.followerModeEnabled === e.followerModeEnabled || this.pushMessage(function(e, t) {
                            return {
                                type: V.b.FollowerOnlyMode,
                                id: Object(H.a)("follower-only"),
                                enabled: e,
                                length: t
                            }
                        }(e.followerModeEnabled, e.followerModeDuration)), this.props.slowModeEnabled === e.slowModeEnabled && this.props.slowModeDuration === e.slowModeDuration || this.pushMessage(function(e, t) {
                            return {
                                type: V.b.SlowMode,
                                id: Object(H.a)("slowmode"),
                                enabled: e,
                                length: t
                            }
                        }(e.slowModeEnabled, e.slowModeDuration))), this.props.messageHandlerAPI !== e.messageHandlerAPI && (this.props.messageHandlerAPI && this.props.messageHandlerAPI.removeMessageHandler(this.onChatEvent), e.messageHandlerAPI && e.messageHandlerAPI.addMessageHandler(this.onChatEvent))
                    }, t.prototype.render = function() {
                        var e, t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                            n = this.props.isHidden || !this.props.rightColumnExpanded && !this.props.inlineRightColumnExpanded,
                            i = this.props.isEmbedded || this.props.isPopout || !n;
                        return this.props.firstPageLoaded && (e = h.createElement(Te, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        })), h.createElement(h.Fragment, null, h.createElement(Ce.b, {
                            authToken: this.props.authToken,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelDisplayName: this.props.channelDisplayName,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            chatRoomHeader: e,
                            chatRules: this.props.chatRules,
                            closeRoomPicker: this.props.closeRoomPicker,
                            currentUserDisplayName: this.props.userDisplayName,
                            currentUserLogin: this.props.userLogin,
                            emotes: t,
                            emoteMap: this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {},
                            firstPageLoaded: this.props.firstPageLoaded,
                            hostedChannelLogin: this.state.hostedChannelLogin,
                            isBackground: this.props.isBackground,
                            isChatRulesOpen: this.props.isChatRulesOpen,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isEmbedded: this.props.isEmbedded,
                            isHidden: this.props.isHidden,
                            isHostMode: !!this.state.hostedChannelLogin,
                            isOwnChannel: this.isOwnChannel,
                            isPopout: this.props.isPopout,
                            isStaff: this.props.isStaff,
                            onChatUnhide: this.props.onChatUnhide,
                            onCloseChatRules: this.props.onCloseChatRules,
                            onPushMessage: this.pushMessage,
                            onSendMessage: this.sendMessage,
                            onShowChatRules: this.props.onShowChatRules,
                            raidReceived: this.state.raidReceived,
                            theme: this.props.theme,
                            userBadges: this.state.userBadges,
                            userID: this.props.userID
                        }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && h.createElement(Re, {
                            authToken: this.props.authToken,
                            channelDisplayName: this.props.channelDisplayName,
                            channelLogin: this.props.channelLogin,
                            bitsConfig: this.props.bitsConfig,
                            "data-test-selector": "share-to-chat"
                        }), this.props.hostedChannelDisplayName && !this.props.isPopout && h.createElement(x, {
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                            hostedChannelLogin: this.state.hostedChannelLogin || ""
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && this.props.channelID && h.createElement(Ae, {
                            channelID: this.props.channelID,
                            "data-test-selector": "raid-notification"
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && h.createElement(Oe, {
                            channelID: this.props.channelID
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && h.createElement(Ie, {
                            channelLogin: this.props.channelLogin
                        }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && h.createElement(De, {
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin
                        })), this.renderCommandHandlers(), h.createElement(Y, {
                            channelDisplayName: this.props.channelDisplayName,
                            channelLogin: this.props.channelLogin
                        }), h.createElement(re, {
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelLogin: this.props.channelLogin,
                            emoteSets: this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                            isHostMode: !!this.state.hostedChannelLogin,
                            shouldConnect: i
                        }), h.createElement(me, {
                            channelLogin: this.props.channelLogin,
                            shouldSeeBlockedAndDeletedMessages: this.props.shouldSeeBlockedAndDeletedMessages,
                            isBackground: !!this.props.isBackground,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            unhideIgnoredUsers: this.props.unhideIgnoredUsers
                        }), h.createElement(he, null), h.createElement(Ee, {
                            channelID: this.props.channelID
                        }))
                    }, t.prototype.renderCommandHandlers = function() {
                        if (this.props.passThroughCommands) return null;
                        var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {},
                            t = this.props,
                            n = t.channelID,
                            i = t.isPopout,
                            r = t.userLogin;
                        return h.createElement(h.Fragment, null, h.createElement(j.a, {
                            isEmbedded: this.props.isEmbedded,
                            isPopout: i,
                            userLogin: r,
                            userID: this.props.userID,
                            emoteMap: e
                        }), h.createElement(C.a, {
                            channelLogin: this.props.channelLogin,
                            isPopout: i
                        }), h.createElement(S.a, null), h.createElement(N.a, {
                            channelID: n
                        }), h.createElement(ke.a, null, h.createElement(F, {
                            channelID: n
                        })), h.createElement(y.a, {
                            currentUserLogin: r
                        }), this.props.chatRules && !!this.props.chatRules.length && h.createElement(T, null))
                    }, Object.defineProperty(t.prototype, "isOwnChannel", {
                        get: function() {
                            return this.props.userID === this.props.channelID
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(h.Component);
            var Le = Object(i.compose)(Object(r.connect)(function(e) {
                    return {
                        firstPageLoaded: e.session.firstPageLoaded,
                        isChatRulesOpen: e.chat.isChatRulesOpen,
                        isHidden: e.chat.isHidden,
                        isLoggedIn: Object(o.f)(e),
                        rightColumnExpanded: e.ui.rightColumnExpanded,
                        inlineRightColumnExpanded: e.ui.inlineRightColumnExpanded,
                        theme: Object(k.a)(e),
                        followerModeDuration: e.chat.followerDuration,
                        followerModeEnabled: e.chat.followerMode,
                        slowModeDuration: e.chat.slowModeDuration,
                        slowModeEnabled: e.chat.slowMode,
                        unhideIgnoredUsers: e.chat.unhideIgnoredUsers
                    }
                }, function(e) {
                    return Object(f.bindActionCreators)({
                        onCloseChatRules: function() {
                            return O.z()
                        },
                        onShowChatRules: function() {
                            return O.P()
                        },
                        onChatUnhide: function() {
                            return O.O()
                        },
                        onRoomStateUpdate: function(e) {
                            return O.S(e)
                        },
                        onThemeChange: function(e) {
                            return Object(E.b)(e, E.a.TypedCommand)
                        }
                    }, e)
                }), Object(u.c)("ChatRoom", {
                    autoReportInteractive: !0
                }), Object(v.a)(), c.a, d.a)(Me),
                we = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return p.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.componentDidUpdate = function() {
                        this.props.latencyTracking.reportInteractive()
                    }, t.prototype.render = function() {
                        var e = this.props.channelData.channel,
                            t = this.props.userData && this.props.userData.user,
                            n = !1,
                            i = !1,
                            r = !1;
                        if (t && e && e.self) {
                            var a = t.login === e.login;
                            n = e.self.isModerator || a || t.roles.isGlobalMod || t.roles.isSiteAdmin, i = t.roles.isStaff, r = e.self.isModerator || a || t.roles.isGlobalMod
                        }
                        var o = void 0;
                        e && e.chatSettings && e.chatSettings.rules && e.chatSettings.rules.filter(function(e) {
                            return e.trim().length
                        }).length && (o = e.chatSettings.rules);
                        var s = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                        return h.createElement(Le, {
                            key: this.props.channelLogin,
                            authToken: this.props.sessionUser && this.props.sessionUser.authToken,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: s,
                            channelDisplayName: e && e.displayName,
                            channelID: e && e.id,
                            channelLogin: this.props.channelLogin,
                            chatRules: o,
                            clientID: this.props.clientID,
                            isBackground: this.props.isBackground,
                            isCurrentUserModerator: n,
                            isEmbedded: !!this.props.isEmbedded,
                            isPopout: !!this.props.isPopout,
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                            closeRoomPicker: this.props.closeRoomPicker,
                            onHostingChange: this.props.onHostingChange,
                            userDisplayName: this.props.sessionUser && this.props.sessionUser.displayName,
                            userID: this.props.sessionUser && this.props.sessionUser.id.toString(),
                            userLogin: this.props.sessionUser && this.props.sessionUser.login,
                            isStaff: i,
                            shouldSeeBlockedAndDeletedMessages: r,
                            passThroughCommands: this.props.passThroughCommands
                        })
                    }, t
                }(h.Component),
                Ue = n("9P+5");
            var Be = Object(i.compose)(Object(r.connect)(function(e) {
                    return {
                        sessionUser: Object(o.e)(e)
                    }
                }), Object(a.a)(m, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(a.a)(Ue, {
                    name: "userData",
                    skip: function(e) {
                        return !e.sessionUser
                    }
                }), Object(u.c)("Chat"))(we),
                Pe = Object(i.compose)(s.b, c.b, l.b, d.b)(Be);
            n.d(t, !1, function() {
                return we
            }), n.d(t, "b", function() {
                return Be
            }), n.d(t, "a", function() {
                return Pe
            })
        },
        L6L7: function(e, t, n) {},
        MBj5: function(e, t, n) {},
        MIhh: function(e, t, n) {},
        MJbm: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = (n("efEE"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.logger = a.o.logger.withCategory("resize-detector"), t.onScroll = function() {
                            var e = t.container,
                                n = e.offsetWidth,
                                i = e.offsetHeight,
                                r = e.offsetLeft,
                                a = e.offsetTop;
                            t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && a === t.top && r === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, a, r)), t.reset()
                        }, t.setGrowDivRef = function(e) {
                            return t.growDiv = e
                        }, t.setGrowChildDivRef = function(e) {
                            return t.growChildDiv = e
                        }, t.setShrinkDivRef = function(e) {
                            return t.shrinkDiv = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement("div", {
                            className: "resize-detector"
                        }, r.createElement("div", {
                            className: "resize-detector",
                            ref: this.setGrowDivRef
                        }, r.createElement("div", {
                            className: "resize-detector__grow",
                            ref: this.setGrowChildDivRef
                        })), r.createElement("div", {
                            className: "resize-detector",
                            ref: this.setShrinkDivRef
                        }, r.createElement("div", {
                            className: "resize-detector__shrink"
                        })))
                    }, t.prototype.componentDidMount = function() {
                        if (this.growDiv) {
                            this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                            var e = this.container.style.position;
                            if ("relative" !== e && "absolute" !== e && "fixed" !== e) {
                                var t = window.getComputedStyle(this.container);
                                t && "static" === t.getPropertyValue("position") && (this.container.style.position = "relative")
                            }
                            this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                        } else this.logger.warn("growDiv is undefined!")
                    }, t.prototype.componentWillUnmount = function() {
                        this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                    }, t.prototype.reset = function() {
                        var e = this.growDiv,
                            t = this.shrinkDiv,
                            n = this.growChildDiv.style;
                        n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                    }, t
                }(r.Component));
            n.d(t, "a", function() {
                return o
            })
        },
        MVDO: function(e, t, n) {},
        Mj6i: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("0FG4"),
                o = n("S4w9");

            function s() {
                return Object(r.a)(o, {
                    props: function(e) {
                        if (e.data) {
                            var t = e.data.currentUser && e.data.currentUser.emoteSets || [],
                                n = t && Object(a.b)(t);
                            return {
                                emoteSetsData: i.__assign({}, e.data, {
                                    currentUser: e.data.currentUser || null,
                                    emoteMap: n,
                                    emoteSets: t
                                })
                            }
                        }
                        return {}
                    },
                    skip: function(e) {
                        return !e.isLoggedIn
                    }
                })
            }
        },
        NMMG: function(e, t, n) {
            "use strict";

            function i(e, t) {
                return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
            }

            function r(e, t) {
                return e.split("_").find(function(e) {
                    return e !== t
                }) || null
            }
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            })
        },
        NNSq: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("sAMt");

            function o(e) {
                return i.__awaiter(this, void 0, Promise, function() {
                    var t, n;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                t = null, i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]), [4, r.o.apollo.client.query({
                                    query: a,
                                    variables: {
                                        login: e
                                    }
                                })];
                            case 2:
                                return t = i.sent(), [3, 4];
                            case 3:
                                return n = i.sent(), r.j.warn(n, "Failed to fetch user targeted by chat command.", {
                                    userLogin: e
                                }), [3, 4];
                            case 4:
                                return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                        }
                    })
                })
            }
        },
        NWfm: function(e, t, n) {},
        NvZ5: function(e, t, n) {},
        OCTF: function(e, t, n) {},
        OXQr: function(e, t, n) {},
        OpME: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return l
            }), n.d(t, "e", function() {
                return d
            }), n.d(t, "c", function() {
                return m
            }), n.d(t, "a", function() {
                return p
            }), n.d(t, "f", function() {
                return f
            }), n.d(t, "d", function() {
                return g
            });
            var i = n("mrSG"),
                r = n("lZdE"),
                a = n("cpJf"),
                o = {
                    "^B-?\\)$": "B)",
                    "^:-?[z|Z|\\|]$": ":|",
                    "^:-?\\)$": ":)",
                    "^:-?\\($": ":(",
                    "^:-?(p|P)$": ":P",
                    "^;-?(p|P)$": ";P",
                    "^:-?[\\\\/]$": ":/",
                    "^;-?\\)$": ";)",
                    "^R-?\\)$": "R)",
                    "^:>$": ":>",
                    "^:&gt;$": ":>",
                    "^[oO](_|\\.)[oO]$": "O_o",
                    "^:-?D$": ":D",
                    "^:-?(o|O)$": ":O",
                    "^>\\($": ">(",
                    "^:-?(?:7|L)$": ":7",
                    "^:-?(S|s)$": ":S",
                    "^#-?[\\\\/]$": "#/",
                    "^<\\]$": "<]",
                    "^<3$": "<3",
                    "^&lt;3$": "<3",
                    "^&lt;\\]$": "<]",
                    "^&gt;\\($": ">("
                },
                s = ["1.0", "2.0", "3.0"],
                c = new Set([457, 33, 42, 0]);

            function l(e) {
                for (var t = [], n = function(e) {
                        if (!e || !e.id || !e.token) return "continue";
                        var n = h(e.token),
                            r = o[n] || n,
                            a = s.reduce(function(t, n) {
                                var i = t;
                                return i && (i = i.concat(", ")), i.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x")
                            }, "");
                        t.push(i.__assign({
                            displayName: r,
                            srcSet: a
                        }, e))
                    }, r = 0, a = e; r < a.length; r++) {
                    n(a[r])
                }
                return t
            }

            function d(e, t) {
                var n = l(e);
                return t && (n = function(e, t) {
                    return e.map(function(e) {
                        return i.__assign({}, e, {
                            setID: t
                        })
                    })
                }(n, t)), n
            }

            function u(e) {
                return e.filter(function(e) {
                    return !!e && !!e.id && !!e.token
                }).sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            }

            function m(e) {
                for (var t = [], n = 0, i = e; n < i.length; n++) {
                    var r = i[n];
                    if (r && r.id && r.emotes) {
                        for (var a = {
                                id: r.id,
                                emotes: []
                            }, o = 0, s = r.emotes; o < s.length; o++) {
                            var c = s[o];
                            c && c.id && c.token && a.emotes.push(c)
                        }
                        t.push(a)
                    }
                }
                return t
            }

            function p(e) {
                for (var t = [], n = [], i = 0, r = e; i < r.length; i++) {
                    var a = r[i];
                    if (a && a.id && a.emotes) {
                        var o = {
                            id: a.id,
                            emotes: d(u(a.emotes), a.id)
                        };
                        c.has(parseInt(a.id, 10)) ? t.push(o) : n.push(o)
                    }
                }
                return n.concat(t)
            }
            var h = function(e) {
                    return function(e) {
                        return /[\|\\\^\$\*\+\?\:\#]/.test(e)
                    }(e) ? "^" + e.replace(/\\(?=[&;:])/g, "") + "$" : e
                },
                f = function(e, t, n) {
                    var i = n || a.d,
                        o = [],
                        s = [],
                        c = [],
                        l = new RegExp("^" + Object(r.a)(t), "i");
                    return e.forEach(function(e) {
                        i[e.token] ? c.push(e) : e.token.match(l) ? o.push(e) : s.push(e)
                    }), o.sort(function(e, t) {
                        return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                    }), s.sort(function(e, t) {
                        return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                    }), c.sort(function(e, t) {
                        return i[t.token].count - i[e.token].count
                    }), c.concat(o).concat(s)
                },
                g = function(e) {
                    var t = {};
                    return e.filter(function(e) {
                        return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                    })
                }
        },
        OvAg: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "IncomingRaidLine_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "profileImageURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "50"
                                        }
                                    }],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 140
                }
            };
            n.loc.source = {
                body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        PrJw: function(e, t, n) {
            "use strict";
            var i = n("vGFN");
            n.d(t, "a", function() {
                return i.b
            }), n.d(t, "b", function() {
                return i.c
            }), n.d(t, "c", function() {
                return i.d
            }), n.d(t, "d", function() {
                return i.e
            }), n.d(t, "e", function() {
                return i.f
            }), n.d(t, "f", function() {
                return i.g
            }), n.d(t, "g", function() {
                return i.h
            }), n.d(t, "h", function() {
                return i.i
            }), n.d(t, "i", function() {
                return i.j
            }), n.d(t, "j", function() {
                return i.k
            }), n.d(t, "k", function() {
                return i.m
            }), n.d(t, "l", function() {
                return i.p
            }), n.d(t, "m", function() {
                return i.q
            })
        },
        PtXu: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("oJmH"),
                s = n("/7QA"),
                c = n("gcd7"),
                l = n("yR8l"),
                d = n("4HoE");
            ! function(e) {
                e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserAlreadyModded = "TARGET_ALREADY_MOD", e.UserBanned = "TARGET_IS_CHAT_BANNED", e.UserNotFound = "TARGET_NOT_FOUND"
            }(i || (i = {}));
            var u, m = n("FAYk");
            ! function(e) {
                e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserNotFound = "TARGET_NOT_FOUND", e.UserNotMod = "TARGET_NOT_MOD"
            }(u || (u = {}));
            var p = n("3HtZ"),
                h = n("QVaV"),
                f = n("vSeP"),
                g = n("Ue10"),
                b = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.modUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                r = t.userLogin(n[0]);
                            return 1 === n.length && r && 0 !== r.length ? {
                                deferred: t.props.modUserMutation(r).then(function(e) {
                                    if (e.modUser.error) switch (e.modUser.error.code) {
                                        case i.Forbidden:
                                            return {
                                                notice: E()
                                            };
                                        case i.UserAlreadyModded:
                                            return {
                                                notice: Object(s.d)("{login} is already a moderator of this channel.", {
                                                    login: r
                                                }, "ModCommandHandler")
                                            };
                                        case i.UserBanned:
                                            return {
                                                notice: Object(s.d)("{login} is banned in this channel. You must unban this user before granting mod status.", {
                                                    login: r
                                                }, "ModCommandHandler")
                                            };
                                        case i.UserNotFound:
                                            return {
                                                notice: v(r)
                                            };
                                        default:
                                            return {
                                                notice: k()
                                            }
                                    }
                                    return {
                                        notice: Object(s.d)("You have added {login} as a moderator of this channel.", {
                                            login: r
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: k()
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)('Usage: "/mod [login]" - Grant mod status to a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                                })
                            }
                        }, t.mods = function(e) {
                            return {
                                deferred: s.o.apollo.client.query({
                                    query: p,
                                    fetchPolicy: "network-only",
                                    variables: {
                                        id: t.props.channelID
                                    }
                                }).then(function(e) {
                                    if (!e.data.user) return {
                                        notice: C()
                                    };
                                    if (0 === e.data.user.mods.edges.length) return {
                                        notice: Object(s.d)("There are no moderators of this channel.", "ModCommandHandler")
                                    };
                                    var t = e.data.user.mods.edges.map(function(e) {
                                        return e.node.login
                                    }).join(", ");
                                    return {
                                        notice: Object(s.d)("The moderators of this channel are: {mods}.", {
                                            mods: t
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: C()
                                    }
                                })
                            }
                        }, t.unmodUser = function(e) {
                            var n = e.trim().split(/\s+/),
                                i = t.userLogin(n[0]);
                            return 1 === n.length && i && 0 !== i.length ? {
                                deferred: t.props.unmodUserMutation(i).then(function(e) {
                                    if (e.unmodUser.error) switch (e.unmodUser.error.code) {
                                        case u.Forbidden:
                                            return {
                                                notice: E()
                                            };
                                        case u.UserNotFound:
                                            return {
                                                notice: v(i)
                                            };
                                        case u.UserNotMod:
                                            return {
                                                notice: Object(s.d)("{login} is currently not a moderator of this channel.", {
                                                    login: i
                                                }, "ModCommandHandler")
                                            };
                                        default:
                                            return {
                                                notice: S()
                                            }
                                    }
                                    return {
                                        notice: Object(s.d)("You have removed {login} as a moderator of this channel.", {
                                            login: i
                                        }, "ModCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: S()
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)('Usage: "/unmod [login]" - Revoke mod status from a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                                })
                            }
                        }, t.userLogin = function(e) {
                            return "@" === e[0] && (e = e.substr(1)), Object(h.b)(e) ? e : t.props.activeChattersAPI ? t.props.activeChattersAPI.getActiveChatterLoginFromDisplayName(e) || e : t.props.displayNameToLogin && t.props.displayNameToLogin(e) || e
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(g.Va, {
                            display: g.W.Hide
                        }, a.createElement(c.a, {
                            command: "mod",
                            handler: this.modUser
                        }), a.createElement(c.a, {
                            command: "mods",
                            handler: this.mods
                        }), a.createElement(c.a, {
                            command: "unmod",
                            handler: this.unmodUser
                        }))
                    }, t
                }(a.Component);

            function v(e) {
                return Object(s.d)("Invalid username: {login}", {
                    login: e
                }, "ModCommandHandler")
            }

            function E() {
                return Object(s.d)("You don't have permission to perform that action.", "ModCommandHandler")
            }

            function k() {
                return Object(s.d)("Unable to add moderator.", "ModCommandHandler")
            }

            function C() {
                return Object(s.d)("There was a problem fetching the list of mods.", "ModCommandHandler")
            }

            function S() {
                return Object(s.d)("Unable to remove moderator.", "ModCommandHandler")
            }
            var y = function(e) {
                    return {
                        channelID: e.channelID
                    }
                },
                N = Object(o.compose)(f.a, function(e) {
                    var t = this;
                    return Object(l.a)(m, {
                        props: function(n) {
                            return {
                                unmodUserMutation: function(i) {
                                    return r.__awaiter(t, void 0, void 0, function() {
                                        var t;
                                        return r.__generator(this, function(r) {
                                            if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                                variables: {
                                                    input: {
                                                        channelID: t,
                                                        targetLogin: i
                                                    }
                                                }
                                            }).then(function(e) {
                                                return e.data
                                            })];
                                            throw new Error("unmodUser mutation is not ready")
                                        })
                                    })
                                }
                            }
                        }
                    })
                }(y), function(e) {
                    var t = this;
                    return Object(l.a)(d, {
                        props: function(n) {
                            return {
                                modUserMutation: function(i) {
                                    return r.__awaiter(t, void 0, void 0, function() {
                                        var t;
                                        return r.__generator(this, function(r) {
                                            if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                                variables: {
                                                    input: {
                                                        channelID: t,
                                                        targetLogin: i
                                                    }
                                                }
                                            }).then(function(e) {
                                                return e.data
                                            })];
                                            throw new Error("modUser mutation is not ready")
                                        })
                                    })
                                }
                            }
                        }
                    })
                }(y))(b);
            n.d(t, "a", function() {
                return N
            })
        },
        QVaV: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            });
            var i = n("q1tI"),
                r = /^[\x00-\x7F]*$/,
                a = function(e, t, n) {
                    return void 0 === n && (n = !1), t && e && !o(t) ? n ? t + " (" + e + ")" : i.createElement("span", null, t, " ", i.createElement("span", {
                        className: "intl-login"
                    }, "(" + e + ")")) : t || (e || "")
                };

            function o(e) {
                return r.test(e)
            }
        },
        Qdho: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RoomSelector"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "channel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channelRooms"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "topic"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isPreviewable"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "minimumAllowedRole"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "self"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isArchived"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isMuted"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isUnread"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "unreadMentionCount"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hosting"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "banStatus"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isPermanent"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isChannelMember"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "isModerator"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 395
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery RoomSelector ($login: String!) {\nchannel: user(login: $login) {\nid\ndisplayName\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\n...cheer\nhosting {\nid\n}\nself {\nbanStatus {\nisPermanent\n}\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nstream {\nid\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("F9eG").definitions)), e.exports = i
        },
        Qime: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsPinnedCheerV2_Leaderboards"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "leaderboard"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "first"
                                                },
                                                value: {
                                                    kind: "IntValue",
                                                    value: "10"
                                                }
                                            }],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "leaderboardItem"
                                                    },
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "secondsRemaining"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "leaderboard"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isEnabled"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "timePeriodType"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsLeaderboardItem"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "rank"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "score"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "entryKey"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 350
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/bits/models/bits-leaderboard-item-fragment.gql"\nquery BitsPinnedCheerV2_Leaderboards($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\nleaderboard (first: 10) {\nid\n...leaderboardItem\nsecondsRemaining\n}\nsettings {\nleaderboard {\nisEnabled\ntimePeriodType\n}\n}\n}\nself {\nbitsLeaderboardItem {\nid\nrank\nscore\nentryKey\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("fhkr").definitions)), e.exports = i
        },
        QjI3: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("/MKj"),
                s = n("fvjX"),
                c = n("ZS2+"),
                l = n("UUve"),
                d = n("1/iK"),
                u = n("aCAx"),
                m = n("kRBY"),
                p = n("GnwI"),
                h = n("oJmH"),
                f = n("/7QA"),
                g = n("2+sX"),
                b = n("u5aL"),
                v = n("eJ65"),
                E = n("yR8l"),
                k = n("x7UT"),
                C = n("3Bft"),
                S = n("tIid"),
                y = n("ht6z"),
                N = n("/aPz"),
                _ = n("D7An"),
                O = n("W8Fi"),
                I = n("br9A"),
                T = n("Ue10"),
                A = (n("a7aT"), n("z+dA"));
            ! function(e) {
                e.SubButton = "subscribe-button__dropdown", e.BalloonLayerButton = "subscribe-button__balloon-layer-btn", e.DefaultButton = "subscribe-button__default-btn", e.SubscribeBalloon = "subscribe-button__subscribe-balloon"
            }(i || (i = {}));
            var D = c.a.wrap(function() {
                    return Promise.all([n.e(0), n.e(186)]).then(n.bind(null, "f+qK"))
                }, "SubscribeBalloon"),
                R = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            inPrimeRegion: !1
                        }, t.modalLevel = "top_page", t.renderBalloonContentForBalloonLayer = function() {
                            return a.createElement(b.a, {
                                onClickOut: t.handleBalloonClickOut
                            }, a.createElement(T.Va, {
                                "data-a-target": "sub-balloon",
                                refDelegate: t.setBalloonContentRefDelegate
                            }, t.balloonWrapperContent))
                        }, t.handleButtonClick = function() {
                            t.balloonContentRef || (t.props.balloonLayer.show({
                                direction: t.getBalloonDirection(),
                                ref: t.containerRef,
                                content: t.renderBalloonContentForBalloonLayer(),
                                contentHeight: 0,
                                closeOnScroll: !0
                            }), t.handleMenuToggle(!1))
                        }, t.handleBalloonClickOut = function() {
                            t.handleMenuToggle(!0), t.props.balloonLayer.hide({
                                force: !0
                            })
                        }, t.setBalloonWrapperContent = function(e) {
                            t.balloonWrapperContent = e
                        }, t.handleSubMenuAction = function(e) {
                            new Set([I.a.ClickCheckout, I.a.BuyGiftSub, I.a.BuyMysteryGift, I.a.BuyCustomMysteryGift, I.a.BuyGiftToPaidUpgrade, I.a.BuyPaidUpgrade]).has(e.action) && t.checkAndDisplaySubscriptionCheckout();
                            var n = !!(t.props.data.user && t.props.data.user.self && t.props.data.user.self.subscriptionBenefit),
                                i = t.props.data.requestInfo && Object(y.a)(t.props.data.requestInfo.countryCode);
                            Object(I.b)({
                                action: e.action || "",
                                channelLogin: t.props.channelLogin || "",
                                channelID: t.props.data && t.props.data.user.id,
                                checkoutButtonTier: e.checkoutButtonTier,
                                hasSubCredit: !!t.props.data.user.self && t.props.data.user.self.canPrimeSubscribe,
                                hostChannelID: t.props.hostChannelID,
                                hostChannelLogin: t.props.hostChannelLogin,
                                isMenuOpen: e.action !== I.a.OpenSubMenu,
                                mysteryGiftCount: e.mysteryGiftCount,
                                sub_location: "channel_page",
                                modal: !n,
                                modalLevel: n ? "" : t.modalLevel.slice(),
                                showPrimeContent: i,
                                giftRecipient: e.giftRecipient || null
                            }), !e.modalLevel || e.action !== I.a.ClickMoreSubOptions && e.action !== I.a.ClickBack || (t.modalLevel = e.modalLevel)
                        }, t.handleMenuToggle = function(e) {
                            t.handleSubMenuAction({
                                action: e ? I.a.CloseSubMenu : I.a.OpenSubMenu
                            })
                        }, t.getBalloonDirection = function() {
                            var e = t.props.balloonDirection || T.v.BottomRight;
                            return t.props.hostChannelID && (e = T.v.TopLeft), e
                        }, t.setContainerRefDelegate = function(e) {
                            t.containerRef = e
                        }, t.setBalloonContentRefDelegate = function(e) {
                            t.balloonContentRef = e
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.reportInteractive && this.isUserDataReady(this.props) && this.props.reportInteractive(), this.checkAndDisplaySubscriptionCheckout()
                    }, t.prototype.componentDidUpdate = function(e) {
                        this.props.channelLogin && !this.isUserDataReady(this.props) || !this.props.updateContainerWidth || this.props.updateContainerWidth(), this.props.reportInteractive && this.props.data && !this.props.data.loading && this.props.reportInteractive(), !this.isUserDataReady(e) && this.isUserDataReady(this.props) && this.checkAndDisplaySubscriptionCheckout()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.isUserDataReady(e) && e.pubsub.messages.subscriptionInfo !== this.props.pubsub.messages.subscriptionInfo && this.props.data.refetch()
                    }, t.prototype.componentWillUnmount = function() {
                        Object(l.d)()
                    }, t.prototype.render = function() {
                        if (!this.isUserDataReady(this.props) || !this.hasSubscriptionProducts(this.props)) return null;
                        if (this.props.hideEsportsSubscription && Object(S.a)(this.props.data.user.id, this.props.sessionUser)) return null;
                        var e = this.props.data.requestInfo && Object(y.a)(this.props.data.requestInfo.countryCode),
                            t = !!(this.props.data.user && this.props.data.user.self && this.props.data.user.self.subscriptionBenefit),
                            n = Object(S.a)(this.props.data.user.id, this.props.sessionUser),
                            r = 1 === this.props.data.user.subscriptionProducts.length,
                            o = null;
                        this.props.data.user.self && this.props.data.user.self.subscriptionBenefit && (o = this.props.data.user.self.subscriptionBenefit.purchasedWithPrime ? C.b.Prime : this.props.data.user.self.subscriptionBenefit.tier, this.modalLevel = ""), this.props.data.user.subscriptionProducts.some(this.isSubscriptionProductInvalid) && (r = !0);
                        var s, c = t ? Object(f.d)("All-Access Pass", "SubscribeButton") : Object(f.d)("Get the All-Access Pass", "SubscribeButton"),
                            l = this.props.data.user.self && Object(O.h)(this.props.data.user.subscriptionProducts, this.props.data.user.self.subscriptionBenefit);
                        if (t) {
                            var d = "";
                            if (d = r ? Object(f.d)("Subscribed", "SubscribeButton") : l ? Object(f.d)("Continue Sub for $1", "SubscribeButton") : Object(f.d)("Gift A Sub", "SubscribeButton"), s = this.props.hostChannelID ? Object(f.d)("Subscribed to {username}", {
                                    username: this.props.data.user.displayName
                                }, "SubscribeButton") : d, r && !n) return a.createElement(T.z, {
                                disabled: !0,
                                ariaLabel: s,
                                icon: T.nb.Star
                            }, s);
                            n && (s = c)
                        } else s = n ? c : this.props.hostChannelID ? Object(f.d)("Subscribe to {username}", {
                            username: this.props.data.user.displayName
                        }, "SubscribeButton") : Object(f.d)("Subscribe", "SubscribeButton");
                        var u = t ? "subscribed-button" : "subscribe-button",
                            m = a.createElement(T.z, {
                                ariaLabel: s,
                                "data-a-target": u,
                                "data-test-selector": i.SubButton,
                                dropdown: !this.props.hideDropdownArrow,
                                fullWidth: !0,
                                icon: this.getButtonIcon(t, o),
                                onClick: this.props.renderBalloonInBalloonLayer ? this.handleButtonClick : void 0,
                                type: this.getButtonType(t)
                            }, s);
                        return this.setBalloonWrapperContent(a.createElement(D, {
                            authToken: this.props.authToken,
                            channelLogin: this.props.channelLogin || "",
                            "data-test-selector": i.SubscribeBalloon,
                            handleSubMenuAction: this.handleSubMenuAction,
                            inPrimeRegion: e,
                            isEsportChannel: n,
                            isNonStandardSub: r,
                            isStaff: !!(this.props.sessionUser && this.props.sessionUser.roles && this.props.sessionUser.roles.isStaff),
                            isSubscribed: t,
                            productId: this.props.data.user.subscriptionProducts[0].id,
                            subbedTier: o || C.b.Prime,
                            userHasPrime: !1
                        })), this.props.renderBalloonInBalloonLayer ? a.createElement(T.Va, {
                            "data-test-selector": i.BalloonLayerButton,
                            refDelegate: this.setContainerRefDelegate
                        }, m) : a.createElement(T.Va, {
                            className: l ? "subscribe-button--promo" : ""
                        }, a.createElement(v.a, {
                            "data-test-selector": i.DefaultButton,
                            onToggle: this.handleMenuToggle
                        }, m, a.createElement(T.u, {
                            "data-a-target": "sub-balloon",
                            direction: this.getBalloonDirection(),
                            size: T.w.Large
                        }, this.balloonWrapperContent)))
                    }, t.prototype.getButtonType = function(e) {
                        T.F.Default;
                        return e && void 0 !== this.props.subscribedButtonType ? this.props.subscribedButtonType : e ? T.F.Success : this.props.unsubscribedButtonType || T.F.Default
                    }, t.prototype.getButtonIcon = function(e, t) {
                        var n = void 0;
                        return e ? n = t === C.b.Prime ? T.nb.Crown : T.nb.Star : this.props.forceIcon && (n = T.nb.StarHollow), n
                    }, t.prototype.hasSubscriptionProducts = function(e) {
                        return e.data.user.subscriptionProducts && e.data.user.subscriptionProducts.length > 0
                    }, t.prototype.isUserDataReady = function(e) {
                        return e.data && e.data.user && !e.data.loading && !e.data.error
                    }, t.prototype.isSubscriptionProductInvalid = function(e) {
                        return !e.emoteSetID
                    }, t.prototype.checkAndDisplaySubscriptionCheckout = function() {
                        if ("yes" === f.o.experiments.getAssignment(_.b.InstreamCheckout)) {
                            var e = f.m.get(l.b, ""),
                                t = f.m.get(l.c, ""),
                                n = f.m.get(l.a, ""),
                                i = Number(n);
                            e && this.isUserDataReady(this.props) && (this.props.data.user.subscriptionProducts.map(function(e) {
                                return e.name
                            }).includes(e) ? this.props.sessionUser ? this.props.showSubscriptionCheckoutModal({
                                recipientLogin: t,
                                productName: e,
                                mysteryGiftCount: i
                            }) : this.props.showLoginModal() : Object(l.d)())
                        }
                    }, t
                }(a.Component),
                M = Object(h.compose)(Object(E.a)(A, {
                    options: function(e) {
                        return {
                            variables: {
                                login: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(k.a)([{
                    topic: function(e) {
                        return Object(N.E)(e.data.currentUser && e.data.currentUser.id || "")
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !(e.data && !e.data.loading && !e.data.error && e.data.currentUser)
                    }
                }]), Object(g.e)())(R),
                L = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.reportInteractive = function() {
                            t.props.latencyTracking.reportInteractive()
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        return a.createElement(M, {
                            authToken: this.props.authToken,
                            balloonDirection: this.props.balloonDirection,
                            channelLogin: this.props.channelLogin,
                            forceIcon: this.props.forceIcon,
                            hideEsportsSubscription: this.props.hideEsportsSubscription,
                            hideDropdownArrow: this.props.hideDropdownArrow,
                            hostChannelID: this.props.hostChannelID,
                            hostChannelLogin: this.props.hostChannelLogin,
                            renderBalloonInBalloonLayer: this.props.renderBalloonInBalloonLayer,
                            reportInteractive: this.reportInteractive,
                            sessionUser: this.props.sessionUser,
                            showLoginModal: this.props.showLoginModal,
                            showSubscriptionCheckoutModal: this.props.showSubscriptionCheckoutModal,
                            subscribedButtonType: this.props.subscribedButtonType,
                            unsubscribedButtonType: this.props.unsubscribedButtonType,
                            updateContainerWidth: this.props.updateContainerWidth
                        })
                    }, t = r.__decorate([Object(p.c)("SubscribeButton")], t)
                }(a.Component);
            var w = Object(o.connect)(function(e) {
                return {
                    authToken: Object(m.a)(e),
                    sessionUser: Object(m.e)(e)
                }
            }, function(e) {
                return Object(s.bindActionCreators)({
                    showLoginModal: Object(l.e)(d.a.ChannelSubscriptionButton),
                    showSubscriptionCheckoutModal: function(e) {
                        var t = r.__rest(e, []);
                        return Object(u.d)(c.a, {
                            component: "CheckoutModal",
                            loader: function() {
                                return Promise.all([n.e(0), n.e(198)]).then(n.bind(null, "KJv/"))
                            },
                            componentProps: t
                        })
                    }
                }, e)
            })(L);
            n.d(t, !1, function() {
                return L
            }), n.d(t, "a", function() {
                return w
            }), n.d(t, !1, function() {
                return i
            }), n.d(t, !1, function() {
                return R
            }), n.d(t, !1, function() {
                return M
            })
        },
        R2Ti: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_AllowRejectedCheerMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "AllowRejectedCheerInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "allowRejectedCheer"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 118
                }
            };
            n.loc.source = {
                body: "mutation Chat_AllowRejectedCheerMessage($input: AllowRejectedCheerInput!) {\nallowRejectedCheer(input: $input) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        R4sh: function(e, t, n) {
            "use strict";

            function i(e) {
                var t = [e[0], e[1], e[2]].map(function(e) {
                    return (e /= 255) <= .03928 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4)
                });
                return .2126 * t[0] + .7152 * t[1] + .0722 * t[2]
            }

            function r(e, t) {
                var n = i(e) + .05,
                    r = i(t) + .05;
                return n > r ? n / r : r / n
            }
            n.d(t, "a", function() {
                return r
            })
        },
        RRSb: function(e, t, n) {},
        RcPG: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Text = 0] = "Text", e[e.ModeratedText = 1] = "ModeratedText", e[e.CurrentUserHighlight = 2] = "CurrentUserHighlight", e[e.Mention = 3] = "Mention", e[e.Link = 4] = "Link", e[e.Emote = 5] = "Emote", e[e.ClipLink = 6] = "ClipLink", e[e.VideoLink = 7] = "VideoLink"
                }(i || (i = {}))
        },
        RiD7: function(e, t, n) {
            "use strict";
            n.d(t, "h", function() {
                return a
            }), n.d(t, "b", function() {
                return s
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "d", function() {
                return d
            }), n.d(t, "e", function() {
                return u
            }), n.d(t, "f", function() {
                return m
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "g", function() {
                return p
            }), n.d(t, "i", function() {
                return h
            });
            var i = n("/7QA"),
                r = n("2xye");

            function a(e) {
                var t = {
                    action_name: e.actionName,
                    action_type: "click",
                    displayed_balance: e.displayedBalance,
                    emote_level: e.emoteLevel,
                    emote_type: e.emoteType,
                    bits_location: e.location || s.ChatTooltip
                };
                i.n.track(r.SpadeEventType.BitsCardInteraction, t)
            }
            var o, s = {
                    ChatTooltip: "card",
                    GetBitsButton: "get_bits_button",
                    GetBitsButtonTopNav: "topnav",
                    BitsLandingPage: "bits_landing_page"
                },
                c = {
                    BuyMain: "buy_main",
                    Buy100: "buy_100",
                    Buy500: "buy_500",
                    Buy1000: "buy_1000",
                    Buy1500: "buy_1500",
                    Buy5000: "buy_5000",
                    Buy10000: "buy_10000",
                    Buy25000: "buy_25000",
                    CloseCard: "menu_close",
                    OpenCard: "menu_open",
                    PreviewEmote: "emote_preview",
                    WatchAd: "watch_ad",
                    WatchAnotherAd: "watch_another_ad",
                    CheeringInRoom: "cheering_in_room"
                },
                l = {
                    100: c.Buy100,
                    500: c.Buy500,
                    1000: c.Buy1000,
                    1500: c.Buy1500,
                    5000: c.Buy5000,
                    10000: c.Buy10000,
                    25000: c.Buy25000
                };

            function d(e) {
                return e && l[e] ? l[e] : (i.j.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), c.Buy100)
            }

            function u(e) {
                var t = {
                    channel: e.channel,
                    channel_id: e.channelID,
                    available: e.available,
                    host: "twitch.tv"
                };
                i.n.track(r.SpadeEventType.BitsAdsAvailability, t)
            }

            function m(e) {
                var t = {
                    distinct_id: i.o.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    campaign_id: e.campaignID,
                    adblock: e.adblock
                };
                i.n.track(r.SpadeEventType.BitsAdsImpression, t)
            }

            function p(e) {
                var t = i.n.getLastPageview(),
                    n = {
                        location: t && t.location || "",
                        ad_returned: null,
                        campaign_id: e.campaignID,
                        distinct_id: i.o.session.deviceID,
                        host: "twitch.tv",
                        request_id: e.requestID,
                        request_method: e.requestMethod
                    };
                i.n.track(r.SpadeEventType.BitsAdsRequest, n)
            }

            function h(e) {
                var t = {
                    leaderboard_size: e.leaderboardSize,
                    leaderboard_mode: e.leaderboardMode,
                    user_present_in_leaderboard: e.userPresentInLeaderboard,
                    user_id: e.userID,
                    channel_id: e.channelID
                };
                i.n.track(r.SpadeEventType.LeaderboardExpandClick, t)
            }! function(e) {
                e.ShowAdButton = "show_ad_button"
            }(o || (o = {}))
        },
        RuiO: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Core_Services_Spade_SubEvent_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withVideo"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "canPrimeSubscribe"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tier"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "purchasedWithPrime"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "withVideo"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastType"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 266
                }
            };
            n.loc.source = {
                body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        S4w9: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "UserEmotes"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "emoteSets"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "token"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 76
                }
            };
            n.loc.source = {
                body: "query UserEmotes {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        SDEh: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = /\scurse\/\d/;

            function r(e) {
                return e || (e = navigator.userAgent), !!i.exec(e)
            }
        },
        SEmS: function(e, t, n) {
            "use strict";
            n.r(t);
            var i = n("/MKj"),
                r = n("XDQu"),
                a = n("mrSG"),
                o = n("cr+I"),
                s = n("q1tI"),
                c = n("V+GM"),
                l = n("/0dD"),
                d = n("76Lv"),
                u = n("NvVO"),
                m = n("2xye"),
                p = n("GnwI"),
                h = n("VAW9"),
                f = n("Ue10"),
                g = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = void 0 !== o.parse(this.props.location.search).darkpopout,
                            t = Object(d.b)(e ? l.a.Dark : this.props.theme);
                        return s.createElement(f.Va, {
                            className: t,
                            display: f.W.Flex,
                            fullHeight: !0,
                            fullWidth: !0
                        }, s.createElement(f.xb, {
                            background: f.r.Alt2,
                            color: f.O.Base,
                            display: f.W.Flex,
                            flexGrow: 0,
                            flexShrink: 0,
                            overflow: f.Ya.Hidden,
                            fullHeight: !0,
                            fullWidth: !0
                        }, s.createElement(h.a, {
                            channelLogin: this.props.match.params.channelLogin,
                            isPopout: !0
                        })))
                    }, t = a.__decorate([Object(p.c)("PopoutChatPage", {
                        autoReportInteractive: !0,
                        destination: u.a.ChatPopout
                    }), Object(c.a)({
                        location: m.PageviewLocation.Chat
                    })], t)
                }(s.Component);
            var b = Object(i.connect)(function(e) {
                return {
                    theme: Object(r.a)(e)
                }
            })(g);
            n.d(t, "PopoutChatPage", function() {
                return b
            })
        },
        SceP: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ClipsChatCard_Clip"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "slug"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "clip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "thumbnailURL"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "slug"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "url"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "curator"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcaster"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 151
                }
            };
            n.loc.source = {
                body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nthumbnailURL\ntitle\nslug\nurl\ncurator {\nid\ndisplayName\n}\nbroadcaster {\nid\ndisplayName\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        TApp: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("ZtEv"),
                r = n("aF6k");

            function a(e) {
                return {
                    type: i.b.Info,
                    id: Object(r.a)("info"),
                    message: e
                }
            }
        },
        TOso: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("cMjZ"),
                o = n("geRD"),
                s = n("f00E"),
                c = n("DMoW"),
                l = n("U1yz"),
                d = n("xXlL"),
                u = n("a1OF");
            var m, p = n("3YIm"),
                h = n("NMMG"),
                f = n("Vl9+");

            function g(e) {
                var t = e.currentUserID,
                    n = e.emotes,
                    m = e.message,
                    g = e.recipientUserID;
                if ("" === t || "" === m || "" === g) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
                var b = Object(s.b)(),
                    v = i.__assign({
                        mutation: p
                    }, Object(o.a)({
                        message: m,
                        nonce: b,
                        recipientUserID: g
                    })),
                    E = Object(h.a)(t, g),
                    k = Object(l.a)(r.o.apollo.client.cache, E, !0);
                if (k) {
                    var C = function(e, t) {
                        for (var n = [], i = /\S+/g, r = i.exec(e); r;) {
                            var a = r[0],
                                o = t[a];
                            if (o) {
                                var s = Object(u.c)(e.slice(0, r.index)),
                                    c = s ? s.length : r.index;
                                n.push({
                                    id: o.id,
                                    start: c,
                                    end: c + a.length - 1
                                })
                            }
                            r = i.exec(e)
                        }
                        return n
                    }(m, n).map(d.a);
                    v.optimisticResponse = {
                        sendWhisper: {
                            __typename: "SendWhisperPayload",
                            message: {
                                content: {
                                    content: m,
                                    emotes: C,
                                    __typename: "MessageBody"
                                },
                                from: {
                                    id: t,
                                    __typename: "User"
                                },
                                id: b,
                                nonce: b,
                                sentAt: (new Date).toISOString(),
                                deletedAt: null,
                                editedAt: null,
                                thread: {
                                    id: E,
                                    __typename: "WhisperThread",
                                    participants: [{
                                        id: t,
                                        __typename: "User",
                                        self: {
                                            __typename: "UserSelfConnection",
                                            whisperPermissions: {
                                                receive: c.O.NOT_PERMITTED,
                                                __typename: "WhisperPermissions"
                                            }
                                        }
                                    }, {
                                        id: g,
                                        __typename: "User",
                                        self: {
                                            __typename: "UserSelfConnection",
                                            whisperPermissions: {
                                                receive: c.O.PERMITTED,
                                                __typename: "WhisperPermissions"
                                            }
                                        }
                                    }]
                                },
                                __typename: "WhisperMessage"
                            },
                            error: null
                        }
                    }, v.update = function(e, t) {
                        if (t.data) {
                            var n = t.data;
                            if (n.sendWhisper.message && !n.sendWhisper.error) {
                                var r = n.sendWhisper.message,
                                    o = Object(l.a)(e, E);
                                if (o) {
                                    var s = o.messages.edges.findIndex(function(e) {
                                        return e.node.id === b || e.node.nonce === b || e.node.id === r.id
                                    });
                                    if (s < 0) {
                                        var c = {
                                            cursor: (1 + k.messages.edges.reduce(function(e, t) {
                                                return Math.max(parseInt(t.cursor, 10), e)
                                            }, 0)).toString(),
                                            node: r,
                                            __typename: "WhisperMessageEdge"
                                        };
                                        o.messages.edges.unshift(c)
                                    } else o.messages.edges[s].node = r;
                                    o.userLastMessageRead && (o.userLastMessageRead.sentAt = r.sentAt), o.unreadMessagesCount = 0, e.writeFragment({
                                        id: Object(a.a)(o),
                                        fragment: f,
                                        data: i.__assign({}, o)
                                    })
                                }
                            }
                        }
                    }
                }
                return r.o.apollo.client.mutate(v)
            }
            n.d(t, "a", function() {
                    return m
                }), n.d(t, "b", function() {
                    return g
                }),
                function(e) {
                    e.TargetBanned = "TARGET_BANNED", e.BodyEmpty = "BODY_EMPTY", e.RestrictedRecipient = "TARGET_RESTRICTED", e.NotDelivered = "NOT_DELIVERED"
                }(m || (m = {}))
        },
        TTKc: function(e, t, n) {},
        TvOw: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "b", function() {
                    return i
                }), n.d(t, "a", function() {
                    return r
                }),
                function(e) {
                    e.Spam = "Spam", e.Harassment = "Harassment"
                }(i || (i = {})),
                function(e) {
                    e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
                }(r || (r = {}))
        },
        U1yz: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("2Dht");

            function r(e, t, n) {
                try {
                    var r = e.readQuery({
                        query: i,
                        variables: {
                            id: t
                        }
                    }, n);
                    return r ? r.whisperThread : null
                } catch (e) {
                    return null
                }
            }
        },
        U80U: function(e, t, n) {},
        UJc8: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "b", function() {
                    return r
                }), n.d(t, "a", function() {
                    return a
                }),
                function(e) {
                    e.Everyone = "EVERYONE", e.Moderator = "MODERATOR", e.Subscriber = "SUBSCRIBER"
                }(r || (r = {}));
            var a = ((i = {})[r.Everyone] = "Everyone", i[r.Moderator] = "Mods", i[r.Subscriber] = "Subs", i)
        },
        UUve: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            }), n.d(t, "d", function() {
                return l
            }), n.d(t, "e", function() {
                return d
            });
            var i = n("/7QA"),
                r = n("y5D0"),
                a = "SUB_CHECKOUT__PRODUCT",
                o = "SUB_CHECKOUT__RECIPIENT",
                s = "SUB_CHECKOUT__MYSTERY_GIFT_COUNT",
                c = [a, o, s];

            function l() {
                c.forEach(function(e) {
                    return i.m.remove(e)
                })
            }

            function d(e) {
                return function() {
                    return Object(r.e)(e, {
                        onClose: l
                    })
                }
            }
        },
        UajW: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BitsCard_MainCard"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "name"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withCheerBombEventEnabled"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "name"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "emoteMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cheerMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "event"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isCheerBombEventEnabled"
                                                    },
                                                    arguments: [],
                                                    directives: [{
                                                        kind: "Directive",
                                                        name: {
                                                            kind: "Name",
                                                            value: "include"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "if"
                                                            },
                                                            value: {
                                                                kind: "Variable",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "withCheerBombEventEnabled"
                                                                }
                                                            }
                                                        }]
                                                    }]
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "bitsBadge"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "totalBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "nextBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "progress"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "current"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "badge"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "next"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "FragmentSpread",
                                                            name: {
                                                                kind: "Name",
                                                                value: "badge"
                                                            },
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "tournament"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "teams"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "name"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 469
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_MainCard($name: ID! $withCheerBombEventEnabled: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\nisCheerBombEventEnabled @include(if: $withCheerBombEventEnabled)\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("IKE4").definitions)), e.exports = i
        },
        "V+GM": function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("cr+I"),
                a = n("q1tI"),
                o = n("wIs1"),
                s = n("/7QA");

            function c(e) {
                return function(t) {
                    var n = function(n) {
                        function o(t) {
                            var r = n.call(this, t) || this;
                            return r.tracked = !1, r.referenceTracking = {}, r.trackPageview = function() {
                                if (!(r.tracked || e.skip && e.skip(r.props))) {
                                    r.tracked = !0;
                                    var t = {};
                                    "function" == typeof e.properties ? t = e.properties(r.props) : e.properties && (t = i.__assign({}, e.properties));
                                    var n = i.__assign({}, r.props);
                                    n.location && n.location.state && (t.medium = n.location.state.medium, t.content = n.location.state.content, t.content_index = n.location.state.content_index, t.email_id = n.location.state.email_id);
                                    var a = r.referenceTracking,
                                        o = a.content,
                                        c = a.medium,
                                        l = a.content_index,
                                        d = a.email_id;
                                    s.o.tracking.trackPageview(i.__assign({
                                        content: o,
                                        medium: c,
                                        content_index: l,
                                        email_id: d,
                                        location: e.location
                                    }, t))
                                }
                            }, s.j.debug("pageViewTracking", e), t.rootLatencyTracker ? t.rootLatencyTracker.setLocation(e.location) : s.j.warn("No latency tracker exists! This means no data will be sent to Spade.", e), r
                        }
                        return i.__extends(o, n), o.prototype.componentDidMount = function() {
                            var e = this;
                            this.referenceTracking = this.stripTTParams(this.props.history.location), this.trackPageview(), this.props.history.listen(function(t, n) {
                                "REPLACE" !== n && (e.tracked = !1, e.referenceTracking = {})
                            })
                        }, o.prototype.componentDidUpdate = function() {
                            this.trackPageview()
                        }, o.prototype.render = function() {
                            return a.createElement(t, i.__assign({}, this.props))
                        }, o.prototype.stripTTParams = function(e) {
                            var t = "" !== e.search ? r.parse(e.search) : {},
                                n = {
                                    content: t.tt_content,
                                    content_index: t.tt_content_index,
                                    medium: t.tt_medium,
                                    email_id: t.tt_email_id
                                };
                            if (delete t.tt_content, delete t.tt_content_index, delete t.tt_medium, delete t.tt_email_id, n.medium || n.content || n.email_id) {
                                var i = "",
                                    a = r.stringify(t);
                                a.length > 0 && (i = "?" + a), this.props.history.replace({
                                    pathname: e.pathname,
                                    hash: e.hash,
                                    search: i
                                })
                            }
                            return n
                        }, o
                    }(a.Component);
                    return Object(o.a)(n)
                }
            }
            n.d(t, "a", function() {
                return c
            })
        },
        VAW9: function(e, t, n) {
            "use strict";
            var i = n("oJmH"),
                r = n("/MKj"),
                a = n("fvjX"),
                o = n("yR8l"),
                s = n("eDVu"),
                c = n("0Log"),
                l = n("/aPz"),
                d = n("kRBY"),
                u = n("5zXJ");

            function m(e) {
                var t = {
                        prefix: e.prefix,
                        type: function(e) {
                            var t = u.j;
                            switch (e) {
                                case "channel_custom":
                                    t = u.e;
                                    break;
                                case "global_first_party":
                                    t = u.g;
                                    break;
                                case "global_third_party":
                                    t = u.h;
                                    break;
                                case "sponsored":
                                    t = u.i;
                                    break;
                                default:
                                    t = u.j
                            }
                            return t
                        }(e.type),
                        tiers: []
                    },
                    n = e.tiers.map(function(e) {
                        var t = [];
                        return p(e.images).forEach(function(e, n) {
                            p(e).forEach(function(e, i) {
                                p(e).forEach(function(e, r) {
                                    t.push({
                                        url: e,
                                        theme: n.toUpperCase(),
                                        dpiScale: parseFloat(r),
                                        isAnimated: "animated" === i
                                    })
                                })
                            })
                        }), {
                            id: e.id,
                            bits: e.min_bits,
                            canCheer: e.can_cheer,
                            canShowInBitsCard: e.show_in_bits_card,
                            color: e.color,
                            images: t
                        }
                    });
                return t.tiers = n, e.campaign && (t.campaign = function(e) {
                    var t = {
                        id: e.id,
                        brandName: e.brand_name,
                        brandImageURL: e.brand_image_url,
                        minimumBitsAmount: e.min_bits_to_be_sponsored,
                        bitsTotal: e.total_bits,
                        bitsUsed: e.used_bits,
                        bitsPercentageRemaining: e.used_bits / e.total_bits,
                        userLimit: e.user_limit,
                        thresholds: []
                    };
                    return p(e.sponsored_amount_thresholds).forEach(function(e, n) {
                        t.thresholds.push({
                            minimumBits: n,
                            matchedPercent: e
                        })
                    }), t
                }(e.campaign)), t
            }
            var p = function(e) {
                    return Object.keys(e).reduce(function(t, n) {
                        return t.set(n, e[n])
                    }, new Map)
                },
                h = n("0Lz3"),
                f = n("+pBb"),
                g = n("Y3y8"),
                b = n("GnwI");
            var v, E = n("mrSG"),
                k = n("q1tI"),
                C = n("/7QA"),
                S = n("w0yC"),
                y = n("ZS2+"),
                N = n("KwB3"),
                _ = n("BJwa"),
                O = n("a1OF");
            ! function(e) {
                e.MentionPill = "mentionPill", e.ViewRooms = "viewRooms"
            }(v || (v = {}));
            var I = function(e) {
                    return C.l.get("hasSeenRoomsOnboarding", {})[e] || !1
                },
                T = function(e) {
                    var t;
                    C.l.set("hasSeenRoomsOnboarding", E.__assign({}, C.l.get("hasSeenRoomsOnboarding", {}), ((t = {})[e] = !0, t)))
                },
                A = n("Ue10"),
                D = (n("zWFo"), "Stream Chat"),
                R = y.a.wrap(function() {
                    return n.e(194).then(n.bind(null, "+k6+"))
                }, "ActiveRoomButton"),
                M = y.a.wrap(function() {
                    return n.e(193).then(n.bind(null, "Xf1I"))
                }, "Room"),
                L = y.a.wrap(function() {
                    return n.e(192).then(n.bind(null, "cs/o"))
                }, "RoomPicker"),
                w = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            activeRoomID: D,
                            activeRoomName: D,
                            hasSeenGeneralOnboarding: I(v.ViewRooms),
                            isActiveRoomDeleted: !1,
                            shouldAutoOpenRoomPicker: !0,
                            showRoomPicker: !1
                        }, t.renderOnboardingBalloon = function() {
                            var e = t.props.data;
                            if (t.state.showRoomPicker || t.state.hasSeenGeneralOnboarding) return null;
                            if (!e || !e.channel) return null;
                            var n = t.props.sessionUser && t.props.sessionUser.id === e.channel.id;
                            return e.channel.channelRooms && 0 === e.channel.channelRooms.length && !n ? null : k.createElement(A.u, {
                                direction: A.v.BottomRight,
                                offsetX: "1rem",
                                show: !0,
                                size: A.w.Small
                            }, k.createElement(S.a, {
                                onClickOut: t.dismissGeneralOnboarding
                            }, k.createElement(A.Va, {
                                padding: 3,
                                textAlign: A.Jb.Center
                            }, k.createElement("img", {
                                src: Object(O.d)("508650", 3),
                                width: "28"
                            }), k.createElement(A.Va, {
                                margin: {
                                    y: 1
                                }
                            }, k.createElement(A.V, {
                                color: A.O.Alt2
                            }, Object(C.d)("Rooms help you keep the conversation going", "RoomSelector"))), k.createElement(A.z, {
                                onClick: t.headerClick
                            }, Object(C.d)("View rooms", "RoomSelector")))))
                        }, t.isChannelLive = function(e) {
                            return !(e.error || !e.channel) && !!(e.channel.stream && e.channel.stream.id || e.channel.hosting && e.channel.hosting.id)
                        }, t.checkRoomPickerAutoOpen = function(e) {
                            if (t.state.shouldAutoOpenRoomPicker && e.firstPageLoaded && e.data && e.data.channel && e.data.channel.channelRooms) {
                                var n = t.isChannelLive(e.data),
                                    i = 0 !== e.data.channel.channelRooms.length,
                                    r = !n && i && !e.isEmbedded;
                                t.setState({
                                    shouldAutoOpenRoomPicker: !1,
                                    showRoomPicker: r
                                }), r && t.dismissGeneralOnboarding()
                            }
                        }, t.headerClick = function() {
                            t.dismissGeneralOnboarding(), t.setState(function(e) {
                                return {
                                    shouldAutoOpenRoomPicker: !1,
                                    showRoomPicker: !e.showRoomPicker
                                }
                            })
                        }, t.handleRoomSelect = function(e, n) {
                            t.setState({
                                activeRoomID: e,
                                activeRoomName: n,
                                isActiveRoomDeleted: !1,
                                showRoomPicker: !1
                            })
                        }, t.onActiveRoomDelete = function() {
                            t.state.activeRoomID !== D && t.setState({
                                isActiveRoomDeleted: !0
                            })
                        }, t.goToStreamChat = function() {
                            t.handleRoomSelect(D, D)
                        }, t.dismissGeneralOnboarding = function() {
                            t.setState({
                                hasSeenGeneralOnboarding: !0
                            }), T(v.ViewRooms)
                        }, t.closeRoomPicker = function() {
                            t.setState({
                                showRoomPicker: !1
                            })
                        }, t
                    }
                    return E.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.checkRoomPickerAutoOpen(this.props), this.state.showRoomPicker && this.dismissGeneralOnboarding()
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this;
                        if (e.channelLogin !== this.props.channelLogin && this.setState({
                                shouldAutoOpenRoomPicker: !0
                            }), this.checkRoomPickerAutoOpen(e), this.props.data && e.data && this.props.data.channel && e.data.channel && this.props.data.channel.self && e.data.channel.self && !e.data.channel.self.isChannelMember && this.props.data.channel.self.isChannelMember !== e.data.channel.self.isChannelMember && this.goToStreamChat(), e.data && e.data.channel && e.data.channel.self) {
                            var n = e.data.channel.self;
                            (!n.isChannelMember || n.banStatus && n.banStatus.isPermanent) && this.state.activeRoomID !== D && this.goToStreamChat()
                        }
                        if (this.props.sessionUser && this.props.routedRoomName && this.props.data && this.props.data.loading && !this.props.data.channel && !e.data.loading && e.data.channel && e.data.channel.channelRooms && e.data.channel.self.isChannelMember) {
                            var i = e.data.channel.channelRooms.find(function(e) {
                                return e.name === t.props.routedRoomName
                            });
                            i && this.setState({
                                activeRoomID: i.id,
                                activeRoomName: i.name
                            })
                        } else this.props.channelLogin !== e.channelLogin && this.state.activeRoomID !== D && this.goToStreamChat()
                    }, t.prototype.render = function() {
                        return k.createElement(A.Va, {
                            fullWidth: !0,
                            fullHeight: !0,
                            display: A.W.Flex,
                            flexDirection: A.Y.Column,
                            flexGrow: 1,
                            flexWrap: A.Z.NoWrap,
                            position: A.db.Relative
                        }, this.renderHeader(), this.renderRoomPicker(), this.renderHiddenState(), this.renderChat(), this.renderCurrentRoom())
                    }, t.prototype.renderChat = function() {
                        if (this.props.isHidden && !this.props.isPopout) return null;
                        var e = this.props.isBackground || this.state.activeRoomID !== D,
                            t = this.props.bitsConfig.orderedActions.length > 0;
                        return k.createElement(N.a, {
                            bitsConfig: t ? this.props.bitsConfig : void 0,
                            channelLogin: this.props.channelLogin,
                            clientID: C.a.authSettings.clientID,
                            isBackground: e,
                            isEmbedded: this.props.isEmbedded,
                            isPopout: this.props.isPopout,
                            closeRoomPicker: this.closeRoomPicker,
                            onHostingChange: this.props.onHostingChange,
                            hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                            passThroughCommands: this.props.passThroughCommands
                        })
                    }, t.prototype.renderCurrentRoom = function() {
                        return this.props.isHidden && !this.props.isPopout || !this.props.data.channel || this.state.activeRoomID === D ? null : k.createElement(M, {
                            bitsConfig: this.props.bitsConfig,
                            isDeleted: this.state.isActiveRoomDeleted,
                            isPopout: this.props.isPopout,
                            channelLogin: this.props.channelLogin,
                            channelID: this.props.data.channel.id,
                            roomID: this.state.activeRoomID,
                            closeRoomPicker: this.closeRoomPicker,
                            handleStreamChatClick: this.goToStreamChat,
                            onDelete: this.onActiveRoomDelete,
                            isHostMode: !!this.props.hostedChannelDisplayName,
                            passThroughCommands: this.props.passThroughCommands
                        })
                    }, t.prototype.renderHeader = function() {
                        var e = k.createElement(A.Va, {
                            display: A.W.Flex,
                            alignItems: A.f.Center
                        }, !this.state.showRoomPicker && Object(C.d)("Rooms", "RoomSelector"), k.createElement(A.Va, {
                            display: A.W.Flex,
                            alignItems: A.f.Center
                        }, this.renderTotalUnreadMentionCount(), !this.state.showRoomPicker && k.createElement(A.Va, {
                            padding: {
                                left: .5
                            },
                            display: A.W.Flex
                        }, k.createElement(A.mb, {
                            asset: A.nb.RoomList
                        })), this.state.showRoomPicker && k.createElement(A.A, {
                            ariaLabel: "RoomListOpen",
                            icon: A.nb.RoomListOpen,
                            "data-test-selector": "close-room-picker-button",
                            onClick: this.headerClick,
                            blurAfterClick: !0
                        })));
                        this.state.showRoomPicker || (e = k.createElement(A.Va, {
                            position: A.db.Relative
                        }, k.createElement(A.z, {
                            "data-a-target": "room-selector-button",
                            "data-test-selector": "open-room-picker-button",
                            onClick: this.headerClick,
                            type: A.F.Text
                        }, e), this.renderOnboardingBalloon())), this.props.isEmbedded && (e = k.createElement(A.Va, null));
                        var t = k.createElement(A.xb, {
                            className: "room-selector__header",
                            background: this.state.showRoomPicker ? A.r.Alt : A.r.Alt2,
                            borderLeft: !this.props.isEmbedded,
                            borderRight: !this.props.isEmbedded,
                            borderBottom: !0,
                            display: A.W.Flex,
                            fullWidth: !0,
                            justifyContent: A.Ua.Between,
                            alignItems: A.f.Center,
                            flexShrink: 0,
                            padding: {
                                left: 2,
                                right: 1
                            }
                        }, k.createElement("div", {
                            id: _.a
                        }, this.renderActiveRoomName()), e);
                        return this.state.showRoomPicker && (t = k.createElement(A.Va, {
                            className: "room-selector__open-header-wrapper"
                        }, t)), t
                    }, t.prototype.renderRoomPicker = function() {
                        if (this.state.showRoomPicker && this.props.data.channel) return k.createElement(S.a, {
                            onClickOut: this.closeRoomPicker
                        }, k.createElement(A.xb, {
                            attachLeft: !0,
                            attachRight: !0,
                            background: A.r.Alt,
                            borderBottom: !0,
                            borderLeft: !0,
                            borderRight: !0,
                            elevation: 2,
                            position: A.db.Absolute,
                            zIndex: A.ac.Above
                        }, k.createElement(L, {
                            channelID: this.props.data.channel.id,
                            handleRoomSelect: this.handleRoomSelect,
                            isChannelLive: this.isChannelLive(this.props.data),
                            renderChannelName: this.props.renderChannelName,
                            activeRoomID: this.state.activeRoomID,
                            "data-test-selector": "room-picker"
                        })))
                    }, t.prototype.renderActiveRoomName = function() {
                        return this.state.showRoomPicker ? k.createElement(A.V, {
                            color: A.O.Alt,
                            "data-test-selector": _.a
                        }, Object(C.d)("Rooms", "RoomSelectorOpened")) : this.state.activeRoomName === D ? this.props.renderChannelName && this.props.data && this.props.data.channel ? k.createElement(A.V, {
                            color: A.O.Alt,
                            "data-test-selector": _.a
                        }, Object(C.d)("<x:bold>{displayName}</x:bold>'s Chat", {
                            displayName: this.props.data.channel.displayName,
                            "x:bold": function(e) {
                                return k.createElement(A.V, {
                                    type: A.Nb.Span,
                                    bold: !0
                                }, e)
                            }
                        }, "RoomSelectorOpened")) : k.createElement(A.V, {
                            color: A.O.Alt,
                            "data-test-selector": _.a
                        }, Object(C.d)("Stream Chat", "RoomSelectorOpened")) : this.state.isActiveRoomDeleted ? k.createElement(A.V, {
                            color: A.O.Alt,
                            "data-test-selector": _.a
                        }, this.state.activeRoomName) : k.createElement(R, {
                            roomID: this.state.activeRoomID,
                            roomName: this.state.activeRoomName
                        })
                    }, t.prototype.renderTotalUnreadMentionCount = function() {
                        var e = this,
                            t = this.props.data;
                        if (t.error || !t.channel || !t.channel.self || !t.channel.self.isChannelMember || !t.channel.channelRooms) return null;
                        var n = t.channel.channelRooms.reduce(function(t, n) {
                            return n.self.isMuted || n.id === e.state.activeRoomID ? t : t + n.self.unreadMentionCount
                        }, 0);
                        return n > 0 ? k.createElement(A.Va, {
                            display: A.W.InlineBlock,
                            padding: {
                                left: .5
                            },
                            position: A.db.Relative
                        }, k.createElement(A.ab, {
                            label: n.toString(),
                            type: A.bb.Alert
                        })) : void 0
                    }, t.prototype.renderHiddenState = function() {
                        return !this.props.isHidden || this.props.isPopout ? null : k.createElement(A.xb, {
                            alignItems: A.f.Center,
                            background: A.r.Alt2,
                            borderLeft: !0,
                            "data-test-selector": "room-selector-hidden-state",
                            display: A.W.Flex,
                            flexDirection: A.Y.Column,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: A.Ua.Center,
                            color: A.O.Base,
                            position: A.db.Relative
                        }, k.createElement(A.Va, {
                            margin: {
                                bottom: 1
                            }
                        }, k.createElement(A.V, {
                            fontSize: A.Aa.Size5
                        }, Object(C.d)("Chat is hidden.", "RoomSelector"))), k.createElement(A.z, {
                            onClick: this.props.onChatUnhide,
                            "data-a-target": "show-chat-button"
                        }, Object(C.d)("Show Chat", "RoomSelector")))
                    }, t
                }(k.Component),
                U = n("Qdho");
            var B = Object(i.compose)(Object(r.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    sessionUser: Object(d.e)(e)
                }
            }, function(e) {
                return Object(a.bindActionCreators)({
                    onChatUnhide: function() {
                        return f.O()
                    }
                }, e)
            }), Object(o.a)(U, {
                props: function(e) {
                    return {
                        data: e.data,
                        bitsConfig: Object(h.a)(e.data && e.data.channel && e.data.channel.cheer && e.data.channel.cheer.emotes || []),
                        channelID: e.data && e.data.channel && e.data.channel.id
                    }
                },
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: U,
                    skip: !e.data.channel,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(l.i)("" + (e.data.channel && e.data.channel.id)),
                    types: [c.PubsubMessageType.ChatRoomCreated, c.PubsubMessageType.ChatRoomDeleted],
                    mutator: function(e, t) {
                        if (e.type === c.PubsubMessageType.ChatRoomDeleted && t.channel && t.channel.channelRooms) return t.channel.channelRooms = t.channel.channelRooms.filter(function(t) {
                            return t.id !== e.data.room.room_id
                        }), t;
                        if (e.type === c.PubsubMessageType.ChatRoomCreated && t.channel && t.channel.channelRooms) {
                            var n = function(e) {
                                return {
                                    id: e.data.room.room_id,
                                    minimumAllowedRole: e.data.room.minimum_allowed_role,
                                    name: e.data.room.name,
                                    topic: e.data.room.topic,
                                    isPreviewable: e.data.room.is_previewable,
                                    self: {
                                        isArchived: !1,
                                        isMuted: !1,
                                        isUnread: !1,
                                        unreadMentionCount: 0,
                                        __typename: "RoomView"
                                    },
                                    __typename: "Room"
                                }
                            }(e);
                            return t.channel.channelRooms.push(n), t
                        }
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: U,
                    skip: !e.sessionUser || !e.data.channel,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(l.j)("" + (e.sessionUser && e.sessionUser.id)),
                    types: [c.PubsubMessageType.UserMention, c.PubsubMessageType.ChatRoomsRoomViewUpdated],
                    mutator: function(e, t) {
                        switch (e.type) {
                            case c.PubsubMessageType.UserMention:
                                if (e = e, !t.channel || !t.channel.channelRooms || t.channel.id !== e.data.channel_id) break;
                                var n = e.data.room_id;
                                t.channel.channelRooms = t.channel.channelRooms.map(function(e) {
                                    return e.id === n && (e.self.unreadMentionCount += 1), e
                                });
                                break;
                            case c.PubsubMessageType.ChatRoomsRoomViewUpdated:
                                if (e = e, !t.channel || t.channel.id !== e.data.room_view.room.owner_id) break;
                                t.channel.self.isModerator = e.data.room_view.permissions.moderate
                        }
                        return t
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: U,
                    skip: !e.sessionUser || !e.data.channel,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(l.b)(),
                    types: [c.PubsubMessageType.BitsCampaignTotalUpdate, c.PubsubMessageType.BitsCampaignComplete],
                    mutator: function(e, t) {
                        if (t.channel && t.channel.cheer && t.channel.cheer.emotes)
                            if (e.type === c.PubsubMessageType.BitsCampaignTotalUpdate) {
                                var n = e;
                                t.channel.cheer.emotes = t.channel.cheer.emotes.map(function(e) {
                                    return e.campaign ? (e.campaign && e.campaign.id === n.campaign_id && (e.campaign.bitsUsed = n.used_amount), e) : e
                                })
                            } else if (e.type === c.PubsubMessageType.BitsCampaignComplete) {
                            var i = e;
                            t.channel.cheer.emotes = t.channel.cheer.emotes.filter(function(e) {
                                return !e.campaign || e.campaign.id !== i.campaign_id
                            })
                        }
                        return t
                    }
                }
            }), Object(s.a)(function(e) {
                return {
                    query: U,
                    skip: !e.sessionUser || !e.data.channel,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(l.a)("" + (e.data.channel && e.data.channel.id)),
                    types: [c.PubsubMessageType.BitsCampaignAddCheermoteEvent, c.PubsubMessageType.BitsCampaignRemoveCheermoteEvent],
                    mutator: function(e, t) {
                        if (t.channel && t.channel.cheer && t.channel.cheer.emotes)
                            if (e.type === c.PubsubMessageType.BitsCampaignAddCheermoteEvent) {
                                var n = m(e.action);
                                t.channel.cheer.emotes.unshift(n)
                            } else if (e.type === c.PubsubMessageType.BitsCampaignRemoveCheermoteEvent) {
                            var i = e;
                            t.channel.cheer.emotes = t.channel.cheer.emotes.filter(function(e) {
                                return !e.campaign || e.campaign.id !== i.campaign_id
                            })
                        }
                        return t
                    }
                }
            }), Object(g.b)(), Object(b.c)("RoomSelector", {
                autoReportInteractive: !0
            }))(w);
            n.d(t, "a", function() {
                return B
            })
        },
        VJHF: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "c", function() {
                return a
            }), n.d(t, "f", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "e", function() {
                return c
            }), n.d(t, "a", function() {
                return i
            });
            var i, r = "esports-campaign-ftue-displayed",
                a = "hgc2018",
                o = "owl2018",
                s = "hearthstone2018",
                c = "hearthstone2018-test";
            ! function(e) {
                e.Benefactor = "benefactor", e.Recipient = "recipient"
            }(i || (i = {}))
        },
        VN3V: function(e, t, n) {},
        VR5Q: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "WatchAdModal_Redeeem"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "RedeemTrueXAdInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "redeemTrueXAd"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "grantedBits"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 105
                }
            };
            n.loc.source = {
                body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\nredeemTrueXAd(input:$input) {\ngrantedBits\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        VS9Q: function(e, t, n) {
            "use strict";
            var i = n("i6WW"),
                r = n("6j5V"),
                a = n("XmgI"),
                o = n("gTu3"),
                s = n("RcPG"),
                c = n("a1OF"),
                l = {
                    AUTOMOD: "AutoMod",
                    EMOTE: "Emote",
                    MENTION: "User",
                    CHEERMOTE: "CheermoteToken"
                };
            n.d(t, "a", function() {
                return d
            }), n.d(t, "f", function() {
                return u
            }), n.d(t, "g", function() {
                return m
            }), n.d(t, "e", function() {
                return p
            }), n.d(t, "d", function() {
                return f
            }), n.d(t, "c", function() {
                return g
            }), n.d(t, "b", function() {
                return b
            });
            var d = "/me ";

            function u(e, t, n) {
                var i = e.content.text.startsWith(d);
                return h(e.content.fragments, i, n, t, e.sender.login)
            }

            function m(e, t) {
                return h(e.content.fragments, !1, t)
            }

            function p(e) {
                return e.reduce(function(e, t) {
                    var n = t.content,
                        i = t.text;
                    return n && n.__typename === l.AUTOMOD ? e.concat({
                        type: s.a.ModeratedText,
                        content: i
                    }) : e.concat(Object(r.a)(i))
                }, [])
            }

            function h(e, t, n, u, m) {
                var p = [];
                return e.forEach(function(e, h) {
                    var f = e.content;
                    if (f && f.__typename === l.EMOTE) {
                        var g = f;
                        p.push({
                            type: s.a.Emote,
                            content: {
                                alt: e.text,
                                images: {
                                    themed: !1,
                                    sources: {
                                        "1x": Object(c.d)(g.emoteID, 1),
                                        "2x": Object(c.d)(g.emoteID, 2),
                                        "4x": Object(c.d)(g.emoteID, 4)
                                    }
                                }
                            }
                        })
                    } else if (f && f.__typename === l.CHEERMOTE) {
                        if (!u) return;
                        var b = f,
                            v = b.prefix,
                            E = b.bitsAmount,
                            k = b.tier,
                            C = u.indexedActions[v],
                            S = C && C.indexedTiers.get(k);
                        S ? p.push({
                            type: s.a.Emote,
                            content: {
                                alt: v,
                                images: Object(a.c)(S),
                                cheerAmount: E,
                                cheerColor: S.color
                            }
                        }) : p.push(Object(r.a)(e.text))
                    } else if (f && f.__typename === l.MENTION) {
                        var y = f,
                            N = o.a.Default;
                        n && y.login === n ? N = o.a.Recipient : n && m && m === n && (N = o.a.Sender), p.push({
                            type: s.a.Mention,
                            content: {
                                recipient: e.text.slice(1),
                                currentUserMentionRelation: N
                            }
                        })
                    } else {
                        var _ = Object(i.a)(e.text, {
                            blockLinks: !1,
                            parseClips: !0,
                            parseVods: !0
                        });
                        if (_) p.push(_);
                        else {
                            var O = e.text;
                            t && 0 === h && O.startsWith(d) && (O = O.substr(3)), p.push(Object(r.a)(O))
                        }
                    }
                }), p
            }

            function f(e) {
                var t = e.data,
                    n = t.message,
                    i = t.cursor,
                    r = g(n.content.fragments),
                    a = b(n.sender.badges);
                return {
                    cursor: "" + i,
                    node: {
                        id: n.id,
                        deletedAt: null,
                        sentAt: n.sent_at,
                        content: {
                            text: n.content.text,
                            fragments: r,
                            __typename: "RoomMessageContent"
                        },
                        sender: {
                            id: n.sender.user_id,
                            login: n.sender.login,
                            chatColor: n.sender.chat_color,
                            displayName: n.sender.display_name,
                            displayBadges: a,
                            __typename: "User"
                        },
                        __typename: "RoomMessage"
                    },
                    __typename: "RoomMessageEdge"
                }
            }

            function g(e) {
                return e.map(function(e) {
                    var t = {
                            text: e.text,
                            content: null,
                            __typename: "RoomMessageFragment"
                        },
                        n = e.cheermote,
                        i = e.emoticon,
                        r = e.mention,
                        a = e.text;
                    return n ? t.content = {
                        bitsAmount: n.bits_amount,
                        prefix: n.prefix,
                        tier: n.tier,
                        __typename: "CheermoteToken"
                    } : i ? t.content = {
                        emoteID: i.id,
                        setID: i.set_id,
                        token: a,
                        __typename: "Emote"
                    } : r && (t.content = {
                        id: r.user_id,
                        login: r.login,
                        displayName: r.display_name,
                        __typename: "User"
                    }), t
                })
            }

            function b(e) {
                return e.map(function(e) {
                    return {
                        setID: e.id,
                        version: e.version,
                        __typename: "Badge"
                    }
                })
            }
        },
        VSaV: function(e, t) {},
        "Vl9+": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "thread"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "WhisperThread"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "messages"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "first"
                                },
                                value: {
                                    kind: "IntValue",
                                    value: "20"
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "nonce"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "content"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "content"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "emotes"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "emoteID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "setID"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "from"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "to"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "deletedAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "editedAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "sentAt"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "from"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unreadMessagesCount"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "userLastMessageRead"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "sentAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 240
                }
            };
            n.loc.source = {
                body: "fragment thread on WhisperThread {\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\nnonce\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\ndeletedAt\neditedAt\nsentAt\nfrom {\nid\n}\n}\n}\n}\nunreadMessagesCount\nuserLastMessageRead {\nsentAt\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        VrOd: function(e, t, n) {},
        "W/3w": function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            });
            var i = n("/7QA"),
                r = 30,
                a = [0, 10, 30, 60, 1440, 10080, 43200, 129600];

            function o(e) {
                switch (e) {
                    case 0:
                        return Object(i.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                    case 10:
                        return Object(i.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                    case 30:
                        return Object(i.d)("30 minutes", "FollowersOnlyLabel");
                    case 60:
                        return Object(i.d)("1 hour", "FollowersOnlyLabel");
                    case 1440:
                        return Object(i.d)("1 day", "FollowersOnlyLabel");
                    case 10080:
                        return Object(i.d)("1 week", "FollowersOnlyLabel");
                    case 43200:
                        return Object(i.d)("1 month", "FollowersOnlyLabel");
                    case 129600:
                        return Object(i.d)("3 months", "FollowersOnlyLabel");
                    default:
                        return i.j.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
                }
            }

            function s(e) {
                switch (e) {
                    case 0:
                        return Object(i.d)("0 min", "FollowersOnlyShorthand");
                    case 10:
                        return Object(i.d)("10 min", "FollowersOnlyShorthand");
                    case 30:
                        return Object(i.d)("30 min", "FollowersOnlyShorthand");
                    case 60:
                        return Object(i.d)("1 hr", "FollowersOnlyShorthand");
                    case 1440:
                        return Object(i.d)("1 day", "FollowersOnlyShorthand");
                    case 10080:
                        return Object(i.d)("1 wk", "FollowersOnlyShorthand");
                    case 43200:
                        return Object(i.d)("1 mo", "FollowersOnlyShorthand");
                    case 129600:
                        return Object(i.d)("3 mo", "FollowersOnlyShorthand");
                    default:
                        return Object(i.d)("custom", "FollowersOnlyShorthand")
                }
            }
        },
        W8Fi: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.some(function(e) {
                    return !!e.self && !!e.self.promotion
                })
            }

            function r(e) {
                return e.some(function(e) {
                    return !!e.giftPromotion
                })
            }

            function a(e) {
                return e.some(function(e) {
                    return !!e.self && !!e.self.paidUpgradePromotion
                })
            }

            function o(e, t) {
                var n;
                return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.newPrice : e.price
            }

            function s(e, t) {
                var n;
                return t ? n = e.giftPromotion : e.self && (n = e.self.promotion), n ? n.discountValue : 0
            }

            function c(e) {
                return e.self && e.self.paidUpgradePromotion ? e.self.paidUpgradePromotion.newPrice : e.price
            }

            function l(e) {
                return e.find(function(e) {
                    return !!e.self && !!e.self.paidUpgradePromotion
                }) || null
            }

            function d(e, t) {
                return !!e && !!t && a(e) && !t.paidUpgrade && !!t.gift && t.gift.isGift
            }
            n.d(t, "g", function() {
                return i
            }), n.d(t, "e", function() {
                return r
            }), n.d(t, "f", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "d", function() {
                return s
            }), n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "h", function() {
                return d
            })
        },
        WQCf: function(e, t, n) {
            "use strict";
            n.d(t, "d", function() {
                return c
            }), n.d(t, "c", function() {
                return l
            }), n.d(t, "a", function() {
                return d
            }), n.d(t, "b", function() {
                return i
            }), n.d(t, "f", function() {
                return r
            }), n.d(t, "e", function() {
                return s
            });
            var i, r, a, o, s, c = {
                    BitsLeaderboardEvents: "leaderboard-events-v1",
                    BitsCampaignEvents: "bits-campaigns-v1",
                    CampaignGlobalEvents: "campaign-events",
                    CampaignUserEvents: "user-campaign-events",
                    ChannelBitsEvents: "channel-bits-events-v1",
                    ChannelBitsPinEvents: "channel-bit-events-public",
                    ChannelEventUpdates: "channel-event-updates",
                    ChannelSquadUpdates: "channel-squad-updates",
                    ChannelSubscribeEvents: "channel-subscribe-events-v1",
                    CheerbombEventsTopic: "channel-cheer-events-public-v1",
                    BroadcastSettingsUpdate: "broadcast-settings-update",
                    ChatRoom: "chatrooms-room-v1",
                    ChatRoomsChannel: "chatrooms-channel-v1",
                    ChatRoomsUser: "chatrooms-user-v1",
                    Friendship: "friendship",
                    ImageUpload: "user-image-update",
                    ModerationActionsByUserAndChannel: "chat_moderator_actions",
                    MysteryGift: "channel-sub-gifts-v1",
                    OnsiteNotifications: "onsite-notifications",
                    PayoutOnboardingEvents: "payout-onboarding-events",
                    Presence: "presence",
                    Raid: "raid",
                    SquadUpdates: "squad-updates",
                    StreamChange: "stream-change-v1",
                    StreamChatRoom: "stream-chat-room-v1",
                    SubscribersCSV: "subscribers-csv-v1",
                    UploadService: "upload",
                    UserBitsUpdates: "user-bits-updates-v1",
                    UserCommerceEvents: "user-commerce-events",
                    UserCrateEvents: "user-crate-events-v1",
                    UserSubscribeEvents: "user-subscribe-events-v1",
                    VideoPlayback: "video-playback",
                    VideoPlaybackById: "video-playback-by-id",
                    VideoThumbnailProcessing: "video-thumbnail-processing",
                    Whispers: "whispers"
                },
                l = {
                    BitsChannelSettingsEvent: "channel_settings_update",
                    BitsCampaignAddCheermoteEvent: "sponsored-cheermote-add",
                    BitsCampaignRemoveCheermoteEvent: "sponsored-cheermote-remove",
                    BitsCampaignTotalUpdate: "sponsored-cheermote-update-used",
                    BitsCampaignComplete: "sponsored-cheermote-campaign-complete",
                    BitsPinEvent: "bits-pin-event",
                    BitsLeaderboardEvent: "bits-leaderboard-event",
                    ChannelStreamDown: "stream-down",
                    ChannelStreamUp: "stream-up",
                    BroadcastSettingsUpdate: "broadcast_settings_update",
                    ChatNotification: "chat-notification",
                    ChatRoomCreated: "created_room",
                    ChatRoomDeleted: "deleted_room",
                    ChatRoomUpdated: "updated_room",
                    ChatRoomsUserModAction: "user_moderation_action",
                    ChatRoomMessageCreated: "created_room_message",
                    ChatRoomMessageEdited: "edited_room_message",
                    ChatRoomMessageDeleted: "deleted_room_message",
                    ChatRoomsRoomViewUpdated: "updated_room_view",
                    CheerbombEvent: "cheerbomb",
                    Commercial: "commercial",
                    ImageUploadSuccess: "imageuploadsuccess",
                    LiveEvent: "live-event",
                    ModerationAction: "moderation_action",
                    MysteryGiftPurchase: "mystery-gift-purchase",
                    OnsiteNotificationCreate: "create-notification",
                    OnsiteNotificationDelete: "delete-notification",
                    OnsiteNotificationsRead: "read-notifications",
                    OnsiteNotificationSummaryUpdate: "update-summary",
                    OnsiteNotificationUpdate: "update-notification",
                    PayoutOnboardingEvent: "payout-onboarding-event",
                    Presence: "presence",
                    PresenceSettings: "settings",
                    PurgeMessageRequest: "purge_messages_request",
                    RaidCancel: "raid_cancel",
                    RaidUpdate: "raid_update",
                    RaidCancelV2: "raid_cancel_v2",
                    RaidUpdateV2: "raid_update_v2",
                    RaidGoV2: "raid_go_v2",
                    Squad: "squad",
                    StreamChatRoomChatRichEmbed: "chat_rich_embed",
                    StreamChatRoomHostTargetChange: "host_target_change",
                    StreamChatRoomExtensionMessage: "extension_message",
                    StreamDown: "stream_down",
                    StreamUp: "stream_up",
                    SubscribersCSVComplete: "subscribers_csv_complete_v1",
                    SubscribersCSVInProgress: "subscribers_csv_in_progress_v1",
                    UpdatedChannelChatProperty: "updated_channel_chat_property",
                    UploadService: "upload",
                    UserBitsBalanceUpdate: "balance_update",
                    UserBitsBadgeUpdate: "badge_update",
                    UserCampaignProgressEvent: "progress",
                    UserCampaignRewardEvent: "reward",
                    UserCrateEvent: "crate-event",
                    UserGiftEvent: "gift-event",
                    UserMention: "user_mention",
                    VideoThumbnailProcessingComplete: "processing_complete",
                    VideoThumbnailProcessingError: "processing_error",
                    ViewCount: "viewcount",
                    Vodcast: "watchparty-vod",
                    WhisperAllThreadsUpdate: "threads",
                    WhisperDeleted: "whisper_deleted",
                    WhisperEdited: "whisper_edited",
                    WhisperReceived: "whisper_received",
                    WhisperSent: "whisper_sent",
                    WhisperThreadUpdate: "thread"
                },
                d = {
                    Accepted: "accepted",
                    Requested: "requested",
                    Removed: "removed",
                    SelfAccepted: "self_accepted",
                    SelfRemoved: "self_removed",
                    SelfRequested: "self_requested"
                };
            ! function(e) {
                e.AddBlockedTerm = "add_blocked_term", e.AddPermittedTerm = "add_permitted_term", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.AutoModCheerRejected = "automod_cheer_rejected", e.Ban = "ban", e.Clear = "clear", e.DeleteBlockedTerm = "delete_blocked_term", e.DeletePermittedTerm = "delete_permitted_term", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.ModifiedAutoModProperties = "modified_automod_properties", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Raid = "raid", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Unraid = "unraid", e.Untimeout = "untimeout"
            }(i || (i = {})),
            function(e) {
                e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied", e.AutoModCheerDenied = "automod_cheer_message_denied", e.AutoModCheerTimeout = "automod_cheer_message_timeout"
            }(r || (r = {})),
            function(e) {
                e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
            }(a || (a = {})),
            function(e) {
                e.Private = "private", e.Public = "public"
            }(o || (o = {})),
            function(e) {
                e.Pending = "PENDING", e.Live = "LIVE", e.Ended = "ENDED"
            }(s || (s = {}))
        },
        WytW: function(e, t, n) {
            "use strict";
            n.d(t, "g", function() {
                return a
            }), n.d(t, "h", function() {
                return o
            }), n.d(t, "j", function() {
                return s
            }), n.d(t, "b", function() {
                return c
            }), n.d(t, "c", function() {
                return l
            }), n.d(t, "d", function() {
                return d
            }), n.d(t, "e", function() {
                return u
            }), n.d(t, "f", function() {
                return m
            }), n.d(t, "a", function() {
                return p
            }), n.d(t, "o", function() {
                return f
            }), n.d(t, "m", function() {
                return b
            }), n.d(t, "p", function() {
                return E
            }), n.d(t, "k", function() {
                return C
            }), n.d(t, "n", function() {
                return y
            }), n.d(t, "l", function() {
                return O
            }), n.d(t, "i", function() {
                return T
            });
            var i = n("/7QA"),
                r = i.o.logger.withCategory("chat-commands");

            function a(e) {
                return "/mod " + e
            }

            function o(e) {
                return "/unmod " + e
            }

            function s(e) {
                return /^[\/]/.test(e)
            }

            function c() {
                return "/clear"
            }

            function l() {
                return "/followersoff"
            }

            function d() {
                return "/slowoff"
            }

            function u(e) {
                return "/followers " + e
            }

            function m() {
                return "/slow"
            }

            function p(e) {
                return "/color " + e
            }
            var h = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i;

            function f(e) {
                var t = e.trim().match(h);
                return t ? {
                    recipientLogin: t[1] || null,
                    body: t[2] || null
                } : null
            }
            var g = /^\/host(?:$|\s+)(\S+)/i;

            function b(e) {
                var t = e.trim().match(g);
                return t ? {
                    recipientLogin: t[1]
                } : null
            }
            var v = /^(\S+)?\s+(.+)?$/;

            function E(e) {
                var t = e.trim().match(v);
                return t ? {
                    recipientLogin: t[1] || null,
                    body: t[2] || null
                } : {
                    recipientLogin: null,
                    body: null
                }
            }
            var k = /^\/ban\s+@?(\S+)(?:\s+(\d+)?)?$/;

            function C(e) {
                var t = e.trim().match(k);
                return t ? {
                    banTarget: t[1],
                    duration: t[2] && Number(t[2]) || null
                } : null
            }
            var S = /^\/slow(?:\s+(\d+)?)?$/;

            function y(e) {
                var t = e.trim().match(S);
                return t ? {
                    duration: t[1] && Number(t[1]) || null
                } : null
            }
            var N = ["blue", "blueviolet", "cadetblue", "chocolate", "coral", "dodgerblue", "firebrick", "goldenrod", "green", "hotpink", "orangered", "red", "seagreen", "springgreen", "yellowgreen"],
                _ = /^\/color\s+(#[A-Fa-f0-9]{6}|[A-Za-z]+)$/;

            function O(e) {
                var t = e.trim().match(_);
                if (!t) return null;
                var n = t[1];
                return n.startsWith("#") || -1 !== N.indexOf(n.toLowerCase()) ? {
                    color: n
                } : null
            }
            var I = /^[/.]([a-z0-9]+)(.+)?$/i;

            function T(e, t) {
                var n = e.match(I);
                if (!n) return {
                    handled: !1
                };
                var a = n[1],
                    o = i.o.store.getState().chat.commandHandlers[a.toLowerCase()];
                if (!o) return {
                    command: a,
                    handled: !1
                };
                if (1 !== o.length) return r.error(new Error("Failed to run comand " + a), "Multiple command handlers defined for '" + a + "'", {
                    command: a
                }), {
                    command: a,
                    handled: !1
                };
                var s = (n[2] || "").trim(),
                    c = {
                        channelLogin: t
                    },
                    l = o[0];
                try {
                    return {
                        command: a,
                        handled: !0,
                        result: l(s, c)
                    }
                } catch (e) {
                    return r.warn("Exception thrown from chat command handler", {
                        command: a,
                        err: e
                    }), {
                        handled: !1
                    }
                }
            }
        },
        XIZb: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("4rCz"),
                o = n("1rIY");

            function s(e) {
                var t = Object(o.a)(e, {
                        setServiceAPI: function() {
                            a.k.warn("The " + e + " chat service attempted to register its API without a provider.")
                        }
                    }),
                    n = t.InnerProvider,
                    s = t.withContext;
                return {
                    InnerProvider: n,
                    withChatServiceProvider: function(e) {
                        return function(t) {
                            function a() {
                                var e = null !== t && t.apply(this, arguments) || this;
                                return e.state = {}, e.setServiceAPI = function(t) {
                                    e.setState({
                                        serviceAPI: t
                                    })
                                }, e
                            }
                            return i.__extends(a, t), a.prototype.render = function() {
                                return r.createElement(n, {
                                    value: {
                                        serviceAPI: this.state.serviceAPI,
                                        setServiceAPI: this.setServiceAPI
                                    }
                                }, r.createElement(e, i.__assign({}, this.props)))
                            }, a
                        }(r.Component)
                    },
                    withContext: s
                }
            }
        },
        XmgI: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "d", function() {
                return c
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "c", function() {
                return d
            });
            var i = n("5zXJ"),
                r = n("RcPG"),
                a = {
                    indexedActions: {},
                    orderedActions: []
                },
                o = /^((?:[A-Za-z0-9]+)(?:[A-Za-z]))([\d]+)$/;

            function s(e, t) {
                var n = [],
                    i = e.split(/\s+/);
                return i.forEach(function(e, a) {
                    var o = c(e, t);
                    if (o) n.push(o);
                    else {
                        var s = n.length && n[n.length - 1],
                            l = "";
                        if (a < i.length - 1 && (l = " "), s && s.type === r.a.Text) s.content += e + l;
                        else {
                            var d = "";
                            a && (d = " "), n.push({
                                type: r.a.Text,
                                content: d + e + l
                            })
                        }
                    }
                }), n
            }

            function c(e, t) {
                var n = e.match(o);
                if (!n) return null;
                var i = n[1].toLowerCase(),
                    a = Number(n[2]),
                    s = t.indexedActions[i];
                if (s) {
                    var c = s.orderedTiers.find(function(e) {
                        return e.bits <= a
                    });
                    if (!c && a && (c = s.orderedTiers[0]), c) return {
                        type: r.a.Emote,
                        content: {
                            images: d(c),
                            alt: s.prefix,
                            cheerAmount: a,
                            cheerColor: c.color
                        }
                    }
                }
                return null
            }

            function l(e, t) {
                var n = function(e) {
                        var t = new Map;
                        return e.orderedActions.forEach(function(e) {
                            e.campaign && t.set(e.prefix, e.campaign)
                        }), t
                    }(t),
                    r = new Map;
                e.forEach(function(e, t) {
                    if (e.alt && n.has(e.alt))
                        if (r.has(e.alt)) {
                            (i = r.get(e.alt)) && (i.total += e.cheerAmount || 0, i.lastAppearance = t)
                        } else {
                            var i = {
                                total: e.cheerAmount || 0,
                                lastAppearance: t,
                                campaign: n.get(e.alt)
                            };
                            r.set(e.alt, i)
                        }
                });
                var a = 1;
                return r.forEach(function(n) {
                    var r = 0;
                    n.campaign.thresholds.forEach(function(e) {
                        n.total >= e.minimumBits && (r = e.matchedPercent)
                    });
                    var o = Math.trunc(n.total * r);
                    if (o > 0) {
                        var s = c(i.t + o, t);
                        s && e.splice(n.lastAppearance + a++, 0, s.content)
                    }
                }), e
            }

            function d(e, t, n) {
                var i, r;
                void 0 === n && (n = !0);
                var a = n ? "animated" : "static";
                return t ? {
                    themed: !0,
                    dark: (i = {}, i[t + "x"] = e.indexedImages.DARK[a].get(t), i),
                    light: (r = {}, r[t + "x"] = e.indexedImages.LIGHT[a].get(t), r)
                } : {
                    themed: !0,
                    dark: {
                        "1x": e.indexedImages.DARK[a].get(1),
                        "1.5x": e.indexedImages.DARK[a].get(1.5),
                        "2x": e.indexedImages.DARK[a].get(2),
                        "3x": e.indexedImages.DARK[a].get(3),
                        "4x": e.indexedImages.DARK[a].get(4)
                    },
                    light: {
                        "1x": e.indexedImages.LIGHT[a].get(1),
                        "1.5x": e.indexedImages.LIGHT[a].get(1.5),
                        "2x": e.indexedImages.LIGHT[a].get(2),
                        "3x": e.indexedImages.LIGHT[a].get(3),
                        "4x": e.indexedImages.LIGHT[a].get(4)
                    }
                }
            }
        },
        Y3y8: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return l
            });
            var i = n("yR8l"),
                r = n("eDVu"),
                a = n("0Log"),
                o = n("/aPz"),
                s = n("/gva");

            function c() {
                return Object(i.a)(s, {
                    name: "currentUserBannedStatusData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })
            }

            function l() {
                return Object(r.a)(function(e) {
                    return {
                        variables: {
                            channelLogin: e.channelLogin
                        },
                        query: s,
                        skip: !e.sessionUser || !e.channelID,
                        topic: e.sessionUser && e.channelID ? Object(o.j)("" + (e.sessionUser && e.sessionUser.id)) : "",
                        type: a.PubsubMessageType.ChatRoomsUserModAction,
                        mutator: function(t, n) {
                            return e.sessionUser && e.channelID && n.channel && n.channel.self && t.data.target_id === e.sessionUser.id && t.data.channel_id === e.channelID && ("ban" === t.data.action ? n.channel.self.banStatus = {
                                isPermanent: !0,
                                __typename: "ChatRoomBanStatus"
                            } : "unban" === t.data.action && (n.channel.self.banStatus = {
                                isPermanent: !1,
                                __typename: "ChatRoomBanStatus"
                            })), n
                        }
                    }
                })
            }
        },
        Y5lD: function(e, t, n) {
            "use strict";

            function i(e) {
                return Math.floor((Date.now() - new Date(e).getTime()) / 1e3)
            }
            n.d(t, "a", function() {
                return i
            })
        },
        YXxK: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                Embed: "embed",
                Web: "web"
            }
        },
        Yr1V: function(e, t, n) {},
        ZEQw: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return i
            }), n.d(t, "d", function() {
                return r
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "b", function() {
                return o
            }), n.d(t, "a", function() {
                return s
            });
            var i = "subscribe_to_channel",
                r = "turbo",
                a = "visit_url",
                o = "none",
                s = "broadcaster"
        },
        ZVTe: function(e, t, n) {
            "use strict";
            var i = n("TSYQ"),
                r = n("q1tI"),
                a = n("EE1E"),
                o = (n("2e6W"), function(e) {
                    var t, n = e.userData.color;
                    e.highContrastUsernameColor && n && (n = "#" + Object(a.a)(n, e.theme));
                    var o = [r.createElement("span", {
                        key: "username-display",
                        className: "chat-author__display-name",
                        "data-a-target": "chat-message-username",
                        "data-a-user": e.userData.userLogin,
                        "data-test-selector": "message-username",
                        style: {
                            color: n
                        }
                    }, e.userData.userDisplayName)];
                    if (e.userData.isIntl) {
                        var s = i(((t = {})["chat-author__intl-login"] = !e.highlighted, t["chat-author__intl-login--highlighted"] = e.highlighted, t));
                        o.push(r.createElement("span", {
                            key: "username-login",
                            style: {
                                color: n
                            },
                            className: s,
                            "data-test-selector": "message-username-canonical"
                        }, " (" + e.userData.userLogin + ")"))
                    }
                    return r.createElement("span", {
                        key: e.userData.userID + "-authorlabel"
                    }, o)
                });
            n.d(t, !1, function() {
                return "message-username"
            }), n.d(t, !1, function() {
                return "message-username-canonical"
            }), n.d(t, !1, function() {
                return "chat-author__display-name"
            }), n.d(t, !1, function() {
                return "chat-author__intl-login"
            }), n.d(t, !1, function() {
                return "chat-author__intl-login--highlighted"
            }), n.d(t, "a", function() {
                return o
            })
        },
        ZtEv: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "c", function() {
                return r
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i, r, a, o, s = n("0Log");
            n.d(t, "d", function() {
                    return s.ModerationActions
                }),
                function(e) {
                    e[e.Message = 0] = "Message", e[e.ExtensionMessage = 1] = "ExtensionMessage", e[e.Moderation = 2] = "Moderation", e[e.ModerationAction = 3] = "ModerationAction", e[e.TargetedModerationAction = 4] = "TargetedModerationAction", e[e.AutoMod = 5] = "AutoMod", e[e.SubscriberOnlyMode = 6] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 7] = "FollowerOnlyMode", e[e.SlowMode = 8] = "SlowMode", e[e.EmoteOnlyMode = 9] = "EmoteOnlyMode", e[e.R9KMode = 10] = "R9KMode", e[e.Connected = 11] = "Connected", e[e.Disconnected = 12] = "Disconnected", e[e.Reconnect = 13] = "Reconnect", e[e.Hosting = 14] = "Hosting", e[e.Unhost = 15] = "Unhost", e[e.Hosted = 16] = "Hosted", e[e.Subscription = 17] = "Subscription", e[e.Resubscription = 18] = "Resubscription", e[e.GiftPaidUpgrade = 19] = "GiftPaidUpgrade", e[e.SubGift = 20] = "SubGift", e[e.Clear = 21] = "Clear", e[e.RoomMods = 22] = "RoomMods", e[e.RoomState = 23] = "RoomState", e[e.Raid = 24] = "Raid", e[e.Unraid = 25] = "Unraid", e[e.Ritual = 26] = "Ritual", e[e.Notice = 27] = "Notice", e[e.Info = 28] = "Info", e[e.BadgesUpdated = 29] = "BadgesUpdated", e[e.Purchase = 30] = "Purchase", e[e.BitsCharity = 31] = "BitsCharity", e[e.CrateGift = 32] = "CrateGift", e[e.RewardGift = 33] = "RewardGift", e[e.SubMysteryGift = 34] = "SubMysteryGift"
                }(i || (i = {})),
                function(e) {
                    e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention"
                }(r || (r = {})),
                function(e) {
                    e[e.Ban = 0] = "Ban", e[e.Timeout = 1] = "Timeout"
                }(a || (a = {})),
                function(e) {
                    e[e.MessageRejectedPrompt = 0] = "MessageRejectedPrompt", e[e.CheerMessageRejectedPrompt = 1] = "CheerMessageRejectedPrompt", e[e.MessageRejected = 2] = "MessageRejected", e[e.MessageAllowed = 3] = "MessageAllowed", e[e.MessageDenied = 4] = "MessageDenied", e[e.CheerMessageDenied = 5] = "CheerMessageDenied", e[e.CheerMessageTimeout = 6] = "CheerMessageTimeout"
                }(o || (o = {}))
        },
        ZuCe: function(e, t, n) {},
        a1OF: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return u
            }), n.d(t, "b", function() {
                return m
            }), n.d(t, "e", function() {
                return p
            }), n.d(t, "c", function() {
                return h
            }), n.d(t, "d", function() {
                return f
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("oe5X"),
                o = n("0FG4"),
                s = n("kRBY"),
                c = n("60o1"),
                l = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
                d = {};

            function u(e, t, n, r, a, o) {
                void 0 === a && (a = !1), void 0 === o && (o = !1);
                var s = Object(c.a)(t.displayName, t.username);
                return {
                    badges: t.badges || {},
                    bits: t.bits,
                    user: i.__assign({}, s, {
                        userLogin: t.username,
                        userID: t.userID,
                        userType: t.userType,
                        color: t.color || m(t.userID)
                    }),
                    messageParts: p(e, t.emotes || {}, t.bits, n, r, t.username),
                    deleted: a,
                    hidden: o,
                    timestamp: Date.now()
                }
            }

            function m(e, t) {
                return void 0 === t && (t = 15), "number" != typeof d[e] && (d[e] = Math.floor(Math.random() * t)), l[d[e]]
            }

            function p(e, t, n, i, c, l) {
                var d = Object(s.e)(r.o.store.getState()),
                    u = {
                        cheers: n ? i : void 0,
                        emotes: {
                            type: o.a.Position,
                            map: t
                        },
                        links: {
                            blockLinks: c,
                            parseClips: !0,
                            parseVods: !0
                        },
                        mentions: {
                            senderLogin: l,
                            sessionUser: d
                        }
                    };
                return Object(a.a)(e, u)
            }

            function h(e) {
                return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
            }

            function f(e, t) {
                return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
            }
        },
        a2UF: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return s
            });
            var i, r = n("mrSG"),
                a = n("yR8l"),
                o = n("1Rv/");

            function s(e) {
                var t = this;
                return Object(a.a)(o, {
                    props: function(n) {
                        return {
                            unbanUserMutation: function(i) {
                                return r.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return r.__generator(this, function(r) {
                                        switch (r.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                r.label = 1;
                                            case 1:
                                                return r.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: i
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return [2, r.sent().data];
                                            case 3:
                                                throw r.sent(), new Error("Unable to unban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Unban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }! function(e) {
                e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetNotBanned = "TARGET_NOT_BANNED"
            }(i || (i = {}))
        },
        a7aT: function(e, t, n) {},
        aF6k: function(e, t, n) {
            "use strict";

            function i(e) {
                var t = Math.random().toString(36).substring(2, 6);
                return e + "-" + Date.now() + "-" + t
            }
            n.d(t, "a", function() {
                return i
            })
        },
        b5C3: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("q1tI"),
                r = n("vHGB"),
                a = function(e) {
                    var t = e.badgesToRender,
                        n = e.badgeSets,
                        a = [];
                    ! function(e) {
                        return Array.isArray(e)
                    }(t) ? function(e) {
                        return !Array.isArray(e)
                    }(t) && (a = Object.keys(t).map(function(e) {
                        var a = t[e],
                            o = n.getBadge(e, a);
                        return null === o ? null : i.createElement(r.a, {
                            key: o.setID + "/" + o.version,
                            badge: o
                        })
                    })) : a = t.map(function(e) {
                        var t = n.getBadge(e.setID, e.version);
                        return null === t ? null : i.createElement(r.a, {
                            key: t.setID + "/" + t.version,
                            badge: t
                        })
                    });
                    var o = a.filter(function(e) {
                        return null !== e
                    });
                    return i.createElement("span", null, o)
                };
            a.displayName = "BadgeList"
        },
        bhOa: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = n("gcd7"),
                s = n("ygQa"),
                c = n("WytW"),
                l = n("Ue10"),
                d = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.updateChatColor = function(e) {
                            var n = Object(c.l)("/color " + e);
                            if (n && n.color) {
                                var i = n.color;
                                return {
                                    deferred: t.props.updateChatColorMutation(i).then(function() {
                                        return {
                                            notice: Object(a.d)("Your color has been changed.", "ColorCommandHandler")
                                        }
                                    }).catch(function() {
                                        return {
                                            notice: Object(a.d)("Unable to change your color.", "ColorCommandHandler")
                                        }
                                    })
                                }
                            }
                            return {
                                deferred: Promise.resolve({
                                    notice: Object(a.d)('Usage: "/color [color]" - Change your username color. Color must be in hex (#000000) or one of the following: Blue, BlueViolet, CadetBlue, Chocolate, Coral, DodgerBlue, Firebrick, GoldenRod, Green, HotPink, OrangeRed, Red, SeaGreen, SpringGreen, YellowGreen.', "ColorCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(l.Va, {
                            display: l.W.Hide
                        }, r.createElement(o.a, {
                            command: "color",
                            handler: this.updateChatColor
                        }))
                    }, t
                }(r.Component),
                u = Object(s.a)()(d);
            n.d(t, "a", function() {
                return u
            })
        },
        bq0i: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            });
            var i, r = n("mrSG"),
                a = n("q1tI"),
                o = n("f00E"),
                s = n("Ue10");
            ! function(e) {
                e.BalloonInsideClickDetector = "balloon-inside-click-detector", e.MouseEnterDetector = "toggle-balloon-wrapper__mouse-enter-detector"
            }(i || (i = {}));
            var c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showBalloon: !!t.props.openByDefault,
                        hasInteracted: !!t.props.openByDefault
                    }, t.toggleBalloonId = Object(o.a)(), t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                showBalloon: !e.showBalloon,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.handleGlobalClick = function(e) {
                        e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.hideBalloon()
                    }, t.handleInsideBalloonClick = function() {
                        t.hideBalloon()
                    }, t.handleMouseEnter = function() {
                        t.state.hasInteracted || t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return r.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = a.Children.toArray(this.props.children);
                    if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                    var t = e[0],
                        n = e[1];
                    if (n.type !== s.u) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                    var o = a.cloneElement(t, {
                            onClick: this.handleButtonClick
                        }),
                        c = null;
                    (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (c = a.cloneElement(n, {
                        show: this.state.showBalloon
                    }), this.props.hideBalloonOnInsideClick && (c = a.createElement("div", {
                        "data-test-selector": i.BalloonInsideClickDetector,
                        onClick: this.handleInsideBalloonClick
                    }, c)));
                    var l = o;
                    return this.props.tooltipProps && (l = a.createElement(s.Qb, r.__assign({}, this.props.tooltipProps), o)), a.createElement(s.Va, {
                        "data-toggle-balloon-id": this.toggleBalloonId,
                        display: this.props.display,
                        position: s.db.Relative
                    }, a.createElement("div", {
                        style: {
                            display: "inherit"
                        },
                        onMouseEnter: this.handleMouseEnter,
                        "data-test-selector": i.MouseEnterDetector
                    }, l), c)
                }, t.prototype.toggleBalloon = function(e) {
                    void 0 === e && (e = !this.state.showBalloon), this.setState({
                        showBalloon: e,
                        hasInteracted: !0
                    })
                }, t.prototype.hideBalloon = function() {
                    var e = this;
                    this.setState({
                        showBalloon: !1
                    }, function() {
                        e.props.onToggle && e.props.onToggle(!0)
                    })
                }, t
            }(a.Component)
        },
        br9A: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return l
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("I6K6"),
                s = n("RuiO"),
                c = {
                    BuyCustomMysteryGift: "buy_custom_mystery_gift",
                    BuyGiftSub: "buy_gift_sub",
                    BuyGiftToPaidUpgrade: "buy_gift_to_paid_upgrade",
                    BuyMysteryGift: "buy_mystery_gift",
                    BuyPaidUpgrade: "buy_paid_upgrade",
                    ChangeTier: "change_tier",
                    ClickCheckout: "click_checkout_button",
                    ClickMoreSubOptions: "more_options_click",
                    ClickGiftSubOptions: "gift_options_click",
                    ClickPrimeFAQ: "click_prime_faq",
                    ClickSignupForPrime: "click_signup_for_prime",
                    ClickBack: "back_top_level",
                    CloseSubMenu: "close_subscribe_menu",
                    GiftASub: "gift_a_sub",
                    OpenSubMenu: "open_subscribe_menu",
                    SubWithPrime: "samus_spend_credit"
                };

            function l(e) {
                return i.__awaiter(this, void 0, void 0, function() {
                    var t, n, c, l, d, u, m, p, h, f, g, b, v;
                    return i.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                t = r.n.getVideoPlayerTrackingData().vodID, n = !!t, c = {
                                    channelID: e.channelID,
                                    withVideo: !1
                                }, n && (c.withVideo = !0, c.videoID = t), l = null, i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]), [4, r.o.apollo.client.query({
                                    query: s,
                                    variables: c
                                })];
                            case 2:
                                return l = i.sent(), [3, 4];
                            case 3:
                                return d = i.sent(), r.j.error(d, "Failed to make query for channel info in FollowEvent reporting.", {
                                    channelID: e.channelID
                                }), [3, 4];
                            case 4:
                                return u = l && l.data && l.data.user || null, l && !u && r.j.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                    channelID: e.channelID
                                }), m = null, l && n && ((p = l && l.data && l.data.video) ? m = Object(o.a)(p.broadcastType) : r.j.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                    currentVideoID: t
                                })), h = u && u.self, f = h ? !!h.subscriptionBenefit : null, g = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, b = h ? h.canPrimeSubscribe : null, v = {
                                    action: e.action,
                                    can_subscribe: b,
                                    channel: e.channelLogin,
                                    channel_id: e.channelID,
                                    checkout_button_tier: e.checkoutButtonTier,
                                    has_sub_credit: e.hasSubCredit,
                                    host_channel: e.hostChannelLogin,
                                    host_channel_id: e.hostChannelID,
                                    is_menu_open: e.isMenuOpen,
                                    is_subscribed: f,
                                    is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                    mystery_gift_count: e.mysteryGiftCount || null,
                                    sub_location: e.sub_location,
                                    sub_recipient: e.giftRecipient,
                                    modal: e.modal,
                                    modal_level: e.modalLevel || "",
                                    show_prime_content: e.showPrimeContent,
                                    show_resub: u ? b && g : null,
                                    vod_id: t,
                                    vod_type: m,
                                    viewport_height: window.innerHeight,
                                    viewport_width: window.innerWidth
                                }, r.n.track(a.SpadeEventType.Subscription, v), [2]
                        }
                    })
                })
            }
        },
        byRF: function(e, t, n) {},
        "c+1r": function(e, t, n) {},
        cMjZ: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("o4DC");

            function r(e) {
                return e && Object(i.c)(e) || ""
            }
        },
        cpJf: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "d", function() {
                    return a
                }), n.d(t, "c", function() {
                    return o
                }), n.d(t, "b", function() {
                    return r
                }),
                function(e) {
                    e.Chat = "stream_chat", e.Feeds = "feeds", e.Room = "chatroom", e.Whisper = "whisper", e.VodChat = "vod-chat"
                }(i || (i = {}));
            var r, a = {
                    TriHard: {
                        count: 196568036
                    },
                    Kappa: {
                        count: 192158118
                    },
                    "4Head": {
                        count: 155758710
                    },
                    PogChamp: {
                        count: 151485090
                    },
                    cmonBruh: {
                        count: 146352878
                    },
                    BibleThump: {
                        count: 56472964
                    },
                    WutFace: {
                        count: 45069031
                    },
                    Kreygasm: {
                        count: 41387580
                    },
                    DansGame: {
                        count: 38097659
                    },
                    hi5F: {
                        count: 34986404
                    },
                    SMOrc: {
                        count: 34734484
                    },
                    KappaPride: {
                        count: 34262839
                    },
                    VoHiYo: {
                        count: 27886434
                    },
                    SwiftRage: {
                        count: 24561900
                    },
                    ResidentSleeper: {
                        count: 24438298
                    },
                    EleGiggle: {
                        count: 19891526
                    },
                    FailFish: {
                        count: 19118343
                    },
                    NotLikeThis: {
                        count: 18802905
                    },
                    Keepo: {
                        count: 18351415
                    },
                    BabyRage: {
                        count: 18220906
                    },
                    MingLee: {
                        count: 18026207
                    },
                    pbfSSH: {
                        count: 16911241
                    },
                    forsenE: {
                        count: 14960299
                    },
                    HeyGuys: {
                        count: 14851569
                    },
                    ANELE: {
                        count: 14648986
                    },
                    PJSalt: {
                        count: 14438861
                    }
                },
                o = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"];
            ! function(e) {
                e.Web = "WEB", e.IOS = "IOS", e.Android = "ANDROID"
            }(r || (r = {}))
        },
        cys1: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("gvGA"),
                o = n("5zf8"),
                s = n("4rCz"),
                c = n("j0ar"),
                l = function(e) {
                    var t, n = e.emote,
                        r = n.alt || "";
                    return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                        className: "chat-line__message--cheer-amount",
                        style: {
                            color: n.cheerColor
                        }
                    }, n.cheerAmount)), i.createElement(c.a, {
                        alt: r,
                        cheerText: t,
                        className: "chat-line__message--emote",
                        srcKey: "1x",
                        srcSet: n.images
                    })
                };
            l.displayName = "Emote";
            var d, u = function(e) {
                    var t = e.displayText,
                        n = e.url;
                    return i.createElement("a", {
                        className: "link-fragment",
                        href: n,
                        target: "_blank",
                        rel: "noreferrer noopener"
                    }, t)
                },
                m = n("TSYQ"),
                p = n("RcPG"),
                h = (n("VN3V"), function(e) {
                    var t, n = e.content,
                        r = e.highlightType,
                        a = m("text-fragment", ((t = {})["text-fragment--moderated-highlight"] = r === p.a.ModeratedText, t));
                    return i.createElement("span", {
                        className: a,
                        "data-a-target": "chat-message-text"
                    }, n)
                }),
                f = n("mrSG"),
                g = n("yR8l"),
                b = n("+GjP"),
                v = n("2xye"),
                E = n("Ue10"),
                k = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasImageLoadingError: !1
                        }, t.handleImageError = function() {
                            t.setState({
                                hasImageLoadingError: !0
                            })
                        }, t
                    }
                    return f.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                        this.setState({
                            hasImageLoadingError: !1
                        })
                    }, t.prototype.render = function() {
                        var e = r.a.defaultStreamPreviewURL;
                        return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), i.createElement(E.I, {
                            aspect: E.p.Aspect16x9,
                            alt: this.props.altText,
                            src: e,
                            onError: this.handleImageError
                        })
                    }, t
                }(i.Component),
                C = (n("Epr8"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
                S = {
                    ERROR: "chat-card-error",
                    TITLE: "chat-card-title",
                    DESCRIPTION: "chat-card-description"
                },
                y = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderErrorCard = function() {
                            var e = i.createElement("img", {
                                "data-test-selector": S.ERROR,
                                src: C,
                                className: "chat-card__error-img"
                            });
                            return t.renderCardContent(e, t.props.error)
                        }, t.renderCardContent = function(e, t) {
                            var n, r;
                            return t ? (n = i.createElement(E.V, {
                                type: E.Nb.Span,
                                fontSize: E.Aa.Size5,
                                "data-test-selector": S.TITLE,
                                title: t.title
                            }, t.title), r = i.createElement(E.V, {
                                type: E.Nb.Span,
                                fontSize: E.Aa.Size6,
                                color: E.O.Alt2,
                                "data-test-selector": S.DESCRIPTION
                            }, t.description)) : (e = i.createElement(E.cb, {
                                overlay: !0
                            }), n = i.createElement(E.cb, {
                                width: 180
                            }), r = i.createElement(E.cb, {
                                width: 120
                            })), i.createElement(E.xb, {
                                background: E.r.Base,
                                display: E.W.Flex,
                                flexWrap: E.Z.NoWrap,
                                padding: .5
                            }, i.createElement(E.xb, {
                                className: "chat-card__preview-img",
                                background: E.r.Alt2,
                                display: E.W.Flex,
                                alignItems: E.f.Center,
                                justifyContent: E.Ua.Center,
                                flexShrink: 0
                            }, e), i.createElement(E.Va, {
                                display: E.W.Flex,
                                alignItems: E.f.Center,
                                overflow: E.Ya.Hidden
                            }, i.createElement(E.Va, {
                                padding: {
                                    left: 1
                                },
                                fullWidth: !0
                            }, i.createElement(E.Va, {
                                className: "chat-card__title",
                                ellipsis: !0
                            }, n), i.createElement(E.Va, {
                                ellipsis: !0
                            }, r))))
                        }, t
                    }
                    return f.__extends(t, e), t.prototype.render = function() {
                        var e;
                        if (this.props.error) e = this.renderErrorCard();
                        else if (this.props.data) {
                            var t = Object(b.e)(this.props.data.contentURL, {
                                    tt_medium: v.PageviewMedium.Chat,
                                    tt_content: v.PageviewContent.ChatCard
                                }),
                                n = i.createElement(k, {
                                    altText: this.props.data.title,
                                    imageURL: this.props.data.previewImageURL
                                });
                            e = i.createElement(E.T, {
                                className: "chat-card__link",
                                to: t,
                                targetBlank: !0
                            }, this.renderCardContent(n, {
                                title: this.props.data.title,
                                description: this.props.data.description
                            }))
                        } else e = this.renderCardContent();
                        return i.createElement(E.xb, {
                            elevation: 1,
                            margin: {
                                top: .5
                            }
                        }, e)
                    }, t
                }(i.Component),
                N = n("SceP"),
                _ = {
                    isTimedOut: !1
                },
                O = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = _, t.timeoutID = null, t
                    }
                    return f.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this;
                        this.props.data.clip || (this.timeoutID = setTimeout(function() {
                            e.setState({
                                isTimedOut: !0
                            })
                        }, 5e3))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                            isTimedOut: !1
                        }))
                    }, t.prototype.render = function() {
                        var e = this.props.data,
                            t = e.clip,
                            n = e.error,
                            a = e.loading;
                        return n || this.state.isTimedOut ? i.createElement(y, {
                            error: {
                                title: Object(r.d)("Something went wrong", "ClipsChatCard"),
                                description: Object(r.d)("We couldn't find that Clip", "ClipsChatCard")
                            }
                        }) : a || !t ? i.createElement(y, null) : i.createElement(y, {
                            data: {
                                title: t.title || (t.broadcaster ? Object(r.d)("Clip of {broadcaster}", {
                                    broadcaster: t.broadcaster.displayName
                                }, "ClipsChatCard") : ""),
                                description: t.curator ? Object(r.d)("Clipped by {curator}", {
                                    curator: t.curator.displayName
                                }, "ClipsChatCard") : "",
                                previewImageURL: t.thumbnailURL,
                                contentURL: t.url
                            }
                        })
                    }, t
                }(i.Component),
                I = Object(g.a)(N, {
                    options: function(e) {
                        return {
                            variables: {
                                slug: e.slug
                            },
                            notifyOnNetworkStatusChange: !0,
                            fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                        }
                    }
                })(O),
                T = n("gTu3"),
                A = (n("lpj/"), (d = {})[T.a.Default] = "", d[T.a.Recipient] = "mention-fragment--recipient", d[T.a.Sender] = "mention-fragment--sender", d),
                D = function(e) {
                    var t = e.isAtMention ? "@" : "",
                        n = m("mention-fragment", A[e.currentUserMentionRelation]);
                    return i.createElement("span", {
                        className: n,
                        "data-a-target": "chat-message-mention"
                    }, "" + t + e.recipient)
                };
            D.displayName = "MentionFragment";
            var R = n("QVaV"),
                M = n("sU0Q"),
                L = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return f.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.data,
                            t = e.video,
                            n = e.error,
                            a = e.loading;
                        if (n || t && !t.owner) return i.createElement(y, {
                            error: {
                                title: Object(r.d)("Something went wrong", "VideoChatCard"),
                                description: Object(r.d)("We couldn't find that video", "VideoChatCard")
                            }
                        });
                        if (a || !t) return i.createElement(y, null);
                        var o = i.createElement(E.V, null, Object(r.c)(new Date(t.publishedAt), "medium"), i.createElement("span", null, " · "), Object(R.a)(t.owner.login, t.owner.displayName));
                        return i.createElement(y, {
                            data: {
                                title: t.title,
                                description: o,
                                previewImageURL: t.previewThumbnailURL,
                                contentURL: this.props.url
                            }
                        })
                    }, t
                }(i.Component),
                w = Object(g.a)(M, {
                    options: function(e) {
                        return {
                            variables: {
                                videoID: e.id
                            },
                            notifyOnNetworkStatusChange: !0,
                            fetchPolicy: "cache-first"
                        }
                    }
                })(L),
                U = n("ZtEv");

            function B(e, t, n) {
                void 0 === n && (n = !1);
                var r = t.content,
                    a = r.displayText,
                    o = r.url;
                return n ? i.createElement(h, {
                    key: "message-span-" + e,
                    content: a
                }) : i.createElement(u, {
                    key: e,
                    displayText: a,
                    url: o
                })
            }

            function P(e, t) {
                void 0 === t && (t = {});
                var n = null,
                    r = e.reduce(function(r, o, s) {
                        var c = [];
                        switch (s > 0 && e[s - 1].type !== p.a.Text && o.type !== p.a.Text && c.push(" "), o.type) {
                            case p.a.Text:
                            case p.a.ModeratedText:
                                var d = o.content,
                                    u = o.type;
                                c.push(i.createElement(h, {
                                    key: s,
                                    content: d,
                                    highlightType: u
                                }));
                                break;
                            case p.a.CurrentUserHighlight:
                                c.push(i.createElement(D, {
                                    isAtMention: !1,
                                    currentUserMentionRelation: T.a.Recipient,
                                    recipient: o.content,
                                    key: s
                                }));
                                break;
                            case p.a.Mention:
                                c.push(i.createElement(D, {
                                    isAtMention: !0,
                                    currentUserMentionRelation: o.content.currentUserMentionRelation,
                                    recipient: o.content.recipient,
                                    key: s
                                }));
                                break;
                            case p.a.Emote:
                                c.push(i.createElement(l, {
                                    key: s,
                                    emote: o.content
                                }));
                                break;
                            case p.a.Link:
                                c.push(B(s, o, t.disableLinks));
                                break;
                            case p.a.ClipLink:
                                n || (n = i.createElement(a.a, {
                                    key: s
                                }, i.createElement(I, {
                                    slug: o.content.slug,
                                    forceNetworkRequest: t.forceClipsNetworkRequest
                                }))), c.push(B(s, o, t.disableLinks));
                                break;
                            case p.a.VideoLink:
                                n || (n = i.createElement(w, {
                                    key: s,
                                    id: o.content.id,
                                    url: o.content.url
                                })), c.push(B(s, o, t.disableLinks))
                        }
                        return r.concat(c)
                    }, []);
                return n && (r = r.concat(n)), r
            }

            function F(e) {
                if (e.moderationType === U.e.Ban) return e.reason ? i.createElement("span", {
                    className: "chat-line__moderation--ban-with-reason"
                }, Object(r.d)("{userLogin} has been banned. Reason: {reason}", {
                    userLogin: e.userLogin,
                    reason: e.reason
                }, "ChatLine")) : i.createElement("span", {
                    className: "chat-line__moderation--ban"
                }, Object(r.d)("{userLogin} is now banned from this channel.", {
                    userLogin: e.userLogin
                }, "ChatLine"));
                if (e.reason && e.duration) {
                    var t = Object(r.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                        duration: e.duration,
                        reason: e.reason,
                        userLogin: e.userLogin
                    }, "ChatLine");
                    return i.createElement("span", {
                        className: "chat-line__moderation--timeout-with-reason"
                    }, t)
                }
                return e.duration ? i.createElement("span", {
                    className: "chat-line__moderation--timeout"
                }, Object(r.d)("{userLogin} has been timed out for {duration} seconds.", {
                    userLogin: e.userLogin,
                    duration: e.duration
                }, "ChatLine")) : void 0
            }

            function j(e) {
                var t = e.daysLeft;
                0 === t && (t = e.hoursLeft);
                var n = {
                    bitsTotal: i.createElement("strong", null, Object(s.e)(e.total, {
                        style: "currency",
                        currency: "USD"
                    })),
                    charityName: i.createElement("strong", null, e.charityName),
                    learnMoreURL: i.createElement("a", {
                        href: e.learnMore,
                        target: "_blank"
                    }, e.learnMore),
                    hashtag: i.createElement("strong", null, e.hashtag),
                    timeRemaining: Object(s.e)(t)
                };
                return i.createElement("span", null, 0 === e.daysLeft ? function(e) {
                    return Object(r.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                        bitsTotal: e.bitsTotal,
                        charityName: e.charityName,
                        timeRemaining: e.timeRemaining,
                        hashtag: e.hashtag,
                        learnMoreURL: e.learnMoreURL
                    }, "ChatLine")
                }(n) : function(e) {
                    return Object(r.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                        bitsTotal: e.bitsTotal,
                        charityName: e.charityName,
                        timeRemaining: e.timeRemaining,
                        hashtag: e.hashtag,
                        learnMoreURL: e.learnMoreURL
                    }, "ChatLine")
                }(n))
            }

            function x(e) {
                var t = e.enabled ? Object(r.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                    length: e.length
                }, "ChatLine") : Object(r.d)("This room is no longer in slow mode.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function V(e) {
                var t;
                if (e.length > 0) {
                    var n = e.join(", ");
                    t = Object(r.d)("The moderators of this channel are: {moderatorList}", {
                        moderatorList: n
                    }, "ChatLine")
                } else t = Object(r.d)("There are no moderators of this channel.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function H(e) {
                if (e.enabled) {
                    var t = 0 === e.length ? Object(r.d)("This room is in followers-only mode.", "ChatLine") : Object(r.d)("This room is now in {length} followers-only mode.", {
                        length: Object(o.b)(60 * e.length)
                    }, "ChatLine");
                    return i.createElement("span", null, t)
                }
                return i.createElement("span", null, Object(r.d)("This room is no longer in followers-only mode.", "ChatLine"))
            }

            function G(e) {
                return e.enabled ? i.createElement("span", null, Object(r.d)("This room is now in emote-only mode.", "ChatLine")) : i.createElement("span", null, Object(r.d)("This room is no longer in emote-only mode.", "ChatLine"))
            }

            function W(e) {
                var t = e.enabled ? Object(r.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(r.d)("This room is no longer in subscriber-only mode.", "ChatLine");
                return i.createElement("span", null, t)
            }

            function Y(e) {
                return e.enabled ? i.createElement("span", null, Object(r.d)("r9k mode has been enabled for this room.", "ChatLine")) : i.createElement("span", null, Object(r.d)("r9k mode has been disabled for this room.", "ChatLine"))
            }

            function z(e) {
                return e.isAutohost ? Object(r.d)("{host} is now auto hosting you for up to {viewerCount, number} viewers.", {
                    host: e.hostingChannel,
                    viewerCount: e.viewerCount
                }, "ChatLine") : e.viewerCount <= 2 ? Object(r.d)("{host} is now hosting you.", {
                    host: e.hostingChannel
                }, "ChatLine") : Object(r.d)("{host} is now hosting you for up to {viewerCount, number} viewers.", {
                    host: e.hostingChannel,
                    viewerCount: e.viewerCount
                }, "ChatLine")
            }

            function q(e) {
                var t = e.getHours() % 12;
                0 === t && (t = 12);
                var n = e.getMinutes(),
                    i = n.toString();
                return n < 10 && (i = "0" + i), t + ":" + i
            }

            function K(e) {
                return i.createElement("span", {
                    key: "timestamp",
                    className: "chat-line__timestamp",
                    "data-a-target": "chat-timestamp",
                    "data-test-selector": "chat-timestamp"
                }, q(new Date(e)))
            }

            function Q(e) {
                return i.createElement("span", {
                    key: "timestamp",
                    className: "chat-line__timestamp",
                    "data-a-target": "chat-timestamp",
                    "data-test-selector": "chat-timestamp"
                }, function(e, t) {
                    void 0 === t && (t = {});
                    var n = r.o.intl.getLanguageCode() || "en";
                    return Intl.DateTimeFormat(n, t).format(e)
                }(new Date(e), {
                    hour: "numeric",
                    minute: "numeric"
                }))
            }
            n.d(t, "f", function() {
                return P
            }), n.d(t, "g", function() {
                return F
            }), n.d(t, "b", function() {
                return j
            }), n.d(t, "j", function() {
                return x
            }), n.d(t, "i", function() {
                return V
            }), n.d(t, "d", function() {
                return H
            }), n.d(t, "c", function() {
                return G
            }), n.d(t, "k", function() {
                return W
            }), n.d(t, "h", function() {
                return Y
            }), n.d(t, "e", function() {
                return z
            }), n.d(t, "a", function() {
                return q
            }), n.d(t, "l", function() {
                return K
            }), n.d(t, "m", function() {
                return Q
            })
        },
        "dx/T": function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("5zXJ"),
                o = n("x1M1"),
                s = n("Ue10"),
                c = (n("222m"), {
                    themed: !0,
                    dark: {
                        "1x": a.b + "/dark/animated/1/cheertutorial.gif"
                    },
                    light: {
                        "1x": a.b + "/light/animated/1/cheertutorial.gif"
                    }
                }),
                l = function() {
                    return i.createElement(s.Va, {
                        display: s.W.Flex,
                        padding: {
                            top: 5,
                            bottom: 3
                        },
                        flexGrow: 1,
                        flexDirection: s.Y.Column,
                        justifyContent: s.Ua.Center,
                        alignItems: s.f.Center
                    }, i.createElement(s.V, {
                        type: s.Nb.H4,
                        bold: !0
                    }, i.createElement(o.a, {
                        className: "cheermote-help__tutorial-image",
                        sources: c
                    }), Object(r.d)("How to Cheer", "Bits--CheermoteHelp")), i.createElement(s.Va, {
                        padding: {
                            x: 3
                        }
                    }, i.createElement(s.V, null, Object(r.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp"))))
                };
            n.d(t, "a", function() {
                return l
            })
        },
        e7rh: function(e, t, n) {},
        eAdp: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "CreateVideoBookmark"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "CreateVideoBookmarkInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "createVideoBookmark"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "videoBookmark"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 140
                }
            };
            n.loc.source = {
                body: "mutation CreateVideoBookmark($input: CreateVideoBookmarkInput!) {\ncreateVideoBookmark(input: $input){\nvideoBookmark{\nid\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        eDVu: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/aPz");

            function o(e) {
                return function(t) {
                    return function(n) {
                        function o(t) {
                            var i = n.call(this, t) || this;
                            return i.mutator = function(e, t) {
                                return i.options.mutator(e, t)
                            }, i.typesChanged = function(e) {
                                if (e.types && !i.options.types || !e.types && i.options.types) return !0;
                                if (e.types && i.options.types) {
                                    if (e.types.length !== i.options.types.length) return !0;
                                    var t = new Set(i.options.types);
                                    return e.types.some(function(e) {
                                        return !t.has(e)
                                    })
                                }
                                return !1
                            }, i.options = e(t), i
                        }
                        return i.__extends(o, n), o.prototype.componentDidMount = function() {
                            this.options.skip || this.subscribe(this.options)
                        }, o.prototype.componentWillReceiveProps = function(t) {
                            var n = e(t);
                            n.skip !== this.options.skip && (n.skip ? this.unsubscribe() : this.subscribe(n)), n.skip || (n.topic !== this.options.topic || n.type !== this.options.type || this.typesChanged(n)) && (this.unsubscribe(), this.subscribe(n)), this.options = n
                        }, o.prototype.componentWillUnmount = function() {
                            this.unsubscribe()
                        }, o.prototype.render = function() {
                            return r.createElement(t, i.__assign({}, this.props))
                        }, o.prototype.subscribe = function(e) {
                            this.unsubscriber = Object(a.z)({
                                query: e.query,
                                variables: e.variables,
                                topic: e.topic,
                                type: e.type,
                                types: e.types,
                                mutator: this.mutator,
                                skipMessage: e.skipMessage
                            })
                        }, o.prototype.unsubscribe = function() {
                            this.unsubscriber && (this.unsubscriber(), this.unsubscriber = null)
                        }, o
                    }(r.Component)
                }
            }
            n.d(t, "a", function() {
                return o
            })
        },
        eJ65: function(e, t, n) {
            "use strict";
            var i = n("bq0i");
            n.d(t, "a", function() {
                return i.a
            })
        },
        ebRM: function(e, t, n) {
            "use strict";
            n.d(t, "c", function() {
                return c
            }), n.d(t, "e", function() {
                return l
            }), n.d(t, "d", function() {
                return d
            }), n.d(t, "a", function() {
                return u
            }), n.d(t, "f", function() {
                return m
            }), n.d(t, "b", function() {
                return p
            });
            var i = n("mrSG"),
                r = n("SDEh"),
                a = n("lhih"),
                o = n("5zXJ"),
                s = n("RiD7");

            function c(e) {
                return e.type !== a.a && (d(e) && null !== e.promotion && e.promotion.type === a.e)
            }

            function l(e) {
                return e.type !== a.a && (d(e) && null !== e.promotion && (e.promotion.type === a.g || e.promotion.type === a.f))
            }

            function d(e) {
                return e.type === a.b && null !== e.promotion && !!e.promotion
            }

            function u(e) {
                var t = 0,
                    n = 0,
                    i = 0,
                    r = 0;
                return e.forEach(function(e) {
                    e.cheerAmount && (e.alt !== o.t ? (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, i += e.cheerAmount) : r += e.cheerAmount)
                }), {
                    total: i,
                    bonus: r,
                    smallestCheermote: n,
                    largestCheermote: t
                }
            }

            function m(e) {
                var t = e.messageBits,
                    n = t.total,
                    r = t.largestCheermote,
                    a = t.smallestCheermote;
                if (n) {
                    var s = {
                        cheerAboveMaxBitsPerEmote: r > o.p,
                        totalAboveBalance: n > e.balance,
                        totalBelowCheerMinimum: n < e.cheerMinimumBits,
                        totalBelowEmoteMinimum: a < e.emoteMinimumBits,
                        inputLongerThanMaxBitsMessage: e.inputValue.length > o.o,
                        inputStartsWithCommand: e.inputValue.startsWith("/")
                    };
                    if (Object.keys(s).some(function(e) {
                            return s[e]
                        })) return i.__assign({
                        canSpend: !1
                    }, s)
                }
                return {
                    canSpend: !0
                }
            }

            function p(e) {
                var t = e.purchaseUrl;
                if (t) {
                    e.trackBitsCardInteraction(Object(s.d)(e.bitsAmount), {
                        location: e.location
                    });
                    var n = t.replace("{channelID}", e.channelID),
                        i = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
                    return !i || Object(r.a)() ? (e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(s.a.CloseCard, {
                        location: e.location
                    })) : (i.focus(), i)
                }
            }
        },
        ecb7: function(e, t, n) {},
        efEE: function(e, t, n) {},
        fQWD: function(e, t, n) {
            "use strict";
            var i = n("vHGB");
            n.d(t, "a", function() {
                return i.a
            })
        },
        fhkr: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "leaderboardItem"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "BitsLeaderboard"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "items"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "edges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "cursor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "node"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "entryKey"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "rank"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "score"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 106
                }
            };
            n.loc.source = {
                body: "fragment leaderboardItem on BitsLeaderboard {\nitems {\nedges {\ncursor\nnode {\nid\nentryKey\nrank\nscore\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        frkH: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_DenyRejectedChatMessage"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "DenyRejectedChatMessageInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "denyRejectedChatMessage"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "message"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 138
                }
            };
            n.loc.source = {
                body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "g/rS": function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }), n.d(t, "d", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            });
            var i = "extensions.EXTENSION_INSTALLATIONS_FETCHED",
                r = "extensions.DESTROY_CHANNEL_INSTALLATION";

            function a(e, t) {
                return {
                    type: i,
                    channelID: e,
                    installedExtensions: t
                }
            }

            function o(e, t) {
                return {
                    type: r,
                    channelID: e,
                    extensionID: t
                }
            }
        },
        g17B: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Chat_ChannelCheermotes"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emotes"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "prefix"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tiers"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "bits"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "color"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "images"
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [{
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "id"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "url"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "theme"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "isAnimated"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }, {
                                                                    kind: "Field",
                                                                    name: {
                                                                        kind: "Name",
                                                                        value: "dpiScale"
                                                                    },
                                                                    arguments: [],
                                                                    directives: []
                                                                }]
                                                            }
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "canCheer"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "canShowInBitsCard"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "type"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 207
                }
            };
            n.loc.source = {
                body: "query Chat_ChannelCheermotes($channelID: ID) {\nuser(id: $channelID) {\nid\ncheer {\nid\nemotes {\nprefix\ntiers {\nid\nbits\ncolor\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\ncanCheer\ncanShowInBitsCard\n}\ntype\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gDzh: function(e, t, n) {},
        gMwc: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoMarkersChatCommand"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "createdAt"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 115
                }
            };
            n.loc.source = {
                body: "query VideoMarkersChatCommand($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nstream {\nid\ncreatedAt\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        gTu3: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Default = 0] = "Default", e[e.Recipient = 1] = "Recipient", e[e.Sender = 2] = "Sender"
                }(i || (i = {}))
        },
        gcd7: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("fvjX"),
                a = n("+pBb"),
                o = n("mrSG"),
                s = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.componentWillMount = function() {
                        this.props.addCommand(this.props.command, this.props.handler)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command, this.props.handler), this.props.addCommand(e.command, e.handler))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.removeCommand(this.props.command, this.props.handler)
                    }, t.prototype.render = function() {
                        return null
                    }, t
                }(n("q1tI").PureComponent);
            var c = Object(i.connect)(null, function(e) {
                return Object(r.bindActionCreators)({
                    addCommand: a.x,
                    removeCommand: a.N
                }, e)
            })(s);
            n.d(t, "a", function() {
                return c
            })
        },
        gq0V: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            }), n.d(t, "b", function() {
                return c
            });
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("5g1g"),
                o = n("wUQP"),
                s = function(e) {
                    var t = e.children;
                    return i.createElement(a.a, {
                        name: "vip_badge_gate"
                    }, t)
                },
                c = function() {
                    return o.a.On === r.b.get("vip_badge_gate", o.a.Off)
                }
        },
        hWzS: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "FragmentDefinition",
                    name: {
                        kind: "Name",
                        value: "bitsOffersFragment"
                    },
                    typeCondition: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "BitsOffer"
                        }
                    },
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "type"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "bits"
                            },
                            arguments: [],
                            directives: []
                        }, {
                            kind: "InlineFragment",
                            typeCondition: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BitsBundleOffer"
                                }
                            },
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "price"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "discount"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "isPromo"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "url"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "includesVAT"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "currencyCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "promotion"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "type"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 158
                }
            };
            n.loc.source = {
                body: "fragment bitsOffersFragment on BitsOffer {\nid\ntype\nbits\n... on BitsBundleOffer {\nprice\ndiscount\nisPromo\nurl\nincludesVAT\ncurrencyCode\npromotion {\nid\ntype\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ht6z: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            });
            var i = n("/7QA");

            function r(e) {
                var t = i.b.get("prime_blocked_regions", []);
                return !!e && !t.includes(e.toUpperCase())
            }
        },
        i6WW: function(e, t, n) {
            "use strict";
            var i = n("/7QA"),
                r = n("RcPG"),
                a = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?"),
                o = new RegExp("(?:^|\\s)(?:https?:\\/\\/)?(?:www\\.)?twitch\\.tv\\/(\\w+)\\/clip\\/(\\w+)(?:$|\\s)?");
            var s = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?");
            n.d(t, "a", function() {
                return l
            });
            var c = /^(?:(https?:\/\/)?((?:[\w#%\-+=:~]+\.)+[a-z]{2,8}(?:\/[\w./#%&()\-+=:?~]*)?))$/;

            function l(e, t) {
                var n = e.match(c);
                if (!n) return null;
                if (t.blockLinks) return {
                    type: r.a.Text,
                    content: " <" + Object(i.d)("deleted link", "CreateMessageData") + "> "
                };
                var l = n[1],
                    d = n[2],
                    u = "" + (l || "https://") + d;
                if (t.parseClips && function(e) {
                        void 0 === e && (e = "");
                        var t = a.test(e) && !e.includes("clips.twitch.tv/2017/"),
                            n = o.test(e);
                        return t || n
                    }(u)) {
                    var m = function(e) {
                        void 0 === e && (e = "");
                        var t = e.match(a);
                        if (t && t.length > 0 && void 0 !== t.index) return t[1];
                        var n = e.match(o);
                        return n && n.length > 0 && void 0 !== n.index ? n[2] : ""
                    }(u);
                    return {
                        type: r.a.ClipLink,
                        content: {
                            slug: m,
                            url: u,
                            displayText: e
                        }
                    }
                }
                if (t.parseVods && function(e) {
                        return void 0 === e && (e = ""), s.test(e)
                    }(u)) {
                    var p = function(e) {
                        void 0 === e && (e = "");
                        var t = e.match(s);
                        return null === t ? "" : t && t.length > 0 && void 0 !== t.index ? t[1] : ""
                    }(u);
                    return {
                        type: r.a.VideoLink,
                        content: {
                            id: p,
                            url: u,
                            displayText: e
                        }
                    }
                }
                return {
                    type: r.a.Link,
                    content: {
                        displayText: e,
                        url: u
                    }
                }
            }
        },
        iS14: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("8jSG"),
                o = n("cMjZ"),
                s = n("zixI");

            function c() {
                var e = this;
                return Object(r.a)(s, {
                    props: function(t) {
                        return {
                            unblockUserMutation: function(n, r) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n
                                                        }
                                                    },
                                                    optimisticResponse: {
                                                        unblockUser: {
                                                            __typename: "UnblockUserPayload",
                                                            targetUser: {
                                                                __typename: "User",
                                                                id: n
                                                            }
                                                        }
                                                    },
                                                    update: function(e) {
                                                        var t = e.readFragment({
                                                            id: Object(o.a)(r),
                                                            fragment: a
                                                        });
                                                        t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                            return null !== e && e.id !== n
                                                        }), e.writeFragment({
                                                            id: Object(o.a)(r),
                                                            fragment: a,
                                                            data: t
                                                        }))
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return e.sent(), [3, 3];
                                            case 2:
                                                throw new Error("unblockUserMutation is not ready");
                                            case 3:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        ifPV: function(e, t, n) {},
        ilCE: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "RaidUpsell_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "targetChannelLogin"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "sourceChannelLogin"
                            }
                        },
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "targetChannel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "targetChannelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            alias: {
                                kind: "Name",
                                value: "sourceChannel"
                            },
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "sourceChannelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "stream"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "viewersCount"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 240
                }
            };
            n.loc.source = {
                body: "query RaidUpsell_Channel($targetChannelLogin: String $sourceChannelLogin: String) {\ntargetChannel: user(login: $targetChannelLogin) {\nid\nlogin\ndisplayName\n}\nsourceChannel: user(login: $sourceChannelLogin) {\nid\nstream {\nid\nviewersCount\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        iyGE: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("yR8l"),
                a = 60,
                o = 60 * a,
                s = 24 * o,
                c = 7 * s,
                l = 4 * c;
            var d, u = n("4w0E");

            function m(e) {
                var t = this;
                return Object(r.a)(u, {
                    props: function(n) {
                        return {
                            banUserMutation: function(r, d) {
                                return void 0 === d && (d = null), i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: r,
                                                            expiresIn: d && function(e) {
                                                                if (!e) return "0s";
                                                                var t = e,
                                                                    n = "";
                                                                if (t > l) {
                                                                    var i = Math.floor(t / l);
                                                                    t -= i * l, n += i + "mo"
                                                                }
                                                                if (t > c) {
                                                                    var r = Math.floor(t / c);
                                                                    t -= r * c, n += r + "w"
                                                                }
                                                                if (t > s) {
                                                                    var d = Math.floor(t / s);
                                                                    t -= d * s, n += d + "d"
                                                                }
                                                                if (t > o) {
                                                                    var u = Math.floor(t / o);
                                                                    t -= u * o, n += u + "h"
                                                                }
                                                                if (t > a) {
                                                                    var m = Math.floor(t / a);
                                                                    t -= m * a, n += m + "m"
                                                                }
                                                                return t > 0 && (n += t + "s"), n
                                                            }(d)
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return [2, i.sent().data];
                                            case 3:
                                                throw i.sent(), new Error("Unable to ban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Ban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
            n.d(t, "a", function() {
                    return d
                }), n.d(t, "b", function() {
                    return m
                }),
                function(e) {
                    e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetIsSelf = "TARGET_IS_SELF", e.TargetIsAnonymous = "TARGET_IS_ANONYMOUS", e.TargetIsMod = "TARGET_IS_MOD", e.TargetIsBroadcaster = "TARGET_IS_BROADCASTER", e.TargetIsStaff = "TARGET_IS_STAFF", e.TargetIsAdmin = "TARGET_IS_ADMIN", e.TargetIsGlobalMod = "TARGET_IS_GLOBAL_MOD", e.TargetIsAlreadyBanned = "TARGET_ALREADY_BANNED", e.DurationInvalid = "DURATION_INVALID"
                }(d || (d = {}))
        },
        "j+2s": function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatList_Badges"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "badges"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "badge"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "broadcastBadges"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "badge"
                                            },
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "selectedBadge"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "badge"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayBadges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "FragmentSpread",
                                                    name: {
                                                        kind: "Name",
                                                        value: "badge"
                                                    },
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 256
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\nself {\nselectedBadge {\n...badge\n}\ndisplayBadges {\n...badge\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("IKE4").definitions)), e.exports = i
        },
        j0ar: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("TSYQ"),
                a = n("q1tI"),
                o = n("x1M1"),
                s = n("Ue10"),
                c = (n("9KaG"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onImageLoad = function() {
                            n.setState({
                                imageLoaded: !0
                            })
                        }, n.onMouseOver = function() {
                            n.setState({
                                isHovering: !0
                            })
                        }, n.onMouseOut = function() {
                            n.setState({
                                isHovering: !1
                            })
                        }, n.renderImage = function() {
                            var e = null,
                                t = r("chat-image", {
                                    "chat-image__animated": !!n.props.cheerText && n.state.imageLoaded
                                }, n.props.className);
                            if (n.props.srcSet.themed) e = a.createElement(s.Na, {
                                display: n.state.imageLoaded ? s.W.InlineBlock : s.W.Hide
                            }, a.createElement(o.a, {
                                alt: n.props.alt,
                                className: t,
                                defaultRes: n.props.srcKey,
                                onLoad: n.onImageLoad,
                                onMouseOver: n.onMouseOver,
                                onMouseOut: n.onMouseOut,
                                sources: n.props.srcSet
                            }));
                            else {
                                for (var i = [], c = 0, l = Object.keys(n.props.srcSet.sources); c < l.length; c++) {
                                    var d = l[c];
                                    i.push(n.props.srcSet.sources[d] + " " + d)
                                }
                                e = a.createElement(s.Na, {
                                    display: n.state.imageLoaded ? s.W.InlineBlock : s.W.Hide
                                }, a.createElement("img", {
                                    className: t,
                                    onLoad: n.onImageLoad,
                                    onMouseOver: n.onMouseOver,
                                    onMouseOut: n.onMouseOut,
                                    src: n.props.srcSet.sources[n.props.srcKey],
                                    srcSet: i.join(","),
                                    alt: n.props.alt
                                }))
                            }
                            return e
                        }, n.renderPlaceholder = function() {
                            return n.state.imageLoaded ? null : a.createElement(s.Na, {
                                display: s.W.InlineBlock
                            }, a.createElement(s.V, {
                                type: s.Nb.Span,
                                className: "chat-image__placeholder",
                                align: s.Xb.Top
                            }, a.createElement(s.cb, {
                                height: 28,
                                width: 28
                            })))
                        }, n.state = {
                            imageLoaded: !1,
                            isHovering: !1
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e;
                        return e = this.state.isHovering && this.state.imageLoaded ? a.createElement(s.Qb, {
                            direction: this.props.tooltipDirection || s.Sb.Top,
                            label: this.props.alt,
                            display: s.W.Inline,
                            offsetY: "0.9rem",
                            "data-a-target": "emote-name"
                        }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText) : a.createElement("span", {
                            "data-a-target": "emote-name"
                        }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText), this.props.cheerText ? a.createElement(s.V, {
                            type: s.Nb.Span,
                            noWrap: !0
                        }, e) : e
                    }, t
                }(a.Component));
            n.d(t, "a", function() {
                return c
            })
        },
        jPLR: function(e, t, n) {},
        jv9u: function(e, t, n) {
            "use strict";
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("Ue10"),
                o = function() {
                    return i.createElement(a.Va, {
                        padding: 1,
                        display: a.W.Flex,
                        alignItems: a.f.Center,
                        justifyContent: a.Ua.Center,
                        flexDirection: a.Y.Column,
                        fullWidth: !0
                    }, i.createElement(a.Xa, {
                        delay: 0
                    }), i.createElement(a.Va, {
                        padding: {
                            top: 2
                        }
                    }, i.createElement(a.V, {
                        italic: !0
                    }, Object(r.d)("Fetching Bits", "BitsCard"))))
                };
            n.d(t, "a", function() {
                return o
            })
        },
        "k/I/": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VIPs"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "id"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "vips"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "edges"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "node"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "id"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }, {
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "login"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 82
                }
            };
            n.loc.source = {
                body: "query VIPs($id: ID!) {\nuser(id: $id) {\nid\nvips {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        k8pZ: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("g/rS");

            function o(e, t) {
                return e.extensions.installations[t]
            }
            r.o.store.registerReducer("extensions", function(e, t) {
                var n, r;
                switch (void 0 === e && (e = {
                    installations: {}
                }), t.type) {
                    case a.b:
                        return i.__assign({}, e, {
                            installations: i.__assign({}, e.installations, (n = {}, n[t.channelID] = t.installedExtensions, n))
                        });
                    case a.a:
                        var o = e.installations[t.channelID];
                        if (!o) return e;
                        var s = o.filter(function(e) {
                            return e.extension.clientId !== t.extensionID
                        });
                        return i.__assign({}, e, {
                            installations: i.__assign({}, e.installations, (r = {}, r[t.channelID] = s, r))
                        });
                    default:
                        return e
                }
            })
        },
        kPBf: function(e, t) {},
        kPCN: function(e, t, n) {},
        kSkr: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "BlockUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "BlockUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "blockUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 94
                }
            };
            n.loc.source = {
                body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "ky+Y": function(e, t, n) {},
        l1Uh: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return r
            }), n.d(t, "a", function() {
                return a
            });
            var i = null;

            function r(e) {
                i = e
            }

            function a() {
                return i ? +window.getComputedStyle(i).getPropertyValue("width").replace("px", "") : 0
            }
        },
        lNGo: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return c
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("04j6"),
                s = n("oi4T"),
                c = function(e) {
                    return i.__awaiter(void 0, void 0, void 0, function() {
                        var t, n, c, l;
                        return i.__generator(this, function(d) {
                            switch (d.label) {
                                case 0:
                                    t = null, d.label = 1;
                                case 1:
                                    return d.trys.push([1, 3, , 4]), [4, r.o.apollo.client.query({
                                        query: o,
                                        variables: {
                                            id: e.channelID
                                        }
                                    })];
                                case 2:
                                    return t = d.sent(), [3, 4];
                                case 3:
                                    return n = d.sent(), r.j.error(n, "ChatEvent query failed."), [3, 4];
                                case 4:
                                    return t && t.data || r.j.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), c = t && t.data && t.data.user || null, l = i.__assign({}, Object(s.a)(e), {
                                        broadcast_id: r.n.getVideoPlayerTrackingData().broadcastID,
                                        channel_id: e.channelID,
                                        emote_picker_sid: e.emotePickerSessionID,
                                        game: c && c.stream && c.stream.game && c.stream.game.name,
                                        live: !!(c && c.stream && c.stream.id.length > 0),
                                        partner: c && c.isPartner || !1,
                                        play_session_id: r.n.getVideoPlayerTrackingData().playSessionID,
                                        player: e.player,
                                        ritual_nca: e.fromNewChatterRitual || !1,
                                        sub_only_mode: e.subOnlyMode
                                    }), r.n.track(a.SpadeEventType.Chat, l), [2]
                            }
                        })
                    })
                }
        },
        lZCe: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA"),
                o = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        n.logger = a.o.logger.withCategory("component-experiment");
                        var i = a.o.experiments.getAssignment(n.props.name, n.props.channel ? {
                            channel: n.props.channel
                        } : {});
                        return i && n.props.assignments[i] ? n.logger.debug("Displaying component for experiment", {
                            name: n.props.name,
                            assignment: i
                        }) : n.logger.debug("Displaying fallback component for experiment", {
                            name: n.props.name,
                            assignment: i
                        }), n.state = {
                            assignment: i
                        }, n
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        if (this.state.assignment && this.props.assignments[this.state.assignment]) {
                            var e = this.props.assignments[this.state.assignment]();
                            return "string" == typeof e ? (window.location.replace(e), null) : e
                        }
                        return this.props.assignments.fallback()
                    }, t
                }(r.Component);
            n.d(t, "a", function() {
                return o
            })
        },
        lZdE: function(e, t, n) {
            "use strict";

            function i(e) {
                return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
            }
            n.d(t, "a", function() {
                return i
            })
        },
        lhih: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return r
            }), n.d(t, "e", function() {
                return a
            }), n.d(t, "g", function() {
                return o
            }), n.d(t, "f", function() {
                return s
            }), n.d(t, "c", function() {
                return c
            }), n.d(t, "d", function() {
                return l
            });
            var i = "AD",
                r = "BUNDLE",
                a = "first_time_purchase",
                o = "single_purchase",
                s = "prime_single_purchase",
                c = "black_friday_2017",
                l = "twitch_prime_2018"
        },
        "lpj/": function(e, t, n) {},
        lw3P: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return a
            });
            var i = n("yR8l"),
                r = n("ru7j");

            function a() {
                return Object(i.a)(r, {
                    props: function(e) {
                        return e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers ? {
                            blockedUsers: e.data.currentUser.blockedUsers.reduce(function(e, t) {
                                return t && t.id && e.push(t.id), e
                            }, [])
                        } : {
                            blockedUsers: []
                        }
                    },
                    skip: function(e) {
                        return !(e.isLoggedIn || e.authToken)
                    }
                })
            }
        },
        mBWp: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Whispers_Tracking_CurrentUser"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "hasTurbo"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "availability"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 86
                }
            };
            n.loc.source = {
                body: "query Whispers_Tracking_CurrentUser {\ncurrentUser {\nid\nhasTurbo\navailability\nlogin\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        mHh5: function(e, t, n) {},
        mZsS: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
                }(i || (i = {}))
        },
        mmRu: function(e, t, n) {
            "use strict";
            var i = n("/MKj"),
                r = n("mrSG"),
                a = n("q1tI"),
                o = n("u5aL"),
                s = n("/7QA"),
                c = n("Ue10"),
                l = function(e) {
                    return a.createElement(c.A, {
                        icon: c.nb.Emoticons,
                        ariaLabel: Object(s.d)("Emote picker", "EmotePickerButton"),
                        type: c.C.Secondary,
                        onClick: e.onClick,
                        "data-a-target": "emote-picker-button"
                    })
                },
                d = n("oJmH"),
                u = n("fvjX"),
                m = n("lZCe"),
                p = n("ZS2+"),
                h = n("yR8l"),
                f = n("x7UT"),
                g = n("Mj6i"),
                b = n("UUve"),
                v = n("1/iK"),
                E = n("aCAx"),
                k = n("D7An"),
                C = n("kRBY"),
                S = n("+pBb"),
                y = n("GzyO"),
                N = n("OpME"),
                _ = n("cpJf"),
                O = n("W8Fi"),
                I = n("0WFu"),
                T = n("GnwI"),
                A = n("br9A"),
                D = n("TSYQ"),
                R = n("8/mp"),
                M = n("8Ad5");

            function L(e) {
                return e.charCode === M.a.Enter || e.charCode === M.a.Space
            }
            var w = n("2xye"),
                U = n("7SjK"),
                B = n("4rCz"),
                P = (n("/Kya"), function(e) {
                    var t = {
                            "emote-picker__tab": !0
                        },
                        n = null,
                        i = null;
                    if (e.channelTabVisible) {
                        var o = D(r.__assign({}, t, {
                            "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                            "emote-picker__tab--disabled": !e.channelTabEnabled
                        }));
                        n = a.createElement(c.Na, {
                            padding: {
                                x: 1
                            }
                        }, a.createElement("div", {
                            key: "ChannelTabLink",
                            id: "emote-picker__channel",
                            className: o,
                            onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                            onKeyPress: e.channelTabEnabled ? e.selectChannelTabKeypress : void 0,
                            "data-a-target": "emote-channel-tab",
                            tabIndex: 0
                        }, a.createElement("span", null, Object(B.d)("Channel", "EmotePicker"))))
                    }
                    if (e.allTabVisible) {
                        var s = D(r.__assign({}, t, {
                            "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                        }));
                        i = a.createElement(c.Na, {
                            padding: {
                                x: 1
                            }
                        }, a.createElement("div", {
                            key: "allTabLink",
                            id: "emote-picker__all",
                            className: s,
                            onClick: e.selectAllTab,
                            onKeyPress: e.selectAllTabKeypress,
                            "data-a-target": "emote-all-tab",
                            tabIndex: 0
                        }, a.createElement("span", null, Object(B.d)("All", "EmotePicker"))))
                    }
                    return a.createElement(c.xb, {
                        background: c.r.Base,
                        borderTop: !0,
                        className: "emote-picker__tabs-container"
                    }, n, i)
                }),
                F = n("DnOo"),
                j = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return r.__extends(t, e), t.prototype.render = function() {
                        var e = [];
                        if (this.props.subscribeTexts)
                            for (var t = 0; t <= this.props.plan.level; t++) {
                                var n = this.props.subscribeTexts[t];
                                n && (t < this.props.plan.level ? (e.push(a.createElement("span", {
                                    key: "upsell-predicate:" + t
                                }, n)), e.push(a.createElement("span", {
                                    key: "upsell-plus:" + t
                                }, " + "))) : this.props.plan.level > 0 ? e.push(a.createElement("strong", {
                                    key: "upsell-strong-end:" + this.props.plan.level
                                }, n)) : e.push(a.createElement("span", {
                                    key: "upsell-end:" + t
                                }, n)))
                            }
                        if (!this.props.plan.emoteSetID) return null;
                        var i = {
                                id: this.props.plan.emoteSetID,
                                emotes: this.props.plan.emotes || []
                            },
                            r = {};
                        if (this.props.plan.tier) {
                            var o = Object(I.a)(this.props.plan.tier);
                            null === o && (o = 1), r.purchase = Object(s.d)("Tier { tierNum }", {
                                tierNum: o
                            }, "assembleSubscribeTexts")
                        }
                        return a.createElement(c.Va, {
                            className: "emote-picker-plan-upsell",
                            display: c.W.Flex,
                            flexDirection: c.Y.Column,
                            alignItems: c.f.Center,
                            margin: {
                                bottom: 1
                            }
                        }, a.createElement(U.a, {
                            emotes: i.emotes,
                            locked: !0
                        }), a.createElement(c.Va, {
                            margin: 1,
                            alignItems: c.f.Center
                        }, e), a.createElement(F.a, {
                            isSubbedToTier: !1,
                            tierPrice: r.purchase || "",
                            handleSubAction: this.props.handleSubAction,
                            productName: this.props.plan.name,
                            url: this.props.plan.url,
                            isEsportChannel: this.props.isEsportChannel
                        }))
                    }, t
                }(a.Component),
                x = (n("JGCS"), function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.channelTabSelectionKeypress = function(e) {
                            L(e) && n.selectChannelTab(e)
                        }, n.allTabSelectionKeypress = function(e) {
                            L(e) && n.selectAllTab(e)
                        }, n.onClickEmote = function(e) {
                            if (n.props.onClickEmote) {
                                n.props.onClickEmote(e.displayName || e.token, e.id);
                                var t = {
                                    channel_id: n.props.channelID,
                                    chatroom_id: n.props.roomID,
                                    emote_picker_sid: n.props.emotePickerSessionID,
                                    emote_id: e.id,
                                    emoticon_set_id: e.setID,
                                    generated_by: n.props.emotePickerSource
                                };
                                s.n.track(w.SpadeEventType.EmotePickerClickthrough, t)
                            }
                        }, n.closeOnEsc = function(e) {
                            e.keyCode === M.a.Esc && n.props.toggleVisibility()
                        }, n.handleFilterChange = function(e) {
                            var t = e.target.value,
                                i = t.toLowerCase(),
                                r = n.filterAvailableUpsells(n.props.availableUpsells, i),
                                a = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                            n.setState({
                                filter: i,
                                filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                                filteredAvailableUpsells: r,
                                filteredOwnedChannelEmoteSets: a,
                                inputValue: t,
                                channelTabEnabled: a.length > 0 || r.length > 0
                            })
                        }, n.state = {
                            filter: "",
                            filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                            filteredAvailableUpsells: t.availableUpsells,
                            filteredAllEmoteSets: t.allEmoteSets,
                            inputValue: "",
                            channelTabSelected: !0,
                            channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                        }, n.selectAllTab = function() {
                            return n.setChannelTabSelected(!1)
                        }, n.selectChannelTab = function() {
                            return n.setChannelTabSelected(!0)
                        }, n
                    }
                    return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        if (e.channelID && e.emotePickerSessionID && !this.props.emotePickerSessionID) {
                            var t = {
                                channel_id: e.channelID,
                                emote_picker_sid: e.emotePickerSessionID,
                                generated_by: e.emotePickerSource,
                                chatroom_id: e.roomID
                            };
                            s.n.track(w.SpadeEventType.ViewedEmotePicker, t)
                        }
                        if (!e.gqlError)
                            if (this.state.filter.length > 0) {
                                var n = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                    i = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                                this.setState({
                                    filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                    filteredAvailableUpsells: n,
                                    filteredOwnedChannelEmoteSets: i,
                                    channelTabEnabled: i.length > 0 || n.length > 0
                                })
                            } else this.setState({
                                filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                                filteredAvailableUpsells: e.availableUpsells,
                                filteredAllEmoteSets: e.allEmoteSets,
                                channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                            })
                    }, t.prototype.render = function() {
                        return a.createElement(c.u, {
                            "data-a-target": "emote-picker",
                            direction: this.props.direction ? this.props.direction : c.v.TopRight,
                            size: this.props.size ? this.props.size : c.w.Medium,
                            noTail: !0,
                            show: !0
                        }, a.createElement(c.Va, {
                            className: D("emote-picker")
                        }, this.renderTabContent(), a.createElement(c.Va, {
                            className: "emote-picker__controls-container",
                            position: c.db.Relative
                        }, a.createElement(c.xb, {
                            padding: 1,
                            borderTop: !0
                        }, a.createElement(c.Pa, {
                            autoFocus: !0,
                            onChange: this.handleFilterChange,
                            onKeyDown: this.closeOnEsc,
                            placeholder: Object(s.d)("Search for Emotes", "EmotePicker"),
                            type: c.Ra.Text,
                            value: this.state.inputValue
                        })), a.createElement(P, {
                            allTabVisible: this.props.allEmoteSets.length > 0,
                            channelTabEnabled: this.state.channelTabEnabled,
                            channelTabSelected: this.state.channelTabSelected,
                            channelTabVisible: !!this.props.channelTabVisible,
                            selectAllTab: this.selectAllTab,
                            selectAllTabKeypress: this.allTabSelectionKeypress,
                            selectChannelTab: this.selectChannelTab,
                            selectChannelTabKeypress: this.channelTabSelectionKeypress
                        }))))
                    }, t.prototype.renderTabContent = function() {
                        var e = this,
                            t = [];
                        if (this.props.gqlError) t.push(a.createElement(c.Va, {
                            key: "emotePicker-error"
                        }, a.createElement(c.V, {
                            color: c.O.Error
                        }, Object(s.d)("Unable to load available emotes.", "EmotePicker"))));
                        else if (this.props.loading) t.push(a.createElement(c.Va, {
                            alignItems: c.f.Center,
                            display: c.W.Flex,
                            key: "loading",
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: c.Ua.Center
                        }, a.createElement(c.Xa, {
                            key: "LoadingSpinner"
                        })));
                        else if (this.state.channelTabEnabled && this.state.channelTabSelected) {
                            if (this.state.filteredOwnedChannelEmoteSets.length > 0) {
                                var n = this.state.filteredOwnedChannelEmoteSets[0].emotes.map(function(t) {
                                    return t.setID = e.state.filteredOwnedChannelEmoteSets[0].id, t
                                });
                                t.push(a.createElement(c.Va, {
                                    className: "emote-picker__content-block",
                                    key: "ownedChannelEmoteSets",
                                    padding: 1,
                                    position: c.db.Relative
                                }, a.createElement(U.a, {
                                    emotes: n,
                                    onClickEmote: this.onClickEmote,
                                    locked: !1
                                })))
                            }
                            t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                                return a.createElement(c.Va, {
                                    className: "emote-picker__content-block",
                                    key: "planUpsell:" + t.level,
                                    padding: 1,
                                    position: c.db.Relative
                                }, a.createElement(j, {
                                    plan: t,
                                    isEsportChannel: e.props.isEsportChannel,
                                    subscribeTexts: e.props.subscribeTexts,
                                    handleSubAction: e.props.handleSubAction
                                }))
                            }))
                        } else t = this.state.filteredAllEmoteSets.map(function(t) {
                            var n = [];
                            return t.emotes.forEach(function(e) {
                                e.setID = t.id, n.push(e)
                            }), a.createElement(c.Va, {
                                key: "emoteGrid" + t.id,
                                position: c.db.Relative,
                                padding: {
                                    top: 1,
                                    bottom: 2
                                },
                                className: "emote-picker__content-block"
                            }, a.createElement(U.a, {
                                emotes: n,
                                onClickEmote: e.onClickEmote,
                                locked: !1
                            }))
                        });
                        return t.length > 0 ? a.createElement(R.b, {
                            className: "emote-picker__tab-content"
                        }, a.createElement(c.Va, {
                            padding: 1
                        }, t)) : null
                    }, t.prototype.filterEmoteSet = function(e, t) {
                        return e.filter(function(e) {
                            return e.token.toLowerCase().includes(t)
                        })
                    }, t.prototype.setChannelTabSelected = function(e) {
                        this.setState({
                            channelTabSelected: e
                        })
                    }, t.prototype.filterEmoteSets = function(e, t) {
                        for (var n = [], i = 0, r = e; i < r.length; i++) {
                            var a = r[i],
                                o = this.filterEmoteSet(a.emotes, t);
                            o.length > 0 && n.push({
                                id: a.id,
                                emotes: o
                            })
                        }
                        return n
                    }, t.prototype.filterAvailableUpsells = function(e, t) {
                        for (var n = [], i = 0, a = e; i < a.length; i++) {
                            var o = a[i];
                            if (o.emotes) {
                                var s = this.filterEmoteSet(o.emotes, t);
                                s.length > 0 && n.push(r.__assign({}, o, {
                                    emotes: s
                                }))
                            }
                        }
                        return n
                    }, t = r.__decorate([Object(T.c)("EmotePickerMenu", {
                        autoReportInteractive: !0
                    })], t)
                }(a.Component)),
                V = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        return n.onClickEmote = function(e) {
                            if (n.props.onClickEmote) {
                                n.props.onClickEmote(e.displayName || e.token, e.id);
                                var t = {
                                    channel_id: n.props.channelID,
                                    chatroom_id: n.props.roomID,
                                    emote_picker_sid: n.props.emotePickerSessionID,
                                    emote_id: e.id,
                                    emoticon_set_id: e.setID,
                                    generated_by: n.props.emotePickerSource
                                };
                                s.n.track(w.SpadeEventType.EmotePickerClickthrough, t)
                            }
                        }, n.handleFilterChange = function(e) {
                            var t = e.target.value,
                                i = t.toLowerCase();
                            n.setState({
                                filter: i,
                                inputValue: t,
                                filteredEmotes: n.filterEmoteSets(n.props.allEmoteSets, i)
                            })
                        }, n.filterEmoteSets = function(e, t) {
                            var n = [];
                            e.forEach(function(e) {
                                e.emotes.filter(function(e) {
                                    return e.token.toLowerCase().includes(t)
                                }).forEach(function(t) {
                                    t.setID = e.id, n.push(t)
                                })
                            });
                            var i = Object(y.d)(),
                                r = 0 === Object.keys(i).length ? void 0 : i;
                            return Object(N.f)(n, t, r)
                        }, n.state = {
                            filter: "",
                            filteredEmotes: [],
                            inputValue: ""
                        }, n
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        if (this.props.channelID) {
                            var e = {
                                channel_id: this.props.channelID,
                                emote_picker_sid: this.props.emotePickerSessionID,
                                generated_by: this.props.emotePickerSource,
                                chatroom_id: this.props.roomID
                            };
                            s.n.track(w.SpadeEventType.ViewedEmotePicker, e)
                        }
                    }, t.prototype.render = function() {
                        return a.createElement(o.a, {
                            onClickOut: this.props.toggleVisibility
                        }, a.createElement(c.u, {
                            "data-a-target": "emote-picker",
                            direction: this.props.direction ? this.props.direction : c.v.TopRight,
                            size: this.props.size ? this.props.size : c.w.Medium,
                            noTail: !0,
                            show: !0
                        }, a.createElement(c.Va, {
                            className: "emote-picker"
                        }, a.createElement(c.xb, {
                            padding: {
                                x: 1,
                                top: 1
                            },
                            borderTop: !0
                        }, a.createElement(c.Pa, {
                            autoFocus: !0,
                            onChange: this.handleFilterChange,
                            placeholder: Object(s.d)("Search for Emotes", "EmotePickerCard"),
                            type: c.Ra.Text,
                            value: this.state.inputValue
                        })), this.renderTabContent())))
                    }, t.prototype.renderTabContent = function() {
                        return this.props.gqlError ? a.createElement(c.Va, null, a.createElement(c.V, {
                            "data-test-selector": "emote-picker-menu-error-text",
                            color: c.O.Error
                        }, Object(s.d)("Unable to load available emotes.", "EmotePickerCard"))) : this.props.loading ? a.createElement(c.Va, {
                            alignItems: c.f.Center,
                            display: c.W.Flex,
                            fullHeight: !0,
                            fullWidth: !0,
                            justifyContent: c.Ua.Center
                        }, a.createElement(c.Xa, null)) : "" !== this.state.filter ? this.renderSearchContent() : a.createElement(R.b, {
                            className: "emote-picker__tab-content"
                        }, a.createElement(c.Va, {
                            padding: {
                                x: 1
                            }
                        }, this.getFrequentEmotesGrid(), this.getChannelEmoteGrid(), this.getResidualEmoteGrids()))
                    }, t.prototype.getFrequentEmotesGrid = function() {
                        return this.props.frequentlyUsedEmotes.length > 0 ? a.createElement(c.Va, {
                            key: "emote-grid--frequent-emotes",
                            position: c.db.Relative,
                            padding: {
                                y: 1
                            },
                            className: "emote-picker__content-block"
                        }, a.createElement(c.Va, {
                            padding: {
                                x: 2
                            }
                        }, a.createElement(c.V, {
                            bold: !0,
                            color: c.O.Alt
                        }, Object(s.d)("Frequently Used Emotes", "EmotePickerCard"))), a.createElement(U.a, {
                            emotes: this.props.frequentlyUsedEmotes,
                            onClickEmote: this.onClickEmote,
                            locked: !1
                        })) : null
                    }, t.prototype.getChannelEmoteGrid = function() {
                        var e = this.props.channelSubscriptionProducts.reduce(function(e, t) {
                            return e.concat(t.emotes)
                        }, []);
                        return e.length > 0 ? a.createElement(c.Va, {
                            key: "emote-grid--channel-emotes",
                            position: c.db.Relative,
                            padding: {
                                y: 1
                            },
                            className: "emote-picker__content-block"
                        }, a.createElement(c.Va, {
                            padding: {
                                x: 2
                            }
                        }, a.createElement(c.V, {
                            bold: !0,
                            color: c.O.Alt
                        }, Object(s.d)("ThisChannel Placeholder", "EmotePickerCard"))), a.createElement(U.a, {
                            emotes: e,
                            onClickEmote: this.onClickEmote,
                            locked: !1
                        })) : null
                    }, t.prototype.getResidualEmoteGrids = function() {
                        var e = new Set;
                        this.props.channelSubscriptionProducts.forEach(function(t) {
                            t.emoteSetID && e.add(t.emoteSetID)
                        });
                        var t = [],
                            n = [];
                        this.props.allEmoteSets.filter(function(t) {
                            return !e.has(t.id)
                        }).reduce(function(e, t) {
                            return e.concat(t.emotes)
                        }, []).forEach(function(e) {
                            "0" === e.setID ? t.push(e) : n.push(e)
                        });
                        var i = [];
                        return n.length > 0 && i.push(a.createElement(c.Va, {
                            key: "emote-grid--non-global-emotes",
                            position: c.db.Relative,
                            padding: {
                                y: 1
                            },
                            className: "emote-picker__content-block"
                        }, a.createElement(c.Va, {
                            padding: {
                                x: 2
                            }
                        }, a.createElement(c.V, {
                            bold: !0,
                            color: c.O.Alt
                        }, Object(s.d)("Placeholder for Residual Emotes", "EmotePickerCard"))), a.createElement(U.a, {
                            emotes: n,
                            onClickEmote: this.onClickEmote,
                            locked: !1
                        }))), t.length > 0 && i.push(a.createElement(c.Va, {
                            key: "emote-grid--global-emotes",
                            position: c.db.Relative,
                            padding: {
                                y: 1
                            },
                            className: "emote-picker__content-block"
                        }, a.createElement(c.Va, {
                            padding: {
                                x: 2
                            }
                        }, a.createElement(c.V, {
                            bold: !0,
                            color: c.O.Alt
                        }, Object(s.d)("Global Twitch Emotes", "EmotePickerCard"))), a.createElement(U.a, {
                            emotes: t,
                            onClickEmote: this.onClickEmote,
                            locked: !1
                        }))), a.createElement(a.Fragment, null, i)
                    }, t.prototype.renderSearchContent = function() {
                        var e;
                        return e = this.state.filteredEmotes.length > 0 ? a.createElement(c.V, null, Object(s.d)('Search Results for "{inputValue}"', {
                            inputValue: this.state.inputValue
                        }, "EmotePickerCard")) : a.createElement(c.V, null, Object(s.d)('No Search Results for "{inputValue}"', {
                            inputValue: this.state.inputValue
                        }, "EmotePickerCard")), a.createElement(R.b, {
                            className: "emote-picker__tab-content"
                        }, a.createElement(c.Va, {
                            padding: 1
                        }, a.createElement(c.Va, {
                            position: c.db.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, e, a.createElement(U.a, {
                            emotes: this.state.filteredEmotes,
                            onClickEmote: this.onClickEmote,
                            locked: !1
                        }))))
                    }, t
                }(a.Component),
                H = n("DB+C"),
                G = function(e) {
                    function t(t) {
                        var n = e.call(this, t) || this;
                        n.handleSubEvent = function(e) {
                            e.action === A.a.ClickCheckout && n.checkAndDisplaySubscriptionCheckout(), Object(A.b)(r.__assign({}, e, {
                                action: A.a.ClickCheckout,
                                channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                                channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                                isMenuOpen: null,
                                hasSubCredit: null,
                                sub_location: "emote_picker",
                                modal: !1,
                                showPrimeContent: !0,
                                giftRecipient: null
                            }))
                        };
                        var i = {
                            allEmoteSets: [],
                            availableUpsells: [],
                            channelSubscriptionProducts: [],
                            channelTabVisible: !1,
                            frequentlyUsedEmotes: [],
                            gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                            gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                            subscribeTexts: [],
                            ownedChannelEmoteSets: [],
                            ownedSetIDs: new Set([])
                        };
                        return i = n.applyDataPropsToState(t, i), n.state = r.__assign({}, i), n
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        Object(y.b)(), this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                            gqlError: !0
                        });
                        else {
                            var t = this.applyDataPropsToState(e, this.state);
                            this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(r.__assign({}, t, {
                                gqlError: !1
                            }))
                        }
                        e.visible && !this.props.visible ? (this.props.openEmotePicker(), this.setState({
                            frequentlyUsedEmotes: Object(y.c)()
                        })) : this.props.visible && !e.visible && this.props.closeEmotePicker()
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.closeEmotePicker()
                    }, t.prototype.render = function() {
                        if (!this.props.visible) return null;
                        var e = this.props.channelData && this.props.channelData.user && this.props.channelData.user.campaignProperties && this.props.channelData.user.campaignProperties.domains && this.props.channelData.user.campaignProperties.domains.length > 0 || !1,
                            t = a.createElement(x, {
                                allEmoteSets: this.state.allEmoteSets,
                                availableUpsells: this.state.availableUpsells,
                                channelTabVisible: this.state.channelTabVisible,
                                channelID: this.props.channelOwnerID,
                                direction: this.props.direction,
                                emotePickerSessionID: this.props.emotePickerSessionID,
                                emotePickerSource: this.props.emotePickerSource,
                                gqlError: this.state.gqlError,
                                handleSubAction: this.handleSubEvent,
                                isEsportChannel: e,
                                loading: this.state.gqlLoading,
                                onClickEmote: this.props.onClickEmote,
                                ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                                roomID: this.props.roomID,
                                size: this.props.size,
                                subscribeTexts: this.state.subscribeTexts,
                                toggleVisibility: this.props.toggleVisibility
                            }),
                            n = a.createElement(V, {
                                allEmoteSets: this.state.allEmoteSets,
                                channelID: this.props.channelOwnerID,
                                channelSubscriptionProducts: this.state.channelSubscriptionProducts,
                                direction: this.props.direction,
                                emotePickerSessionID: this.props.emotePickerSessionID,
                                emotePickerSource: this.props.emotePickerSource,
                                frequentlyUsedEmotes: this.state.frequentlyUsedEmotes,
                                gqlError: this.state.gqlError,
                                loading: this.state.gqlLoading,
                                onClickEmote: this.props.onClickEmote,
                                roomID: this.props.roomID,
                                size: this.props.size,
                                toggleVisibility: this.props.toggleVisibility
                            });
                        return a.createElement(m.a, {
                            assignments: {
                                fallback: function() {
                                    return t
                                },
                                off: function() {
                                    return t
                                },
                                on: function() {
                                    return n
                                }
                            },
                            name: k.b.EmotePickerV2
                        })
                    }, t.prototype.checkDataLoaded = function(e) {
                        var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                            n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                        return t && n
                    }, t.prototype.checkForContent = function(e) {
                        var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                            n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                        return t || n
                    }, t.prototype.applyDataPropsToState = function(e, t) {
                        var n = r.__assign({}, t);
                        if (e.emoteSetsData && e.emoteSetsData.emoteSets) {
                            n.ownedSetIDs = new Set;
                            for (var i = 0, a = e.emoteSetsData.emoteSets; i < a.length; i++) {
                                var o = a[i];
                                o && o.id && n.ownedSetIDs.add(parseInt(o.id, 10))
                            }
                            n.allEmoteSets = Object(N.a)(e.emoteSetsData.emoteSets)
                        }
                        if (e.channelData && e.channelData.user) {
                            var c = void 0;
                            e.channelData.user.self && e.channelData.user.self.subscriptionBenefit && (c = e.channelData.user.self.subscriptionBenefit.platform), n.availableUpsells = function(e, t, n) {
                                var i = [];
                                return !n || n !== _.b.IOS && n !== _.b.Android ? (t.forEach(function(n, a) {
                                    var o = n.price;
                                    0 === a && Object(O.g)(t) && (o = Object(O.c)(t[0])), n.emotes && n.emotes.length && n.emoteSetID && !e.has(parseInt(n.emoteSetID, 10)) && i.push(r.__assign({}, n, {
                                        emotes: Object(N.e)(n.emotes, n.emoteSetID),
                                        level: a,
                                        price: o
                                    }))
                                }), i) : i
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts, c), n.channelSubscriptionProducts = function(e, t) {
                                return t.map(function(t) {
                                    return t.emotes && t.emoteSetID && !e.has(parseInt(t.emoteSetID, 10)) ? r.__assign({}, t, {
                                        emotes: t.emotes.map(function(e) {
                                            return r.__assign({}, e, {
                                                isLocked: !0
                                            })
                                        })
                                    }) : t
                                }).map(function(e) {
                                    return r.__assign({}, e, {
                                        emotes: Object(N.e)(e.emotes, e.emoteSetID)
                                    })
                                })
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts), n.subscribeTexts = function(e) {
                                for (var t = [], n = 0; n < e.length; n++) {
                                    var i = e[n],
                                        r = Object(I.a)(i.tier);
                                    null === r && (r = 1), 0 === n && i.emotes && i.emotes.length > 1 ? t[n] = Object(s.d)("Unlock {numEmotes, number} Sub Emotes", {
                                        numEmotes: i.emotes.length
                                    }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(s.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes && i.emotes.length > 1 ? t[n] = Object(s.d)("{numEmotes, number} Extra Tier {tier} Sub Emotes", {
                                        numEmotes: i.emotes.length,
                                        tier: r
                                    }, "assembleSubscribeTexts") : i.emotes && i.emotes.length && (t[n] = Object(s.d)("1 Extra Tier {tier} Sub Emote", {
                                        tier: r
                                    }, "assembleSubscribeTexts"))
                                }
                                return t
                            }(e.channelData.user.subscriptionProducts), n.ownedChannelEmoteSets = function(e, t) {
                                for (var n = [{
                                        id: "0",
                                        emotes: []
                                    }], i = 0, r = t; i < r.length; i++) {
                                    var a = r[i];
                                    a.emotes && a.emoteSetID && e.has(parseInt(a.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(N.e)(a.emotes, a.emoteSetID)))
                                }
                                return n[0].emotes.length ? n : []
                            }(n.ownedSetIDs, e.channelData.user.subscriptionProducts)
                        }
                        return n.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, n
                    }, t.prototype.subscriptionProductHasEmotes = function(e) {
                        return void 0 !== e.emoteSetID && !!e.emotes && e.emotes.length > 0
                    }, t.prototype.checkAndDisplaySubscriptionCheckout = function() {
                        if ("yes" === s.o.experiments.getAssignment(k.b.InstreamCheckout)) {
                            var e = s.m.get(b.b, ""),
                                t = s.m.get(b.c, ""),
                                n = s.m.get(b.a, ""),
                                i = Number(n);
                            e && (this.props.channelData && this.props.channelData.user && this.props.channelData.user.subscriptionProducts.map(function(e) {
                                return e.name
                            }).includes(e) ? this.props.sessionUser ? this.props.showSubscriptionCheckoutModal({
                                recipientLogin: t,
                                productName: e,
                                mysteryGiftCount: i
                            }) : this.props.showLoginModal() : Object(b.d)())
                        }
                    }, t
                }(a.Component);
            var W = Object(d.compose)(Object(i.connect)(function(e) {
                    return {
                        currentUserID: e.session.user && e.session.user.id,
                        emotePickerSessionID: e.chat && e.chat.emotePickerSessionID || null,
                        sessionUser: e.session.user,
                        isLoggedIn: Object(C.f)(e)
                    }
                }, function(e) {
                    return Object(u.bindActionCreators)({
                        closeEmotePicker: S.A,
                        openEmotePicker: S.M,
                        showLoginModal: Object(b.e)(v.a.EmotePickerSubscriptionButton),
                        showSubscriptionCheckoutModal: function(e) {
                            var t = r.__rest(e, []);
                            return Object(E.d)(p.a, {
                                component: "CheckoutModal",
                                loader: function() {
                                    return Promise.all([n.e(0), n.e(198)]).then(n.bind(null, "KJv/"))
                                },
                                componentProps: t
                            })
                        }
                    }, e)
                }), Object(h.a)(H, {
                    name: "channelData",
                    skip: function(e) {
                        return !e.channelOwnerID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                channelOwnerID: e.channelOwnerID
                            }
                        }
                    }
                }), Object(f.a)([{
                    topic: function(e) {
                        return "user-subscribe-events-v1." + e.currentUserID
                    },
                    mapMessageTypesToProps: {
                        "*": "subscriptionInfo"
                    },
                    skip: function(e) {
                        return !e.currentUserID
                    }
                }]), Object(T.c)("EmotePicker"), Object(g.a)())(G),
                Y = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasInteracted: !1,
                            isEmotePickerMenuVisible: !1,
                            isEmotePickerButtonVisible: !1
                        }, t.onClickOut = function() {
                            t.setState({
                                isEmotePickerMenuVisible: !1
                            })
                        }, t.onClickEmote = function(e, n) {
                            t.props.onClickEmote && t.props.onClickEmote(e, n)
                        }, t.toggleEmotePicker = function() {
                            t.setState(function(e) {
                                return {
                                    isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                                }
                            })
                        }, t.onEmotePickerDataLoaded = function(e) {
                            e && t.setState({
                                isEmotePickerButtonVisible: !0
                            })
                        }, t.onInteraction = function() {
                            return t.setState({
                                hasInteracted: !0
                            })
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                    }, t.prototype.render = function() {
                        var e = null;
                        this.state.isEmotePickerButtonVisible && (e = a.createElement(l, {
                            onClick: this.toggleEmotePicker
                        }));
                        var t = null;
                        this.hasInteractedOrPageload && (t = a.createElement(W, {
                            channelOwnerID: this.props.channelOwnerID,
                            emotePickerSource: this.props.emotePickerSource,
                            onClickEmote: this.onClickEmote,
                            onLoad: this.onEmotePickerDataLoaded,
                            toggleVisibility: this.toggleEmotePicker,
                            visible: this.state.isEmotePickerMenuVisible,
                            direction: this.props.direction
                        }));
                        var n = a.createElement(c.Va, r.__assign({
                            className: "emote-picker-and-button"
                        }, this.layoutProps), e, t);
                        return this.props.shouldCloseOnClickOut ? a.createElement(o.a, {
                            onClickOut: this.onClickOut
                        }, n) : n
                    }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                        get: function() {
                            return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "layoutProps", {
                        get: function() {
                            var e = {
                                attachTop: !!this.props.attachTop,
                                attachRight: !!this.props.attachRight,
                                attachBottom: !!this.props.attachBottom,
                                attachLeft: !!this.props.attachLeft,
                                padding: this.props.padding
                            };
                            return this.props.position && (e.position = this.props.position), e
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }(a.Component),
                z = Object(T.c)("EmotePicker")(Y);
            var q = Object(i.connect)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(z);
            n.d(t, "a", function() {
                return q
            }), n.d(t, "c", function() {
                return W
            }), n.d(t, !1, function() {
                return _.a
            }), n.d(t, !1, function() {
                return _.d
            }), n.d(t, !1, function() {
                return _.c
            }), n.d(t, !1, function() {
                return _.b
            }), n.d(t, "b", function() {
                return l
            })
        },
        nInp: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                r = Object(i.a)("MessageBuffer"),
                a = r.withChatServiceProvider,
                o = (0, r.withContext)(function(e) {
                    return {
                        messageBufferAPI: e.serviceAPI,
                        setMessageBufferAPI: e.setServiceAPI
                    }
                })
        },
        nkgB: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "MessageBuffer_Channel"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "chatSettings"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chatDelayMs"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 118
                }
            };
            n.loc.source = {
                body: "query MessageBuffer_Channel($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nchatSettings {\nchatDelayMs\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        oK83: function(e, t, n) {
            "use strict";
            var i, r;
            n.d(t, "a", function() {
                    return i
                }), n.d(t, "b", function() {
                    return r
                }),
                function(e) {
                    e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.room_message = 2] = "room_message", e[e.extension_message = 3] = "extension_message", e[e.viewer_list = 4] = "viewer_list", e[e.viewer_list_mod_section = 5] = "viewer_list_mod_section", e[e.member_list = 6] = "member_list", e[e.test = 7] = "test"
                }(i || (i = {})),
                function(e) {
                    e[e.Viewer = 0] = "Viewer", e[e.Extension = 1] = "Extension"
                }(r || (r = {}))
        },
        oe5X: function(e, t, n) {
            "use strict";
            var i = n("XmgI"),
                r = n("RcPG"),
                a = n("0FG4"),
                o = n("i6WW"),
                s = n("gTu3"),
                c = n("6j5V"),
                l = /^(['"*([{</]*)@((?:[^\u0000-\u007F]|[\w-])+)/;

            function d(e, t) {
                if (!t) return !1;
                var n = t.displayName,
                    i = t.login;
                return e === n || e.toLowerCase() === i
            }

            function u(e, t) {
                void 0 === t && (t = {});
                var n = t.cheers,
                    u = t.emotes,
                    f = t.links,
                    g = t.mentions,
                    b = p(e),
                    v = "",
                    E = 0;
                return m(b.reduce(function(e, t, m) {
                    if (h(t)) return v = "", e;
                    if (0 === v.length && (E = m), v += t, m !== b.length - 1 && !h(b[m + 1])) return e;
                    var p = u && Object(a.c)(v, E, u);
                    if (p) return e.concat(p);
                    var k = n && Object(i.d)(v, n);
                    if (k) return e.concat(k);
                    var C = f && Object(o.a)(v, f);
                    if (C) return e.concat(C);
                    var S = g && function(e, t) {
                        var n = e.match(l);
                        if (!n) return d(e, t.sessionUser) ? [{
                            type: r.a.CurrentUserHighlight,
                            content: e
                        }] : null;
                        var i = [],
                            a = n[1],
                            o = n[2],
                            u = e.slice(n[0].length);
                        a.length && i.push(Object(c.a)(a));
                        var m = s.a.Default;
                        return d(o, t.sessionUser) ? m = s.a.Recipient : t.sessionUser && t.sessionUser.login === t.senderLogin && (m = s.a.Sender), i.push({
                            type: r.a.Mention,
                            content: {
                                recipient: o,
                                currentUserMentionRelation: m
                            }
                        }), u.length && i.push(Object(c.a)(u)), i
                    }(v, g);
                    return S ? e.concat([S]) : e.concat(Object(c.a)(v))
                }, []))
            }

            function m(e) {
                return e.reduce(function(e, t, n) {
                    return 0 === n ? [].concat.call(e, t) : [].concat.call(e, Object(c.a)(" "), t)
                }, []).reduce(function(e, t, n) {
                    if (0 === n) return e.concat(t);
                    var i = e[e.length - 1];
                    return t.type === r.a.Text && i.type === r.a.Text ? (i.content = "" + i.content + t.content, e) : e.concat(t)
                }, [])
            }

            function p(e) {
                return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g) || []
            }

            function h(e) {
                return /\s/.test(e)
            }
            n.d(t, "a", function() {
                return u
            }), n.d(t, !1, function() {
                return m
            }), n.d(t, !1, function() {
                return p
            })
        },
        oi4T: function(e, t, n) {
            "use strict";
            var i, r = n("mrSG"),
                a = n("/7QA"),
                o = n("2xye");
            ! function(e) {
                e.Everyone = "everyone", e.ModsOnly = "mod", e.StreamChat = "twitch_chat", e.SubsOnly = "sub"
            }(i || (i = {}));
            var s = n("UJc8");
            n.d(t, "a", function() {
                return c
            }), n.d(t, "b", function() {
                return l
            }), n.d(t, "c", function() {
                return d
            });
            var c = function(e) {
                    var t;
                    switch (e.roomMinimumRole) {
                        case s.b.Everyone:
                            t = i.Everyone;
                            break;
                        case s.b.Moderator:
                            t = i.ModsOnly;
                            break;
                        case s.b.Subscriber:
                            t = i.SubsOnly;
                            break;
                        default:
                            t = i.StreamChat
                    }
                    var n = {
                        channel: e.channelLogin,
                        chatroom_type: t,
                        is_host_mode: e.isHostMode,
                        is_using_web_sockets: !0
                    };
                    return e.roomID && (n.chatroom_id = e.roomID), n
                },
                l = function(e) {
                    a.n.track(o.SpadeEventType.ChatRoomJoined, c(e))
                },
                d = function(e) {
                    a.n.track(o.SpadeEventType.ChatRoomWatched, r.__assign({}, c(e), {
                        channel_id: e.channelID
                    }))
                }
        },
        oijJ: function(e, t, n) {},
        okS7: function(e, t, n) {
            "use strict";
            n("kPBf");
            var i, r = n("mrSG"),
                a = n("17x9"),
                o = n("q1tI"),
                s = n("8Ad5"),
                c = n("TSYQ"),
                l = n("/7QA"),
                d = n("u5aL"),
                u = n("8/mp"),
                m = n("Ue10"),
                p = (n("JzSO"), "autocomplete-balloon-matches"),
                h = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                            noMatches: Object(l.d)("No matches.", "AutocompleteBalloon")
                        }, t.logger = l.j.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                            return t.props.matches.map(function(e, n) {
                                var i = t.state.selectedMatch,
                                    r = i && i.replacement === e.replacement,
                                    a = c("autocomplete-balloon__item", {
                                        "autocomplete-balloon__item--selected": r
                                    });
                                return o.createElement(m.Va, {
                                    key: "autocomplete-match-" + n,
                                    refDelegate: r ? t.focusOnOption : void 0,
                                    "data-test-selector": p
                                }, o.createElement(m.Na, {
                                    display: m.W.Block,
                                    fullWidth: !0
                                }, o.createElement("button", {
                                    onMouseEnter: t.handleMatchMouseEnter,
                                    className: a,
                                    "data-a-target": e.replacement,
                                    "data-click-index": n,
                                    onClick: t.onMatchClick
                                }, o.createElement(m.Va, {
                                    padding: {
                                        x: .5
                                    },
                                    display: m.W.Flex,
                                    alignItems: m.f.Center
                                }, e.element))))
                            })
                        }, t.handleMatchMouseEnter = function(e) {
                            var n = t.getMatchFromEvent(e);
                            n && t.setState({
                                selectedMatch: n
                            })
                        }, t.onMatchClick = function(e) {
                            var n = t.getMatchFromEvent(e);
                            n && t.props.onMatchSelect(n)
                        }, t.getMatchFromEvent = function(e) {
                            var n = t.props.matches,
                                i = e.currentTarget.getAttribute("data-click-index");
                            return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                        }, t.handleKeydown = function(e) {
                            var n = e.charCode || e.keyCode,
                                i = function() {
                                    e.preventDefault(), e.stopPropagation()
                                };
                            switch (n) {
                                case s.a.Tab:
                                case s.a.Enter:
                                    i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                    break;
                                case s.a.Up:
                                case s.a.Down:
                                    if (!t.state.selectedMatch || !t.props.matches.length) return;
                                    var r = t.props.matches.indexOf(t.state.selectedMatch);
                                    if (-1 === r) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                    i();
                                    var a = n === s.a.Up ? -1 : 1,
                                        o = t.getIndexWithinLength(r + a, t.props.matches.length),
                                        c = t.props.matches[o];
                                    t.setState({
                                        selectedMatch: c
                                    })
                            }
                        }, t.getIndexWithinLength = function(e, t) {
                            var n = e % t;
                            return n < 0 ? n + t : n
                        }, t.onResize = function() {
                            t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                        }, t.setContainerHeight = function() {
                            var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                            t.setState({
                                containerHeight: e
                            }), t.resizeAnimationFrame = 0
                        }, t.focusOnOption = function(e) {
                            if (e && t.autocompleteBalloonElement) {
                                var n = e.getBoundingClientRect(),
                                    i = t.autocompleteBalloonElement.getBoundingClientRect();
                                (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                            }
                        }, t.setAutocompleteBalloonElement = function(e) {
                            t.autocompleteBalloonElement = e
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                            selectedMatch: this.props.matches[0]
                        })
                    }, t.prototype.componentWillUnmount = function() {
                        window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = this,
                            n = e.matches.reduce(function(e, n, i) {
                                return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                            }, 0);
                        this.setState({
                            selectedMatch: e.matches[n]
                        })
                    }, t.prototype.render = function() {
                        var e;
                        return e = 0 === this.props.matches.length ? o.createElement(m.Va, {
                            padding: {
                                x: .5
                            },
                            "data-test-selector": "autocomplete-balloon-no-matches"
                        }, o.createElement(m.V, {
                            type: m.Nb.Span,
                            color: m.O.Alt2
                        }, this.messages.noMatches)) : this.renderMatches(), o.createElement(m.Va, {
                            position: m.db.Relative
                        }, o.createElement(d.a, {
                            onClickOut: this.props.onDismiss
                        }, o.createElement(m.u, {
                            direction: m.v.TopLeft,
                            "data-a-target": "autocomplete-balloon",
                            "data-test-selector": "autocomplete-balloon",
                            show: !0
                        }, o.createElement(m.Na, {
                            "data-test-selector": "autocomplete-matches-container",
                            className: "autocomplete-balloon",
                            overflow: m.Ya.Hidden,
                            display: m.W.Flex,
                            flexDirection: m.Y.Column
                        }, o.createElement("div", {
                            style: {
                                maxHeight: this.state.containerHeight
                            },
                            ref: this.setAutocompleteBalloonElement
                        }, o.createElement(u.b, null, o.createElement(m.Va, {
                            padding: {
                                y: 1
                            }
                        }, e)))))))
                    }, t
                }(o.Component),
                f = n("uu1w"),
                g = n("2xye"),
                b = {
                    Chat: "chat",
                    Feed: "feed",
                    Whisper: "whisper"
                },
                v = ":",
                E = "#",
                k = "@",
                C = function(e) {
                    switch (e) {
                        case f.a.Emote:
                            return v;
                        case f.a.Hashtag:
                            return E;
                        case f.a.Mention:
                            return k;
                        default:
                            return void l.j.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                    }
                },
                S = function(e) {
                    var t = C(e.autocompleteType);
                    if (t) {
                        var n = {
                            channel: e.channelLogin,
                            completed_text: e.completedText,
                            source: e.source,
                            start_character: t
                        };
                        l.n.track(g.SpadeEventType.ChatSuggestionComplete, n)
                    }
                };
            ! function(e) {
                e.Input = "input", e.TextArea = "textarea"
            }(i || (i = {}));
            var y = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            autocompleteType: f.a.None,
                            matchedCursorPosition: 0,
                            matches: null,
                            value: ""
                        }, t.providers = [], t.onChange = function(e) {
                            t.setState({
                                value: e.target.value
                            }, function() {
                                t.getMatches()
                            }), t.props.onChange && t.props.onChange(e)
                        }, t.onKeyDown = function(e) {
                            var n = function() {
                                    t.props.onKeyDown && t.props.onKeyDown(e)
                                },
                                i = function() {
                                    e.preventDefault(), e.stopPropagation()
                                },
                                r = e.charCode || e.keyCode;
                            if (r !== s.a.Enter) {
                                switch (r) {
                                    case s.a.Tab:
                                        if (!t.state.matches) t.getMatches(!0) && i();
                                        break;
                                    case s.a.Esc:
                                        t.state.matches && (i(), t.resetDisplayState())
                                }
                                n()
                            } else n()
                        }, t.setComponentRefDelegate = function(e) {
                            t.componentRef = e, t.props.componentRefDelegate && t.props.componentRefDelegate(e)
                        }, t.getMatches = function(e) {
                            var n = t.state.value;
                            if (0 === t.providers.length || 0 === n.length) return t.resetDisplayState(), !1;
                            var i = t.getCurrentCursorPosition();
                            if (i > n.length);
                            else
                                for (; i < n.length && !/\s/.test(n.charAt(i));) i++;
                            var r = n.substring(0, i);
                            if (0 === r.length || /\s/.test(r.substring(r.length - 1))) return t.resetDisplayState(), !1;
                            for (var a = r.split(/\s/), o = a[a.length - 1], s = 0, c = t.providers; s < c.length; s++) {
                                var l = c[s];
                                if (!e || l.canBeTriggeredByTab) {
                                    var d = l.getMatches(o, e);
                                    if (d) return t.setState({
                                        autocompleteType: l.autocompleteType,
                                        matchedCursorPosition: i,
                                        matches: d
                                    }), !0
                                }
                            }
                            return t.resetDisplayState(), !1
                        }, t.resetDisplayState = function(e, n) {
                            var i = r.__assign({}, t.state, {
                                autocompleteType: f.a.None,
                                matches: null
                            }, e || {});
                            t.setState(i, n)
                        }, t.insertReplacement = function(e) {
                            var n = t.state.value,
                                i = t.state.matchedCursorPosition,
                                a = n.substring(0, i),
                                o = a.lastIndexOf(e.current);
                            if (-1 === o) a = a.concat(e.replacement + " "), i = a.length;
                            else {
                                var s = a.substring(0, o),
                                    c = n.length > o + e.current.length ? n.substring(o + e.current.length) : "",
                                    l = c.startsWith(" ") ? e.replacement : e.replacement + " ";
                                a = "" + s + l + c, i = s.length + l.length
                            }
                            S(r.__assign({}, t.props.trackingParams || {}, {
                                autocompleteType: t.state.autocompleteType,
                                completedText: e.replacement,
                                source: t.props.suggestionSource
                            })), t.resetDisplayState({
                                value: a
                            }, function() {
                                t.setCursorPosition(i)
                            })
                        }, t.getCurrentCursorPosition = function() {
                            return t.componentRef.selectionStart || 0
                        }, t.setCursorPosition = function(e) {
                            t.componentRef && (t.componentRef.setSelectionRange(e, e), t.componentRef.focus())
                        }, t.registerAutocompleteProvider = function(e) {
                            return t.providers.push(e),
                                function() {
                                    var n = t.providers.indexOf(e);
                                    t.providers.splice(n, 1)
                                }
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.refDelegate && this.props.refDelegate(this)
                    }, t.prototype.getChildContext = function() {
                        return {
                            registerAutocompleteProvider: this.registerAutocompleteProvider
                        }
                    }, t.prototype.componentWillUpdate = function(e, t) {
                        !this.state.matches && t.matches && function(e) {
                            var t = C(e.autocompleteType);
                            if (t) {
                                var n = {
                                    source: e.source,
                                    start_character: t
                                };
                                l.n.track(g.SpadeEventType.ChatSuggestion, n)
                            }
                        }({
                            autocompleteType: t.autocompleteType,
                            source: e.suggestionSource
                        })
                    }, t.prototype.componentDidUpdate = function(e, t) {
                        t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                    }, t.prototype.render = function() {
                        var e = r.__assign({}, this.props, {
                            onChange: this.onChange,
                            onKeyDown: this.onKeyDown,
                            refDelegate: this.setComponentRefDelegate,
                            value: this.state.value
                        });
                        return o.createElement(m.Va, null, this.state.matches && o.createElement(h, {
                            matches: this.state.matches,
                            onMatchSelect: this.insertReplacement,
                            onDismiss: this.resetDisplayState,
                            containerElement: this.props.containerElement
                        }), this.props.componentType === i.Input ? o.createElement(m.Pa, r.__assign({}, e, {
                            type: e.type || m.Ra.Text
                        })) : o.createElement(m.Kb, r.__assign({}, e)), this.props.children)
                    }, t.prototype.getValue = function() {
                        return this.state.value
                    }, t.prototype.setValue = function(e) {
                        this.resetDisplayState({
                            value: e
                        })
                    }, t.childContextTypes = {
                        registerAutocompleteProvider: a.func
                    }, t
                }(o.Component),
                N = n("lZdE"),
                _ = n("OpME"),
                O = (n("gDzh"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.autocompleteType = f.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                            return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                        }, t.getMatchedEmotes = function(e) {
                            var n = t.state.hydratedEmotes;
                            if (!n || 0 === n.length) return null;
                            var i = e.substring(1),
                                r = n.reduce(function(e, n) {
                                    var r = n.emotes.filter(function(e) {
                                        if (e.token) return t.doesEmoteMatchTerm(e, i)
                                    });
                                    return e.concat([r])
                                }, []).filter(function(e) {
                                    return e.length > 0
                                }).reduce(function(e, t) {
                                    return e.concat(t)
                                }, []);
                            return r = Object(_.d)(r), (r = Object(_.f)(r, i)).map(function(e) {
                                return {
                                    current: ":" + i,
                                    replacement: e.token,
                                    element: t.renderEmoteSuggestion(e)
                                }
                            })
                        }, t.doesEmoteMatchTerm = function(e, t) {
                            var n = new RegExp("^" + Object(N.a)(t), "i");
                            if (e.token.match(n)) return !0;
                            var i = new RegExp("" + Object(N.a)(t.charAt(0)).toUpperCase()),
                                r = new RegExp("^" + Object(N.a)(t.slice(1)), "i"),
                                a = e.token.match(i);
                            return !!(a && a.index && e.token.slice(a.index + 1).match(r))
                        }, t.renderEmoteSuggestion = function(e) {
                            return [o.createElement(m.Va, {
                                padding: {
                                    right: .5
                                },
                                flexShrink: 0,
                                key: "emote-img-" + e.id
                            }, o.createElement("img", {
                                className: "emote-autocomplete-provider__image",
                                srcSet: e.srcSet
                            })), o.createElement(m.V, {
                                type: m.Nb.Span,
                                key: "emote-text-" + e.id,
                                ellipsis: !0
                            }, e.token)]
                        }, t.hydrateEmotes = function(e) {
                            for (var n = [], i = 0, r = e; i < r.length; i++) {
                                var a = r[i];
                                a && a.id && a.emotes && n.push({
                                    id: a.id,
                                    emotes: Object(_.b)(a.emotes)
                                })
                            }
                            t.setState({
                                hydratedEmotes: n
                            })
                        }, t
                    }
                    return r.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        e.emotes && this.props.emotes !== e.emotes && this.hydrateEmotes(e.emotes)
                    }, t.prototype.componentWillMount = function() {
                        this.hydrateEmotes(this.props.emotes)
                    }, t.prototype.componentDidMount = function() {
                        this.unregister = this.context.registerAutocompleteProvider(this)
                    }, t.prototype.componentWillUnmount = function() {
                        this.unregister()
                    }, t.prototype.render = function() {
                        return null
                    }, t.contextTypes = {
                        registerAutocompleteProvider: a.func
                    }, t
                }(o.Component));
            n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
                return y
            }), n.d(t, "a", function() {
                return i
            }), n.d(t, !1, function() {}), n.d(t, "d", function() {
                return O
            }), n.d(t, "c", function() {
                return b
            })
        },
        opIq: function(e, t, n) {
            "use strict";
            var i, r = n("/MKj"),
                a = n("aCAx"),
                o = n("YV3K"),
                s = n("kRBY"),
                c = n("mrSG"),
                l = n("q1tI"),
                d = n("fvjX"),
                u = n("/7QA"),
                m = n("cZKs"),
                p = n("yR8l"),
                h = n("geRD");
            ! function(e) {
                e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
            }(i || (i = {}));
            var f = n("mZsS"),
                g = n("RiD7"),
                b = n("Ue10"),
                v = n("VR5Q"),
                E = (n("yGGv"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                            return c.__awaiter(t, void 0, void 0, function() {
                                var t, n, r, a, o;
                                return c.__generator(this, function(s) {
                                    switch (s.label) {
                                        case 0:
                                            if (e.origin !== window.location.origin) return [2];
                                            if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                            switch (t.type) {
                                                case f.a.Ready:
                                                    return [3, 1];
                                                case f.a.RequestAd:
                                                    return [3, 2];
                                                case f.a.Dimensions:
                                                    return [3, 3];
                                                case f.a.OnStart:
                                                    return [3, 4];
                                                case f.a.OnCredit:
                                                    return [3, 5];
                                                case f.a.OnClose:
                                                case f.a.OnFinish:
                                                case f.a.LimitReached:
                                                case f.a.Adblock:
                                                case f.a.OnError:
                                                    return [3, 9]
                                            }
                                            return [3, 10];
                                        case 1:
                                            return n = {
                                                msgSrc: "wateb-ad-modal",
                                                tuid: this.props.tuid
                                            }, e.source && e.source.postMessage(n, "*"), [2];
                                        case 2:
                                            try {
                                                if (!(r = JSON.parse(t.activityJSON))) return [2];
                                                Object(g.g)({
                                                    campaignID: r.campaign_id.toString(),
                                                    requestID: t.requestID,
                                                    requestMethod: this.props.requestRef
                                                })
                                            } catch (e) {}
                                            return [2];
                                        case 3:
                                            return t.height && t.width && this.setState({
                                                customDimensions: {
                                                    height: t.height,
                                                    width: t.width
                                                }
                                            }), [3, 10];
                                        case 4:
                                            try {
                                                if (!(r = JSON.parse(t.activityJSON))) return [2];
                                                Object(g.f)({
                                                    requestID: t.requestID,
                                                    adblock: !1,
                                                    campaignID: r.campaign_id.toString()
                                                })
                                            } catch (e) {}
                                            return [2];
                                        case 5:
                                            return s.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(h.a)({
                                                args: t.engagement.signature_argument_string,
                                                signature: t.engagement.signature,
                                                trueXAd: {
                                                    creativeID: t.engagement.ad.creative_id,
                                                    campaignID: t.engagement.ad.campaign_id,
                                                    name: t.engagement.ad.name,
                                                    currencyAmount: t.engagement.ad.currency_amount
                                                },
                                                targetID: this.props.channelID
                                            }))];
                                        case 6:
                                            return a = s.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(a.data.redeemTrueXAd.grantedBits), [3, 8];
                                        case 7:
                                            return o = s.sent(), u.j.warn("Error while redeeming bits for truex ad", o), this.props.onError && this.props.onError(i.Unknown), [3, 8];
                                        case 8:
                                            return [3, 10];
                                        case 9:
                                            return this.props.onError && (t.type === f.a.LimitReached ? this.props.onError(i.LimitReached) : t.type === f.a.Adblock ? this.props.onError(i.Adblock) : t.type === f.a.OnError ? this.props.onError(i.Unknown) : this.hasAwarded || this.props.onError(i.ExitEarly)), this.props.closeModal(), [3, 10];
                                        case 10:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return c.__extends(t, e), t.prototype.componentWillMount = function() {
                        window.addEventListener("message", this.messageHandler)
                    }, t.prototype.componentWillUnmount = function() {
                        window.removeEventListener("message", this.messageHandler)
                    }, t.prototype.render = function() {
                        return l.createElement(b.xb, {
                            background: b.r.Base
                        }, l.createElement("div", {
                            className: "t-watch-ads-modal",
                            style: this.state.customDimensions
                        }, l.createElement(m.a, null), l.createElement("iframe", {
                            src: "/products/bits/ad"
                        })))
                    }, t = c.__decorate([Object(p.a)(v, {
                        name: "redeemTrueXAd"
                    })], t)
                }(l.Component));
            var k, C = Object(r.connect)(null, function(e) {
                    return Object(d.bindActionCreators)({
                        closeModal: a.c
                    }, e)
                })(E),
                S = n("TSYQ"),
                y = n("oJmH"),
                N = n("edgk"),
                _ = n("jv9u"),
                O = n("8/mp");

            function I(e) {
                return c.__awaiter(this, void 0, void 0, function() {
                    var t, n, i, r, a;
                    return c.__generator(this, function(o) {
                        switch (o.label) {
                            case 0:
                                if (t = u.b.get("bits_truex_partner_hash", ""), !(n = u.b.get("bits_truex_api_url", "")) || !t) return u.j.warn("Truex API info missing from dynamic settings"), [2, k.Error];
                                o.label = 1;
                            case 1:
                                return o.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                            case 2:
                                return (i = o.sent()).ok ? [4, i.json()] : [3, 4];
                            case 3:
                                if ((r = o.sent()) && Array.isArray(r) && r.length) return [2, k.Available];
                                o.label = 4;
                            case 4:
                                return [2, k.Unavailable];
                            case 5:
                                return a = o.sent(), u.j.warn("Failed checking ad availability from TrueX, probably due to AdBlock", a), [2, k.AdBlocked];
                            case 6:
                                return [2]
                        }
                    })
                })
            }! function(e) {
                e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
            }(k || (k = {}));
            var T, A = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onWatchAdClick = function() {
                            t.props.trackBitsCardInteraction(g.a.WatchAd), t.props.onWatchAdClick()
                        }, t
                    }
                    return c.__extends(t, e), t.prototype.render = function() {
                        var e = null;
                        return this.props.disableWatchAd && (e = Object(u.d)("Try again later", "Bits--WatchAdOffer")), l.createElement(b.xb, {
                            className: "bits-buy-card__offer-row",
                            display: b.W.Flex,
                            flexShrink: 0,
                            borderBottom: !0,
                            justifyContent: b.Ua.Between,
                            flexWrap: b.Z.NoWrap,
                            padding: {
                                x: 2,
                                y: 1
                            }
                        }, l.createElement(b.Va, {
                            padding: {
                                right: 4
                            }
                        }, l.createElement("strong", null, Object(u.d)("Get {minBitsCount} or more Bits by watching short ads", {
                            minBitsCount: this.props.minPayout
                        }, "Bits--WatchAdOffer"))), l.createElement(b.Va, {
                            flexShrink: 0,
                            display: b.W.Flex,
                            flexDirection: b.Y.Column,
                            alignItems: b.f.End
                        }, l.createElement(b.z, {
                            type: b.F.Hollow,
                            "data-a-target": "bits-watch-ad",
                            onClick: this.onWatchAdClick,
                            disabled: this.props.disableWatchAd
                        }, Object(u.d)("Watch Ad", "Bits--WatchAdOffer")), e && l.createElement(b.Va, {
                            className: "bits-buy-card__sub-text",
                            alignSelf: b.g.Stretch,
                            textAlign: b.Jb.Center,
                            margin: {
                                top: .5
                            }
                        }, e)))
                    }, t
                }(l.Component),
                D = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
                R = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            enableWatchAd: !0
                        }, t
                    }
                    return c.__extends(t, e), t.prototype.componentWillMount = function() {
                        return c.__awaiter(this, void 0, void 0, function() {
                            var e;
                            return c.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, I(this.props.truexUserID)];
                                    case 1:
                                        return e = t.sent(), Object(g.e)({
                                            channel: this.props.channelLogin,
                                            channelID: this.props.channelID,
                                            available: e === k.Available
                                        }), e !== k.Available && e !== k.AdBlocked && this.setState({
                                            enableWatchAd: !1
                                        }), [2]
                                }
                            })
                        })
                    }, t.prototype.render = function() {
                        return D.test(navigator.userAgent) ? null : l.createElement(A, c.__assign({}, this.props, {
                            disableWatchAd: !this.state.enableWatchAd
                        }))
                    }, t
                }(l.Component),
                M = n("lhih"),
                L = n("5zXJ"),
                w = n("XmgI"),
                U = n("ebRM"),
                B = n("4h+t"),
                P = n("x1M1"),
                F = (n("byRF"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleBuyClick = function(e) {
                            var n = t.props.channelID || "",
                                i = Object(U.b)({
                                    trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                    channelID: n,
                                    purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                    bitsAmount: e.currentTarget.dataset.bitsAmount,
                                    closeAllBits: t.props.closeAllBits,
                                    location: t.props.location
                                });
                            i && (t.props.onBuyPopupClose(i), t.props.onClose())
                        }, t
                    }
                    return c.__extends(t, e), t.prototype.render = function() {
                        if (this.props.offer.type === M.a) {
                            if (!this.props.channelLogin) return null;
                            var e = this.props.currentUserSHA || "";
                            return l.createElement(R, {
                                key: "wateb",
                                minPayout: this.props.offer.bits,
                                onWatchAdClick: this.props.handleWatchAdClick,
                                truexUserID: e,
                                channelID: this.props.channelID || "",
                                channelLogin: this.props.channelLogin,
                                trackBitsCardInteraction: this.props.trackBitsCardInteraction
                            })
                        }
                        var t = null;
                        Object(U.c)(this.props.offer) ? t = l.createElement(b.Va, {
                            className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                            "data-test-selector": "first-time-promo-form"
                        }, l.createElement(b.V, {
                            type: b.Nb.Strong,
                            fontSize: b.Aa.Size6
                        }, Object(u.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(U.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === M.c ? t = l.createElement(b.Va, {
                            className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                            "data-test-selector": "black-friday-promo-form"
                        }, l.createElement(b.V, {
                            type: b.Nb.Strong,
                            fontSize: b.Aa.Size6
                        }, Object(u.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))) : Object(U.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === M.d && (t = l.createElement(b.Va, {
                            className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                            "data-test-selector": "prime-promo-promo-form"
                        }, l.createElement(b.V, {
                            type: b.Nb.Strong,
                            fontSize: b.Aa.Size6
                        }, Object(u.d)("Twitch Prime Bits Discount", "Bits--BuyCard"))));
                        var n = null;
                        this.props.offer.discount && (n = l.createElement("div", {
                            className: "bits-buy-card-offer-row__sub-text",
                            "data-test-selector": "discount-subtext-form"
                        }, Object(u.d)("{percentOff,number,percent} discount", {
                            percentOff: this.props.offer.discount
                        }, "Bits--BuyCard")));
                        var i = null;
                        (Object(U.c)(this.props.offer) || Object(U.e)(this.props.offer)) && (i = l.createElement("div", {
                            className: "bits-buy-card-offer-row__sub-text",
                            "data-test-selector": "one-per-account-form"
                        }, Object(u.d)("one per account", "Bits--BuyCard")));
                        var r = {
                                className: "bits-buy-card-offer-row",
                                flexShrink: 0,
                                display: b.W.Flex,
                                justifyContent: b.Ua.Center,
                                flexDirection: b.Y.Column,
                                padding: {
                                    x: 2,
                                    y: 1
                                }
                            },
                            a = l.createElement(l.Fragment, null, t, l.createElement(b.Va, {
                                display: b.W.Flex,
                                justifyContent: b.Ua.Between,
                                alignItems: b.f.Center
                            }, l.createElement(b.Va, {
                                flexGrow: 1
                            }, l.createElement(b.V, {
                                type: b.Nb.H5,
                                color: b.O.Base,
                                bold: !0
                            }, Object(u.d)("{bits} Bits", {
                                bits: this.props.offer.bits
                            }, "Bits--BuyCard")), this.getAvailableTiers(this.props.offer.bits)), l.createElement(b.Va, {
                                flexShrink: 0,
                                display: b.W.Flex,
                                flexDirection: b.Y.Column,
                                alignItems: b.f.End
                            }, l.createElement(b.z, {
                                onClick: this.handleBuyClick,
                                "data-purchase-url": this.props.offer.url,
                                "data-bits-amount": this.props.offer.bits,
                                "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                            }, this.props.offer.price), (n || i) && l.createElement(b.Va, {
                                alignSelf: b.g.Stretch,
                                textAlign: b.Jb.Right,
                                margin: {
                                    top: .5
                                }
                            }, n, i))));
                        return l.createElement(l.Fragment, null, this.props.isLastRow ? l.createElement(b.Va, c.__assign({}, r), a) : l.createElement(b.xb, c.__assign({}, r, {
                            borderBottom: !0
                        }), a))
                    }, t.prototype.getAvailableTiers = function(e) {
                        var t = this.props.bitsConfig && this.props.bitsConfig.indexedActions[L.l];
                        t || (t = Object(B.b)());
                        var n = t.orderedTiers.filter(function(t) {
                            return t.bits <= e
                        }).reverse();
                        return l.createElement(b.Va, {
                            padding: {
                                top: .5
                            },
                            className: "bits-buy-card-offer-row__tier-bits-images"
                        }, n.map(function(e) {
                            return l.createElement(P.a, {
                                key: e.bits,
                                sources: Object(w.c)(e, 2, !1)
                            })
                        }))
                    }, t
                }(l.Component)),
                j = (n("mHh5"), function(e) {
                    var t = [],
                        n = [],
                        i = null;
                    return e.offers.forEach(function(r, a) {
                        var o = l.createElement(F, {
                                key: r.id,
                                offer: r,
                                isLastRow: a >= e.offers.length,
                                bitsConfig: e.bitsConfig,
                                channelID: e.channelID,
                                channelLogin: e.channelLogin,
                                currentUserSHA: e.currentUserSHA,
                                location: e.location,
                                onClose: e.onClose,
                                onBuyPopupClose: e.onBuyPopupClose,
                                handleWatchAdClick: e.handleWatchAdClick,
                                closeAllBits: e.closeAllBits,
                                trackBitsCardInteraction: e.trackBitsCardInteraction
                            }),
                            s = Object(U.d)(r),
                            c = Object(U.c)(r),
                            d = r.type === M.a;
                        c && !e.hidePromos ? t.push(o) : s && !c ? t.push(o) : d && !e.hideWateb ? i = o : d || s || n.push(o)
                    }), e.fullsize ? l.createElement(b.Va, {
                        className: "bits-buy-card-offers__full-size",
                        flexGrow: 1,
                        flexWrap: b.Z.NoWrap,
                        display: b.W.Flex,
                        flexDirection: b.Y.Column,
                        fullWidth: !0
                    }, i, t, n) : l.createElement(O.b, {
                        className: "bits-buy-card-offers__scroll-view"
                    }, l.createElement(b.Va, {
                        flexGrow: 1,
                        flexWrap: b.Z.NoWrap,
                        display: b.W.Flex,
                        flexDirection: b.Y.Column
                    }, i, t, n))
                }),
                x = function(e) {
                    var t = l.createElement(b.V, {
                        type: b.Nb.P,
                        color: b.O.Alt
                    }, Object(u.d)("Prices are shown in <x:bold>{currencyCode}</x:bold>", {
                        "x:bold": function(e) {
                            return l.createElement(b.V, {
                                type: b.Nb.Span,
                                bold: !0
                            }, e)
                        },
                        currencyCode: e.currencyCode
                    }, "Bits--BuyCard"));
                    e.pricesIncludeVAT && (t = l.createElement(b.V, {
                        "data-test-selector": "prices-include-vat-selector",
                        type: b.Nb.P,
                        color: b.O.Alt
                    }, Object(u.d)("Prices are shown in <x:bold>{currencyCode}</x:bold> and <x:bold>include VAT</x:bold>", {
                        "x:bold": function(e) {
                            return l.createElement(b.V, {
                                type: b.Nb.Span,
                                bold: !0
                            }, e)
                        },
                        currencyCode: e.currencyCode
                    }, "Bits--BuyCard")));
                    var n = null;
                    e.minBitsToCheer && e.minBitsToCheer > 1 && (n = l.createElement(b.V, {
                        "data-test-selector": "min-bits-to-cheer-selector",
                        color: b.O.Alt
                    }, Object(u.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                        displayName: e.displayName,
                        minBits: e.minBitsToCheer
                    }, "Bits--BuyCard")));
                    var i = null;
                    return void 0 !== e.bitsBalance && null !== e.bitsBalance && (i = l.createElement(b.V, {
                        "data-test-selector": "bits-balance-header-selector",
                        color: b.O.Alt
                    }, Object(u.d)("You have {totalBits} Bits", {
                        totalBits: l.createElement("strong", {
                            "data-a-target": "buy-card-bits-count"
                        }, e.bitsBalance)
                    }, "Bits--BuyCard"))), l.createElement(b.xb, {
                        className: "bits-buy-card-header",
                        padding: 1,
                        borderBottom: !0,
                        flexShrink: 0,
                        fullWidth: !0
                    }, l.createElement(b.Va, null, e.location === g.b.ChatTooltip && l.createElement(b.V, {
                        type: b.Nb.H4,
                        color: b.O.Alt
                    }, Object(u.d)("Purchase Bits", "Bits--BuyCard")), t), e.location === g.b.ChatTooltip && l.createElement(b.Va, {
                        margin: {
                            top: 1
                        }
                    }, i, n))
                },
                V = n("4Wd7"),
                H = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onWatchAnother = function() {
                            t.props.trackBitsCardInteraction(g.a.WatchAnotherAd), t.props.onWatchAnother && t.props.onWatchAnother()
                        }, t
                    }
                    return c.__extends(t, e), t.prototype.render = function() {
                        return l.createElement(b.Va, {
                            display: b.W.Flex,
                            flexGrow: 1,
                            flexDirection: b.Y.Column,
                            alignItems: b.f.Center,
                            fullWidth: !0,
                            flexWrap: b.Z.NoWrap,
                            padding: {
                                y: 1
                            }
                        }, l.createElement(V.a, {
                            prefix: "cheer",
                            amount: this.props.amount,
                            bitsConfig: this.props.bitsConfig,
                            showAmount: !0,
                            showImage: !0
                        }), l.createElement(b.Va, {
                            display: b.W.Flex,
                            padding: {
                                top: 1
                            },
                            flexGrow: 1,
                            flexDirection: b.Y.Column,
                            alignItems: b.f.Center,
                            flexWrap: b.Z.NoWrap
                        }, l.createElement(b.V, {
                            type: b.Nb.H4,
                            bold: !0
                        }, Object(u.d)("You got {bitsAmount,number} Bits!", {
                            bitsAmount: this.props.amount
                        }, "Bits--WatchAdAward")), l.createElement(b.Na, {
                            padding: {
                                top: 1
                            }
                        }, l.createElement(b.V, {
                            color: b.O.Alt2
                        }, Object(u.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                            bitsAmount: this.props.amount
                        }, "Bits--WatchAdAward"), l.createElement("br", null), Object(u.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), l.createElement(b.Va, {
                            display: b.W.Flex,
                            padding: {
                                x: 1,
                                top: 3
                            },
                            alignSelf: b.g.Stretch,
                            justifyContent: b.Ua.Between
                        }, l.createElement(b.z, {
                            onClick: this.props.onStartCheering
                        }, Object(u.d)("Start Cheering", "Bits--WatchAdAward")), l.createElement(b.z, {
                            type: b.F.Hollow,
                            "data-a-target": "bits-watch-another-ad",
                            onClick: this.onWatchAnother,
                            disabled: !this.props.hasAdAvailable
                        }, Object(u.d)("Watch Another", "Bits--WatchAdAward"))))
                    }, t
                }(l.Component),
                G = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            hasAdAvailable: !0
                        }, t
                    }
                    return c.__extends(t, e), t.prototype.componentWillMount = function() {
                        return c.__awaiter(this, void 0, void 0, function() {
                            return c.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        return [4, I(this.props.truexUserID)];
                                    case 1:
                                        return e.sent() !== k.Available && this.setState({
                                            hasAdAvailable: !1
                                        }), [2]
                                }
                            })
                        })
                    }, t.prototype.render = function() {
                        return l.createElement(H, c.__assign({}, this.props, {
                            hasAdAvailable: this.state.hasAdAvailable
                        }))
                    }, t
                }(l.Component),
                W = (n("7APm"), function(e) {
                    var t = Object(u.d)("Something's wrong!", "Bits--WatchAdError"),
                        n = Object(u.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                        r = "adserrorgeneric";
                    switch (e.type) {
                        case i.Adblock:
                            r = "adserroradblock", n = Object(u.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                            break;
                        case i.LimitReached:
                            r = "adserrorlimit", t = Object(u.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(u.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                            break;
                        case i.ExitEarly:
                            n = Object(u.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                    }
                    var a = l.createElement(b.Va, {
                        className: "watch-ad-error__footer",
                        display: b.W.Flex,
                        padding: {
                            top: 2
                        },
                        alignSelf: b.g.Stretch,
                        justifyContent: b.Ua.Center
                    }, l.createElement(b.z, {
                        onClick: e.onTryAgain
                    }, Object(u.d)("Try Again", "Bits--WatchAdError")));
                    return e.type === i.LimitReached && (a = l.createElement(b.Va, {
                        className: "watch-ad-error__footer",
                        display: b.W.Flex,
                        padding: {
                            top: 2
                        },
                        alignSelf: b.g.Stretch,
                        justifyContent: b.Ua.Between
                    }, l.createElement(b.z, {
                        onClick: e.onClose
                    }, Object(u.d)("Got It", "Bits--WatchAdError")), l.createElement(b.z, {
                        onClick: e.onTryAgain,
                        type: b.F.Hollow
                    }, Object(u.d)("Buy Bits", "Bits--WatchAdError")))), l.createElement(b.Va, {
                        padding: {
                            x: 1
                        },
                        display: b.W.Flex,
                        flexGrow: 1,
                        flexDirection: b.Y.Column,
                        alignItems: b.f.Center,
                        fullWidth: !0,
                        flexWrap: b.Z.NoWrap
                    }, l.createElement(b.Va, {
                        padding: {
                            y: 2
                        }
                    }, l.createElement("img", {
                        className: "watch-ad-error__error-image",
                        src: L.b + "/light/static/1/" + r + ".png"
                    })), l.createElement(b.Va, {
                        padding: {
                            bottom: 1
                        }
                    }, l.createElement(b.V, {
                        type: b.Nb.H4,
                        bold: !0
                    }, t)), l.createElement(b.V, {
                        color: b.O.Alt2
                    }, n), a)
                }),
                Y = n("GnwI"),
                z = n("zmay"),
                q = (n("NvZ5"), "storage.wateb.agreedToWatebTerms.v1"),
                K = "bits-show-wateb-terms",
                Q = "bits-agree-wateb-terms";
            ! function(e) {
                e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
            }(T || (T = {}));
            var X = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            wateb: T.Inactive,
                            watebError: null,
                            bitsAwarded: 0,
                            showWatebTerms: !1,
                            agreedToWatebTerms: u.l.get(q, !1)
                        }, t.onBuyPopupClose = function(e) {
                            Object(N.a)(e, function() {
                                t.props.data && t.props.data.refetch()
                            })
                        }, t.onAdBitsAwarded = function(e) {
                            t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                                wateb: T.Awarded,
                                bitsAwarded: e
                            })
                        }, t.renderWatebTerms = function(e) {
                            return l.createElement(b.Va, {
                                className: e,
                                textAlign: b.Jb.Left,
                                fullWidth: !0,
                                padding: {
                                    x: 2,
                                    bottom: 2,
                                    top: 5
                                },
                                "data-a-target": K
                            }, l.createElement(b.Va, {
                                position: b.db.Absolute,
                                padding: {
                                    top: .5,
                                    left: .5
                                },
                                attachLeft: !0,
                                attachTop: !0
                            }, l.createElement("div", {
                                key: "Bits--back-edit",
                                style: {
                                    cursor: "pointer"
                                },
                                onClick: t.onCloseWatebTerms
                            }, l.createElement(b.V, {
                                color: b.O.Link,
                                type: b.Nb.Span
                            }, l.createElement(b.mb, {
                                asset: b.nb.ChatSettingsBack,
                                height: 10,
                                width: 10
                            }), Object(u.d)("Back", "Bits--Watch-Ad-Terms")))), l.createElement(b.Va, {
                                padding: {
                                    bottom: 2
                                }
                            }, l.createElement(b.V, {
                                type: b.Nb.Span
                            }, Object(u.d)("Before continuing to watch ads to earn Bits, we remind you that the <x:link>Bits Acceptable Use Policy</x:link> applies to your participation with this feature and any Bits you may obtain. As a reminder, you may not:", {
                                "x:link": function(e) {
                                    return l.createElement("a", {
                                        href: "https://www.twitch.tv/p/legal/bits-acceptable-use/",
                                        target: "_blank",
                                        rel: "noopener noreferrer"
                                    }, e)
                                }
                            }, "Bits--Watch-Ad-Terms")), l.createElement(b.Va, {
                                margin: {
                                    y: 1
                                }
                            }, l.createElement("li", null, Object(u.d)("Obtain Bits to Cheer on your own channel via this feature", "Bits--Watch-Ad-Terms")), l.createElement("li", null, Object(u.d)("Collect Bits via this feature through the use of multiple accounts, robots, or other automated means", "Bits--Watch-Ad-Terms")))), l.createElement(b.Va, {
                                display: b.W.Flex,
                                justifyContent: b.Ua.Center
                            }, l.createElement(b.z, {
                                size: b.D.Small,
                                onClick: t.onAgreeToWatebTerms,
                                "data-a-target": Q
                            }, Object(u.d)("Continue", "Bits--Watch-Ad-Terms"))))
                        }, t.onAgreeToWatebTerms = function() {
                            u.l.set(q, !0), t.setState({
                                agreedToWatebTerms: !0,
                                showWatebTerms: !1
                            }), t.showWatchAdModal()
                        }, t.onCloseWatebTerms = function() {
                            t.setState({
                                showWatebTerms: !1
                            })
                        }, t.handleWatchAdClick = function() {
                            return c.__awaiter(t, void 0, void 0, function() {
                                return c.__generator(this, function(e) {
                                    return this.state.agreedToWatebTerms ? (this.showWatchAdModal(), [2]) : (this.setState({
                                        showWatebTerms: !0
                                    }), [2])
                                })
                            })
                        }, t.receiveAdErrorState = function(e) {
                            t.setState({
                                wateb: T.Error,
                                watebError: e
                            })
                        }, t.resetAdErrorState = function() {
                            t.state.wateb === T.Error && (t.setState({
                                wateb: T.Inactive
                            }), t.props.data && t.props.data.refetch())
                        }, t
                    }
                    return c.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                        return !e.adModalOpen
                    }, t.prototype.render = function() {
                        var e = this.props.location === g.b.ChatTooltip,
                            t = S({
                                "bits-buy-card": !0,
                                "bits-buy-card__chat-tooltip": e
                            });
                        if (!this.props.data || this.props.data.loading) return l.createElement(_.a, null);
                        if (this.props.data.error) return l.createElement(b.Va, {
                            className: S(t, "bits-buy-card--shorter"),
                            textAlign: b.Jb.Center,
                            "data-a-target": "bits-buy-card-error",
                            alignItems: b.f.Center,
                            justifyContent: b.Ua.Center,
                            display: b.W.Flex,
                            padding: 1,
                            fullWidth: !0
                        }, l.createElement(b.V, {
                            italic: !0
                        }, Object(u.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                        if (this.state.showWatebTerms) return this.renderWatebTerms(t);
                        var n = this.renderWatebCard();
                        if (n) return l.createElement(b.Va, {
                            textAlign: b.Jb.Center,
                            className: S(t, "bits-buy-card--shorter"),
                            fullWidth: !0
                        }, n);
                        var i = [];
                        this.props.data.currentUser && this.props.data.currentUser.bitsOffers ? i = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (i = this.props.data.bitsOffers);
                        var r = i.filter(function(e) {
                                return e.type === M.b
                            }).some(function(e) {
                                return e.includesVAT
                            }),
                            a = "",
                            o = i.filter(function(e) {
                                return e.type === M.b
                            }).pop();
                        o && o.type === M.b && (a = o.currencyCode);
                        var s = this.props.data.user ? this.props.data.user.id : "",
                            c = l.createElement(j, {
                                offers: i,
                                fullsize: this.props.fullsize,
                                hidePromos: this.props.hidePromos,
                                hideWateb: this.props.hideWateb,
                                bitsConfig: this.props.bitsConfig,
                                channelID: s,
                                channelLogin: this.props.channelLogin,
                                closeAllBits: this.props.closeAllBits,
                                currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                                handleWatchAdClick: this.handleWatchAdClick,
                                location: this.props.location,
                                onBuyPopupClose: this.onBuyPopupClose,
                                onClose: this.props.onClose,
                                trackBitsCardInteraction: this.props.trackBitsCardInteraction
                            }),
                            d = l.createElement(x, {
                                bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                                displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                                minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                                pricesIncludeVAT: r,
                                currencyCode: a,
                                location: this.props.location
                            });
                        return l.createElement(b.Va, {
                            className: t,
                            "data-a-target": "bits-buy-card",
                            fullWidth: !0
                        }, d, c)
                    }, t.prototype.renderWatebCard = function() {
                        if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                            case T.Awarded:
                                return l.createElement(G, {
                                    bitsConfig: this.props.bitsConfig,
                                    amount: this.state.bitsAwarded,
                                    onStartCheering: this.props.onClose,
                                    onWatchAnother: this.handleWatchAdClick,
                                    truexUserID: this.props.data.currentUser.idSHA1,
                                    trackBitsCardInteraction: this.props.trackBitsCardInteraction
                                });
                            case T.Error:
                                return l.createElement(W, {
                                    type: this.state.watebError || i.Unknown,
                                    onClose: this.props.onClose,
                                    onTryAgain: this.resetAdErrorState
                                });
                            default:
                                return !1
                        }
                    }, t.prototype.showWatchAdModal = function() {
                        this.props.data && this.props.data.currentUser && this.props.data.user && this.props.showWatchAdModal({
                            tuid: this.props.data.currentUser.idSHA1,
                            onBitsAwarded: this.onAdBitsAwarded,
                            onError: this.receiveAdErrorState,
                            requestRef: g.c.ShowAdButton,
                            channelID: this.props.data.user.id
                        })
                    }, t = c.__decorate([Object(p.a)(z, {
                        name: "data",
                        options: function(e) {
                            return {
                                variables: {
                                    channelLogin: e.channelLogin,
                                    withChannel: !!e.channelLogin,
                                    isLoggedIn: e.isLoggedIn
                                }
                            }
                        }
                    })], t)
                }(l.Component),
                $ = Object(y.compose)(Object(Y.c)("BitsBuyCard", {
                    autoReportInteractive: !0
                }))(X);

            function Z(e) {
                return {
                    adModalOpen: Object(o.b)(e, C),
                    isLoggedIn: Object(s.f)(e)
                }
            }

            function J(e) {
                return {
                    showWatchAdModal: function(t) {
                        return e(Object(a.d)(C, t))
                    }
                }
            }
            var ee = Object(r.connect)(Z, J)($);
            n.d(t, !1, function() {
                return Z
            }), n.d(t, !1, function() {
                return J
            }), n.d(t, "a", function() {
                return ee
            })
        },
        p52R: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
                }(i || (i = {}))
        },
        qKeE: function(e, t, n) {},
        qnat: function(e, t, n) {
            "use strict";
            var i, r, a = n("mrSG"),
                o = n("q1tI"),
                s = n("fvjX"),
                c = n("yR8l"),
                l = n("eDVu"),
                d = n("0Log"),
                u = n("/aPz"),
                m = n("TSYQ"),
                p = n("/7QA"),
                h = n("8/mp"),
                f = n("Ue10");
            n("CK1f");
            ! function(e) {
                e[e.Gold = 0] = "Gold", e[e.Silver = 1] = "Silver", e[e.Bronze = 2] = "Bronze", e[e.Default = 3] = "Default"
            }(i || (i = {})),
            function(e) {
                e[e.Big = 0] = "Big", e[e.Small = 1] = "Small"
            }(r || (r = {}));
            var g, b = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this.renderMedalSVG(this.props.medal, this.props.size),
                            t = m("bits-leaderboard-medal__profile-image", {
                                "bits-leaderboard-medal__profile-image--big": this.props.size === r.Big
                            }, {
                                "bits-leaderboard-medal__profile-image--small": this.props.size === r.Small
                            }),
                            n = null;
                        return this.props.profileImageUrl && (n = o.createElement(f.Na, {
                            position: f.db.Absolute
                        }, o.createElement("img", {
                            className: t,
                            src: this.props.profileImageUrl
                        }))), o.createElement(f.Va, {
                            className: "bits-leaderboard-medal",
                            display: f.W.Flex,
                            position: f.db.Relative
                        }, e, n)
                    }, t.prototype.renderMedalSVG = function(e, t) {
                        var n = t === r.Big ? "bits-leaderboard-medal__big" : "bits-leaderboard-medal__small",
                            a = null;
                        switch (e) {
                            case i.Gold:
                                a = o.createElement(k, null);
                                break;
                            case i.Silver:
                                a = o.createElement(C, null);
                                break;
                            case i.Bronze:
                                a = o.createElement(v, null);
                                break;
                            default:
                                a = o.createElement(E, null)
                        }
                        return o.createElement(f.Na, {
                            className: n
                        }, a)
                    }, t
                }(o.Component),
                v = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "14.834%",
                        y1: "10.25%",
                        x2: "82.068%",
                        y2: "89.469%",
                        id: "bits-leaderboard-bronze-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#DF904C",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#A65611",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-bronze-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "19.142%",
                        y1: "10.021%",
                        x2: "79.509%",
                        y2: "86.458%",
                        id: "bits-leaderboard-bronze-linearGradient-3"
                    }, o.createElement("stop", {
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#494949",
                        offset: "9.355%"
                    }), o.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.419%"
                    }), o.createElement("stop", {
                        stopColor: "#818181",
                        offset: "25.723%"
                    }), o.createElement("stop", {
                        stopColor: "#5D5D5D",
                        offset: "39.965%"
                    }), o.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#7A7A7A",
                        offset: "50.012%"
                    }), o.createElement("stop", {
                        stopColor: "#717171",
                        offset: "57.677%"
                    }), o.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "63.526%"
                    }), o.createElement("stop", {
                        stopColor: "#888",
                        offset: "69.88%"
                    }), o.createElement("stop", {
                        stopColor: "#F1F1F1",
                        offset: "75.215%"
                    }), o.createElement("stop", {
                        stopColor: "#B9B9B9",
                        offset: "79.325%"
                    }), o.createElement("stop", {
                        stopColor: "#545454",
                        offset: "92.875%"
                    }), o.createElement("stop", {
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "19.604%",
                        y1: "10.043%",
                        x2: "84.81%",
                        y2: "89.074%",
                        id: "bits-leaderboard-bronze-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#F2C6A5",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#864223",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-bronze-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-bronze-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-bronze-Medal-3-bronze-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-bronze-Star-Copy-2B"
                    }, o.createElement("use", {
                        fill: "#DE9572",
                        xlinkHref: "#bits-leaderboard-bronze-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-bronze-Star-Copy-3B",
                        fill: "url(#bits-leaderboard-bronze-linearGradient-3)",
                        opacity: ".4",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-bronze-Oval-Copy-B"
                    }, o.createElement("use", {
                        fill: "#A96643",
                        xlinkHref: "#bits-leaderboard-bronze-path-5"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-bronze-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                E = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 20 20",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("path", {
                        id: "bits-leaderboard-default-path-1",
                        d: "M10 16.88l-1.31676 1.01089-.91717-1.38367-1.57365.52857-.4182-1.6065-1.66001-.01104.12608-1.65525-1.56648-.54944.65672-1.52462-1.3032-1.0283L3.1435 9.43184l-.8987-1.39573 1.45468-.79978-.39681-1.61193 1.63555-.2841.14808-1.65343 1.63918.26234.67692-1.51576 1.46519.78037L10 2l1.13241 1.21383 1.46519-.78037.67692 1.51576 1.63918-.26234.14808 1.65342 1.63555.28411-.3968 1.61193 1.45467.79978-.8987 1.39573 1.11618 1.22878-1.3032 1.02831.6567 1.52462-1.56647.54944.12608 1.65525-1.66.01104-.41821 1.6065-1.57365-.52857-.91717 1.38367z"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-default-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-default-bitbadge/blank"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-default-Star"
                    }, o.createElement("use", {
                        fill: "#D7CCEB",
                        xlinkHref: "#bits-leaderboard-default-path-1"
                    }), o.createElement("path", {
                        stroke: "#D7CCEB",
                        d: "M10 17.51035l-1.4374 1.10351-1.0012-1.51044-1.71783.577-.45652-1.7537-1.8121-.01204.13763-1.8069-1.71-.59979.71688-1.6643-1.4226-1.12253L2.5153 9.3798l-.98104-1.52362 1.58796-.87305-.43317-1.75961 1.7854-.31014.16165-1.80492 1.78937.28638.73894-1.65463 1.59943.85187L10 1.26703l1.23616 1.32505 1.59943-.85187.73894 1.65463 1.78937-.28638.16165 1.80492 1.7854.31014-.43317 1.7596 1.58796.87306-.98104 1.52362 1.21844 1.34136-1.4226 1.12252.71688 1.66431-1.71.59978.13763 1.8069-1.8121.01205-.45652 1.7537-1.71782-.577-1.00121 1.51044L10 17.51036z"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-default-Oval-2",
                        fill: "#EEE9F6",
                        cx: "10",
                        cy: "10",
                        r: "6"
                    }))))
                },
                k = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "15.783%",
                        y1: "9.653%",
                        x2: "82.407%",
                        y2: "91.627%",
                        id: "bits-leaderboard-gold-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#D8B258",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#A4770E",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-gold-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "17.025%",
                        y1: "7.356%",
                        x2: "84.092%",
                        y2: "91.769%",
                        id: "bits-leaderboard-gold-linearGradient-3"
                    }, o.createElement("stop", {
                        stopColor: "#E5B561",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#EEC05F",
                        offset: "12.638%"
                    }), o.createElement("stop", {
                        stopColor: "#FFECB9",
                        offset: "20.419%"
                    }), o.createElement("stop", {
                        stopColor: "#DCB35E",
                        offset: "30.58%"
                    }), o.createElement("stop", {
                        stopColor: "#E0B55B",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#CDA148",
                        offset: "62.771%"
                    }), o.createElement("stop", {
                        stopColor: "#E9CC8F",
                        offset: "76.584%"
                    }), o.createElement("stop", {
                        stopColor: "#ECBE5D",
                        offset: "83.038%"
                    }), o.createElement("stop", {
                        stopColor: "#C09A4C",
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "83.2%",
                        y1: "89.733%",
                        x2: "12.813%",
                        y2: "3.179%",
                        id: "bits-leaderboard-gold-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#9A790A",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#FFEFB9",
                        offset: "87.642%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-gold-path-5",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-gold-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-gold-Medal-1-gold-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-gold-Star"
                    }, o.createElement("use", {
                        fill: "#D6A94C",
                        xlinkHref: "#bits-leaderboard-gold-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-gold-Star",
                        fill: "url(#bits-leaderboard-gold-linearGradient-3)",
                        d: "M16 28.58l-2.469 2.215-1.615-2.897-3.055 1.294-.587-3.265-3.31.232.505-3.279-3.206-.855 1.543-2.937-2.755-1.85 2.413-2.277-2.005-2.643 3.021-1.371-1.037-3.151 3.302-.316.042-3.317 3.226.774 1.117-3.124 2.8 1.78L16 1l2.07 2.592 2.8-1.78 1.117 3.125 3.226-.774.042 3.317 3.302.316-1.037 3.151 3.021 1.37-2.005 2.644 2.413 2.278-2.755 1.849 1.543 2.937-3.206.855.505 3.28-3.31-.233-.587 3.265-3.055-1.294-1.615 2.897z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-gold-Oval"
                    }, o.createElement("use", {
                        fill: "#BE912A",
                        xlinkHref: "#bits-leaderboard-gold-path-5"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-gold-linearGradient-4)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                C = function(e) {
                    return o.createElement("svg", {
                        className: e.className,
                        viewBox: "0 0 32 32",
                        xmlns: "http://www.w3.org/2000/svg",
                        xmlnsXlink: "http://www.w3.org/1999/xlink"
                    }, o.createElement("defs", null, o.createElement("linearGradient", {
                        x1: "18.738%",
                        y1: "20.297%",
                        x2: "79.716%",
                        y2: "88.714%",
                        id: "bits-leaderboard-silver-linearGradient-1"
                    }, o.createElement("stop", {
                        stopColor: "#D0D8DB",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#7E848A",
                        offset: "100%"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-silver-path-2",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("linearGradient", {
                        x1: "19.638%",
                        y1: "10.855%",
                        x2: "81.99%",
                        y2: "89.124%",
                        id: "bits-leaderboard-silver-linearGradient-3"
                    }, o.createElement("stop", {
                        stopColor: "#202020",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#BCBCBC",
                        offset: "13.369%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "20.779%"
                    }), o.createElement("stop", {
                        stopColor: "#313131",
                        offset: "30.58%"
                    }), o.createElement("stop", {
                        stopColor: "#EFEFEF",
                        offset: "45.279%"
                    }), o.createElement("stop", {
                        stopColor: "#B5B5B5",
                        offset: "61.521%"
                    }), o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "74.572%"
                    }), o.createElement("stop", {
                        stopColor: "#656565",
                        offset: "87.343%"
                    }), o.createElement("stop", {
                        stopColor: "#C4C4C4",
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "0%",
                        y1: "0%",
                        x2: "99.438%",
                        y2: "96.312%",
                        id: "bits-leaderboard-silver-linearGradient-4"
                    }, o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "3.677%"
                    }), o.createElement("stop", {
                        offset: "100%"
                    })), o.createElement("linearGradient", {
                        x1: "8.437%",
                        y1: "13.448%",
                        x2: "86.525%",
                        y2: "83.33%",
                        id: "bits-leaderboard-silver-linearGradient-5"
                    }, o.createElement("stop", {
                        stopColor: "#FFF",
                        offset: "0%"
                    }), o.createElement("stop", {
                        stopColor: "#EAEEF2",
                        offset: "9.632%"
                    }), o.createElement("stop", {
                        stopColor: "#686C71",
                        offset: "100%"
                    })), o.createElement("circle", {
                        id: "bits-leaderboard-silver-path-6",
                        cx: "16",
                        cy: "16",
                        r: "11"
                    })), o.createElement("g", {
                        id: "bits-leaderboard-silver-Symbols",
                        fill: "none",
                        fillRule: "evenodd"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-silver-Medal-2-silver-lg"
                    }, o.createElement("g", {
                        id: "bits-leaderboard-silver-Star-Copy-2"
                    }, o.createElement("use", {
                        fill: "#CBC8D0",
                        xlinkHref: "#bits-leaderboard-silver-path-2"
                    }), o.createElement("path", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-1)",
                        d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                    })), o.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-3",
                        fill: "url(#bits-leaderboard-silver-linearGradient-3)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("path", {
                        id: "bits-leaderboard-silver-Star-Copy-4-grad",
                        fill: "url(#bits-leaderboard-silver-linearGradient-4)",
                        opacity: ".6",
                        d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                    }), o.createElement("g", {
                        id: "bits-leaderboard-silver-Oval-Copy"
                    }, o.createElement("use", {
                        fill: "#A3A7AA",
                        xlinkHref: "#bits-leaderboard-silver-path-6"
                    }), o.createElement("circle", {
                        stroke: "url(#bits-leaderboard-silver-linearGradient-5)",
                        cx: "16",
                        cy: "16",
                        r: "11.5"
                    })))))
                },
                S = n("4Wd7"),
                y = n("6MRn"),
                N = n("4h+t"),
                _ = (n("ky+Y"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(f.Va, {
                            display: f.W.InlineFlex,
                            alignItems: f.f.Center,
                            flexGrow: 1
                        });
                        var e = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            t = null,
                            n = "";
                        if (this.props.data && this.props.data.user) {
                            n = this.props.data.user.displayName || this.props.data.user.login;
                            var i = o.createElement(f.V, {
                                ellipsis: !0
                            }, n);
                            this.props.selfId && this.props.selfId === this.props.id && (i = o.createElement(f.V, {
                                ellipsis: !0,
                                color: f.O.Link,
                                bold: !0
                            }, n)), t = o.createElement(f.Va, {
                                ellipsis: !0,
                                className: "bits-leaderboard-expanded-leaderboard-entry__username",
                                margin: {
                                    x: 1
                                },
                                display: f.W.InlineBlock
                            }, i)
                        }
                        var r, a = null;
                        a = this.props.selfId && this.props.selfId === this.props.value ? o.createElement(f.ab, {
                            label: this.props.rank.toString(),
                            type: f.bb.Brand
                        }) : o.createElement(f.V, {
                            color: f.O.Link,
                            bold: !0
                        }, this.props.rank);
                        var s = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || p.a.defaultAvatarURL;
                        return r = o.createElement(f.Va, {
                            overflow: f.Ya.Hidden,
                            display: f.W.InlineFlex,
                            flexGrow: 1,
                            fullWidth: !0,
                            alignItems: f.f.Center
                        }, o.createElement(f.Va, {
                            className: "bits-leaderboard-expanded-leaderboard-entry__rank",
                            padding: {
                                right: .5
                            }
                        }, a), o.createElement("img", {
                            src: s,
                            className: "bits-leaderboard-expanded-leaderboard-entry__avatar"
                        }), t, o.createElement(f.Va, {
                            flexShrink: 0,
                            className: "bits-leaderboard-expanded-leaderboard-entry__score",
                            margin: {
                                left: "auto"
                            },
                            display: f.W.InlineBlock
                        }, o.createElement(S.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: e,
                            size: S.b.ExtremelySmall,
                            display: f.W.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: f.f.Center
                        }))), o.createElement(f.Va, {
                            className: "bits-leaderboard-expanded-leaderboard-entry",
                            display: f.W.Block,
                            alignItems: f.f.Center
                        }, r)
                    }, t
                }(o.Component)),
                O = Object(s.compose)(Object(c.a)(y, {
                    name: "data",
                    skip: function(e) {
                        return !e.id
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.value,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(_),
                I = (n("U80U"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(f.Va, {
                            display: f.W.InlineFlex,
                            alignItems: f.f.Center,
                            flexGrow: 1
                        });
                        var e = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            t = null,
                            n = "";
                        if (this.props.data && this.props.data.user) {
                            n = this.props.data.user.displayName || this.props.data.user.login;
                            var i = o.createElement(f.V, {
                                ellipsis: !0,
                                bold: !0
                            }, n);
                            this.props.selfId && this.props.selfId === this.props.value && (i = o.createElement(f.V, {
                                ellipsis: !0,
                                color: f.O.Link,
                                bold: !0
                            }, n)), t = o.createElement(f.Va, {
                                ellipsis: !0,
                                className: "bits-leaderboard-expanded-top-three-entry__username",
                                margin: {
                                    x: .5
                                },
                                display: f.W.InlineBlock
                            }, i)
                        }
                        var a, s = null;
                        s = this.props.selfId && this.props.selfId === this.props.value ? o.createElement(f.ab, {
                            label: this.props.rank.toString(),
                            type: f.bb.Brand
                        }) : o.createElement(f.V, {
                            color: f.O.Link,
                            bold: !0
                        }, this.props.rank);
                        var c = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || p.a.defaultAvatarURL;
                        return a = o.createElement(f.Va, {
                            overflow: f.Ya.Hidden,
                            display: f.W.InlineFlex,
                            flexGrow: 1,
                            fullWidth: !0,
                            alignItems: f.f.Center
                        }, o.createElement(f.Va, {
                            className: "bits-leaderboard-expanded-top-three-entry__rank"
                        }, s), o.createElement(b, {
                            size: r.Big,
                            medal: this.props.medal,
                            profileImageUrl: c
                        }), t, o.createElement(f.Va, {
                            flexShrink: 0,
                            className: "bits-leaderboard-expanded-top-three-entry__score",
                            margin: {
                                left: "auto"
                            },
                            display: f.W.InlineBlock
                        }, o.createElement(S.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: e,
                            size: S.b.ExtremelySmall,
                            display: f.W.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: f.f.Center
                        }))), o.createElement(f.Va, {
                            className: "bits-leaderboard-expanded-top-three-entry",
                            display: f.W.Block
                        }, a)
                    }, t
                }(o.Component)),
                T = Object(s.compose)(Object(c.a)(y, {
                    name: "data",
                    skip: function(e) {
                        return !e.id
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.value,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(I);
            ! function(e) {
                e.Weekly = "WEEK", e.AllTime = "ALLTIME", e.Monthly = "MONTH"
            }(g || (g = {}));
            n("2C+f");
            var A = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderExpandArrow = function() {
                        return o.createElement(f.Va, {
                            position: f.db.Absolute,
                            attachRight: !0,
                            attachTop: !0,
                            className: "bits-leaderboard-expanded__arrow",
                            display: f.W.Flex,
                            alignItems: f.f.Stretch
                        }, o.createElement(f.z, {
                            size: f.D.Small,
                            fullWidth: !0,
                            type: f.F.Text,
                            onClick: t.props.toggleExpand
                        }, o.createElement(f.mb, {
                            asset: f.nb.AngleUp,
                            height: 20,
                            width: 20
                        })))
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.shouldRenderBottomContent(),
                        t = this.renderTopThreeEntries(),
                        n = this.renderTopTenEntries(),
                        i = this.renderExpandArrow(),
                        r = this.renderTopSection(),
                        a = null,
                        s = null;
                    e && ((a = this.renderUserPlaceEntry()) || (s = this.renderBottomSection()));
                    var c = {
                            "bits-leaderboard-expanded__top-three-break": !!this.props.topEdges && this.props.topEdges.length > 3
                        },
                        l = {
                            "bits-leaderboard-expanded__top-ten-break": !!this.props.topEdges && this.props.topEdges.length > 0
                        };
                    return o.createElement(f.xb, {
                        background: f.r.Base,
                        padding: {
                            top: 1
                        },
                        position: f.db.Relative
                    }, r, o.createElement(h.b, {
                        className: "bits-leaderboard-expanded__scrollable",
                        suppressScrollX: !0
                    }, o.createElement(f.Va, null, o.createElement("ul", null, t, o.createElement(f.Va, {
                        className: m(c)
                    }), n, o.createElement(f.Va, {
                        className: m(l)
                    }), a), s)), i)
                }, t.prototype.renderTopThreeEntries = function() {
                    if (!this.props.topEdges) return null;
                    var e = [];
                    return this.props.topEdges[0] && e.push(this.renderTopThreeEntry(this.props.topEdges[0], i.Gold)), this.props.topEdges[1] && e.push(this.renderTopThreeEntry(this.props.topEdges[1], i.Silver)), this.props.topEdges[2] && e.push(this.renderTopThreeEntry(this.props.topEdges[2], i.Bronze)), e
                }, t.prototype.renderTopSection = function() {
                    var e = Object(p.d)("Weekly Top Cheerers", "Bits--PinnedCheerV2"),
                        t = this.props.secondsRemaining ? this.props.secondsRemaining : 0,
                        n = Math.floor(t / 86400),
                        i = o.createElement(f.V, {
                            type: f.Nb.Span
                        }, Object(p.d)("{time, plural, one {Resets in {time} day} other {Resets in {time} days}}", {
                            time: n
                        }, "Bits--PinnedCheerV2"));
                    return n < 1 && (i = o.createElement(f.V, {
                        type: f.Nb.Span
                    }, Object(p.d)("Resets in less than a day", "Bits--PinnedCheerV2"))), this.props.leaderboardMode === g.AllTime ? (e = Object(p.d)("All-time Top Cheerers", "Bits--PinnedCheerV2"), i = null) : this.props.leaderboardMode === g.Monthly && (e = Object(p.d)("Monthly Top Cheerers", "Bits--PinnedCheerV2")), o.createElement(f.Va, {
                        display: f.W.Flex,
                        alignItems: f.f.Center,
                        flexDirection: f.Y.Column
                    }, o.createElement(f.V, {
                        type: f.Nb.H5,
                        bold: !0
                    }, e), i, o.createElement(f.Va, {
                        className: "bits-leaderboard-expanded__section-break",
                        margin: {
                            y: 1
                        }
                    }))
                }, t.prototype.renderBottomSection = function() {
                    var e = !!this.props.topEdges && this.props.topEdges.length > 0;
                    return o.createElement(f.Va, {
                        padding: {
                            bottom: 1
                        }
                    }, o.createElement(f.xb, {
                        borderTop: e
                    }, o.createElement(f.Va, {
                        display: f.W.Flex,
                        flexDirection: f.Y.Column,
                        alignItems: f.f.Center,
                        margin: {
                            top: 1
                        }
                    }, o.createElement(f.mb, {
                        asset: f.nb.Bits,
                        type: f.ob.Brand
                    }), o.createElement(f.V, {
                        type: f.Nb.Span,
                        bold: !0
                    }, Object(p.d)("Cheer your way to the top!", "Bits--PinnedCheersV2")), o.createElement(f.T, {
                        to: "https://blog.twitch.tv/earn-new-rewards-for-supporting-your-favorite-creators-da6b34a98827",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, o.createElement(f.V, {
                        bold: !0
                    }, Object(p.d)("Learn More", "Bits--PinnedCheersV2"))))))
                }, t.prototype.renderTopThreeEntry = function(e, t) {
                    return o.createElement(f.Va, {
                        key: e.node.id,
                        padding: {
                            x: 1,
                            top: .5
                        }
                    }, o.createElement(T, {
                        id: e.node.id,
                        value: e.node.entryKey,
                        score: e.node.score,
                        bitsConfig: this.props.bitsConfig,
                        medal: t,
                        selfId: this.props.selfId,
                        rank: e.node.rank
                    }))
                }, t.prototype.renderTopTenEntries = function() {
                    var e = this;
                    return this.props.topEdges ? this.props.topEdges.slice(3, 10).map(function(t) {
                        return e.renderTopTenEntry(t.node)
                    }) : null
                }, t.prototype.renderTopTenEntry = function(e) {
                    return o.createElement(f.Va, {
                        key: e.id,
                        padding: {
                            x: 1,
                            top: .5
                        }
                    }, o.createElement(O, {
                        id: e.id,
                        value: e.entryKey,
                        score: e.score,
                        bitsConfig: this.props.bitsConfig,
                        selfId: this.props.selfId,
                        rank: e.rank
                    }))
                }, t.prototype.shouldRenderBottomContent = function() {
                    var e = this;
                    if (!this.props.topEdges) return !1;
                    var t = !0;
                    return this.props.topEdges.forEach(function(n) {
                        n.node.entryKey === e.props.selfId && (t = !1)
                    }), t
                }, t.prototype.renderUserPlaceEntry = function() {
                    if (!this.props.userPlaceEdge) return null;
                    var e = this.renderTopTenEntry(this.props.userPlaceEdge);
                    return o.createElement(f.Va, {
                        padding: {
                            top: .5
                        }
                    }, o.createElement(f.xb, {
                        borderTop: !0
                    }, o.createElement(f.Va, {
                        padding: {
                            y: .5
                        }
                    }, e)))
                }, t
            }(o.Component);

            function D(e) {
                switch (e) {
                    case 1:
                        return Object(p.d)("Cheer now to be #1!", "Bits--PinnedCheerV2");
                    case 2:
                        return Object(p.d)("Cheer to take #2!", "Bits--PinnedCheerV2");
                    case 3:
                        return Object(p.d)("Cheer to take #3!", "Bits--PinnedCheerV2");
                    default:
                        return Object(p.d)("...", "Bits--PinnedCheerV2")
                }
            }
            n("986b");
            var R = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(f.Va, {
                            display: f.W.InlineBlock,
                            alignItems: f.f.Center,
                            flexGrow: 1
                        });
                        var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            n = null,
                            a = "";
                        if (this.props.data && this.props.data.user) {
                            a = this.props.data.user.displayName || this.props.data.user.login;
                            var s = o.createElement(f.V, {
                                ellipsis: !0,
                                bold: !0
                            }, a);
                            this.props.selfId && this.props.selfId === this.props.entryKey && (s = o.createElement(f.ab, {
                                label: a,
                                type: f.bb.Brand
                            })), n = o.createElement(f.Va, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-first-entry__username"
                            }, s)
                        }
                        if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                            var c = D(1);
                            e = o.createElement(f.Va, {
                                className: "bits-leaderboard-header-first-entry__container",
                                overflow: f.Ya.Hidden,
                                display: f.W.InlineFlex,
                                alignItems: f.f.Center,
                                flexGrow: 1
                            }, o.createElement(f.Va, {
                                flexShrink: 0
                            }, o.createElement(b, {
                                size: r.Big,
                                medal: i.Default
                            })), o.createElement(f.Va, {
                                className: "bits-leaderboard-header-first-entry__text",
                                margin: {
                                    left: .5
                                }
                            }, o.createElement(f.V, {
                                color: f.O.Link,
                                bold: !0
                            }, c)))
                        } else {
                            var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || p.a.defaultAvatarURL;
                            e = o.createElement(f.Va, {
                                className: "bits-leaderboard-header-first-entry__container",
                                overflow: f.Ya.Hidden,
                                display: f.W.InlineFlex,
                                alignItems: f.f.Center,
                                flexGrow: 1
                            }, o.createElement(f.Va, {
                                flexShrink: 0
                            }, o.createElement(b, {
                                size: r.Big,
                                medal: i.Gold,
                                profileImageUrl: l
                            })), o.createElement(f.Va, {
                                className: "bits-leaderboard-header-first-entry__text",
                                margin: {
                                    left: .5
                                }
                            }, n, o.createElement(f.Va, {
                                className: "bits-leaderboard-header-first-entry__score"
                            }, o.createElement(S.a, {
                                animated: !1,
                                showImage: !0,
                                showAmount: !0,
                                prefix: "Cheer",
                                bitsConfig: t,
                                size: S.b.ExtremelySmall,
                                display: f.W.InlineFlex,
                                amount: this.props.score,
                                formattedNumber: !0,
                                alignItems: f.f.Center
                            }))))
                        }
                        this.props.isEmpty || (e = o.createElement(f.Qb, {
                            label: a,
                            direction: f.Sb.Bottom
                        }, e));
                        var d = {
                            "bits-leaderboard-header-first-entry": !0,
                            "bits-leaderboard-header-first-entry__empty": this.props.isEmpty
                        };
                        return o.createElement(f.Va, {
                            className: m(d),
                            flexShrink: 0
                        }, e)
                    }, t
                }(o.Component),
                M = Object(s.compose)(Object(c.a)(y, {
                    name: "data",
                    skip: function(e) {
                        return !e.id || !e.entryKey
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.entryKey,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(R),
                L = (n("ifPV"), function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        if (this.props.data && (this.props.data.loading || this.props.data.error)) return o.createElement(f.Va, {
                            display: f.W.InlineFlex,
                            alignItems: f.f.Center,
                            flexGrow: 1
                        });
                        var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(N.a)(),
                            n = null,
                            a = "";
                        if (this.props.data && this.props.data.user) {
                            a = this.props.data.user.displayName || this.props.data.user.login;
                            var s = o.createElement(f.V, {
                                ellipsis: !0,
                                bold: !0
                            }, a);
                            this.props.selfId && this.props.selfId === this.props.entryKey && (s = o.createElement(f.ab, {
                                label: a,
                                type: f.bb.Brand
                            })), n = o.createElement(f.Va, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-runner-up-entry__username",
                                flexShrink: 1,
                                margin: {
                                    x: .5
                                }
                            }, s)
                        }
                        if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                            var c = D(this.props.rank ? this.props.rank : 0);
                            e = o.createElement(f.Va, {
                                overflow: f.Ya.Hidden,
                                display: f.W.Flex,
                                alignItems: f.f.Center,
                                flexGrow: 0,
                                fullWidth: !0
                            }, o.createElement(f.Va, {
                                flexShrink: 0
                            }, o.createElement(b, {
                                size: r.Small,
                                medal: i.Default
                            })), o.createElement(f.Va, {
                                ellipsis: !0,
                                className: "bits-leaderboard-header-runner-up-entry__username",
                                flexShrink: 1,
                                margin: {
                                    x: .5
                                }
                            }, o.createElement(f.V, {
                                color: f.O.Link,
                                bold: !0
                            }, c)))
                        } else {
                            var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || p.a.defaultAvatarURL;
                            e = o.createElement(f.Va, {
                                overflow: f.Ya.Hidden,
                                display: f.W.Flex,
                                alignItems: f.f.Center,
                                flexGrow: 0,
                                fullWidth: !0
                            }, o.createElement(f.Va, {
                                flexShrink: 0
                            }, o.createElement(b, {
                                size: r.Small,
                                medal: this.props.medal,
                                profileImageUrl: l
                            })), n, o.createElement(f.Va, {
                                flexShrink: 0,
                                className: "bits-leaderboard-header-runner-up-entry__score",
                                margin: {
                                    left: "auto"
                                }
                            }, o.createElement(S.a, {
                                animated: !1,
                                showImage: !0,
                                showAmount: !0,
                                prefix: "Cheer",
                                bitsConfig: t,
                                size: S.b.ExtremelySmall,
                                display: f.W.InlineFlex,
                                amount: this.props.score,
                                formattedNumber: !0,
                                alignItems: f.f.Center
                            })))
                        }
                        return this.props.isEmpty || (e = o.createElement(f.Qb, {
                            label: a,
                            direction: f.Sb.Bottom
                        }, e)), o.createElement(f.Va, {
                            className: "bits-leaderboard-header-runner-up-entry",
                            display: f.W.Flex,
                            alignItems: f.f.Center
                        }, e)
                    }, t
                }(o.Component)),
                w = Object(s.compose)(Object(c.a)(y, {
                    name: "data",
                    skip: function(e) {
                        return !e.id || !e.entryKey
                    },
                    options: function(e) {
                        return {
                            variables: {
                                userID: e.entryKey,
                                profileImageWidth: 50
                            }
                        }
                    }
                }))(L),
                U = (n("MBj5"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.renderFirstPlaceEntry = function() {
                            var e, n = null;
                            return t.props.topEdges && t.props.topEdges[0] && (n = t.props.topEdges[0]), e = n ? o.createElement(M, {
                                selfId: t.props.selfId,
                                id: n.node.id,
                                entryKey: n.node.entryKey,
                                score: n.node.score,
                                bitsConfig: t.props.bitsConfig
                            }) : o.createElement(M, {
                                isEmpty: !0
                            }), o.createElement(f.Na, {
                                key: 1
                            }, e)
                        }, t.renderExpandArrow = function() {
                            return o.createElement(f.Va, {
                                className: "pinned-cheer-v2-header--arrow",
                                alignItems: f.f.Stretch,
                                fullHeight: !0,
                                display: f.W.InlineFlex,
                                attachTop: !0,
                                position: f.db.Absolute
                            }, o.createElement(f.z, {
                                size: f.D.Small,
                                fullWidth: !0,
                                type: f.F.Text,
                                onClick: t.props.toggleExpand
                            }, o.createElement(f.mb, {
                                asset: f.nb.AngleDown,
                                height: 20,
                                width: 20
                            })))
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e = this.renderFirstPlaceEntry(),
                            t = null,
                            n = null,
                            r = this.renderExpandArrow();
                        if (this.props.topEdges && this.props.topEdges[0]) {
                            t = this.renderRunnerUpEntry(2, i.Silver);
                            var a = this.props.topEdges[1] ? 3 : 0;
                            n = this.renderRunnerUpEntry(a, i.Bronze)
                        }
                        return o.createElement(f.xb, {
                            className: "pinned-cheer-v2-header",
                            background: f.r.Base,
                            position: f.db.Relative
                        }, o.createElement(f.Va, {
                            className: "pinned-cheer-v2-header__users",
                            display: f.W.InlineFlex,
                            flexWrap: f.Z.NoWrap,
                            justifyContent: f.Ua.Between,
                            fullHeight: !0
                        }, e, o.createElement(f.Va, {
                            className: "pinned-cheer-v2-header__runner-up-entries",
                            display: f.W.Flex,
                            flexShrink: 1,
                            flexWrap: f.Z.NoWrap,
                            justifyContent: f.Ua.Between,
                            flexDirection: f.Y.Column
                        }, t, n)), r)
                    }, t.prototype.renderRunnerUpEntry = function(e, t) {
                        var n, r = null;
                        return e > 0 && this.props.topEdges && this.props.topEdges[e - 1] && (r = this.props.topEdges[e - 1]), n = r ? o.createElement(w, {
                            selfId: this.props.selfId,
                            id: r.node.id,
                            entryKey: r.node.entryKey,
                            score: r.node.score,
                            medal: t,
                            bitsConfig: this.props.bitsConfig
                        }) : o.createElement(w, {
                            isEmpty: !0,
                            medal: i.Default,
                            rank: e
                        }), o.createElement(f.Na, {
                            key: e
                        }, n)
                    }, t
                }(o.Component)),
                B = n("+LJB"),
                P = n("RiD7"),
                F = n("Qime"),
                j = (n("MIhh"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isExpanded: !1
                        }, t.toggleIsExpanded = function() {
                            t.setState(function(e) {
                                return {
                                    isExpanded: !e.isExpanded
                                }
                            }, function() {
                                t.state.isExpanded && t.onExpandClick()
                            })
                        }, t.onExpandClick = function() {
                            var e = t.props,
                                n = e.channelID,
                                i = e.userID,
                                r = e.data.user;
                            if (r && r.cheer && r.cheer.leaderboard && r.cheer.settings && r.cheer.settings.leaderboard && r.cheer.settings.leaderboard.isEnabled) {
                                var a = r.cheer.settings.leaderboard.timePeriodType,
                                    o = r.cheer.leaderboard.items.edges.slice(0, 10),
                                    s = !1;
                                i && (s = o.findIndex(function(e) {
                                    return e.node.entryKey === i
                                }) >= 0), Object(P.i)({
                                    leaderboardSize: o.length,
                                    leaderboardMode: a || g.AllTime,
                                    userPresentInLeaderboard: s,
                                    userID: i,
                                    channelID: n
                                })
                            }
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        var e;
                        return e = this.renderLeaderboard(), o.createElement(f.Va, {
                            zIndex: f.ac.Default
                        }, e)
                    }, t.prototype.renderLeaderboard = function() {
                        if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.leaderboard)) return null;
                        if (!this.props.data.user.cheer.settings || !this.props.data.user.cheer.settings.leaderboard || !this.props.data.user.cheer.settings.leaderboard.isEnabled) return null;
                        var e = this.props.data.user.cheer.leaderboard.items.edges.slice(0, 10),
                            t = null,
                            n = this.props.data.user.cheer.settings.leaderboard.timePeriodType || g.AllTime;
                        this.props.data.user.self && this.props.data.user.self.bitsLeaderboardItem && (t = this.props.data.user.self.bitsLeaderboardItem);
                        var i = null;
                        this.state.isExpanded && (i = o.createElement(A, {
                            topEdges: e,
                            userPlaceEdge: t,
                            toggleExpand: this.toggleIsExpanded,
                            selfId: this.props.userID,
                            bitsConfig: this.props.bitsConfig,
                            leaderboardMode: n,
                            secondsRemaining: this.props.data.user.cheer.leaderboard.secondsRemaining
                        }));
                        var r = null;
                        return this.state.isExpanded || (r = o.createElement(U, {
                            topEdges: e,
                            toggleExpand: this.toggleIsExpanded,
                            selfId: this.props.userID,
                            bitsConfig: this.props.bitsConfig
                        })), o.createElement(f.Va, {
                            className: "pinned-cheer-v2",
                            zIndex: f.ac.Default
                        }, o.createElement(f.xb, {
                            borderBottom: !0
                        }, r, i))
                    }, t
                }(o.Component)),
                x = Object(s.compose)(Object(c.a)(F, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }), Object(l.a)(function(e) {
                    return {
                        query: F,
                        variables: {
                            channelID: e.channelID
                        },
                        topic: Object(u.d)(e.channelID),
                        type: d.PubsubMessageType.BitsChannelSettingsEvent,
                        mutator: function(e, t) {
                            if (t) return t && t.user && null !== t.user.cheer && null !== t.user.cheer.leaderboard && null !== t.user.cheer.settings.leaderboard && void 0 !== e.updates.leaderboard_enabled && (t.user.cheer.settings.leaderboard.isEnabled = e.updates.leaderboard_enabled), t
                        }
                    }
                }), Object(l.a)(function(e) {
                    return Object(B.a)(F, e.channelID, e.data.user && e.data.user.cheer && e.data.user.cheer.leaderboard, e.userID)
                }))(j),
                V = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            cheerIsTall: !1,
                            recentCheerID: null,
                            recentCheerExpireTime: null,
                            pcheersV2Enabled: !1
                        }, t
                    }
                    return a.__extends(t, e), t.prototype.render = function() {
                        return o.createElement(x, {
                            channelID: this.props.channelID,
                            userID: this.props.userID,
                            badgeData: this.props.badgeData,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin
                        })
                    }, t
                }(o.Component),
                H = n("/MKj"),
                G = n("kRBY");
            var W = Object(H.connect)(function(e) {
                var t = Object(G.e)(e);
                return {
                    isStaff: t && t.roles && t.roles.isStaff
                }
            })(V);
            n.d(t, !1, function() {
                return V
            }), n.d(t, "a", function() {
                return W
            })
        },
        r2XO: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("fvjX"),
                s = n("/7QA"),
                c = n("x7UT"),
                l = n("0Log"),
                d = n("/aPz"),
                u = n("SceP"),
                m = n("ZtEv"),
                p = n("VS9Q");
            var h = n("nInp"),
                f = n("DLhE"),
                g = n("MJbm"),
                b = n("8/mp"),
                v = n("ZS2+"),
                E = n("TSYQ"),
                k = n("oJmH"),
                C = n("yR8l"),
                S = n("geRD"),
                y = n("b5C3"),
                N = n("XmgI"),
                _ = n("0Lz3"),
                O = n("uIkQ"),
                I = n("+pBb"),
                T = n("tY8L"),
                A = n("ZVTe"),
                D = n("kRBY"),
                R = n("TApp"),
                M = n("KGti"),
                L = n("sblI"),
                w = n("iyGE"),
                U = n("a2UF"),
                B = n("AREq"),
                P = n("Av0x"),
                F = n("Ue10"),
                j = (n("L6L7"), function(e) {
                    var t = e.onBanUser,
                        n = F.nb.Ban,
                        i = Object(s.d)("Ban {login}", {
                            login: e.senderLogin
                        }, "ModerationIcons"),
                        a = "chat-ban-button";
                    return e.isMessageDeleted && (t = e.onUnbanUser, n = F.nb.FollowCheck, i = Object(s.d)("Unban {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons"), a = "chat-unban-button"), r.createElement(F.xb, {
                        color: F.O.Alt2,
                        display: F.W.Inline,
                        margin: {
                            right: .5
                        }
                    }, r.createElement(F.xb, {
                        display: F.W.InlineFlex,
                        verticalAlign: F.Xb.Bottom
                    }, r.createElement(F.Qb, {
                        align: F.Rb.Left,
                        label: i
                    }, r.createElement("button", {
                        className: "mod-icon",
                        onClick: t,
                        "data-test-selector": a
                    }, r.createElement(F.mb, {
                        width: 16,
                        height: 16,
                        type: F.ob.Inherit,
                        asset: n
                    })))), r.createElement(F.xb, {
                        display: F.W.InlineFlex,
                        verticalAlign: F.Xb.Bottom
                    }, r.createElement(F.Qb, {
                        align: F.Rb.Left,
                        label: Object(s.d)("Timeout {login}", {
                            login: e.senderLogin
                        }, "ModerationIcons")
                    }, r.createElement("button", {
                        className: "mod-icon",
                        onClick: e.onTimeoutUser,
                        "data-test-selector": "chat-timeout-button"
                    }, r.createElement(F.mb, {
                        width: 16,
                        height: 16,
                        type: F.ob.Inherit,
                        asset: F.nb.Timeout
                    })))))
                }),
                x = 600,
                V = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.onBanUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t, n;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, this.props.banUserMutation(this.props.senderLogin)];
                                        case 2:
                                            return e = i.sent().banUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(R.a)(Object(B.a)(this.props.senderLogin, e.error.code)), this.props.onPushMessage(n)) : (t = Object(L.a)(m.e.Ban, this.props.senderLogin, null, null), this.props.onPushMessage(t))), [3, 4];
                                        case 3:
                                            return i.sent(), this.props.onPushMessage && (n = Object(R.a)(Object(s.d)("Unable to ban user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.onTimeoutUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t, n;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, this.props.banUserMutation(this.props.senderLogin, x)];
                                        case 2:
                                            return e = i.sent().banUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(R.a)(Object(B.a)(this.props.senderLogin, e.error.code, !0)), this.props.onPushMessage(n)) : (t = Object(L.a)(m.e.Timeout, this.props.senderLogin, null, x), this.props.onPushMessage(t))), [3, 4];
                                        case 3:
                                            return i.sent(), this.props.onPushMessage && (n = Object(R.a)(Object(s.d)("Unable to timeout user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.onUnbanUser = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t, n;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            if (this.props.confirmModerationAction && !this.props.confirmModerationAction()) return [3, 4];
                                            i.label = 1;
                                        case 1:
                                            return i.trys.push([1, 3, , 4]), [4, this.props.unbanUserMutation(this.props.senderLogin)];
                                        case 2:
                                            return e = i.sent().unbanUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(R.a)(Object(P.a)(this.props.senderLogin, e.error.code)), this.props.onPushMessage(n)) : this.props.sessionUser && (t = Object(M.j)(l.ModerationActions.Unban, this.props.sessionUser.login, this.props.sessionUser.id, this.props.targetUserID, this.props.senderLogin, void 0, void 0), this.props.onPushMessage(t))), [3, 4];
                                        case 3:
                                            return i.sent(), this.props.onPushMessage && (n = Object(R.a)(Object(s.d)("Unable to unban user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(j, {
                            isMessageDeleted: this.props.isMessageDeleted,
                            onBanUser: this.onBanUser,
                            onTimeoutUser: this.onTimeoutUser,
                            onUnbanUser: this.onUnbanUser,
                            senderLogin: this.props.senderLogin
                        })
                    }, t
                }(r.Component),
                H = function(e) {
                    return {
                        channelID: e.channelID
                    }
                };
            var G = Object(k.compose)(Object(w.b)(H), Object(U.b)(H), Object(a.connect)(function(e) {
                    return {
                        sessionUser: Object(D.e)(e)
                    }
                }))(V),
                W = n("cys1"),
                Y = n("EE1E"),
                z = n("oK83"),
                q = (n("uYvD"), "chat-deleted-message-placeholder"),
                K = "chat-hidden-message-placeholder",
                Q = "chat-hidden-username-placeholder",
                X = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            alwaysShowMessage: !1
                        }, t.renderModerationIcons = function() {
                            return t.props.isCurrentUserModerator && t.props.showModerationIcons ? r.createElement(G, {
                                targetUserID: t.props.message.user.userID,
                                confirmModerationAction: t.props.confirmModerationAction,
                                channelID: t.props.channelID,
                                isMessageDeleted: t.props.message.deleted,
                                senderLogin: t.props.message.user.userLogin
                            }) : null
                        }, t.renderMessageBody = function() {
                            if (t.props.isHidden && !t.state.alwaysShowMessage && t.props.isCurrentUserModerator) {
                                var e = Object(s.d)("message hidden from blocked user", "ChatLine");
                                return r.createElement("span", {
                                    key: "hidden_message",
                                    className: "chat-line__message--hidden",
                                    "data-a-target": K
                                }, r.createElement("a", {
                                    href: "",
                                    onClick: t.hiddenMessageClickHandler
                                }, "<" + e + ">"))
                            }
                            if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                                var n = Object(s.d)("message deleted", "ChatLine");
                                return t.props.isCurrentUserModerator || t.props.isCurrentUserStaff ? r.createElement("span", {
                                    key: "deleted",
                                    className: "chat-line__message--deleted",
                                    "data-a-target": q
                                }, r.createElement("a", {
                                    href: "",
                                    onClick: t.alwaysShowMessage
                                }, "<" + n + ">")) : r.createElement("span", {
                                    key: "deleted",
                                    className: "chat-line__message--deleted",
                                    "data-a-target": q
                                }, "<" + n + ">")
                            }
                            return Object(W.f)(t.props.message.messageParts)
                        }, t.renderMessageAuthor = function() {
                            var e = t.props,
                                n = e.badgeSets,
                                i = e.message,
                                a = e.theme,
                                o = e.useHighContrastColors;
                            return t.props.isHidden && !t.state.alwaysShowMessage && t.props.isCurrentUserModerator ? r.createElement("span", {
                                key: "hidden_username",
                                className: "chat-line__username--hidden",
                                "data-a-target": Q
                            }, r.createElement("a", {
                                href: "",
                                onClick: t.hiddenMessageClickHandler
                            }, Object(s.d)("User Hidden", "ChatLine"))) : r.createElement(r.Fragment, null, t.renderModerationIcons(), r.createElement(O.b, {
                                badgeSets: n,
                                badgesToRender: i.badges
                            }), r.createElement("button", {
                                onClick: t.usernameClickHandler,
                                className: "chat-line__username"
                            }, r.createElement(A.a, {
                                userData: i.user,
                                highContrastUsernameColor: o,
                                theme: a
                            })))
                        }, t.alwaysShowMessage = function(e) {
                            e && e.preventDefault(), t.setState({
                                alwaysShowMessage: !0
                            })
                        }, t.hiddenMessageClickHandler = function(e) {
                            t.alwaysShowMessage(e), t.props.message.user.userID && t.props.onHiddenMessageClick(t.props.message.user.userID)
                        }, t.usernameClickHandler = function(e) {
                            t.props.onUsernameClick(t.props.message.user.userLogin, z.a.chat_message, t.props.message.id, e.currentTarget.getBoundingClientRect().bottom)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.className,
                            n = e.message,
                            i = e.showTimestamps,
                            a = e.theme,
                            o = e.useHighContrastColors,
                            s = {},
                            c = ": ";
                        if (n.messageType === m.c.Action) {
                            var l = n.user.color;
                            o && l && (l = "#" + Object(Y.a)(l, a)), s = {
                                color: l
                            }, c = " "
                        }
                        var d = null;
                        return i && (d = Object(W.l)(n.timestamp)), r.createElement("div", {
                            className: E(t, "chat-line__message"),
                            style: s,
                            "data-a-target": "chat-line-message"
                        }, d, this.renderMessageAuthor(), r.createElement("span", {
                            key: "separator",
                            "aria-hidden": "true"
                        }, c), this.renderMessageBody())
                    }, t
                }(r.Component);
            var $ = Object(k.compose)(Object(a.connect)(void 0, function(e) {
                    return Object(o.bindActionCreators)({
                        onUsernameClick: T.e,
                        onHiddenMessageClick: I.Q
                    }, e)
                }))(X),
                Z = n("p52R"),
                J = n("a1OF"),
                ee = n("9yes"),
                te = n("R2Ti"),
                ne = n("g17B"),
                ie = n("frkH"),
                re = n("4zGI"),
                ae = {
                    badges: {
                        twitchbot: "1"
                    },
                    bits: 0,
                    color: "#6441A5",
                    displayName: "AutoMod",
                    id: "automod",
                    userID: "automod",
                    username: "automod",
                    userType: Z.a.GlobalMod,
                    emotes: {}
                };

            function oe(e) {
                var t;
                switch (e) {
                    case "aggressive":
                        t = Object(s.d)("aggressive", "AutoModLine");
                        break;
                    case "sexual":
                        t = Object(s.d)("sexual", "AutoModLine");
                        break;
                    case "profanity":
                        t = Object(s.d)("profanity", "AutoModLine");
                        break;
                    case "identity":
                        t = Object(s.d)("identity", "AutoModLine");
                        break;
                    default:
                        return Object(s.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                }
                return Object(s.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                    category: t
                }, "AutoModLine")
            }
            var se = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isResolved: !1
                        }, t.getAllowMessageCallback = function(e) {
                            return e !== m.a.CheerMessageRejectedPrompt ? t.allowAutoModRejectedMessage : t.allowAutoModRejectedCheerMessage
                        }, t.getDenyMessageCallback = function(e) {
                            return e !== m.a.CheerMessageRejectedPrompt ? t.denyAutoModRejectedMessage : t.denyAutoModRejectedCheerMessage
                        }, t.allowAutoModRejectedMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props.message;
                            e.autoModType === m.a.MessageRejectedPrompt && t.props.allowRejectedChatMessage && t.props.allowRejectedChatMessage(Object(S.a)({
                                id: e.rejectedMessage.id
                            }))
                        }, t.denyAutoModRejectedMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props.message;
                            e.autoModType === m.a.MessageRejectedPrompt && t.props.denyRejectedChatMessage && t.props.denyRejectedChatMessage(Object(S.a)({
                                id: e.rejectedMessage.id
                            }))
                        }, t.allowAutoModRejectedCheerMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props,
                                n = e.message,
                                i = e.allowRejectedCheer;
                            if (n.autoModType === m.a.CheerMessageRejectedPrompt && i) {
                                var r = {
                                    id: n.rejectedMessage.id,
                                    targetUserID: n.targetUserID
                                };
                                i(Object(S.a)(r))
                            }
                        }, t.denyAutoModRejectedCheerMessage = function() {
                            t.setState({
                                isResolved: !0
                            });
                            var e = t.props,
                                n = e.message,
                                i = e.denyRejectedCheer;
                            if (n.autoModType === m.a.CheerMessageRejectedPrompt && i) {
                                var r = {
                                    id: n.rejectedMessage.id,
                                    targetUserID: n.targetUserID
                                };
                                i(Object(S.a)(r))
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e, t = this.props.message,
                            n = i.__assign({}, ae);
                        switch (t.autoModType) {
                            case m.a.MessageRejectedPrompt:
                                e = oe(t.category);
                                break;
                            case m.a.CheerMessageRejectedPrompt:
                                e = oe(t.category);
                                var a = {
                                    emotes: []
                                };
                                this.props.data && this.props.data.user && this.props.data.user.cheer && (a = this.props.data.user.cheer);
                                var o = Object(N.e)(t.originalMessage, Object(_.a)(a.emotes || []));
                                t.rejectedMessage = i.__assign({}, t.rejectedMessage, {
                                    messageParts: o
                                });
                                break;
                            case m.a.MessageRejected:
                                e = Object(s.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                                break;
                            case m.a.MessageAllowed:
                                e = Object(s.d)("Mods have allowed your message. Happy chatting!", "AutoModLine");
                                var c = (e += " VoHiYo").match("VoHiYo");
                                c && void 0 !== c.index && (n.emotes["" + c.index] = {
                                    startIndex: c.index,
                                    id: "81274"
                                });
                                break;
                            case m.a.MessageDenied:
                                e = Object(s.d)("Mods have removed your message.", "AutoModLine");
                                break;
                            case m.a.CheerMessageDenied:
                                e = Object(s.d)("Mods have removed your text message. Your Cheermote was sent.", "AutoModLine");
                                break;
                            case m.a.CheerMessageTimeout:
                                e = Object(s.d)("Mods did not approve your message in time.  Your Cheermote was sent without the text.", "AutoModLine");
                                break;
                            default:
                                throw new Error("Invalid message type")
                        }
                        var l = Object(J.a)(e, n, N.a, !1);
                        switch (t.autoModType) {
                            case m.a.MessageRejectedPrompt:
                            case m.a.CheerMessageRejectedPrompt:
                                if (!(t.autoModType !== m.a.CheerMessageRejectedPrompt || this.props.data && this.props.data.user && this.props.data.user.cheer)) return null;
                                if (this.state.isResolved) return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, Object(s.d)("Thank you for your feedback!", "ChatLine"));
                                return r.createElement(F.Va, {
                                    className: "chat-line__message"
                                }, r.createElement(y.a, {
                                    badgeSets: this.props.badgeSets,
                                    badgesToRender: l.badges
                                }), r.createElement(A.a, {
                                    userData: l.user
                                }), r.createElement("span", {
                                    key: "separator"
                                }, ": "), Object(W.f)(l.messageParts), r.createElement(F.Va, {
                                    key: "automod-prompt",
                                    className: "chat-line__nested-component--float-right"
                                }, r.createElement(F.z, {
                                    size: F.D.Small,
                                    onClick: this.getAllowMessageCallback(t.autoModType),
                                    type: F.F.Text
                                }, Object(s.d)("Allow", "AutoModLine")), r.createElement(F.V, {
                                    type: F.Nb.Span
                                }, "•"), r.createElement(F.z, {
                                    size: F.D.Small,
                                    onClick: this.getDenyMessageCallback(t.autoModType),
                                    type: F.F.Text
                                }, Object(s.d)("Deny", "AutoModLine"))), r.createElement($, i.__assign({}, this.props, {
                                    isCurrentUserStaff: !1,
                                    isDeleted: !1,
                                    isHidden: !1,
                                    showTimestamps: !1,
                                    className: E(["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"]),
                                    message: t.rejectedMessage
                                })));
                            case m.a.MessageRejected:
                            case m.a.MessageAllowed:
                            case m.a.MessageDenied:
                            case m.a.CheerMessageDenied:
                            case m.a.CheerMessageTimeout:
                                return r.createElement(F.Va, {
                                    className: E(["chat-line__message", "chat-line__message--special", "chat-line__message--alert"])
                                }, r.createElement(y.a, {
                                    badgeSets: this.props.badgeSets,
                                    badgesToRender: l.badges
                                }), r.createElement(A.a, {
                                    userData: l.user
                                }), r.createElement("span", {
                                    key: "separator"
                                }, ": "), Object(W.f)(l.messageParts));
                            default:
                                throw new Error("Invalid message type")
                        }
                    }, t
                }(r.Component),
                ce = Object(k.compose)(Object(C.a)(ee, {
                    name: "allowRejectedChatMessage",
                    options: {}
                }), Object(C.a)(ie, {
                    name: "denyRejectedChatMessage",
                    options: {}
                }), Object(C.a)(te, {
                    name: "allowRejectedCheer"
                }), Object(C.a)(re, {
                    name: "denyRejectedCheer"
                }), Object(C.a)(ne, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelID: e.channelID
                            }
                        }
                    }
                }))(se),
                le = n("QVaV"),
                de = n("8SX2"),
                ue = function(e) {
                    var t = e.event,
                        n = r.createElement(de.a, {
                            contentID: t.user.id,
                            login: t.user.username,
                            sourceType: z.a.chat_message
                        }, Object(le.a)(t.user.username, t.user.displayName)),
                        i = r.createElement(de.a, {
                            contentID: t.user.id,
                            login: t.senderLogin,
                            sourceType: z.a.chat_message
                        }, Object(le.a)(t.senderLogin, t.senderName));
                    return r.createElement(F.V, {
                        color: F.O.Alt2,
                        type: F.Nb.Span
                    }, t.promoName && t.promoGiftTotal ? Object(s.d)("{recipientButton} is continuing the Gift Sub they got from {gifterButton}!            They're one of {promoGiftTotal} gift subs to continue this {promoName}.", {
                        gifterButton: i,
                        promoGiftTotal: t.promoGiftTotal,
                        promoName: t.promoName,
                        recipientButton: n
                    }, "GiftPaidUpgradeNoticeLine") : Object(s.d)("{recipientButton} is continuing the Gift Sub they got from {gifterButton}!", {
                        gifterButton: i,
                        recipientButton: n
                    }, "GiftPaidUpgradeNoticeLine"))
                };
            ue.displayName = "GiftPaidUpgradeNoticeLine";
            n("xDdc");
            var me = function(e) {
                return r.createElement(F.Va, {
                    className: "user-notice-line",
                    margin: {
                        y: .5
                    },
                    padding: {
                        right: 2,
                        y: .5
                    }
                }, e.children)
            };
            me.displayName = "UserNoticeLine";
            var pe = n("OvAg"),
                he = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.message.params,
                            t = this.props.data,
                            n = t.channel,
                            i = t.loading,
                            a = t.error;
                        if (i || a) return null;
                        var o = Object(s.d)("{displayName} is raiding with a party of {viewerCount}.", {
                            displayName: r.createElement("strong", null, n.displayName),
                            viewerCount: r.createElement("strong", null, e.viewerCount)
                        }, "RaidIncomingMessage");
                        return r.createElement(me, {
                            "data-test-selector": "incoming-raid"
                        }, r.createElement(F.Va, {
                            display: F.W.Flex,
                            alignItems: F.f.Center
                        }, r.createElement(F.q, {
                            alt: n.displayName,
                            src: n.profileImageURL,
                            size: 30
                        }), r.createElement(F.xb, {
                            color: F.O.Base,
                            margin: {
                                left: 1
                            }
                        }, o)))
                    }, t
                }(r.Component),
                fe = Object(C.a)(pe, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.message.params.login
                            }
                        }
                    }
                })(he),
                ge = n("5zf8"),
                be = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props.moderationActionEvent,
                            t = e.createdByLogin,
                            n = null;
                        if (e.moderationActionType === m.d.AutoModEnabled) n = Object(s.d)("AutoMod has been enabled for this channel.", "ModerationActionLine");
                        else if (e.level === M.a.Channel) switch (e.moderationActionType) {
                            case m.d.Clear:
                                n = Object(s.d)("{user} cleared chat for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.EmoteOnly:
                                n = Object(s.d)("{user} enabled emote-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.EmoteOnlyOff:
                                n = Object(s.d)("{user} disabled emote-only for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.FollowersOnly:
                                var i = (e.args || [""]).join(" ").trim(),
                                    a = parseInt(i, 10);
                                n = a ? Object(s.d)("{user} enabled {length} followers-only mode for this room.", {
                                    user: t,
                                    length: Object(ge.b)(60 * a)
                                }, "ModerationActionLine") : Object(s.d)("{user} enabled followers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.FollowersOnlyOff:
                                n = Object(s.d)("{user} disabled followers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.R9kBeta:
                                n = Object(s.d)("{user} enabled r9k mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.R9kBetaOff:
                                n = Object(s.d)("{user} disabled r9k mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.Slow:
                                var o = (e.args || ["120"]).join(" ").trim(),
                                    c = parseInt(o, 10);
                                n = Object(s.d)("{user} enabled {slowTime}-second slow mode for this room.", {
                                    user: t,
                                    slowTime: c
                                }, "ModerationActionLine");
                                break;
                            case m.d.SlowOff:
                                n = Object(s.d)("{user} disabled slow mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.SubscribersOnly:
                                n = Object(s.d)("{user} enabled subscribers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            case m.d.SubscribersOnlyOff:
                                n = Object(s.d)("{user} disabled subscribers-only mode for this room.", {
                                    user: t
                                }, "ModerationActionLine");
                                break;
                            default:
                                var l = e.args && e.args.join(" ").trim(),
                                    d = l && l.length > 0 ? "/" + e.moderationActionType + " " + l : "" + e.moderationActionType;
                                n = Object(s.d)("{user} used: {command}.", {
                                    user: e.createdByLogin,
                                    command: d
                                }, "ModerationActionLine")
                        } else {
                            var u = e.targetUserLogin,
                                p = e.duration,
                                h = e.reason;
                            switch (e.moderationActionType) {
                                case m.d.Timeout:
                                    n = p && h ? Object(s.d)("{user} timed out {target} for {duration} seconds. Reason: {reason}.", {
                                        user: t,
                                        target: u,
                                        duration: p,
                                        reason: h
                                    }, "ModerationActionLine") : p ? Object(s.d)("{user} timed out {target} for {duration} seconds.", {
                                        user: t,
                                        target: u,
                                        duration: p
                                    }, "ModerationActionLine") : Object(s.d)("{user} timed out {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Ban:
                                    n = h ? Object(s.d)("{user} banned {target}. Reason: {reason}.", {
                                        user: t,
                                        target: u,
                                        reason: h
                                    }, "ModerationActionLine") : Object(s.d)("{user} banned {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Untimeout:
                                    n = Object(s.d)("{user} removed time out on {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Unban:
                                    n = Object(s.d)("{user} removed ban on {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Mod:
                                    n = Object(s.d)("{user} granted moderator privileges to {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                case m.d.Unmod:
                                    n = Object(s.d)("{user} removed moderator privileges for {target}.", {
                                        user: t,
                                        target: u
                                    }, "ModerationActionLine");
                                    break;
                                default:
                                    return null
                            }
                        }
                        return n ? r.createElement(F.Va, {
                            className: "chat-line__status"
                        }, r.createElement(F.V, {
                            type: F.Nb.Span
                        }, n)) : null
                    }, t
                }(r.Component);

            function ve() {
                return {
                    raid_error_self: Object(s.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                    raid_error_forbidden: Object(s.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                    raid_error_already_raiding: Object(s.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                    raid_error_too_many_viewers_to_raid: Object(s.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                    raid_error_unexpected: Object(s.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                    unraid_error_unexpected: Object(s.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                    unraid_error_no_active_raid: Object(s.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                    raid_notice_restricted_chat: Object(s.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                    raid_notice_mature: Object(s.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                    raid_notice_owner: Object(s.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                        unraidCommand: "/unraid"
                    }, "RaidNoticeOwnerMessage")
                }
            }
            var Ee = function(e) {
                return r.createElement("span", null, ve()[e.message.msgid])
            };
            Ee.displayName = "RaidNoticeLine";
            var ke = n("+GjP"),
                Ce = n("0WFu"),
                Se = function(e) {
                    var t = r.createElement(de.a, {
                            contentID: e.event.user.id,
                            login: e.event.user.username,
                            sourceType: z.a.chat_message
                        }, Object(le.a)(e.event.user.username, e.event.user.displayName)),
                        n = null;
                    return n = e.event.methods.prime ? Object(s.d)("{userLogin} just subscribed with {service}!", {
                        userLogin: t,
                        service: function(e) {
                            var t = Object(ke.e)("https://twitch.amazon.com/prime", {
                                ref: "subscriptionMessage",
                                channel: e
                            });
                            return r.createElement("a", {
                                className: "chat-line__message--link",
                                href: t,
                                target: "_blank",
                                rel: "noopener"
                            }, Object(s.d)("Twitch Prime", "SubNoticeLine"))
                        }(e.event.channel)
                    }, "SubNoticeLine") : Object(s.d)("{userLogin} just subscribed with a Tier {tierNumber} sub!", {
                        userLogin: t,
                        tierNumber: Object(Ce.a)(e.event.methods.plan) || 1
                    }, "SubNoticeLine"), r.createElement(F.V, {
                        color: F.O.Alt2,
                        type: F.Nb.Span
                    }, n)
                };
            Se.displayName = "SubNoticeLine";
            var ye = function(e) {
                return r.createElement(F.xb, {
                    color: F.O.Alt2,
                    display: F.W.Inline
                }, r.createElement(Se, {
                    event: e.event
                }), r.createElement("span", null, " "), Object(s.d)("{userLogin} subscribed for {months} months in a row!", {
                    userLogin: r.createElement(de.a, {
                        contentID: e.event.user.id,
                        login: e.event.user.username,
                        sourceType: z.a.chat_message
                    }, Object(le.a)(e.event.user.username, e.event.user.displayName)),
                    months: e.event.months
                }, "ResubNoticeLine"))
            };
            ye.displayName = "ResubNoticeLine";
            var Ne = n("yZCp"),
                _e = function(e) {
                    var t = e.event.message,
                        n = t.user.isIntl ? t.user.userDisplayName + " (" + t.user.userLogin + ")" : t.user.userDisplayName,
                        i = Object(s.d)("{user} is new here. Say hello!", {
                            user: r.createElement(de.a, {
                                contentID: t.id,
                                login: t.user.userLogin,
                                sourceType: z.a.chat_message
                            }, "@", n)
                        }, "NewChatterRitual");
                    return r.createElement(F.xb, {
                        color: F.O.Alt2
                    }, i)
                };
            _e.displayName = "RitualNoticeLine";
            var Oe = function(e) {
                var t = e.event,
                    n = r.createElement(de.a, {
                        contentID: t.user.id,
                        login: t.user.username,
                        sourceType: z.a.chat_message
                    }, Object(le.a)(t.user.username, t.user.displayName)),
                    i = r.createElement(de.a, {
                        contentID: t.user.id,
                        login: t.recipientLogin,
                        sourceType: z.a.chat_message
                    }, Object(le.a)(t.recipientLogin, t.recipientDisplayName)),
                    a = null;
                return a = "All-Access Pass" === t.methods.planName ? function(e, t) {
                    return Object(s.d)("{gifterButton} just gifted an All-Access Pass to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine")
                }(n, i) : "custom" === t.methods.plan ? function(e, t, n) {
                    return 1 === n ? Object(s.d)("{gifterButton} gifted a Sub to {recipientButton}! It's their first Gift Sub in the channel!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine") : n > 1 ? Object(s.d)("{gifterButton} gifted a Sub to {recipientButton}! They've given {senderCount} Gift Subs in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        senderCount: n
                    }, "SubGiftNoticeLine") : Object(s.d)("{gifterButton} gifted a subscription to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t
                    }, "SubGiftNoticeLine")
                }(n, i, t.senderCount) : function(e, t, n, i) {
                    return 1 === n ? Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}! It's their first Gift Sub in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        tierNumber: i
                    }, "SubGiftNoticeLine") : n > 1 ? Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}! They've given {senderCount} Gift Subs in the channel!", {
                        gifterButton: e,
                        recipientButton: t,
                        senderCount: n,
                        tierNumber: i
                    }, "SubGiftNoticeLine") : Object(s.d)("{gifterButton} gifted a Tier {tierNumber} Sub to {recipientButton}!", {
                        gifterButton: e,
                        recipientButton: t,
                        tierNumber: i
                    }, "SubGiftNoticeLine")
                }(n, i, t.senderCount, Object(Ce.a)(t.methods.plan) || 1), r.createElement(F.V, {
                    color: F.O.Alt2,
                    type: F.Nb.Span
                }, a)
            };
            Oe.displayName = "SubGiftNoticeLine";
            var Ie, Te = n("+kC+"),
                Ae = n("cr+I"),
                De = Object(k.compose)(Object(C.a)(Te, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                }))(function(e) {
                    var t = e.data;
                    if (t.loading) return null;
                    var n = null;
                    if (!t.error && t.user && t.user.subscriptionProducts && t.user.subscriptionProducts.length > 0) {
                        var i = t.user.subscriptionProducts.find(function(e) {
                            return !!e && !!e.url
                        });
                        i && (n = i.url)
                    }
                    if (!n) return r.createElement(F.Va, null, Object(s.d)("This room is in subscribers only mode.", "SubsOnlyUpsellLine"));
                    var a = r.createElement(F.T, {
                        targetBlank: !0,
                        to: n + "?" + Ae.stringify({
                            ref: "subscriber_only_mode_chat"
                        })
                    }, n);
                    return r.createElement(F.Va, null, Object(s.d)("This room is in subscribers only mode. To talk, purchase a channel subscription at {productLink}", {
                        productLink: a
                    }, "SubsOnlyUpsellLine"))
                }),
                Re = n("k8pZ");
            ! function(e) {
                e.Timestamp = "extension-message-timestamp", e.ExtensionName = "extension-message-name"
            }(Ie || (Ie = {}));
            var Me = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onExtensionNameClick = function(e) {
                        var n = t.props.message;
                        t.props.onExtensionNameClick(n.extension.clientID, n.extension.version, n.id, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (!this.props.installedExtensions) return null;
                    var e = this.props.message;
                    if (!this.props.installedExtensions.some(function(t) {
                            var n = t.extension;
                            return n.clientId === e.extension.clientID && n.version === e.extension.version
                        })) return null;
                    var t = this.props.message.extension.displayBadges;
                    return r.createElement(F.Va, {
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, r.createElement("div", {
                        id: this.props.message.id,
                        className: "room-message"
                    }, this.renderTimestamp(), r.createElement(O.b, {
                        badgeSets: this.props.badgeSets,
                        badgesToRender: t
                    }), this.renderMessageAuthor(this.props.message.extension), r.createElement("span", null, ": "), this.renderMessageBody()))
                }, t.prototype.renderTimestamp = function() {
                    return this.props.showTimestamps ? r.createElement("span", {
                        key: "timestamp",
                        className: "room-message__timestamp",
                        "data-test-selector": Ie.Timestamp
                    }, Object(W.a)(new Date(this.props.message.sentAt))) : null
                }, t.prototype.renderMessageBody = function() {
                    var e = Object(p.g)(this.props.message);
                    return Object(W.f)(e, {
                        forceClipsNetworkRequest: !0
                    })
                }, t.prototype.renderMessageAuthor = function(e) {
                    return r.createElement("button", {
                        onClick: this.onExtensionNameClick,
                        "data-test-selector": Ie.ExtensionName
                    }, r.createElement("span", {
                        key: e.clientID + "-" + e.version + "-messageauthor"
                    }, r.createElement("span", {
                        key: "username-display",
                        style: {
                            color: e.chatColor
                        }
                    }, r.createElement(F.V, {
                        bold: !0
                    }, e.displayName))))
                }, t
            }(r.Component);
            var Le, we = Object(a.connect)(function(e, t) {
                    return {
                        installedExtensions: Object(Re.a)(e, t.channelID)
                    }
                }, function(e) {
                    return Object(o.bindActionCreators)({
                        onExtensionNameClick: T.d
                    }, e)
                })(Me),
                Ue = "https://www.twitch.tv/settings/connections";
            ! function(e) {
                e.Kickback = "msg_blizzard", e.Enabled = "blizzard_connect_on", e.Disabled = "blizzard_connect_off", e.AlreadyEnabled = "already_blizzard_mode_on", e.AlreadyDisabled = "already_blizzard_mode_off"
            }(Le || (Le = {}));
            var Be = function(e) {
                var t = null;
                switch (e.type) {
                    case Le.Kickback:
                        var n = r.createElement(F.T, {
                            targetBlank: !0,
                            to: Ue
                        }, Ue);
                        t = Object(s.d)("You must connect your Blizzard account to send messages in this room. You can connect your Blizzard account in your Twitch settings at {settingsLink}", {
                            settingsLink: n
                        }, "BlizzardConnectModeNoticeLine");
                        break;
                    case Le.Enabled:
                        t = Object(s.d)("This room now requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case Le.Disabled:
                        t = Object(s.d)("This room no longer requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case Le.AlreadyEnabled:
                        t = Object(s.d)("This room already requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case Le.AlreadyDisabled:
                        t = Object(s.d)("This room does not require a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    default:
                        return null
                }
                return r.createElement(F.Va, null, t)
            };
            Be.displayName = "BlizzardConnectNoticeLine";
            n("NWfm");
            var Pe, Fe = "timeout_success",
                je = "untimeout_success",
                xe = "ban_success",
                Ve = "unban_success",
                He = v.a.wrap(function() {
                    return n.e(187).then(n.bind(null, "ZNYK"))
                }, "SubMysteryGiftNoticeLine"),
                Ge = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                        if (!e.doesNotUpdate) return !0;
                        if (e.isCurrentUserModerator !== this.props.isCurrentUserModerator) return !0;
                        if (e.showModerationIcons !== this.props.showModerationIcons) return !0;
                        if (e.showTimestamps !== this.props.showTimestamps) return !0;
                        if (e.useHighContrastColors !== this.props.useHighContrastColors) return !0;
                        if (e.theme !== this.props.theme) return !0;
                        switch (e.message.type) {
                            case m.b.Message:
                                if (e.message.deleted) return !0;
                                break;
                            case m.b.Resubscription:
                            case m.b.Ritual:
                                if (e.message.message && e.message.message.deleted) return !0;
                                break;
                            case m.b.AutoMod:
                                if (e.message.autoModType === m.a.MessageRejectedPrompt && e.showAutoModActions !== this.props.showAutoModActions) return !0;
                                break;
                            case m.b.Hosting:
                            case m.b.Unhost:
                            case m.b.SlowMode:
                            case m.b.SubscriberOnlyMode:
                            case m.b.FollowerOnlyMode:
                            case m.b.EmoteOnlyMode:
                            case m.b.R9KMode:
                            case m.b.Clear:
                            case m.b.Unraid:
                            case m.b.Notice:
                            case m.b.Moderation:
                            case m.b.ModerationAction:
                                if (e.showModerationActions !== this.props.showModerationActions) return !0
                        }
                        return !1
                    }, t.prototype.render = function() {
                        var e = this.props.message;
                        if (this.props.isCurrentUserModerator && this.props.showModerationActions) switch (e.type) {
                            case m.b.Hosting:
                            case m.b.Unhost:
                            case m.b.SlowMode:
                            case m.b.SubscriberOnlyMode:
                            case m.b.FollowerOnlyMode:
                            case m.b.EmoteOnlyMode:
                            case m.b.R9KMode:
                            case m.b.Clear:
                            case m.b.Unraid:
                                return null
                        }
                        switch (e.type) {
                            case m.b.AutoMod:
                                return e.autoModType !== m.a.MessageRejectedPrompt || this.props.isCurrentUserModerator && this.props.showAutoModActions ? r.createElement(ce, {
                                    channelID: this.props.channelID,
                                    message: e,
                                    badgeSets: this.props.badgeSets,
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    showModerationIcons: this.props.showModerationIcons,
                                    currentUserLogin: this.props.currentUserLogin,
                                    confirmModerationAction: this.props.confirmModerationAction
                                }) : null;
                            case m.b.ModerationAction:
                                return this.props.isCurrentUserModerator && this.props.showModerationActions ? r.createElement(be, {
                                    moderationActionEvent: e
                                }) : null;
                            case m.b.Connected:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status",
                                    "data-a-target": "chat-welcome-message"
                                }, r.createElement(F.V, {
                                    type: F.Nb.Span
                                }, Object(s.d)("Welcome to the chat room!", "ChatLine")));
                            case m.b.Disconnected:
                                return e.reason ? r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, r.createElement(F.V, {
                                    type: F.Nb.Span
                                }, Object(s.d)("You have been disconnected from chat for the following reason: {reason}", {
                                    reason: e.reason
                                }, "ChatLine"))) : r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, r.createElement(F.V, {
                                    type: F.Nb.Span
                                }, Object(s.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                            case m.b.Hosted:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, r.createElement(F.V, {
                                    type: F.Nb.Span
                                }, Object(W.e)(e)));
                            case m.b.Hosting:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, r.createElement(F.V, {
                                    type: F.Nb.Span
                                }, Object(s.d)("Now hosting {channel}", {
                                    channel: e.hostedChannel
                                }, "ChatLine")));
                            case m.b.Unhost:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, r.createElement(F.V, {
                                    type: F.Nb.Span
                                }, Object(s.d)("No longer hosting.", "ChatLine")));
                            case m.b.Message:
                                return this.props.onRenderReportChatSent && e.user.userLogin === this.props.currentUserLogin && this.props.onRenderReportChatSent(), r.createElement($, {
                                    channelID: this.props.channelID,
                                    badgeSets: this.props.badgeSets,
                                    message: e,
                                    isDeleted: e.deleted,
                                    isHidden: e.hidden,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    onPushMessage: this.props.onPushMessage,
                                    theme: this.props.theme
                                });
                            case m.b.Moderation:
                                return this.props.isCurrentUserModerator && !this.props.showModerationActions ? r.createElement(F.Va, {
                                    className: "chat-line__moderation"
                                }, Object(W.g)(e)) : null;
                            case m.b.Subscription:
                                return r.createElement(me, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && r.createElement(G, {
                                    targetUserID: e.user.userID,
                                    channelID: this.props.channelID,
                                    onPushMessage: this.props.onPushMessage,
                                    senderLogin: e.user.username
                                }), r.createElement(Se, {
                                    event: e
                                }));
                            case m.b.SubGift:
                                return r.createElement(me, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && r.createElement(G, {
                                    targetUserID: e.user.userID,
                                    channelID: this.props.channelID,
                                    onPushMessage: this.props.onPushMessage,
                                    senderLogin: e.user.username
                                }), r.createElement(Oe, {
                                    event: e
                                }));
                            case m.b.SubMysteryGift:
                                return r.createElement(me, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && r.createElement(G, {
                                    targetUserID: e.user.userID,
                                    channelID: this.props.channelID,
                                    onPushMessage: this.props.onPushMessage,
                                    senderLogin: e.user.username
                                }), r.createElement(He, {
                                    event: e
                                }));
                            case m.b.RewardGift:
                                return r.createElement(Ne.a, {
                                    event: e,
                                    channelID: this.props.channelID
                                });
                            case m.b.BitsCharity:
                                return r.createElement(F.Va, {
                                    className: "chat-line__bits-charity",
                                    padding: {
                                        right: 2,
                                        y: .5
                                    }
                                }, Object(W.b)(e));
                            case m.b.Resubscription:
                                var t = null;
                                return e.message && (t = r.createElement($, {
                                    badgeSets: this.props.badgeSets,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    channelID: this.props.channelID,
                                    className: "chat-line--inline",
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    isDeleted: e.message.deleted,
                                    isHidden: e.message.hidden,
                                    message: e.message,
                                    onPushMessage: this.props.onPushMessage,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors
                                })), r.createElement(me, null, !t && this.props.isCurrentUserModerator && this.props.showModerationIcons && r.createElement(G, {
                                    targetUserID: e.user.userID,
                                    channelID: this.props.channelID,
                                    onPushMessage: this.props.onPushMessage,
                                    senderLogin: e.user.username
                                }), r.createElement(ye, {
                                    event: e
                                }), r.createElement(F.Va, null, t));
                            case m.b.GiftPaidUpgrade:
                                return r.createElement(me, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && r.createElement(G, {
                                    targetUserID: e.user.userID,
                                    channelID: this.props.channelID,
                                    onPushMessage: this.props.onPushMessage,
                                    senderLogin: e.user.username
                                }), r.createElement(ue, {
                                    event: e
                                }));
                            case m.b.RoomMods:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, Object(W.i)(e.moderatorLogins));
                            case m.b.SlowMode:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, Object(W.j)(e));
                            case m.b.SubscriberOnlyMode:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, Object(W.k)(e));
                            case m.b.FollowerOnlyMode:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, Object(W.d)(e));
                            case m.b.EmoteOnlyMode:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, Object(W.c)(e));
                            case m.b.R9KMode:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, Object(W.h)(e));
                            case m.b.Clear:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, Object(s.d)("Chat was cleared by a moderator", "ChatLine"));
                            case m.b.Notice:
                                if (function(e) {
                                        return e.msgid in ve()
                                    }(e)) return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, r.createElement(Ee, {
                                    message: e
                                }));
                                switch (e.msgid) {
                                    case "msg_subsonly":
                                        return r.createElement(F.Va, {
                                            className: "chat-line__status"
                                        }, r.createElement(De, {
                                            channelID: this.props.channelID
                                        }));
                                    case Le.Kickback:
                                    case Le.Enabled:
                                    case Le.Disabled:
                                    case Le.AlreadyEnabled:
                                    case Le.AlreadyDisabled:
                                        return r.createElement(F.Va, {
                                            className: "chat-line__status"
                                        }, r.createElement(Be, {
                                            type: e.msgid
                                        }))
                                }
                                if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                    case Fe:
                                    case xe:
                                        return null;
                                    case je:
                                    case Ve:
                                        if (this.props.showModerationActions) return null
                                }
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, e.message);
                            case m.b.Info:
                                return r.createElement(F.Va, {
                                    className: "chat-line__status"
                                }, e.message);
                            case m.b.Raid:
                                return r.createElement(fe, {
                                    message: e
                                });
                            case m.b.Unraid:
                                return r.createElement(me, null, r.createElement(F.V, {
                                    color: F.O.Alt2
                                }, Object(s.d)("The raid has been cancelled.", "RaidCancelMessage")));
                            case m.b.Ritual:
                                return r.createElement(me, null, r.createElement(_e, {
                                    event: e
                                }), r.createElement($, {
                                    badgeSets: this.props.badgeSets,
                                    confirmModerationAction: this.props.confirmModerationAction,
                                    channelID: this.props.channelID,
                                    className: "chat-line--inline",
                                    currentUserDisplayName: this.props.currentUserDisplayName,
                                    currentUserLogin: this.props.currentUserLogin,
                                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                                    isCurrentUserStaff: this.props.isCurrentUserStaff,
                                    isDeleted: e.message.deleted,
                                    isHidden: e.message.hidden,
                                    message: e.message,
                                    onPushMessage: this.props.onPushMessage,
                                    showModerationIcons: this.props.showModerationIcons,
                                    showTimestamps: this.props.showTimestamps,
                                    useHighContrastColors: !!this.props.useHighContrastColors
                                }));
                            case m.b.ExtensionMessage:
                                return r.createElement(we, {
                                    badgeSets: this.props.badgeSets,
                                    channelID: this.props.channelID,
                                    currentUserLogin: this.props.currentUserLogin,
                                    message: e,
                                    showTimestamps: this.props.showTimestamps
                                });
                            default:
                                return null
                        }
                    }, t
                }(r.Component),
                We = n("GnwI"),
                Ye = (n("HjUq"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
                ze = 10,
                qe = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            isAutoScrolling: !0
                        }, t.saveScrollRef = function(e) {
                            return t.scroll = e
                        }, t.handleScrollEvent = function(e) {
                            t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type) && (t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= ze ? t.setState({
                                isAutoScrolling: !0
                            }) : t.setState({
                                isAutoScrolling: !1
                            }))
                        }, t.handleResize = function() {
                            t.state.isAutoScrolling && t.scrollToBottom()
                        }, t.handleClickMoreMessages = function() {
                            t.setState({
                                isAutoScrolling: !0
                            }, t.scrollToBottom)
                        }, t.scrollToBottom = function() {
                            t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                        }, t.reportChatRenderSent = function() {
                            t.props.chatRenderSentEvent && t.props.latencyTracking.reportCustomEvent(t.props.chatRenderSentEvent)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        var e = this;
                        Ye.forEach(function(t) {
                            e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                        })
                    }, t.prototype.componentWillUnmount = function() {
                        var e = this;
                        Ye.forEach(function(t) {
                            e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                        })
                    }, t.prototype.componentDidUpdate = function(e) {
                        this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                    }, t.prototype.render = function() {
                        var e = this,
                            t = this.props.messages.map(function(t) {
                                return r.createElement(Ge, {
                                    badgeSets: e.props.badgeSets,
                                    channelID: e.props.channelID,
                                    isCurrentUserModerator: e.props.isCurrentUserModerator,
                                    isCurrentUserStaff: e.props.isCurrentUserStaff,
                                    message: t,
                                    key: t.id,
                                    showAutoModActions: e.props.showAutoModActions,
                                    showModerationActions: e.props.showModerationActions,
                                    showModerationIcons: e.props.showModerationIcons,
                                    showTimestamps: e.props.showTimestamps,
                                    useHighContrastColors: e.props.useHighContrastColors,
                                    currentUserDisplayName: e.props.currentUserDisplayName,
                                    currentUserLogin: e.props.currentUserLogin,
                                    confirmModerationAction: e.props.confirmModerationAction,
                                    onPushMessage: e.props.onPushMessage,
                                    doesNotUpdate: !0,
                                    theme: e.props.theme,
                                    onRenderReportChatSent: e.reportChatRenderSent
                                })
                            });
                        return r.createElement(F.Va, {
                            refDelegate: this.props.containerRef,
                            className: "chat-list",
                            display: F.W.Flex,
                            flexDirection: F.Y.Column,
                            flexWrap: F.Z.NoWrap,
                            overflow: F.Ya.Hidden,
                            flexGrow: 1
                        }, r.createElement(g.a, {
                            onResize: this.handleResize
                        }), r.createElement(F.Na, {
                            flexGrow: 1
                        }, r.createElement(b.b, {
                            className: "chat-list__lines",
                            scrollRef: this.saveScrollRef,
                            "data-a-target": "chat-scroller"
                        }, r.createElement(F.Na, {
                            flexGrow: 1,
                            fullHeight: !0,
                            padding: {
                                bottom: 1
                            }
                        }, r.createElement("div", {
                            role: "log"
                        }, t)))), r.createElement(F.Va, {
                            className: "chat-list__more-messages-placeholder",
                            position: F.db.Relative,
                            margin: {
                                x: 2
                            }
                        }, this.moreMessages()))
                    }, t.prototype.moreMessages = function() {
                        return this.state.isAutoScrolling ? null : r.createElement(F.Na, {
                            display: F.W.Flex,
                            justifyContent: F.Ua.Center,
                            alignItems: F.f.Center,
                            position: F.db.Absolute,
                            padding: .5,
                            attachBottom: !0,
                            fullWidth: !0
                        }, r.createElement(F.xb, {
                            className: "chat-list__more-messages",
                            borderRadius: F.x.Medium
                        }, r.createElement("div", {
                            onClick: this.handleClickMoreMessages
                        }, Object(s.d)("More messages below.", "ChatList"))))
                    }, t
                }(r.Component),
                Ke = Object(We.c)("ChatListPresentation", {
                    autoReportInteractive: !0
                })(qe),
                Qe = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            messages: []
                        }, t.onBufferUpdate = function() {
                            t.syncBufferHandle || (t.syncBufferHandle = setTimeout(t.syncBufferedMessages, 0))
                        }, t.syncBufferedMessages = function() {
                            t.props.messageBufferAPI && t.setState({
                                messages: t.props.messageBufferAPI.getMessages()
                            }), t.clearBufferHandle()
                        }, t.clearBufferHandle = function() {
                            t.syncBufferHandle && (clearTimeout(t.syncBufferHandle), t.syncBufferHandle = 0)
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidMount = function() {
                        this.props.messageBufferAPI && (this.props.messageBufferAPI.addUpdateHandler(this.onBufferUpdate), this.setState({
                            messages: this.props.messageBufferAPI.getMessages()
                        }))
                    }, t.prototype.componentWillReceiveProps = function(e) {
                        var t = e.pubsub.messages.chatRichEmbedInfo,
                            n = e.pubsub.messages.extensionMessage;
                        t && this.props.pubsub.messages.chatRichEmbedInfo !== t && s.o.apollo.client.writeQuery({
                            query: u,
                            variables: {
                                slug: t.data.twitch_metadata.clip_metadata.slug
                            },
                            data: function(e) {
                                var t = e.data.twitch_metadata.clip_metadata;
                                return {
                                    clip: {
                                        slug: t.slug,
                                        id: t.id,
                                        url: e.data.request_url,
                                        title: e.data.title,
                                        thumbnailURL: e.data.thumbnail_url,
                                        curator: t.curator_id ? {
                                            displayName: e.data.author_name,
                                            id: t.curator_id,
                                            __typename: "User"
                                        } : null,
                                        broadcaster: t.channel_display_name ? {
                                            displayName: t.channel_display_name,
                                            id: t.broadcaster_id,
                                            __typename: "User"
                                        } : null,
                                        __typename: "Clip"
                                    }
                                }
                            }(t)
                        }), this.props.messageBufferAPI !== e.messageBufferAPI && (this.props.messageBufferAPI && this.props.messageBufferAPI.removeUpdateHandler(this.onBufferUpdate), e.messageBufferAPI && (e.messageBufferAPI.addUpdateHandler(this.onBufferUpdate), this.setState({
                            messages: e.messageBufferAPI.getMessages()
                        }))), n && this.props.pubsub.messages.extensionMessage !== n && this.props.onPushMessage(function(e) {
                            var t = e.data;
                            return {
                                type: m.b.ExtensionMessage,
                                id: t.id,
                                sentAt: t.sent_at,
                                extension: {
                                    clientID: t.sender.extension_client_id,
                                    version: t.sender.extension_version,
                                    displayName: t.sender.display_name,
                                    displayBadges: Object(p.b)(t.sender.badges),
                                    chatColor: t.sender.chat_color
                                },
                                content: {
                                    text: t.content.text,
                                    fragments: Object(p.c)(t.content.fragments)
                                }
                            }
                        }(n))
                    }, t.prototype.componentWillUnmount = function() {
                        this.props.messageBufferAPI && this.props.messageBufferAPI.removeUpdateHandler(this.onBufferUpdate), this.clearBufferHandle()
                    }, t.prototype.render = function() {
                        return r.createElement(Ke, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeSets,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            channelLogin: this.props.channelLogin,
                            onPushMessage: this.props.onPushMessage,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isCurrentUserStaff: this.props.isCurrentUserStaff,
                            isEmbedded: this.props.isEmbedded,
                            messages: this.state.messages,
                            showAutoModActions: this.props.showAutoModActions,
                            showModerationActions: this.props.showModerationActions,
                            showModerationIcons: this.props.showModerationIcons,
                            showTimestamps: this.props.showTimestamps,
                            theme: this.props.theme,
                            useHighContrastColors: this.props.useHighContrastColors,
                            currentUserLogin: this.props.currentUserLogin,
                            containerRef: this.props.containerRef,
                            chatRenderSentEvent: this.props.chatRenderSentEvent,
                            confirmModerationAction: this.props.confirmModerationAction
                        })
                    }, t
                }(r.Component);
            var Xe = Object(o.compose)(Object(a.connect)(function(e) {
                return {
                    chatRenderSentEvent: Object(f.b)(e),
                    showAutoModActions: e.chat.showAutoModActions,
                    showModerationActions: e.chat.showModerationActions,
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps,
                    useHighContrastColors: e.chat.useHighContrastColors
                }
            }), Object(c.a)([{
                skip: function(e) {
                    return !e.channelID
                },
                topic: function(e) {
                    return e.channelID ? Object(d.w)(e.channelID) : ""
                },
                mapMessageTypesToProps: (Pe = {}, Pe[l.PubsubMessageType.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", Pe[l.PubsubMessageType.StreamChatRoomExtensionMessage] = "extensionMessage", Pe)
            }]), h.a)(Qe);
            n.d(t, !1, function() {
                return Qe
            }), n.d(t, "a", function() {
                return Xe
            })
        },
        r2Xj: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            });
            var i = {
                DarkMode: "darkMode",
                FollowerDuration: "followerDuration",
                FollowerMode: "followerMode",
                HideChat: "hideChat",
                ShowMessageFlags: "showMessageFlags",
                ShowAutoModActions: "showAutoModActions",
                ShowModActions: "showModerationActions",
                ShowModIcons: "showModIcons",
                ShowTimestamps: "showTimestamps",
                UseHighContrastColors: "useHighContrastColors",
                SlowMode: "slowMode"
            }
        },
        rVcM: function(e, t, n) {},
        ru7j: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "BlockedUsers"
                    },
                    variableDefinitions: [],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "blockedUsers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 61
                }
            };
            n.loc.source = {
                body: "query BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        ry0r: function(e, t, n) {
            "use strict";
            var i, r = n("/MKj"),
                a = n("kRBY"),
                o = n("mrSG"),
                s = n("q1tI"),
                c = n("oJmH"),
                l = n("yR8l"),
                d = n("TSYQ"),
                u = n("4rCz"),
                m = n("Ue10");
            n("OCTF");
            ! function(e) {
                e.CloseButton = "bits-card-wrapper-close-button-selector", e.OuterWrapper = "bits-card-wrapper-outer-selector", e.InnerWrapper = "bits-card-wrapper-inner-selector"
            }(i || (i = {}));
            var p, h = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = e.onUserClose,
                            n = e.children,
                            r = e.className,
                            a = e.dataATarget,
                            o = e.closeDataATarget,
                            c = t ? s.createElement(m.Va, {
                                position: m.db.Absolute,
                                padding: {
                                    top: .5,
                                    right: .5
                                },
                                attachRight: !0,
                                attachTop: !0
                            }, s.createElement(m.A, {
                                ariaLabel: Object(u.d)("close bits card", "BitsCard"),
                                "data-a-target": o,
                                "data-test-selector": i.CloseButton,
                                onClick: t,
                                icon: m.nb.Close,
                                type: m.C.Secondary,
                                size: m.B.Small
                            })) : null;
                        return s.createElement(m.xb, {
                            "data-test-selector": i.OuterWrapper,
                            className: d("bits-card-wrapper", r),
                            "data-a-target": a,
                            display: m.W.Flex,
                            flexDirection: m.Y.Column,
                            position: m.db.Absolute,
                            background: m.r.Base,
                            elevation: 3,
                            zIndex: m.ac.Above,
                            fullWidth: !0,
                            border: !0
                        }, c, s.createElement(m.Va, {
                            "data-test-selector": i.InnerWrapper,
                            display: m.W.Flex,
                            flexDirection: m.Y.Column,
                            alignItems: m.f.Center,
                            justifyContent: m.Ua.Center,
                            flexGrow: 1,
                            fullWidth: !0
                        }, n))
                    }, t.defaultProps = {
                        dataATarget: "bits-card",
                        closeDataATarget: "bits-card-close-button"
                    }, t
                }(s.PureComponent),
                f = n("/7QA"),
                g = function() {
                    return s.createElement(m.Va, {
                        textAlign: m.Jb.Center,
                        padding: 1
                    }, s.createElement(m.V, {
                        italic: !0
                    }, Object(f.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
                },
                b = n("jv9u"),
                v = n("eDVu"),
                E = n("0Log"),
                k = n("/aPz"),
                C = n("/0dD"),
                S = n("KtNF"),
                y = (n("wtKP"), function(e) {
                    var t = void 0 !== e.progress,
                        n = s.createElement("img", {
                            className: "cheer-badge__image",
                            src: e.badge.image1x,
                            alt: e.badge.title,
                            srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                        });
                    if (!t) return n;
                    var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                    return s.createElement("div", {
                        className: "cheer-badge__progress-container"
                    }, n, s.createElement("div", {
                        className: "cheer-badge__progress-overlay",
                        style: {
                            width: i + "px"
                        },
                        "data-test-selector": "cheer-progress"
                    }))
                }),
                N = n("5zXJ"),
                _ = function(e) {
                    var t;
                    e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = s.createElement(m.Va, {
                        padding: {
                            bottom: .5
                        }
                    }, e.selfBitsBadge.current && s.createElement(m.Va, {
                        display: m.W.Inline,
                        margin: {
                            right: .5
                        }
                    }, s.createElement(y, {
                        badge: e.selfBitsBadge.current
                    })), e.selfBitsBadge.next && s.createElement(y, {
                        badge: e.selfBitsBadge.next,
                        progress: e.selfBitsBadge.progress
                    }), e.selfBitsBadge.nextBits && Object(f.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                        bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                    }, "Bits--BalanceFooter")));
                    var n = Object(f.d)("{bitsGem} Log in to see your Bits balance", {
                        bitsGem: s.createElement(S.a, {
                            count: 100,
                            withImage: !0,
                            bitsConfig: e.bitsConfig,
                            themeOverride: C.a.Dark
                        })
                    }, "Bits--BalanceFooter");
                    return void 0 !== e.balance && null !== e.balance && (n = Object(f.d)("You have {currentBits}", {
                        currentBits: s.createElement(S.a, {
                            count: e.balance,
                            withImage: !0,
                            withText: !0,
                            bitsConfig: e.bitsConfig,
                            themeOverride: C.a.Dark
                        })
                    }, "Bits--BalanceFooter")), s.createElement(m.Va, {
                        flexGrow: 1,
                        padding: 1,
                        className: "bits-balance-footer"
                    }, t, s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexGrow: 1,
                        alignItems: m.f.Center,
                        justifyContent: m.Ua.Between
                    }, s.createElement("div", null, n), s.createElement(m.z, {
                        disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > N.n,
                        onClick: e.onClickGetBits,
                        "data-test-selector": "get-bits-button",
                        "data-a-target": "get-bits-button"
                    }, Object(f.d)("Get Bits", "Bits--BalanceFooter"))))
                },
                O = function(e) {
                    return s.createElement(m.Va, {
                        flexGrow: 1
                    }, s.createElement(m.Va, {
                        className: "undo-prompt__footer",
                        padding: 1,
                        display: m.W.Flex,
                        justifyContent: m.Ua.Between
                    }, s.createElement(m.z, {
                        onClick: e.onCancel || void 0,
                        type: m.F.Hollow,
                        overlay: !0,
                        "data-test-selector": "cancel-button"
                    }, Object(f.d)("Cancel", "Bits--UndoPrompt")), s.createElement(m.z, {
                        onClick: e.onConfirm || void 0,
                        "data-test-selector": "confirm-button"
                    }, Object(f.d)("Send", "Bits--UndoPrompt"))), s.createElement(m.gb, {
                        animationDirection: m.hb.Down,
                        size: m.ib.ExtraSmall,
                        animationDuration: N.v.UNDO_PROMPT_DURATION / 1e3
                    }))
                },
                I = function(e) {
                    return e.event, s.createElement(_, {
                        bitsConfig: e.bitsConfig,
                        onClickGetBits: e.onClickGetBits,
                        balance: e.balance,
                        selfBitsBadge: e.selfBitsBadge
                    })
                },
                T = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.isSending ? this.props.totalBits >= N.r ? s.createElement(O, {
                            onCancel: this.props.onCancelSend,
                            onConfirm: this.props.onConfirmSend
                        }) : null : this.props.event ? s.createElement(I, {
                            event: this.props.event,
                            selfBitsBadge: this.props.userSelfBitsBadge,
                            bitsConfig: this.props.bitsConfig,
                            onClickGetBits: this.props.handleClickBuy,
                            balance: this.props.bitsBalance
                        }) : s.createElement(_, {
                            selfBitsBadge: this.props.userSelfBitsBadge,
                            bitsConfig: this.props.bitsConfig,
                            onClickGetBits: this.props.handleClickBuy,
                            balance: this.props.bitsBalance
                        })
                    }, t
                }(s.PureComponent),
                A = n("wUQP"),
                D = function(e) {
                    return s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexGrow: 1,
                        flexDirection: m.Y.Column,
                        justifyContent: m.Ua.Center,
                        alignItems: m.f.Center,
                        padding: 1
                    }, s.createElement(m.Va, {
                        padding: {
                            top: 1
                        }
                    }, s.createElement(m.V, {
                        type: m.Nb.H5,
                        color: m.O.Link,
                        bold: !0
                    }, Object(f.d)("Cheer to support your streamer and Direct Relief!", "Bits--CharityCheerIntro"))), s.createElement(m.S, {
                        src: "https://d3aqoihi2n8ty8.cloudfront.net/charity-banner/direct-relief_bits-banner.png",
                        alt: Object(f.d)("Twitch + Direct Relief", "Bits--CharityCheerIntro")
                    }), s.createElement(m.V, null, Object(f.d)("Twitch will donate $2 for every 1000 Bits using the limited time Charity Cheermote (charity) or #charity with any Cheermote <x:link>Details</x:link>", {
                        "x:link": function(e) {
                            return s.createElement(m.T, {
                                linkTo: "http://link.twitch.tv/hashtag-charity"
                            }, e)
                        }
                    }, "Bits--CharityCheerIntro")), s.createElement(m.Va, {
                        padding: {
                            top: 1,
                            bottom: 1
                        }
                    }, s.createElement("a", {
                        href: "#",
                        onClick: e.onClickHelp,
                        "data-test-selector": "help-link"
                    }, Object(f.d)("How do I cheer?", "Bits--CharityCheerIntro"))))
                },
                R = n("dx/T"),
                M = function(e) {
                    return s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexGrow: 1,
                        flexDirection: m.Y.Column,
                        justifyContent: m.Ua.Center,
                        alignItems: m.f.Center,
                        padding: 1
                    }, s.createElement(m.Va, {
                        padding: {
                            top: 2,
                            bottom: 2
                        }
                    }, s.createElement(m.V, {
                        type: m.Nb.H5,
                        color: m.O.Link,
                        bold: !0
                    }, Object(f.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), s.createElement(m.V, null, Object(f.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), s.createElement(m.Va, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement("a", {
                        href: "#",
                        onClick: e.onClickHelp,
                        "data-test-selector": "help-link"
                    }, Object(f.d)("How do I cheer?", "Bits--CheermoteIntro"))))
                },
                L = n("4Wd7"),
                w = function(e) {
                    var t = e.headline || e.prefix + (e.tier || "");
                    if (e.tournament && e.tier <= 0) {
                        var n = e.tournament.teams.find(function(t) {
                            return t.id === e.prefix
                        });
                        n && (t = n.name + " - " + e.prefix)
                    }
                    return s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexDirection: m.Y.Column,
                        alignItems: m.f.Center,
                        padding: 1
                    }, s.createElement(m.V, {
                        type: m.Nb.H4,
                        bold: !0
                    }, t), s.createElement(L.a, {
                        prefix: e.prefix,
                        amount: e.tier,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: e.tier > 0
                    }))
                },
                U = (n("Aa/l"), function(e) {
                    var t = null;
                    return e.minToCheer > 1 && (t = s.createElement(m.V, {
                        "data-test-selector": "min-to-cheer-selector",
                        color: m.O.Alt2,
                        italic: !0
                    }, Object(f.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                        minToCheer: e.minToCheer
                    }, "Bits--CheermoteTierIntro"))), s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexGrow: 1,
                        flexDirection: m.Y.Column,
                        alignItems: m.f.Center,
                        justifyContent: m.Ua.Center,
                        padding: 1,
                        className: "cheermote-tier-intro"
                    }, s.createElement(m.Va, {
                        padding: {
                            x: 4
                        },
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(m.V, {
                        color: m.O.Alt2
                    }, Object(f.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t)
                }),
                B = n("4VQm"),
                P = n("DMoW"),
                F = (n("ecb7"), function(e) {
                    var t = e.prefixes.map(function(t, n) {
                        if (t.alt && t.cheerAmount) return s.createElement(m.Na, {
                            className: "pending-cheer-list__list-item",
                            key: n,
                            padding: {
                                x: 1
                            }
                        }, s.createElement("li", null, s.createElement(L.a, {
                            prefix: t.alt,
                            amount: t.cheerAmount > N.p ? N.p : t.cheerAmount,
                            bitsConfig: e.bitsConfig,
                            size: L.b.Small,
                            showAmount: !0,
                            showImage: !0
                        })))
                    });
                    return s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexDirection: m.Y.Row,
                        alignItems: m.f.End,
                        justifyContent: m.Ua.Center,
                        flexWrap: m.Z.Wrap,
                        margin: {
                            top: 1
                        },
                        className: "pending-cheer-list"
                    }, t)
                });
            ! function(e) {
                e.MinCheer = "sponsored-campaign-minimum-cheer", e.OverBitsTotal = "sponsored-campaign-over-total", e.CannotBeSponsored = "sponsored-campaign-cannot-be-sponsored", e.OverUserLimit = "sponsored-campaign-over-user-limit"
            }(p || (p = {}));
            var j, x = function(e) {
                    var t = 0;
                    if (e.prefixes.forEach(function(n) {
                            n.alt === e.sponsoredCampaignPrefix && n.cheerAmount && (t += n.cheerAmount)
                        }), t <= 0) return null;
                    if (t < e.sponsoredCampaign.minimumBitsAmount) {
                        var n = Object(f.d)("This Cheermote has a minimum of {minBits} Bits for {brand} to add extra Bits.", {
                            minBits: e.sponsoredCampaign.minimumBitsAmount,
                            brand: e.sponsoredCampaign.brandName
                        }, "Bits--PendingCheer");
                        return s.createElement(m.V, {
                            "data-test-selector": p.MinCheer,
                            color: m.O.Error
                        }, n)
                    }
                    if (e.sponsoredBitsBonus + e.sponsoredCampaign.bitsUsed > e.sponsoredCampaign.bitsTotal) {
                        n = Object(f.d)("Not enough bits from the sponsored pool to support your cheer with the {brand} Cheermote.", {
                            brand: e.sponsoredCampaign.brandName
                        }, "Bits--PendingCheer");
                        return s.createElement(m.V, {
                            "data-test-selector": p.OverBitsTotal,
                            color: m.O.Error
                        }, n)
                    }
                    if (e.sponsoredCampaign.self) {
                        if (!e.sponsoredCampaign.self.canBeSponsored) {
                            n = Object(f.d)("You are not eligible to use the {brand} Cheermote.", {
                                brand: e.sponsoredCampaign.brandName
                            }, "Bits--PendingCheer");
                            return s.createElement(m.V, {
                                "data-test-selector": p.CannotBeSponsored,
                                color: m.O.Error
                            }, n)
                        }
                        if (e.sponsoredCampaign.self.bitsUsed + e.sponsoredBitsBonus > e.sponsoredCampaign.userLimit) {
                            n = Object(f.d)("You have reached the user limit for use of the {brand} Cheermote.", {
                                brand: e.sponsoredCampaign.brandName
                            }, "Bits--PendingCheer");
                            return s.createElement(m.V, {
                                "data-test-selector": p.OverUserLimit,
                                color: m.O.Error
                            }, n)
                        }
                    }
                    return null
                },
                V = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.event, null
                    }, t
                }(s.Component),
                H = (n("H0r1"), (j = {})[P.F.MESSAGE_LENGTH_EXCEEDED] = "message-length-exceeded-selector", j[P.F.USER_BANNED] = "user-banned-selector", j[P.F.USER_INELIGIBLE] = "user-ineligible-selector", j[P.F.USER_SUSPENDED] = "user-suspended-selector", j[P.F.CHANNEL_INELIGIBLE] = "channel-ineligible-selector", j[P.F.ZALGO_MESSAGE] = "zalgo-message-selector", j[P.F.CHANNEL_BLOCKED_TERMS] = "channel-blocked-terms-selector", j[P.F.INVALID_EVENT_ID] = "invalid-event-id-selector", j[P.F.REQUEST_THROTTLED] = "request-throttled-selector", j[P.F.UNKNOWN] = "unknown-selector", j),
                G = function(e) {
                    var t;
                    if (e.prefixes && 1 === e.prefixes.length) {
                        var n = e.prefixes[0].alt;
                        n && (t = s.createElement(m.Va, {
                            padding: {
                                top: 2
                            }
                        }, s.createElement(L.a, {
                            prefix: n,
                            amount: e.amount > N.p ? N.p : e.amount,
                            bitsConfig: e.bitsConfig,
                            showImage: !0,
                            showAmount: !0
                        })))
                    } else if (e.prefixes) t = s.createElement(m.Va, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(B.b, {
                        className: "pending-cheer__scroll-container"
                    }, s.createElement(F, {
                        prefixes: e.prefixes,
                        bitsConfig: e.bitsConfig
                    })));
                    else {
                        var i = Object(f.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                            totalBits: s.createElement("strong", null, e.amount),
                            channelName: e.channelDisplayName
                        }, "Bits--PendingCheer");
                        t = s.createElement(m.Va, {
                            "data-test-selector": "default-pending-cheer-message-selector",
                            padding: {
                                top: 2,
                                x: 5
                            }
                        }, s.createElement(m.V, {
                            color: m.O.Alt2,
                            "data-a-target": "total-bits-message"
                        }, i))
                    }
                    var r = null;
                    e.purchaseMore && e.purchaseMore > 0 && (r = s.createElement(m.V, {
                        "data-test-selector": "purchase-more-selector",
                        "data-a-target": "need-more-bits-error"
                    }, Object(f.d)("Please purchase {neededBits} more Bits to Cheer", {
                        neededBits: e.purchaseMore
                    }, "Bits--PendingCheer")));
                    var a = null;
                    if (e.largestCheermote > N.p || e.bitsSendHasError && e.bitsSendErrorCode === P.F.TOO_LARGE_BITS_EMOTE) {
                        var o = Object(f.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                            maximumCheerSize: N.p
                        }, "Bits--PendingCheer");
                        r = s.createElement(m.V, {
                            "data-test-selector": "largest-cheermote-selector",
                            color: m.O.Error,
                            "data-a-target": "max-cheer-bits-error"
                        }, o)
                    }
                    if (e.amount < e.minToCheer || e.bitsSendHasError && e.bitsSendErrorCode === P.F.AMOUNT_BELOW_MIN_BITS) {
                        var c = Object(f.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                            moreBitsAmount: e.minToCheer - e.amount
                        }, "Bits--PendingCheer");
                        r = s.createElement(m.V, {
                            "data-test-selector": "minimum-cheer-selector",
                            color: m.O.Error,
                            "data-a-target": "min-cheer-bits-error"
                        }, c)
                    }
                    if (e.amount > N.q || e.bitsSendHasError && e.bitsSendErrorCode === P.F.TOO_LARGE_CHEER) {
                        var l = Object(f.d)("{maximumCheerSize} is the maximum amount of Bits you can send in one message, send multiple messages if you want to Cheer more!", {
                            maximumCheerSize: N.q
                        }, "Bits--PendingCheer");
                        r = s.createElement(m.V, {
                            "data-test-selector": "minimum-cheer-selector",
                            color: m.O.Error,
                            "data-a-target": "max-message-bits-error"
                        }, l)
                    }
                    var d = null;
                    if (e.prefixes && e.sponsoredCampaign && e.sponsoredCampaignPrefix && (d = s.createElement(x, {
                            prefixes: e.prefixes,
                            sponsoredCampaign: e.sponsoredCampaign,
                            sponsoredCampaignPrefix: e.sponsoredCampaignPrefix,
                            sponsoredBitsBonus: e.sponsoredBitsBonus
                        })), e.smallestCheermote < e.minPerEmote || e.bitsSendHasError && e.bitsSendErrorCode === P.F.EMOTE_AMOUNT_BELOW_MIN_BITS) {
                        var u = Object(f.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                            minPerEmote: e.minPerEmote
                        }, "Bits--PendingCheer");
                        a = s.createElement(m.V, {
                            "data-test-selector": "minimum-cheermote-selector",
                            color: m.O.Error,
                            italic: !0,
                            "data-a-target": "min-emote-bits-error"
                        }, u)
                    }
                    if (e.bitsSendHasError) {
                        var p = H[e.bitsSendErrorCode] || H[P.F.UNKNOWN],
                            h = void 0;
                        switch (e.bitsSendErrorCode) {
                            case P.F.ZALGO_MESSAGE:
                                h = Object(f.d)("You have unsupported characters in your message, please remove them and try again.", "Bits--PendingCheer");
                                break;
                            case P.F.USER_BANNED:
                            case P.F.USER_INELIGIBLE:
                            case P.F.USER_SUSPENDED:
                            case P.F.CHANNEL_INELIGIBLE:
                                h = Object(f.d)("Sorry, you are unable to send bits in this channel at this time.", "Bits--PendingCheer");
                                break;
                            case P.F.CHANNEL_BLOCKED_TERMS:
                                h = Object(f.d)("You have blocked words in your message, please remove them and try again.", "Bits--PendingCheer");
                                break;
                            case P.F.MESSAGE_LENGTH_EXCEEDED:
                                h = Object(f.d)("You have exceeded the maximum number of characters you can use in your cheer.", "Bits--PendingCheer");
                                break;
                            case P.F.INVALID_EVENT_ID:
                            case P.F.REQUEST_THROTTLED:
                            case P.F.UNKNOWN:
                            default:
                                h = Object(f.d)("Something went wrong when processing your cheer, please try again later.", "Bits--PendingCheer")
                        }
                        a = s.createElement(m.V, {
                            "data-test-selector": p,
                            color: m.O.Error,
                            italic: !0
                        }, h)
                    }
                    var g = s.createElement(L.a, {
                        amount: e.amount + e.bonusBits,
                        prefix: N.l,
                        bitsConfig: e.bitsConfig,
                        display: m.W.Inline,
                        showImage: !1,
                        showAmount: !0,
                        size: L.b.Medium
                    });
                    return s.createElement(m.Va, null, s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexDirection: m.Y.Column,
                        alignItems: m.f.Center,
                        padding: 1,
                        className: "pending-cheer"
                    }, s.createElement(m.V, {
                        fontSize: m.Aa.Size4,
                        bold: !0
                    }, Object(f.d)("Cheering {totalBits} Bits", {
                        totalBits: g
                    }, "Bits--PendingCheer")), !a && t, !a && !r && d && s.createElement(m.Va, {
                        padding: {
                            top: 1
                        }
                    }, d), !a && r && s.createElement(m.Va, {
                        padding: {
                            top: 1
                        }
                    }, r), a && s.createElement(m.Va, {
                        padding: {
                            top: 3,
                            x: 3
                        }
                    }, a)), !a && !r && s.createElement(V, {
                        event: e.event,
                        amount: e.amount,
                        "data-test-selector": "event-reminder-selector"
                    }))
                },
                W = n("x1M1"),
                Y = (n("zmH+"), {
                    themed: !0,
                    dark: {
                        "1x": N.b + "/dark/animated/promo/intro.gif"
                    },
                    light: {
                        "1x": N.b + "/light/animated/promo/intro.gif"
                    }
                }),
                z = function() {
                    return s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexDirection: m.Y.Column,
                        alignItems: m.f.Center,
                        justifyContent: m.Ua.Center,
                        flexGrow: 1,
                        className: "bits-sending"
                    }, s.createElement(m.Va, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(W.a, {
                        sources: Y
                    })), s.createElement(m.V, {
                        italic: !0
                    }, Object(f.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
                };

            function q(e) {
                var t = {
                    maximumFractionDigits: 1
                };
                return e < 1e4 ? Object(f.e)(e, t) : e < 1e5 ? Object(f.f)(100 * Math.floor(e / 100), t) : e < 1e6 ? Object(f.f)(1e3 * Math.floor(e / 1e3), t) : Object(f.f)(1e5 * Math.floor(e / 1e5), t)
            }
            n("Yr1V");
            var K, Q = function(e) {
                    var t = q(e.sponsorCampaign.bitsTotal - e.sponsorCampaign.bitsUsed),
                        n = q(e.sponsorCampaign.bitsTotal);
                    return s.createElement(m.xb, {
                        background: m.r.AccentAlt2,
                        color: m.O.Overlay,
                        display: m.W.Flex,
                        flexGrow: 1,
                        flexDirection: m.Y.Column,
                        position: m.db.Relative,
                        justifyContent: m.Ua.Center,
                        alignItems: m.f.Center,
                        padding: 1
                    }, s.createElement(m.Va, {
                        padding: {
                            top: 1,
                            bottom: 1
                        }
                    }, s.createElement(m.V, {
                        type: m.Nb.H5,
                        bold: !0
                    }, Object(f.d)("Give more Bits to this streamer!", "Bits--SponsorIntro"))), s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexDirection: m.Y.Row,
                        fullWidth: !0,
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(m.Na, {
                        padding: {
                            right: 1
                        }
                    }, s.createElement(m.S, {
                        src: e.sponsorCampaign.brandImageURL,
                        alt: e.sponsorCampaign.brandName
                    })), s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexDirection: m.Y.Column,
                        flexGrow: 1
                    }, s.createElement(m.Na, {
                        alignSelf: m.g.Baseline
                    }, s.createElement(m.V, null, Object(f.d)("{brandName} Bits", {
                        brandName: e.sponsorCampaign.brandName
                    }, "Bits--SponsorIntro"))), s.createElement(m.gb, {
                        value: e.sponsorCampaign.bitsPercentageRemaining,
                        mask: !0
                    }), s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexDirection: m.Y.Row,
                        justifyContent: m.Ua.Between
                    }, s.createElement(m.V, {
                        fontSize: m.Aa.Size7
                    }, Object(f.d)("{bitsRemaining} Remiaining", {
                        bitsRemaining: t
                    }, "Bits--SponsorIntro")), s.createElement(m.V, {
                        fontSize: m.Aa.Size7
                    }, Object(f.d)("{totalBits}", {
                        totalBits: n
                    }, "Bits--SponsorIntro"))))), s.createElement(m.V, {
                        fontSize: m.Aa.Size7
                    }, Object(f.d)("The {brandName} Cheermote gives {sponsorPercentage}% bonus Bits when you Cheer {minimumSponsorBits} or more!", {
                        minimumSponsorBits: e.sponsorCampaign.thresholds[0].minimumBits,
                        brandName: e.sponsorCampaign.brandName,
                        sponsorPercentage: 100 * e.sponsorCampaign.thresholds[0].matchedPercent
                    }, "Bits--SponsorIntro"), s.createElement(m.T, {
                        type: m.U.Overlay,
                        to: "https://www.twitch.tv/"
                    }, Object(f.d)(" Details", "Bits--SponsorIntro"))), s.createElement(m.xb, {
                        background: m.r.AccentAlt2,
                        position: m.db.Absolute,
                        className: "sponsored-cheermote__tail"
                    }))
                },
                X = (n("u0cu"), function(e) {
                    var t = Object(f.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                            totalBits: e.totalBits,
                            channelName: e.channelDisplayName
                        }, "Bits--UndoPrompt"),
                        n = null;
                    if (e.prefixes && e.prefixes.length > 1) n = s.createElement(B.b, {
                        className: "bits-undo-prompt__scroll-container"
                    }, s.createElement(m.Va, {
                        margin: {
                            top: 1
                        }
                    }, s.createElement(F, {
                        prefixes: e.prefixes,
                        bitsConfig: e.bitsConfig
                    })));
                    else {
                        var i = e.prefixes[0].alt;
                        i && (n = s.createElement(m.Va, {
                            padding: {
                                bottom: 1
                            }
                        }, s.createElement(L.a, {
                            prefix: i,
                            amount: e.totalBits,
                            bitsConfig: e.bitsConfig,
                            showAmount: !0,
                            showImage: !0
                        })))
                    }
                    return s.createElement(m.Va, {
                        display: m.W.Flex,
                        flexDirection: m.Y.Column,
                        alignItems: m.f.Center,
                        justifyContent: m.Ua.Center,
                        flexGrow: 1,
                        padding: 1,
                        className: "bits-undo-prompt"
                    }, n, s.createElement(m.V, null, t))
                }),
                $ = function() {
                    return s.createElement(m.Va, {
                        className: "hgg-2018-introduction"
                    }, s.createElement(m.Va, {
                        padding: {
                            top: 1
                        }
                    }, s.createElement(m.V, {
                        fontSize: m.Aa.Size5,
                        bold: !0
                    }, Object(f.d)("Cheer with Bits and unlock loot!", "HGG2018Introduction"))), s.createElement(m.Va, {
                        fullWidth: !0,
                        display: m.W.Flex,
                        flexDirection: m.Y.Column,
                        alignContent: m.e.Stretch
                    }, s.createElement(m.S, {
                        className: "hgg-2018-introduction__banner-image",
                        src: N.c + "/hearthstone2018/marketing/bitscardbanner.png",
                        srcSet: {
                            "2x": N.c + "/hearthstone2018/marketing/bitscardbanner.png"
                        },
                        alt: Object(f.d)("Hearthstone Global Games", "HGG2018Introduction")
                    })), s.createElement(m.Va, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(m.V, null, Object(f.d)("Unlock in-game loot and Twitch emotes when you Cheer with Bits to support your favorite team.", "HGG2018Introduction"))), s.createElement(m.Va, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(m.T, {
                        to: "https://watch.twitch.tv/HGGCheer",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(f.d)("Details", "HGG2018Introduction"))))
                },
                Z = (n("qKeE"), function() {
                    return s.createElement(m.Va, {
                        className: "hgc-2018-introduction"
                    }, s.createElement(m.Va, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement(m.V, {
                        fontSize: m.Aa.Size5,
                        bold: !0
                    }, Object(f.d)("Cheer with Bits and unlock loot!", "HGC2018Introduction"))), s.createElement(m.Va, {
                        className: "hgc-2018-introduction__banner-background",
                        padding: {
                            top: 1
                        }
                    }, s.createElement(m.Na, {
                        position: m.db.Absolute,
                        attachRight: !0,
                        attachLeft: !0,
                        margin: "auto"
                    }, s.createElement(m.S, {
                        className: "hgc-2018-introduction__banner-image",
                        src: N.c + "/hgc2018/hgc-logo/1x.png",
                        srcSet: {
                            "2x": N.c + "/hgc2018/hgc-logo/2x.png"
                        },
                        alt: Object(f.d)("Heroes of the Storm Global Championship", "HGC2018Introduction")
                    }))), s.createElement(m.Va, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(m.V, null, Object(f.d)("Unlock in-game loot and Twitch emotes when you Cheer with Bits to support your favorite team.", "HGC2018Introduction"))), s.createElement(m.Va, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(m.T, {
                        to: "https://link.twitch.tv/hgccheer2018",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(f.d)("Details", "HGC2018Introduction"))))
                }),
                J = (n("TTKc"), function() {
                    return s.createElement(m.Va, {
                        className: "owl-2018-introduction"
                    }, s.createElement(m.Va, {
                        padding: {
                            top: 2,
                            bottom: 1
                        }
                    }, s.createElement(m.V, {
                        fontSize: m.Aa.Size5,
                        bold: !0
                    }, Object(f.d)("Cheer with Bits and unlock loot!", "OWL2018Introduction"))), s.createElement(m.Va, {
                        className: "owl-2018-introduction__banner-background",
                        padding: {
                            top: 1
                        }
                    }, s.createElement("img", {
                        className: "owl-2018-introduction__banner-image",
                        src: N.c + "/owl-2017/overwatch-wide.png"
                    })), s.createElement(m.Va, {
                        padding: {
                            x: 2,
                            top: 1,
                            bottom: .5
                        }
                    }, s.createElement(m.V, null, Object(f.d)("Unlock an emote set by cheering 250 Bits or more! Cheer 500 Bits or more and you’ll unlock a second set and share emotes with Chat!", "OWL2018Introduction"))), s.createElement(m.Va, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement(m.T, {
                        to: "http://link.twitch.tv/owl-drops-onsite-bitscard-blogus",
                        targetBlank: !0,
                        hoverUnderlineNone: !1
                    }, Object(f.d)("Details", "OWL2018Introduction"))))
                });
            ! function(e) {
                e.CratesChristmas = "CratesChristmas", e.OWL2018 = "owl2018", e.HGC2018 = "hgc2018", e.WORLDCUP2018 = "worldcup2018", e.HGG2018 = "hearthstone2018", e.HGG2018TEST = "hearthstone2018-test"
            }(K || (K = {}));
            var ee = function(e) {
                    switch (e.event) {
                        case K.HGC2018:
                            return s.createElement(Z, null);
                        case K.OWL2018:
                            return s.createElement(J, null);
                        case K.HGG2018:
                        case K.HGG2018TEST:
                            return s.createElement($, null);
                        default:
                            return s.createElement(M, {
                                onClickHelp: e.onClickHelp
                            })
                    }
                },
                te = function(e) {
                    if (e.isSending) return e.totalBits < N.r ? s.createElement(z, null) : s.createElement(X, {
                        bitsConfig: e.bitsConfig,
                        channelDisplayName: e.displayName,
                        prefixes: e.currentCheers,
                        totalBits: e.totalBits
                    });
                    if (e.hoveredCheermote) return s.createElement(w, {
                        event: e.event,
                        tournament: e.tournament,
                        bitsConfig: e.bitsConfig,
                        prefix: e.hoveredCheermote,
                        tier: e.hoveredTier
                    });
                    var t = function(e) {
                            var t = null;
                            return e.orderedActions.forEach(function(e) {
                                e.campaign && (t = e.campaign)
                            }), t
                        }(e.bitsConfig),
                        n = function(e) {
                            var t = "";
                            return e.orderedActions.forEach(function(e) {
                                e.campaign && (t = e.prefix)
                            }), t
                        }(e.bitsConfig),
                        i = f.b.get(N.u, A.a.Off);
                    if (e.totalBits) return s.createElement(G, {
                        bitsConfig: e.bitsConfig,
                        prefixes: e.currentCheers,
                        amount: e.totalBits,
                        bonusBits: e.bonusBits,
                        channelDisplayName: e.displayName,
                        purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                        largestCheermote: e.largestCheermote,
                        smallestCheermote: e.smallestCheermote,
                        minPerEmote: e.emoteMinimumBits,
                        minToCheer: e.cheerMinimumBits,
                        event: e.event,
                        sponsoredCampaign: t,
                        sponsoredCampaignPrefix: n,
                        sponsoredBitsBonus: e.bonusBits,
                        bitsSendErrorCode: e.bitsSendErrorCode,
                        bitsSendHasError: e.bitsSendHasError
                    });
                    if (e.helpRequested) return s.createElement(R.a, null);
                    var r = f.b.get(N.d, A.a.Off);
                    if (e.chosenCheermote) {
                        var a = e.cheerMinimumBits;
                        return s.createElement(U, {
                            minToCheer: a
                        })
                    }
                    return e.event ? s.createElement(ee, {
                        event: e.event,
                        onClickHelp: e.showHelp,
                        channelID: e.channelID
                    }) : t && (i === A.a.On || i === A.a.StaffOnly && e.isStaff) ? s.createElement(Q, {
                        sponsorCampaign: t
                    }) : r === A.a.On ? s.createElement(D, {
                        onClickHelp: e.showHelp
                    }) : s.createElement(M, {
                        onClickHelp: e.showHelp
                    })
                };
            var ne = n("XDQu"),
                ie = n("8/mp"),
                re = (n("AcdH"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleCheermoteHover = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onHover(n)
                        }, t.handleCheermoteUnhover = function() {
                            t.props.onHoverLeave()
                        }, t.handleCheermoteClick = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onClick(n)
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.bitsConfig.orderedActions.filter(function(e) {
                                return e.type !== N.h && e.type !== N.f
                            }).map(function(e) {
                                var t = e.indexedTiers.get(N.m);
                                return t ? {
                                    imgSrc: t.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: t.indexedImages.DARK.static.get(2),
                                    key: e.prefix
                                } : null
                            }).map(function(t, n) {
                                return t && t.key ? s.createElement(m.Na, {
                                    key: t.key,
                                    margin: {
                                        bottom: 1
                                    }
                                }, s.createElement("li", {
                                    className: "cheermote-prefix-selector__cheermote"
                                }, s.createElement("button", {
                                    className: "cheermote-prefix-selector__item-button",
                                    "data-key": t.key,
                                    onMouseEnter: e.handleCheermoteHover,
                                    onMouseLeave: e.handleCheermoteUnhover,
                                    onClick: e.handleCheermoteClick,
                                    "data-a-target": "cheermote-" + t.key.replace(":", "")
                                }, s.createElement("img", {
                                    alt: t.key,
                                    src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                                })))) : s.createElement("li", {
                                    key: "null-cheermote-" + n
                                }, s.createElement("button", {
                                    className: "cheermote-prefix-selector__item-button",
                                    disabled: !0
                                }, s.createElement("div", {
                                    className: "cheermote-prefix-selector__placeholder"
                                })))
                            }),
                            n = s.createElement(m.Na, {
                                className: "cheermote-prefix-selector__cheermotes",
                                display: m.W.Flex,
                                flexWrap: m.Z.Wrap,
                                flexDirection: m.Y.Row,
                                justifyContent: m.Ua.Start,
                                alignItems: m.f.End,
                                padding: {
                                    bottom: 1
                                }
                            }, s.createElement("ul", null, t));
                        return s.createElement(m.Va, {
                            flexGrow: 1,
                            overflow: m.Ya.Hidden,
                            className: "cheermote-prefix-selector"
                        }, s.createElement(ie.b, null, n))
                    }, t
                }(s.PureComponent));
            var ae = Object(r.connect)(function(e) {
                    return {
                        darkModeEnabled: Object(ne.a)(e) === C.a.Dark
                    }
                })(re),
                oe = (n("ECxT"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleCheermoteHover = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onHover(n)
                        }, t.handleCheermoteUnhover = function() {
                            t.props.onHoverLeave()
                        }, t.handleCheermoteClick = function(e) {
                            var n = e.currentTarget.getAttribute("data-key");
                            n && t.props.onClick(n)
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        var e = this,
                            t = this.props.bitsConfig.indexedActions[this.props.chosenCheermote.toLowerCase()],
                            n = t.orderedTiers.filter(function(e) {
                                return e.canCheer && e.canShowInBitsCard
                            }).map(function(e) {
                                return {
                                    imgSrc: e.indexedImages.LIGHT.static.get(2),
                                    imgSrcDark: e.indexedImages.DARK.static.get(2),
                                    key: t.prefix + ":" + e.bits
                                }
                            }).reverse().map(function(t, n) {
                                return t && t.key ? s.createElement("li", {
                                    key: t.key,
                                    className: "cheermote-tier-selector__cheermote"
                                }, s.createElement("button", {
                                    className: "cheermote-tier-selector__item-button",
                                    "data-key": t.key,
                                    onMouseEnter: e.handleCheermoteHover,
                                    onMouseLeave: e.handleCheermoteUnhover,
                                    onClick: e.handleCheermoteClick,
                                    "data-a-target": "cheermote-" + t.key.replace(":", "")
                                }, s.createElement("img", {
                                    alt: t.key,
                                    src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                                })), s.createElement(L.a, {
                                    bitsConfig: e.props.bitsConfig,
                                    prefix: "",
                                    amount: +t.key.split(":")[1],
                                    showImage: !1,
                                    showAmount: !0,
                                    size: L.b.Small
                                })) : s.createElement("li", {
                                    key: "null-cheermote-" + n
                                }, s.createElement("button", {
                                    className: "cheermote-tier-selector__item-button",
                                    disabled: !0
                                }, s.createElement("div", {
                                    className: "cheermote-tier-selector__placeholder"
                                })))
                            }),
                            i = s.createElement(m.Va, {
                                padding: {
                                    right: 2
                                },
                                fullWidth: !0,
                                className: "cheermote-tier-selector__back-button"
                            }, s.createElement(m.z, {
                                "data-a-target": "bits-card-back-button",
                                type: m.F.Text,
                                fullWidth: !0,
                                onClick: this.props.onClose
                            }, Object(f.d)("Show All Cheermotes", "CheermoteCarousel"))),
                            r = s.createElement(m.Na, {
                                className: "cheermote-tier-selector__cheermotes",
                                display: m.W.Flex,
                                flexWrap: m.Z.Wrap,
                                flexDirection: m.Y.Row,
                                justifyContent: m.Ua.Between,
                                alignItems: m.f.End,
                                padding: {
                                    bottom: 1
                                }
                            }, s.createElement("ul", null, n, i));
                        return s.createElement(m.Va, {
                            flexGrow: 1,
                            overflow: m.Ya.Hidden,
                            className: "cheermote-tier-selector"
                        }, r)
                    }, t
                }(s.PureComponent));
            var se = Object(r.connect)(function(e) {
                    return {
                        darkModeEnabled: Object(ne.a)(e) === C.a.Dark
                    }
                })(oe),
                ce = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return this.props.helpRequested && !this.props.currentCheers.length ? null : this.props.chosenCheermote ? s.createElement(se, {
                            bitsConfig: this.props.bitsConfig,
                            chosenCheermote: this.props.chosenCheermote,
                            onHover: this.props.handleTierHover,
                            onHoverLeave: this.props.handleUnhover,
                            onClick: this.props.handleTierClick,
                            onClose: this.props.clearChosenCheermote
                        }) : s.createElement(ae, {
                            bitsConfig: this.props.bitsConfig,
                            onHover: this.props.handleCheermoteHover,
                            onHoverLeave: this.props.handleUnhover,
                            onClick: this.props.handleCheermoteClick
                        })
                    }, t
                }(s.PureComponent),
                le = n("ebRM"),
                de = n("RiD7"),
                ue = n("UajW"),
                me = (n("c+1r"), function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            totalBits: 0,
                            bonusBits: 0,
                            largestCheermote: 0,
                            smallestCheermote: 0
                        }, t.unhoverTimeout = 0, t.handleTierHover = function(e) {
                            clearTimeout(t.unhoverTimeout);
                            var n = e.split(":");
                            n.length < 2 || (t.setState({
                                hoveredTier: +n[1],
                                hoveredCheermote: n[0]
                            }), t.props.trackBitsCardInteraction(de.a.PreviewEmote, {
                                emoteType: n[0],
                                emoteLevel: +n[1]
                            }))
                        }, t.handleUnhover = function() {
                            t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                        }, t.clearHovered = function() {
                            t.setState({
                                hoveredTier: 0,
                                hoveredCheermote: null
                            })
                        }, t.handleTierClick = function(e) {
                            t.props.onClickCheermote(e.split(":").join(""))
                        }, t.handleCheermoteHover = function(e) {
                            clearTimeout(t.unhoverTimeout), t.setState({
                                hoveredCheermote: e,
                                hoveredTier: 0
                            }), t.props.trackBitsCardInteraction(de.a.PreviewEmote, {
                                emoteType: e,
                                emoteLevel: 100
                            })
                        }, t.handleCheermoteClick = function(e) {
                            t.setState({
                                chosenCheermote: e,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            })
                        }, t.clearChosenCheermote = function() {
                            t.setState({
                                chosenCheermote: null,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            })
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props.visible || !!this.props.currentCheers.length,
                            n = e.visible || !!e.currentCheers.length;
                        if (t && !n && this.setState({
                                chosenCheermote: null,
                                hoveredCheermote: null,
                                hoveredTier: 0
                            }), this.props.currentCheers !== e.currentCheers) {
                            var i = Object(le.a)(e.currentCheers),
                                r = i.total,
                                a = i.bonus,
                                o = i.largestCheermote,
                                s = i.smallestCheermote;
                            this.setState({
                                totalBits: r,
                                bonusBits: a,
                                largestCheermote: o,
                                smallestCheermote: s
                            })
                        }
                    }, t.prototype.componentDidMount = function() {
                        var e = Object(le.a)(this.props.currentCheers),
                            t = e.total,
                            n = e.bonus,
                            i = e.largestCheermote,
                            r = e.smallestCheermote;
                        this.setState({
                            totalBits: t,
                            bonusBits: n,
                            largestCheermote: i,
                            smallestCheermote: r
                        })
                    }, t.prototype.render = function() {
                        var e = this.props,
                            t = e.cheerMessageAutoModded,
                            n = e.visible,
                            i = e.currentCheers,
                            r = e.data,
                            a = e.bitsConfig,
                            o = e.isSending,
                            c = e.helpRequested,
                            l = e.channelID,
                            d = e.showHelp,
                            u = e.isStaff,
                            p = e.bitsSendErrorCode,
                            h = e.bitsSendHasError,
                            v = e.handleClickBuy,
                            E = e.onCancelSend,
                            k = e.onConfirmSend;
                        if (t || !n && !i.length) return null;
                        if (!r || r.loading) return s.createElement(b.a, null);
                        if (r.error || !a) return s.createElement(g, null);
                        var C, S = this.props.helpRequested && !this.props.currentCheers.length,
                            y = null;
                        return r.user.cheer.settings.event && (y = r.user.cheer.settings.event.toLowerCase().replace("_", "-")), S && (C = s.createElement(m.Va, {
                            position: m.db.Absolute,
                            padding: {
                                left: .5,
                                top: .5
                            },
                            attachLeft: !0,
                            attachTop: !0
                        }, s.createElement(m.z, {
                            onClick: this.props.closeHelp,
                            "data-a-target": "bits-card-back-button",
                            icon: m.nb.ChatSettingsBack,
                            type: m.F.Text,
                            size: m.D.Small
                        }, Object(f.d)("Back", "BitsCard")))), s.createElement(s.Fragment, null, !o && C, s.createElement(m.xb, {
                            className: "t-bits-card__contents",
                            display: m.W.Flex,
                            flexGrow: 0,
                            flexDirection: m.Y.Column,
                            alignContent: m.e.Stretch,
                            textAlign: m.Jb.Center,
                            borderBottom: !o,
                            fullWidth: !0
                        }, s.createElement(te, {
                            bitsBalance: r.currentUser && r.currentUser.bitsBalance,
                            bitsConfig: a,
                            cheerMinimumBits: r.user.cheer.settings.cheerMinimumBits,
                            chosenCheermote: this.state.chosenCheermote,
                            currentCheers: i,
                            displayName: r.user.displayName,
                            emoteMinimumBits: r.user.cheer.settings.emoteMinimumBits,
                            event: y,
                            helpRequested: c,
                            hoveredCheermote: this.state.hoveredCheermote,
                            hoveredTier: this.state.hoveredTier,
                            isSending: o,
                            largestCheermote: this.state.largestCheermote,
                            smallestCheermote: this.state.smallestCheermote,
                            totalBits: this.state.totalBits,
                            bonusBits: this.state.bonusBits,
                            tournament: r.user.tournament,
                            channelID: l,
                            showHelp: d,
                            isStaff: u,
                            bitsSendErrorCode: p,
                            bitsSendHasError: h
                        })), !o && s.createElement(ce, {
                            bitsConfig: a,
                            chosenCheermote: this.state.chosenCheermote,
                            currentCheers: i,
                            eventString: y,
                            helpRequested: c,
                            handleCheermoteClick: this.handleCheermoteClick,
                            handleCheermoteHover: this.handleCheermoteHover,
                            handleTierClick: this.handleTierClick,
                            handleTierHover: this.handleTierHover,
                            handleUnhover: this.handleUnhover,
                            clearChosenCheermote: this.clearChosenCheermote
                        }), s.createElement(m.Va, {
                            className: "t-bits-card__footer",
                            fullWidth: !0,
                            display: m.W.Flex
                        }, s.createElement(T, {
                            bitsBalance: r.currentUser && r.currentUser.bitsBalance,
                            bitsConfig: a,
                            event: y,
                            isSending: o,
                            totalBits: this.state.totalBits,
                            userSelfBitsBadge: r.user.self && r.user.self.bitsBadge,
                            handleClickBuy: v,
                            onCancelSend: E,
                            onConfirmSend: k
                        })))
                    }, t
                }(s.Component)),
                pe = Object(c.compose)(Object(v.a)(function(e) {
                    return {
                        query: ue,
                        variables: {
                            name: e.channelID
                        },
                        topic: Object(k.d)(e.channelID),
                        type: E.PubsubMessageType.BitsChannelSettingsEvent,
                        mutator: function(e, t) {
                            if (t) return void 0 !== e.updates.minimum_bits && (t.user.cheer.settings.cheerMinimumBits = e.updates.minimum_bits), void 0 !== e.updates.minimum_bits_emote && (t.user.cheer.settings.emoteMinimumBits = e.updates.minimum_bits_emote), t
                        }
                    }
                }), Object(l.a)(ue, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function(e) {
                        return {
                            variables: {
                                name: e.channelID,
                                withCheerBombEventEnabled: !1
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }))(me),
                he = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return o.__extends(t, e), t.prototype.render = function() {
                        return s.createElement(m.Va, {
                            padding: 1,
                            textAlign: m.Jb.Center
                        }, s.createElement(m.V, {
                            color: m.O.Error,
                            italic: !0
                        }, Object(f.d)("You cannot Cheer in your own channel.", "BitsCard")))
                    }, t
                }(s.PureComponent),
                fe = n("opIq"),
                ge = n("Gcqi"),
                be = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            helpRequested: !1,
                            buyingBits: !1
                        }, t.lastRefetchTime = 0, t.showHelp = function(e) {
                            e.preventDefault(), t.setState({
                                helpRequested: !0
                            })
                        }, t.closeHelp = function() {
                            return t.setState({
                                helpRequested: !1
                            })
                        }, t.handleClickBuy = function() {
                            t.setState({
                                buyingBits: !0
                            }), t.props.trackBitsCardInteraction(de.a.BuyMain)
                        }, t.handleCloseBuy = function() {
                            return t.setState({
                                buyingBits: !1
                            })
                        }, t
                    }
                    return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        var t = this.props.visible || !!this.props.currentCheers.length,
                            n = e.visible || !!e.currentCheers.length;
                        if (!t && n) {
                            var i = Date.now();
                            i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                        }
                        t && !n && this.setState({
                            buyingBits: !1
                        })
                    }, t.prototype.render = function() {
                        return this.props.cheerMessageAutoModded || !this.props.visible && !this.props.currentCheers.length ? null : !this.props.data || this.props.data.loading ? s.createElement(h, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(b.a, null)) : this.props.data.error || !this.props.bitsConfig ? s.createElement(h, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(g, null)) : this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin ? s.createElement(h, {
                            onUserClose: this.props.onUserClose
                        }, s.createElement(he, null)) : this.state.buyingBits ? s.createElement(h, {
                            onUserClose: this.handleCloseBuy,
                            closeDataATarget: "bits-buy-card-close-button"
                        }, s.createElement(fe.a, {
                            bitsConfig: this.props.bitsConfig,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.onUserClose,
                            onClose: this.handleCloseBuy,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                            location: de.b.ChatTooltip
                        })) : s.createElement(h, {
                            onUserClose: this.props.currentCheers.length ? void 0 : this.props.onUserClose
                        }, s.createElement(pe, {
                            bitsConfig: this.props.bitsConfig,
                            channelID: this.props.channelID,
                            channelLogin: this.props.channelLogin,
                            cheerMessageAutoModded: this.props.cheerMessageAutoModded,
                            visible: this.props.visible,
                            currentCheers: this.props.currentCheers,
                            isSending: this.props.isSending,
                            isStaff: this.props.isStaff,
                            onClickCheermote: this.props.onClickCheermote,
                            onCancelSend: this.props.onCancelSend,
                            onConfirmSend: this.props.onConfirmSend,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                            bitsSendErrorCode: this.props.bitsSendErrorCode,
                            bitsSendHasError: this.props.bitsSendHasError,
                            helpRequested: this.state.helpRequested,
                            showHelp: this.showHelp,
                            closeHelp: this.closeHelp,
                            handleClickBuy: this.handleClickBuy
                        }))
                    }, t
                }(s.Component),
                ve = Object(c.compose)(Object(l.a)(ge, {
                    name: "data",
                    skip: function(e) {
                        return !e.channelID
                    },
                    options: function() {
                        return {
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }))(be);
            var Ee = Object(r.connect)(function(e) {
                return {
                    user: Object(a.e)(e)
                }
            })(ve);
            n.d(t, "a", function() {
                return Ee
            })
        },
        sAMt: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChatUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 62
                }
            };
            n.loc.source = {
                body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sMoq: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "VIPUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "GrantVIPInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "grantVIP"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "channel"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "grantee"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "error"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "code"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 122
                }
            };
            n.loc.source = {
                body: "mutation VIPUser($input: GrantVIPInput!){\ngrantVIP(input: $input) {\nchannel {\nid\n}\ngrantee {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sU0Q: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "VideoChatCard_Video"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "videoID"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "ID"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "video"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "videoID"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "title"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "previewThumbnailURL"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "width"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "90"
                                        }
                                    }, {
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "height"
                                        },
                                        value: {
                                            kind: "IntValue",
                                            value: "51"
                                        }
                                    }],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "publishedAt"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "owner"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "login"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "displayName"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 162
                }
            };
            n.loc.source = {
                body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        sblI: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("0Log"),
                r = n("ZtEv"),
                a = n("aF6k");
            i.ModerationActions.Ban, i.ModerationActions.Timeout, i.ModerationActions.Unban, i.ModerationActions.Untimeout;

            function o(e, t, n, i) {
                return {
                    type: r.b.Moderation,
                    moderationType: e,
                    id: Object(a.a)(t + "-mod"),
                    userLogin: t,
                    reason: n,
                    duration: i
                }
            }
        },
        tFCv: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("9C/b"),
                s = n("fvjX"),
                c = n("ZS2+"),
                l = n("/0dD"),
                d = n("SDEh"),
                u = n("edgk"),
                m = n("1/iK"),
                p = n("y5D0"),
                h = n("jZLd"),
                f = n("kRBY"),
                g = n("XDQu"),
                b = n("+pBb"),
                v = n("tY8L"),
                E = n("r2Xj"),
                k = n("WytW"),
                C = n("F6GT"),
                S = n("x0gr"),
                y = c.a.wrap(function() {
                    return n.e(185).then(n.bind(null, "8MX0"))
                }, "ChatSettingsComponent"),
                N = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            editAppearance: !1,
                            shouldMountChild: !1
                        }, t.handleSettingsToggle = function(e) {
                            t.setState({
                                shouldMountChild: !0
                            }), t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                                editAppearance: !1
                            })
                        }, t.onEdit = function() {
                            t.setState({
                                editAppearance: !0
                            })
                        }, t.onLeaveEdit = function() {
                            t.setState({
                                editAppearance: !1
                            })
                        }, t.onDarkModeToggle = function() {
                            var e = t.props.darkModeEnabled ? l.a.Light : l.a.Dark;
                            t.props.onThemeChanged(e, !t.props.isPopout), Object(S.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.darkModeEnabled,
                                settingName: E.a.DarkMode
                            })
                        }, t.onTimestampToggle = function() {
                            Object(C.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(S.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.showTimestamps,
                                settingName: E.a.ShowTimestamps
                            })
                        }, t.onHighContrastColorsToggle = function() {
                            Object(C.b)("useHighContrastColors", !t.props.useHighContrastColors), t.props.useHighContrastColors ? t.props.onUseHighContrastColorsDisable() : t.props.onUseHighContrastColorsEnable(), Object(S.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !t.props.useHighContrastColors,
                                settingName: E.a.UseHighContrastColors
                            })
                        }, t.onChatHide = function() {
                            t.props.onChatHide(), Object(S.a)({
                                channelLogin: t.props.channelLogin,
                                isHostMode: t.props.isHostMode,
                                newValue: !0,
                                settingName: E.a.HideChat
                            })
                        }, t.onChatPopout = function() {
                            t.props.isPopout || t.props.onChatHide();
                            var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                            e && !Object(d.a)() && (e.focus(), Object(u.a)(e, function() {
                                t.props.onChatUnhide()
                            }))
                        }, t.onColorSelected = function(e) {
                            t.props.isLoggedIn ? t.props.onChatCommand(Object(k.a)(e)) : t.props.login()
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(r.Fragment, null, r.createElement(y.Preload, null), r.createElement(R, {
                            onToggle: this.handleSettingsToggle
                        }, this.state.shouldMountChild && r.createElement(y, {
                            authToken: this.props.authToken,
                            darkModeEnabled: this.props.darkModeEnabled,
                            editAppearance: this.state.editAppearance,
                            isCurrentUserModerator: this.props.isCurrentUserModerator,
                            isHostMode: this.props.isHostMode,
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            onChatCommand: this.props.onChatCommand,
                            onChatHide: this.onChatHide,
                            onChatPopout: this.onChatPopout,
                            onShowChatRules: this.props.onShowChatRules,
                            onDarkModeToggle: this.onDarkModeToggle,
                            onTimestampToggle: this.onTimestampToggle,
                            onHighContrastColorsToggle: this.onHighContrastColorsToggle,
                            showTimestamps: this.props.showTimestamps,
                            useHighContrastColors: this.props.useHighContrastColors,
                            theatreModeEnabled: this.props.theatreModeEnabled,
                            onColorSelected: this.onColorSelected,
                            channelLogin: this.props.channelLogin,
                            channelID: this.props.channelID,
                            isLoggedIn: this.props.isLoggedIn,
                            onClickEditAppearance: this.onEdit,
                            onLeaveEditAppearance: this.onLeaveEdit,
                            sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                            onShowViewerCard: this.props.onShowViewerCard,
                            containerElement: this.props.containerElement,
                            "data-test-selector": "chat-settings-component"
                        })))
                    }, t
                }(r.Component);
            var _ = Object(a.connect)(function(e) {
                    return {
                        isLoggedIn: Object(f.f)(e),
                        darkModeEnabled: Object(g.a)(e) === l.a.Dark,
                        showTimestamps: e.chat.showTimestamps,
                        useHighContrastColors: e.chat.useHighContrastColors,
                        theatreModeEnabled: e.ui.theatreModeEnabled
                    }
                }, function(e) {
                    return Object(s.bindActionCreators)({
                        login: function() {
                            return Object(p.e)(m.a.Chat)
                        },
                        onChatHide: function() {
                            return b.L()
                        },
                        onChatUnhide: function() {
                            return b.O()
                        },
                        onThemeChanged: function(e) {
                            return Object(h.b)(e, void 0, !1)
                        },
                        onTimestampsDisable: function() {
                            return b.E()
                        },
                        onTimestampsEnable: function() {
                            return b.J()
                        },
                        onUseHighContrastColorsDisable: function() {
                            return b.F()
                        },
                        onUseHighContrastColorsEnable: function() {
                            return b.K()
                        },
                        onShowViewerCard: v.e
                    }, e)
                })(N),
                O = Object(o.a)(_),
                I = n("/7QA"),
                T = n("eJ65"),
                A = n("Ue10"),
                D = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.setToggleBalloonRef = function(e) {
                            return t.toggleBalloonRef = e
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentDidUpdate = function(e) {
                        this.props.onToggle && this.props.isChatRulesOpen && !e.isChatRulesOpen && this.toggleBalloonRef.toggleBalloon(!1)
                    }, t.prototype.render = function() {
                        return r.createElement(T.a, {
                            onToggle: this.props.onToggle,
                            ref: this.setToggleBalloonRef
                        }, r.createElement(A.A, {
                            icon: A.nb.Gear,
                            ariaLabel: Object(I.d)("Chat settings", "ChatInput"),
                            "data-a-target": "chat-settings",
                            disabled: !!this.props.disabled
                        }), r.createElement(A.u, {
                            direction: A.v.Top,
                            noTail: !0,
                            offsetY: "11px",
                            "data-a-target": "chat-settings-balloon"
                        }, this.props.children))
                    }, t
                }(r.Component);
            var R = Object(a.connect)(function(e) {
                return {
                    isChatRulesOpen: e.chat.isChatRulesOpen
                }
            })(D);
            n.d(t, "a", function() {
                return O
            }), n.d(t, "b", function() {
                return R
            })
        },
        tIid: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "b", function() {
                return s
            });
            var i = n("/7QA"),
                r = "esport_insider_pass_whitelist",
                a = "esports_room_cheering_whitelist";

            function o(e, t, n) {
                return void 0 === n && (n = !1), c(r, e, t, n)
            }

            function s(e, t) {
                return c(a, e, t)
            }

            function c(e, t, n, r) {
                void 0 === r && (r = !1);
                var a = i.b.get(e, []),
                    o = n && n.roles && n.roles.isStaff || r;
                return a.includes(t) || a.includes(t + "-staff") && o
            }
        },
        tY8L: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "c", function() {
                return o
            }), n.d(t, "e", function() {
                return s
            }), n.d(t, "d", function() {
                return c
            });
            var i = n("oK83"),
                r = "viewer-card.VIEWER_CARD_HIDDEN",
                a = "viewer-card.VIEWER_CARD_SHOWN";

            function o() {
                return {
                    type: r
                }
            }

            function s(e, t, n, r) {
                return void 0 === r && (r = 0), {
                    type: a,
                    viewerCardOptions: {
                        viewerCardType: i.b.Viewer,
                        initialTopOffset: r,
                        sourceID: n,
                        sourceType: t,
                        targetID: e
                    }
                }
            }

            function c(e, t, n, r) {
                return void 0 === r && (r = 0), {
                    type: a,
                    viewerCardOptions: {
                        viewerCardType: i.b.Extension,
                        initialTopOffset: r,
                        sourceID: n,
                        targetID: e,
                        extensionVersion: t
                    }
                }
            }
        },
        u0cu: function(e, t, n) {},
        uIkQ: function(e, t, n) {
            "use strict";
            var i = n("b5C3"),
                r = n("fQWD"),
                a = n("ZEQw"),
                o = (n("yzyL"), n("mrSG")),
                s = function() {
                    function e(e, t, n) {
                        this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                    }
                    return e.prototype.getBadge = function(e, t) {
                        var n = this.channelsBySet.get(e);
                        return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) && n.get(t) || null
                    }, e.prototype.indexBadges = function(e, t, n) {
                        e.forEach(function(e) {
                            n && e.clickAction === a.c && (e = o.__assign({}, e, {
                                channelName: n
                            }));
                            var i = t.get(e.setID);
                            i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                        })
                    }, e
                }();
            new s([], [], "");
            n.d(t, "b", function() {
                return i.a
            }), n.d(t, "a", function() {
                return r.a
            }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
                return s
            })
        },
        uYEN: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red", e[e.Yellow = 1e5] = "Yellow"
                }(i || (i = {}))
        },
        uYvD: function(e, t, n) {},
        uu1w: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
                }(i || (i = {}))
        },
        uy8m: function(e, t, n) {
            "use strict";
            var i;
            n.d(t, "a", function() {
                    return i
                }),
                function(e) {
                    e[e.Left = 0] = "Left", e[e.Middle = 1] = "Middle", e[e.Right = 2] = "Right", e[e.Back = 3] = "Back", e[e.Forward = 4] = "Forward"
                }(i || (i = {}))
        },
        vGFN: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            }), n.d(t, "j", function() {
                return b
            }), n.d(t, "h", function() {
                return v
            }), n.d(t, "g", function() {
                return E
            }), n.d(t, "l", function() {
                return k
            }), n.d(t, "o", function() {
                return C
            }), n.d(t, "n", function() {
                return S
            }), n.d(t, "k", function() {
                return y
            }), n.d(t, "m", function() {
                return N
            }), n.d(t, "i", function() {
                return _
            }), n.d(t, "e", function() {
                return O
            }), n.d(t, "d", function() {
                return I
            }), n.d(t, "b", function() {
                return T
            }), n.d(t, "f", function() {
                return A
            }), n.d(t, "c", function() {
                return D
            }), n.d(t, "q", function() {
                return M
            }), n.d(t, "p", function() {
                return L
            });
            var i, r, a, o, s, c, l = n("mrSG"),
                d = n("/7QA"),
                u = n("2xye"),
                m = n("mBWp");

            function p(e) {
                d.o.tracking.track(u.SpadeEventType.WhisperThreadMod, {
                    conversation_id: e.threadID,
                    action: e.action
                })
            }

            function h(e) {
                return l.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return l.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, R()];
                            case 1:
                                return t = n.sent(), d.o.tracking.track(u.SpadeEventType.WhisperIgnoreUser, {
                                    ui_context: e.context,
                                    from_login: t && t.login,
                                    ignored_login: e.targetUserLogin,
                                    reason: e.reason || i.Other,
                                    source: e.source
                                }), [2]
                        }
                    })
                })
            }

            function f(e, t) {
                return l.__awaiter(this, void 0, void 0, function() {
                    var n;
                    return l.__generator(this, function(i) {
                        switch (i.label) {
                            case 0:
                                return [4, R()];
                            case 1:
                                return n = i.sent(), d.o.tracking.track(u.SpadeEventType.WhisperThreadMod, {
                                    conversation_id: e,
                                    action: t,
                                    login: n && n.login
                                }), [2]
                        }
                    })
                })
            }

            function g(e) {
                d.o.tracking.track(u.SpadeEventType.WhisperAllThreadsMod, {
                    action: e
                })
            }

            function b() {
                g(r.MarkAllRead)
            }

            function v() {
                g(r.EnableDoNotDisturb)
            }

            function E() {
                g(r.DisableDoNotDisturb)
            }

            function k(e, t) {
                h({
                    context: t,
                    targetUserLogin: e,
                    reason: i.Spam,
                    source: "conversations_button"
                })
            }

            function C(e) {
                f(e, s.MarkNotSpam)
            }

            function S(e) {
                f(e, s.Archive)
            }

            function y(e) {
                p({
                    threadID: e,
                    action: a.Mute
                })
            }

            function N(e) {
                p({
                    threadID: e,
                    action: a.Unmute
                })
            }

            function _(e) {
                p({
                    threadID: e,
                    action: a.Expand
                })
            }

            function O(e) {
                p({
                    threadID: e,
                    action: a.Collapse
                })
            }

            function I(e) {
                p({
                    threadID: e,
                    action: a.Close
                })
            }

            function T(e) {
                p({
                    threadID: e,
                    action: a.Archive
                })
            }

            function A(e) {
                d.o.tracking.track(u.SpadeEventType.WhisperThreadCreate, {
                    conversation_id: e.threadID,
                    target_login: e.targetUserlogin,
                    source: "search_target_result",
                    search_result_rank: e.searchResultRank
                })
            }

            function D(e) {
                d.o.tracking.track(u.SpadeEventType.WhisperSearchClick, {
                    query: e.searchQuery,
                    source: "conversation_list",
                    rank: e.searchResultRank,
                    is_conversation: e.isConversation
                })
            }

            function R() {
                var e = this;
                return new Promise(function(t) {
                    setTimeout(function() {
                        return l.__awaiter(e, void 0, void 0, function() {
                            var e, n, i;
                            return l.__generator(this, function(r) {
                                switch (r.label) {
                                    case 0:
                                        e = null, r.label = 1;
                                    case 1:
                                        return r.trys.push([1, 3, , 4]), [4, d.o.apollo.client.query({
                                            query: m
                                        })];
                                    case 2:
                                        return e = r.sent(), [3, 4];
                                    case 3:
                                        return n = r.sent(), d.j.error(n, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                                    case 4:
                                        return i = e && e.data && e.data.currentUser, t(i), [2]
                                }
                            })
                        })
                    })
                })
            }

            function M(e) {
                return l.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return l.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, R()];
                            case 1:
                                return t = n.sent(), d.o.tracking.track(u.SpadeEventType.WhisperSent, {
                                    to: e.targetUserLogin,
                                    from: t && t.login,
                                    player: "web",
                                    is_turbo: t && t.hasTurbo,
                                    conversation_id: e.threadID,
                                    availability: t && t.availability,
                                    room_type: e.inChannelChat ? c.Channel : c.Conversation
                                }), [2]
                        }
                    })
                })
            }

            function L(e) {
                return l.__awaiter(this, void 0, void 0, function() {
                    var t;
                    return l.__generator(this, function(n) {
                        switch (n.label) {
                            case 0:
                                return [4, R()];
                            case 1:
                                return t = n.sent(), d.o.tracking.track(u.SpadeEventType.WhisperReceived, {
                                    to: t && t.login,
                                    from: e.targetUserLogin,
                                    player: "web",
                                    is_turbo: t && t.hasTurbo,
                                    conversation_id: e.threadID
                                }), [2]
                        }
                    })
                })
            }! function(e) {
                e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
            }(i || (i = {})),
            function(e) {
                e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
            }(r || (r = {})),
            function(e) {
                e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
            }(a || (a = {})),
            function(e) {
                e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
            }(o || (o = {})),
            function(e) {
                e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
            }(s || (s = {})),
            function(e) {
                e.Channel = "channel", e.Conversation = "conversation"
            }(c || (c = {}))
        },
        vHGB: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("ZEQw"),
                o = n("Ue10"),
                s = (n("E78O"), n("/7QA")),
                c = n("2xye"),
                l = function(e) {
                    e.badge_type = e.badge_type.toLowerCase().replace(/( |\s)/g, "_"), s.o.tracking.track(c.SpadeEventType.ChatBadgeClick, e)
                };
            n.d(t, "a", function() {
                return d
            });
            var d = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isHovering: !1
                    }, t.onMouseOver = function() {
                        t.setState({
                            isHovering: !0
                        })
                    }, t.onMouseOut = function() {
                        t.setState({
                            isHovering: !1
                        })
                    }, t.onBadgeClickHandler = function() {
                        l({
                            badge_type: t.props.badge.title,
                            badge_url_target: t.targetURL
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.badge,
                        t = e.title,
                        n = e.image1x,
                        i = e.image2x,
                        a = e.image4x,
                        c = r.createElement("img", {
                            alt: t,
                            "aria-label": Object(s.d)("{badgeTitle} badge", {
                                badgeTitle: t
                            }, "Badge"),
                            className: "chat-badge",
                            src: n,
                            srcSet: n + " 1x, " + i + " 2x, " + a + " 4x",
                            onMouseOver: this.onMouseOver,
                            onMouseOut: this.onMouseOut
                        });
                    return this.targetURL = this.getTargetURL(), "" !== this.targetURL && (c = r.createElement("a", {
                        href: this.targetURL,
                        onClick: this.onBadgeClickHandler,
                        target: "_blank",
                        "data-a-target": "chat-badge"
                    }, c)), this.state.isHovering ? r.createElement(o.Qb, {
                        align: o.Rb.Left,
                        "data-a-target": "chat-badge",
                        display: o.W.Inline,
                        key: n,
                        label: t,
                        offsetY: "0.9rem"
                    }, c) : c
                }, t.prototype.getTargetURL = function() {
                    var e = this.props.badge;
                    switch (e.clickAction) {
                        case a.e:
                            return e.clickURL;
                        case a.c:
                            return e.channelName ? this.getSubscriberLink() : "";
                        case a.d:
                            return "https://www.twitch.tv/products/turbo?ref=chat_badge";
                        default:
                            return ""
                    }
                }, t.prototype.getSubscriberLink = function() {
                    return "https://www.twitch.tv/" + this.props.badge.channelName + "/subscribe?ref=in_chat_subscriber_link"
                }, t
            }(r.Component)
        },
        vKai: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("fvjX"),
                s = n("/7QA"),
                c = n("gcd7"),
                l = n("WytW"),
                d = n("NNSq"),
                u = n("CzFK"),
                m = n("TOso"),
                p = n("NMMG"),
                h = n("l1Uh"),
                f = n("PrJw"),
                g = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.handleWhisperCommand = function(e) {
                            var n = Object(l.p)(e),
                                i = n.recipientLogin,
                                r = n.body;
                            return i && r ? t.props.isEmbedded || t.props.isPopout ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                                })
                            } : i.toLowerCase() === t.props.userLogin ? {
                                deferred: Promise.resolve({
                                    notice: Object(s.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                                })
                            } : t.props.userID ? t.initiateWhisper(i, r) : void 0 : {
                                preserveInput: !0,
                                deferred: Promise.resolve({
                                    notice: Object(s.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                                })
                            }
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        return r.createElement(c.a, {
                            command: "w",
                            handler: this.handleWhisperCommand
                        })
                    }, t.prototype.initiateWhisper = function(e, t) {
                        var n = this;
                        return {
                            deferred: new Promise(function(r, a) {
                                return i.__awaiter(n, void 0, void 0, function() {
                                    var n, o, c, l;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                return i.trys.push([0, 2, , 3]), [4, Object(d.a)(e)];
                                            case 1:
                                                return n = i.sent(), [3, 3];
                                            case 2:
                                                return o = i.sent(), s.j.warn(o, "Failed to fetch user targeted by whisper command.", {
                                                    recipientLogin: e
                                                }), [2, a(o)];
                                            case 3:
                                                return n ? [3, 4] : [2, r({
                                                    notice: Object(s.d)("No user matching that login.", "WhisperCommandHandler")
                                                })];
                                            case 4:
                                                c = Object(p.a)(this.props.userID, n), i.label = 5;
                                            case 5:
                                                return i.trys.push([5, 7, , 8]), Object(f.m)({
                                                    threadID: c,
                                                    targetUserLogin: e,
                                                    inChannelChat: !0
                                                }), [4, Object(m.b)({
                                                    currentUserID: this.props.userID,
                                                    emotes: this.props.emoteMap || {},
                                                    message: t,
                                                    recipientUserID: n
                                                })];
                                            case 6:
                                                return i.sent(), [3, 8];
                                            case 7:
                                                return l = i.sent(), s.j.error(l, "Failed to send whisper using whisper command.", {
                                                    currentUserID: this.props.userID,
                                                    recipientUserID: n
                                                }), [2, r({
                                                    notice: Object(s.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                                })];
                                            case 8:
                                                return this.props.openThread(c), [2, r({})]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }(r.Component);
            var b = Object(a.connect)(null, function(e) {
                return Object(o.bindActionCreators)({
                    openThread: function(e) {
                        return Object(u.l)({
                            threadID: e,
                            collapsed: !0
                        }, Object(h.a)())
                    }
                }, e)
            })(g);
            n.d(t, "a", function() {
                return b
            })
        },
        vSeP: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            });
            var i = n("XIZb"),
                r = Object(i.a)("ActiveChatters"),
                a = r.withChatServiceProvider,
                o = (0, r.withContext)(function(e) {
                    return {
                        activeChattersAPI: e.serviceAPI,
                        setActiveChattersAPI: e.setServiceAPI
                    }
                })
        },
        wUQP: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return s
            }), n.d(t, "c", function() {
                return l
            });
            var i, r, a = n("/7QA"),
                o = n("kRBY");

            function s(e) {
                var t = a.o.store.getState(),
                    n = a.b.get(e, i.Off);
                return !!(n === i.On || n === i.StaffOnly && Object(o.g)(t))
            }! function(e) {
                e.On = "on", e.Off = "off", e.StaffOnly = "staff"
            }(i || (i = {})),
            function(e) {
                e[e.Enabled = 1] = "Enabled", e[e.Disabled = 0] = "Disabled"
            }(r || (r = {}));
            var c = Math.pow(2, 32);

            function l(e) {
                var t = a.b.get(e, [0, r.Disabled]),
                    n = t[0],
                    i = t[1],
                    s = a.o.session.deviceID,
                    l = a.o.store.getState();
                return !(i !== r.Enabled || !Object(o.g)(l)) || function(e, t) {
                    for (var n = void 0 === t ? 2166136261 : t, i = 0, r = e.length; i < r; i++) n ^= e.charCodeAt(i), n += (n << 1) + (n << 4) + (n << 7) + (n << 8) + (n << 24);
                    return n >>> 0
                }(s + "-" + e) / c < n
            }
        },
        wtKP: function(e, t, n) {},
        x0gr: function(e, t, n) {
            "use strict";
            n.d(t, "b", function() {
                return c
            }), n.d(t, "a", function() {
                return l
            }), n.d(t, "c", function() {
                return d
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("r2Xj"),
                s = n("oi4T"),
                c = function(e) {
                    r.n.track(a.SpadeEventType.ChatSettingsOpened, Object(s.a)(e))
                },
                l = function(e) {
                    var t = i.__assign({}, Object(s.a)(e), {
                        setting_name: e.settingName,
                        new_value: e.newValue.toString()
                    });
                    r.n.track(a.SpadeEventType.ChatSettingsChanged, t)
                },
                d = function(e) {
                    var t = i.__assign({}, Object(s.a)(e), {
                        setting_name: o.a.FollowerDuration,
                        new_value: e.newValue.toString(),
                        follower_mode_on: e.followerModeOn
                    });
                    r.n.track(a.SpadeEventType.ChatSettingsChanged, t)
                }
        },
        x1M1: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/MKj"),
                o = n("/0dD"),
                s = n("XDQu"),
                c = function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this
                    }
                    return i.__extends(t, e), t.prototype.render = function() {
                        var e = this.props,
                            t = (e.defaultRes, e.sources),
                            n = (e.darkModeEnabled, i.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                            a = this.props.darkModeEnabled ? t.dark : t.light,
                            o = Object.keys(a);
                        delete n.dispatch;
                        var s = i.__assign({}, n, {
                            src: a[this.props.defaultRes || o[0]],
                            srcSet: o.map(function(e) {
                                return a[e] + " " + e
                            }).join(",")
                        });
                        return r.createElement("img", i.__assign({}, s, {
                            onLoad: this.props.onLoad
                        }))
                    }, t
                }(r.Component);
            var l = Object(a.connect)(function(e) {
                return {
                    darkModeEnabled: Object(s.a)(e) === o.a.Dark
                }
            })(c);
            n.d(t, "a", function() {
                return l
            })
        },
        x7UT: function(e, t, n) {
            "use strict";
            var i = n("mrSG"),
                r = n("q1tI"),
                a = n("/7QA");

            function o(e) {
                return function(t) {
                    return function(n) {
                        function o(t) {
                            var i = n.call(this, t) || this;
                            i.unsubscribers = {};
                            var r = {};
                            return e.map(function(e) {
                                e.skip && e.skip(t) || (r[i.getTopic(e.topic, t)] = {
                                    isSubscribing: !0
                                })
                            }), i.state = {
                                status: r,
                                messages: {}
                            }, i
                        }
                        return i.__extends(o, n), o.prototype.componentDidMount = function() {
                            var t = this;
                            e.forEach(function(e) {
                                if (!e.skip || !e.skip(t.props)) {
                                    var n = t.getTopic(e.topic, t.props);
                                    t.unsubscribers[n] = t.subscribe(e, n)
                                }
                            })
                        }, o.prototype.componentWillReceiveProps = function(t) {
                            var n = this,
                                r = {},
                                a = {};
                            e.forEach(function(e) {
                                if (!e.skip || !e.skip(t)) {
                                    var i = n.getTopic(e.topic, t);
                                    r[i] || (r[i] = {
                                        isSubscribing: !0
                                    }), n.unsubscribers[i] ? a[i] = n.unsubscribers[i] : a[i] = n.subscribe(e, i)
                                }
                            }), Object.keys(this.unsubscribers).forEach(function(e) {
                                a[e] || n.unsubscribers[e]()
                            }), this.unsubscribers = a, this.setState(function(e) {
                                return {
                                    status: i.__assign({}, e.status, r)
                                }
                            })
                        }, o.prototype.componentWillUnmount = function() {
                            var e = this;
                            Object.keys(this.unsubscribers).map(function(t) {
                                return e.unsubscribers[t]()
                            })
                        }, o.prototype.render = function() {
                            var e = {
                                pubsub: {
                                    messages: this.state.messages,
                                    status: this.state.status
                                }
                            };
                            return r.createElement(t, i.__assign({}, this.props, e))
                        }, o.prototype.getTopic = function(e, t) {
                            return "string" == typeof e ? e : e(t)
                        }, o.prototype.subscribe = function(e, t) {
                            var n = this;
                            return a.k.subscribe({
                                topic: t,
                                success: function() {
                                    n.setState(function(e) {
                                        var n;
                                        return {
                                            status: i.__assign({}, e.status, (n = {}, n[t] = {
                                                isSubscribing: !1
                                            }, n))
                                        }
                                    })
                                },
                                failure: function(e) {
                                    n.setState(function(n) {
                                        var r;
                                        return {
                                            status: i.__assign({}, n.status, (r = {}, r[t] = {
                                                error: e,
                                                isSubscribing: !1
                                            }, r))
                                        }
                                    })
                                },
                                onMessage: function(t) {
                                    var r = e.mapMessageTypesToProps[t.type || ""] || e.mapMessageTypesToProps["*"];
                                    r && (e.skipMessage && e.skipMessage(t, n.props) || n.setState(function(e) {
                                        var n;
                                        return {
                                            messages: i.__assign({}, e.messages, (n = {}, n[r] = t, n))
                                        }
                                    }))
                                }
                            })
                        }, o
                    }(r.Component)
                }
            }
            n.d(t, "a", function() {
                return o
            })
        },
        xDdc: function(e, t, n) {},
        xXlL: function(e, t, n) {
            "use strict";

            function i(e) {
                return {
                    id: "" + e.id,
                    start: e.start,
                    end: e.end
                }
            }

            function r(e) {
                return {
                    __typename: "WhisperMessageEdge",
                    cursor: "" + e.data_object.id,
                    node: {
                        __typename: "WhisperMessage",
                        id: e.data_object.message_id,
                        nonce: e.data_object.nonce,
                        sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                        editedAt: null,
                        deletedAt: null,
                        content: {
                            __typename: "MessageBody",
                            content: e.data_object.body,
                            emotes: e.data_object.tags.emotes.map(function(e) {
                                return o(i(e))
                            })
                        },
                        from: {
                            __typename: "User",
                            id: "" + e.data_object.from_id
                        }
                    }
                }
            }

            function a(e) {
                return e.map(function(e) {
                    return o(i(e))
                })
            }

            function o(e) {
                return {
                    from: e.start,
                    to: e.end,
                    emoteID: e.id,
                    id: e.id + ";" + e.start + ";" + e.end,
                    setID: "0",
                    __typename: "EmbeddedEmote"
                }
            }
            n.d(t, "c", function() {
                return r
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return o
            })
        },
        yGGv: function(e, t, n) {},
        ySk3: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return s
            });
            var i = n("mrSG"),
                r = n("/7QA"),
                a = n("2xye"),
                o = n("oi4T"),
                s = function(e) {
                    var t = i.__assign({}, Object(o.a)(e), {
                        mentioned_user_display_name: e.mentionedUserDisplayName,
                        user: e.userLogin
                    });
                    r.n.track(a.SpadeEventType.ChatMentionUsed, t)
                }
        },
        yXtP: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "Chat_UpdateChatColor"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UpdateChatColorInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "updateChatColor"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "user"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "chatColor"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 120
                }
            };
            n.loc.source = {
                body: "mutation Chat_UpdateChatColor($input: UpdateChatColorInput!){\nupdateChatColor(input: $input) {\nuser {\nid\nchatColor\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        yZCp: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return m
            });
            var i = n("q1tI"),
                r = n("/7QA"),
                a = n("7TkE"),
                o = n.n(a),
                s = n("5zXJ"),
                c = n("VJHF"),
                l = n("8SX2"),
                d = n("Ue10"),
                u = (n("OXQr"), s.c + "/hgc2018/hgc-gift-chat-icon.png"),
                m = function(e) {
                    if (!(e.event.messageID && e.event.userLogin && e.event.displayName)) return null;
                    var t = i.createElement(l.a, {
                            contentID: e.event.messageID,
                            login: e.event.userLogin,
                            sourceType: e.event.sourceType
                        }, e.event.displayName),
                        n = Object(r.d)("{gifterButton}'s Cheer shared rewards to {selectedCount} others in chat.", {
                            gifterButton: t,
                            selectedCount: e.event.selectedCount
                        }, "RewardGiftNoticeLine"),
                        a = Object(r.d)("<x:link>Cheer at least {minCheerAmount} Bits to share rewards with chat!</x:link>", {
                            minCheerAmount: e.event.minCheerAmount,
                            "x:link": function(e) {
                                return i.createElement(d.T, {
                                    to: "https://blog.twitch.tv/earn-overwatch-league-loot-a494e1c21634",
                                    targetBlank: !0
                                }, e)
                            }
                        }, "RewardGiftNoticeLine"),
                        s = o.a;
                    return e.event.domain === c.c && (n = Object(r.d)("{gifterButton}'s Cheer shared Heroes Loot Chests with {selectedCount} other viewers in Chat!", {
                        gifterButton: t,
                        selectedCount: e.event.selectedCount
                    }, "RewardGiftNoticeLine"), a = Object(r.d)("<x:link>Cheer at least {minCheerAmount} Bits at once and share with Chat!</x:link>", {
                        minCheerAmount: e.event.minCheerAmount,
                        "x:link": function(e) {
                            return i.createElement(d.T, {
                                to: "",
                                targetBlank: !0
                            }, e)
                        }
                    }, "RewardGiftNoticeLine"), s = u), i.createElement(d.Va, {
                        className: "reward-gift-user-notice",
                        margin: {
                            y: .5
                        }
                    }, i.createElement(d.Va, {
                        display: d.W.Flex,
                        alignItems: d.f.Center,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, i.createElement(d.Na, {
                        margin: {
                            right: 1
                        }
                    }, i.createElement("img", {
                        className: "reward-gift-user-notice__icon",
                        src: s
                    })), i.createElement(d.V, {
                        color: d.O.Alt2
                    }, n)), e.event.minCheerAmount > 0 && i.createElement(d.Va, {
                        className: "reward-gift-user-notice__action",
                        padding: {
                            x: 1,
                            y: 1
                        }
                    }, i.createElement(d.V, {
                        bold: !0,
                        color: d.O.Link
                    }, a)))
                }
        },
        ygQa: function(e, t, n) {
            "use strict";
            n.d(t, "a", function() {
                return o
            });
            var i = n("mrSG"),
                r = n("yR8l"),
                a = n("yXtP");

            function o() {
                var e = this;
                return Object(r.a)(a, {
                    props: function(t) {
                        return {
                            updateChatColorMutation: function(n) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    return i.__generator(this, function(e) {
                                        switch (e.label) {
                                            case 0:
                                                return t.mutate ? [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            color: n
                                                        }
                                                    }
                                                })] : [3, 2];
                                            case 1:
                                                return [2, e.sent().data];
                                            case 2:
                                                throw new Error("Update chat color mutation is not ready")
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }
        },
        yzyL: function(e, t) {},
        "z+dA": function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "ChannelPage_SubscribeButton_User"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "login"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "login"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "subscriptionProducts"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "emoteSetID"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "name"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "self"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "paidUpgradePromotion"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "newPrice"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "self"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "canPrimeSubscribe"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "subscriptionBenefit"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "id"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "purchasedWithPrime"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "tier"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "paidUpgrade"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "startsAt"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }, {
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "gift"
                                                    },
                                                    arguments: [],
                                                    directives: [],
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [{
                                                            kind: "Field",
                                                            name: {
                                                                kind: "Name",
                                                                value: "isGift"
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "requestInfo"
                            },
                            arguments: [],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "countryCode"
                                    },
                                    arguments: [],
                                    directives: []
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 351
                }
            };
            n.loc.source = {
                body: "query ChannelPage_SubscribeButton_User($login: String!) {\nuser(login: $login) {\nid\ndisplayName\nsubscriptionProducts {\nid\nemoteSetID\nname\nself {\npaidUpgradePromotion {\nnewPrice\n}\n}\n}\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\npurchasedWithPrime\ntier\npaidUpgrade {\nstartsAt\n}\ngift {\nisGift\n}\n}\n}\n}\ncurrentUser {\nid\n}\nrequestInfo {\ncountryCode\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        zWFo: function(e, t, n) {},
        zixI: function(e, t) {
            var n = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "mutation",
                    name: {
                        kind: "Name",
                        value: "UnblockUser"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "input"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "UnblockUserInput"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "unblockUser"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "input"
                                    }
                                }
                            }],
                            directives: [],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "targetUser"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 100
                }
            };
            n.loc.source = {
                body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            e.exports = n
        },
        "zmH+": function(e, t, n) {},
        zmay: function(e, t, n) {
            var i = {
                kind: "Document",
                definitions: [{
                    kind: "OperationDefinition",
                    operation: "query",
                    name: {
                        kind: "Name",
                        value: "Bits_BuyCard_Offers"
                    },
                    variableDefinitions: [{
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "withChannel"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "isLoggedIn"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "Boolean"
                                }
                            }
                        }
                    }, {
                        kind: "VariableDefinition",
                        variable: {
                            kind: "Variable",
                            name: {
                                kind: "Name",
                                value: "channelLogin"
                            }
                        },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "NamedType",
                                name: {
                                    kind: "Name",
                                    value: "String"
                                }
                            }
                        }
                    }],
                    directives: [],
                    selectionSet: {
                        kind: "SelectionSet",
                        selections: [{
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "bitsOffers"
                            },
                            arguments: [],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "skip"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "isLoggedIn"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "FragmentSpread",
                                    name: {
                                        kind: "Name",
                                        value: "bitsOffersFragment"
                                    },
                                    directives: []
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "currentUser"
                            },
                            arguments: [],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "isLoggedIn"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "idSHA1"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsBalance"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "bitsOffers"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "FragmentSpread",
                                            name: {
                                                kind: "Name",
                                                value: "bitsOffersFragment"
                                            },
                                            directives: []
                                        }]
                                    }
                                }]
                            }
                        }, {
                            kind: "Field",
                            name: {
                                kind: "Name",
                                value: "user"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "channelLogin"
                                    }
                                }
                            }],
                            directives: [{
                                kind: "Directive",
                                name: {
                                    kind: "Name",
                                    value: "include"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "if"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "withChannel"
                                        }
                                    }
                                }]
                            }],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "id"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "displayName"
                                    },
                                    arguments: [],
                                    directives: []
                                }, {
                                    kind: "Field",
                                    name: {
                                        kind: "Name",
                                        value: "cheer"
                                    },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [{
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "id"
                                            },
                                            arguments: [],
                                            directives: []
                                        }, {
                                            kind: "Field",
                                            name: {
                                                kind: "Name",
                                                value: "settings"
                                            },
                                            arguments: [],
                                            directives: [],
                                            selectionSet: {
                                                kind: "SelectionSet",
                                                selections: [{
                                                    kind: "Field",
                                                    name: {
                                                        kind: "Name",
                                                        value: "cheerMinimumBits"
                                                    },
                                                    arguments: [],
                                                    directives: []
                                                }]
                                            }
                                        }]
                                    }
                                }]
                            }
                        }]
                    }
                }],
                loc: {
                    start: 0,
                    end: 440
                }
            };
            i.loc.source = {
                body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\nquery Bits_BuyCard_Offers($withChannel: Boolean! $isLoggedIn: Boolean! $channelLogin: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $channelLogin) @include(if: $withChannel) {\nid\ndisplayName\ncheer {\nid\nsettings {\ncheerMinimumBits\n}\n}\n}\n}',
                name: "GraphQL request",
                locationOffset: {
                    line: 1,
                    column: 1
                }
            };
            var r = {};
            i.definitions = i.definitions.concat(function(e) {
                return e.filter(function(e) {
                    if ("FragmentDefinition" !== e.kind) return !0;
                    var t = e.name.value;
                    return !r[t] && (r[t] = !0, !0)
                })
            }(n("hWzS").definitions)), e.exports = i
        }
    }
]);